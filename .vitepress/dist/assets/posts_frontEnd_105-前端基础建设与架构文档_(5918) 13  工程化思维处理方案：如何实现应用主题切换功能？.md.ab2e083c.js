import{_ as o,j as e,o as c,h as t,k as l,f as s,Q as p,s as n}from"./chunks/framework.d3daa342.js";const v=JSON.parse('{"title":"13工程化思维处理方案：如何实现应用主题切换功能？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5918) 13  工程化思维处理方案：如何实现应用主题切换功能？.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5918) 13  工程化思维处理方案：如何实现应用主题切换功能？.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5918) 13  工程化思维处理方案：如何实现应用主题切换功能？.md"},E=p(`<h1 id="_13工程化思维处理方案-如何实现应用主题切换功能" tabindex="-1">13工程化思维处理方案：如何实现应用主题切换功能？ <a class="header-anchor" href="#_13工程化思维处理方案-如何实现应用主题切换功能" aria-label="Permalink to &quot;13工程化思维处理方案：如何实现应用主题切换功能？&quot;">​</a></h1><p>前几讲内容，我们主要围绕 JavaScript 和项目相关工程化方案展开。实际上，在前端基础建设中，样式方案的处理也必不可少。这一讲，就让我们设计一个工程化主题切换功能，并梳理现代前端样式的解决方案。</p><h3 id="设计一个主题切换工程架构" tabindex="-1">设计一个主题切换工程架构 <a class="header-anchor" href="#设计一个主题切换工程架构" aria-label="Permalink to &quot;设计一个主题切换工程架构&quot;">​</a></h3><p>随着 iOS 13 引入 Dark Mode（深色模式），各大应用和网站也都开始支持深色模式。相比传统的页面配色方案，深色模式具有较好的降噪性，也能让用户的眼睛看内容更舒适。</p><p>那么对于前端来说，如何高效地支持深色模式呢？这里的高效就是指<strong>工程化、自动化方案</strong>，不需要开发中 hard coding。</p><p>在介绍具体方案前，我们先来了解一个必备概念和工程化神器------PostCSS。</p><h4 id="postcss-原理和相关插件能力" tabindex="-1">PostCSS 原理和相关插件能力 <a class="header-anchor" href="#postcss-原理和相关插件能力" aria-label="Permalink to &quot;PostCSS 原理和相关插件能力&quot;">​</a></h4><p>简单来说， PostCSS 是一款编译 CSS 的工具。</p><blockquote><p>PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support variables and mixins, transpile future CSS syntax, inline images, and more.</p></blockquote><p>如上介绍，postCSS 具有良好的<strong>插件性</strong> ，其插件也是使用 JavaScript 编写的，非常有利于开发者扩展。基于前几节介绍的 Babel 思想，对比 JavaScript 的编译器，我们不难猜出 PostCSS 的工作原理：<strong>PostCSS 接收一个 CSS 文件，并提供了插件机制，提供给开发者分析、修改 CSS 的规则，具体实现方式也是基于 AST 技术</strong>。</p><p>而我们这一讲介绍的工程化主题切换架构，也离不开 PostCSS 的基础能力。我们马上来设计一个相关结构能力。</p><h4 id="架构思路总结" tabindex="-1">架构思路总结 <a class="header-anchor" href="#架构思路总结" aria-label="Permalink to &quot;架构思路总结&quot;">​</a></h4><p>主题切换------社区上介绍的方案往往通过 CSS 变量（CSS 自定义属性）来实现，关于 CSS 变量的介绍，相对基础，这里我们只贴出知识链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noreferrer">CSS 自定义属性</a>。</p><p>这无疑是一个很好的思路，但是作为架构来说，<strong>使用 CSS 自定义属性------只是其中一个环节</strong>。站在更高、更中台化的视觉思考，我们还需要设计：</p><ul><li><p>如何维护不同主题色值；</p></li><li><p>谁来维护不同主题色值；</p></li><li><p>研发和设计之间，如何保持不同主题色值的同步沟通；</p></li><li><p>如何最小化前端工程师的开发量，不需要 hard coding 两份颜色数值；</p></li><li><p>如何做到一键切换时的性能最优；</p></li><li><p>如何配合 JavaScript 状态管理，同步主题切换的信号。</p></li></ul><p>基于以上考虑，以一个超链接样式为例，我们希望做到在开发时，编写：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a {</span></span>
<span class="line"><span style="color:#E1E4E8;">  color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cc</span><span style="color:#E1E4E8;">(GBK05A);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a {</span></span>
<span class="line"><span style="color:#24292E;">  color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cc</span><span style="color:#24292E;">(GBK05A);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样的代码，就能一劳永逸------直接支持两套（light/dark）主题模式。也就是说，在应用编译时，上述代码预期被编译为下面这样的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a {</span></span>
<span class="line"><span style="color:#E1E4E8;">  color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">646464</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">html[data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">theme</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;dark&#39;</span><span style="color:#E1E4E8;">] a {</span></span>
<span class="line"><span style="color:#E1E4E8;">  color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">808080</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a {</span></span>
<span class="line"><span style="color:#24292E;">  color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">646464</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">html[data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">theme</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;dark&#39;</span><span style="color:#24292E;">] a {</span></span>
<span class="line"><span style="color:#24292E;">  color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">808080</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们来看看在编译时，构建环节发生了什么：</p><ul><li><p><code>cc(GBK05A)</code>这样的声明，被编译为<code>#646464</code>；</p></li><li><p>也就是说，<code>cc</code>是一个 CSS function，而<code>GBK05A</code>是一组色值，分别包含了 light 和 dark 两种主题的颜色；</p></li><li><p>同时在 HTML 根节点上，添加属性选择器<code>data-theme=&#39;dark&#39;</code>，并添加<code>a</code>标签 color 色值样式为<code>#808080</code>。</p></li></ul><p>我们设想，用户点击&quot;切换主题&quot;按钮时，首先<strong>通过 JavaScript 将 HTML 根节点标签添加</strong> <code>data-theme</code>为<code>dark</code>的属性值，这时<strong>CSS 选择器</strong> <code>html[data-theme=&#39;dark&#39;] a</code>将起作用，实现了样式的切换。</p><p>结合下图理解：</p>`,23),y=p(`<p>回到我们的架构设计中，如何在构建时完成 CSS 的样式编译转换呢？答案指向了 PostCSS。我们来盘点一下具体架构步骤。</p><ul><li><p>首先编写一个名为 postcss-theme-colors 的 PostCSS 插件，实现上述编译过程。</p></li><li><p>维护一个色值，结合上例（这里以 YML 格式为例）就是：</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GBK05A</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [BK05, BK06]</span></span>
<span class="line"><span style="color:#E1E4E8;">BK05</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#808080&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">BK06</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#999999&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GBK05A</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [BK05, BK06]</span></span>
<span class="line"><span style="color:#24292E;">BK05</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#808080&#39;</span></span>
<span class="line"><span style="color:#24292E;">BK06</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#999999&#39;</span></span></code></pre></div><p>postcss-theme-colors 需要：</p><ol><li><p>识别<code>cc()</code>方法；</p></li><li><p>读取色值；</p></li><li><p>通过色值，对<code>cc()</code>方法求值，得到两种颜色，分别对应 dark 和 light 模式；</p></li><li><p>原地编译 CSS 中的颜色为 light 模式色值；</p></li><li><p>同时 dark 模式色值写到 HTML 节点上。</p></li></ol><p>这里需要补充的是，为了将 dark 模式色值按照<code>html[data-theme=&#39;dark&#39;]</code>方式写到 HTML 节点上，我们使用了另外两个 PostCSS 插件完成：</p><ul><li><p><a href="https://www.npmjs.com/package/postcss-nested" target="_blank" rel="noreferrer">PostCSS Nested</a></p></li><li><p><a href="https://www.npmjs.com/package/postcss-nesting" target="_blank" rel="noreferrer">PostCSS Nesting</a></p></li></ul><p>整体架构设计，总结为下图：</p>`,8),i=p(`<p>PostCSS 架构转换设计</p><h3 id="主题色切换架构实现" tabindex="-1">主题色切换架构实现 <a class="header-anchor" href="#主题色切换架构实现" aria-label="Permalink to &quot;主题色切换架构实现&quot;">​</a></h3><p>有了架构，这部分我们就来实现架构环节中的重点环节。首先，我们需要了解 PostCSS 插件体系。</p><h4 id="postcss-插件体系" tabindex="-1">PostCSS 插件体系 <a class="header-anchor" href="#postcss-插件体系" aria-label="Permalink to &quot;PostCSS 插件体系&quot;">​</a></h4><p>PostCSS 具有天生的插件化体系，开发者一般很容易上手插件开发：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> postcss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;postcss&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> postcss.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;pluginname&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (opts) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Work with options here</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (css, result) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Transform the CSS AST</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> postcss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;postcss&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> postcss.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;pluginname&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (opts) {</span></span>
<span class="line"><span style="color:#24292E;">  opts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Work with options here</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (css, result) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Transform the CSS AST</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>上面代码是一个典型的 PostCSS 插件编写模版。一个 PostCSS 就是一个 Node.js 模块，开发者调用<code>postcss.plugin</code>（源码链接定义在<a href="https://github.com/postcss/postcss/blob/main/lib/postcss.js#L28" target="_blank" rel="noreferrer">postcss.plugin</a>中 ）工厂方法返回一个插件实体，形如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    postcssPlugin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;PLUGIN_NAME&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    Root (root, postcss) {</span></span>
<span class="line"><span style="color:#6A737D;">      // Transform CSS AST here</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    Declaration (decl, postcss) {</span></span>
<span class="line"><span style="color:#6A737D;">      // The faster way to find Declaration node</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    Declaration: {</span></span>
<span class="line"><span style="color:#6A737D;">      color: (decl, postcss) {</span></span>
<span class="line"><span style="color:#6A737D;">        // The fastest way find Declaration node if you know property name</span></span>
<span class="line"><span style="color:#6A737D;">      }</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    postcssPlugin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;PLUGIN_NAME&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    Root (root, postcss) {</span></span>
<span class="line"><span style="color:#6A737D;">      // Transform CSS AST here</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    Declaration (decl, postcss) {</span></span>
<span class="line"><span style="color:#6A737D;">      // The faster way to find Declaration node</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    Declaration: {</span></span>
<span class="line"><span style="color:#6A737D;">      color: (decl, postcss) {</span></span>
<span class="line"><span style="color:#6A737D;">        // The fastest way find Declaration node if you know property name</span></span>
<span class="line"><span style="color:#6A737D;">      }</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在编写 PostCSS 插件时，我们可以直接使用<code>postcss.plugin</code>方法完成实际开发。接下来，我们就开始动手实现 postcss-theme-colors。</p><h4 id="动手实现-postcss-theme-colors" tabindex="-1">动手实现 postcss-theme-colors <a class="header-anchor" href="#动手实现-postcss-theme-colors" aria-label="Permalink to &quot;动手实现 postcss-theme-colors&quot;">​</a></h4><p>上述内容，在 PostCSS 插件设计中，我们看到了清晰的 AST 设计痕迹，经过之前小节的学习，我们应该对于 AST 不再陌生。根据插件代码骨架，我们加入具体实现逻辑，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> postcss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;postcss&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> defaults </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  function</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cc&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  groups</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  colors</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  useCustomProperties</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  darkThemeSelector</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;html[data-theme=&quot;dark&quot;]&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  nestingPlugin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolveColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (options, theme, group, defaultValue) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [lightColor, darkColor] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.groups[group] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> theme </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dark&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> darkColor </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> lightColor</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">color) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> defaultValue</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.useCustomProperties) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> color.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> \`</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;">(\${color})\` </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">\${color})\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> options.colors[color] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> defaultValue</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> postcss.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;postcss-theme-colors&#39;</span><span style="color:#E1E4E8;">, options </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({}, defaults, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取色值函数（默认为 cc()）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> reGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(\`\\\\b\${options.function}\\\\(([</span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">)]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">)\\\\)\`, </span><span style="color:#9ECBFF;">&#39;g&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  return (style, result) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断 PostCSS 工作流程中，是否使用了某些 plugins</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hasPlugin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      name.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">/^</span><span style="color:#E1E4E8;">postcss</span><span style="color:#F97583;">-/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> options.nestingPlugin </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      result.processor.plugins.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.postcssPlugin </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取最终 CSS 值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (value, theme) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(reGroup, (match, group) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveColor</span><span style="color:#E1E4E8;">(options, theme, group, match)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历 CSS 声明</span></span>
<span class="line"><span style="color:#E1E4E8;">    style.</span><span style="color:#B392F0;">walkDecls</span><span style="color:#E1E4E8;">(decl </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> decl.value</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果不含有色值函数调用，则提前退出</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">value </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">reGroup.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> lightValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(value, </span><span style="color:#9ECBFF;">&#39;light&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> darkValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(value, </span><span style="color:#9ECBFF;">&#39;dark&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> darkDecl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> decl.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">({value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> darkValue})</span></span>
<span class="line"><span style="color:#E1E4E8;">      let darkRule</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 使用插件，生成 dark 样式</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">hasPlugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;postcss-nesting&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        darkRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> postcss.</span><span style="color:#B392F0;">atRule</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nest&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          params</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`\${options.darkThemeSelector} </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">\`,</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">hasPlugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;postcss-nested&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        darkRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> postcss.</span><span style="color:#B392F0;">rule</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          selector</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`\${options.darkThemeSelector} </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">\`,</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        decl.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(result, \`</span><span style="color:#B392F0;">Plugin</span><span style="color:#E1E4E8;">(postcss</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nesting or postcss</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nested) not found\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 添加 dark 样式到目标 HTML 节点中</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (darkRule) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        darkRule.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(darkDecl)</span></span>
<span class="line"><span style="color:#E1E4E8;">        decl.</span><span style="color:#B392F0;">after</span><span style="color:#E1E4E8;">(darkRule)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> lightDecl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> decl.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">({value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> lightValue})</span></span>
<span class="line"><span style="color:#E1E4E8;">      decl.</span><span style="color:#B392F0;">replaceWith</span><span style="color:#E1E4E8;">(lightDecl)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> postcss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;postcss&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> defaults </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  function</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cc&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  groups</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">  colors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">  useCustomProperties</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  darkThemeSelector</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;html[data-theme=&quot;dark&quot;]&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  nestingPlugin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolveColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (options, theme, group, defaultValue) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [lightColor, darkColor] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.groups[group] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> theme </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dark&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> darkColor </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> lightColor</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">color) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> defaultValue</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.useCustomProperties) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> color.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> \`</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;">(\${color})\` </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">\${color})\`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> options.colors[color] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> defaultValue</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> postcss.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;postcss-theme-colors&#39;</span><span style="color:#24292E;">, options </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({}, defaults, options)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取色值函数（默认为 cc()）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> reGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(\`\\\\b\${options.function}\\\\(([</span><span style="color:#D73A49;">^</span><span style="color:#24292E;">)]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">)\\\\)\`, </span><span style="color:#032F62;">&#39;g&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  return (style, result) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断 PostCSS 工作流程中，是否使用了某些 plugins</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hasPlugin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      name.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">/^</span><span style="color:#24292E;">postcss</span><span style="color:#D73A49;">-/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> options.nestingPlugin </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      result.processor.plugins.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.postcssPlugin </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取最终 CSS 值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (value, theme) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(reGroup, (match, group) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveColor</span><span style="color:#24292E;">(options, theme, group, match)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历 CSS 声明</span></span>
<span class="line"><span style="color:#24292E;">    style.</span><span style="color:#6F42C1;">walkDecls</span><span style="color:#24292E;">(decl </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> decl.value</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果不含有色值函数调用，则提前退出</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">value </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">reGroup.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> lightValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(value, </span><span style="color:#032F62;">&#39;light&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> darkValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(value, </span><span style="color:#032F62;">&#39;dark&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> darkDecl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> decl.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">({value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> darkValue})</span></span>
<span class="line"><span style="color:#24292E;">      let darkRule</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 使用插件，生成 dark 样式</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">hasPlugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;postcss-nesting&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        darkRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> postcss.</span><span style="color:#6F42C1;">atRule</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nest&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          params</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`\${options.darkThemeSelector} </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">\`,</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">hasPlugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;postcss-nested&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        darkRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> postcss.</span><span style="color:#6F42C1;">rule</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          selector</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`\${options.darkThemeSelector} </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">\`,</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        decl.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(result, \`</span><span style="color:#6F42C1;">Plugin</span><span style="color:#24292E;">(postcss</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nesting or postcss</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nested) not found\`)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 添加 dark 样式到目标 HTML 节点中</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (darkRule) {</span></span>
<span class="line"><span style="color:#24292E;">        darkRule.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(darkDecl)</span></span>
<span class="line"><span style="color:#24292E;">        decl.</span><span style="color:#6F42C1;">after</span><span style="color:#24292E;">(darkRule)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> lightDecl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> decl.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">({value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> lightValue})</span></span>
<span class="line"><span style="color:#24292E;">      decl.</span><span style="color:#6F42C1;">replaceWith</span><span style="color:#24292E;">(lightDecl)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>上面代码我加入了相关注释，整体逻辑并不难理解。理解了这部分源码，使用方式也就呼之欲出了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> colors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  C01</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#eee&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  C02</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#111&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> groups </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  G01</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;C01&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;C02&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">postcss</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;postcss-theme-colors&#39;</span><span style="color:#E1E4E8;">)({colors, groups}),</span></span>
<span class="line"><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(css)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> colors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  C01</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#eee&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  C02</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#111&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> groups </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  G01</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;C01&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;C02&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">postcss</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;postcss-theme-colors&#39;</span><span style="color:#24292E;">)({colors, groups}),</span></span>
<span class="line"><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(css)</span></span></code></pre></div><p>通过上述操作，我们实现了 postcss-theme-colors 插件，整体架构也就完成了大半。接下来，我们将继续完善，最终打造出一个更符合基础建设要求的方案。</p><h4 id="架构平台化-色组-色值平台设计" tabindex="-1">架构平台化------色组 &amp; 色值平台设计 <a class="header-anchor" href="#架构平台化-色组-色值平台设计" aria-label="Permalink to &quot;架构平台化------色组 \\&amp; 色值平台设计&quot;">​</a></h4><p>上面的使用示例中，我们采用了 hard coding 的方式，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> colors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  C01</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#eee&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  C02</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#111&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> groups </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  G01</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;C01&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;C02&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> colors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  C01</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#eee&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  C02</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#111&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> groups </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  G01</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;C01&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;C02&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>声明了<code>colors</code>和<code>groups</code>两个常量，并传递给 postcss-theme-colors 插件。<strong>其中</strong> <code>groups</code>变量声明了色组的概念，比如 group1 命名为 G01，它对应了 C01（日间色），C02（夜间色）两个色值。这样的好处显而易见。</p><ul><li><p>我们将 postcss-theme-colors 插件和色值声明解藕， postcss-theme-colors 插件并不关系颜色，而是接受<code>colors</code>和<code>groups</code>变量。</p></li><li><p>色值和色组解耦：</p><ol><li><p><code>colors</code>维护具体色值；</p></li><li><p><code>groups</code>维护具体色组。</p></li></ol></li></ul><p>这样一来，如前文一个超链接样式声明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a {</span></span>
<span class="line"><span style="color:#E1E4E8;">  color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cc</span><span style="color:#E1E4E8;">(GBK05A);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a {</span></span>
<span class="line"><span style="color:#24292E;">  color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cc</span><span style="color:#24292E;">(GBK05A);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上代码，我们在业务开发中，直接声明了&quot;使用 GBK05A 这个色组&quot;。<strong>业务开发者不需要关心这个色组在 light/dark 模式下分别对应哪些色值。而设计团队可以专门维护色组和色值，最终只提供给开发者色组即可</strong>。</p><p>在此基础上，我们完全可以抽象出一个色组 &amp; 色值平台，方便设计团队更新内容。这个平台可以以 JSON 或者 YML 任何形式存储色值色组对应关系，方便各个团队协作。</p><p>在前文提到的主题切换设计架构图的基础上，我们扩充其为平台化的解决方案：</p>`,25),d=n("h3",{id:"总结",tabindex:"-1"},[s("总结 "),n("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),u=n("p",null,'这一讲我们没有聚焦具体 CSS 样式的用法，而是从更高的角度，梳理了现代化前端基础建设当中的样式相关工程方案。并从"主题切换"这一话题，联动了 PostCSS、Webpack，甚至前端状态管理流程。',-1),F=n("p",null,[s("这里，我想给大家留几个思考问题，"),n("a",{href:"https://github.com/postcss/postcss-custom-properties",target:"_blank",rel:"noreferrer"},"postcss-custom-properties"),s(" 有什么作用，它又是如何实现的？基于 CSS 变量新特性，我们可以如何优化本讲中的 postcss-theme-colors 插件？（答案已经在源代码中了。）")],-1);function g(h,A,D,C,m,S){const a=e("Image");return c(),t("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/06/EE/Cip5yGAGm3eACd70AAyNczVBKYI564.png"}),s(),y,l(a,{alt:"Lark20210121-141646.png",src:"https://s0.lgstatic.com/i/image2/M01/07/BE/CgpVE2AJHHCAbXrZAAH5kg-FP4Q349.png"}),s(),i,l(a,{alt:"Lark20210121-141643.png",src:"https://s0.lgstatic.com/i/image2/M01/07/BE/CgpVE2AJHIOAU_CfAAIVxX-eQtQ102.png"}),s(),d,u,l(a,{alt:"Lark20210121-150848.png",src:"https://s0.lgstatic.com/i/image2/M01/07/C1/Cip5yGAJKOSASM3OAAatGP55avo761.png"}),s(),F])}const _=o(r,[["render",g]]);export{v as __pageData,_ as default};
