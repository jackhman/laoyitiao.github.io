import{_ as a,j as p,o,g as l,k as e,Q as s}from"./chunks/framework.e0c66c3f.js";const C=JSON.parse('{"title":"使用 Go Modules 管理项目依赖 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3806) 08  如何基于 Go-kit 开发 Web 应用：从接口层到业务层再到数据层.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3806) 08  如何基于 Go-kit 开发 Web 应用：从接口层到业务层再到数据层.md","lastUpdated":1696338709000}'),t={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3806) 08  如何基于 Go-kit 开发 Web 应用：从接口层到业务层再到数据层.md"},r=s(`<p>在前面两个课时，我们回顾了 Go 的基础语法和 Go 的并发编程相关的知识，相信你对如何编写一个简单的 Go 程序已经有了足够的知识积累。但是你可能并没有完整开发过一个 Go 应用项目，因此本课时我们就通过开发一个 User Web 应用来学习如何进行 Go Web 项目开发。</p><h3 id="使用-go-modules-管理项目依赖" tabindex="-1">使用 Go Modules 管理项目依赖 <a class="header-anchor" href="#使用-go-modules-管理项目依赖" aria-label="Permalink to &quot;使用 Go Modules 管理项目依赖&quot;">​</a></h3><p>在前面的课时中，我们演示的 Go 例子基本都是一个简单的 main 函数，运行一小段逻辑代码，并没有涉及引入包外代码和组织 Go 项目内包依赖的方法。为了在编写项目代码时，能够引入其他开发者开源的优秀工具包，因此在进行具体的项目开发之前，我们有必要先介绍下 <strong>Go 语言的依赖包管理工具------Go Modules</strong> 。</p><p>在 Go Modules 被正式推出之前，我们一般是在<strong>工作目录</strong>下组织 Go 项目的开发代码。工作目录一般由 3 个子目录组成：</p><ul><li><p>src，项目的源代码或者外部依赖的源代码以包的形式存放于此，一个目录即一个包；</p></li><li><p>pkg，编译后产生的类库存放于此；</p></li><li><p>bin，编译后产生的可执行文件存放于此。</p></li></ul><p>我们一般通过 GOPATH 环境变量指定 Go 项目的工作目录。GOPATH 默认是与 GOROOT 的值一致，指向 Go 的安装目录，在实际开发中可以根据项目需求指定不同的 GOPATH，从而隔离不同项目之间的开发空间。</p><p>Go 在 1.11 之后推出了依赖包管理工具 Go Modules，使得开发者可以在 GOPATH 指定的目录外组织项目代码。使用 Go Modules，Go 项目中无须包含工作目录中固定的 3 个子目录。<strong>通过 go mod 命令即可创建一个新的 Module</strong> ：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> mod init moduleName</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> mod init moduleName</span></span></code></pre></div><p>比如，我们在 micro-go-course 目录下创建一个新的 Moudule：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> mod init github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">longjoy</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-go-</span><span style="color:#E1E4E8;">course </span></span>
<span class="line"><span style="color:#6A737D;">// output </span></span>
<span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;">: creating new </span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;">.mod: module github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">longjoy</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-go-</span><span style="color:#E1E4E8;">course</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> mod init github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">longjoy</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-go-</span><span style="color:#24292E;">course </span></span>
<span class="line"><span style="color:#6A737D;">// output </span></span>
<span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;">: creating new </span><span style="color:#D73A49;">go</span><span style="color:#24292E;">.mod: module github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">longjoy</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-go-</span><span style="color:#24292E;">course</span></span></code></pre></div><p>后续的输出告诉我们名为 github.com/longjoy/micro-go-course 的 Module 生成成功，在 micro-go-course 目录下会生成一个 go.mod 的文件，内容如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">longjoy</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-go-</span><span style="color:#E1E4E8;">course </span></span>
<span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.14</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">longjoy</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-go-</span><span style="color:#24292E;">course </span></span>
<span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.14</span></span></code></pre></div><p>go.mod 文件生成之后，会被 go toolchain 掌控维护，在我们执行 go run、go build、go get、go mod 等各类命令时自动修改和维护 go.mod 文件中的依赖内容。</p><p>我们可以通过 Go Modules 引入远程依赖包，如 Git Hub 中开源的 Go 开发工具包。但可能会由于网络环境问题，我们在拉取 GitHub 中的开发依赖包时，有时会失败，在此我推荐使用<strong>七牛云搭建的 GOPROXY</strong>，可以方便我们在开发中更好地拉取远程依赖包。在项目目录下执行以下命令即可配置新的 GOPROXY：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> env </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">w GOPROXY</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">https:</span><span style="color:#6A737D;">//goproxy.cn,direct</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> env </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">w GOPROXY</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">https:</span><span style="color:#6A737D;">//goproxy.cn,direct</span></span></code></pre></div><p>比如我们的项目需要引入 gorm 依赖连接 My SQL 数据库， 这时可以在 micro-go-course 目录下执行如下的 go get 命令 ：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> get  github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">jinzhu</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gorm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> get  github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">jinzhu</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gorm</span></span></code></pre></div><p>go get 命令将会使用 Git 等代码工具远程获取代码包，并自动完成编译和安装到 GOPATH/bin 和 GOPATH/pkg 目录下。命令执行结束后我们会发现 go.mod 文件发生如下改变：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">longjoy</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-go-</span><span style="color:#E1E4E8;">course </span></span>
<span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.14</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">require github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">jinzhu</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gorm v1.</span><span style="color:#79B8FF;">9.14</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// indirect</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">longjoy</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-go-</span><span style="color:#24292E;">course </span></span>
<span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.14</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">require github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">jinzhu</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gorm v1.</span><span style="color:#005CC5;">9.14</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// indirect</span></span></code></pre></div><p>上述 require 关键字为项目引入版本是 v1.9.14 的 gorm 依赖包，该依赖包可以在开发中引入使用。在 go.mod 文件中，还存在 replace 和 exclude 关键字，它们分别用于替换依赖模块和忽略依赖模块。</p><p>除了 <strong>go mod init</strong> ，还有 <strong>go mod download</strong> 和 <strong>go mod tidy</strong> 两个 Go Modules 常用命令。其中，go mod download 命令可以在我们手动修改 go.mod 文件后，手动更新项目的依赖关系；go mod tidy 与 go mod download 命令类似，但不同的是它会移除掉 go.mod 中没被使用的 require 模块。</p><h3 id="一个基于-go-kit-简单的-user-应用" tabindex="-1">一个基于 Go-kit 简单的 User 应用 <a class="header-anchor" href="#一个基于-go-kit-简单的-user-应用" aria-label="Permalink to &quot;一个基于 Go-kit 简单的 User 应用&quot;">​</a></h3><p>接下来我们就基于 Go-kit 框架开发一个简单的 User 应用，提供用户注册、登录等 HTTP 接口，项目详细代码我已经放到 GitHub 上了（<a href="https://github.com/longjoy/micro-go-course" target="_blank" rel="noreferrer">https://github.com/longjoy/micro-go-course</a>），你可以参考下。</p><p>在前面的课程中，我们介绍过 Go-kit <strong>是一套强大的微服务开发工具集</strong>，用于指导开发人员解决分布式系统开发过程中所遇到的问题，帮助开发人员更专注于业务开发。Go-kit 推荐使用 transport、endpoint 和 service 3 层结构来组织项目，它们的作用分别为：</p><ul><li><p>transport 层，指定项目提供服务的方式，比如 HTTP 或者 gRPC 等 。</p></li><li><p>endpoint 层，负责接收请求并返回响应。对于每一个服务接口，endpoint 层都使用一个抽象的 Endpoint 来表示 ，我们可以为每一个 Endpoint 装饰 Go-kit 提供的附加功能，如日志记录、限流、熔断等。</p></li><li><p>service 层，提供具体的业务实现接口，endpoint 层中的 Endpoint 通过调用 service 层的接口方法处理请求。</p></li></ul><p>User 应用的项目结构如下图所示：</p>`,26),c=s(`<p>由图我们可以看到 User 应用的项目结构分别由以下&quot;包&quot;组成：</p><ul><li><p>dao 包，提供 MySQL 数据层持久化能力；</p></li><li><p>endpoint 包，负责接收请求，并调用 service 包中的业务接口处理请求后返回响应；</p></li><li><p>redis 包，提供 Redis 数据层操作能力；</p></li><li><p>service 包，提供主要业务实现接口；</p></li><li><p>transport 包，对外暴露项目的服务接口；</p></li><li><p>main，应用主入口。</p></li></ul><p>在具体进行开发之前，建议你使用 go mod 初始化项目，并使用 go get 引入以下依赖包：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/go-</span><span style="color:#E1E4E8;">kit</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">kit@v0.</span><span style="color:#79B8FF;">10.0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Go -k it 框架 </span></span>
<span class="line"><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/go-</span><span style="color:#E1E4E8;">redsync</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">redsync@v1.</span><span style="color:#79B8FF;">4.2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Redis 分布式锁 </span></span>
<span class="line"><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/go-</span><span style="color:#E1E4E8;">sql</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">driver</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mysql@v1.</span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// mysql 驱动 </span></span>
<span class="line"><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gomodule</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">redigo@v2.</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">incompatible </span><span style="color:#6A737D;">// redis 客户端 </span></span>
<span class="line"><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gorilla</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mux@v1.</span><span style="color:#79B8FF;">7.4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// mux 路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">jinzhu</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gorm@v1.</span><span style="color:#79B8FF;">9.14</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// gorm mysql orm 框架</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/go-</span><span style="color:#24292E;">kit</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">kit@v0.</span><span style="color:#005CC5;">10.0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Go -k it 框架 </span></span>
<span class="line"><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/go-</span><span style="color:#24292E;">redsync</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">redsync@v1.</span><span style="color:#005CC5;">4.2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Redis 分布式锁 </span></span>
<span class="line"><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/go-</span><span style="color:#24292E;">sql</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">driver</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mysql@v1.</span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// mysql 驱动 </span></span>
<span class="line"><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gomodule</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">redigo@v2.</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">incompatible </span><span style="color:#6A737D;">// redis 客户端 </span></span>
<span class="line"><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gorilla</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mux@v1.</span><span style="color:#005CC5;">7.4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// mux 路由 </span></span>
<span class="line"><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">jinzhu</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gorm@v1.</span><span style="color:#005CC5;">9.14</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// gorm mysql orm 框架</span></span></code></pre></div><p>接下来我们就按照 service、endpoint、transport 和 main 的顺序构建整个项目。</p><p><strong>service</strong> 包中主要提供用户服务的业务接口方法。Go 中可以通过 type 和 interface 关键字定义接口，接口代表了调用方和实现方共同遵守的协议，其内定义一系列将要被实现的函数。在 Go 中，一般使用结构体实现接口，如 service 包中定义的 UserService 接口由 UserServiceImpl 结构体实现：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#6A737D;">// 登录接口 </span></span>
<span class="line"><span style="color:#79B8FF;">Login</span><span style="color:#E1E4E8;">(ctx context.Context, email, password </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserInfoDTO, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#6A737D;">// 注册接口 </span></span>
<span class="line"><span style="color:#79B8FF;">Register</span><span style="color:#E1E4E8;">(ctx context.Context, vo </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">RegisterUserVO)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserInfoDTO, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoDTO</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">ID </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;id&quot;\`</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Username </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;username&quot;\`</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Email </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;email&quot;\`</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">userDAO dao.UserDAO </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (userService </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserServiceImpl) </span><span style="color:#B392F0;">Login</span><span style="color:#E1E4E8;">(ctx context.Context, email, password </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserInfoDTO, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)  { </span></span>
<span class="line"><span style="color:#6A737D;">// ... </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (userService </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserServiceImpl)  </span><span style="color:#B392F0;">Register</span><span style="color:#E1E4E8;">(ctx context.Context, vo </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">RegisterUserVO)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserInfoDTO, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">){ </span></span>
<span class="line"><span style="color:#6A737D;">// ... </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#6A737D;">// 登录接口 </span></span>
<span class="line"><span style="color:#005CC5;">Login</span><span style="color:#24292E;">(ctx context.Context, email, password </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserInfoDTO, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#6A737D;">// 注册接口 </span></span>
<span class="line"><span style="color:#005CC5;">Register</span><span style="color:#24292E;">(ctx context.Context, vo </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">RegisterUserVO)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserInfoDTO, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoDTO</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">ID </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;id&quot;\`</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Username </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;username&quot;\`</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Email </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;email&quot;\`</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">userDAO dao.UserDAO </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (userService </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserServiceImpl) </span><span style="color:#6F42C1;">Login</span><span style="color:#24292E;">(ctx context.Context, email, password </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserInfoDTO, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)  { </span></span>
<span class="line"><span style="color:#6A737D;">// ... </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (userService </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserServiceImpl)  </span><span style="color:#6F42C1;">Register</span><span style="color:#24292E;">(ctx context.Context, vo </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">RegisterUserVO)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserInfoDTO, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#6A737D;">// ... </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Go 中，我们可以为一个函数指定其唯一的<strong>接收器</strong> ，接收器可以为任意类型，具备接收器的函数在 Go 中被称作方法。接收器类似面向对象语言中的 this 或者 self，我们可以在方法内部直接使用和修改接收器中的相关属性。<strong>接收器可以分为指针类型和非指针类型</strong>，在方法内部对指针类型的接收器修改将会直接反馈到原接收器，而非指针类型的接收器在方法中被操作的数据为原接收器的值拷贝，对其修改并不会影响到原接收器的数据。</p><p>在具体使用时可以根据需要指定接收器的类型，比如当接收器占用内存较大或者需要对原接收器的属性进行修改时，可以使用指针类型接收器；当接收器占用内存较小，且方法只会读取接收器内的属性时，可以采用非指针类型接收器。在上面 UserService 接口的实现中，我们指定了 UserServiceImpl 接收器类型为指针类型。</p><p>Go 中接口属于非侵入式设计，要实现接口仅需满足以下两个条件：</p><ul><li><p>接口中所有方法均被实现；</p></li><li><p>接收器添加的方法签名和接口的方法签名完全一致。</p></li></ul><p>在上述代码中，UserServiceImpl 结构体就完全实现了 UserService 接口中定义的方法，因此可以说 UserServiceImpl 结构体实现了 UserService 接口。</p><p>在 UserInfoDTO 结构体的定义中，我们还使用了 StructTag 为结构体内的字段添加额外的信息。StructTag 一般由一个或者多个键值对组成，用来表述结构体中字段可携带的额外信息。UserInfoDTO 中 json 键类的 StructTag 说明了该字段在 JSON 序列化时的名称，比如 ID 在序列化时会变为 id。</p><p>在 <strong>endpoint</strong> 包中，我们需要构建 RegisterEndpoint 和 LoginEndpoint，将请求转化为 UserService 接口可以处理的参数，并将处理的结果封装为对应的 response 结构体返回给 transport 包。如下代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserEndpoints</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">RegisterEndpoint  endpoint.Endpoint </span></span>
<span class="line"><span style="color:#E1E4E8;">LoginEndpoint endpoint.Endpoint </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoginRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">Email </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Password </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoginResponse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">UserInfo </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">service.UserInfoDTO </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeLoginEndpoint</span><span style="color:#E1E4E8;">(userService service.UserService) endpoint.Endpoint { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 解析LoginRequest中的参数传递给 UserService.Login 方法处理并将处理结果封装为 LoginResponse 返回 </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegisterRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">Username </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Email </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Password </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegisterResponse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">UserInfo </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">service.UserInfoDTO </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeRegisterEndpoint</span><span style="color:#E1E4E8;">(userService service.UserService) endpoint.Endpoint { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 解析RegisterRequest中的参数传递给 UserService.Register 方法处理并将处理结果封装为 RegisterResponse 返回 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserEndpoints</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">RegisterEndpoint  endpoint.Endpoint </span></span>
<span class="line"><span style="color:#24292E;">LoginEndpoint endpoint.Endpoint </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoginRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">Email </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Password </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoginResponse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">UserInfo </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">service.UserInfoDTO </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeLoginEndpoint</span><span style="color:#24292E;">(userService service.UserService) endpoint.Endpoint { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 解析LoginRequest中的参数传递给 UserService.Login 方法处理并将处理结果封装为 LoginResponse 返回 </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegisterRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">Username </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Email </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Password </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegisterResponse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">UserInfo </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">service.UserInfoDTO </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeRegisterEndpoint</span><span style="color:#24292E;">(userService service.UserService) endpoint.Endpoint { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 解析RegisterRequest中的参数传递给 UserService.Register 方法处理并将处理结果封装为 RegisterResponse 返回 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Endpoint 代表了一个通用的函数原型，负责接收请求，处理请求，并返回结果。因为 Endpoint 的函数形式是固定的，所以我们可以在外层给 Endpoint 装饰一些额外的能力，比如熔断、日志、限流、负载均衡等能力，这些能力在 Go-kit 框架中都有相应的 Endpoint 装饰器。</p><p>在 <strong>transport</strong> 包中，我们需要将构建好的 Endpoint 通过 HTTP 或者 RPC 的方式暴露出去。如下代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeHttpHandler</span><span style="color:#E1E4E8;">(ctx context.Context, endpoints </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">endpoint.UserEndpoints) http.Handler { </span></span>
<span class="line"><span style="color:#E1E4E8;">r </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> mux.</span><span style="color:#79B8FF;">NewRouter</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#6A737D;">// ... 日志和错误处理相关配置 </span></span>
<span class="line"><span style="color:#E1E4E8;">r.</span><span style="color:#79B8FF;">Methods</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/register&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Handler</span><span style="color:#E1E4E8;">(kithttp.</span><span style="color:#79B8FF;">NewServer</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">endpoints.RegisterEndpoint, </span></span>
<span class="line"><span style="color:#E1E4E8;">decodeRegisterRequest, </span></span>
<span class="line"><span style="color:#E1E4E8;">encodeJSONResponse, </span></span>
<span class="line"><span style="color:#E1E4E8;">options</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">r.</span><span style="color:#79B8FF;">Methods</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/login&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Handler</span><span style="color:#E1E4E8;">(kithttp.</span><span style="color:#79B8FF;">NewServer</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">endpoints.LoginEndpoint, </span></span>
<span class="line"><span style="color:#E1E4E8;">decodeLoginRequest, </span></span>
<span class="line"><span style="color:#E1E4E8;">encodeJSONResponse, </span></span>
<span class="line"><span style="color:#E1E4E8;">options</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> r </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decodeRegisterRequest</span><span style="color:#E1E4E8;">(_ context.Context, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) (</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 读取 HTTP 请求体中的注册名、注册邮箱和注册密码，封装为 RegisterRequest 请求体 </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decodeLoginRequest</span><span style="color:#E1E4E8;">(_ context.Context, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) (</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 读取 HTTP 请求体中的登录邮箱和密码，封装为 LoginRequest 请求体 </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeJSONResponse</span><span style="color:#E1E4E8;">(ctx context.Context, w http.ResponseWriter, response </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">w.</span><span style="color:#79B8FF;">Header</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;application/json;charset=utf-8&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">NewEncoder</span><span style="color:#E1E4E8;">(w).</span><span style="color:#79B8FF;">Encode</span><span style="color:#E1E4E8;">(response) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeHttpHandler</span><span style="color:#24292E;">(ctx context.Context, endpoints </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">endpoint.UserEndpoints) http.Handler { </span></span>
<span class="line"><span style="color:#24292E;">r </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> mux.</span><span style="color:#005CC5;">NewRouter</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#6A737D;">// ... 日志和错误处理相关配置 </span></span>
<span class="line"><span style="color:#24292E;">r.</span><span style="color:#005CC5;">Methods</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/register&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Handler</span><span style="color:#24292E;">(kithttp.</span><span style="color:#005CC5;">NewServer</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">endpoints.RegisterEndpoint, </span></span>
<span class="line"><span style="color:#24292E;">decodeRegisterRequest, </span></span>
<span class="line"><span style="color:#24292E;">encodeJSONResponse, </span></span>
<span class="line"><span style="color:#24292E;">options</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">r.</span><span style="color:#005CC5;">Methods</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Handler</span><span style="color:#24292E;">(kithttp.</span><span style="color:#005CC5;">NewServer</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">endpoints.LoginEndpoint, </span></span>
<span class="line"><span style="color:#24292E;">decodeLoginRequest, </span></span>
<span class="line"><span style="color:#24292E;">encodeJSONResponse, </span></span>
<span class="line"><span style="color:#24292E;">options</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decodeRegisterRequest</span><span style="color:#24292E;">(_ context.Context, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) (</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 读取 HTTP 请求体中的注册名、注册邮箱和注册密码，封装为 RegisterRequest 请求体 </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decodeLoginRequest</span><span style="color:#24292E;">(_ context.Context, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) (</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#6A737D;">// ... 读取 HTTP 请求体中的登录邮箱和密码，封装为 LoginRequest 请求体 </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeJSONResponse</span><span style="color:#24292E;">(ctx context.Context, w http.ResponseWriter, response </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">w.</span><span style="color:#005CC5;">Header</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;application/json;charset=utf-8&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">NewEncoder</span><span style="color:#24292E;">(w).</span><span style="color:#005CC5;">Encode</span><span style="color:#24292E;">(response) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们使用 mux 作为 HTTP 请求的路由和分发器，相比 Go 中原生态的 HTTP 路由包，mux 的路由代码可读性高、路由规则更清晰。上述代码分别将 RegisterEndpoint 和 LoginEndpoint 暴露到 HTTP 的 /register 和 /login 路径下，并指定对应的解码方法和编码方法。解码方法会将 HTTP 请求体中的请求数据解析封装为 XXXRequest 结构体传给对应的 Endpoint 处理，而编码方法会将 Endpoint 处理返回的 XXXResponse 结构体编码为 HTTP 响应返回客户端。</p><p>最后是在 <strong>main</strong> 函数中依次组建 service、endpoint 和 transport，并启动 Web 服务器，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ( </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 服务监听端口 </span></span>
<span class="line"><span style="color:#E1E4E8;">		servicePort </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flag.</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;service.port&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10086</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;service port&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">	flag.</span><span style="color:#79B8FF;">Parse</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">	errChan </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> dao.</span><span style="color:#79B8FF;">InitMysql</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3306&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(err) </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> redis.</span><span style="color:#79B8FF;">InitRedis</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;6379&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> ) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(err) </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	userService </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> service.</span><span style="color:#79B8FF;">MakeUserServiceImpl</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">dao.UserDAOImpl{}) </span></span>
<span class="line"><span style="color:#E1E4E8;">	userEndpoints </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">endpoint.UserEndpoints{ </span></span>
<span class="line"><span style="color:#E1E4E8;">		endpoint.</span><span style="color:#79B8FF;">MakeRegisterEndpoint</span><span style="color:#E1E4E8;">(userService), </span></span>
<span class="line"><span style="color:#E1E4E8;">		endpoint.</span><span style="color:#79B8FF;">MakeLoginEndpoint</span><span style="color:#E1E4E8;">(userService), </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	r </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> transport.</span><span style="color:#79B8FF;">MakeHttpHandler</span><span style="color:#E1E4E8;">(ctx, userEndpoints) </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">		errChan </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> http.</span><span style="color:#79B8FF;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">servicePort), r) </span></span>
<span class="line"><span style="color:#E1E4E8;">	}() </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 监控系统信号，等待 ctrl + c 系统信号通知服务关闭 </span></span>
<span class="line"><span style="color:#E1E4E8;">		c </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> os.Signal, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">		signal.</span><span style="color:#79B8FF;">Notify</span><span style="color:#E1E4E8;">(c, syscall.SIGINT, syscall.SIGTERM) </span></span>
<span class="line"><span style="color:#E1E4E8;">		errChan </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">c) </span></span>
<span class="line"><span style="color:#E1E4E8;">	}() </span></span>
<span class="line"><span style="color:#E1E4E8;">	error </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">errChan </span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ( </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 服务监听端口 </span></span>
<span class="line"><span style="color:#24292E;">		servicePort </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> flag.</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;service.port&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10086</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;service port&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">	flag.</span><span style="color:#005CC5;">Parse</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">	ctx </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">	errChan </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> dao.</span><span style="color:#005CC5;">InitMysql</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3306&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(err) </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redis.</span><span style="color:#005CC5;">InitRedis</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;6379&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> ) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(err) </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	userService </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> service.</span><span style="color:#005CC5;">MakeUserServiceImpl</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">dao.UserDAOImpl{}) </span></span>
<span class="line"><span style="color:#24292E;">	userEndpoints </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">endpoint.UserEndpoints{ </span></span>
<span class="line"><span style="color:#24292E;">		endpoint.</span><span style="color:#005CC5;">MakeRegisterEndpoint</span><span style="color:#24292E;">(userService), </span></span>
<span class="line"><span style="color:#24292E;">		endpoint.</span><span style="color:#005CC5;">MakeLoginEndpoint</span><span style="color:#24292E;">(userService), </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	r </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> transport.</span><span style="color:#005CC5;">MakeHttpHandler</span><span style="color:#24292E;">(ctx, userEndpoints) </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">		errChan </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> http.</span><span style="color:#005CC5;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">servicePort), r) </span></span>
<span class="line"><span style="color:#24292E;">	}() </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 监控系统信号，等待 ctrl + c 系统信号通知服务关闭 </span></span>
<span class="line"><span style="color:#24292E;">		c </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> os.Signal, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">		signal.</span><span style="color:#005CC5;">Notify</span><span style="color:#24292E;">(c, syscall.SIGINT, syscall.SIGTERM) </span></span>
<span class="line"><span style="color:#24292E;">		errChan </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">c) </span></span>
<span class="line"><span style="color:#24292E;">	}() </span></span>
<span class="line"><span style="color:#24292E;">	error </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">errChan </span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们依次构建了 service、endpoint 和 transport，并在 10086 端口启动了 Web 服务器，最后通过监听对应的 ctrl + c 系统信号关闭服务。</p><p>通过上述流程，我们就详细介绍完了如何基于 Go-kit 开发一个 Web 项目，在配置好相应的 Go Modules 代理、MySQL 数据库和 Redis 数据库后即可通过 go run 命令启动，启动后可以通过请求相应的 HTTP 接口验证效果，如下 curl 命令例子所示：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">//</span><span style="color:#E1E4E8;"> 注册 </span></span>
<span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST \\ </span></span>
<span class="line"><span style="color:#E1E4E8;">  http:</span><span style="color:#F97583;">//</span><span style="color:#E1E4E8;">localhost:</span><span style="color:#79B8FF;">10086</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">register \\ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;content-type: application/x-www-form-urlencoded&#39;</span><span style="color:#E1E4E8;"> \\ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&#39;email=aoho%40mail.com&amp;password=aoho&amp;username=aoho&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">//</span><span style="color:#E1E4E8;"> 登录 </span></span>
<span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST \\ </span></span>
<span class="line"><span style="color:#E1E4E8;">  http:</span><span style="color:#F97583;">//</span><span style="color:#E1E4E8;">localhost:</span><span style="color:#79B8FF;">10086</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">login \\ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;content-type: application/x-www-form-urlencoded&#39;</span><span style="color:#E1E4E8;"> \\ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&#39;email=aoho%40mail.com&amp;password=aoho&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">//</span><span style="color:#24292E;"> 注册 </span></span>
<span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST \\ </span></span>
<span class="line"><span style="color:#24292E;">  http:</span><span style="color:#D73A49;">//</span><span style="color:#24292E;">localhost:</span><span style="color:#005CC5;">10086</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">register \\ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;content-type: application/x-www-form-urlencoded&#39;</span><span style="color:#24292E;"> \\ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&#39;email=aoho%40mail.com&amp;password=aoho&amp;username=aoho&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">//</span><span style="color:#24292E;"> 登录 </span></span>
<span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST \\ </span></span>
<span class="line"><span style="color:#24292E;">  http:</span><span style="color:#D73A49;">//</span><span style="color:#24292E;">localhost:</span><span style="color:#005CC5;">10086</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">login \\ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;content-type: application/x-www-form-urlencoded&#39;</span><span style="color:#24292E;"> \\ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&#39;email=aoho%40mail.com&amp;password=aoho&#39;</span></span></code></pre></div><h3 id="使用-gorm-连接-my-sql-数据库" tabindex="-1">使用 gorm 连接 My SQL 数据库 <a class="header-anchor" href="#使用-gorm-连接-my-sql-数据库" aria-label="Permalink to &quot;使用 gorm 连接 My SQL 数据库&quot;">​</a></h3><p>在日常的业务开发中，使用数据库对业务数据进行持久化操作是必不可少的。在前面的 User 服务中，我们使用了 Go 中流行的 gorm ORM 库为服务提供 My SQL 数据库操作能力。gorm 是采用 Go 实现的，几乎全功能的 ORM，通过它，我们可以将数据库中的表结构与 Go 中的结构体进行映射，这样既提升了开发的便利性，也降低了 SQL 注入攻击的可能性。</p><p>在使用 gorm 前可以使用 Go Modules 或者 go get 引入相应的依赖 github.com/jinzhu/gorm。</p><p>gorm 的使用十分简单，通过 gorm.Open 函数即可建立一个相关数据库连接池，如下代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dao</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ( </span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/go-sql-driver/mysql</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/jinzhu/gorm</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> db </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gorm.DB </span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InitMysql</span><span style="color:#E1E4E8;">(host, port, user, password, dbName </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">db, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gorm.</span><span style="color:#79B8FF;">Open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mysql&quot;</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">@(</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">)/</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#E1E4E8;">, user, password, host, port, dbName)) </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(err) </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">db.</span><span style="color:#79B8FF;">SingularTable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dao</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ( </span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/go-sql-driver/mysql</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/jinzhu/gorm</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> db </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gorm.DB </span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InitMysql</span><span style="color:#24292E;">(host, port, user, password, dbName </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">db, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gorm.</span><span style="color:#005CC5;">Open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mysql&quot;</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">@(</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">)/</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#24292E;">, user, password, host, port, dbName)) </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(err) </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">db.</span><span style="color:#005CC5;">SingularTable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要指定数据库地址、端口、用户、密码和数据库名等基本信息。在建立好相应数据库的连接池后，即可通过面向对象的方式操作数据库中的表数据，我们需要首先定义相关的表结构体，如 UserEntity 结构体，它对应数据库中的 user 表：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserEntity</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">ID </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Username </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Password </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Email </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">CreatedAt time.Time </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserEntity</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">ID </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Username </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Password </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Email </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">CreatedAt time.Time </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>gorm 同样支持 StructTag，可以使用 StructTag 为结构体中的字段添加相应的表字段限制，如指定映射表字段名称、类型等。gorm 中直接调用 gorm.DB.Create 方法即可插入新的数据，如下例子所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (userDAO </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserDAOImpl) </span><span style="color:#B392F0;">Save</span><span style="color:#E1E4E8;">(user </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserEntity) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> db.</span><span style="color:#79B8FF;">Create</span><span style="color:#E1E4E8;">(user).Error </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (userDAO </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserDAOImpl) </span><span style="color:#6F42C1;">Save</span><span style="color:#24292E;">(user </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserEntity) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> db.</span><span style="color:#005CC5;">Create</span><span style="color:#24292E;">(user).Error </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>gorm 提供了丰富的查询方法，基本可以实现所有的复杂查询功能，如下面例子所示的使用 Where 查询语句根据 email 查询用户信息：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (userDAO </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserDAOImpl) </span><span style="color:#B392F0;">SelectByEmail</span><span style="color:#E1E4E8;">(email </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserEntity, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">user </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">UserEntity{} </span></span>
<span class="line"><span style="color:#E1E4E8;">err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> db.</span><span style="color:#79B8FF;">Where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;email = ?&quot;</span><span style="color:#E1E4E8;">, email).</span><span style="color:#79B8FF;">First</span><span style="color:#E1E4E8;">(user).Error </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user, err </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (userDAO </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserDAOImpl) </span><span style="color:#6F42C1;">SelectByEmail</span><span style="color:#24292E;">(email </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserEntity, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">user </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">UserEntity{} </span></span>
<span class="line"><span style="color:#24292E;">err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> db.</span><span style="color:#005CC5;">Where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;email = ?&quot;</span><span style="color:#24292E;">, email).</span><span style="color:#005CC5;">First</span><span style="color:#24292E;">(user).Error </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user, err </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>项目开发是作为开发人员必须掌握的能力，虽然 Go 的工程化能力不及 Java、C++ 等&quot;老大哥&quot;，但是也提供了相当大的工程项目开发便捷性。</p><p>在本节课程，我们主要介绍了如何进行 Go 项目的开发，主要包含：</p><ul><li><p>Go Modules 项目依赖管理；</p></li><li><p>基于 Go -k it 开发 User Web 应用；</p></li><li><p>使用 gorm ORM 库操作 My SQL 数据库。</p></li></ul><p>随着 Go 的快速发展和应用，Go 被越来越多地应用到大型项目的开发中，Go 的工程化经验和能力也在不断积累和提升。通过本节课的学习，希望你能够掌握基本的 Go 项目开发能力，为后续微服务应用的开发实践打下良好的基础。</p><p>最后，关于 Go-kit 开发，你有什么经验和想法？欢迎你在留言区和我交流分享。</p>`,41);function E(y,i,d,F,u,g){const n=p("Image");return o(),l("div",null,[r,e(n,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image/M00/37/B7/CgqCHl8aeCmARuM4AADVx9E2eA4809.png"}),c])}const D=a(t,[["render",E]]);export{C as __pageData,D as default};
