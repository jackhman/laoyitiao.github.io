import{_ as r,j as i,o as n,g as e,k as s,h as o,Q as a,s as l}from"./chunks/framework.e0c66c3f.js";const lt=JSON.parse('{"title":"编译插桩是什么","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1858) 第04讲：编译插桩操纵字节码，实现不可能完成的任务.md","filePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1858) 第04讲：编译插桩操纵字节码，实现不可能完成的任务.md","lastUpdated":1696338709000}'),c={name:"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1858) 第04讲：编译插桩操纵字节码，实现不可能完成的任务.md"},_=a("",17),p=l("br",null,null,-1),d=l("p",null,"从上图可以看出，我们可以在 1、2 两处对代码进行改造。",-1),u=l("ol",null,[l("li",null,[l("p",null,"在 .java 文件编译成 .class 文件时，APT、AndroidAnnotation 等就是在此处触发代码生成。")]),l("li",null,[l("p",null,"在 .class 文件进一步优化成 .dex 文件时，也就是直接操作字节码文件，也是本课时主要介绍的内容。这种方式功能更加强大，应用场景也更多。但是门槛比较高，需要对字节码有一定的理解。")])],-1),g=l("br",null,null,-1),h=l("p",null,"本课时主要介绍第 2 种实现方式，用一张图来描述如下过程，其中红色虚框包含了本课时要讲的所有内容。",-1),A=l("br",null,null,-1),m=a("",12),f=l("p",null,"但是如果使用 ASM 直接编写字节码指令，则有可能是如下几个字节码指令：",-1),b=l("br",null,null,-1),T=a("",15),y=l("h3",{id:"创建自定义-gradle-插件",tabindex:"-1"},[o("创建自定义 Gradle 插件 "),l("a",{class:"header-anchor",href:"#创建自定义-gradle-插件","aria-label":'Permalink to "创建自定义 Gradle 插件"'},"​")],-1),C=l("p",null,"首先在 ASMLifeCycleDemo 项目中创建一个新的 module，并选择 Android Library 类型，命名为 asm_lifecycle_plugin。",-1),S=l("br",null,null,-1),M=l("p",null,"将 asm_lifecycle_plugin module 中除了 build.gradle 和 main 文件夹之外的所有内容都删除。然后在 main 目录下分别创建 groovy 和 java 目录，结构如下：",-1),P=l("br",null,null,-1),v=l("br",null,null,-1),q=l("p",null,"因为 Gradle 插件是使用 groovy 语言编写的，所以需要新建一个 groovy 目录，用来存放插件相关的.groovy类。 但 ASM 是 java 层面的框架，所以在 java 目录里存放 ASM 相关的类。",-1),F=l("br",null,null,-1),x=l("p",null,"然后，在 groovy 中创建目录 danny.jiang.plugin，并在此目录中创建类 LifeCyclePlugin.groovy 文件。在 LifeCyclePlugin 中重写 apply 方法，实现插件逻辑，因为是 demo 演示，所以我只是简单的打印 log 日志。",-1),D=l("br",null,null,-1),k=l("p",null,"目录结构与代码如下：",-1),I=l("br",null,null,-1),V=l("br",null,null,-1),E=l("p",null,"可以看出 LifeCyclePlugin 实现了 gradle api 中的 Plugin 接口。当我们在 app module 的 build.gradle 文件中使用此插件时，其 LifeCyclePlugin 的 apply 方法将会被自动调用。",-1),L=l("br",null,null,-1),G=l("p",null,"接下来，将 asm_lifecycle_plugin module 的 build.gradle 中的内容全部删掉，改为如下内容：",-1),j=l("br",null,null,-1),N=a("",11),B=l("br",null,null,-1),J=l("p",null,"至此，自定义 Gradle 插件就已经写完，现在可以在 Android Studio 的右边栏找到 Gradle 中点击 uploadArchives，执行 plugin 的部署任务：",-1),R=l("br",null,null,-1),O=l("br",null,null,-1),X=l("p",null,"可以看到，构建成功之后，在 Project 的根目录下将会出现一个 repo 目录，里面存放的就是我们的插件目标文件。",-1),U=l("h3",{id:"测试-asm-lifecycle-plugin",tabindex:"-1"},[o("测试 asm_lifecycle_plugin "),l("a",{class:"header-anchor",href:"#测试-asm-lifecycle-plugin","aria-label":'Permalink to "测试 asm_lifecycle_plugin"'},"​")],-1),W=l("p",null,"为了测试自定义的 Gradle 插件是否可用，可以在 app module 中的 build.gradle 中引用此插件。",-1),K=l("br",null,null,-1),w=l("br",null,null,-1),Q=l("p",null,"图中 ① 处就是在自定义 Gradle 插件中 properties 的文件名 （danny.asm.lifecycle）。",-1),Y=l("br",null,null,-1),z=l("p",null,"图中 ② 处 dependencies 中的 classpath 是 group 值 + module 名 + version。",-1),H=l("br",null,null,-1),$=l("p",null,"然后在命令行中使用 gradlew 执行构建命令，如果打印出我们自定义插件里的 log，则说明自定义 Gradle 插件可以使用：",-1),Z=l("br",null,null,-1),ll=a("",8),tl=l("br",null,null,-1),sl=l("p",null,"可以看到，LifeCycleTransform 需要实现抽象类 Transform 中的抽象方法，具体有如下几个方法需要实现：",-1),al=l("br",null,null,-1),ol=a("",11),rl=l("br",null,null,-1),il=l("ol",null,[l("li",null,[l("p",null,"CLASSES：代表只检索 .class 文件；")]),l("li",null,[l("p",null,"RESOURCES：代表检索 java 标准资源文件。")])],-1),nl=l("br",null,null,-1),el=l("p",null,[l("strong",null,"getScopes()")],-1),cl=l("p",null,"这个方法规定自定义 Transform 检索的范围，具体有以下几种取值：",-1),_l=l("br",null,null,-1),pl=a("",9),dl=a("",6),ul=l("br",null,null,-1),gl=l("p",null,"再次在命令行中执行 build 命令，可以看到 LifeCycleTransform 检索出的所有 .class 文件。",-1),hl=l("br",null,null,-1),Al=a("",8),ml=l("h3",{id:"创建自定义-asm-visitor-类",tabindex:"-1"},[o("创建自定义 ASM Visitor 类 "),l("a",{class:"header-anchor",href:"#创建自定义-asm-visitor-类","aria-label":'Permalink to "创建自定义 ASM Visitor 类"'},"​")],-1),fl=l("p",null,"在 asm_lifecycle_plugin module 中的 src/main/java 目录下创建包 danny.jiang.asm，并分别创建 LifecycleClassVisitor.java 和 LifecycleMethodVisitor.java。代码如下：",-1),bl=l("br",null,null,-1),Tl=l("p",null,[l("strong",null,"LifecycleClassVisitor.java")],-1),yl=l("br",null,null,-1),Cl=l("br",null,null,-1),Sl=l("p",null,"红框中，在 visitMethod 方法中，过滤出继承自 AppCompatActivity 的文件，并在 LifeCycleMethodVisitor.java 中对 onCreate 进行改造。",-1),Ml=l("p",null,[l("strong",null,"LifeCycleMethodVisitor.java")],-1),Pl=l("br",null,null,-1),vl=l("br",null,null,-1),ql=l("p",null,"图中红框内是真正执行插入字节码的逻辑。可以看出 ASM 都是直接以字节码指令的方式进行操作的，所以如果想使用 ASM，需要程序员对字节码有一定的理解。如果对字节码不是很了解，也可以借助三方工具 ASM Bytecode Outline 来生成想要的字节码。",-1),Fl=l("h3",{id:"修改-lifecycletransform-的-transform-方法-使用-asm",tabindex:"-1"},[o("修改 LifeCycleTransform 的 transform 方法，使用 ASM "),l("a",{class:"header-anchor",href:"#修改-lifecycletransform-的-transform-方法-使用-asm","aria-label":'Permalink to "修改 LifeCycleTransform 的 transform 方法，使用 ASM"'},"​")],-1),xl=l("p",null,"各种 Visitor 都定义好之后，我们就可以修改 LifeCycleTransform 的 transform 方法，并将需要插桩的字节码插入到 MainActivity.class 文件中：",-1),Dl=l("br",null,null,-1),kl=l("h3",{id:"重新部署自定义-gradle-插件-并运行主项目",tabindex:"-1"},[o("重新部署自定义 Gradle 插件，并运行主项目 "),l("a",{class:"header-anchor",href:"#重新部署自定义-gradle-插件-并运行主项目","aria-label":'Permalink to "重新部署自定义 Gradle 插件，并运行主项目"'},"​")],-1),Il=l("p",null,"上面几步如果一切执行顺利，那接下来就可以在点击 uploadArchives 重新部署 LifeCyclePlugin。",-1),Vl=l("blockquote",null,[l("p",null,"注意：重新部署时，需要先在 app module 的 build.gradle 中将插件依赖注释，否则报错。")],-1),El=l("p",null,"部署成功之后，重新在 app 中依赖自定义插件并运行主项目，当 MainActivity 被打开时，会在 logcat 中看到如下日志：",-1),Ll=l("br",null,null,-1),Gl=l("br",null,null,-1),jl=l("p",null,"后续如果我们有新的 Activity，比如新建一个 BActivity.java 如下：",-1),Nl=l("br",null,null,-1),Bl=l("br",null,null,-1),Jl=l("p",null,"并在 MainActivity 中设置点击事件跳转到 BActivity 中：",-1),Rl=l("br",null,null,-1),Ol=l("br",null,null,-1),Xl=l("p",null,"那么 Logcat 中的日志如下：",-1),Ul=l("br",null,null,-1),Wl=a("",9);function Kl(wl,Ql,Yl,zl,Hl,$l){const t=i("Image");return n(),e("div",null,[_,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrD2AcPLbAABSfiJwMz0698.png"}),p,d,u,g,h,A,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD2ABAAgAACZzFsVdz4155.png"}),m,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrD2AOP6NAAAoSfnUSfs015.png"}),f,b,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD6AWVBUAADlL7SiS8E561.png"}),T,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrD6AQu0pAAQ1Wm_ByoY051.png"}),y,C,S,M,P,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD6AD2mpAABt5LwLX34393.png"}),v,q,F,x,D,k,I,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrD6AIHSHAAOeqTsYs-g391.png"}),V,E,L,G,j,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD6AMfbvAAEZ8hmY0ug669.png"}),N,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrD6AG_hdAAMET2o5690336.png"}),o(),B,J,R,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD-AMDFKAAcAXIFLKA8851.png"}),O,X,U,W,K,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD-AQN1IAATaMwf46xo414.png"}),w,Q,Y,z,H,$,Z,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD-Af1TcAADOeFj_5qk929.png"}),ll,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrD-AdirgAANetW-9U_k623.png"}),tl,sl,al,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrD-AJIY8AACIgS4S4x0997.png"}),ol,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrD-AFs_yAADDIlsaIko915.png"}),rl,il,nl,el,cl,_l,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrECAc6aAAABxuVEoJS4898.png"}),pl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrECAIyhAAAaChFP01sA916.png"}),dl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrECAIC6-AADhUNvTh88444.png"}),ul,gl,hl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrECALf2oAAMhJPoxXUY597.png"}),Al,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrECAIGaWAAF-FJ4mWuk667.png"}),ml,fl,bl,Tl,yl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrEGAXSAvAAXJnOIKDA4481.png"}),Cl,Sl,Ml,Pl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrEGANL3MAAOBvTve6Uk244.png"}),vl,ql,Fl,xl,Dl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrEGAb48HAAe4XCpf8E4959.png"}),kl,Il,Vl,El,Ll,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrEGAJlXtAADxyHXMnAI728.png"}),Gl,jl,Nl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/4F/Ciqah16FrEGAAdI2AACizAJ39-E938.png"}),Bl,Jl,Rl,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrEKAUZ5RAAFE_Wak9lg786.png"}),Ol,Xl,Ul,s(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/65/Cgq2xl6FrEKAG8_wAAFEns-a-xg520.png"}),Wl])}const tt=r(c,[["render",Kl]]);export{lt as __pageData,tt as default};
