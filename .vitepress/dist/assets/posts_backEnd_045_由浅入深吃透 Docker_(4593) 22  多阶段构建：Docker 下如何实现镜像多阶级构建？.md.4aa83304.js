import{_ as s,o as a,g as n,Q as l}from"./chunks/framework.a0d18f64.js";const g=JSON.parse('{"title":"22多阶段构建：Docker下如何实现镜像多阶级构建？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4593) 22  多阶段构建：Docker 下如何实现镜像多阶级构建？.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4593) 22  多阶段构建：Docker 下如何实现镜像多阶级构建？.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/045_由浅入深吃透 Docker/(4593) 22  多阶段构建：Docker 下如何实现镜像多阶级构建？.md"},o=l(`<h1 id="_22多阶段构建-docker下如何实现镜像多阶级构建" tabindex="-1">22多阶段构建：Docker下如何实现镜像多阶级构建？ <a class="header-anchor" href="#_22多阶段构建-docker下如何实现镜像多阶级构建" aria-label="Permalink to &quot;22多阶段构建：Docker下如何实现镜像多阶级构建？&quot;">​</a></h1><p>通过前面课程的学习，我们知道 Docker 镜像是分层的，并且每一层镜像都会额外占用存储空间，一个 Docker 镜像层数越多，这个镜像占用的存储空间则会越多。镜像构建最重要的一个原则就是要保持镜像体积尽可能小，要实现这个目标通常可以从两个方面入手：</p><ul><li><p>基础镜像体积应该尽量小；</p></li><li><p>尽量减少 Dockerfile 的行数，因为 Dockerfile 的每一条指令都会生成一个镜像层。</p></li></ul><p>在 Docker 的早期版本中，对于编译型语言（例如 C、Java、Go）的镜像构建，我们只能将应用的编译和运行环境的准备，全部都放到一个 Dockerfile 中，这就导致我们构建出来的镜像体积很大，从而增加了镜像的存储和分发成本，这显然与我们的镜像构建原则不符。</p><p>为了减小镜像体积，我们需要借助一个额外的脚本，将镜像的编译过程和运行过程分开。</p><ul><li><p>编译阶段：负责将我们的代码编译成可执行对象。</p></li><li><p>运行时构建阶段：准备应用程序运行的依赖环境，然后将编译后的可执行对象拷贝到镜像中。</p></li></ul><p>我以 Go 语言开发的一个 HTTP 服务为例，代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/http</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(w http.ResponseWriter, req </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Fprintf</span><span style="color:#E1E4E8;">(w, </span><span style="color:#9ECBFF;">&quot;hello world!</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">HandleFunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, hello)</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:8080&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/http</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(w http.ResponseWriter, req </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) {</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Fprintf</span><span style="color:#24292E;">(w, </span><span style="color:#032F62;">&quot;hello world!</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">HandleFunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, hello)</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:8080&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我将这个 Go 服务构建成镜像分为两个阶段：代码的编译阶段和镜像构建阶段。</p><p>我们构建镜像时，镜像中需要包含 Go 语言编译环境，应用的编译阶段我们可以使用 Dockerfile.build 文件来构建镜像。Dockerfile.build 的内容如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FROM golang:</span><span style="color:#79B8FF;">1.13</span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/go/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY main.</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> .</span></span>
<span class="line"><span style="color:#E1E4E8;">RUN CGO_ENABLED</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> GOOS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">linux </span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FROM golang:</span><span style="color:#005CC5;">1.13</span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/go/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY main.</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> .</span></span>
<span class="line"><span style="color:#24292E;">RUN CGO_ENABLED</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> GOOS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">linux </span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span></code></pre></div><p>Dockerfile.build 可以帮助我们把代码编译成可以执行的二进制文件，我们使用以下 Dockerfile 构建一个运行环境：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FROM alpine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest  </span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./http-server&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FROM alpine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest  </span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./http-server&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>然后，我们将应用的编译和运行环境的准备步骤，都放到一个 build.sh 脚本文件中，内容如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Building</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:build</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Dockerfile.build</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">builder</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:build</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">builder:/go/src/github.com/wilhelmguo/multi-stage-demo/http-server</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./http-server</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">builder</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Building</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:latest</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:latest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./http-server</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Building</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:build</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Dockerfile.build</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">builder</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:build</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">builder:/go/src/github.com/wilhelmguo/multi-stage-demo/http-server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./http-server</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">builder</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Building</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:latest</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:latest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./http-server</span></span></code></pre></div><p>下面，我带你来逐步分析下这个脚本。</p><p>第一步，声明 shell 文件，然后输出开始构建信息。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Building</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Building</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:build</span></span></code></pre></div><p>第二步，使用 Dockerfile.build 文件来构建一个临时镜像 http-server:build。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Dockerfile.build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Dockerfile.build</span></span></code></pre></div><p>第三步，使用 http-server:build 镜像创建一个名称为 builder 的容器，该容器包含编译后的 http-server 二进制文件。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">builder</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http-server:build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">builder</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http-server:build</span></span></code></pre></div><p>第四步，使用<code>docker cp</code>命令从 builder 容器中拷贝 http-server 文件到当前构建目录下，并且删除名称为 builder 的临时容器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">builder:/go/src/github.com/wilhelmguo/multi-stage-demo/http-server</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./http-server</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">builder</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">builder:/go/src/github.com/wilhelmguo/multi-stage-demo/http-server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./http-server</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">builder</span></span></code></pre></div><p>第五步，输出开始构建镜像信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">echo Building http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">echo Building http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span></code></pre></div><p>第六步，构建运行时镜像，然后删除临时文件 http-server。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest .</span></span>
<span class="line"><span style="color:#E1E4E8;">rm .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest .</span></span>
<span class="line"><span style="color:#24292E;">rm .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span></span></code></pre></div><p>我这里总结一下，我们是使用 Dockerfile.build 文件来编译应用程序，使用 Dockerfile 文件来构建应用的运行环境。然后我们通过创建一个临时容器，把编译后的 http-server 文件拷贝到当前构建目录中，然后再把这个文件拷贝到运行环境的镜像中，最后指定容器的启动命令为 http-server。</p><p>使用这种方式虽然可以实现分离镜像的编译和运行环境，但是我们需要额外引入一个 build.sh 脚本文件，而且构建过程中，还需要创建临时容器 builder 拷贝编译后的 http-server 文件，这使得整个构建过程比较复杂，并且整个构建过程也不够透明。</p><p>为了解决这种问题， Docker 在 17.05 推出了多阶段构建（multistage-build）的解决方案。</p><h3 id="使用多阶段构建" tabindex="-1">使用多阶段构建 <a class="header-anchor" href="#使用多阶段构建" aria-label="Permalink to &quot;使用多阶段构建&quot;">​</a></h3><p>Docker 允许我们在 Dockerfile 中使用多个 FROM 语句，而每个 FROM 语句都可以使用不同基础镜像。最终生成的镜像，是以最后一条 FROM 为准，所以我们可以在一个 Dockerfile 中声明多个 FROM，然后选择性地将一个阶段生成的文件拷贝到另外一个阶段中，从而实现最终的镜像只保留我们需要的环境和文件。多阶段构建的主要使用场景是<strong>分离编译环境和运行环境。</strong></p><p>接下来，我们使用多阶段构建的特性，将上述未使用多阶段构建的过程精简成如下 Dockerfile：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FROM golang</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.13</span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY main.go .</span></span>
<span class="line"><span style="color:#E1E4E8;">RUN CGO_ENABLED</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> GOOS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">linux go build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#E1E4E8;">FROM alpine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest  </span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./http-server&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FROM golang</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.13</span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY main.go .</span></span>
<span class="line"><span style="color:#24292E;">RUN CGO_ENABLED</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> GOOS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">linux go build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#24292E;">FROM alpine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest  </span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./http-server&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>然后，我们将这个 Dockerfile 拆解成两步进行分析。</p><p>第一步，编译代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FROM golang</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.13</span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY main.go .</span></span>
<span class="line"><span style="color:#E1E4E8;">RUN CGO_ENABLED</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> GOOS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">linux go build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FROM golang</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.13</span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY main.go .</span></span>
<span class="line"><span style="color:#24292E;">RUN CGO_ENABLED</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> GOOS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">linux go build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span></code></pre></div><p>将代码拷贝到 golang:1.13 镜像（已经安装好了 go）中，并且使用<code>go build</code>命令编译代码生成 http-server 文件。</p><p>第二步，构建运行时镜像。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FROM alpine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest  </span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./http-server&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FROM alpine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest  </span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./http-server&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>使用第二个 FROM 命令表示镜像构建的第二阶段，使用 COPY 指令拷贝编译后的文件到 alpine 镜像中，--from=0 表示从第一阶段构建结果中拷贝文件到当前构建阶段。</p><p>最后，我们只需要使用以下命令，即可实现整个镜像的构建：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest .</span></span></code></pre></div><p>构建出来的镜像与未使用多阶段构建之前构建的镜像大小一致，为了验证这一结论，我们分别使用这两种方式来构建镜像，最后对比一下镜像构建的结果。</p><h3 id="镜像构建对比" tabindex="-1">镜像构建对比 <a class="header-anchor" href="#镜像构建对比" aria-label="Permalink to &quot;镜像构建对比&quot;">​</a></h3><p>使用多阶段构建前后的代码我都已经放在了<a href="https://github.com/wilhelmguo/multi-stage-demo" target="_blank" rel="noreferrer">Github</a>，你只需要克隆代码到本地即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ mkdir </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span></span>
<span class="line"><span style="color:#E1E4E8;">$ cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span></span>
<span class="line"><span style="color:#E1E4E8;">$ git clone https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/wilhelmguo/multi-stage-demo.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ mkdir </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span></span>
<span class="line"><span style="color:#24292E;">$ cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span></span>
<span class="line"><span style="color:#24292E;">$ git clone https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/wilhelmguo/multi-stage-demo.git</span></span></code></pre></div><p>代码克隆完成后，我们首先切换到without-multi-stage分支：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cd without</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span></span>
<span class="line"><span style="color:#E1E4E8;">$ git checkout without</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cd without</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span></span>
<span class="line"><span style="color:#24292E;">$ git checkout without</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span></span></code></pre></div><p>这个分支是未使用多阶段构建技术构建镜像的代码，我们可以通过执行 build.sh 文件构建镜像：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$  chmod </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">x build.sh </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">build.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">Building http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">build</span></span>
<span class="line"><span style="color:#E1E4E8;">Sending build context to Docker daemon  96.</span><span style="color:#FDAEB7;font-style:italic;">26kB</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> FROM golang</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.13</span></span>
<span class="line"><span style="color:#79B8FF;">1.13</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pulling from library</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">golang</span></span>
<span class="line"><span style="color:#E1E4E8;">d6ff36c9ec48</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pull complete </span></span>
<span class="line"><span style="color:#E1E4E8;">c958d65b3090</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pull complete </span></span>
<span class="line"><span style="color:#E1E4E8;">edaf0a6b092f</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pull complete </span></span>
<span class="line"><span style="color:#E1E4E8;">80931cf68816</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pull complete </span></span>
<span class="line"><span style="color:#79B8FF;">813643441356</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pull complete </span></span>
<span class="line"><span style="color:#E1E4E8;">799f41bb59c9</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pull complete </span></span>
<span class="line"><span style="color:#E1E4E8;">16b5038bccc8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pull complete </span></span>
<span class="line"><span style="color:#E1E4E8;">Digest</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sha256</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">8ebb6d5a48deef738381b56b1d4cd33d99a5d608e0d03c5fe8dfa3f68d41a1f8</span></span>
<span class="line"><span style="color:#E1E4E8;">Status</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Downloaded newer image </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> golang</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.13</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> d6f3656320fe</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in fa3da5ffb0c0</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container fa3da5ffb0c0</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 97245cbb773f</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> COPY main.go .</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> a021d2f2a5bb</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RUN CGO_ENABLED</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> GOOS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">linux go build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in b5c36bb67b9c</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container b5c36bb67b9c</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 76c0c88a5cf7</span></span>
<span class="line"><span style="color:#E1E4E8;">Successfully built 76c0c88a5cf7</span></span>
<span class="line"><span style="color:#E1E4E8;">Successfully tagged http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">build</span></span>
<span class="line"><span style="color:#E1E4E8;">4b0387b270bc4a4da570e1667fe6f9baac765f6b80c68f32007494c6255d9e5b</span></span>
<span class="line"><span style="color:#E1E4E8;">builder</span></span>
<span class="line"><span style="color:#E1E4E8;">Building http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span>
<span class="line"><span style="color:#E1E4E8;">Sending build context to Docker daemon  7.</span><span style="color:#FDAEB7;font-style:italic;">496MB</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> FROM alpine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span>
<span class="line"><span style="color:#E1E4E8;">latest</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pulling from library</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">alpine</span></span>
<span class="line"><span style="color:#E1E4E8;">df20fa9351a1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Already exists </span></span>
<span class="line"><span style="color:#E1E4E8;">Digest</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sha256</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">185518070891758909c9f839cf4ca393ee977ac378609f700f60a771a2dfe321</span></span>
<span class="line"><span style="color:#E1E4E8;">Status</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Downloaded newer image </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> alpine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> a24bb4013296</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in 0b25ffe603b8</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container 0b25ffe603b8</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 80da40d3a0b4</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> COPY http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 3f2300210b7b</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./http-server&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in 045cea651dde</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container 045cea651dde</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 5c73883177e7</span></span>
<span class="line"><span style="color:#E1E4E8;">Successfully built 5c73883177e7</span></span>
<span class="line"><span style="color:#E1E4E8;">Successfully tagged http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$  chmod </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">x build.sh </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">build.sh</span></span>
<span class="line"><span style="color:#24292E;">Building http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">build</span></span>
<span class="line"><span style="color:#24292E;">Sending build context to Docker daemon  96.</span><span style="color:#B31D28;font-style:italic;">26kB</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> FROM golang</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.13</span></span>
<span class="line"><span style="color:#005CC5;">1.13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pulling from library</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">golang</span></span>
<span class="line"><span style="color:#24292E;">d6ff36c9ec48</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pull complete </span></span>
<span class="line"><span style="color:#24292E;">c958d65b3090</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pull complete </span></span>
<span class="line"><span style="color:#24292E;">edaf0a6b092f</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pull complete </span></span>
<span class="line"><span style="color:#24292E;">80931cf68816</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pull complete </span></span>
<span class="line"><span style="color:#005CC5;">813643441356</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pull complete </span></span>
<span class="line"><span style="color:#24292E;">799f41bb59c9</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pull complete </span></span>
<span class="line"><span style="color:#24292E;">16b5038bccc8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pull complete </span></span>
<span class="line"><span style="color:#24292E;">Digest</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sha256</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">8ebb6d5a48deef738381b56b1d4cd33d99a5d608e0d03c5fe8dfa3f68d41a1f8</span></span>
<span class="line"><span style="color:#24292E;">Status</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Downloaded newer image </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> golang</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.13</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> d6f3656320fe</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in fa3da5ffb0c0</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container fa3da5ffb0c0</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 97245cbb773f</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> COPY main.go .</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> a021d2f2a5bb</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RUN CGO_ENABLED</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> GOOS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">linux go build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in b5c36bb67b9c</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container b5c36bb67b9c</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 76c0c88a5cf7</span></span>
<span class="line"><span style="color:#24292E;">Successfully built 76c0c88a5cf7</span></span>
<span class="line"><span style="color:#24292E;">Successfully tagged http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">build</span></span>
<span class="line"><span style="color:#24292E;">4b0387b270bc4a4da570e1667fe6f9baac765f6b80c68f32007494c6255d9e5b</span></span>
<span class="line"><span style="color:#24292E;">builder</span></span>
<span class="line"><span style="color:#24292E;">Building http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span>
<span class="line"><span style="color:#24292E;">Sending build context to Docker daemon  7.</span><span style="color:#B31D28;font-style:italic;">496MB</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> FROM alpine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span>
<span class="line"><span style="color:#24292E;">latest</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pulling from library</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">alpine</span></span>
<span class="line"><span style="color:#24292E;">df20fa9351a1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Already exists </span></span>
<span class="line"><span style="color:#24292E;">Digest</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sha256</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">185518070891758909c9f839cf4ca393ee977ac378609f700f60a771a2dfe321</span></span>
<span class="line"><span style="color:#24292E;">Status</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Downloaded newer image </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> alpine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> a24bb4013296</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in 0b25ffe603b8</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container 0b25ffe603b8</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 80da40d3a0b4</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> COPY http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 3f2300210b7b</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./http-server&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in 045cea651dde</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container 045cea651dde</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 5c73883177e7</span></span>
<span class="line"><span style="color:#24292E;">Successfully built 5c73883177e7</span></span>
<span class="line"><span style="color:#24292E;">Successfully tagged http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span></code></pre></div><p>经过一段时间的等待，我们的镜像就构建完成了。</p><p>镜像构建完成后，我们使用<code>docker image ls</code>命令查看一下刚才构建的镜像大小：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker image ls http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span></span>
<span class="line"><span style="color:#E1E4E8;">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server         latest              5c73883177e7        </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> minutes ago       13MB</span></span>
<span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server         build               76c0c88a5cf7        </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> minutes ago       819MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker image ls http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span></span>
<span class="line"><span style="color:#24292E;">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server         latest              5c73883177e7        </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> minutes ago       13MB</span></span>
<span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server         build               76c0c88a5cf7        </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> minutes ago       819MB</span></span></code></pre></div><p>可以看到，http-server:latest 镜像只有 13M，而我们的编译镜像 http-server:build 则为 819M，虽然我们编写了很复杂的脚本 build.sh，但是这个脚本确实帮助我们将镜像体积减小了很多。</p><p>下面，我们将代码切换到多阶段构建分支：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ git checkout with</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span></span>
<span class="line"><span style="color:#E1E4E8;">Switched to branch </span><span style="color:#9ECBFF;">&#39;with-multi-stage&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ git checkout with</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span></span>
<span class="line"><span style="color:#24292E;">Switched to branch </span><span style="color:#032F62;">&#39;with-multi-stage&#39;</span></span></code></pre></div><p>为了避免镜像名称重复，我们将多阶段构建的镜像命名为 http-server-with-multi-stage:latest ，并且禁用缓存，避免缓存干扰构建结果，构建命令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker build </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">with</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest .</span></span>
<span class="line"><span style="color:#E1E4E8;">Sending build context to Docker daemon  96.</span><span style="color:#FDAEB7;font-style:italic;">77kB</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> FROM golang</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.13</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> d6f3656320fe</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in 640da7a92a62</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container 640da7a92a62</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 9c27b4606da0</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> COPY main.go .</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> bd9ce4af24cb</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> RUN CGO_ENABLED</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> GOOS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">linux go build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in 6b441b4cc6b7</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container 6b441b4cc6b7</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 759acbf6c9a6</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> FROM alpine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> a24bb4013296</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in c2aa2168acd8</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container c2aa2168acd8</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> f026884acda6</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> COPY </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> 667503e6bc14</span></span>
<span class="line"><span style="color:#E1E4E8;">Step </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./http-server&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> Running in 15c4cc359144</span></span>
<span class="line"><span style="color:#E1E4E8;">Removing intermediate container 15c4cc359144</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---&gt;</span><span style="color:#E1E4E8;"> b73cc4d99088</span></span>
<span class="line"><span style="color:#E1E4E8;">Successfully built b73cc4d99088</span></span>
<span class="line"><span style="color:#E1E4E8;">Successfully tagged http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">with</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker build </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">with</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest .</span></span>
<span class="line"><span style="color:#24292E;">Sending build context to Docker daemon  96.</span><span style="color:#B31D28;font-style:italic;">77kB</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> FROM golang</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.13</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> d6f3656320fe</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in 640da7a92a62</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container 640da7a92a62</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 9c27b4606da0</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> COPY main.go .</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> bd9ce4af24cb</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> RUN CGO_ENABLED</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> GOOS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">linux go build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in 6b441b4cc6b7</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container 6b441b4cc6b7</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 759acbf6c9a6</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> FROM alpine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> a24bb4013296</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in c2aa2168acd8</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container c2aa2168acd8</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> f026884acda6</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> COPY </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> 667503e6bc14</span></span>
<span class="line"><span style="color:#24292E;">Step </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./http-server&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> Running in 15c4cc359144</span></span>
<span class="line"><span style="color:#24292E;">Removing intermediate container 15c4cc359144</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">---&gt;</span><span style="color:#24292E;"> b73cc4d99088</span></span>
<span class="line"><span style="color:#24292E;">Successfully built b73cc4d99088</span></span>
<span class="line"><span style="color:#24292E;">Successfully tagged http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">with</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span></code></pre></div><p>镜像构建完成后，我们同样使用<code>docker image ls</code>命令查看一下镜像构建结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker image ls http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">with</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest</span></span>
<span class="line"><span style="color:#E1E4E8;">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">with</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage   latest              b73cc4d99088        </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> minutes ago       13MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker image ls http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">with</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest</span></span>
<span class="line"><span style="color:#24292E;">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">with</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage   latest              b73cc4d99088        </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> minutes ago       13MB</span></span></code></pre></div><p>可以看到，使用多阶段构建的镜像大小与上一步构建的镜像大小一致，都为 13M。但是使用多阶段构建后，却大大减少了我们的构建步骤，使得构建过程更加清晰可读。</p><h3 id="多阶段构建的其他使用方式" tabindex="-1">多阶段构建的其他使用方式 <a class="header-anchor" href="#多阶段构建的其他使用方式" aria-label="Permalink to &quot;多阶段构建的其他使用方式&quot;">​</a></h3><p>多阶段构建除了我们上面讲解的使用方式，还有更多其他的使用方式，这些使用方式，可以使得多阶段构建实现更多的功能。</p><h4 id="为构建阶段命名" tabindex="-1">为构建阶段命名 <a class="header-anchor" href="#为构建阶段命名" aria-label="Permalink to &quot;为构建阶段命名&quot;">​</a></h4><p>默认情况下，每一个构建阶段都没有被命名，你可以通过 FROM 指令出现的顺序来引用这些构建阶段，构建阶段的序号是从 0 开始的。然而，为了提高 Dockerfile 的可读性，我们需要为某些构建阶段起一个名称，这样即便后面我们对 Dockerfile 中的内容进程重新排序或者添加了新的构建阶段，其他构建过程中的 COPY 指令也不需要修改。</p><p>上面的 Dockerfile 我们可以优化成如下内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FROM golang</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.13</span><span style="color:#E1E4E8;"> AS builder</span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY main.go .</span></span>
<span class="line"><span style="color:#E1E4E8;">RUN CGO_ENABLED</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> GOOS</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">linux go build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">FROM alpine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest  </span></span>
<span class="line"><span style="color:#E1E4E8;">WORKDIR </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">COPY </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">builder </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">go</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wilhelmguo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">multi</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stage</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server .</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./http-server&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FROM golang</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.13</span><span style="color:#24292E;"> AS builder</span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY main.go .</span></span>
<span class="line"><span style="color:#24292E;">RUN CGO_ENABLED</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> GOOS</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">linux go build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">FROM alpine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest  </span></span>
<span class="line"><span style="color:#24292E;">WORKDIR </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">COPY </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">builder </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">go</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wilhelmguo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">multi</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stage</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server .</span></span>
<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./http-server&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>我们在第一个构建阶段，使用 AS 指令将这个阶段命名为 builder。然后在第二个构建阶段使用 --from=builder 指令，即可从第一个构建阶段中拷贝文件，使得 Dockerfile 更加清晰可读。</p><h4 id="停止在特定的构建阶段" tabindex="-1">停止在特定的构建阶段 <a class="header-anchor" href="#停止在特定的构建阶段" aria-label="Permalink to &quot;停止在特定的构建阶段&quot;">​</a></h4><p>有时候，我们的构建阶段非常复杂，我们想在代码编译阶段进行调试，但是多阶段构建默认构建 Dockerfile 的所有阶段，为了减少每次调试的构建时间，我们可以使用 target 参数来指定构建停止的阶段。</p><p>例如，我只想在编译阶段调试 Dockerfile 文件，可以使用如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker build </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">target builder </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker build </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">target builder </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest .</span></span></code></pre></div><p>在执行<code>docker build</code>命令时添加 target 参数，可以将构建阶段停止在指定阶段，从而方便我们调试代码编译过程。</p><h4 id="使用现有镜像作为构建阶段" tabindex="-1">使用现有镜像作为构建阶段 <a class="header-anchor" href="#使用现有镜像作为构建阶段" aria-label="Permalink to &quot;使用现有镜像作为构建阶段&quot;">​</a></h4><p>使用多阶段构建时，不仅可以从 Dockerfile 中已经定义的阶段中拷贝文件，还可以使用<code>COPY --from</code>指令从一个指定的镜像中拷贝文件，指定的镜像可以是本地已经存在的镜像，也可以是远程镜像仓库上的镜像。</p><p>例如，当我们想要拷贝 nginx 官方镜像的配置文件到我们自己的镜像中时，可以在 Dockerfile 中使用以下指令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">COPY </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">nginx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">latest </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nginx</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nginx.conf </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nginx.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">COPY </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">nginx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">latest </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nginx</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nginx.conf </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nginx.conf</span></span></code></pre></div><p>从现有镜像中拷贝文件还有一些其他的使用场景。例如，有些工具没有我们使用的操作系统的安装源，或者安装源太老，需要我们自己下载源码并编译这些工具，但是这些工具可能依赖的编译环境非常复杂，而网上又有别人已经编译好的镜像。这时我们就可以使用<code>COPY --from</code>指令从编译好的镜像中将工具拷贝到我们自己的镜像中，很方便地使用这些工具了。</p><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>多阶段构建可以让我们通过一个 Dockerfile 很方便地构建出体积更小的镜像，并且我们只需要编写 Dockerfile 文件即可，无须借助外部脚本文件。这使得镜像构建过程更加简单透明，但要提醒一点：使用多阶段构建的唯一限制条件是我们使用的 Docker 版本必须高于 17.05 。</p><p>那么，你知道多阶段构建还有哪些应用场景吗？欢迎评论区留言讨论。</p>`,83),e=[o];function t(c,r,E,y,i,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{g as __pageData,u as default};
