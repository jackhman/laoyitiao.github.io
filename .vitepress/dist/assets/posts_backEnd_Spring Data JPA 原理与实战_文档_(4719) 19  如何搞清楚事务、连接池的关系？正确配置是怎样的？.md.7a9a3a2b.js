import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.f949202b.js";const b=JSON.parse('{"title":"事务的基本原理 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4719) 19  如何搞清楚事务、连接池的关系？正确配置是怎样的？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4719) 19  如何搞清楚事务、连接池的关系？正确配置是怎样的？.md","lastUpdated":null}'),l={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4719) 19  如何搞清楚事务、连接池的关系？正确配置是怎样的？.md"},o=p(`<p>你好，欢迎继续学习 Spring Data JPA 原理与实战。上一课时，我们讲解了数据源的基本原理和工作方式，你知道了数据源是创建数据连接的入口，数据源里面获得连接的时候也采用了连接池。那么这一讲我们来看下事务在 JPA 和 Spring 里面的详细配置和原理。</p><h3 id="事务的基本原理" tabindex="-1">事务的基本原理 <a class="header-anchor" href="#事务的基本原理" aria-label="Permalink to &quot;事务的基本原理&quot;">​</a></h3><p>在学习 Spring 的事务之前，你首先要了解数据库的事务原理，我们以 MySQL 5.7 为例，讲解一下数据库事务的基础知识。</p><p>我们都知道 当 MySQL 使用 InnoDB 数据库引擎的时候，数据库是对事务有支持的。而事务最主要的作用是保证数据 ACID 的特性，即原子性（<strong>A</strong> tomicity）、一致性（<strong>C</strong> onsistency）、隔离性（<strong>I</strong> solation）、持久性（<strong>D</strong>urability），下面来一一解释。</p><p><strong>原子性：</strong> 是指一个事务（Transaction）中的所有操作，要么全部完成，要么全部回滚，而不会有中间某个数据单独更新的操作。事务在执行过程中一旦发生错误，会被回滚（Rollback）到此次事务开始之前的状态，就像这个事务从来没有执行过一样。</p><p><strong>一致性：</strong> 是指事务操作开始之前，和操作异常回滚以后，数据库的完整性没有被破坏。数据库事务 Commit 之后，数据也是按照我们预期正确执行的。即要通过事务保证数据的正确性。</p><p><strong>持久性：</strong> 是指事务处理结束后，对数据的修改进行了持久化的永久保存，即便系统故障也不会丢失，其实就是保存到硬盘。</p><p><strong>隔离性：</strong> 是指数据库允许多个连接，同时并发多个事务，又对同一个数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时，由于交叉执行而导致数据不一致的现象。而 MySQL 里面就是我们经常说的事务的四种隔离级别，即读未提交（Read Uncommitted）、读提交（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable）。</p><p>由于隔离级别是事务知识点中最基础的部分，我们就简单介绍一下四种隔离级别。但是它特别重要，你要好好掌握。</p><h4 id="四种-mysql-事务的隔离级别" tabindex="-1">四种 MySQL 事务的隔离级别 <a class="header-anchor" href="#四种-mysql-事务的隔离级别" aria-label="Permalink to &quot;四种 MySQL 事务的隔离级别&quot;">​</a></h4><p><strong>Read Uncommitted（读取未提交内容）</strong>：此隔离级别，表示所有正在进行的事务都可以看到其他未提交事务的执行结果。不同的事务之间读取到其他事务中未提交的数据，通常这种情况也被称之为脏读（Dirty Read），会造成数据的逻辑处理错误，也就是我们在多线程里面经常说的数据不安全了。在业务开发中，几乎很少见到使用的，因为它的性能也不比其他级别要好多少。</p><p><strong>Read Committed（读取提交内容）：</strong> 此隔离级别是指，在一个事务相同的两次查询可能产生的结果会不一样，也就是第二次查询能读取到其他事务已经提交的最新数据。也就是我们常说的不可重复读（Nonrepeatable Read）的事务隔离级别。因为同一事务的其他实例在该实例处理期间，可能会对其他事务进行新的 commit，所以在同一个事务中的同一 select 上，多次执行可能返回不同结果。这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的隔离级别）。</p><p><strong>Repeatable Read（可重读）：</strong> 这是 MySQL 的默认事务隔离级别，它确保同一个事务多次查询相同的数据，能读到相同的数据。即使多个事务的修改已经 commit，本事务如果没有结束，永远读到的是相同数据，要注意它与<strong>Read Committed 的隔离级别的区别，是正好相反的</strong>。这会导致另一个棘手的问题：幻读 （Phantom Read），即读到的数据可能不是最新的。这个是最常见的，我们举个例子来说明。</p><p><strong>第一步：用工具打开一个数据库的 DB 连接，如图所示。</strong></p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNb6AaokCAABai7wNSic586.png" alt="Drawing 0.png"></p><p>查看一下数据库的事务隔离级别。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNcWACz55AAAXUwrH98M528.png" alt="Drawing 1.png"></p><p>然后开启一个事务，查看一下 user_info 的数据，我们在 user_info 表里面插入了三条数据，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNc2AScnZAACUKRe0XVg992.png" alt="Drawing 2.png"></p><p><strong>第二步：我们打开另外一个相同数据库的 DB 连接，删除一条数据，SQL 如下所示。</strong></p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNdOAK6XEAABWb-OgKmE001.png" alt="Drawing 3.png"></p><p>当删除执行成功之后，我们可以开启第三个连接，看一下数据库里面确实少了一条 ID=1 的数据。那么这个时候我们再返回第一个连接，第二次执行 select * from user_info，如下图所示，查到的还是三条数据。这就是我们经常说的可重复读。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNdyAPJhDAACyY8j4U8k591.png" alt="Drawing 4.png"></p><p><strong>Serializable（可串行化）</strong>：这是最高的隔离级别，它保证了每个事务是串行执行的，即强制事务排序，所有事务之间不可能产生冲突，从而解决幻读问题。如果配置在这个级别的事务，处理时间比较长，并发比较大的时候，就会导致大量的 db 连接超时现象和锁竞争，从而降低了数据处理的吞吐量。也就是这个性能比较低，所以除了某些财务系统之外，用的人不是特别多。</p><p>数据库的隔离级别我们了解完了，并不复杂，这四种类型中，你能清楚地知道<strong>Read Uncommitted 和 Read Committed</strong>就可以了，一般这两个用得是最多的。</p><p>下面看一下数据的事务和连接是什么关系呢？</p><h4 id="mysql-事务与连接的关系" tabindex="-1">MySQL 事务与连接的关系 <a class="header-anchor" href="#mysql-事务与连接的关系" aria-label="Permalink to &quot;MySQL 事务与连接的关系&quot;">​</a></h4><p>我们要搞清楚事务和连接池的关系，必须要先知道二者存在的前提条件。</p><ol><li><p>事务必须在同一个连接里面的，离开连接没有事务可言；</p></li><li><p>MySQL 数据库默认 autocommit=1，即每一条 SQL 执行完自动提交事务；</p></li><li><p>数据库里面的每一条 SQL 执行的时候必须有事务环境；</p></li><li><p>MySQL 创建连接的时候默认开启事务，关闭连接的时候如果存在事务没有 commit 的情况，则自动执行 rollback 操作；</p></li><li><p>不同的 connect 之间的事务是相互隔离的。</p></li></ol><p>知道了这些条件，我们就可以继续探索二者的关系了。在 connection 当中，操作事务的方式只有两种。</p><p><strong>MySQL 事务的两种操作方式</strong></p><p>第一种：用 BEGIN、ROLLBACK、COMMIT 来实现。</p><ul><li><p><strong>BEGIN</strong>开始一个事务</p></li><li><p><strong>ROLLBACK</strong>事务回滚</p></li><li><p><strong>COMMIT</strong>事务确认</p></li></ul><p>第二种：直接用 SET 来改变 MySQL 的自动提交模式。</p><ul><li><p><strong>SET AUTOCOMMIT=0</strong>禁止自动提交</p></li><li><p><strong>SET AUTOCOMMIT=1</strong>开启自动提交</p></li></ul><p><strong>MySQL 数据库的最大连接数是什么？</strong></p><p>而任何数据库的连接数都是有限的，受内存和 CPU 限制，你可以通过</p><p>show variables like &#39;max_connections&#39; 查看此数据库的最大连接数、通过 show global status like &#39;Max_used_connections&#39; 查看正在使用的连接数，还可以通过 set global max_connections=1500 来设置数据库的最大连接数。</p><p>除此之外，你可以在观察数据库的连接数的同时，通过观察 CPU 和内存的使用，来判断你自己的数据库中 server 的连接数最佳大小是多少。而既然是连接，那么肯定会有超时时间，默认是 8 小时。</p><p>这里我只是列举了 MySQL 数据库的事务处理原理，你可以用相同的思考方式看一下你在用的数据源的事务是什么机制的。</p><p>那么学习完了数据库事务的基础知识，我们再看一下 Spring 中事务的用法和配置是什么样的。</p><h3 id="spring-里面事务的配置方法" tabindex="-1">Spring 里面事务的配置方法 <a class="header-anchor" href="#spring-里面事务的配置方法" aria-label="Permalink to &quot;Spring 里面事务的配置方法&quot;">​</a></h3><p>由于我们使用的是 Spring Boot，所以会通过 TransactionAutoConfiguration.java 加载 @EnableTransactionManagement 注解帮我们默认开启事务，关键代码如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNeiAbqu7AAKkFEn3-98148.png" alt="Drawing 5.png"></p><p>Spring 里面的事务有两种使用方式，常见的是直接通过 @Transaction 的方式进行配置，而我们打开 SimpleJpaRepository 源码类的话，会看到如下代码。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">readOnly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleJpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepositoryImplementation</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">.....</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">readOnly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleJpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepositoryImplementation</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">.....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们仔细看源码的时候就会发现，默认情况下，所有 SimpleJpaRepository 里面的方法都是只读事务，而一些更新的方法都是读写事务。</p><p>所以每个 Respository 的方法是都是有事务的，即使我们没有使用任何加 @Transactional 注解的方法，按照上面所讲的 MySQL 的 Transactional 开启原理，也会有数据库的事务。那么我们就来看下 @Transactional 的具体用法。</p><h4 id="默认-transactional-注解式事务" tabindex="-1">默认 @Transactional 注解式事务 <a class="header-anchor" href="#默认-transactional-注解式事务" aria-label="Permalink to &quot;默认 @Transactional 注解式事务&quot;">​</a></h4><p>注解式事务又称显式事务，需要手动显式注解声明，那么我们看看如何使用。</p><p>按照惯例，我们打开 @Transactional 的源码，如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.METHOD, ElementType.TYPE})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">transactionManager</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Propagation </span><span style="color:#B392F0;">propagation</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Propagation.REQUIRED;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Isolation </span><span style="color:#B392F0;">isolation</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Isolation.DEFAULT;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> TransactionDefinition.TIMEOUT_DEFAULT;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readOnly</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Class</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">rollbackFor</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">rollbackForClassName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   Class</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">noRollbackFor</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">noRollbackForClassName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.METHOD, ElementType.TYPE})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;transactionManager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">transactionManager</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   Propagation </span><span style="color:#6F42C1;">propagation</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Propagation.REQUIRED;</span></span>
<span class="line"><span style="color:#24292E;">   Isolation </span><span style="color:#6F42C1;">isolation</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Isolation.DEFAULT;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> TransactionDefinition.TIMEOUT_DEFAULT;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readOnly</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   Class</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">rollbackFor</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">rollbackForClassName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   Class</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">noRollbackFor</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">noRollbackForClassName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>针对 @Transactional 注解中常用的参数，我列了一个表格方便你查看。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6E/36/Ciqc1F-yC3-AP_fhAArdN5coRWQ007.png" alt="图片1.png"></p><p>其他属性你基本上都可以知道是什么意思，下面重点说一下隔离级别和事务的传播机制。</p><p><strong>隔离级别 Isolation isolation() default Isolation.DEFAULT</strong>：默认采用数据库的事务隔离级别。其中，Isolation 是个枚举值，基本和我们上面讲解的数据库隔离级别是一样的，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNiKAcZFcAABWnGlal1Q227.png" alt="Drawing 6.png"></p><p><strong>propagation</strong>：代表的是事务的传播机制，这个是 Spring 事务的核心业务逻辑，是 Spring 框架独有的，它和 MySQL 数据库没有一点关系。所谓事务的传播行为是指在同一线程中，在开始当前事务之前，需要判断一下当前线程中是否有另外一个事务存在，如果存在，提供了七个选项来指定当前事务的发生行为。我们可以看 org.springframework.transaction.annotation.Propagation 这类的枚举值来确定有哪些传播行为。7 个表示传播行为的枚举值如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Propagation</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">REQUIRED</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">SUPPORTS</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">MANDATORY</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">REQUIRES_NEW</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">NOT_SUPPORTED</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">NEVER</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">NESTED</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Propagation</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">REQUIRED</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">SUPPORTS</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">MANDATORY</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">REQUIRES_NEW</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">NOT_SUPPORTED</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">NEVER</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">NESTED</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li><p>REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这个值是默认的。</p></li><li><p>SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p></li><li><p>MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</p></li><li><p>REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</p></li><li><p>NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p></li><li><p>NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</p></li><li><p>NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 REQUIRED。</p></li></ol><p>设置方法：通过使用 propagation 属性设置，例如下面这行代码。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.REQUIRES_NEW)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.REQUIRES_NEW)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>虽然用法很简单，但是也有使用 @Transactional 不生效的时候，那么在哪些场景中是不可用的呢？</p><h4 id="transactional-的局限性" tabindex="-1">@Transactional 的局限性 <a class="header-anchor" href="#transactional-的局限性" aria-label="Permalink to &quot;@Transactional 的局限性&quot;">​</a></h4><p>这里列举的是一个当前对象调用对象自己里面的方法不起作用的场景。</p><p>我们在 UserInfoServiceImpl 的 save 方法中调用了带事务的 calculate 方法，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 根据UserId产生的一些业务计算逻辑</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">transactionManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db2TransactionManager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">calculate</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserInfo userInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(userId).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfo.</span><span style="color:#B392F0;">setAges</span><span style="color:#E1E4E8;">(userInfo.</span><span style="color:#B392F0;">getAges</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//.....等等一些复杂事务内的操作</span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfo.</span><span style="color:#B392F0;">setTelephone</span><span style="color:#E1E4E8;">(Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 此方法调用自身对象的方法，就会发现calculate方法上面的事务是失效的</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">calculate</span><span style="color:#E1E4E8;">(userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 根据UserId产生的一些业务计算逻辑</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">transactionManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db2TransactionManager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">calculate</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      UserInfo userInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(userId).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      userInfo.</span><span style="color:#6F42C1;">setAges</span><span style="color:#24292E;">(userInfo.</span><span style="color:#6F42C1;">getAges</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//.....等等一些复杂事务内的操作</span></span>
<span class="line"><span style="color:#24292E;">      userInfo.</span><span style="color:#6F42C1;">setTelephone</span><span style="color:#24292E;">(Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 此方法调用自身对象的方法，就会发现calculate方法上面的事务是失效的</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">calculate</span><span style="color:#24292E;">(userId);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>当在 UserInfoServiceImpl 类的外部调用 save 方法的时候，此时 save 方法里面调用了自身的 calculate 方法，你就会发现 calculate 方法上面的事务是没有效果的，这个是 Spring 的代理机制的问题。那么我们应该如何解决这个问题呢？可以引入一个类 TransactionTemplate，我们看下它的用法。</p><h4 id="transactiontemplate-的用法" tabindex="-1">TransactionTemplate 的用法 <a class="header-anchor" href="#transactiontemplate-的用法" aria-label="Permalink to &quot;TransactionTemplate 的用法&quot;">​</a></h4><p>此类是通过 TransactionAutoConfiguration 加载配置进去的，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNjSAdRhTAAD7wR2FY0Y574.png" alt="Drawing 7.png"></p><p>我们通过源码可以看到此类提供了一个关键 execute 方法，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNjqAQwCiAAFp_zAyVg4557.png" alt="Drawing 8.png"></p><p>这里面会帮我们处理事务开始、rollback、commit 的逻辑，所以我们用的时候就非常简单，把上面的方法做如下改动。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Long userId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(status </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">calculate</span><span style="color:#E1E4E8;">(userId));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Long userId) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(status </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">calculate</span><span style="color:#24292E;">(userId));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此时外部再调用我们的 save 方法的时候，calculate 就会进入事务管理里面去了。当然了，我这里举的例子很简单，你也可以通过下面代码中的方法设置隔离级别和传播机制，以及超时时间和是否只读。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">transactionTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionTemplate</span><span style="color:#E1E4E8;">(transactionManager);</span></span>
<span class="line"><span style="color:#6A737D;">//设置隔离级别</span></span>
<span class="line"><span style="color:#E1E4E8;">transactionTemplate.</span><span style="color:#B392F0;">setIsolationLevel</span><span style="color:#E1E4E8;">(TransactionDefinition.ISOLATION_REPEATABLE_READ);</span></span>
<span class="line"><span style="color:#6A737D;">//设置传播机制</span></span>
<span class="line"><span style="color:#E1E4E8;">transactionTemplate.</span><span style="color:#B392F0;">setPropagationBehavior</span><span style="color:#E1E4E8;">(TransactionDefinition.PROPAGATION_REQUIRES_NEW);</span></span>
<span class="line"><span style="color:#6A737D;">//设置超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">transactionTemplate.</span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//设置是否只读</span></span>
<span class="line"><span style="color:#E1E4E8;">transactionTemplate.</span><span style="color:#B392F0;">setReadOnly</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">transactionTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionTemplate</span><span style="color:#24292E;">(transactionManager);</span></span>
<span class="line"><span style="color:#6A737D;">//设置隔离级别</span></span>
<span class="line"><span style="color:#24292E;">transactionTemplate.</span><span style="color:#6F42C1;">setIsolationLevel</span><span style="color:#24292E;">(TransactionDefinition.ISOLATION_REPEATABLE_READ);</span></span>
<span class="line"><span style="color:#6A737D;">//设置传播机制</span></span>
<span class="line"><span style="color:#24292E;">transactionTemplate.</span><span style="color:#6F42C1;">setPropagationBehavior</span><span style="color:#24292E;">(TransactionDefinition.PROPAGATION_REQUIRES_NEW);</span></span>
<span class="line"><span style="color:#6A737D;">//设置超时时间</span></span>
<span class="line"><span style="color:#24292E;">transactionTemplate.</span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//设置是否只读</span></span>
<span class="line"><span style="color:#24292E;">transactionTemplate.</span><span style="color:#6F42C1;">setReadOnly</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们也可以根据 transactionTemplate 的实现原理，自己实现一个 TransactionHelper，一起来看一下。</p><h4 id="自定义-transactionhelper" tabindex="-1">自定义 TransactionHelper <a class="header-anchor" href="#自定义-transactionhelper" aria-label="Permalink to &quot;自定义 TransactionHelper&quot;">​</a></h4><p>第一步：新建一个 TransactionHelper 类，进行事务管理，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 利用spring进行管理</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionHelper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 利用spring 的机制和jdk8的function机制实现事务</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rollbackFor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Exception.class) </span><span style="color:#6A737D;">//可以根据实际业务情况，指定明确的回滚异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; R </span><span style="color:#B392F0;">transactional</span><span style="color:#E1E4E8;">(Function&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">function</span><span style="color:#E1E4E8;">, T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> function.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 利用spring进行管理</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionHelper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 利用spring 的机制和jdk8的function机制实现事务</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rollbackFor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Exception.class) </span><span style="color:#6A737D;">//可以根据实际业务情况，指定明确的回滚异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; R </span><span style="color:#6F42C1;">transactional</span><span style="color:#24292E;">(Function&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">function</span><span style="color:#24292E;">, T </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> function.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>第二步：直接在 service 中就可以使用了，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TransactionHelper transactionHelper;</span><span style="color:#F97583;">==</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 调用外部的transactionHelper类，利用transactionHelper方法上面的@Transaction注解使事务生效</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Long userId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> transactionHelper.</span><span style="color:#B392F0;">transactional</span><span style="color:#E1E4E8;">((uid)</span><span style="color:#F97583;">-&gt;</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">calculate</span><span style="color:#E1E4E8;">(uid),userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TransactionHelper transactionHelper;</span><span style="color:#D73A49;">==</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 调用外部的transactionHelper类，利用transactionHelper方法上面的@Transaction注解使事务生效</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Long userId) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> transactionHelper.</span><span style="color:#6F42C1;">transactional</span><span style="color:#24292E;">((uid)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">calculate</span><span style="color:#24292E;">(uid),userId);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面我介绍了显式事务，都是围绕 @Transactional 的显式指定的事务，我们也可以利用 AspectJ 进行隐式的事务配置。</p><h4 id="隐式事务-aspectj-事务配置" tabindex="-1">隐式事务 / AspectJ 事务配置 <a class="header-anchor" href="#隐式事务-aspectj-事务配置" aria-label="Permalink to &quot;隐式事务 / AspectJ 事务配置&quot;">​</a></h4><p>只需要在我们的项目中新增一个类 AspectjTransactionConfig 即可，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AspectjTransactionConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String transactionExecution </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;execution (* com.example..service.*.*(..))&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//指定拦截器作用的包路径</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> PlatformTransactionManager transactionManager;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DefaultPointcutAdvisor </span><span style="color:#B392F0;">defaultPointcutAdvisor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//指定一般要拦截哪些类</span></span>
<span class="line"><span style="color:#E1E4E8;">      AspectJExpressionPointcut pointcut </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AspectJExpressionPointcut</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      pointcut.</span><span style="color:#B392F0;">setExpression</span><span style="color:#E1E4E8;">(transactionExecution);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//配置advisor</span></span>
<span class="line"><span style="color:#E1E4E8;">      DefaultPointcutAdvisor advisor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultPointcutAdvisor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      advisor.</span><span style="color:#B392F0;">setPointcut</span><span style="color:#E1E4E8;">(pointcut);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//根据正则表达式，指定上面的包路径里面的方法的事务策略</span></span>
<span class="line"><span style="color:#E1E4E8;">      Properties attributes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      attributes.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      attributes.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;add*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      attributes.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;save*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      attributes.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;update*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      attributes.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delete*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//创建Interceptor</span></span>
<span class="line"><span style="color:#E1E4E8;">      TransactionInterceptor txAdvice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionInterceptor</span><span style="color:#E1E4E8;">(transactionManager, attributes);</span></span>
<span class="line"><span style="color:#E1E4E8;">      advisor.</span><span style="color:#B392F0;">setAdvice</span><span style="color:#E1E4E8;">(txAdvice);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> advisor;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AspectjTransactionConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String transactionExecution </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;execution (* com.example..service.*.*(..))&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//指定拦截器作用的包路径</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PlatformTransactionManager transactionManager;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DefaultPointcutAdvisor </span><span style="color:#6F42C1;">defaultPointcutAdvisor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//指定一般要拦截哪些类</span></span>
<span class="line"><span style="color:#24292E;">      AspectJExpressionPointcut pointcut </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AspectJExpressionPointcut</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      pointcut.</span><span style="color:#6F42C1;">setExpression</span><span style="color:#24292E;">(transactionExecution);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//配置advisor</span></span>
<span class="line"><span style="color:#24292E;">      DefaultPointcutAdvisor advisor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultPointcutAdvisor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      advisor.</span><span style="color:#6F42C1;">setPointcut</span><span style="color:#24292E;">(pointcut);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//根据正则表达式，指定上面的包路径里面的方法的事务策略</span></span>
<span class="line"><span style="color:#24292E;">      Properties attributes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      attributes.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get*&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      attributes.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;add*&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      attributes.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;save*&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      attributes.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;update*&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      attributes.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delete*&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PROPAGATION_REQUIRED,-Exception&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//创建Interceptor</span></span>
<span class="line"><span style="color:#24292E;">      TransactionInterceptor txAdvice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionInterceptor</span><span style="color:#24292E;">(transactionManager, attributes);</span></span>
<span class="line"><span style="color:#24292E;">      advisor.</span><span style="color:#6F42C1;">setAdvice</span><span style="color:#24292E;">(txAdvice);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> advisor;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>这种方式，只要符合我们上面的正则表达规则的 service 方法，就会自动添加事务了；如果我们在方法上添加 @Transactional，也可以覆盖上面的默认规则。</p><p>不过这种方法近两年使用的团队越来越少了，因为注解的方式其实很方便，并且注解 @Transactional 的方式更容易让人理解，代码也更简单，你了解一下就好了。</p><p>上面的方法介绍完了，那么一个方法经历的 SQL 和过程都有哪些呢？我们通过日志分析一下。</p><h4 id="通过日志分析配置方法的过程" tabindex="-1">通过日志分析配置方法的过程 <a class="header-anchor" href="#通过日志分析配置方法的过程" aria-label="Permalink to &quot;通过日志分析配置方法的过程&quot;">​</a></h4><p>大致可以分为以下几个步骤。</p><p>第一步，我们在数据连接中加上 logger=Slf4JLogger&amp;profileSQL=true，用来显示 MySQL 执行的 SQL 日志，如图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNm2ATrnOAABc0E8c02I350.png" alt="Drawing 9.png"></p><p>第二步，打开 Spring 的事务处理日志，用来观察事务的执行过程，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># Log Transactions Details</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.springframework.orm.jpa</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DEBUG</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.springframework.transaction</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">TRACE</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.hibernate.engine.transaction.internal.TransactionImpl</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DEBUG</span></span>
<span class="line"><span style="color:#E1E4E8;"># 监控连接的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.hibernate.resource.jdbc</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.com.zaxxer.hikari</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DEBUG</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># Log Transactions Details</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.springframework.orm.jpa</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DEBUG</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.springframework.transaction</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">TRACE</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.hibernate.engine.transaction.internal.TransactionImpl</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DEBUG</span></span>
<span class="line"><span style="color:#24292E;"># 监控连接的情况</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.hibernate.resource.jdbc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace</span></span>
<span class="line"><span style="color:#24292E;">logging.level.com.zaxxer.hikari</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DEBUG</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>第三步，我们执行一个 saveOrUpdate 的操作，详细的执行日志如下所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNluAfXmfAAaGouAFSxo546.png" alt="Drawing 10.png"></p><p>通过日志可以发现，我们执行一个 saveUserInfo 的动作，由于在其中配置了一个事务，所以可以看到 JpaTransactionManager 获得事务的过程，图上黄色的部分是同一个连接里面执行的 SQL 语句，其执行的整体过程如下所示。</p><ol><li><p>get connection：从事务管理里面，获得连接就 begin 开始事务了。我们没有看到显示的 begin 的 SQL，基本上可以断定它利用了 MySQL 的 connection 初始化事务的特性。</p></li><li><p>set autocommit=0：关闭自动提交模式，这个时候必须要在程序里面 commit 或者 rollback。</p></li><li><p>select user_info：看看 user_info 数据库里面是否存在我们要保存的数据。</p></li><li><p>update user_info：发现数据库里面存在，执行更新操作。</p></li><li><p>commit：执行提交事务。</p></li><li><p>set autocommit=1：事务执行完，改回 autocommit 的默认值，每条 SQL 是独立的事务。</p></li></ol><p>我们这里采用的是数据库默认的隔离级别，如果我们通过下面这行代码，改变默认隔离级别的话，再观察我们的日志。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isolation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Isolation.READ_COMMITTED)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isolation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Isolation.READ_COMMITTED)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你会发现在开始事务之前，它会先改变默认的事务隔离级别，如图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNn-APx9CAADQdW_irSE093.png" alt="Drawing 11.png"></p><p>而在事务结束之后，它还会还原此链接的事务隔离级别，又如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNoWAEDj7AAFt5sGd5LM165.png" alt="Drawing 12.png"></p><p>如果你明白了 MySQL 的事务原理的话，再通过日志分析可以很容易地理解 Spring 的事务原理。我们在日志里面能看到 MySQL 的事务执行过程，同样也能看到 Spring 的 TransactionImpl 的事务执行过程。这是什么原理呢？我们来详细分析一下。</p><h3 id="spring-事务的实现原理" tabindex="-1">Spring 事务的实现原理 <a class="header-anchor" href="#spring-事务的实现原理" aria-label="Permalink to &quot;Spring 事务的实现原理&quot;">​</a></h3><p>这里我重点介绍一下 @Transactional 的工作机制，这个主要是利用 Spring 的 AOP 原理，在加载所有类的时候，容器就会知道某些类需要对应地进行哪些 Interceptor 的处理。</p><p>例如我们所讲的 TransactionInterceptor，在启动的时候是怎么设置事务的、是什么样的处理机制，默认的代理机制又是什么样的呢？</p><h4 id="spring-事务源码分析" tabindex="-1">Spring 事务源码分析 <a class="header-anchor" href="#spring-事务源码分析" aria-label="Permalink to &quot;Spring 事务源码分析&quot;">​</a></h4><p>我们在 TransactionManagementConfigurationSelector 里面设置一个断点，就会知道代理的加载类 ProxyTransactionManagementConfiguration 对事务的处理机制。关键源码如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNo2AInI6AAD3vfniJv8550.png" alt="Drawing 13.png"></p><p>而我们打开 ProxyTransactionManagementConfiguration 的话，就会加载 TransactionInterceptor 的处理类，关键源码如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNpOAAxwDAAGlgl20cFA682.png" alt="Drawing 14.png"></p><p>如果继续加载的话，里面就会加载带有 @Transactional 注解的类或者方法。关键源码如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNpuAC0_7AAIneVB94HQ302.png" alt="Drawing 15.png"></p><p>加载期间，通过 @Trnsactional 注解来确定哪些方法需要进行事务处理。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">o.s.orm.jpa.JpaTransactionManager </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Creating </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> transaction with name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">o.s.orm.jpa.JpaTransactionManager </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Creating </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> transaction with name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而运行期间通过上面这条日志，就可以找到 JpaTransactionManager 里面通过 getTransaction 方法创建的事务，然后再通过 debuger 模式的 IDEA 线程栈进行分析，就能知道创建事务的整个过程。你可以一步一步地去断点进行查看，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNqKAB-R6AAGkheoE3KM863.png" alt="Drawing 16.png"></p><p>如上图，我们可以知道 createTransactionIfNecessary 是用来判断是否需要创建事务的，有兴趣的话你可以点击进去看看，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNqmAKf_kAAGFZTc6ZAY735.png" alt="Drawing 17.png"></p><p>我们继续往下面 debug 的话，就会找到创建事务的关键代码，它会通过调用 AbstractPlatformTransactionManager 里面的 startTransaction 方法开启事务，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNq-AeshIAAI2vVdh7OM636.png" alt="Drawing 18.png"></p><p>然后我们就可以继续往下断点进行分析了。断点走到最后的时候，你就可以看到开启事务的时候，必须要从我们的数据源里面获得连接。看一下断点的栈信息，这里有几个关键的 debug 点。如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/98/CgqCHl-uNraAaX3wAAH1QpBB_a8699.png" alt="Drawing 19.png"></p><p>其中，</p><p>第一处：是处理带 @Transactional 的注解的方法，利用 CGLIB 进行事务拦截处理；</p><p>第二处：是根据 Spring 的事务传播机制，来判断是用现有的事务，还是创建新的事务；</p><p>第七处：是用来判断是否现有连接，如果有直接用，如果没有就从第八处的数据源里面的连接池中获取连接，第七处的关键代码如下。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNr6Ab1CwAADUuVBSiKY292.png" alt="Drawing 20.png"></p><p>到这里，我们介绍完了事务获得连接的关键时机，那么还需要知道它是在什么时间释放连接到连接池里面的。我们在 LogicalConnectionManagedImpl 的 releaseConnection 方法中设置一个断点，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6D/8D/Ciqc1F-uNsqAFKXjAACeh8P3Fcg501.png" alt="Drawing 21.png"></p><p>然后观察断点线性的执行方法，你会发现，在事务执行之后，它会将连接释放到连接池里面。</p><p>我们通过上面的 saveOrUpdate 的详细执行日志，可以观察出来，事务是在什么时机开启的、数据库连接是什么时机开启的、事务是在什么时机关闭的，以及数据库连接是在什么时机释放的，如果你没看出来，可以再仔细看一遍日志。</p><p>所以，Spring 中的事务和连接的关系是，开启事务的同时获取 DB 连接；事务完成的时候释放 DB 连接。通过 MySQL 的基础知识可以知道数据库连接是有限的，那么当我们给某些方法加事务的时候，都需要注意哪些内容呢？</p><h4 id="事务和连接池在-jpa-中的注意事项" tabindex="-1">事务和连接池在 JPA 中的注意事项 <a class="header-anchor" href="#事务和连接池在-jpa-中的注意事项" aria-label="Permalink to &quot;事务和连接池在 JPA 中的注意事项&quot;">​</a></h4><p>我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=490#/detail/pc?id=4717" target="_blank" rel="noreferrer">&quot;17 | DataSource 为何物？加载过程是怎样的？&quot;</a>中对数据源的介绍时，说过数据源的连接池不能配置过大，否则连接之前切换就会非常耗费应用内部的 CPU 和内存，从而降低应用对外提供 API 的吞吐量。</p><p>所以当我们使用事务的时候，需要注意如下 几个事项：</p><ol><li><p>事务内的逻辑不能执行时间太长，否则就会导致占用 db 连接的时间过长，会造成数据库连接不够用的情况；</p></li><li><p>跨应用的操作，如 API 调用等，尽量不要在有事务的方法里面进行；</p></li><li><p>如果在真实业务场景中有耗时的操作，也需要带事务时（如扣款环节），那么请注意增加数据源配置的连接池数；</p></li><li><p>我们通过 MVC 的应用请求连接池数量，也要根据连接池的数量和事务的耗时情况灵活配置；而 tomcat 默认的请求连接池数量是 200 个，可以根据实际情况来增加或者减少请求的连接池数量，从而减少并发处理对事务的依赖。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本讲中，我们通过 MySQL 的基本原理、Spring 的事务处理日志及其源码分析，知道了 Spring 里面处理事务的全过程。通过日志，你也可以学会分析设置的事务和 SQL 是不是按照预期执行的。</p><p>同时，我也为你讲述了连接和事务之间的关系，当你需要设置连接池的时候，可以进行参考；并且在工作中，如果遇到报连接池不够用的情况，也可以从容地知道原因：是不是事务的方法执行比较耗时？等等。</p><p>此外，当事务不起作用的时候，我也为你介绍了 TransactionTemplate 和 TransactionHelper 的方法，你可以拿去借鉴。</p><p>希望这一讲的内容可以帮助你搞清楚事务、连接池之间的关系。下一讲我们会介绍 Hibernate 在 JPA 中的配置有哪些。你可以先思考一下，也可以查找资料预习一下。我们下一讲再见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,147),e=[o];function t(r,c,i,E,y,u){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{b as __pageData,d as default};
