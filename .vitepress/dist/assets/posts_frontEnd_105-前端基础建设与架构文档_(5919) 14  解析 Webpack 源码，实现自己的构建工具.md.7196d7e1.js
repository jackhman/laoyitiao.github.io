import{_ as p,j as o,o as e,g as c,k as a,h as n,Q as l,s as t}from"./chunks/framework.a0d18f64.js";const b=JSON.parse('{"title":"14解析Webpack源码，实现自己的构建工具","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5919) 14  解析 Webpack 源码，实现自己的构建工具.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5919) 14  解析 Webpack 源码，实现自己的构建工具.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5919) 14  解析 Webpack 源码，实现自己的构建工具.md"},E=l(`<h1 id="_14解析webpack源码-实现自己的构建工具" tabindex="-1">14解析Webpack源码，实现自己的构建工具 <a class="header-anchor" href="#_14解析webpack源码-实现自己的构建工具" aria-label="Permalink to &quot;14解析Webpack源码，实现自己的构建工具&quot;">​</a></h1><p>前端工程化和基础建设这个话题，自然少不了分析构建工具。作为前端工程中最常见、最经典的构建工具，Webpack 必须要有一个独立小节进行精讲。可是，关于 Webpack 什么样的内容才更有意义呢？当前社区，Webpack 插件编写、loader 编写相关内容已经非常多了，甚至 Tapable 机制也已经有了涉猎。</p><p>这一讲，我们独辟蹊径，从 Webpack 的实现入手，帮助你构建一个自己的工程化工具。</p><h3 id="webpack-的初心和揭秘" tabindex="-1">Webpack 的初心和揭秘 <a class="header-anchor" href="#webpack-的初心和揭秘" aria-label="Permalink to &quot;Webpack 的初心和揭秘&quot;">​</a></h3><p>我不建议对着 Webpack 源码讲解，因为 Webpack 是一个庞大的体系，其源码逐行讲解太过枯燥，真正能转化在技术积累上的内容较少。今天，我们先抽丝剥茧，从 Webpack 的使命谈起，相信你会有一个更加清晰的认知。</p><p>Webpack 的介绍只有简单一句：</p><blockquote><p>Webpack is a static module bundler for modern JavaScript applications.</p></blockquote><p>虽然 Webpack 看上去无所不能，但从其本质上来说，Webpack 实质就是一个&quot;前端模块打包器&quot;。前端模块打包器做的事情很简单：它帮助开发者将 JavaScript 模块（各种类型的模块化规范）打包为一个或多个 JavaScript 脚本文件。</p><p>我们回到最初起源，前端为什么需要一个模块打包器呢？其实理由很简单：</p><ul><li><p>不是所有浏览器都直接支持 JavaScript 规范；</p></li><li><p>前端需要管理依赖脚本，把控不同脚本加载的顺序；</p></li><li><p>前端需要按顺序加载不同类型的静态资源。</p></li></ul><p>想象一下，我们的 Web 应用有这样一段内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/src/1.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/src/2.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/src/3.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/src/4.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/src/5.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/src/6.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/src/1.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/src/2.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/src/3.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/src/4.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/src/5.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/src/6.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>每个 JavaScript 文件都需要额外的 HTTP 请求获取，并且因为依赖关系，<code>1.js</code>到<code>6.js</code>需要按顺序加载。因此，打包需求应运而生：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/dist/bundle.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/dist/bundle.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>这里需要注意几点：</p><ul><li><p>随着 HTTP/2 技术的推广，未来长远上看，浏览器像上述代码一样发送多个请求不再是性能瓶颈，但目前来看还过于乐观（更多内容参见 <a href="https://developers.google.com/web/fundamentals/performance/http2/" target="_blank" rel="noreferrer">HTTP/2 简介</a>）；</p></li><li><p><strong>并不是将所有脚本都打包在一起就是性能最优</strong> ，<code>/dist/bundle.js</code>的 size 一般较大，但这属于另外&quot;性能优化&quot;话题了，相关内容，我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5915" target="_blank" rel="noreferrer">10 讲&quot;代码拆分和按需加载：缩减 bundle size，把性能做到极致&quot;</a>中已有涉及。</p></li></ul><p>总之，打包器的需求就是前端&quot;刚需&quot;，实现上述打包需要也并不简单，需要考虑：</p><ul><li><p>如何维护不同脚本的打包顺序，保证<code>bundle.js</code>的可用性；</p></li><li><p>如何避免不同脚本、不同模块的命名冲突；</p></li><li><p>在打包过程中，如何确定真正需要的脚本，而不将没有用到的脚本排除在<code>bundle.js</code>之外？</p></li></ul><p>事实上，虽然当前 Webpack 依靠 loader 机制实现了对于不同类型资源的解析和打包，依靠插件机制实现了第三方介入编译构建的过程，但究其本质，Webpack 只是一个&quot;无所不能&quot;的打包器，实现了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a.js </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b.js </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> c.js. </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> bundle.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a.js </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b.js </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c.js. </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> bundle.js</span></span></code></pre></div><p>的能力。</p><p>下面我们继续揭秘 Webpack 在打包过程中的奥秘。</p><p>为了简化，我们以 ESM 模块化规范举例。假设我们有：</p><ul><li><p><code>circle.js</code>模块求圆形面积；</p></li><li><p><code>square.js</code>模块求正方形面积；</p></li><li><p><code>app.js</code>模块作为主模块。</p></li></ul><p>对应内容分别如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// filename: circle.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> PI </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.141</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">area</span><span style="color:#E1E4E8;">(radius) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> PI </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> radius </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> radius;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// filename: square.js</span></span>
<span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">area</span><span style="color:#E1E4E8;">(side) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> side </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> side;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// filename: app.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> squareArea from &#39;./square&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> circleArea from &#39;./circle&#39;;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Area of square: &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">squareArea</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Area of circle&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">circleArea</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// filename: circle.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.141</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">area</span><span style="color:#24292E;">(radius) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> radius </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> radius;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// filename: square.js</span></span>
<span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">area</span><span style="color:#24292E;">(side) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> side </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> side;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// filename: app.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> squareArea from &#39;./square&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> circleArea from &#39;./circle&#39;;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Area of square: &#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">squareArea</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Area of circle&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">circleArea</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span></code></pre></div><p>经过 Webpack 打包之后，我们用<code>bundle.js</code>来表示 Webpack 处理结果（精简并可读化处理后）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// filename: bundle.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> modules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;circle.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(exports, require) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> PI </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.141</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    exports.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">area</span><span style="color:#E1E4E8;">(radius) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> PI </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> radius </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> radius;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;square.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(exports, require) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    exports.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">area</span><span style="color:#E1E4E8;">(side) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> side </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> side;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;app.js&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(exports, require) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> squareArea </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;square.js&#39;</span><span style="color:#E1E4E8;">).default;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> circleArea </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;circle.js&#39;</span><span style="color:#E1E4E8;">).default;</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Area of square: &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">squareArea</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Area of circle&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">circleArea</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">webpackBundle</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  modules,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;app.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// filename: bundle.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> modules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;circle.js&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(exports, require) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.141</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    exports.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">area</span><span style="color:#24292E;">(radius) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> radius </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> radius;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;square.js&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(exports, require) {</span></span>
<span class="line"><span style="color:#24292E;">    exports.default </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">area</span><span style="color:#24292E;">(side) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> side </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> side;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;app.js&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(exports, require) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> squareArea </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;square.js&#39;</span><span style="color:#24292E;">).default;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> circleArea </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;circle.js&#39;</span><span style="color:#24292E;">).default;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Area of square: &#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">squareArea</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Area of circle&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">circleArea</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">webpackBundle</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  modules,</span></span>
<span class="line"><span style="color:#24292E;">  entry</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;app.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>如上代码，我们维护了<code>modules</code>变量，存储了不同模块信息，这个 map 中，key 为模块路径名，value 为一个被 wrapped 过的模块函数，我们先称之为<code>module factory function</code>，该函数形如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(exports, require) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 模块内容</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(exports, require) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 模块内容</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样做是为每个模块提供<code>exports</code>和<code>require</code>能力，同时<strong>保证了每个模块都处于一个隔离的函数作用域范围</strong>。</p><p>有了<code>modules</code>变量还不够，我们依赖<code>webpackBundle</code>方法，将所有内容整合在一起。<code>webpackBundle</code>方法接收<code>modules</code>模块信息以及一个入口脚本。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">webpackBundle</span><span style="color:#E1E4E8;">({ modules, entry }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> moduleCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> require </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moduleName </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果已经解析并缓存过，直接返回缓存内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (moduleCache[moduleName]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> moduleCache[moduleName];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里是为了防止循环引用</span></span>
<span class="line"><span style="color:#E1E4E8;">    moduleCache[moduleName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行模块内容，如果遇见了 require 方法，则继续递归执行 require 方法 </span></span>
<span class="line"><span style="color:#E1E4E8;">    modules[moduleName](exports, require);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> moduleCache[moduleName];</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(entry);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">webpackBundle</span><span style="color:#24292E;">({ modules, entry }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> moduleCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> require </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moduleName </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果已经解析并缓存过，直接返回缓存内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (moduleCache[moduleName]) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> moduleCache[moduleName];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里是为了防止循环引用</span></span>
<span class="line"><span style="color:#24292E;">    moduleCache[moduleName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exports;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行模块内容，如果遇见了 require 方法，则继续递归执行 require 方法 </span></span>
<span class="line"><span style="color:#24292E;">    modules[moduleName](exports, require);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> moduleCache[moduleName];</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(entry);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中需要注意：<strong>webpackBundle 方法中声明的</strong> <code>require</code>方法和 CommonJS 规范中的 require 是两回事，该<code>require</code>方法是 Webpack 自己实现的模块化解决方案。</p><p>我们通过下图来总结一下 Webpack 风格的打包器原理和流程：</p>`,35),y=l(`<p>Webpack 打包器原理和流程图</p><p>讲到这里，我们再扩充一下另一个打包器------Rollup 的打包原理，针对上述代码，Rollup 打包过后的产出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> PI </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.141</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">circle$area</span><span style="color:#E1E4E8;">(radius) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> PI </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> radius </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> radius;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">square$area</span><span style="color:#E1E4E8;">(side) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> side </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> side;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Area of square: &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">square$area</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Area of circle&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">circle$area</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.141</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">circle$area</span><span style="color:#24292E;">(radius) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> PI </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> radius </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> radius;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">square$area</span><span style="color:#24292E;">(side) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> side </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> side;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Area of square: &#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">square$area</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Area of circle&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">circle$area</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span></code></pre></div><p>如上代码，我们看到，Rollup 的原理思想与 Webpack 不同：<strong>Rollup 不会维护一个 module map，而是将所有模块拍平（flatten）放到 bundle 中</strong>，也就不存在包裹函数（module factory function）。</p><p>为了保证命名冲突不出现，Rollup 将函数和变量名进行了改写，在模块脚本<code>circle.js</code>和<code>square.js</code>中，都命名了一个<code>area</code>方法。经过 Rollup 打包后，<code>area</code>方法根据模块主体，进行了重命名。</p><p>我们将 Webpack 和 Rollup 的打包方式进行对比总结。</p><ul><li>Webpack 理念：</li></ul><ol><li><p>使用了 module map，维护项目中的依赖关系；</p></li><li><p>使用了包裹函数，对每个模块进行包裹；</p></li><li><p>使用了一个&quot;runtime&quot;方法（这里举例为<code>webpackBundle</code>），最终合成 bundle 内容。</p></li></ol><ul><li>Rollup 理念：</li></ul><ol><li><p>将每个模块拍平；</p></li><li><p>不使用包裹函数，不需要对每个模块进行包裹。</p></li></ol><p>不同的理念也会造成不同的打包结果，这里我想给你留一个思考题：<strong>在 Rollup 处理理念下，如果模块出现了循环依赖，会发生什么现象呢</strong>？</p><h3 id="手动实现打包器" tabindex="-1">手动实现打包器 <a class="header-anchor" href="#手动实现打包器" aria-label="Permalink to &quot;手动实现打包器&quot;">​</a></h3><p>前面内容我们剖析了以 Webpak、Rollup 为代表的打包器核心原理。下面内容，我们将手动实现一个自己的简易打包器，我们的目标将会向 Webpack 打包设计对齐。核心思路如下：</p><ol><li><p>读取入口文件（比如<code>entry.js</code>）；</p></li><li><p>基于 AST 分析入口文件，并产出依赖列表；</p></li><li><p>使用 Babel 将相关模块编译到 ES5；</p></li><li><p>对每个依赖模块产出一个唯一的 ID，方便后续读取模块相关内容；</p></li><li><p>将每个依赖以及经过 Babel 编译过后的内容，存储在一个对象中进行维护；</p></li><li><p>遍历上一步中的对象，构建出一个依赖图（Dependency Graph）；</p></li><li><p>将各模块内容 bundle 产出。</p></li></ol><p>我们来一步一步实现。首先创建项目：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mkdir bundler</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">playground </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> cd $_</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mkdir bundler</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">playground </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> cd $_</span></span></code></pre></div><p>并启动 npm：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm init </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm init </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">y</span></span></code></pre></div><p>安装以下依赖：</p><ul><li><p><code>@babel/parser</code>用于分析源代码，产出 AST；</p></li><li><p><code>@babel/traverse</code>用于遍历 AST，找到 import 声明；</p></li><li><p><code>@babel/core</code>用于编译，将源代码编译为 ES5；</p></li><li><p><code>@babel/preset-env</code>搭配<code>@babel/core</code>使用；</p></li><li><p><code>resolve</code>用于获取依赖的绝对路径。</p></li></ul><p>相关命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">save @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">parser @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">traverse @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">core  @</span><span style="color:#F97583;">babel/</span><span style="color:#E1E4E8;">preset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">env resolve</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">save @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">parser @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">traverse @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">core  @</span><span style="color:#D73A49;">babel/</span><span style="color:#24292E;">preset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">env resolve</span></span></code></pre></div><p>做完了这些，我们开始核心逻辑的编写，创建<code>index.js</code>，并引入如下依赖代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/parser&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> traverse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/traverse&quot;</span><span style="color:#E1E4E8;">).default;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/core&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolve&quot;</span><span style="color:#E1E4E8;">).sync;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/parser&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> traverse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/traverse&quot;</span><span style="color:#24292E;">).default;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> babel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/core&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resolve&quot;</span><span style="color:#24292E;">).sync;</span></span></code></pre></div><p>接着，我们维护一个全局 ID，并通过遍历 AST，访问<code>ImportDeclaration</code>节点，收集依赖到<code>deps</code>数组中，同时完成 Babel 降级编译：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">let ID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createModuleInfo</span><span style="color:#E1E4E8;">(filePath) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取模块源代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(filePath, </span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对源代码进行 AST 产出</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(content, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 相关模块依赖数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> deps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历模块 AST，将依赖推入 deps 数组中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ImportDeclaration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ({ node }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          deps.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(node.source.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ID</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 编译为 ES5</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { code } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> babel.</span><span style="color:#B392F0;">transformFromAstSync</span><span style="color:#E1E4E8;">(ast, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        presets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;@babel/preset-env&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        id,</span></span>
<span class="line"><span style="color:#E1E4E8;">        filePath,</span></span>
<span class="line"><span style="color:#E1E4E8;">        deps,</span></span>
<span class="line"><span style="color:#E1E4E8;">        code</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">let ID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createModuleInfo</span><span style="color:#24292E;">(filePath) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取模块源代码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(filePath, </span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对源代码进行 AST 产出</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(content, {</span></span>
<span class="line"><span style="color:#24292E;">    sourceType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;module&quot;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 相关模块依赖数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> deps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历模块 AST，将依赖推入 deps 数组中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(ast, {</span></span>
<span class="line"><span style="color:#24292E;">        ImportDeclaration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ({ node }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          deps.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(node.source.value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ID</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 编译为 ES5</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { code } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> babel.</span><span style="color:#6F42C1;">transformFromAstSync</span><span style="color:#24292E;">(ast, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        presets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;@babel/preset-env&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        id,</span></span>
<span class="line"><span style="color:#24292E;">        filePath,</span></span>
<span class="line"><span style="color:#24292E;">        deps,</span></span>
<span class="line"><span style="color:#24292E;">        code</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中，相关注释已经比较明晰了。这里需要指出的是，我们采用了<strong>自增 ID</strong> 的方式，<strong>如果采用随机的 GUID，会是更安全的做法</strong>。</p><p>至此，我们实现了对一个模块的分析，并产出：</p><ul><li><p>该模块对应 ID；</p></li><li><p>该模块路径；</p></li><li><p>该模块的依赖数组；</p></li><li><p>该模块经过 Babel 编译后的代码。</p></li></ul><p>接下来，我们生成整个项目的依赖树（Dependency Graph）。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createDependencyGraph</span><span style="color:#E1E4E8;">(entry) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取模块信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> entryInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createModuleInfo</span><span style="color:#E1E4E8;">(entry);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 项目依赖树</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> graphArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    graphArr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(entryInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 以入口模块为起点，遍历整个项目依赖的模块，并将每个模块信息维护到 graphArr 中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> module of graphArr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        module.map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">        module.deps.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(depPath </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> baseDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(module.filePath);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> moduleDepPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(depPath, { baseDir });</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> moduleInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createModuleInfo</span><span style="color:#E1E4E8;">(moduleDepPath);</span></span>
<span class="line"><span style="color:#E1E4E8;">            graphArr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(moduleInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">            module.map[depPath] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moduleInfo.id;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> graphArr;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createDependencyGraph</span><span style="color:#24292E;">(entry) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取模块信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> entryInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createModuleInfo</span><span style="color:#24292E;">(entry);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 项目依赖树</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> graphArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    graphArr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(entryInfo);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 以入口模块为起点，遍历整个项目依赖的模块，并将每个模块信息维护到 graphArr 中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> module of graphArr) {</span></span>
<span class="line"><span style="color:#24292E;">        module.map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">        module.deps.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(depPath </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> baseDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(module.filePath);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> moduleDepPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(depPath, { baseDir });</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> moduleInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createModuleInfo</span><span style="color:#24292E;">(moduleDepPath);</span></span>
<span class="line"><span style="color:#24292E;">            graphArr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(moduleInfo);</span></span>
<span class="line"><span style="color:#24292E;">            module.map[depPath] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moduleInfo.id;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> graphArr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中，我们使用一个数组类型的变量<code>graphArr</code>来描述整个项目的依赖树情况。最后，我们基于<code>graphArr</code>内容，将相关模块进行打包。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">pack</span><span style="color:#E1E4E8;">(graph) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> moduleArgArr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> graph.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(module </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> \`\${module.id}</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            factory</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (exports, require) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                \${module.code}</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            map</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(module.map)}</span></span>
<span class="line"><span style="color:#E1E4E8;">        }\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> iifeBundler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(modules){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> require </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {factory, map} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modules[id];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> localRequire </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requireDeclarationName </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(map[requireDeclarationName]); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {exports</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}};</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">factory</span><span style="color:#E1E4E8;">(module.exports, localRequire); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> module.exports; </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        })({\${moduleArgArr.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">()}})</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> iifeBundler;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">pack</span><span style="color:#24292E;">(graph) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> moduleArgArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> graph.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(module </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> \`\${module.id}</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            factory</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (exports, require) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                \${module.code}</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            map</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(module.map)}</span></span>
<span class="line"><span style="color:#24292E;">        }\`;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> iifeBundler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(modules){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> require </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {factory, map} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> modules[id];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> localRequire </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requireDeclarationName </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(map[requireDeclarationName]); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {exports</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}};</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(module.exports, localRequire); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> module.exports; </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        })({\${moduleArgArr.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">()}})</span></span>
<span class="line"><span style="color:#24292E;">    \`;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> iifeBundler;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上代码，我们创建一个对应每个模块的模板对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> \`\${module.id}</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  factory</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (exports, require) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    \${module.code}</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  map</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(module.map)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }\`;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> \`\${module.id}</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  factory</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (exports, require) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    \${module.code}</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  map</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(module.map)}</span></span>
<span class="line"><span style="color:#24292E;">  }\`;</span></span></code></pre></div><p>在<code>factory</code>对应的内容中，我们包裹模块代码，并注入<code>exports</code>和<code>require</code>两个参数。同时，我们构造了一个 IIFE 风格的代码区块，用于将依赖树中的代码串联在一起。最难理解的部分在于：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> iifeBundler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(modules){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> require </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {factory, map} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modules[id];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> localRequire </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requireDeclarationName </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(map[requireDeclarationName]); </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {exports</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}};</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">factory</span><span style="color:#E1E4E8;">(module.exports, localRequire); </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> module.exports; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })({\${moduleArgArr.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">()}})</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> iifeBundler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(modules){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> require </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {factory, map} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> modules[id];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> localRequire </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requireDeclarationName </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(map[requireDeclarationName]); </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {exports</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}};</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(module.exports, localRequire); </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> module.exports; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })({\${moduleArgArr.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">()}})</span></span>
<span class="line"><span style="color:#24292E;">  \`;</span></span></code></pre></div><p>针对这段代码，我们进行更细致的分析。</p><ul><li><p>使用 IIFE 的方式，来保证模块变量不会影响到全局作用域。</p></li><li><p>构造好的项目依赖树（Dependency Graph）数组，将会作为名为<code>modules</code>的行参，传递给 IIFE。</p></li><li><p>我们构造了<code>require(id)</code>方法，这个方法的意义在于：</p></li></ul><ol><li><p>通过<code>require(map[requireDeclarationName])</code>方式，按顺序递归调用各个依赖模块；</p></li><li><p>通过调用<code>factory(module.exports, localRequire)</code>执行模块相关代码；</p></li><li><p>该方法最终返回<code>module.exports</code>对象，module.exports 最初值为空对象（<code>{exports: {}}</code>），但在一次次调用<code>factory()</code>函数后，<code>module.exports</code>对象内容已经包含了模块对外暴露的内容了。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲虽然标题包含&quot;解析 Webpack 源码&quot;，但我们并没有采用源码解读的方式展开，而是从打包器的设计原理入手，换一种角度进行 Webpack 源码解读，并最终动手实现了一个自己的简易打包器。</p><p>实际上，打包过程主要分为两步：<strong>依赖解析</strong> （Dependency Resolution）和<strong>代码打包</strong>（Bundling）：</p><ul><li><p>在依赖解析过程中，我们通过 AST 技术，找到每个模块的依赖模块，并组合为最终的项目依赖树。</p></li><li><p>在代码打包过程中，我们使用 Babel 对源代码进行编译，其中也包括了对 imports / exports（即对 ESM） 的编译。</p></li></ul><p>整个过程稍微有些抽象，需要你用心体会。</p><p>主要内容总结为下图：</p>`,46),i=t("p",null,"在实际生产环节，打包器当然功能更多，比如需要考虑：code spliting 甚至 watch mode 以及 reloading 能力等。但是不管什么样的特性和能力，只要我们理清最初心，掌握最基本的思想，任何疑问都会迎刃而解。",-1);function d(u,F,A,g,D,m){const s=o("Image");return e(),c("div",null,[E,a(s,{alt:"Lark20210125-174549.png",src:"https://s0.lgstatic.com/i/image/M00/91/75/Ciqc1GAOlIOAYZLfAAFmQUf14uQ501.png"}),n(),y,a(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/09/65/Cip5yGAOlKiAA3uyAAG87LhMy8s651.png"}),n(),i])}const q=p(r,[["render",d]]);export{b as __pageData,q as default};
