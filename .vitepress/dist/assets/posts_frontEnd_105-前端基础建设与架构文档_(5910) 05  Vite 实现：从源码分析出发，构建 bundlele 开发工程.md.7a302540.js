import{_ as o,j as e,o as t,h as c,k as a,f as s,Q as p,s as l}from"./chunks/framework.d3daa342.js";const x=JSON.parse('{"title":"05Vite实现：从源码分析出发，构建bundlele开发工程","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5910) 05  Vite 实现：从源码分析出发，构建 bundlele 开发工程.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5910) 05  Vite 实现：从源码分析出发，构建 bundlele 开发工程.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5910) 05  Vite 实现：从源码分析出发，构建 bundlele 开发工程.md"},E=p(`<h1 id="_05vite实现-从源码分析出发-构建bundlele开发工程" tabindex="-1">05Vite实现：从源码分析出发，构建bundlele开发工程 <a class="header-anchor" href="#_05vite实现-从源码分析出发-构建bundlele开发工程" aria-label="Permalink to &quot;05Vite实现：从源码分析出发，构建bundlele开发工程&quot;">​</a></h1><p>通过上一讲的内容，相信你已经了解了现代化构建流程和处理内容。这一讲，我将结合 Webpack 为主的成熟方案现阶段的&quot;不足&quot;，从源码实现角度带你分析 Vite 的设计哲学，同时为&quot;解析 Webpack 源码，实现自己的构建工具&quot;一讲内容打下基础，循序渐进，最终你将能够开发一个自己的构建工具。</p><h3 id="vite-的-横空出世" tabindex="-1">Vite 的&quot;横空出世&quot; <a class="header-anchor" href="#vite-的-横空出世" aria-label="Permalink to &quot;Vite 的&quot;横空出世&quot;&quot;">​</a></h3><p>Vite 是由 Vue 作者尤雨溪开发的 Web 开发工具，尤雨溪在微博上推广时对 Vite 做了简短介绍：</p><blockquote><p>Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 Rollup 打包。虽然现在还比较粗糙，但这个方向我觉得是有潜力的，做得好可以彻底解决改一行代码等半天热更新的问题。</p></blockquote><p>从这段话中我们能够提炼一些关键点：</p><ul><li><p>Vite 基于 ESM，因此实现了快速启动和即时模块热更新能力；</p></li><li><p>Vite 在服务端实现了按需编译。</p></li></ul><p>经验丰富的开发者通过上述介绍，似乎就能给出 Vite 的基本流程，甚至可以说得更直白一些：<strong>Vite 在开发环境下并没有打包和构建过程</strong>。</p><p>开发者在代码中写到的 ESM 导入语法会直接发送给服务器，而服务器也直接将 ESM 模块内容运行处理后，下发给浏览器。接着，现代浏览器通过解析 script module，对每一个 import 到的模块进行 HTTP 请求，服务器继续对这些 HTTP 请求进行处理并响应。</p><h3 id="vite-实现原理解读" tabindex="-1">Vite 实现原理解读 <a class="header-anchor" href="#vite-实现原理解读" aria-label="Permalink to &quot;Vite 实现原理解读&quot;">​</a></h3><p>Vite 思想比较容易理解，实现起来也并不复杂。接下来，我们就对 Vite 源码进行分析，帮助你更好地体会它的设计哲学和实现技巧。</p><p>首先，我们打造一个学习环境，创建一个基于 Vite 的应用，并启动：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm init vite</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app vite</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app</span></span>
<span class="line"><span style="color:#E1E4E8;">cd vite</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app</span></span>
<span class="line"><span style="color:#E1E4E8;">npm install</span></span>
<span class="line"><span style="color:#E1E4E8;">npm run dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm init vite</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app vite</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app</span></span>
<span class="line"><span style="color:#24292E;">cd vite</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app</span></span>
<span class="line"><span style="color:#24292E;">npm install</span></span>
<span class="line"><span style="color:#24292E;">npm run dev</span></span></code></pre></div><p>得到以下目录结构和页面内容：</p>`,14),y=p(`<p>其中浏览器请求：<code>http://localhost:3000/</code>，得到的内容即是我们应用项目中的 index.html 内容。</p><p>在项目 packaga.json 中，我们看到：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;dev&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vite&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;dev&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vite&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span></code></pre></div><p>找到 Vite 源码中，<a href="https://github.com/vitejs/vite/blob/master/src/node/cli.ts#L66" target="_blank" rel="noreferrer">命令行实现部分：</a></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">options.command </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> options.command </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;serve&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">runServe</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.command </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;build&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">runBuild</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.command </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;optimize&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">runOptimize</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(chalk.</span><span style="color:#B392F0;">red</span><span style="color:#E1E4E8;">(\`unknown command</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \${options.command}\`))</span></span>
<span class="line"><span style="color:#E1E4E8;">	process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options.command </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> options.command </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;serve&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">runServe</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.command </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;build&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">runBuild</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.command </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;optimize&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">runOptimize</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(chalk.</span><span style="color:#6F42C1;">red</span><span style="color:#24292E;">(\`unknown command</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \${options.command}\`))</span></span>
<span class="line"><span style="color:#24292E;">	process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码，根据不同的命令行命令，执行不同的入口函数。</p><p>在开发模式下，Vite 通过 runServe 方法，启动了一个 koaServer，来实现对浏览器请求的响应，<a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/cli.ts#L131" target="_blank" rel="noreferrer">runServer 实现</a>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./server&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(options)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./server&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(options)</span></span></code></pre></div><p><a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/server/index.ts#L50" target="_blank" rel="noreferrer">createServer 方法实现</a>，我们可以精简为以下内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ServerConfig)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Server {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    configureServer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolvers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    transforms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    vueCustomBlockTransforms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    optimizeDeps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    enableEsbuild </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建 Koa 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Koa&lt;</span><span style="color:#F97583;">State</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Context</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">  const server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveServer</span><span style="color:#E1E4E8;">(config, app.</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createResolver</span><span style="color:#E1E4E8;">(root, resolvers, alias)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 相关上下文信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ServerPluginContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    root,</span></span>
<span class="line"><span style="color:#E1E4E8;">    app,</span></span>
<span class="line"><span style="color:#E1E4E8;">    server,</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolver,</span></span>
<span class="line"><span style="color:#E1E4E8;">    config,</span></span>
<span class="line"><span style="color:#E1E4E8;">    port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> config.port </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一个简单中间件，扩充 context 上下文内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((ctx, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(ctx, context)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ctx.read </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedRead.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolvedPlugins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  resolvedPlugins.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((m) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">m</span><span style="color:#E1E4E8;">(context))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> listen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.listen.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(server)</span></span>
<span class="line"><span style="color:#E1E4E8;">  server.listen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> number, ...args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> any[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (optimizeDeps.auto </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      await </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../optimizer&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">optimizeDeps</span><span style="color:#E1E4E8;">(config)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> listener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(port, ...args)</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">().port</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> listener</span></span>
<span class="line"><span style="color:#E1E4E8;">  }) as any</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> server</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ServerConfig)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Server {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    configureServer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    resolvers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    alias </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">    transforms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    vueCustomBlockTransforms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">    optimizeDeps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">    enableEsbuild </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建 Koa 实例</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Koa&lt;</span><span style="color:#D73A49;">State</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Context</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">  const server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveServer</span><span style="color:#24292E;">(config, app.</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createResolver</span><span style="color:#24292E;">(root, resolvers, alias)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 相关上下文信息 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ServerPluginContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    root,</span></span>
<span class="line"><span style="color:#24292E;">    app,</span></span>
<span class="line"><span style="color:#24292E;">    server,</span></span>
<span class="line"><span style="color:#24292E;">    resolver,</span></span>
<span class="line"><span style="color:#24292E;">    config,</span></span>
<span class="line"><span style="color:#24292E;">    port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> config.port </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一个简单中间件，扩充 context 上下文内容</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((ctx, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(ctx, context)</span></span>
<span class="line"><span style="color:#24292E;">    ctx.read </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedRead.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, ctx)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolvedPlugins </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  resolvedPlugins.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((m) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">m</span><span style="color:#24292E;">(context))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> listen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.listen.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(server)</span></span>
<span class="line"><span style="color:#24292E;">  server.listen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> number, ...args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> any[]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (optimizeDeps.auto </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      await </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../optimizer&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">optimizeDeps</span><span style="color:#24292E;">(config)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> listener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(port, ...args)</span></span>
<span class="line"><span style="color:#24292E;">    context.port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">().port</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> listener</span></span>
<span class="line"><span style="color:#24292E;">  }) as any</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> server</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>浏览器在访问<code>http://localhost:3000/</code>后，得到了主体为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">body</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">di v id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/src/main.js&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">body</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">body</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">di v id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/src/main.js&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">body</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>的内容。</p><p>依据 ESM 规范在浏览器 script 标签中的实现，对于<code>&lt;script type=&quot;module&quot; src=&quot;./bar.js&quot;&gt;&lt;/script&gt;</code>内容：<strong>当出现 script 标签 type 属性为 module 时，浏览器将会请求模块相应内容</strong>。</p><p>另一种 ESM 规范在浏览器 script 标签中的实现为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { bar } from &#39;./bar.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/script&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { bar } from &#39;./bar.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/script&gt;</span></span></code></pre></div><p>浏览器会发起 HTTP 请求，请求 HTTP Server 托管的 bar.js。</p><p>我们可以看到，经过 Vite Server 处理 <a href="http://localhost:3000/src/main.js" target="_blank" rel="noreferrer">http://localhost:3000/src/main.js</a> 请求后，最终返回了：</p>`,18),i=p(`<p>返回内容和我们项目中的 ./src/main.js 略有差别：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> App from &#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> &#39;./index.css&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> App from &#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> &#39;./index.css&#39;</span></span></code></pre></div><p>现在变为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } from &#39;/@modules/vue.js&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> App from &#39;/src/App.vue&#39;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> &#39;/src/index.css?</span><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createApp } from &#39;/@modules/vue.js&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> App from &#39;/src/App.vue&#39;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> &#39;/src/index.css?</span><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;">&#39;</span></span></code></pre></div><p>这里我们拆成两部分来看。</p><p>其中<code>import { createApp } from &#39;vue&#39;</code>改为<code>import { createApp } from &#39;/@modules/vue.js&#39;</code>，原因很明显：<strong>import 对应的路径只支持 &quot;/&quot;&quot;./&quot;或者 &quot;../&quot; 开头的内容，直接使用模块名 import，会立即报错</strong>。</p><p>所以在 Vite Server 处理请求时，通过 serverPluginModuleRewrite 这个中间件来给 import from &#39;A&#39; 的 A 添加 /@module/ 前缀为 from &#39;/@modules/A&#39;，<a href="https://github.com/vitejs/vite/blob/master/src/node/server/index.ts#L97" target="_blank" rel="noreferrer">源码部分对应</a>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolvedPlugins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  moduleRewritePlugin,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">resolvedPlugins.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((m) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">m</span><span style="color:#E1E4E8;">(context))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolvedPlugins </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  moduleRewritePlugin,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">resolvedPlugins.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((m) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">m</span><span style="color:#24292E;">(context))</span></span></code></pre></div><p>而 moduleRewritePlugin 插件的<a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/server/serverPluginModuleRewrite.ts#L48" target="_blank" rel="noreferrer">实现</a>也并不困难，主要通过 <a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/server/serverPluginModuleRewrite.ts#L120" target="_blank" rel="noreferrer">rewriteImports 方法</a>，来执行 <a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/server/serverPluginModuleRewrite.ts#L259" target="_blank" rel="noreferrer">resolveImport 方法</a>，并进行改写。这里已经添加了相关源码链接，我们不再一一展开，你可以在课后进一步学习。</p><p>整个过程和调用链路较长，我对 Vite 处理 import 方法做一个简单总结：</p><ul><li><p>在 koa 中间件里获取请求 path 对应的 body 内容；</p></li><li><p>通过 <a href="https://github.com/guybedford/es-module-lexer" target="_blank" rel="noreferrer">es-module-lexer</a> 解析资源 AST，并拿到 import 的内容；</p></li><li><p>如果判断 import 的资源是绝对路径，即可认为该资源为 npm 模块，并返回处理后的资源路径。比如上述代码中，vue → /@modules/vue。</p></li></ul><p>对于形如：<code>import App from &#39;./App.vue&#39;</code>和<code>import &#39;./index.css&#39;</code>的处理，与上述情况类似：</p><ul><li><p>在 koa 中间件里获取请求 path 对应的 body 内容；</p></li><li><p>通过 <a href="https://github.com/guybedford/es-module-lexer" target="_blank" rel="noreferrer">es-module-lexer</a> 解析资源 AST，并拿到 import 的内容；</p></li><li><p>如果判断 import 的资源是相对路径，即可认为该资源为项目应用中资源，并返回处理后的资源路径。比如上述代码中，./App.vue → /src/App.vue。</p></li></ul><p>接下来浏览器根据 main.js 的内容，分别请求：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">modules/</span><span style="color:#E1E4E8;">vue.js</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">App.vue</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.css</span><span style="color:#F97583;">?import</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">modules/</span><span style="color:#24292E;">vue.js</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">App.vue</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.css</span><span style="color:#D73A49;">?import</span></span></code></pre></div><p>对于 /@module/ 类请求较为容易，我们只需要完成下面三步：</p><ul><li><p>在 koa 中间件里获取请求 path 对应的 body 内容；</p></li><li><p>判断路径是否以 /@module/ 开头，如果是，取出包名（这里为 vue.js）；</p></li><li><p>去 node_modules 文件中找到对应的 npm 库，并返回内容。</p></li></ul><p>上述步骤在 Vite 中使用 serverPluginModuleResolve 中间件实现，点击这里可以访问<a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/server/serverPluginModuleResolve.ts#L22" target="_blank" rel="noreferrer">对应源码</a>。</p><p>接着，就是对 /src/App.vue 类请求进行处理，这就涉及 Vite 服务器的编译能力了。</p><p>我们先看结果，对比项目中的 App.vue，浏览器请求得到的结果显然出现了大变样：</p>`,20),d=p(`<p>实际上，App.vue 这样的单文件组件对应 script、style 和 template，在经过 Vite Server 处理时，服务端对 script、style 和 template 三部分分别处理，对应中间件为 <a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/server/serverPluginVue.ts" target="_blank" rel="noreferrer">serverPluginVue</a>。这个中间件的实现很简单，即<strong>对 .vue 文件请求进行处理，通过 parseSFC 方法解析单文件组件，并通过 compileSFCMain 方法将单文件组件拆分</strong> 为形如上图内容，对应中间件关键内容可在源码 vuePlugin 中找到。源码中，涉及 <a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/node/server/serverPluginVue.ts#L377" target="_blank" rel="noreferrer">parseSFC</a> 具体所做的事情，是调用 @vue/compiler-sfc 进行单文件组件解析。精简为我自己的逻辑，帮助你理解：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">query.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> __script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \${descriptor.script.content.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;export default &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 单文件组件中，对于 style 部分的编译，编译为对应 style 样式的 import 请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    \${descriptor.styles.length </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> \`import </span><span style="color:#9ECBFF;">&quot;\${url}?type=style&quot;</span><span style="color:#E1E4E8;">\` </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 单文件组件中，对于 template 部分的编译，编译为对应 template 样式的 import 请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    import { render as __render } from </span><span style="color:#9ECBFF;">&quot;\${url}?type=template&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 渲染 template 的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    __script.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> __render;</span></span>
<span class="line"><span style="color:#E1E4E8;">    export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> __script;</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">query.type) {</span></span>
<span class="line"><span style="color:#24292E;">  ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> __script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${descriptor.script.content.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;export default &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 单文件组件中，对于 style 部分的编译，编译为对应 style 样式的 import 请求</span></span>
<span class="line"><span style="color:#24292E;">    \${descriptor.styles.length </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> \`import </span><span style="color:#032F62;">&quot;\${url}?type=style&quot;</span><span style="color:#24292E;">\` </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 单文件组件中，对于 template 部分的编译，编译为对应 template 样式的 import 请求</span></span>
<span class="line"><span style="color:#24292E;">    import { render as __render } from </span><span style="color:#032F62;">&quot;\${url}?type=template&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 渲染 template 的内容</span></span>
<span class="line"><span style="color:#24292E;">    __script.render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> __render;</span></span>
<span class="line"><span style="color:#24292E;">    export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> __script;</span></span>
<span class="line"><span style="color:#24292E;">  \`;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>总而言之，每一个 .vue 单文件组件都被拆分成多个请求。比如对应上面场景，浏览器接收到 App.vue 对应的实际内容后，发出 HelloWorld.vue 以及 App.vue?type=template 的请求（通过 type 这个 query 来表示是 template 还是 style）。koa server 进行分别处理并返回，这些请求依然分别被上面提到的 serverPluginVue 中间件处理：对于 template 的请求，服务使用 @vue/compiler-dom 进行编译 template 并返回内容。</p><p>精简为我自己的逻辑，帮助你理解：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (query.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;template&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> descriptor.template;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@vue/compiler-dom&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(template.content, {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  mode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}).code;</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;application/javascript&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (query.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;template&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> descriptor.template;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@vue/compiler-dom&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(template.content, {</span></span>
<span class="line"><span style="color:#24292E;">	  mode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;module&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	}).code;</span></span>
<span class="line"><span style="color:#24292E;">	ctx.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;application/javascript&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> render;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于上面提到的 <a href="http://localhost:3000/src/index.css?import" target="_blank" rel="noreferrer">http://localhost:3000/src/index.css?import</a> 请求稍微特殊，需通过 serverPluginVue 来实现解析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// style 类型请求</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (query.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(query.index)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> styleBlock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> descriptor.styles[index]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (styleBlock.src) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filePath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">resolveSrcImport</span><span style="color:#E1E4E8;">(root, styleBlock, ctx, resolver)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hash_sum</span><span style="color:#E1E4E8;">(publicPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 调用 compileSFCStyle 方法编译当文件组件样式部分</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await </span><span style="color:#B392F0;">compileSFCStyle</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    root,</span></span>
<span class="line"><span style="color:#E1E4E8;">    styleBlock,</span></span>
<span class="line"><span style="color:#E1E4E8;">    index,</span></span>
<span class="line"><span style="color:#E1E4E8;">    filePath,</span></span>
<span class="line"><span style="color:#E1E4E8;">    publicPath,</span></span>
<span class="line"><span style="color:#E1E4E8;">    config</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回样式内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">codegenCss</span><span style="color:#E1E4E8;">(\`\${id}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">\${index}\`, result.code, result.modules)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">etagCacheCheck</span><span style="color:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// style 类型请求</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (query.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(query.index)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> styleBlock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> descriptor.styles[index]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (styleBlock.src) {</span></span>
<span class="line"><span style="color:#24292E;">    filePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">resolveSrcImport</span><span style="color:#24292E;">(root, styleBlock, ctx, resolver)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hash_sum</span><span style="color:#24292E;">(publicPath)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 调用 compileSFCStyle 方法编译当文件组件样式部分</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await </span><span style="color:#6F42C1;">compileSFCStyle</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    root,</span></span>
<span class="line"><span style="color:#24292E;">    styleBlock,</span></span>
<span class="line"><span style="color:#24292E;">    index,</span></span>
<span class="line"><span style="color:#24292E;">    filePath,</span></span>
<span class="line"><span style="color:#24292E;">    publicPath,</span></span>
<span class="line"><span style="color:#24292E;">    config</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  ctx.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;js&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回样式内容</span></span>
<span class="line"><span style="color:#24292E;">  ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">codegenCss</span><span style="color:#24292E;">(\`\${id}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">\${index}\`, result.code, result.modules)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">etagCacheCheck</span><span style="color:#24292E;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>调用 <a href="https://github.com/vitejs/vite/blob/38f811c5b077f437ffff072276531e8f75953e94/src/node/server/serverPluginCss.ts" target="_blank" rel="noreferrer">serverPluginCss</a> 中间件的 codegenCss 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">codegenCss</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  css</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  modules</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> Record</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">string, string</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 样式代码模板</span></span>
<span class="line"><span style="color:#E1E4E8;">  let code </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`import { updateStyle } from </span><span style="color:#9ECBFF;">&quot;\${clientPublicPath}&quot;</span><span style="color:#E1E4E8;">\\n\` </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> css </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(css)}\\n\` </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`</span><span style="color:#B392F0;">updateStyle</span><span style="color:#E1E4E8;">(\${JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(id)}, css)\\n\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (modules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    code </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dataToEsm</span><span style="color:#E1E4E8;">(modules, { namedExports</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    code </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> \`export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> css\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">codegenCss</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  css</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  modules</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> Record</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">string, string</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 样式代码模板</span></span>
<span class="line"><span style="color:#24292E;">  let code </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    \`import { updateStyle } from </span><span style="color:#032F62;">&quot;\${clientPublicPath}&quot;</span><span style="color:#24292E;">\\n\` </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    \`</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> css </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(css)}\\n\` </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">    \`</span><span style="color:#6F42C1;">updateStyle</span><span style="color:#24292E;">(\${JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(id)}, css)\\n\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (modules) {</span></span>
<span class="line"><span style="color:#24292E;">    code </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dataToEsm</span><span style="color:#24292E;">(modules, { namedExports</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    code </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> \`export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> css\`</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法会在浏览器中执行 updateStyle 方法，<a href="https://github.com/vitejs/vite/blob/c3ef4f64ec09c6916f4e6b9764362a23843b98b6/src/client/client.ts#L170" target="_blank" rel="noreferrer">源码</a>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> supportsConstructedSheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成 CSSStyleSheet 实例，试探是否支持 ConstructedSheet</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSStyleSheet</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    return true</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">})()</span></span>
<span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">updateStyle</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string, content</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sheetsMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(id)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (supportsConstructedSheet </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">content.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@import&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (style </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(style </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> CSSStyleSheet)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">removeStyle</span><span style="color:#E1E4E8;">(id)</span></span>
<span class="line"><span style="color:#E1E4E8;">      style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">style) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 生成 CSSStyleSheet 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">      style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSStyleSheet</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      style.</span><span style="color:#B392F0;">replaceSync</span><span style="color:#E1E4E8;">(content)</span></span>
<span class="line"><span style="color:#E1E4E8;">      document.adoptedStyleSheets </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [...document.adoptedStyleSheets, style]</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      style.</span><span style="color:#B392F0;">replaceSync</span><span style="color:#E1E4E8;">(content)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (style </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(style </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> HTMLStyleElement)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">removeStyle</span><span style="color:#E1E4E8;">(id)</span></span>
<span class="line"><span style="color:#E1E4E8;">      style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">style) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 生成新的 style 标签并插入到 document 挡住</span></span>
<span class="line"><span style="color:#E1E4E8;">      style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      style.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;text/css&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      style.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> content</span></span>
<span class="line"><span style="color:#E1E4E8;">      document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(style)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      style.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> content</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  sheetsMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(id, style)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> supportsConstructedSheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 生成 CSSStyleSheet 实例，试探是否支持 ConstructedSheet</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSStyleSheet</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    return true</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span>
<span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">updateStyle</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string, content</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string) {</span></span>
<span class="line"><span style="color:#24292E;">  let style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sheetsMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (supportsConstructedSheet </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">content.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@import&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (style </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(style </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> CSSStyleSheet)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">removeStyle</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#24292E;">      style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> undefined</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">style) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 生成 CSSStyleSheet 实例</span></span>
<span class="line"><span style="color:#24292E;">      style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSStyleSheet</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      style.</span><span style="color:#6F42C1;">replaceSync</span><span style="color:#24292E;">(content)</span></span>
<span class="line"><span style="color:#24292E;">      document.adoptedStyleSheets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [...document.adoptedStyleSheets, style]</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      style.</span><span style="color:#6F42C1;">replaceSync</span><span style="color:#24292E;">(content)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (style </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(style </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> HTMLStyleElement)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">removeStyle</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#24292E;">      style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> undefined</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">style) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 生成新的 style 标签并插入到 document 挡住</span></span>
<span class="line"><span style="color:#24292E;">      style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      style.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;text/css&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      style.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content</span></span>
<span class="line"><span style="color:#24292E;">      document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(style)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      style.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  sheetsMap.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(id, style)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最终完成在浏览器中插入样式。</p><p>至此，我们解析并列举了较多源码内容。以上内容需要你跟着思路，一步步梳理，我也强烈建议你打开 Vite 源码自己动手剖析。如果看到这里你仍然也有些&quot;云里雾里&quot;，不要心急，结合我下面这个图示，再次进行阅读，相信会更有收获。</p><p>Vite 这种 bundleless 方案的运行原理图：</p>`,14),u=p('<p>接下来我们再做一些更细节的总结。</p><ul><li><p>Vite 利用浏览器原生支持 ESM 这一特性，省略了对模块的打包，也就不需要生成 bundle，因此初次启动更快，HMR 特性友好。</p></li><li><p>Vite 开发模式下，通过启动 koa 服务器，在服务端完成模块的改写（比如单文件的解析编译等）和请求处理，实现真正的按需编译。</p></li><li><p>Vite Server 所有逻辑基本都依赖中间件实现。这些中间件，拦截请求之后，完成了如下内容：</p><ul><li><p>处理 ESM 语法，比如将业务代码中的 import 第三方依赖路径转为浏览器可识别的依赖路径；</p></li><li><p>对 .ts、.vue 等文件进行即时编译；</p></li><li><p>对 Sass/Less 的需要预编译的模块进行编译；</p></li><li><p>和浏览器端建立 socket 连接，实现 HMR。</p></li></ul></li></ul><h4 id="vite-hmr-实现原理" tabindex="-1">Vite HMR 实现原理 <a class="header-anchor" href="#vite-hmr-实现原理" aria-label="Permalink to &quot;Vite HMR 实现原理&quot;">​</a></h4><p>Vite 的打包命令使用了 Rollup 进行，这里并没有什么特别之处，我们不再展开讲解。而 Vite 的 HMR 特性，主要是围绕着：</p><ul><li><p>通过 watcher 监听文件改动</p></li><li><p>通过 server 端编译资源，并推送新模块内容给浏览器</p></li><li><p>浏览器收到新的模块内容，执行框架层面的 rerender/reload</p></li></ul><p>三步进行。</p><p>当浏览器请求 HTML 页面时，服务端通过 <a href="https://github.com/vitejs/vite/blob/master/src/node/server/serverPluginHtml.ts" target="_blank" rel="noreferrer">serverPluginHtml</a> 插件向 HTML 内容注入一段脚本。如下图所示，我们可以看到， index.html 中就有一段引入 /vite/client 代码，进行 WebSocket 的注册和监听。</p>',7),F=p(`<p>对于 /vite/client 请求的处理，服务端由 <a href="https://github.com/vitejs/vite/blob/a47429dabea12e8aa5f4a21209846aaf857d5be0/src/node/server/serverPluginClient.ts" target="_blank" rel="noreferrer">serverPluginClient</a> 插件进行处理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> clientPlugin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ServerPlugin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ app, config }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> clientCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(clientFilePath, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(\`__MODE__\`, JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(config.mode </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      \`__DEFINES__\`,</span></span>
<span class="line"><span style="color:#E1E4E8;">      JSON.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...defaultDefines,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...config.define</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 相应中间件处理</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (ctx, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ctx.path </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> clientPublicPath) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ctx.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ctx.status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 返回具体内容</span></span>
<span class="line"><span style="color:#E1E4E8;">      ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientCode.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(\`__PORT__\`, ctx.port.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 兼容历史逻辑，并进行错误提示</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ctx.path </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> legacyPublicPath) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          chalk.</span><span style="color:#B392F0;">red</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            \`[vite] client import path has changed from </span><span style="color:#9ECBFF;">&quot;/vite/hmr&quot;</span><span style="color:#E1E4E8;"> to </span><span style="color:#9ECBFF;">&quot;/vite/client&quot;</span><span style="color:#E1E4E8;">. \` </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              \`please update your code accordingly.\`</span></span>
<span class="line"><span style="color:#E1E4E8;">          )</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> clientPlugin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ServerPlugin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ app, config }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> clientCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(clientFilePath, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(\`__MODE__\`, JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(config.mode </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      \`__DEFINES__\`,</span></span>
<span class="line"><span style="color:#24292E;">      JSON.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        ...defaultDefines,</span></span>
<span class="line"><span style="color:#24292E;">        ...config.define</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 相应中间件处理</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (ctx, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ctx.path </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> clientPublicPath) {</span></span>
<span class="line"><span style="color:#24292E;">      ctx.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;js&#39;</span></span>
<span class="line"><span style="color:#24292E;">      ctx.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 返回具体内容</span></span>
<span class="line"><span style="color:#24292E;">      ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientCode.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(\`__PORT__\`, ctx.port.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 兼容历史逻辑，并进行错误提示</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ctx.path </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> legacyPublicPath) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          chalk.</span><span style="color:#6F42C1;">red</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            \`[vite] client import path has changed from </span><span style="color:#032F62;">&quot;/vite/hmr&quot;</span><span style="color:#24292E;"> to </span><span style="color:#032F62;">&quot;/vite/client&quot;</span><span style="color:#24292E;">. \` </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              \`please update your code accordingly.\`</span></span>
<span class="line"><span style="color:#24292E;">          )</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>返回的 /vite/src/client/client.js 代码在浏览器端主要通过 WebSocket 监听了一些更新的类型（vue 组件更新/vue template 更新/vue style 更新/css 更新/css 移除/js 更新/页面 roload），分别进行处理。</p><p>在服务端，通过 <a href="https://www.npmjs.com/package/chokidar" target="_blank" rel="noreferrer">chokidar</a> 创建了一个监听文件改动的 watcher 来监听文件改动：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> watcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chokidar.</span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(root, {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ignored</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\\.git</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// #610</span></span>
<span class="line"><span style="color:#E1E4E8;">	awaitWriteFinish</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  stabilityThreshold</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  pollInterval</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}) as HMRWatcher</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> watcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chokidar.</span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(root, {</span></span>
<span class="line"><span style="color:#24292E;">	ignored</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\\.git</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// #610</span></span>
<span class="line"><span style="color:#24292E;">	awaitWriteFinish</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	  stabilityThreshold</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  pollInterval</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}) as HMRWatcher</span></span></code></pre></div><p>并通过 <a href="https://github.com/vitejs/vite/blob/master/src/node/server/serverPluginHmr.ts" target="_blank" rel="noreferrer">serverPluginHmr</a> 发布变动，通知浏览器。</p><p>更多源码不再一一贴出。这里我总结了一张流程图供你参考：</p>`,7),g=l("p",null,"Vite 实现 HMR 流程图",-1),v=l("h3",{id:"总结",tabindex:"-1"},[s("总结 "),l("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),m=l("p",null,"这一讲我们聚焦 Vite 实现，分析了如何利用 ESM，构建一个 bundleless 风格的现代化开发工程方案。源码内容较多，也涉及一定工程化架构设计内容，但 Vite 实现流程清晰，易读性高，是源码阅读类很好的资源。",-1),h=l("p",null,[s("事实上，Vite 依赖优化的灵感来自 "),l("a",{href:"https://www.snowpack.dev/",target:"_blank",rel:"noreferrer"},"Snowpack"),s("，这类 bundleless 工具也代表着一种新趋势、新方向。我认为，技术功底是很重要的一方面，而技术敏感度的培养也非常关键。希望与你共勉！")],-1),A=l("p",null,"到此，新编译工具理念------Vite 我们就介绍到这里。接下来我们将进入代码降级编译环节的学习，我们下一讲再见。",-1);function D(b,f,C,_,S,k){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Lark20201225-174521.png",src:"https://s0.lgstatic.com/i/image/M00/8C/18/Ciqc1F_ltOCAMzS3AAHqGo5sIeo562.png"}),s(),a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/03/A7/Cip5yF_gX_iAUku7AAK-5yeYi0A500.png"}),s(),y,a(n,{alt:"Lark20201225-174524.png",src:"https://s0.lgstatic.com/i/image/M00/8C/18/Ciqc1F_ltQGAaQZkAAXD68sxUe4161.png"}),s(),i,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8B/C6/Ciqc1F_gYEGAL6S2AASUUhepUGQ785.png"}),s(),d,a(n,{alt:"Lark20201225-174527.png",src:"https://s0.lgstatic.com/i/image2/M01/03/FB/Cip5yF_ltUqAV2zLAADo9NOnOvk745.png"}),s(),a(n,{alt:"Lark20201225-174517.png",src:"https://s0.lgstatic.com/i/image/M00/8C/18/Ciqc1F_ltVCAEgT6AAERxP80SRw964.png"}),s(),u,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/8B/C7/Ciqc1F_gZk-AeTAnAAK2AAgChPQ413.png"}),s(),a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/8B/D2/CgqCHl_gZlWAHmvqAAgRairyZ98357.png"}),s(),F,a(n,{alt:"Lark20201225-175233.png",src:"https://s0.lgstatic.com/i/image2/M01/03/FD/CgpVE1_ltm6AN8nCAAMSQ8AjILg631.png"}),s(),g,v,m,h,A])}const q=o(r,[["render",D]]);export{x as __pageData,q as default};
