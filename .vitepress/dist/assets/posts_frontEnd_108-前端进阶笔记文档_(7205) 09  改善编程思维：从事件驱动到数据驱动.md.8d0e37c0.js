import{_ as s,o as a,g as n,Q as l}from"./chunks/framework.4e7d56ce.js";const d=JSON.parse('{"title":"事件驱动 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/108-前端进阶笔记文档/(7205) 09  改善编程思维：从事件驱动到数据驱动.md","filePath":"posts/frontEnd/108-前端进阶笔记文档/(7205) 09  改善编程思维：从事件驱动到数据驱动.md","lastUpdated":1696338709000}'),p={name:"posts/frontEnd/108-前端进阶笔记文档/(7205) 09  改善编程思维：从事件驱动到数据驱动.md"},o=l(`<p>编程是将逻辑通过代码实现的过程，因此代码的编写效率和质量往往取决于我们的逻辑思维，以及如何将思考的内容使用代码来表达。</p><p>今天我会介绍事件驱动和数据驱动两种编码思维模式，给你带来更好的开发体验。</p><h3 id="事件驱动" tabindex="-1">事件驱动 <a class="header-anchor" href="#事件驱动" aria-label="Permalink to &quot;事件驱动&quot;">​</a></h3><p>首先，我们先来看看什么是事件驱动的编程方式。</p><p>前端开发在实现功能的时候，会更倾向于使用事件驱动，这是因为受到 JavaScript 语言的设计和使用场景的影响。</p><p>作为浏览器脚本语言，JavaScript 的主要用途是与用户互动、操作 DOM，实现页面 UI 和交互操作，属于 GUI（图形用户界面）编程。而 GUI 则是基于事件 I/O 模式的编程方式。</p><h4 id="gui-与事件" tabindex="-1">GUI 与事件 <a class="header-anchor" href="#gui-与事件" aria-label="Permalink to &quot;GUI 与事件&quot;">​</a></h4><p>GUI 应用程序注重与用户的交互，大部分的程序执行需要等到用户的交互动作发生之后，所以 GUI 程序的执行取决于与用户的实时交互情况。</p><p>然而，用户在访问程序期间，与程序进行交互的频率并不高。若不停轮询获取用户输入（类似 HTTP 短轮询），不仅资源利用率低，还无法做到真正的同步。因此，GUI 程序会将执行流程交由用户控制，当用户触发事件的时候进行响应，调用预先绑定好的代码来对事件进行处理。</p><p>JavaScript 也一样，前面我们介绍了事件循环机制，所有的异步事件都会通过执行回调的方式来触发相应的逻辑执行。因此，前端开发在实现业务功能的时候，更容易倾向与用户交互流程（<code>用户输入</code>-&gt;<code>事件响应</code>-&gt;<code>执行相应的代码逻辑</code>-&gt;<code>更新页面状态</code>）结合，来完成与用户的交互操作。</p><p>我们在写代码实现页面功能的时候，思路常常是这样的：</p><ol><li><p>编写静态页面（HTML 和样式）；</p></li><li><p>在特定的元素上添加事件监听，监听用户交互（点击、输入、拖拽）等事件；</p></li><li><p>将事件绑定到对应的函数和处理逻辑，比如获取用户输入/应用状态、计算并更新状态等；</p></li><li><p>根据计算后的数据状态，更新相应的页面元素。</p></li></ol><p>通俗地说，事件驱动思维是从事件响应出发，来完成应用的设计和编程。这种编程方式实现起来既简单又清晰，所以很多开发者会选择（或是下意识地）使用事件驱动方式来写代码。</p><p>我们来看看基于事件驱动的编程流程是怎样的。</p><h4 id="事件驱动的编码流程" tabindex="-1">事件驱动的编码流程 <a class="header-anchor" href="#事件驱动的编码流程" aria-label="Permalink to &quot;事件驱动的编码流程&quot;">​</a></h4><p>这里我们以实现一个提交表单的页面作为例子，如果用事件驱动的方式来实现，大致分为三个步骤。</p><p>第一步：编写静态页面。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 实现静态页面 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">form</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Name</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name-value&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name-input&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Email</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;email-value&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;"> id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;email-input&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;submit&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">form</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 实现静态页面 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">form</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  Name</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name-value&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name-input&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  Email</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email-value&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email-input&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;submit&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">form</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>第二步：给对应的元素绑定对应的事件，例如通过<code>addEventListener</code>来监听<code>input</code>输入框的输入事件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nameInputEl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name-input&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> emailInputEl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;email-input&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 监听输入事件，此时 updateValue 函数未定义</span></span>
<span class="line"><span style="color:#E1E4E8;">nameInputEl.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;">, updateNameValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">emailInputEl.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;">, updateEmailValue);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nameInputEl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name-input&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> emailInputEl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;email-input&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 监听输入事件，此时 updateValue 函数未定义</span></span>
<span class="line"><span style="color:#24292E;">nameInputEl.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input&quot;</span><span style="color:#24292E;">, updateNameValue);</span></span>
<span class="line"><span style="color:#24292E;">emailInputEl.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input&quot;</span><span style="color:#24292E;">, updateEmailValue);</span></span></code></pre></div><p>第三步：事件触发时，进行相关逻辑的处理（发起请求、更新页面内容等），并更新页面内容。我们将用户输入的内容更新到页面中展示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nameValueEl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name-value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> emailValueEl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;email-value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 定义 updateValue 函数，用来更新页面内容</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">updateNameValue</span><span style="color:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  nameValueEl.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.srcElement.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">updateEmailValue</span><span style="color:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  emailValueEl.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.srcElement.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nameValueEl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name-value&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> emailValueEl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;email-value&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 定义 updateValue 函数，用来更新页面内容</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">updateNameValue</span><span style="color:#24292E;">(e) {</span></span>
<span class="line"><span style="color:#24292E;">  nameValueEl.innerText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.srcElement.value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">updateEmailValue</span><span style="color:#24292E;">(e) {</span></span>
<span class="line"><span style="color:#24292E;">  emailValueEl.innerText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.srcElement.value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述的三个步骤，便是基于事件驱动的思维实现的，是前端页面开发中很常见的编程思路。即使使用了前端框架（这里以 Vue 为例），也很容易用事件驱动的方式来实现上述功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> 绘制 HTML </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Name</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{ { name }}</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;"> 使用 v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">on 绑定事件，这里绑定 updateValue 方法 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">bind</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">on</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">input</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;updateValue&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 上面 input 可以简写为： </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 3. change 事件触发时，更新数据</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">updateValue</span><span style="color:#E1E4E8;">(event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.target.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.</span><span style="color:#24292E;"> 绘制 HTML </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    Name</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{ { name }}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.</span><span style="color:#24292E;"> 使用 v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">on 绑定事件，这里绑定 updateValue 方法 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">bind</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">on</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">input</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;updateValue&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 上面 input 可以简写为： </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    methods</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 3. change 事件触发时，更新数据</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">updateValue</span><span style="color:#24292E;">(event) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.target.value;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>这里可以看出，使用前端框架帮我们省去了元素选择、HTML 拼接并更新等这些工作，同时还可以直接在模板上绑定事件监听。至于前端框架是如何做到这些的，我们会在下一讲详细介绍。</p><p>现在，我们来回顾下事件驱动的编程思路：</p><ol><li><p>开发静态页面；</p></li><li><p>在对应的元素上绑定事件；</p></li><li><p>实现被绑定的事件功能，例如获取数据、更新页面等。</p></li></ol><p>代码实现思路的关注点在于<strong>触发了怎样的操作</strong> 和<strong>这个操作会导致什么后果（即需要做怎样的处理）</strong>，因此事件驱动的思维方式会围绕着&quot;操作&quot;和&quot;响应&quot;进行。</p><p>那么，数据驱动又怎样的呢？</p><h3 id="数据驱动" tabindex="-1">数据驱动 <a class="header-anchor" href="#数据驱动" aria-label="Permalink to &quot;数据驱动&quot;">​</a></h3><p>使用数据驱动的前提，在于将页面内容抽象为数据表达。基于抽象后的数据，这些数据会发生怎样的变化、又是如何被改变的，这些便是数据驱动的关注点。</p><p>数据驱动和事件驱动的最大差异是开发的视角。</p><ul><li><p>事件驱动会关注于&quot;操作&quot;和&quot;响应&quot;，基于流程实现编码。</p></li><li><p>数据驱动则会关注于&quot;数据&quot;和&quot;数据的变化&quot;，基于状态实现编码。</p></li></ul><p>下面我们同样以实现一个提交表单的页面为例，介绍数据驱动的编码流程（由于篇幅关系，以下代码会基于 Vue.js 实现）。</p><h4 id="数据驱动的编码流程" tabindex="-1">数据驱动的编码流程 <a class="header-anchor" href="#数据驱动的编码流程" aria-label="Permalink to &quot;数据驱动的编码流程&quot;">​</a></h4><p>对于提交表单的页面实现，数据驱动的编程方式同样可以分成三个步骤。</p><p>第一步：对页面进行抽象设计，使用合适的数据结构来表达。</p><p>抽象设计的内容会在第 14、15 讲内容中介绍，在这里我们先使用最简单的方式来设计：将页面中会变化和不会变化的内容隔离开，对其中会变化的内容进行抽象，再根据抽象结果来设计数据结构。</p><p>以页面中的表单为例，变化的部分包括两个输入框、两处展示输入框内容的文字。其中，输入框和展示部分关联着相同的内容，因此我们可以使用同一个数据来表达。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 包括一个 name 和 一个 email 的值</span></span>
<span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      email</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 包括一个 name 和 一个 email 的值</span></span>
<span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      email</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>通过这样的方式，我们得到了两个抽象后的数据，一个是名字<code>name</code>，另外一个是邮件<code>email</code>，它们都是字符串格式。</p><p>第二步：这个表单除了具备<code>name</code>和<code>email</code>两个数据，还包括两个分别用于改变数据的方法。因此，我们给该表单添加上更新值的方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      email</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新 name 值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateNameValue</span><span style="color:#E1E4E8;">(newName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新 email 值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateEmailValue</span><span style="color:#E1E4E8;">(newEmail) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.email </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newEmail;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      email</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  methods</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新 name 值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">updateNameValue</span><span style="color:#24292E;">(newName) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newName;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新 email 值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">updateEmailValue</span><span style="color:#24292E;">(newEmail) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.email </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newEmail;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>第三步：实现静态页面，并把数据和事件绑定到页面中。我们将步骤 1 中的数据绑定到页面中书输入框和展示值的地方，同时在需要监听事件的元素上绑定上述的方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">form</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Name</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{ { name }}</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">bind</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">on</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">input</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;updateNameValue($event.target.value)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Email</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">{ { email }}</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;email&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;email&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">bind</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;email&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">on</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">input</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;updateEmailValue($event.target.value)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;submit&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">form</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">form</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  Name</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{ { name }}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input</span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#24292E;">    v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">bind</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#24292E;">    v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">on</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">input</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;updateNameValue($event.target.value)&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  Email</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">{ { email }}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input</span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email&quot;</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email&quot;</span></span>
<span class="line"><span style="color:#24292E;">    v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">bind</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email&quot;</span></span>
<span class="line"><span style="color:#24292E;">    v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">on</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">input</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;updateEmailValue($event.target.value)&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;submit&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">form</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>如果说步骤 1 和步骤 2 分别是抽象数据和抽象逻辑的过程，那么步骤 3 则是将抽象数据的逻辑具现化的过程。</p><p>通过将抽象的逻辑具现化，我们最终将抽象的结果实现为应用的功能，这就是数据驱动的实现过程。</p><h4 id="数据驱动和事件驱动的区别" tabindex="-1">数据驱动和事件驱动的区别 <a class="header-anchor" href="#数据驱动和事件驱动的区别" aria-label="Permalink to &quot;数据驱动和事件驱动的区别&quot;">​</a></h4><p>这里或许你会有些疑问，看起来只是写代码的顺序不一样而已，甚至写代码的顺序都是一样的，那事件驱动和数据驱动的区别在哪？</p><p><strong>1. 数据驱动更容易将视图与逻辑解绑，能快速适应变更和调整。</strong></p><p>对于数据驱动，我们在编程实现的过程中，更多的是思考数据状态的维护和处理，而无需过于考虑 UI 的变化和事件的监听。即使我们页面 UI 全部重构了，影响到的只有模板中绑定的部分（即上面的第 3 个步骤），功能逻辑并不会受到影响。</p><p>简单来说，基于数据模型设计的代码，即使经历了需求变更、页面结构调整、服务器接口调整，也可以快速地实现更新和支持。</p><p><strong>2. 事件驱动更倾向于流程式开发，数据驱动倾向于数据状态的变更和流动。</strong></p><p>事件驱动的特点是，以某个交互操作为起点，流程式地处理逻辑。流程式的代码，在遇到中间某个环节变更，就需要同时更新该变更点前后环节的流程交接。</p><p>例如，对于页面加载渲染的过程，可以分成<code>加载页面逻辑</code>-&gt;<code>请求服务器</code>-&gt;<code>更新页面</code>。如果需要在从服务器获取的基础上，新增<code>读取本地缓存</code>的环节，同时需要在<code>加载页面逻辑</code>、<code>更新页面</code>两个环节进行衔接，并发地支持<code>读取本地缓存</code>和<code>请求服务器</code>。</p><p>而数据驱动的思考方式特点是，以数据为中心，思考数据的输入和输出。</p><ul><li><p>数据来源：比如从服务器获取、用户输入、重置清空。</p></li><li><p>数据去处：比如提交给服务器。</p></li></ul><p>同样的，如果我们需新增<code>读取本地缓存</code>的环节，在数据驱动的情况下，只是增加了一个数据来源，对于整个模型影响会小很多。</p><ul><li>数据来源：从服务器获取、用户输入、重置清空、<code>读取本地缓存</code></li></ul><p>事件驱动和数据驱动一个很重要的区别在于，<strong>事件驱动是从每个事件的触发（&quot;操作&quot;）为中心来设计我们的代码，数据驱动则是以数据为中心，通过接收事件触发和更新数据状态的方式来实现页面功能。</strong></p><p><strong>从事件驱动到数据驱动，可以理解为从用户交互为中心，调整成以数据的状态扭转为中心</strong>，来进行一些页面逻辑的实现。</p><p>事件驱动的方式相比于数据驱动，少了数据抽象设计的一部分，因此开发的时候可能很快就完成某个功能的实现。但从维护和拓展的角度来说，习惯数据驱动的方式，在遇到功能变更和迭代时可以更高效、更合理地进行调整。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>今天我介绍了前端开发中两种编程思维模式：事件驱动和数据驱动。其中，由于浏览器属于 GUI 编程，我们在开发过程中常常基于&quot;事件&quot;和&quot;响应&quot;的方式来理解功能，因此大多数会倾向于使用事件驱动的方式。</p><p>相比于事件驱动，数据驱动更倾向于以&quot;数据&quot;为中心，通过将页面抽象为数据表达，用数据状态变更的方式来表达功能逻辑。数据驱动更容易将视图与逻辑解绑，能快速适应变更和调整。</p><p>在我们日常开发中，更多时候是结合了事件驱动和数据驱动来进行编码。</p><p>Vue、Angular、React 这些前端框架的出现，处理了很多事件驱动流程上的工作，从而推动了更多开发者从事件驱动转变成数据驱动的方式，更加专注于数据的处理。</p><p>技术的迭代、工具的更新和个人的成长，有时候是相辅相成的。思维模式也好，设计模式也好，我们在一次次的开发过程中，会不断地积累和加深一些思考，适合业务场景的才是最好的。</p><p>今日思考：你认为事件驱动和数据驱动，各自的优劣分别是什么呢？</p>`,69),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{d as __pageData,m as default};
