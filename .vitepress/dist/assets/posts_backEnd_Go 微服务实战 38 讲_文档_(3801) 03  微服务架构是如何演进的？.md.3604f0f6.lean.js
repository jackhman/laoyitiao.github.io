import{_ as s,j as l,o as _,g as r,k as i,h as t,Q as e,s as o}from"./chunks/framework.4e7d56ce.js";const H=JSON.parse('{"title":"服务端架构的演进 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3801) 03  微服务架构是如何演进的？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3801) 03  微服务架构是如何演进的？.md","lastUpdated":1696417798000}'),n={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3801) 03  微服务架构是如何演进的？.md"},p=e("",6),c=o("p",null,"单体架构的应用程序",-1),h=o("p",null,"单体架构的应用开发简单，技术单一，测试、部署相对简单明了。但其缺陷也是非常明显的，进行局部改动就需要重新部署，而且编译时间过长。除此之外，单体架构的技术栈也不易扩展，只能不断地在原有基础上进行局部优化，比如说应用的某一场景需要处理高并发，使用 Go 语言较为合适，但是单体架构并不支持多语言技术栈，这时也就只好作罢。",-1),d=o("h4",{id:"_2-垂直分层架构",tabindex:"-1"},[t("2. 垂直分层架构 "),o("a",{class:"header-anchor",href:"#_2-垂直分层架构","aria-label":'Permalink to "2. 垂直分层架构"'},"​")],-1),g=o("p",null,"单体架构在系统用户访问量逐渐增大的情况下，若仅仅依靠扩展物理机配置或者增加机器来优化系统的性能，往往收效甚微。单体架构中不同业务模块的差异就会显现，比如有些模块是 IO 密集型，有些是计算密集型。这些模块所需要的机器数量和性能各有差异，这时为了提升机器利用率和性能，垂直分层架构就诞生了。",-1),u=o("p",null,"垂直分层架构是将大应用拆分成一个个单体结构的应用。换句话说，垂直架构就是彼此存在依赖关系的组件组成的架构，比如分层------用户界面层依赖业务逻辑，而业务逻辑依赖数据库访问（如下图所示）。垂直分层是一个典型的对复杂系统进行结构化思考和抽象聚合的通用性方法。",-1),m=o("p",null,"垂直分层架构的应用程序",-1),G=o("p",null,"这样处理后，垂直分层架构就解决了很多问题：将系统拆分实现了流量分担，解决了部分并发问题；拆分之后，服务间相互独立；性能方面，可以针对单个服务模块进行优化；易于水平扩展，多实例提升容错率。",-1),A=o("p",null,"但其缺点也是明显的，垂直分层架构的系统拆分，使得集群搭建变得复杂；涉及的服务间调用，服务之间耦合度变高，调用关系错综复杂，难以维护调用关系。",-1),S=o("h4",{id:"_3-soa-面向服务架构",tabindex:"-1"},[t("3. SOA 面向服务架构 "),o("a",{class:"header-anchor",href:"#_3-soa-面向服务架构","aria-label":'Permalink to "3. SOA 面向服务架构"'},"​")],-1),C=o("p",null,'当垂直架构拆分的应用越来越多时，就会出现多个应用都依赖的业务逻辑组件，并且各个应用进行交互的需要也越来越频繁。此时，就需要将部分通用的业务组件独立出来，并定义好服务间交互的接口，向外提供能力，让其他服务调用。SOA 面向服务架构这就"应运而生"了。',-1),T=o("p",null,"SOA 面向服务架构是一种软件体系结构，它将应用程序的不同服务通过定义良好的接口和契约联系起来，这些接口独立定义，不依赖实现服务的编程语言、操作系统。应用程序的不同组件通过网络上的通信协议向其他组件提供服务。通信可以是简单的数据传递，也可以是两个或多个服务彼此协调连接。",-1),P=o("p",null,"SOA 面向服务架构",-1),b=o("p",null,[t("SOA 面向服务架构中主要有两个角色：服务提供者和使用者。如上图所示，服务消费者可以通过发送消息来调用订单、购买、账号的服务，这些消息由"),o("strong",null,"服务总线"),t("转换后发送给对应的服务，实现 SOA 服务之间的交互通信。")],-1),q=o("p",null,"SOA 面向服务架构主要适用于大型软件服务企业对外提供服务的场景，至于一般业务场景就并不适用了，因为其服务的定义、注册和调用都需要较为烦琐的编码或者配置实现，并且业务总线也容易导致系统的单点风险并拖累整体性能。",-1),k=o("h4",{id:"_4-微服务架构",tabindex:"-1"},[t("4. 微服务架构 "),o("a",{class:"header-anchor",href:"#_4-微服务架构","aria-label":'Permalink to "4. 微服务架构"'},"​")],-1),M=o("p",null,"随着互联网浪潮的来临，越来越多的中小微企业推出面向普通大众的网站或者应用。这些企业不同于大型软件服务企业，没有能力也无须构建 SOA 所依赖的 ESB 企业服务总线。于是继承 SOA 众多优点和理念的微服务架构于 2014 年由 Matrin Fowler 提出，其理念是将业务系统彻底地组件化和服务化，形成多个可以独立开发、部署和维护的服务或者应用的集合，以应对更快的需求变更和更短的开发迭代周期。",-1),f=o("p",null,"微服务也是一种架构风格，它提倡将大型复杂软件应用划分成多个微服务，这些服务之间互相协调、配合，可独立部署；服务之间松耦合，每个服务代表着一个小的业务能力（如下图所示）。",-1),E=e("",13),K=e("",7),x=e("",13);function V(O,I,D,N,R,v){const a=l("Image");return _(),r("div",null,[p,i(a,{alt:"图片14.png",src:"https://s0.lgstatic.com/i/image/M00/2E/C8/Ciqc1F8Fm4CAYtDPAAFWVKWmvC4501.png"}),t(),c,h,d,g,u,i(a,{alt:"图片15.png",src:"https://s0.lgstatic.com/i/image/M00/2E/D3/CgqCHl8Fm4-AZvB4AACtVYg97fg534.png"}),t(),m,G,A,S,C,T,i(a,{alt:"图片16.png",src:"https://s0.lgstatic.com/i/image/M00/2E/C8/Ciqc1F8Fm5yASdIsAAEo0SG1StQ659.png"}),t(),P,b,q,k,M,f,i(a,{alt:"图片17.png",src:"https://s0.lgstatic.com/i/image/M00/2E/D3/CgqCHl8Fm6qAMVxQAAH6kUWDsQU912.png"}),t(),E,i(a,{alt:"图片18.png",src:"https://s0.lgstatic.com/i/image/M00/2E/D4/CgqCHl8Fm7mAc6jtAACZVV3YQYA093.png"}),t(),K,i(a,{alt:"图片19.png",src:"https://s0.lgstatic.com/i/image/M00/2E/D4/CgqCHl8Fm8aACnuYAAB4Q4ubZZg969.png"}),t(),x])}const B=s(n,[["render",V]]);export{H as __pageData,B as default};
