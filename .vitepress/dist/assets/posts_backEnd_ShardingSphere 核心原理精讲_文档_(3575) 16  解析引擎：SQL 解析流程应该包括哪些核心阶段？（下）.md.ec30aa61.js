import{_ as e,j as o,o as t,h as r,k as a,f as s,s as l,Q as p}from"./chunks/framework.d3daa342.js";const x=JSON.parse('{"title":"16解析引擎：SQL解析流程应该包括哪些核心阶段？（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3575) 16  解析引擎：SQL 解析流程应该包括哪些核心阶段？（下）.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3575) 16  解析引擎：SQL 解析流程应该包括哪些核心阶段？（下）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3575) 16  解析引擎：SQL 解析流程应该包括哪些核心阶段？（下）.md"},E=l("h1",{id:"_16解析引擎-sql解析流程应该包括哪些核心阶段-下",tabindex:"-1"},[s("16解析引擎：SQL解析流程应该包括哪些核心阶段？（下） "),l("a",{class:"header-anchor",href:"#_16解析引擎-sql解析流程应该包括哪些核心阶段-下","aria-label":'Permalink to "16解析引擎：SQL解析流程应该包括哪些核心阶段？（下）"'},"​")],-1),y=l("p",null,"我们知道整个 SQL 解析引擎可以分成三个阶段（如下图所示），上一课时我们主要介绍了 ShardingSphere 中 SQL 解析引擎的第一个阶段，那么今天我将承接上一课时，继续讲解 ShardingSphere 中 SQL 解析流程中剩余的两个阶段。",-1),i=p(`<h3 id="sql-解析引擎的三大阶段" tabindex="-1">SQL 解析引擎的三大阶段 <a class="header-anchor" href="#sql-解析引擎的三大阶段" aria-label="Permalink to &quot;SQL 解析引擎的三大阶段&quot;">​</a></h3><p>在 SQL 解析引擎的第一阶段中，我们详细介绍了 ShardingSphere 生成 SQL 抽象语法树的过程，并引出了 SQLStatementRule 规则类。今天我们将基于这个规则类来分析如何提取 SQLSegment 以及如何填充 SQL 语句的实现机制。</p><h4 id="_1-第二阶段-提取-sql-片段" tabindex="-1">1.第二阶段：提取 SQL 片段 <a class="header-anchor" href="#_1-第二阶段-提取-sql-片段" aria-label="Permalink to &quot;1.第二阶段：提取 SQL 片段&quot;">​</a></h4><p>要理解 SQLStatementRule，就需要先介绍 ParseRuleRegistry 类。从命名上看，该类就是一个规则注册表，保存着各种解析规则信息。ParseRuleRegistry 类中的核心变量包括如下所示的三个 Loader 类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ExtractorRuleDefinitionEntityLoader extractorRuleLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExtractorRuleDefinitionEntityLoader</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> FillerRuleDefinitionEntityLoader fillerRuleLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FillerRuleDefinitionEntityLoader</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementRuleDefinitionEntityLoader statementRuleLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLStatementRuleDefinitionEntityLoader</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ExtractorRuleDefinitionEntityLoader extractorRuleLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExtractorRuleDefinitionEntityLoader</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> FillerRuleDefinitionEntityLoader fillerRuleLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FillerRuleDefinitionEntityLoader</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementRuleDefinitionEntityLoader statementRuleLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLStatementRuleDefinitionEntityLoader</span><span style="color:#24292E;">();</span></span></code></pre></div><p>从命名上可以看到这三个 Loader 类分别处理对 SQLStatementRule、ExtractorRule 和 FillerRule 这三种规则定义的加载。</p><p>我们先来看 SQLStatementRule，它们的定义位于 sql-statement-rule-definition.xml 配置文件中。我们以 Mysql 为例，这个配置文件位于 shardingsphere-sql-parser-mysql 工程中的 META-INF/parsing-rule-definition/mysql 目录下。我们截取该配置文件中的部分配置信息作为演示，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">sql-statement-rule-definition</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sql-statement-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;select&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sql-statement-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractor-rule-refs</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tableReferences, columns, selectItems, where, predicate, groupBy, orderBy, limit, subqueryPredicate, lock&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sql-statement-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;insert&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sql-statement-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.InsertStatement&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractor-rule-refs</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;table, columns, insertColumns, insertValues, setAssignments, onDuplicateKeyColumns&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sql-statement-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;update&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sql-statement-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.UpdateStatement&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractor-rule-refs</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tableReferences, columns, setAssignments, where, predicate&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sql-statement-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">context</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;delete&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sql-statement-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.DeleteStatement&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractor-rule-refs</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tables, columns, where, predicate&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">... </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">sql-statement-rule-definition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">sql-statement-rule-definition</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sql-statement-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;select&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sql-statement-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractor-rule-refs</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;tableReferences, columns, selectItems, where, predicate, groupBy, orderBy, limit, subqueryPredicate, lock&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sql-statement-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;insert&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sql-statement-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.InsertStatement&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractor-rule-refs</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;table, columns, insertColumns, insertValues, setAssignments, onDuplicateKeyColumns&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sql-statement-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;update&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sql-statement-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.UpdateStatement&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractor-rule-refs</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;tableReferences, columns, setAssignments, where, predicate&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sql-statement-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">context</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;delete&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sql-statement-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.sql.statement.dml.DeleteStatement&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractor-rule-refs</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;tables, columns, where, predicate&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">... </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">sql-statement-rule-definition</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>基于 ParseRuleRegistry 类进行规则获取和处理过程，涉及一大批实体对象以及用于解析 XML 配置文件的 JAXB 工具类的定义，内容虽多但并不复杂。核心类之间的关系如下图所示：</p>`,9),S=p(`<p>ParseRuleRegistry 类层结构图</p><p>当获取规则之后，对于具体某种数据库类型的每条 SQL 而言，都会有一个 SQLStatementRule 对象。我们注意到每个 SQLStatementRule 都定义了一个&quot;context&quot;以及一个&quot;sql-statement-class&quot;。</p><p>这里的 context 实际上就是通过 SQL 解析所生成的抽象语法树 SQLAST 中的 ParserRuleContext，包括 CreateTableContext、SelectContext 等各种 StatementContext。而针对每一种 context，都有专门的一个 SQLStatement 对象与之对应，那么这个 SQLStatement 究竟长什么样呢？我们来看一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLStatement</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取参数个数 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParametersCount</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取所有SQLSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAllSQLSegments</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据类型获取一个SQLSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; Optional&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findSQLSegment</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">sqlSegmentType</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据类型获取一组SQLSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; Collection&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findSQLSegments</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">sqlSegmentType</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLStatement</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取参数个数 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParametersCount</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取所有SQLSegment </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAllSQLSegments</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据类型获取一个SQLSegment </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; Optional&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findSQLSegment</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">sqlSegmentType</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据类型获取一组SQLSegment </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; Collection&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findSQLSegments</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">sqlSegmentType</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以看到，作为解析引擎最终产物的 SQLStatement ，实际上封装的是对 SQL 片段对象 SQLSegment 的获取操作。显然，对于每一个 ParserRuleContext 而言，我们最终就是构建了一个包含一组 SQLSegment 的 SQLStatement 对象，而这些 SQLSegment 的构建过程就是所谓的提取 SQLSegment 的过程。我们在配置文件中也明确看到了 SQLStatementRule 中对各种提取规则对象 ExtractorRule 的引用。</p><p>在 ShardingSphere 中内置了一大批通用的 SQLSegment，包括查询选择项（SelectItems）、表信息（Table）、排序信息（OrderBy）、分组信息（GroupBy）以及分页信息（Limit）等。这些通用 SQLSegment 都有对应的 SQLSegmentExtractor，我们可以直接在 SQLStatementRule 中进行使用。</p><p>另一方面，考虑到 SQL 方言的差异性，ShardingSphere 同样提供了针对各种数据库的 SQLSegment 的提取器定义。以 Mysql 为例，在其代码工程的 META-INF/parsing-rule-definition/mysql 目录下，存在一个 extractor-rule-definition.xml 配置文件，专门用来定义针对 Mysql 的各种 SQLSegmentExtractor，部分定义如下所示，作为一款适用于多数据库的中间件，这也是 ShardingSphere 应对 SQL 方言的实现机制之一。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">extractor-rule-definition</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">extractor-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;addColumnDefinition&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractor-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.core.extractor.ddl.MySQLAddColumnDefinitionExtractor&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">extractor-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;modifyColumnDefinition&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extractor-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.core.extractor.ddl.MySQLModifyColumnDefinitionExtractor&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">extractor-rule-definition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">extractor-rule-definition</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">extractor-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;addColumnDefinition&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractor-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.core.extractor.ddl.MySQLAddColumnDefinitionExtractor&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">extractor-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modifyColumnDefinition&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extractor-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.core.extractor.ddl.MySQLModifyColumnDefinitionExtractor&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">    ... </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">extractor-rule-definition</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>现在，假设有这样一句 SQL：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> task_id, task_name </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> health_task </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> user_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;user1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">AND</span><span style="color:#E1E4E8;"> record_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> task_id, task_name </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> health_task </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> user_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;user1&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">AND</span><span style="color:#24292E;"> record_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>通过解析，我们获取了如下所示的抽象语法树：</p>`,11),g=p(`<p>抽象语法树示意图</p><br><p>我们发现，对于上述抽象语法树中的某些节点（如 SELECT、FROM 和 WHERE）没有子节点，而对于如 FIELDS、TABLES 和 CONDITIONS 节点而言，本身也是一个树状结构。显然，这两种节点的提取规则应该是不一样的。</p><p>因此，ShardingSphere 提供了两种 SQLSegmentExtractor，一种是针对单节点的 OptionalSQLSegmentExtractor；另一种是针对树状节点的 CollectionSQLSegmentExtractor。由于篇幅因素，这里以 TableExtractor 为例，展示如何提取 TableSegment 的过程，TableExtractor 的实现方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableExtractor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionalSQLSegmentExtractor</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Optional&lt;</span><span style="color:#F97583;">TableSegment</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">extract</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParserRuleContext </span><span style="color:#FFAB70;">ancestorNode</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">ParserRuleContext</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameterMarkerIndexes</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//从Context中获取TableName节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">     Optional&lt;</span><span style="color:#F97583;">ParserRuleContext</span><span style="color:#E1E4E8;">&gt; tableNameNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtractorUtils.</span><span style="color:#B392F0;">findFirstChildNode</span><span style="color:#E1E4E8;">(ancestorNode, RuleName.TABLE_NAME); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tableNameNode.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">absent</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据TableName节点构建TableSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">        TableSegment result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTableSegment</span><span style="color:#E1E4E8;">(tableNameNode.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置表的别名 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setAlias</span><span style="color:#E1E4E8;">(tableNameNode.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(), result); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(result); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TableSegment </span><span style="color:#B392F0;">getTableSegment</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParserRuleContext </span><span style="color:#FFAB70;">tableNode</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//从Context中获取Name节点       </span></span>
<span class="line"><span style="color:#E1E4E8;">        ParserRuleContext nameNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtractorUtils.</span><span style="color:#B392F0;">getFirstChildNode</span><span style="color:#E1E4E8;">(tableNode, RuleName.NAME); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据Name节点获取节点的起止位置以及节点内容 </span></span>
<span class="line"><span style="color:#E1E4E8;">        TableSegment result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableSegment</span><span style="color:#E1E4E8;">(nameNode.</span><span style="color:#B392F0;">getStart</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStartIndex</span><span style="color:#E1E4E8;">(), nameNode.</span><span style="color:#B392F0;">getStop</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStopIndex</span><span style="color:#E1E4E8;">(), nameNode.</span><span style="color:#B392F0;">getText</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//从Context中获取表的Owner节点，如果有的话就设置Owner </span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">ParserRuleContext</span><span style="color:#E1E4E8;">&gt; ownerNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtractorUtils.</span><span style="color:#B392F0;">findFirstChildNodeNoneRecursive</span><span style="color:#E1E4E8;">(tableNode, RuleName.OWNER); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ownerNode.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">setOwner</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SchemaSegment</span><span style="color:#E1E4E8;">(ownerNode.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStart</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStartIndex</span><span style="color:#E1E4E8;">(), ownerNode.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStop</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStopIndex</span><span style="color:#E1E4E8;">(), ownerNode.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getText</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setAlias</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParserRuleContext </span><span style="color:#FFAB70;">tableNameNode</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TableSegment </span><span style="color:#FFAB70;">tableSegment</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//从Context中获取Alias节点，如果有的话就设置别名 </span></span>
<span class="line"><span style="color:#E1E4E8;">     Optional&lt;</span><span style="color:#F97583;">ParserRuleContext</span><span style="color:#E1E4E8;">&gt; aliasNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtractorUtils.</span><span style="color:#B392F0;">findFirstChildNode</span><span style="color:#E1E4E8;">(tableNameNode.</span><span style="color:#B392F0;">getParent</span><span style="color:#E1E4E8;">(), RuleName.ALIAS); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aliasNode.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            tableSegment.</span><span style="color:#B392F0;">setAlias</span><span style="color:#E1E4E8;">(aliasNode.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getText</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableExtractor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionalSQLSegmentExtractor</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Optional&lt;</span><span style="color:#D73A49;">TableSegment</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">extract</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParserRuleContext </span><span style="color:#E36209;">ancestorNode</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">ParserRuleContext</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameterMarkerIndexes</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//从Context中获取TableName节点 </span></span>
<span class="line"><span style="color:#24292E;">     Optional&lt;</span><span style="color:#D73A49;">ParserRuleContext</span><span style="color:#24292E;">&gt; tableNameNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtractorUtils.</span><span style="color:#6F42C1;">findFirstChildNode</span><span style="color:#24292E;">(ancestorNode, RuleName.TABLE_NAME); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tableNameNode.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">absent</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        }         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据TableName节点构建TableSegment </span></span>
<span class="line"><span style="color:#24292E;">        TableSegment result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTableSegment</span><span style="color:#24292E;">(tableNameNode.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置表的别名 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setAlias</span><span style="color:#24292E;">(tableNameNode.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(), result); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(result); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TableSegment </span><span style="color:#6F42C1;">getTableSegment</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParserRuleContext </span><span style="color:#E36209;">tableNode</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//从Context中获取Name节点       </span></span>
<span class="line"><span style="color:#24292E;">        ParserRuleContext nameNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtractorUtils.</span><span style="color:#6F42C1;">getFirstChildNode</span><span style="color:#24292E;">(tableNode, RuleName.NAME); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据Name节点获取节点的起止位置以及节点内容 </span></span>
<span class="line"><span style="color:#24292E;">        TableSegment result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableSegment</span><span style="color:#24292E;">(nameNode.</span><span style="color:#6F42C1;">getStart</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStartIndex</span><span style="color:#24292E;">(), nameNode.</span><span style="color:#6F42C1;">getStop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStopIndex</span><span style="color:#24292E;">(), nameNode.</span><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//从Context中获取表的Owner节点，如果有的话就设置Owner </span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">ParserRuleContext</span><span style="color:#24292E;">&gt; ownerNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtractorUtils.</span><span style="color:#6F42C1;">findFirstChildNodeNoneRecursive</span><span style="color:#24292E;">(tableNode, RuleName.OWNER); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ownerNode.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">setOwner</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SchemaSegment</span><span style="color:#24292E;">(ownerNode.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStart</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStartIndex</span><span style="color:#24292E;">(), ownerNode.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStopIndex</span><span style="color:#24292E;">(), ownerNode.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setAlias</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParserRuleContext </span><span style="color:#E36209;">tableNameNode</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TableSegment </span><span style="color:#E36209;">tableSegment</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//从Context中获取Alias节点，如果有的话就设置别名 </span></span>
<span class="line"><span style="color:#24292E;">     Optional&lt;</span><span style="color:#D73A49;">ParserRuleContext</span><span style="color:#24292E;">&gt; aliasNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtractorUtils.</span><span style="color:#6F42C1;">findFirstChildNode</span><span style="color:#24292E;">(tableNameNode.</span><span style="color:#6F42C1;">getParent</span><span style="color:#24292E;">(), RuleName.ALIAS); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (aliasNode.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            tableSegment.</span><span style="color:#6F42C1;">setAlias</span><span style="color:#24292E;">(aliasNode.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，语法树中的 Table 是一种单节点，所以 TableExtractor 继承自 OptionalSQLSegmentExtractor。对于 TableExtractor 而言，整个解析过程就是从 ParserRuleContext 中获取与表定义相关的各种节点，然后通过节点的起止位置以及节点内容来构建 TableSegment 对象。TableSegment 实现了 SQLSegment，其核心变量的定义也比较明确，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableSegment</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLSegment</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">TableAvailable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">OwnerAvailable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">SchemaSegment</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">AliasAvailable</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> startIndex;     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> stopIndex;   </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String name;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> QuoteCharacter quoteCharacter; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SchemaSegment owner;  </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String alias; </span></span>
<span class="line"><span style="color:#E1E4E8;">       ... </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableSegment</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLSegment</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">TableAvailable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">OwnerAvailable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">SchemaSegment</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">AliasAvailable</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> startIndex;     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> stopIndex;   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String name;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> QuoteCharacter quoteCharacter; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SchemaSegment owner;  </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String alias; </span></span>
<span class="line"><span style="color:#24292E;">       ... </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，基于以上关于提取器以及提取操作的相关概念的理解，我们来看一下 SQLSegment 提取引擎 SQLSegmentsExtractorEngine 的实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLSegmentsExtractorEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用来提取SQLAST语法树中的SQL片段 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">extract</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLAST </span><span style="color:#FFAB70;">ast</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//遍历提取器，从Context中提取对应类型的SQLSegment，比如TableSegment         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SQLSegmentExtractor each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ast.</span><span style="color:#B392F0;">getSqlStatementRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getExtractors</span><span style="color:#E1E4E8;">()) {            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//单节点的场景，直接提取单一节点下的内容 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> OptionalSQLSegmentExtractor) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                Optional&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; sqlSegment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((OptionalSQLSegmentExtractor) each).</span><span style="color:#B392F0;">extract</span><span style="color:#E1E4E8;">(ast.</span><span style="color:#B392F0;">getParserRuleContext</span><span style="color:#E1E4E8;">(), ast.</span><span style="color:#B392F0;">getParameterMarkerIndexes</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlSegment.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sqlSegment.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span></span>
<span class="line"><span style="color:#E1E4E8;">            树状节点的场景，遍历提取节点下的所有子节点</span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> CollectionSQLSegmentExtractor) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(((CollectionSQLSegmentExtractor) each).</span><span style="color:#B392F0;">extract</span><span style="color:#E1E4E8;">(ast.</span><span style="color:#B392F0;">getParserRuleContext</span><span style="color:#E1E4E8;">(), ast.</span><span style="color:#B392F0;">getParameterMarkerIndexes</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLSegmentsExtractorEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//用来提取SQLAST语法树中的SQL片段 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">extract</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLAST </span><span style="color:#E36209;">ast</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//遍历提取器，从Context中提取对应类型的SQLSegment，比如TableSegment         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SQLSegmentExtractor each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ast.</span><span style="color:#6F42C1;">getSqlStatementRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getExtractors</span><span style="color:#24292E;">()) {            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//单节点的场景，直接提取单一节点下的内容 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> OptionalSQLSegmentExtractor) { </span></span>
<span class="line"><span style="color:#24292E;">                Optional&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; sqlSegment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((OptionalSQLSegmentExtractor) each).</span><span style="color:#6F42C1;">extract</span><span style="color:#24292E;">(ast.</span><span style="color:#6F42C1;">getParserRuleContext</span><span style="color:#24292E;">(), ast.</span><span style="color:#6F42C1;">getParameterMarkerIndexes</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlSegment.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">                    result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sqlSegment.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">                 </span></span>
<span class="line"><span style="color:#24292E;">            树状节点的场景，遍历提取节点下的所有子节点</span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> CollectionSQLSegmentExtractor) { </span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(((CollectionSQLSegmentExtractor) each).</span><span style="color:#6F42C1;">extract</span><span style="color:#24292E;">(ast.</span><span style="color:#6F42C1;">getParserRuleContext</span><span style="color:#24292E;">(), ast.</span><span style="color:#6F42C1;">getParameterMarkerIndexes</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，SQLSegmentsExtractorEngine 的作用就是针对某一条 SQL，遍历 SQLStatementRule 中所配置的提取器，然后从 Context 中提取对应类型的 SQLSegment，并最终存放在一个集合对象中进行返回。</p><h4 id="_2-第三阶段-填充-sql-语句" tabindex="-1">2.第三阶段：填充 SQL 语句 <a class="header-anchor" href="#_2-第三阶段-填充-sql-语句" aria-label="Permalink to &quot;2.第三阶段：填充 SQL 语句&quot;">​</a></h4><p>完成所有 SQLSegment 的提取之后，我们就来到了解析引擎的最后一个阶段，即填充 SQLStatement。所谓的<strong>填充过程</strong>，就是通过填充器 SQLSegmentFiller 为 SQLStatement 注入具体 SQLSegment 的过程。这点从 SQLSegmentFiller 接口定义中的各个参数就可以得到明确，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLSegmentFiller</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">sqlSegment</span><span style="color:#E1E4E8;">, SQLStatement </span><span style="color:#FFAB70;">sqlStatement</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLSegmentFiller</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">sqlSegment</span><span style="color:#24292E;">, SQLStatement </span><span style="color:#E36209;">sqlStatement</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么问题就来了，我们如何正确把握 SQLSegmentFiller、SQLSegment 和 SQLStatement 这三者之间的处理关系呢？我们先根据某个 SQLSegment 找到对应的 SQLSegmentFiller，这部分关系在 ShardingSphere 中同样是维护在一个 filler-rule-definition.xml 配置文件中，截取部分配置项如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">filler-rule-definition</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">filler-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sql-segment-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.sql.segment.generic.TableSegment&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filler-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.core.filler.impl.TableFiller&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">filler-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sql-segment-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.sql.segment.generic.SchemaSegment&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filler-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.sql.parser.core.filler.impl.dal.SchemaFiller&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">	... </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">filler-rule-definition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">filler-rule-definition</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">filler-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sql-segment-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.sql.segment.generic.TableSegment&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filler-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.core.filler.impl.TableFiller&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">filler-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sql-segment-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.sql.segment.generic.SchemaSegment&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filler-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.sql.parser.core.filler.impl.dal.SchemaFiller&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">	... </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">filler-rule-definition</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>显然，这里保存着 SQLSegment 与 SQLSegmentFiller 之间的对应关系。当然，对于不同的 SQL 方言，也同样可以维护自身的 filler-rule-definition.xml 文件。</p><p>我们还是以与 TableSegment 对应的 TableFiller 为例，来分析一个 SQLSegmentFiller 的具体实现方法，TableFiller 类如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableFiller</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLSegmentFiller</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">TableSegment</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TableSegment </span><span style="color:#FFAB70;">sqlSegment</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#FFAB70;">sqlStatement</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> TableSegmentAvailable) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            ((TableSegmentAvailable) sqlStatement).</span><span style="color:#B392F0;">setTable</span><span style="color:#E1E4E8;">(sqlSegment); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> TableSegmentsAvailable) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            ((TableSegmentsAvailable) sqlStatement).</span><span style="color:#B392F0;">getTables</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sqlSegment); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableFiller</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLSegmentFiller</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">TableSegment</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TableSegment </span><span style="color:#E36209;">sqlSegment</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#E36209;">sqlStatement</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TableSegmentAvailable) { </span></span>
<span class="line"><span style="color:#24292E;">            ((TableSegmentAvailable) sqlStatement).</span><span style="color:#6F42C1;">setTable</span><span style="color:#24292E;">(sqlSegment); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TableSegmentsAvailable) { </span></span>
<span class="line"><span style="color:#24292E;">            ((TableSegmentsAvailable) sqlStatement).</span><span style="color:#6F42C1;">getTables</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sqlSegment); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码在实现上采用了回调机制来完成对象的注入。在 ShardingSphere 中，基于回调的处理方式也非常普遍。本质上，回调解决了因为类与类之间的相互调用而造成的循环依赖问题，回调的实现策略通常采用了如下所示的类层结构：</p>`,19),F=l("p",null,"回调机制示意图",-1),m=l("p",null,"TableFiller 中所依赖的 TableSegmentAvailable 和 TableSegmentsAvailable 接口就类似于上图中的 Callback 接口，具体的 SQLStatement 就是 Callback 的实现类，而 TableFiller 则是 Callback 的调用者。以 TableFiller 为例，我们注意到，如果对应的 SQLStatement 实现了这两个接口中的任意一个，那么就可以通过 TableFiller 注入对应的 TableSegment，从而完成 SQLSegment 的填充。",-1),d=l("p",null,"这里以 TableSegmentAvailable 接口为例，它有一组实现类，如下所示：",-1),u=p(`<p>TableSegmentAvailable实现类</p><br><p>以上图中的 CreateTableStatement 为例，该类同时实现了 TableSegmentAvailable 和 IndexSegmentsAvailable 这两个回调接口，所以就可以同时操作 TableSegment 和 IndexSegment 这两个 SQLSegment。CreateTableStatement 类的实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateTableStatement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DDLStatement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableSegmentAvailable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">IndexSegmentsAvailable</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TableSegment table; </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">ColumnDefinitionSegment</span><span style="color:#E1E4E8;">&gt; columnDefinitions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">IndexSegment</span><span style="color:#E1E4E8;">&gt; indexes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateTableStatement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DDLStatement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableSegmentAvailable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">IndexSegmentsAvailable</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TableSegment table; </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">ColumnDefinitionSegment</span><span style="color:#24292E;">&gt; columnDefinitions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">IndexSegment</span><span style="color:#24292E;">&gt; indexes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，我们通过一个示例解释了与填充操作相关的各个类之间的协作关系，如下所示的类图展示了这种协作关系的整体结构。</p>`,5),A=p(`<p>SQLStatement类层结构图</p><p>有了上图的基础，我们理解填充引擎 SQLStatementFillerEngine 就显得比较简单了，SQLStatementFillerEngine 类的实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLStatementFillerEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParseRuleRegistry parseRuleRegistry;     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String databaseTypeName; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SuppressWarnings</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unchecked&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SneakyThrows</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">sqlSegments</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">parameterMarkerCount</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementRule </span><span style="color:#FFAB70;">rule</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//从SQLStatementRule中获取SQLStatement实例，如CreateTableStatement </span></span>
<span class="line"><span style="color:#E1E4E8;">     SQLStatement result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rule.</span><span style="color:#B392F0;">getSqlStatementClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过断言对SQLStatement的合法性进行校验 </span></span>
<span class="line"><span style="color:#E1E4E8;">     Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(result </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> AbstractSQLStatement, </span><span style="color:#9ECBFF;">&quot;%s must extends AbstractSQLStatement&quot;</span><span style="color:#E1E4E8;">, result.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置参数个数 </span></span>
<span class="line"><span style="color:#E1E4E8;">        ((AbstractSQLStatement) result).</span><span style="color:#B392F0;">setParametersCount</span><span style="color:#E1E4E8;">(parameterMarkerCount); </span></span>
<span class="line"><span style="color:#E1E4E8;">       </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//添加所有的SQLSegment到SQLStatement中 </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">getAllSQLSegments</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(sqlSegments); </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//遍历填充对应类型的SQLSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SQLSegment each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sqlSegments) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//根据数据库类型和SQLSegment找到对应的SQLSegmentFiller，并为SQLStatement填充SQLSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//如通过TableSegment找到获取TableFiller，然后通过TableFiller为CreateTableStatement填充TableSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">         Optional&lt;</span><span style="color:#F97583;">SQLSegmentFiller</span><span style="color:#E1E4E8;">&gt; filler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parseRuleRegistry.</span><span style="color:#B392F0;">findSQLSegmentFiller</span><span style="color:#E1E4E8;">(databaseTypeName, each.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (filler.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) {                </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//利用SQLSegmentFiller来填充SQLStatement中的SQLSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">                filler.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(each, result); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">	}  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLStatementFillerEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParseRuleRegistry parseRuleRegistry;     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String databaseTypeName; </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SneakyThrows</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">sqlSegments</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">parameterMarkerCount</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementRule </span><span style="color:#E36209;">rule</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//从SQLStatementRule中获取SQLStatement实例，如CreateTableStatement </span></span>
<span class="line"><span style="color:#24292E;">     SQLStatement result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rule.</span><span style="color:#6F42C1;">getSqlStatementClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过断言对SQLStatement的合法性进行校验 </span></span>
<span class="line"><span style="color:#24292E;">     Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(result </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> AbstractSQLStatement, </span><span style="color:#032F62;">&quot;%s must extends AbstractSQLStatement&quot;</span><span style="color:#24292E;">, result.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置参数个数 </span></span>
<span class="line"><span style="color:#24292E;">        ((AbstractSQLStatement) result).</span><span style="color:#6F42C1;">setParametersCount</span><span style="color:#24292E;">(parameterMarkerCount); </span></span>
<span class="line"><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//添加所有的SQLSegment到SQLStatement中 </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">getAllSQLSegments</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(sqlSegments); </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//遍历填充对应类型的SQLSegment </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SQLSegment each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sqlSegments) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//根据数据库类型和SQLSegment找到对应的SQLSegmentFiller，并为SQLStatement填充SQLSegment </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如通过TableSegment找到获取TableFiller，然后通过TableFiller为CreateTableStatement填充TableSegment </span></span>
<span class="line"><span style="color:#24292E;">         Optional&lt;</span><span style="color:#D73A49;">SQLSegmentFiller</span><span style="color:#24292E;">&gt; filler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parseRuleRegistry.</span><span style="color:#6F42C1;">findSQLSegmentFiller</span><span style="color:#24292E;">(databaseTypeName, each.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (filler.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {                </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//利用SQLSegmentFiller来填充SQLStatement中的SQLSegment </span></span>
<span class="line"><span style="color:#24292E;">                filler.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(each, result); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">	}  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们对 SQLStatementFillerEngine 中的核心代码都添加了注释，注意到这里通过数据库类型以及 SQLSegment 的类型，从规则注册表 ParseRuleRegistry 中获取了对应的 SQLSegmentFiller 并完成对 SQLStatement 的填充操作。</p><p>至此，ShardingSphere 中 SQL 解析引擎的三大阶段介绍完毕。我们已经获取了目标 SQLStatement，为进行后续的路由等操作提供了基础。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>通过对框架源代码的学习，一方面可以帮忙我们更好地理解该框架核心功能背后的实现原理；另一方面，我们也可以吸收这些优秀框架的设计思想和实现方法，从而更好地指导日常开发工作。在本文中，我们同样总结了一组设计和实现上的技巧。</p><h4 id="_1-设计模式的应用方式" tabindex="-1">1.设计模式的应用方式 <a class="header-anchor" href="#_1-设计模式的应用方式" aria-label="Permalink to &quot;1.设计模式的应用方式&quot;">​</a></h4><p>在本文中，我们主要涉及了两种设计模式的应用场景，一种是工厂模式，另一种是外观模式。</p><p><strong>工厂模式</strong>的应用比较简单，作用也比较直接。例如，SQLParseEngineFactory 工厂类用于创建 SQLParseEngine，而 SQLParserFactory 工厂类用于创建 SQLParser。</p><p>相比工厂模式，<strong>外观类</strong>通常比较难识别和把握，因此，我们也花了一定篇幅介绍了 SQL 解析引擎中的外观类 SQLParseKernel，以及与 SQLParseEngine 之间的委托关系。</p><h4 id="_2-缓存的实现方式" tabindex="-1">2.缓存的实现方式 <a class="header-anchor" href="#_2-缓存的实现方式" aria-label="Permalink to &quot;2.缓存的实现方式&quot;">​</a></h4><p>缓存在 ShardingSphere 中应用非常广泛，其实现方式也比较多样，在本文中，我们就接触到了两种缓存的实现方式。</p><p>第一种是通过 ConcurrentHashMap 类来保存 SQLParseEngine 的实例，使用上比较简单。</p><p>另一种则基于 Guava 框架中的 Cache 类构建了一个 SQLParseResultCache 来保存 SQLStatement 对象。Guava 中的 Cache 类初始化方法如下所示，我们可以通过 put 和 getIfPresent 等方法对缓存进行操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Cache&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">SQLStatement</span><span style="color:#E1E4E8;">&gt; cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheBuilder.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">softValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">initialCapacity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">maximumSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">65535</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Cache&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">SQLStatement</span><span style="color:#24292E;">&gt; cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheBuilder.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">softValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">initialCapacity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">maximumSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">65535</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="_3-配置信息的两级管理机制" tabindex="-1">3.配置信息的两级管理机制 <a class="header-anchor" href="#_3-配置信息的两级管理机制" aria-label="Permalink to &quot;3.配置信息的两级管理机制&quot;">​</a></h4><p>在 ShardingSphere 中，关于各种提取规则和填充规则的定义都放在了 XML 配置文件中，并采用了配置信息的两级管理机制。这种<strong>两级管理机制</strong>的设计思想在于，系统在提供了对各种通用规则默认实现的同时，也能够集成来自各种 SQL 方言的定制化规则，从而形成一套具有较高灵活性以及可扩展性的规则管理体系。</p><h4 id="_4-回调机制" tabindex="-1">4.回调机制 <a class="header-anchor" href="#_4-回调机制" aria-label="Permalink to &quot;4.回调机制&quot;">​</a></h4><p>所谓<strong>回调</strong> ，本质上就是一种<strong>双向调用模式</strong>，也就是说，被调用方在被调用的同时也会调用对方。在实现上，我们可以提取一个用于业务接口作为一种 Callback 接口，然后让具体的业务对象去实现这个接口。这样，当外部对象依赖于这个业务场景时，只需要依赖这个 Callback 接口，而不需要关心这个接口的具体实现类。</p><p>这在软件设计和实现过程中是一种常见的消除业务对象和外部对象之间循环依赖的处理方式。ShardingSphere 中大量采用了这种实现方式来确保代码的可维护性，这非常值得我们学习。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>作为 ShardingSphere 分片引擎的第一个核心组件，解析引擎的目的在于生成 SQLStatement 目标对象。而整个解析引擎分成三大阶段，即生成 SQL 抽象语法树、提取 SQL 片段以及使用这些片段来填充 SQL 语句。本文对解析引擎的整体结构以及这三个阶段进行了详细的讨论。</p><p>最后给你留一道思考题：简要介绍 ShardingSphere 中 SQL 解析的各个阶段的输入和产出？欢迎你在留言区与大家讨论，我将一一点评解答。</p><p>现在，我们已经获取了 SQLStatement，接下来就可以用来执行 SQL 路由操作，这就是下一课时内容。</p>`,25);function h(C,D,b,L,q,Q){const n=o("Image");return t(),r("div",null,[E,y,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/3E/39/Ciqc1F8ry7-AWFaOAACKmUmdLPs289.png"}),s(),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/3E/3A/Ciqc1F8ry9CAPtDdAACEYYKrCTU070.png"}),s(),S,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/3E/3A/Ciqc1F8ry_WAEwAzAACKQ3CnEFw961.png"}),s(),g,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/3E/3A/Ciqc1F8rzBeAL-gtAAAtxVTlOkM440.png"}),s(),F,m,d,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/3E/45/CgqCHl8rzC2ADPHvAAAxxRKUUYw921.png"}),s(),u,a(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/3E/45/CgqCHl8rzDqAVtDCAAB-8xyeFnI893.png"}),s(),A])}const v=e(c,[["render",h]]);export{x as __pageData,v as default};
