import{_ as o,j as e,o as t,g as c,k as n,Q as p,s,h as l}from"./chunks/framework.4e7d56ce.js";const V=JSON.parse('{"title":"Spring Data ElasticSearch 入门案例 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4731) 32  Spring Data ElaticSearch 在 Spring Data 中的用法有哪些？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4731) 32  Spring Data ElaticSearch 在 Spring Data 中的用法有哪些？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4731) 32  Spring Data ElaticSearch 在 Spring Data 中的用法有哪些？.md"},E=p(`<p>这一讲是这门专栏的最后一讲了，恭喜你一直坚持到现在。</p><p>相信到这里，你已经对 Spring Data JPA 有一定的认识了，那么这一讲我会为你演示 Spring Data ElasticSearch 如何使用，帮助你打开思路，感受 Spring Data 的抽象封装。</p><p>我们还是从一个案例入手。</p><h3 id="spring-data-elasticsearch-入门案例" tabindex="-1">Spring Data ElasticSearch 入门案例 <a class="header-anchor" href="#spring-data-elasticsearch-入门案例" aria-label="Permalink to &quot;Spring Data ElasticSearch 入门案例&quot;">​</a></h3><p>Spring Data 和 Elasticsearch 结合的时候，唯一需要注意的是版本之间的兼容性问题，Elasticsearch 和 Spring Boot 是同时向前发展的，而 Elasticsearch 的大版本之间还存在一定的 API 兼容性问题，所以我们必须要知道这些版本之间的关系，我整理了一个表格，如下。</p><table><thead><tr><th style="text-align:center;"><strong>Spring Data Release Train</strong></th><th><strong>Spring Data Elasticsearch</strong></th><th style="text-align:center;"><strong>Elasticsearch</strong></th><th><strong>Spring Boot</strong></th></tr></thead><tbody><tr><td style="text-align:center;">2020.0.0[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_1" target="_blank" rel="noreferrer">1</a>]</td><td>4.1.x[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_1" target="_blank" rel="noreferrer">1</a>]</td><td style="text-align:center;">7.9.3</td><td>2.4.x[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_1" target="_blank" rel="noreferrer">1</a>]</td></tr><tr><td style="text-align:center;">Neumann</td><td>4.0.x</td><td style="text-align:center;">7.6.2</td><td>2.3.x</td></tr><tr><td style="text-align:center;">Moore</td><td>3.2.x</td><td style="text-align:center;">6.8.12</td><td>2.2.x</td></tr><tr><td style="text-align:center;">Lovelace</td><td>3.1.x</td><td style="text-align:center;">6.2.2</td><td>2.1.x</td></tr><tr><td style="text-align:center;">Kay[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_2" target="_blank" rel="noreferrer">2</a>]</td><td>3.0.x[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_2" target="_blank" rel="noreferrer">2</a>]</td><td style="text-align:center;">5.5.0</td><td>2.0.x[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_2" target="_blank" rel="noreferrer">2</a>]</td></tr><tr><td style="text-align:center;">Ingalls[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_2" target="_blank" rel="noreferrer">2</a>]</td><td>2.1.x[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_2" target="_blank" rel="noreferrer">2</a>]</td><td style="text-align:center;">2.4.0</td><td>1.5.x[<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#_footnotedef_2" target="_blank" rel="noreferrer">2</a>]</td></tr></tbody></table><p>现在你对这些版本之间的关联关系有了一定印象，由于版本越新越便利，所以一般情况下我们直接采用最新的版本。</p><p>接下来看看这个版本是怎么完成 Demo 演示的。</p><p><strong>第一步：利用 Helm Chart 安装一个 Elasticsearch 集群 7.9.3 版本</strong>，执行命令如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> helm2 repo add elastic https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//helm.elastic.co</span></span>
<span class="line"><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;"> helm2 install </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">name myelasticsearch elastic</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">elasticsearch  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">set imageTag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">7.9</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1.</span><span style="color:#24292E;"> helm2 repo add elastic https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//helm.elastic.co</span></span>
<span class="line"><span style="color:#005CC5;">2.</span><span style="color:#24292E;"> helm2 install </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">name myelasticsearch elastic</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">elasticsearch  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">set imageTag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">7.9</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">3</span></span></code></pre></div><p>安装完之后，我们就可以看到如下信息。</p>`,11),y=p(`<p>这代表我们安装成功。</p><p>由于 ElasticSearch 是发展变化的，所以它的安装方式你可以参考官方文档：<a href="https://github.com/elastic/helm-charts/tree/master/elasticsearch" target="_blank" rel="noreferrer">https://github.com/elastic/helm-charts/tree/master/elasticsearch</a></p><p>然后我们利用 k8s 集群端口映射到本地，就可以开始测试了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">~</span><span style="color:#E1E4E8;"> ❯❯❯ kubectl port</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">forward svc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">elasticsearch</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">master </span><span style="color:#79B8FF;">9200</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9200</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">namespace</span></span>
<span class="line"><span style="color:#E1E4E8;">Forwarding from </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9200</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9200</span></span>
<span class="line"><span style="color:#E1E4E8;">Forwarding from [</span><span style="color:#F97583;">::</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9200</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9200</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">~</span><span style="color:#24292E;"> ❯❯❯ kubectl port</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">forward svc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">elasticsearch</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">master </span><span style="color:#005CC5;">9200</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9200</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">namespace</span></span>
<span class="line"><span style="color:#24292E;">Forwarding from </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9200</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9200</span></span>
<span class="line"><span style="color:#24292E;">Forwarding from [</span><span style="color:#D73A49;">::</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9200</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9200</span></span></code></pre></div><p><strong>第二步：在 gradle.build 里面配置 Spring Data ElasticSearch 依赖的 Jar 包</strong>。</p><p>我们依赖 Spring Boot 2.4.1 版本，完整的 gradle.build 文件如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">plugins {</span></span>
<span class="line"><span style="color:#E1E4E8;">   id </span><span style="color:#9ECBFF;">&#39;org.springframework.boot&#39;</span><span style="color:#E1E4E8;"> version </span><span style="color:#9ECBFF;">&#39;2.4.1&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   id </span><span style="color:#9ECBFF;">&#39;io.spring.dependency-management&#39;</span><span style="color:#E1E4E8;"> version </span><span style="color:#9ECBFF;">&#39;1.0.10.RELEASE&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   id </span><span style="color:#9ECBFF;">&#39;java&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;com.example.data.es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0.0.1-SNAPSHOT&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceCompatibility </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1.8&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">configurations {</span></span>
<span class="line"><span style="color:#E1E4E8;">   compileOnly {</span></span>
<span class="line"><span style="color:#E1E4E8;">      extendsFrom annotationProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">repositories {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">mavenCentral</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="color:#E1E4E8;">   implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-data-elasticsearch&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   compileOnly </span><span style="color:#9ECBFF;">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   developmentOnly </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-devtools&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   runtimeOnly </span><span style="color:#9ECBFF;">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   annotationProcessor </span><span style="color:#9ECBFF;">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">   testImplementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">test {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">useJUnitPlatform</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">plugins {</span></span>
<span class="line"><span style="color:#24292E;">   id </span><span style="color:#032F62;">&#39;org.springframework.boot&#39;</span><span style="color:#24292E;"> version </span><span style="color:#032F62;">&#39;2.4.1&#39;</span></span>
<span class="line"><span style="color:#24292E;">   id </span><span style="color:#032F62;">&#39;io.spring.dependency-management&#39;</span><span style="color:#24292E;"> version </span><span style="color:#032F62;">&#39;1.0.10.RELEASE&#39;</span></span>
<span class="line"><span style="color:#24292E;">   id </span><span style="color:#032F62;">&#39;java&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;com.example.data.es&#39;</span></span>
<span class="line"><span style="color:#24292E;">version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0.0.1-SNAPSHOT&#39;</span></span>
<span class="line"><span style="color:#24292E;">sourceCompatibility </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1.8&#39;</span></span>
<span class="line"><span style="color:#24292E;">configurations {</span></span>
<span class="line"><span style="color:#24292E;">   compileOnly {</span></span>
<span class="line"><span style="color:#24292E;">      extendsFrom annotationProcessor</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">repositories {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">mavenCentral</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">dependencies {</span></span>
<span class="line"><span style="color:#24292E;">   implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-actuator&#39;</span></span>
<span class="line"><span style="color:#24292E;">   implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-data-elasticsearch&#39;</span></span>
<span class="line"><span style="color:#24292E;">   implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span></span>
<span class="line"><span style="color:#24292E;">   compileOnly </span><span style="color:#032F62;">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line"><span style="color:#24292E;">   developmentOnly </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-devtools&#39;</span></span>
<span class="line"><span style="color:#24292E;">   runtimeOnly </span><span style="color:#032F62;">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span></span>
<span class="line"><span style="color:#24292E;">   annotationProcessor </span><span style="color:#032F62;">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line"><span style="color:#24292E;">   testImplementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">test {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">useJUnitPlatform</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第三步：新建一个目录，结构如下图所示，方便我们测试</strong>。</p>`,8),i=p(`<p><strong>第四步：在 application.properties 里面新增 es 的连接地址，连接本地的 Elasticsearch</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.data.elasticsearch.client.reactive.endpoints</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9200</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.data.elasticsearch.client.reactive.endpoints</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9200</span></span></code></pre></div><p><strong>第五步：新增一个 ElasticSearchConfiguration 的配置文件，主要是为了开启扫描的包</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;</span></span>
<span class="line"><span style="color:#6A737D;">//利用@EnableElasticsearchRepositories注解指定Elasticsearch相关的Repository的包路径在哪里</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableElasticsearchRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.example.data.es.demo.es&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ElasticSearchConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;</span></span>
<span class="line"><span style="color:#6A737D;">//利用@EnableElasticsearchRepositories注解指定Elasticsearch相关的Repository的包路径在哪里</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableElasticsearchRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.example.data.es.demo.es&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElasticSearchConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第六步：我们新增一个 Topic 的 Document，它类似 JPA 里面的实体，用来保存和读取 Topic 的数据</strong>，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.Builder;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.Data;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.ToString;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.annotation.Id;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.elasticsearch.annotations.Document;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.elasticsearch.annotations.Field;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.elasticsearch.annotations.FieldType;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Document</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">indexName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;topic&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">callSuper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//论坛主题信息</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Topic</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String title;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Field</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FieldType.Nested, </span><span style="color:#79B8FF;">includeInParent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Author</span><span style="color:#E1E4E8;">&gt; authors;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.Builder;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.Data;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#6A737D;">//作者信息</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Author</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.Builder;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.Data;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.ToString;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.annotation.Id;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.elasticsearch.annotations.Document;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.elasticsearch.annotations.Field;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.elasticsearch.annotations.FieldType;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Document</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">indexName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;topic&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">callSuper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//论坛主题信息</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Topic</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String title;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Field</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FieldType.Nested, </span><span style="color:#005CC5;">includeInParent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Author</span><span style="color:#24292E;">&gt; authors;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.Builder;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.Data;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#6A737D;">//作者信息</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Author</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第七步：新建一个 Elasticsearch 的 Repository，用来对 Elasticsearch 索引的增删改查</strong>，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#6A737D;">//类似JPA一样直接操作Topic类型的索引</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TopicRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ElasticsearchRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Topic</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Topic</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByTitle</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo.es;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#6A737D;">//类似JPA一样直接操作Topic类型的索引</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElasticsearchRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Topic</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Topic</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByTitle</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">title</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第八步: 新建一个 Controller，对 Topic 索引进行查询和添加。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TopicController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TopicRepository topicRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//查询topic的所有索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topics&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Topic</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> topicRepository.</span><span style="color:#B392F0;">findByTitle</span><span style="color:#E1E4E8;">(title);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//保存 topic索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topics&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Topic </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> Topic </span><span style="color:#FFAB70;">topic</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> topicRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(topic);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TopicRepository topicRepository;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//查询topic的所有索引</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topics&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Topic</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">title</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> topicRepository.</span><span style="color:#6F42C1;">findByTitle</span><span style="color:#24292E;">(title);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//保存 topic索引</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topics&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Topic </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> Topic </span><span style="color:#E36209;">topic</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> topicRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(topic);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第九步：发送一个添加和查询的请求测试一下</strong>。</p><p>我们发送三个 POST 请求，添加三条索引，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">topics HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8080</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">Postman</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> d9cc1f6c</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">24dd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">17ff</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f2e8</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">3063fa6b86fc</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;authors&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">[{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">topics HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8080</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">Postman</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> d9cc1f6c</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">24dd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">17ff</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f2e8</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">3063fa6b86fc</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;authors&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">[{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#24292E;">        },{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后发送一个 get 请求，获得标题是 jack 的索引，如下面这行代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/topics?title=jack</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/topics?title=jack</span></span></code></pre></div><p>得到如下结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GET http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/topics?title=jack</span></span>
<span class="line"><span style="color:#E1E4E8;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Transfer</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Encoding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> chunked</span></span>
<span class="line"><span style="color:#E1E4E8;">Date</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Wed, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;"> Dec </span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> GMT</span></span>
<span class="line"><span style="color:#E1E4E8;">Keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Alive</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> timeout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">60</span></span>
<span class="line"><span style="color:#E1E4E8;">Connection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;authors&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;authors&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;authors&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">Response code</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">; Time</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 348ms; Content length</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">199</span><span style="color:#E1E4E8;"> bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">Cannot preserve cookies, cookie storage file is included in ignored list</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">jack</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Company</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">git_hub</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jpa</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">guide</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2.3</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">elasticsearch</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.idea</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">httpRequests</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">client.cookies</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GET http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:8080/topics?title=jack</span></span>
<span class="line"><span style="color:#24292E;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Transfer</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Encoding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> chunked</span></span>
<span class="line"><span style="color:#24292E;">Date</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Wed, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> Dec </span><span style="color:#005CC5;">2020</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> GMT</span></span>
<span class="line"><span style="color:#24292E;">Keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Alive</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">60</span></span>
<span class="line"><span style="color:#24292E;">Connection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span></span>
<span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;authors&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;authors&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;authors&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jk1&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jk2&quot;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">Response code</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">; Time</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 348ms; Content length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">199</span><span style="color:#24292E;"> bytes</span></span>
<span class="line"><span style="color:#24292E;">Cannot preserve cookies, cookie storage file is included in ignored list</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">jack</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Company</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">git_hub</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jpa</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">guide</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2.3</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">elasticsearch</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.idea</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">httpRequests</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">client.cookies</span></span></code></pre></div><p>这时，一个完整的 Spring Data Elasticsearch 的例子就演示完了。其实你会发现，我们使用 Spring Data Elasticsearch 来操作 ES 相关的 API 的话，比我们直接写 Http 的 client 要简单很多，因为这里面帮我们封装了很多基础逻辑，省去了很多重复造轮子的过程。</p><p>其实测试用例也是很简单的，我们接着来看一下写法。</p><p><strong>第十步：Elasticsearch Repository 的测试用例写法</strong>，如下面的代码和注释所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.data.es.demo.es.Author;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.data.es.demo.es.Topic;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.data.es.demo.es.TopicRepository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.assertj.core.util.Lists;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.BeforeEach;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.context.SpringBootTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.test.context.TestPropertySource;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestPropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">properties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;logging.level.org.springframework.data.elasticsearch.core=TRACE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logging.level.org.springframework.data.elasticsearch.client=trace&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logging.level.org.elasticsearch.client=TRACE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logging.level.org.apache.http=TRACE&quot;</span><span style="color:#E1E4E8;">})</span><span style="color:#6A737D;">//新增一些配置， 开启spring data elastic search的http的调用过程，我们可以查看一下日志</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ElasticSearchRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TopicRepository topicRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">BeforeEach</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">//        topicRepository.deleteAll(); //可以直接删除所有索引</span></span>
<span class="line"><span style="color:#E1E4E8;">        Topic topic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Topic.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jacktest&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">authors</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(Author.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jk1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        topicRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(topic);</span><span style="color:#6A737D;">//集成测试保存索引</span></span>
<span class="line"><span style="color:#E1E4E8;">        Topic topic1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Topic.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">14L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jacktest&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">authors</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(Author.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jk1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        topicRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(topic1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Topic topic2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Topic.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">15L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jacktest&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">authors</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(Author.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jk1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        topicRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(topic2);</span><span style="color:#6A737D;">//保存索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testTopic</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Iterable&lt;</span><span style="color:#F97583;">Topic</span><span style="color:#E1E4E8;">&gt; topics </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> topicRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        topics.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(topic1 </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(topic1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Topic</span><span style="color:#E1E4E8;">&gt; topicList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> topicRepository.</span><span style="color:#B392F0;">findByTitle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jacktest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        topicList.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(t);</span><span style="color:#6A737D;">//获得索引的查询结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Topic</span><span style="color:#E1E4E8;">&gt; topicList2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> topicRepository.</span><span style="color:#B392F0;">findByTitle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        topicList2.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(t);</span><span style="color:#6A737D;">//我们也可以用上一讲介绍的断言测试</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.data.es.demo.es.Author;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.data.es.demo.es.Topic;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.data.es.demo.es.TopicRepository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.assertj.core.util.Lists;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.BeforeEach;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.context.SpringBootTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.test.context.TestPropertySource;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestPropertySource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">properties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;logging.level.org.springframework.data.elasticsearch.core=TRACE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logging.level.org.springframework.data.elasticsearch.client=trace&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logging.level.org.elasticsearch.client=TRACE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logging.level.org.apache.http=TRACE&quot;</span><span style="color:#24292E;">})</span><span style="color:#6A737D;">//新增一些配置， 开启spring data elastic search的http的调用过程，我们可以查看一下日志</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElasticSearchRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TopicRepository topicRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">BeforeEach</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">//        topicRepository.deleteAll(); //可以直接删除所有索引</span></span>
<span class="line"><span style="color:#24292E;">        Topic topic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Topic.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jacktest&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">authors</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(Author.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jk1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        topicRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(topic);</span><span style="color:#6A737D;">//集成测试保存索引</span></span>
<span class="line"><span style="color:#24292E;">        Topic topic1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Topic.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">14L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jacktest&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">authors</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(Author.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jk1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        topicRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(topic1);</span></span>
<span class="line"><span style="color:#24292E;">        Topic topic2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Topic.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">15L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jacktest&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">authors</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(Author.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jk1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        topicRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(topic2);</span><span style="color:#6A737D;">//保存索引</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testTopic</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Iterable&lt;</span><span style="color:#D73A49;">Topic</span><span style="color:#24292E;">&gt; topics </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> topicRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        topics.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(topic1 </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(topic1);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Topic</span><span style="color:#24292E;">&gt; topicList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> topicRepository.</span><span style="color:#6F42C1;">findByTitle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jacktest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        topicList.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t);</span><span style="color:#6A737D;">//获得索引的查询结果</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Topic</span><span style="color:#24292E;">&gt; topicList2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> topicRepository.</span><span style="color:#6F42C1;">findByTitle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        topicList2.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t);</span><span style="color:#6A737D;">//我们也可以用上一讲介绍的断言测试</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着我们看一下测试用例的调用日志，从日志可以看出，调用的时候发生的 Http 的 PUT 请求，是用来创建和修改一个索引的文档的。请看下面的图片。</p>`,22),F=s("p",null,"从中也可以看得出来，转化成 es 的 api 查询语法之后，发送的 post 请求又变成下图显示的样子。",-1),d=s("p",null,"日志比较长，你有兴趣的话，可以按照我的 DEMO 和开启日志的方法，自己去分析体会一下。",-1),g=s("p",null,"下面来说说 Spring Data ElasticSearch 中关键的几个类。",-1),u=s("h3",{id:"spring-data-elasticsearch-关键的类",tabindex:"-1"},[l("Spring Data ElasticSearch 关键的类 "),s("a",{class:"header-anchor",href:"#spring-data-elasticsearch-关键的类","aria-label":'Permalink to "Spring Data ElasticSearch 关键的类"'},"​")],-1),m=s("p",null,"通过上面的案例我们可以知道，Spring Data ElasticSearch 的用法其实非常简单，并且我们通过日志也可以看到，底层实现是基于 http 请求，来操作 Elasticsearch 的 server 中的 api 进行的。",-1),A=s("p",null,"那么我们简单看一下这一框架还给我们提供了哪些 ElasticSearch 的操作方法。和分析 Spring Data JPA 一样，看一下 Repository 的所有子类，如下图所示。",-1),h=s("p",null,"从图中可以看得出来，ElasticsearchRepository 是默认的 Repository 的实现类，我们如果继续往下面看源码的话，就可以看到里面进行了很多 ES 的 Http Client 操作。",-1),D=s("p",null,"同时再看一下 Structure 视图，如下所示。",-1),C=s("p",null,"从这张图可以知道，ElasticsearchRepository 默认给我们提供了 search 和 index 相关的一些操作方法，并且 Spring Data Common 里面的一些公共方法同样适用，这和我们刚才演示的 Defining Method Query 的 JPA 语法同样适用，可以大大减轻操作 ES 的难度，提高了开发的效率，甚至像我们没有演示到的分页、排序、limit 等同样适用。",-1),b=s("p",null,'所以你现在学到了一个"套路"：和 Spring Data JPA 用相同的思路，就可以很快掌握 Spring Data Elasticsearch 的基本用法，及其大概的实现思路。',-1),B=s("p",null,"那么很多时候同一个工程里面既有 JPA 又有 Elasticsearch，又该怎么写呢？",-1),k=s("h3",{id:"esrepository-和-jparepository-同时存在",tabindex:"-1"},[l("ESRepository 和 JPARepository 同时存在 "),s("a",{class:"header-anchor",href:"#esrepository-和-jparepository-同时存在","aria-label":'Permalink to "ESRepository 和 JPARepository 同时存在"'},"​")],-1),q=s("p",null,"这个时候应该怎么区分不同的 Repository 用什么呢？",-1),v=s("p",null,"我们假设刚才测试的样例里面，同时有关于 User 信息的 DB 操作，那么看一下我们的项目应该怎么写。",-1),f=s("p",null,[s("strong",null,"第一步：我们将对 Elasticsearch 的实体、Repository 和对 JPA 操作的实体、Repository 放到不同的文件里面"),l("，如下图所示。")],-1),_=p(`<p><strong>第二步：新增 JpaConfiguration，用来指定 Jpa 相关的 Repository 目录</strong>，完整代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo.jpa;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span></span>
<span class="line"><span style="color:#6A737D;">//利用@EnableJpaRepositories指定JPA的目录是&quot;com.example.data.es.demo.jpa&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.example.data.es.demo.jpa&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo.jpa;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span></span>
<span class="line"><span style="color:#6A737D;">//利用@EnableJpaRepositories指定JPA的目录是&quot;com.example.data.es.demo.jpa&quot;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.example.data.es.demo.jpa&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第三步：新增 User 实体，用来操作用户基本信息</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第四步：新增 UserRepository，用来进行 DB 操作</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo.jpa;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#6A737D;">//对User的DB操作，我们直接继承JpaRepository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo.jpa;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span style="color:#6A737D;">//对User的DB操作，我们直接继承JpaRepository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第五步：写测试用例进行测试</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.data.es.demo;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.data.es.demo.jpa.User;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.data.es.demo.jpa.UserRepository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#6A737D;">//利用@DataJpaTest完成集成测试</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testJpa</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">//往数据库里面保存一条数据，并且打印一下</span></span>
<span class="line"><span style="color:#E1E4E8;">                userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jkdb&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack@email.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        users.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(user </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.data.es.demo;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.data.es.demo.jpa.User;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.data.es.demo.jpa.UserRepository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#6A737D;">//利用@DataJpaTest完成集成测试</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testJpa</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">//往数据库里面保存一条数据，并且打印一下</span></span>
<span class="line"><span style="color:#24292E;">                userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jkdb&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack@email.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        users.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(user </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个时候，我们的测试用例就变成了如下图所示的结构。</p>`,9),T=s("p",null,"那么现在我们知道了，JPA 和 Elasticsearch 同时存在，和启动项目是一样的效果，这里就不写 Controller 了。",-1),j=s("p",null,"我们再整体运行一下这三个测试用例，进行完整的测试，就可以看到如下结果。",-1),S=s("p",null,"1.ElasticSearchRepositoryTest 执行的时候，通过日志可以看到这是对 ES 进行的操作，如下图所示。",-1),R=s("p",null,"2.UserRepositoryTest 执行的时候，通过日志我们可以看出来这是对 DB 进行的操作，所以谁也不影响谁，如下图所示。",-1),x=p('<p>通过上面的例子我们可以知道，Spring Data 对 JPA 等 SQL 型的传统数据库的支持是非常好的，同时对 NoSQL 型的非关系类数据库的支持也比较友好，大大降低了操作不同数据源的难度，可以有效提升我们的开发效率。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲内容到这里就结束了，我通过&quot;入门型&quot;的 Spring Data Elasticsearch 样例展示，让你体会了 Spring Data 对数据操作的抽象封装的强大之处。</p><p>如果你研究好了这部分内容，其实 Spring Data 中的其他系列也是可以通用的。这里我只是期望起到抛砖引玉的效果，希望你能更好地掌握 Spring Data 的精髓，并且能深入理解 JPA。</p><p>至此，我们的专栏也将告一段落，不知道这 32 讲的内容对你是否有帮助，我希望你可以回过头好好回顾，更好地掌握 Spring Data JPA。</p><p>如果对此有不懂的地方，也欢迎你在评论区留言，我们一起探讨，一起在这条路上不断精进。再见！</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>',7);function w(P,L,J,U,I,N){const a=e("Image");return t(),c("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/04/56/CgpVE1_tdLyAY0UfAAH31rOGV0o472.png"}),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/04/55/Cip5yF_tdMaAbP03AAD7ix9soGU430.png"}),i,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/04/56/CgpVE1_tdNiAXq0WAAPx9WYUcvE585.png"}),F,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/04/55/Cip5yF_tdN6AQ3l9AAPPn8brHa8263.png"}),d,g,u,m,A,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/04/55/Cip5yF_tdOWAN1p8AAKW4zuYBgc483.png"}),h,D,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image2/M01/04/57/CgpVE1_tdOyAa_qxAARM3eWQpnQ793.png"}),C,b,B,k,q,v,f,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image2/M01/04/55/Cip5yF_tdPOAVRMHAACTufgK21A436.png"}),_,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image2/M01/04/57/CgpVE1_tdQKAAa7zAABNF77hZ_A879.png"}),T,j,S,n(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/8C/74/Ciqc1F_tdRWABN3HAASErifQeiw553.png"}),R,n(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/8C/74/Ciqc1F_tdRyAe_oeAAMw4yV6H4o471.png"}),x])}const O=o(r,[["render",w]]);export{V as __pageData,O as default};
