import{_,j as s,o as r,g as i,k as n,h as e,Q as a,s as t}from"./chunks/framework.4e7d56ce.js";const H=JSON.parse('{"title":"25服务安全：如何理解微服务访问的安全需求和实现方案？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4770) 25  服务安全：如何理解微服务访问的安全需求和实现方案？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4770) 25  服务安全：如何理解微服务访问的安全需求和实现方案？.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4770) 25  服务安全：如何理解微服务访问的安全需求和实现方案？.md"},l=a("",6),h=t("p",null,[e('我们首先需要明确，所谓认证，解决的是"'),t("strong",null,"你是谁"),e('"这一个问题，也就是说对于每一次访问请求，系统都能判断出访问者是否具有合法的身份标识。')],-1),c=t("p",null,'一旦明确 "你是谁"之后，下一步就可以判断"你能做什么"，这个步骤就是授权。通用的授权模型通常都是基于权限管理体系的，也就是说是对资源、权限、角色和用户的一种组合处理。',-1),u=t("p",null,"如果我们将认证和授权结合起来，就构成了对系统中资源进行安全性管理的最常见解决方案，即先判断资源访问者的有效身份，然后再来确定其是否有对这个资源进行访问的合法权限，如下图所示：",-1),d=t("p",null,"基于认证和授权机制的资源访问安全性示意图",-1),T=t("p",null,"上图代表的是一种通用方案，而不同的应用场景以及技术体系下可以衍生出很多具体的实现策略。微服务架构中的认证和授权模型与上图中的类似，但在具体设计和实现过程中也有其特殊性。",-1),A=t("h4",{id:"微服务架构中的认证与授权",tabindex:"-1"},[e("微服务架构中的认证与授权 "),t("a",{class:"header-anchor",href:"#微服务架构中的认证与授权","aria-label":'Permalink to "微服务架构中的认证与授权"'},"​")],-1),g=t("p",null,"在微服务架构下，我们设想一下服务访问过程中需要考虑的安全性问题。因为一个微服务系统中服务之间可以存在相互的调用关系，对于每一个服务而言，我们一方面需要考虑来自客户端的请求，同时也要考虑可能来自另一个服务的请求。因此，面临着从客户端到服务、从服务到服务的多种认证和授权场景。",-1),k=t("p",null,[e("针对上述场景下的认证环节，比较容易想到的一种实现方案是"),t("strong",null,"分布式 Session 机制"),e("。Session 本质上是一种服务器端技术，即服务器对请求进行认证，并将已经通过的认证信息的用户信息存储在一个共享存储空间中。这样，每次对于微服务的请求都可以带着 Session ID，服务器根据共享存储空间中的数据检查用户是否认证过。这种方案显然需要消耗服务器端的存储空间，也容易受到攻击。")],-1),S=t("p",null,"与服务器端保存认证信息相对应的，另一种思路是将认证信息存储在客户端。我们可以在客户端生成认证信息并保存在本地。然后，在每次请求中，客户端将这个认证信息通过HTTP请求传递到服务器端，服务器端再基于这个认证信息执行用户身份验证。显然，这种机制是无状态的，而且有利于减轻服务端存储压力。在这种方案下，我们通常把认证信息称为一个 Token（令牌），业界也存在诸如 JWT（JSON Web Tokens）这样的实现方案，课程后面会具体讲到。",-1),m=t("p",null,"讲完对认证信息的处理方式，我们来看微服务架构中的授权。对于某一个特定的微服务而言，我们面临的第一个问题是如何判断一个 HTTP 请求具备访问自己的权限呢？更进一步，就算这个请求具备访问该微服务的权限，但并不意味着它能够访问该服务中的所有功能。对于某些核心功能，需要具备较高的权限才能访问，而有些则不需要。这就是我们需要解决的第二个问题，也就是说，如何对服务访问的权限进行精细化管理？如下图所示：",-1),O=t("p",null,"微服务授权效果示意图",-1),C=t("p",null,"在上图中，我们假设该请求具备服务 A 的权限，但不具备访问服务 A 中功能 1 的权限。想要达到这种效果，一般的做法是引入角色体系。我们对不同的用户设置不同等级的角色，角色等级不同对应的访问权限也不同。而每一个请求都可以绑定到某一个角色，也就具备了访问权限。",-1),J=t("p",null,"接下来，我们把认证和授权结合起来，梳理出服务访问场景下的安全性实现方案，如下所示：",-1),W=a("",8),b=a("",12);function P(q,f,V,x,D,E){const o=s("Image");return r(),i("div",null,[l,n(o,{alt:"Lark20201215-153117.png",src:"https://s0.lgstatic.com/i/image/M00/89/7A/CgqCHl_YZyWAbDX6AAV1elL6Gts541.png"}),e(),h,c,u,n(o,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/89/6D/Ciqc1F_YZnaAHkq8AAAtOzs4KsM610.png"}),e(),d,T,A,g,k,S,m,n(o,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/89/79/CgqCHl_YZoeAKoQkAAAxAJxql5w313.png"}),e(),O,C,J,n(o,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/01/4A/CgpVE1_YZpCAVQXGAABA1q4T9ok354.png"}),e(),W,n(o,{alt:"Lark20201215-153100.png",src:"https://s0.lgstatic.com/i/image2/M01/01/4A/CgpVE1_YZp-AMWTWAAH1ElZc_cc663.png"}),e(),b])}const I=_(p,[["render",P]]);export{H as __pageData,I as default};
