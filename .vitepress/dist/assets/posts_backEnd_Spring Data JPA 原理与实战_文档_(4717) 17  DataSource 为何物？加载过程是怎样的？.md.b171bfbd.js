import{_ as s,o as a,g as n,Q as p}from"./chunks/framework.f949202b.js";const m=JSON.parse('{"title":"数据源是什么？ ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4717) 17  DataSource 为何物？加载过程是怎样的？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4717) 17  DataSource 为何物？加载过程是怎样的？.md","lastUpdated":null}'),l={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4717) 17  DataSource 为何物？加载过程是怎样的？.md"},o=p(`<p>最近几年 DataSource 越来越成熟，但当我们做开发的时候对 DataSource 的关心却越来越少，这是因为大多数情况都是利用 application.properties进行简单的数据源配置，项目就可以正常运行了。但是当我们想要解决一些原理性问题的时候，就需要用到 DataSource、连接池等基础知识了。</p><p>那么这一讲我将带你揭开 DataSource 的面纱，一起来了解它是什么、如何使用，以及最佳实践是什么呢？</p><h3 id="数据源是什么" tabindex="-1">数据源是什么？ <a class="header-anchor" href="#数据源是什么" aria-label="Permalink to &quot;数据源是什么？&quot;">​</a></h3><p>当我们用第三方工具去连接数据库（Mysql，Oracle 等）的时候，一般都会让我们选择数据源，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/2D/CgqCHl-o5UKAeKojAAMZoym4vVw887.png" alt="Drawing 0.png"></p><p>我们以 MySQL 为例，当选择 MySQL 的时候就会弹出如下图显示的界面：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/22/Ciqc1F-o5UuACyC4AAEVdHsmM98446.png" alt="Drawing 1.png"></p><p>其中，我们在选择了 Driver（驱动）和 Host、UserName、Password 等之后，就可以创建一个 Connection，然后连接到数据库里面了。</p><p>同样的道理，在 Java 里面我们也需要用到 DataSource 去连接数据库，而 Java 定义了一套 JDBC 的协议标准，其中有一个 javax.sql.DataSource 接口类，通过实现此类就可以进行数据库连接，我们通过源码来分析一下。</p><h4 id="datasource-源码分析" tabindex="-1">DataSource 源码分析 <a class="header-anchor" href="#datasource-源码分析" aria-label="Permalink to &quot;DataSource 源码分析&quot;">​</a></h4><p>DataSource 接口里面主要的代码如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSource</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommonDataSource</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Wrapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSource</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommonDataSource</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Wrapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">password</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们通过源码可以很清楚地看到，DataSource 的主要目的就是获得数据库连接，就像我们前面用工具连接数据库一样，只不过工具是通过界面实现的，而 DataSource 是通过代码实现的。</p><p>那么在程序里面如何实现呢？也有很多第三方的实现方式，常见的有C3P0、BBCP、Proxool、Druid、Hikari，而目前 Spring Boot 里面是采用 Hikari 作为默认数据源。Hikari 的优点是：开源，社区活跃，性能高，监控完整。我们通过工具看一下项目里面DataSource 的实现类有哪些，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/2D/CgqCHl-o5VuAHBXrAAF5pvcL8BA769.png" alt="Drawing 2.png"></p><p>其中，当我采用默认数据源的时候，可以看到数据源的实现类有：h2 里面的 JdbcDataSource、MySQL 连接里面的 MysqlDataSource，以及今天要重点介绍的 HikariDataSource（默认数据源，也是 Spring 社区推荐的最佳数据源）。</p><p>我们直接打开 HikariDataSource 的源码看一下，它的关键代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HikariDataSource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HikariConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSource</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Closeable</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> HikariPool pool;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HikariDataSource</span><span style="color:#E1E4E8;">(HikariConfig </span><span style="color:#FFAB70;">configuration</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">     configuration.</span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     configuration.</span><span style="color:#B392F0;">copyStateTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">     LOGGER.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{} - Starting...&quot;</span><span style="color:#E1E4E8;">, configuration.</span><span style="color:#B392F0;">getPoolName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     pool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fastPathPool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HikariPool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     LOGGER.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{} - Start completed.&quot;</span><span style="color:#E1E4E8;">, configuration.</span><span style="color:#B392F0;">getPoolName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">seal</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//这个是最主要的实现逻辑，即通过连接池获得连接的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException{</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isClosed</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;HikariDataSource &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; has been closed.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fastPathPool </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fastPathPool.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java</span></span>
<span class="line"><span style="color:#E1E4E8;">     HikariPool result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pool;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pool;</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              LOGGER.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{} - Starting...&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getPoolName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                 pool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HikariPool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">seal</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (PoolInitializationException </span><span style="color:#FFAB70;">pie</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pie.</span><span style="color:#B392F0;">getCause</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SQLException) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> (SQLException) pie.</span><span style="color:#B392F0;">getCause</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                 }</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> pie;</span></span>
<span class="line"><span style="color:#E1E4E8;">                 }</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">              LOGGER.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{} - Start completed.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getPoolName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HikariDataSource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HikariConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSource</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Closeable</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> HikariPool pool;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HikariDataSource</span><span style="color:#24292E;">(HikariConfig </span><span style="color:#E36209;">configuration</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">     configuration.</span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     configuration.</span><span style="color:#6F42C1;">copyStateTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">     LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{} - Starting...&quot;</span><span style="color:#24292E;">, configuration.</span><span style="color:#6F42C1;">getPoolName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fastPathPool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HikariPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{} - Start completed.&quot;</span><span style="color:#24292E;">, configuration.</span><span style="color:#6F42C1;">getPoolName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">seal</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//这个是最主要的实现逻辑，即通过连接池获得连接的逻辑</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException{</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isClosed</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HikariDataSource &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; has been closed.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fastPathPool </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fastPathPool.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java</span></span>
<span class="line"><span style="color:#24292E;">     HikariPool result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool;</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{} - Starting...&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">getPoolName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                 pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HikariPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">seal</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (PoolInitializationException </span><span style="color:#E36209;">pie</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pie.</span><span style="color:#6F42C1;">getCause</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SQLException) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> (SQLException) pie.</span><span style="color:#6F42C1;">getCause</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                 }</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> pie;</span></span>
<span class="line"><span style="color:#24292E;">                 }</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">              LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{} - Start completed.&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">getPoolName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>从上面的源码可以看到关键的两点问题：</p><ol><li><p>数据源的关键配置属性有哪些？</p></li><li><p>连接怎么获得？连接池的作用如何？</p></li></ol><p>下面我们分别详解一下。</p><p>第一个问题，HikariConfig 的配置里面描述了 Hikari 数据源主要的配置属性，我们打开来看一下，如图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/2D/CgqCHl-o5W6AYziKAALhn9RPD2o391.png" alt="Drawing 3.png"></p><p>通过上面的源码我们可以看到数据源的关键配置信息：用户名、密码、连接池的配置、jdbcUrl、驱动的名字，等等，这些字段你可以参考课程开始时我介绍的工具，细心观察的话都可以找到对应关系，也就是创建数据源需要的一些配置项。</p><p>上面提到的第 2 个问题，我们通过 getConnection 方法里面的代码可以看到 HikariPool 的用法，也就是说，我们是通过连接池来获得连接的，这个连接用过之后没有断开，而是重新放回到连接池里面（<strong>这个地方你一定要谨记，它也说明了 connection 是可以共享的</strong>）。</p><p>而连接池的用途你应该也知道，创建连接是非常昂贵的，所以需要用到连接池技术、共享现有的连接，以增加代码的执行效率。</p><p>那么这个时候有一个问题是需要我们搞清楚并且牢记的，就是数据源和 driver（驱动）、数据库连接、连接池是什么关系？</p><h4 id="数据源与驱动与连接和连接池的关系" tabindex="-1">数据源与驱动与连接和连接池的关系 <a class="header-anchor" href="#数据源与驱动与连接和连接池的关系" aria-label="Permalink to &quot;数据源与驱动与连接和连接池的关系&quot;">​</a></h4><p>我分为下述四点来说，方便你理解。</p><ol><li><p>数据源的作用是给应用程序提供不同 DB 的连接 connection；</p></li><li><p>连接是通过连接池获取的，这主要是出于连接性能的考虑；</p></li><li><p>创建好连接之后，通过数据库的驱动来进行数据库操作；</p></li><li><p>而不同的 DB（MySQL / h2 / oracle），都有自己的驱动类和相应的驱动 Jar 包。</p></li></ol><p>我们用一个图来表示一下：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/22/Ciqc1F-o5XmADAK4AAC16V3GEqM205.png" alt="Drawing 4.png"></p><p>而我们常说的 MySQL 驱动，其实就是 com.mysql.cj.jdbc.Driver，而这个类主要存在于 mysql-connection-java:8.0* 的 jar 里面，也就是我们经常说的不同的数据库所代表的驱动 jar 包。</p><p>这里我们用的是 spring boot 2.3.3 版本引用的 mysql-connection-java 8.0 版本驱动 jar 包，不同的数据库引用的 jar 包是不一样的。例如，H2 数据源中，我们用的驱动类是 org.h2.Driver，其包含在 com.h2database:h2:1.4.*jar 包里面。</p><p>接下来我们通过源码分析 Spring 里面的加载原理，来看下 Hikari 都有哪些配置项。</p><h3 id="数据源的加载原理和过程是什么样的" tabindex="-1">数据源的加载原理和过程是什么样的？ <a class="header-anchor" href="#数据源的加载原理和过程是什么样的" aria-label="Permalink to &quot;数据源的加载原理和过程是什么样的？&quot;">​</a></h3><p>我们通过 spring.factories 文件可以看到 JDBC 数据源相关的自动加载的类 DataSourceAutoConfiguration，那么我们就从这个类开始分析。</p><h4 id="datasourceautoconfiguration-数据源的加载过程分析" tabindex="-1">DataSourceAutoConfiguration 数据源的加载过程分析 <a class="header-anchor" href="#datasourceautoconfiguration-数据源的加载过程分析" aria-label="Permalink to &quot;DataSourceAutoConfiguration 数据源的加载过程分析&quot;">​</a></h4><p>DataSourceAutoConfiguration 的关键源码如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//将spring.datasource.**的配置放到DataSourceProperties对象里面；</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(DataSourceProperties.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">({ DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class })</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceAutoConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//默认集成的数据源，一般指的是H2，方便我们快速启动和上手，一般不在生产环境应用；</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Conditional</span><span style="color:#E1E4E8;">(EmbeddedDatabaseCondition.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">({ DataSource.class, XADataSource.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(EmbeddedDataSourceConfiguration.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EmbeddedDatabaseConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//加载不同的数据源的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Conditional</span><span style="color:#E1E4E8;">(PooledDataSourceCondition.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">({ DataSource.class, XADataSource.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">         DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">         DataSourceJmxConfiguration.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PooledDataSourceConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   ....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//将spring.datasource.**的配置放到DataSourceProperties对象里面；</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(DataSourceProperties.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">({ DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceAutoConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//默认集成的数据源，一般指的是H2，方便我们快速启动和上手，一般不在生产环境应用；</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Conditional</span><span style="color:#24292E;">(EmbeddedDatabaseCondition.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">({ DataSource.class, XADataSource.class })</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(EmbeddedDataSourceConfiguration.class)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EmbeddedDatabaseConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//加载不同的数据源的配置</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Conditional</span><span style="color:#24292E;">(PooledDataSourceCondition.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">({ DataSource.class, XADataSource.class })</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span>
<span class="line"><span style="color:#24292E;">         DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span>
<span class="line"><span style="color:#24292E;">         DataSourceJmxConfiguration.class })</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PooledDataSourceConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   ....</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>从源码中我们可以得到以下三点最关键的信息：</p><p>第一，通过 @EnableConfigurationProperties(DataSourceProperties.class) 可以看得出来 spring.datasource 的配置项有哪些，那么我们打开 DataSourceProperties 的源码看一下，关键代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceProperties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanClassLoaderAware</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">InitializingBean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ClassLoader classLoader;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> generateUniqueName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DataSource</span><span style="color:#E1E4E8;">&gt; type;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String driverClassName;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String url;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String username;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String password;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//计算确定drivername的值是什么</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">determineDriverClassName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.driverClassName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Assert.</span><span style="color:#B392F0;">state</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">driverClassIsLoadable</span><span style="color:#E1E4E8;">(), () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Cannot load driver class: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.driverClassName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.driverClassName;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   String driverClassName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//此段逻辑是，当我们没有配置自己的drivername的时候，它会根据我们配置的DB的url自动计算出来drivername的值是什么，所以就会发现我们现在很多datasource里面的配置都省去了driver-name的配置，这是Spring Boot的功劳。</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.url)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      driverClassName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DatabaseDriver.</span><span style="color:#B392F0;">fromJdbcUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.url).</span><span style="color:#B392F0;">getDriverClassName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(driverClassName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      driverClassName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.embeddedDatabaseConnection.</span><span style="color:#B392F0;">getDriverClassName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(driverClassName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceBeanCreationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to determine a suitable driver class&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.embeddedDatabaseConnection);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> driverClassName;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceProperties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanClassLoaderAware</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">InitializingBean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ClassLoader classLoader;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> generateUniqueName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DataSource</span><span style="color:#24292E;">&gt; type;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String driverClassName;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String url;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String username;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String password;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//计算确定drivername的值是什么</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">determineDriverClassName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.driverClassName)) {</span></span>
<span class="line"><span style="color:#24292E;">      Assert.</span><span style="color:#6F42C1;">state</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">driverClassIsLoadable</span><span style="color:#24292E;">(), () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Cannot load driver class: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.driverClassName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.driverClassName;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   String driverClassName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//此段逻辑是，当我们没有配置自己的drivername的时候，它会根据我们配置的DB的url自动计算出来drivername的值是什么，所以就会发现我们现在很多datasource里面的配置都省去了driver-name的配置，这是Spring Boot的功劳。</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.url)) {</span></span>
<span class="line"><span style="color:#24292E;">      driverClassName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DatabaseDriver.</span><span style="color:#6F42C1;">fromJdbcUrl</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.url).</span><span style="color:#6F42C1;">getDriverClassName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(driverClassName)) {</span></span>
<span class="line"><span style="color:#24292E;">      driverClassName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.embeddedDatabaseConnection.</span><span style="color:#6F42C1;">getDriverClassName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(driverClassName)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceBeanCreationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to determine a suitable driver class&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.embeddedDatabaseConnection);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> driverClassName;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>我们通过 DatabaseDriver 的源码可以看到 MySQL 的默认驱动 Spring Boot 是采用 com.mysql.cj.jdbc.Driver 来实现的。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/22/Ciqc1F-o5Y6AJJGgAADB_oP_Er8606.png" alt="Drawing 6.png"></p><p>同时，@ConfigurationProperties(prefix = &quot;spring.datasource&quot;) 也告诉我们，application.properties 里面的 datasource 相关的公共配置可以以 spring.datasource 为开头，这样当启动的时候，DataSourceProperties 就会将 datasource 的一切配置自动加载进来。正如我们前面在 application.properties 里面的配置的一样，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/2E/CgqCHl-o5ZWAC7oxAAIk-0v0OKA580.png" alt="Drawing 7.png"></p><p>这里有 url、username、password、driver-class-name 等关键配置，不同数据源的公共配置也不多。</p><p>第二，我们通过下面这一段代码也可以看得出来不同的数据源的配置是什么样的。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">         DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">         DataSourceJmxConfiguration.class })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span>
<span class="line"><span style="color:#24292E;">         DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span>
<span class="line"><span style="color:#24292E;">         DataSourceJmxConfiguration.class })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>为了再进一步了解，我们打开 DataSourceConfiguration 的源码，如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">SuppressWarnings</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unchecked&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(DataSourceProperties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">, Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DataSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) properties.</span><span style="color:#B392F0;">initializeDataSourceBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(type).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * Tomcat连接池数据源的配置，前提条件需要引入tomcat-jdbc*.jar</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">(org.apache.tomcat.jdbc.pool.DataSource.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(DataSource.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">havingValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org.apache.tomcat.jdbc.pool.DataSource&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tomcat</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.tomcat&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      org.apache.tomcat.jdbc.pool.DataSource </span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(DataSourceProperties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         org.apache.tomcat.jdbc.pool.DataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(properties,</span></span>
<span class="line"><span style="color:#E1E4E8;">               org.apache.tomcat.jdbc.pool.DataSource.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">         DatabaseDriver databaseDriver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DatabaseDriver.</span><span style="color:#B392F0;">fromJdbcUrl</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">determineUrl</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">         String validationQuery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> databaseDriver.</span><span style="color:#B392F0;">getValidationQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (validationQuery </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            dataSource.</span><span style="color:#B392F0;">setTestOnBorrow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            dataSource.</span><span style="color:#B392F0;">setValidationQuery</span><span style="color:#E1E4E8;">(validationQuery);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * Hikari数据源的配置，默认Spring Boot加载的是Hikari数据源</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">(HikariDataSource.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(DataSource.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">havingValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Hikari</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.hikari&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      HikariDataSource </span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(DataSourceProperties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         HikariDataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(properties, HikariDataSource.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            dataSource.</span><span style="color:#B392F0;">setPoolName</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * DBCP数据源的配置，按照Spring Boot的语法，我们必须引入CommonsDbcp**.jar依赖才有用</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">(org.apache.commons.dbcp2.BasicDataSource.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(DataSource.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">havingValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org.apache.commons.dbcp2.BasicDataSource&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dbcp2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.dbcp2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      org.apache.commons.dbcp2.BasicDataSource </span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(DataSourceProperties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(properties, org.apache.commons.dbcp2.BasicDataSource.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(DataSourceProperties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">, Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DataSource</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">type</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) properties.</span><span style="color:#6F42C1;">initializeDataSourceBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(type).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * Tomcat连接池数据源的配置，前提条件需要引入tomcat-jdbc*.jar</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">(org.apache.tomcat.jdbc.pool.DataSource.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(DataSource.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.type&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">havingValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org.apache.tomcat.jdbc.pool.DataSource&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tomcat</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.tomcat&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      org.apache.tomcat.jdbc.pool.DataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(DataSourceProperties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         org.apache.tomcat.jdbc.pool.DataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(properties,</span></span>
<span class="line"><span style="color:#24292E;">               org.apache.tomcat.jdbc.pool.DataSource.class);</span></span>
<span class="line"><span style="color:#24292E;">         DatabaseDriver databaseDriver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DatabaseDriver.</span><span style="color:#6F42C1;">fromJdbcUrl</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">determineUrl</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">         String validationQuery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> databaseDriver.</span><span style="color:#6F42C1;">getValidationQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (validationQuery </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            dataSource.</span><span style="color:#6F42C1;">setTestOnBorrow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            dataSource.</span><span style="color:#6F42C1;">setValidationQuery</span><span style="color:#24292E;">(validationQuery);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * Hikari数据源的配置，默认Spring Boot加载的是Hikari数据源</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">(HikariDataSource.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(DataSource.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.type&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">havingValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hikari</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.hikari&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      HikariDataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(DataSourceProperties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         HikariDataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(properties, HikariDataSource.class);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            dataSource.</span><span style="color:#6F42C1;">setPoolName</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * DBCP数据源的配置，按照Spring Boot的语法，我们必须引入CommonsDbcp**.jar依赖才有用</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">(org.apache.commons.dbcp2.BasicDataSource.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(DataSource.class)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.type&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">havingValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org.apache.commons.dbcp2.BasicDataSource&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dbcp2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.dbcp2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      org.apache.commons.dbcp2.BasicDataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(DataSourceProperties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(properties, org.apache.commons.dbcp2.BasicDataSource.class);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><p>我们通过上述源码可以看到最常见的三种数据源的配置：</p><ul><li><p>HikariDataSource</p></li><li><p>tomcat的JDBC</p></li><li><p>apache的dbcp</p></li></ul><p>而最终用哪个，就看你引用了哪个 datasoure 的 jar 包。不过 Spring Boot 2.0 之后就推荐使用 Hikari 数据源了，你了解一下就好。</p><p>第三，我们通过 @ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;) HikariDataSource dataSource(DataSourceProperties properties) 可以知道，application.properties 里面 spring.datasource.hikari 开头的配置会被映射到 HikariDataSource 对象中，而开篇我们就提到了，是 HikariDataSource 继承了 HikariConfig。</p><p>所以顺理成章地，我们就可以知道 Hikari 数据源的配置有哪些了，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/2E/CgqCHl-o5aqAP6m_AAHuix5hURo100.png" alt="Drawing 8.png"></p><p>Hikari 的配置比较多，你实际工作中想要了解详细配置，可以看一下官方文档：<a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noreferrer">https://github.com/brettwooldridge/HikariCP</a>，这里我只说一下我们最需要关心的配置，有如下几个：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## 最小空闲链接数量</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.minimum-idle=5</span></span>
<span class="line"><span style="color:#E1E4E8;">## 空闲链接存活最大时间，默认600000（10分钟）</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.idle-timeout=180000</span></span>
<span class="line"><span style="color:#E1E4E8;">## 链接池最大链接数，默认是10</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.maximum-pool-size=10</span></span>
<span class="line"><span style="color:#E1E4E8;">## 此属性控制从池返回的链接的默认自动提交行为,默认值：true</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.auto-commit=true</span></span>
<span class="line"><span style="color:#E1E4E8;">## 数据源链接池的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.pool-name=MyHikariCP</span></span>
<span class="line"><span style="color:#E1E4E8;">## 此属性控制池中链接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.max-lifetime=1800000</span></span>
<span class="line"><span style="color:#E1E4E8;">## 数据库链接超时时间,默认30秒，即30000</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.connection-timeout=30000</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.connection-test-query=SELECT 1mysql</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## 最小空闲链接数量</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.minimum-idle=5</span></span>
<span class="line"><span style="color:#24292E;">## 空闲链接存活最大时间，默认600000（10分钟）</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.idle-timeout=180000</span></span>
<span class="line"><span style="color:#24292E;">## 链接池最大链接数，默认是10</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.maximum-pool-size=10</span></span>
<span class="line"><span style="color:#24292E;">## 此属性控制从池返回的链接的默认自动提交行为,默认值：true</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.auto-commit=true</span></span>
<span class="line"><span style="color:#24292E;">## 数据源链接池的名称</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.pool-name=MyHikariCP</span></span>
<span class="line"><span style="color:#24292E;">## 此属性控制池中链接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.max-lifetime=1800000</span></span>
<span class="line"><span style="color:#24292E;">## 数据库链接超时时间,默认30秒，即30000</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.connection-timeout=30000</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.connection-test-query=SELECT 1mysql</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这里我介绍的主要是针对连接池的配置，研究过线程池和连接池原理的同学都知道，连接池我们不能配置得太大，因为连接池太大的话，会有额外的 CPU 开销，处理连接池的线程切换反而会增加程序的执行时间，减低性能；相应的，连接池也不能配置太小，太小的话可能会增加请求的等待时间，也会降低业务处理的吞吐量。</p><p>下面我给你一个推荐一个常见的配置项。</p><h4 id="hikari-数据源下的-mysql-配置最佳实践" tabindex="-1">Hikari 数据源下的 MySQL 配置最佳实践 <a class="header-anchor" href="#hikari-数据源下的-mysql-配置最佳实践" aria-label="Permalink to &quot;Hikari 数据源下的 MySQL 配置最佳实践&quot;">​</a></h4><p>直接通过代码来看看。</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">##数据源的配置：logger</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">Slf4JLogger</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">profileSQL</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">true是用来debug显示sql的执行日志的</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/test?logger=Slf4JLogger&amp;profileSQL=true</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.password</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">E6kroWaR9F</span></span>
<span class="line"><span style="color:#E1E4E8;">##采用默认的</span></span>
<span class="line"><span style="color:#E1E4E8;">#spring.datasource.hikari.connectionTimeout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">30000</span></span>
<span class="line"><span style="color:#E1E4E8;">#spring.datasource.hikari.idleTimeout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">300000</span></span>
<span class="line"><span style="color:#E1E4E8;">##指定一个链接池的名字，方便我们分析线程问题</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.pool</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jpa</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hikari</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">pool</span></span>
<span class="line"><span style="color:#E1E4E8;">##最长生命周期15分钟够了</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.maxLifetime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">900000</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.maximumPoolSize</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">##最大和最小相对应减少创建线程池的消耗；</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.minimumIdle</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.connectionTestQuery</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">select </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> from dual</span></span>
<span class="line"><span style="color:#E1E4E8;">##当释放连接到连接池之后，采用默认的自动提交事务</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.autoCommit</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">##用来显示链接测trace日志</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.com.zaxxer.hikari.</span><span style="color:#79B8FF;">HikariConfig</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">DEBUG</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.com.zaxxer.hikari</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">TRACE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">##数据源的配置：logger</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">Slf4JLogger</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">profileSQL</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">true是用来debug显示sql的执行日志的</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/test?logger=Slf4JLogger&amp;profileSQL=true</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.password</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">E6kroWaR9F</span></span>
<span class="line"><span style="color:#24292E;">##采用默认的</span></span>
<span class="line"><span style="color:#24292E;">#spring.datasource.hikari.connectionTimeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">30000</span></span>
<span class="line"><span style="color:#24292E;">#spring.datasource.hikari.idleTimeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">300000</span></span>
<span class="line"><span style="color:#24292E;">##指定一个链接池的名字，方便我们分析线程问题</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.pool</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jpa</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hikari</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">pool</span></span>
<span class="line"><span style="color:#24292E;">##最长生命周期15分钟够了</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.maxLifetime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">900000</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.maximumPoolSize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">##最大和最小相对应减少创建线程池的消耗；</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.minimumIdle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.connectionTestQuery</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">select </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> from dual</span></span>
<span class="line"><span style="color:#24292E;">##当释放连接到连接池之后，采用默认的自动提交事务</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.autoCommit</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">##用来显示链接测trace日志</span></span>
<span class="line"><span style="color:#24292E;">logging.level.com.zaxxer.hikari.</span><span style="color:#005CC5;">HikariConfig</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">DEBUG</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">logging.level.com.zaxxer.hikari</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">TRACE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>通过上面的日志配置，我们在启动的时候可以看到连接池的配置结果和 MySQL 的执行日志：</p><p>1.如下日志，显示了Hikari 的 config 配置。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/23/Ciqc1F-o5ciAb9jeAAR6M63p8e0177.png" alt="Drawing 9.png"></p><p>2.当我们执行一个方法的时候，到底要在一个 MySQL 的 connection 上面执行哪些 SQL 呢？通过如下日志我们可以看得出来。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/2F/CgqCHl-o5dqAOiJCAAUvCxtwstQ913.png" alt="Drawing 10.png"></p><p>3.通过开启 com.zaxxer.hikari.pool.HikariPool 类的 debug 级别，可以实时看到连接池的使用情况：软件日志如下（上图也有体现）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">com.zaxxer.hikari.pool.HikariPool        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> jpa</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hikari</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">pool </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Pool </span><span style="color:#B392F0;">stats</span><span style="color:#E1E4E8;"> (total</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, active</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, idle</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, waiting</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">com.zaxxer.hikari.pool.HikariPool        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> jpa</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hikari</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">pool </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Pool </span><span style="color:#6F42C1;">stats</span><span style="color:#24292E;"> (total</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, active</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, idle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, waiting</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过上面的监控日志，你在实际工作中可以根据主机的 CPU 情况和业务处理的耗时情况，再对连接池做适当的调整，但是注意差距不要太大，不要一下将连接池配置几百个，那是错误的配置。</p><p>而除了上面的这些日志之外，Hikari 还提供了 Metrics 的监控指标，我们一般配合 Prometheus 使用，甚至可以利用 Granfan 配置一些告警，我们看一下。</p><h4 id="hikari-数据通过-prometheus-的监控指标应用" tabindex="-1">Hikari 数据通过 Prometheus 的监控指标应用 <a class="header-anchor" href="#hikari-数据通过-prometheus-的监控指标应用" aria-label="Permalink to &quot;Hikari 数据通过 Prometheus 的监控指标应用&quot;">​</a></h4><p>就像我们日志里面打印的一样，</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">om.zaxxer.hikari.pool.HikariPool        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> jpa</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hikari</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">pool </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Pool </span><span style="color:#B392F0;">stats</span><span style="color:#E1E4E8;"> (total</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, active</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, idle</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, waiting</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">om.zaxxer.hikari.pool.HikariPool        </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> jpa</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hikari</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">pool </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Pool </span><span style="color:#6F42C1;">stats</span><span style="color:#24292E;"> (total</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, active</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, idle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, waiting</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Hikari 的 Metirc 也帮我们提供了 Prometheus 的监控指标，实现方法很简单，代码如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> gradle依赖里面添加</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;"> application.properties里面添加</span></span>
<span class="line"><span style="color:#E1E4E8;">#Metrics related configurations</span></span>
<span class="line"><span style="color:#E1E4E8;">management.endpoint.metrics.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">management.endpoints.web.exposure.include</span><span style="color:#F97583;">=*</span></span>
<span class="line"><span style="color:#E1E4E8;">management.endpoint.prometheus.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">management.metrics.export.prometheus.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1.</span><span style="color:#24292E;"> gradle依赖里面添加</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;io.micrometer:micrometer-registry-prometheus&#39;</span></span>
<span class="line"><span style="color:#005CC5;">2.</span><span style="color:#24292E;"> application.properties里面添加</span></span>
<span class="line"><span style="color:#24292E;">#Metrics related configurations</span></span>
<span class="line"><span style="color:#24292E;">management.endpoint.metrics.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">management.endpoints.web.exposure.include</span><span style="color:#D73A49;">=*</span></span>
<span class="line"><span style="color:#24292E;">management.endpoint.prometheus.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">management.metrics.export.prometheus.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后我们启动项目，通过下图中的地址就可以看到，Prometheus 的 Metrics 里面多了很多 HikariCP 的指标。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/2F/CgqCHl-o5euAFtXOAAI2DmhXYZQ057.png" alt="Drawing 11.png"></p><p>当看到这些指标之后，我们就可以根据 Grafana 社区里面提供的 HikariCP 的监控 Dashboards 的配置文档地址：<a href="https://grafana.com/grafana/dashboards/6083" target="_blank" rel="noreferrer">https://grafana.com/grafana/dashboards/6083</a>，导入到我们自己的 Grafana 里面，可以通过图表看到如下界面：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/24/Ciqc1F-o5giAf-jFAAIxax2K82w908.png" alt="Drawing 12.png"></p><p>我们通过这种标准的模板就可以知道 JDBC 的连接情况、Hikari 的连接情况，以及每个连接请求时间、使用时间。这样对我们诊断 DB 性能问题非常有帮助。</p><p>下面对其中一些关键指标作一下说明：</p><ol><li><p>totalConnections：总连接数，包括空闲的连接和使用中的连接，即 totalConnections = activeConnection + idleConnections；</p></li><li><p>idleConnections：空闲连接数，也叫可用连接数，也就是连接池里面现成的 DB 连接数；</p></li><li><p>activeConnections：活跃连接数，非业务繁忙期一般都是 0，很快就会释放到连接池里面去；</p></li><li><p>pendingThreads：正在等待连接的线程数量。排查性能问题时，这个指标是一个重要的参考指标，如果正在等待连接的线程在相当长一段时间内数量较多，说明我们的连接没有利用好，是不是占用连接的时间过长了？一旦有 pendingThreads 的数量了可以发个告警，查查原因，或者优化一下连接池；</p></li><li><p>maxConnections：最大连接数，统计指标，统计到目前为止连接的最大数量。</p></li><li><p>minConnections：最小连接数，统计指标，统计到目前为止连接的最小数量。</p></li><li><p>usageTime：每个连接使用的时间，当连接被回收的时候会记录此指标；一般都在 m、s 级别，一旦到 s 级别了可以发个告警；</p></li><li><p>acquireTime：获取每个连接需要等待时间，一个请求获取数据库连接后或者因为超时失败后，会记录此指标。</p></li><li><p>connectionCreateTime：连接创建时间。</p></li></ol><p>在 Granfan 图表或者 Prometheus 里面都可以配置一些邮件或者短信等告警，这样当我们 DB 连接池发生问题的时候就能实时知道。</p><p>以上内容涉及了一些运维知识，感兴趣的同学可以研究一下 Prometheus Operator：<a href="https://github.com/prometheus-operator/prometheus-operator" target="_blank" rel="noreferrer">https://github.com/prometheus-operator/prometheus-operator</a>。我们掌握了 Hikari 的数据源的配置，那么会有同学问数据源 AliDruid 是怎么配置的呢？</p><h3 id="alidruiddatasource-的配置与介绍" tabindex="-1">AliDruidDataSource 的配置与介绍 <a class="header-anchor" href="#alidruiddatasource-的配置与介绍" aria-label="Permalink to &quot;AliDruidDataSource 的配置与介绍&quot;">​</a></h3><p>在实际工作中，由于 HikariCP 和 Druid 各有千秋，国内的很多开发者都使用 AliDruid 作为数据源，我们看看都是怎么配置的，每一步都很简单。</p><p><strong>第一步：引入 Gradle 依赖。</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;com.alibaba:druid-spring-boot-starter:1.2.1&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;com.alibaba:druid-spring-boot-starter:1.2.1&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>第二步：配置数据源。</strong></p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> # 或spring.datasource.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> # 或spring.datasource.username</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> # 或spring.datasource.password</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.driver</span><span style="color:#F97583;">-class-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> #或 spring.datasource.driver</span><span style="color:#F97583;">-class-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.datasource.druid.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> # 或spring.datasource.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> # 或spring.datasource.username</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> # 或spring.datasource.password</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.driver</span><span style="color:#D73A49;">-class-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #或 spring.datasource.driver</span><span style="color:#D73A49;">-class-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>第三步：配置连接池。</strong></p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.initial</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">size</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">active</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.min</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">idle</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">wait</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.pool</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">prepared</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">statements</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">pool</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">prepared</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">statement</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">per</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">connection</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">size</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">open</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">prepared</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">statements</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> #和上面的等价</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.validation</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">query</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.validation</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">query</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">timeout</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.test</span><span style="color:#F97583;">-on-</span><span style="color:#E1E4E8;">borrow</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.test</span><span style="color:#F97583;">-on-return=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.test</span><span style="color:#F97583;">-while-</span><span style="color:#E1E4E8;">idle</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.time</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">between</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">eviction</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">runs</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">millis</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.min</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">evictable</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">idle</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">time</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">millis</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">evictable</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">idle</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">time</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">millis</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.druid.filters</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> #配置多个英文逗号分隔</span></span>
<span class="line"><span style="color:#E1E4E8;">....</span><span style="color:#6A737D;">//more</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.datasource.druid.initial</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">size</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">active</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.min</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">idle</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">wait</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.pool</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">prepared</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">statements</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">pool</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">prepared</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">statement</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">per</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">connection</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">open</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">prepared</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">statements</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #和上面的等价</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.validation</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">query</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.validation</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">query</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">timeout</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.test</span><span style="color:#D73A49;">-on-</span><span style="color:#24292E;">borrow</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.test</span><span style="color:#D73A49;">-on-return=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.test</span><span style="color:#D73A49;">-while-</span><span style="color:#24292E;">idle</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.time</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">between</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">eviction</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">runs</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">millis</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.min</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">evictable</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">idle</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">time</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">millis</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">evictable</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">idle</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">time</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">millis</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.druid.filters</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #配置多个英文逗号分隔</span></span>
<span class="line"><span style="color:#24292E;">....</span><span style="color:#6A737D;">//more</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>通过以上三步就可以完成 Druid 数据源的配置了，需要注意的是，我们需要把 HikariCP 数据源给排除掉，而其他 Druid 的配置，比如监控，官方的介绍还是挺详细的：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="noreferrer">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a>，你可以看一下，我就不多说了。</p><p>其官方的源码也比较简单，按照我们上面分析 HikariCP 数据源的方法，可以找一下 aliDruid 的源码，其加载的入口类：<a href="https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.java" target="_blank" rel="noreferrer">https://github.com/alibaba/druid/blob/master/druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.java</a>，你一步一步去查看即可，我在这里就不重点介绍了。</p><p>接下来我们看看数据里面的表的字段，和我们实体里面字段的映射策略都有哪些。</p><h3 id="naming-命名策略详解及其实践" tabindex="-1">Naming 命名策略详解及其实践 <a class="header-anchor" href="#naming-命名策略详解及其实践" aria-label="Permalink to &quot;Naming 命名策略详解及其实践&quot;">​</a></h3><p>我们在配置 @Entity 时，一定会有同学好奇表名、字段名、外键名、实体字段、@Column 和数据库的字段之间，映射关系是怎么样的？默认规则映射规则又是什么？如果和默认不一样该怎么扩展？</p><p>我们下面只介绍 Hibernate 5 的命名策略，因为 H4 已经不推荐使用了，我们直接看最新的即可。Hibernate 5 里面把实体和数据库的字段名和表名的映射分成了两个步骤。</p><p><strong>第一步：通过<strong><strong>ImplicitNamingStrategy</strong></strong>先找到实例里面定义的逻辑的字段名字。</strong></p><p>这是通过ImplicitNamingStrategy 的实现类指定逻辑字段查找策略，也就是当实体里面定义了 @Table、@Column 注解的时候，以注解指定名字返回；而当没有这些注解的时候，返回的是实体里面的字段的名字。</p><p>其中，org.hibernate.boot.model.naming.ImplicitNamingStrategy 是一个接口，ImplicitNamingStrategyJpaCompliantImpl 这个实现类兼容 JPA 2.0 的字段映射规范。除此之外，还有如下四个实现类：</p><ul><li><p>ImplicitNamingStrategyLegacyHbmImpl：兼容 Hibernate 老版本中的命名规范；</p></li><li><p>ImplicitNamingStrategyLegacyJpaImpl：兼容 JPA 1.0 规范中的命名规范；</p></li><li><p>ImplicitNamingStrategyComponentPathImpl：@Embedded 等注解标志的组件处理是通过 attributePath 完成的，因此如果我们在使用 @Embedded 注解的时候，如果要指定命名规范，可以直接继承这个类来实现；</p></li><li><p>SpringImplicitNamingStrategy：默认的 spring data 2.2.3 的策略，只是扩展了 ImplicitNamingStrategyJpaCompliantImpl 里面的 JoinTableName 的方法，如下图所示：</p></li></ul><p><img src="https://s0.lgstatic.com/i/image/M00/6A/25/Ciqc1F-o5jmAeh2mAAB0yWE0YWY107.png" alt="Drawing 13.png"></p><p>这里我们只需要关心 SpringImplicitNamingStrategy 就可以了，其他的我们基本上用不到。那么 SpringImplicitNamingStrategy 效果如何呢？我们举个例子看一下 UserInfo 实体，代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String lastName;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Column</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myAddress&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String emailAddress;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String lastName;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myAddress&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String emailAddress;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>通过第一步可以得到如下逻辑字段的映射结果：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">UserInfo </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> userInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id</span></span>
<span class="line"><span style="color:#E1E4E8;">ages</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">ages</span></span>
<span class="line"><span style="color:#E1E4E8;">lastName </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> lastName</span></span>
<span class="line"><span style="color:#E1E4E8;">emailAddress </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> myAddress</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">UserInfo </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> userInfo</span></span>
<span class="line"><span style="color:#24292E;">id</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id</span></span>
<span class="line"><span style="color:#24292E;">ages</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">ages</span></span>
<span class="line"><span style="color:#24292E;">lastName </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> lastName</span></span>
<span class="line"><span style="color:#24292E;">emailAddress </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> myAddress</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>第二步：通过 PhysicalNamingStrategy 将逻辑字段转化成数据库的物理字段名字。</strong></p><p>它的实现类负责将逻辑字段转化成带下划线，或者统一给字段加上前缀，又或者加上双引号等格式的数据库字段名字，其主要的接口是：org.hibernate.boot.model.naming.PhysicalNamingStrategy，而它的实现类也只有两个，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/25/Ciqc1F-o5kiAbR_iAAAz6GG2wMk729.png" alt="Drawing 14.png"></p><p>1.PhysicalNamingStrategyStandardImpl：这个类什么都没干，即直接将第一个步骤得到的逻辑字段名字当成数据库的字段名字使用。这个主要的应用场景是，如果某些字段的命名格式不是下划线的格式，我们想通过 @Column 的方式显示声明的话，可以把默认第二步的策略改成 PhysicalNamingStrategyStandardImpl。那么如果再套用第一步的例子，经过这个类的转化会变成如下形式：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">userInfo </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> userInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id</span></span>
<span class="line"><span style="color:#E1E4E8;">ages</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">ages</span></span>
<span class="line"><span style="color:#E1E4E8;">lastName </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> lastName</span></span>
<span class="line"><span style="color:#E1E4E8;">     myAddress </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> myAddress</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">userInfo </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> userInfo</span></span>
<span class="line"><span style="color:#24292E;">id</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id</span></span>
<span class="line"><span style="color:#24292E;">ages</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">ages</span></span>
<span class="line"><span style="color:#24292E;">lastName </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> lastName</span></span>
<span class="line"><span style="color:#24292E;">     myAddress </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> myAddress</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以看出来逻辑名字到物理名字是保持不变的。</p><p>2.SpringPhysicalNamingStrategy：这个类是将第一步得到的逻辑字段名字的大写字母前面加上下划线，并且全部转化成小写，将会标识出是否需要加上双引号。此种是默认策略。我们举个例子，第一步得到的逻辑字段就会变成如下映射：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">userInfo </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> user_info</span></span>
<span class="line"><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id</span></span>
<span class="line"><span style="color:#E1E4E8;">ages</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">ages</span></span>
<span class="line"><span style="color:#E1E4E8;">lastName </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> last_name</span></span>
<span class="line"><span style="color:#E1E4E8;">myAddress </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> my_address</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">userInfo </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> user_info</span></span>
<span class="line"><span style="color:#24292E;">id</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id</span></span>
<span class="line"><span style="color:#24292E;">ages</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">ages</span></span>
<span class="line"><span style="color:#24292E;">lastName </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> last_name</span></span>
<span class="line"><span style="color:#24292E;">myAddress </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> my_address</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们把刚才的实体执行一下，可以看到生成的表的结构如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> create table </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;"> (id bigint not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, create_time timestamp, create_user_id integer, last_modified_time timestamp, last_modified_user_id integer, version integer, ages integer, my_address </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), last_name </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), telephone </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">), primary </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (id))；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> create table </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;"> (id bigint not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, create_time timestamp, create_user_id integer, last_modified_time timestamp, last_modified_user_id integer, version integer, ages integer, my_address </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), last_name </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), telephone </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">), primary </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (id))；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你也可以通过在 SpringPhysicalNamingStrategy 类里面设置断点，来一步一步地验证我们的说法，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/25/Ciqc1F-o5mSASabwAADWrC44gPw955.png" alt="Drawing 15.png"></p><p>以上就是 Naming 命名策略的详解及其实践，不知道我在这部分开头提到的那几个问题你有没有掌握，如果还是存在疑问，你要多跟着我的步骤实践几次。下面我们了解一下它的加载原理吧。</p><h4 id="加载原理与自定义方法" tabindex="-1">加载原理与自定义方法 <a class="header-anchor" href="#加载原理与自定义方法" aria-label="Permalink to &quot;加载原理与自定义方法&quot;">​</a></h4><p>如果我们修改默认策略，只需要在 application.properties 里面修改下面代码所示的两个配置，换成自己的自定义的类即可。</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.jpa.hibernate.naming.implicit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.springframework.boot.orm.jpa.hibernate.</span><span style="color:#79B8FF;">SpringImplicitNamingStrategy</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.hibernate.naming.physical</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.springframework.boot.orm.jpa.hibernate.</span><span style="color:#79B8FF;">SpringPhysicalNamingStrategy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.jpa.hibernate.naming.implicit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.springframework.boot.orm.jpa.hibernate.</span><span style="color:#005CC5;">SpringImplicitNamingStrategy</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.hibernate.naming.physical</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.springframework.boot.orm.jpa.hibernate.</span><span style="color:#005CC5;">SpringPhysicalNamingStrategy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果我们直接搜索：spring.jpa.hibernate 就会发现，其默认配置是在 org.springframework.boot.autoconfigure.orm.jpa.HibernateProerties 这类里面的，如下图所示的方法中进行加载。</p><p><img src="https://s0.lgstatic.com/i/image/M00/6A/25/Ciqc1F-o5nSAUv1hAAJk2XpXe2k189.png" alt="Drawing 16.png"></p><p>其中，IMPLICIT_NAMING_STRATEGY 和 PHYSICAL_NAMING_STRATEGY 的值如下述代码所示，它是 Hibernate 5 的配置变量，用来改变 Hibernate的 naming 的策略。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String IMPLICIT_NAMING_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.implicit_naming_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String PHYSICAL_NAMING_STRATEGY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.physical_naming_strategy&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String IMPLICIT_NAMING_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.implicit_naming_strategy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String PHYSICAL_NAMING_STRATEGY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.physical_naming_strategy&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果我们自定义的话，直接继承 SpringPhysicalNamingStrategy 这个类，然后覆盖需要实现的方法即可。那么它实际的应用场景都有哪些呢？</p><h4 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h4><p>有时候我们接触到的系统可能是老系统，表和字段的命名规范不一定是下划线形式，有可能驼峰式的命名法，也有可能不同的业务有不同的表名前缀。不管是哪一种，我们都可以通过修改第二阶段：物理映射的策略，改成 PhysicalNamingStrategyStandardImpl 的形式，请看代码。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.jpa.hibernate.naming.physical</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.jpa.hibernate.naming.physical</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样可以使 @Column/@Table 等注解的自定义值生效，或者改成自定义的 MyPhysicalNamingStrategy。不过我不建议你修改 implicit-strategy，因为没有必要，你只要在 physical-strategy 上做文章就足够了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本讲的内容到这里就结束了。今天为你介绍了 Datasource 是什么，讲解了数据源和 Connection 的关系，并且通过源码分析，让你知道了不同的数据源应该怎么配置，最常见的数据源 Hikari 的配置和监控是怎样的。此外，我还给你介绍了和数据库相关的字段映射策略。</p><p>最后，希望你在学习的同时多去思考，因为不同的版本可能实现的代码是不一样的，但是思考方式是不变的，你可以学着举一反三，学会如何看源码，因为看源码可能要比查看文档资料更靠谱和快捷。</p><p>如果你觉得这一讲对你有帮助，就动动手指分享吧。下一讲我会为你介绍多数据源应该怎么配置，它的最佳实践又是什么呢？你可以先思考一下，也欢迎你在留言区发表自己的看法，让我们一起活跃思维，碰撞出不一样的火花！</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,141),e=[o];function r(t,c,i,E,y,u){return a(),n("div",null,e)}const b=s(l,[["render",r]]);export{m as __pageData,b as default};
