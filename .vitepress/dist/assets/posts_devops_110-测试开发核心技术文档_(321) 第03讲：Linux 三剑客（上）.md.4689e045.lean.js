import{_ as o,j as p,o as a,g as n,k as s,h as l,Q as i,s as t}from"./chunks/framework.4e7d56ce.js";const ht=JSON.parse('{"title":"第03讲：Linux三剑客（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/110-测试开发核心技术文档/(321) 第03讲：Linux 三剑客（上）.md","filePath":"posts/devops/110-测试开发核心技术文档/(321) 第03讲：Linux 三剑客（上）.md","lastUpdated":1696682708000}'),_={name:"posts/devops/110-测试开发核心技术文档/(321) 第03讲：Linux 三剑客（上）.md"},r=i("",13),c=t("br",null,null,-1),h=t("p",null,"然后通过 grep hogwarts /tmp/hello.txt 指令查找数据，指令中间的参数是正则表达式，指令后面的参数是文件名。",-1),g=t("br",null,null,-1),u=t("p",null,"你可以看到 grep 把 hello from hogwarts 从文件中提取出来。",-1),d=t("br",null,null,-1),A=t("p",null,"你还可以通过 grep 把 testerhome 提取出来，通过 cat 指令可以看到在 hello.txt 中有三行数据。",-1),m=t("br",null,null,-1),x=t("p",null,"如果我们输入 grep hello 指令，它会把三条数据都提取出来。这就是 grep 的第一个作用，根据指定的正则表达式查取对应的数据，我们上面的演示用的是简单的字符串。",-1),w=t("br",null,null,-1),k=t("p",null,'接下来，我们学习如何使用正则表达式获取以字母 s 或 t 开头的后面跟任意两个字符的数据，输入 grep "[st].." /tmp/hello.tex 指令，其中 [] 表示正则表达式，..表示后面跟任意的两个字符，你可以看到输出了两条数据。',-1),b=t("br",null,null,-1),B=t("p",null,'我们还可以通过 -o 指令只打印匹配的内容，输入 grep -o "[st].." /tmp/hello.tex 指令，你可以看到只打印了匹配到的内容，而不是整条数据。',-1),F=t("p",null,"grep 还有一些其他的指令，比如 -i 可以忽略字符大小写。",-1),T=i("",7),C=t("br",null,null,-1),f=t("p",null,'我们举个例子，输入 grep -E "(hog|home)" /tmp/hello.tex 指令，输出结果分别匹配了 hog 与 home。',-1),V=t("br",null,null,-1),S=t("p",null,"但如果你的指令中不含 -E，则指令不支持扩展正则，这个时候你会发现它什么都匹配不到。",-1),M=t("br",null,null,-1),X=t("p",null,"如果不使用 -E，我们可以使用 \\ 转义符对匹配条件进行转义，也可以达到同样的效果",-1),N=t("h2",{id:"awk",tabindex:"-1"},[l("awk "),t("a",{class:"header-anchor",href:"#awk","aria-label":'Permalink to "awk"'},"​")],-1),P=t("p",null,"了解完 grep 如何使用，我们接下来学习如何使用 awk。",-1),D=t("p",null,"awk 是 Linux 下的一个命令，同时也是一种语言解析引擎，它的功能非常强大，具备完整的编程特性，可以执行命令、进行网络请求等操作。所以精通 awk 是一个 Linux 工作者必备的技能。我们接下来看下 awk 的语法 awk 'pattern{action}' 的相关知识，pattern 是匹配条件，action 表示具体需要做的处理。",-1),E=t("br",null,null,-1),L=t("p",null,"pettern 语法在一定程度上可以代替 grep。",-1),R=t("br",null,null,-1),I=t("br",null,null,-1),$=t("p",null,"举个例子，使用双 / 表示一个正则匹配，我们输入 awk '/[st]../' /tmp/hello.txt 指令，你可以看到和 grep 一样，轻松地打印出匹配到的内容，所以在一定程度上 awk 可以替代 grep，但它没有使用 grep 简洁。",-1),O=t("p",null,"还有表示区间选择，比如我们在 1、2、3 之间，使用 awk '$0>2' 指令打印大于 2 的数据 3。",-1),q=i("",5),K=t("br",null,null,-1),Q=t("p",null,"我们输入 awk -Fo '{print NR,NF}' /tmp/hello.txt 指令，输出显示我们以 o 为分隔符，将 hello from hogwarts 分为了 4 个字段，下面两条数据以此类推。",-1),J=t("br",null,null,-1),v=t("p",null,"我们还可以使用 BEGIN 指令，能够得到同样的结果。",-1),U=t("br",null,null,-1),G=t("p",null,"接下来，学习 awk 的字段数据处理。我们通过 -F 参数指定字段分隔符，这里需要注意 awk 有一个 $0~$N~$NF 的特殊参数，",-1),Y=t("p",null,"假设我们以 t 为分隔符打印 $1 和 $2，我们来分析夏结果，",-1),Z=t("p",null,"当输入 $1 以 t 为分隔符的时候，t 之前的 hello from hogwar 是 $1 记录，t 之后的 s 是 $2 记录，以此类推，也就是说 awk 通过解析数据内容，然后会根据默认的分隔符打印出每个字段的具体内容，我们输入 awk 'OFS=''-''{print $1,$2,$3}' 并打印输出。",-1),j=t("br",null,null,-1),z=t("p",null,"可以看到，hello 指定为 $1，from 指定为 $2，并将默认的空格分隔符替换为 -，我们可以通过 $ 获取具体字段并对其进行相关操作，接下来我们学习 awk 的字段分隔。",-1),H=t("p",null,"这里有几个例子，课后你可以试验一下，同样 awk 也可以实现简单的数据计算功能，比如说awk 'BEGIN{print 10000/3}'。",-1),W=i("",5),y=t("br",null,null,-1),tt=t("p",null,"比如我们输入 sed 's#testerhome#world#' /tmp/hello.txt 指令，其中 s 后面可以跟任意符号，比如 / 或 # 都可以表示分隔符，它会用后面的内容替换前面的内容。",-1),lt=t("br",null,null,-1),et=t("p",null,"比如我们把以 t 开头的三个字符都替换成 xxx。你可以看到，后面的 ter 没有改变，是因为需要添加一个额外的标记符 /g。",-1),st=i("",8);function it(ot,pt,at,nt,_t,rt){const e=p("Image");return a(),n("div",null,[r,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DE/CgoB5l3XtNuAPoP1AACZeigKKy8997.png"}),l(),c,h,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FE/CgotOV3XtPiAXjErAADUYrh9hPI032.png"}),l(),g,u,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DE/CgoB5l3XtQuAMGB7AAFQI4atTN4017.png"}),l(),d,A,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FE/CgotOV3XtRqAHiTCAAIU-z_0BFc527.png"}),l(),m,x,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FE/CgotOV3XtSmAVa4mAAKQLiKRwF0939.png"}),l(),w,k,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3XtTeAfsKQAAJKMXmUvhU283.png"}),l(),b,B,F,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3XtUWAK5t-AAIxEAoUhtM359.png"}),l(),T,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3XtVaAJPZaAAJpe4YZD9c323.png"}),l(),C,f,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3XtWSAF9K-AAKOZuR4qrg333.png"}),l(),V,S,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3XtXGAQRR7AAKVDfReUHg948.png"}),l(),M,X,N,P,D,E,L,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3XtaaAcU3QAAKjJeoBA8g632.png"}),l(),R,I,$,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3XtY-AaJPqAABKIEkO88U487.png"}),l(),O,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3XtbWAZKNqAAK80TDMRgQ651.png"}),l(),q,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3XtcaAGbedAAJmB1D7zHw983.png"}),l(),K,Q,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3XteOAYuu3AAGhkZYQVJA208.png"}),l(),J,v,U,G,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3XtiGAAolXAAHJ8Kvwgeo677.png"}),l(),Y,Z,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3XtjCAVm3oAAJriQsbzwU106.png"}),l(),j,z,H,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3XtkGAV30WAAJ4BzFTx30014.png"}),l(),W,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/DF/CgoB5l3Xtk6AM47hAAJ7IwffrqA691.png"}),l(),y,tt,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3Xtl6AetiKAAJ5M3Mbhfw934.png"}),l(),lt,et,s(e,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AB/FF/CgotOV3Xtm-AajlrAAKRg0xYDTQ652.png"}),l(),st])}const gt=o(_,[["render",it]]);export{ht as __pageData,gt as default};
