import{_ as o,j as e,o as t,h as r,k as l,f as s,Q as p,s as n}from"./chunks/framework.d3daa342.js";const U=JSON.parse('{"title":"05链表：如何利用“假头、新链表、双指针”解决链表题？（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6694) 05  链表：如何利用“假头、新链表、双指针”解决链表题？（下）.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6694) 05  链表：如何利用“假头、新链表、双指针”解决链表题？（下）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6694) 05  链表：如何利用“假头、新链表、双指针”解决链表题？（下）.md"},E=p('<h1 id="_05链表-如何利用-假头、新链表、双指针-解决链表题-下" tabindex="-1">05链表：如何利用“假头、新链表、双指针”解决链表题？（下） <a class="header-anchor" href="#_05链表-如何利用-假头、新链表、双指针-解决链表题-下" aria-label="Permalink to &quot;05链表：如何利用“假头、新链表、双指针”解决链表题？（下）&quot;">​</a></h1><p>在上一讲中，我给你介绍了解决链表问题的&quot;三板斧&quot;中的<strong>第一斧：假头</strong>，你知道了带假头的链表一共有 6 种基本的操作，分别是初始化、追加结点、头部插入结点、查找结点、插入指定位置之前和删除结点。</p><p>如果说三板斧的第一斧平平淡淡，大巧不工；第二斧就是鬼斧神工，生成<strong>新链表</strong> 后，链表的交换、反转求解都会变得极其简单 ；第三斧则是奇思妙想，<strong>双指针</strong> （<strong>也叫快慢指针</strong>）用在链表上经常可以解决一些单个指针难以解决的问题。学会了这两种思路，算法面试中的链表题就如同探囊取物了。</p><p><em>注：大部分链表题主要考查动手能力，因此在本讲将不再按照&quot;分析四步法&quot;进行讲解。</em></p><h3 id="三板斧的第二斧-新链表" tabindex="-1">三板斧的第二斧：新链表 <a class="header-anchor" href="#三板斧的第二斧-新链表" aria-label="Permalink to &quot;三板斧的第二斧：新链表&quot;">​</a></h3><p>做链表的反转、交换等操作时，我<strong>不建议直接在原来的链表上进行操作</strong> 。一种可取的思路是，把这些操作想象成要<strong>生成新的链表</strong>，然后借助这些新的链表，完成原本比较复杂的操作。这个方法就是我们今天要讲的**&quot;第二斧&quot;------新链表**。</p><p>接下来，我将采用这种新思路，带你解决一些面试中经常会遇到的疑难题目。</p><h4 id="例-1-链表反转" tabindex="-1">例 1：链表反转 <a class="header-anchor" href="#例-1-链表反转" aria-label="Permalink to &quot;例 1：链表反转&quot;">​</a></h4><p>【<strong>题目</strong>】输入一个链表的头结点，反转该链表，并返回反转后链表的头结点。</p><p>输入：1-&gt;2-&gt;3</p><p>输出：3-&gt;2-&gt;1</p><p>【<strong>分析</strong> 】这里借助<strong>假头和新链表求解</strong>，思路如下：</p><ul><li><p>建立一个新的带假头的空链表；</p></li><li><p>遍历旧链表，依次取出旧链表中的每个结点；</p></li><li><p>采用<strong>头部插入</strong>的方法放到新链表中；</p></li><li><p>返回 dummy.next。</p></li></ul><p>【<strong>画图</strong>】这里我们利用示意图演示如下：</p>',14),y=p(`<p>【<strong>代码</strong>】对应的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">reverseList</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 建立一个新的带假头的新链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode dummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 开始遍历旧链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (head </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ListNode tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 把旧链表中的结点取出来，采用头部插入的方法添加到新链表中</span></span>
<span class="line"><span style="color:#E1E4E8;">            head.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            dummy.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">            head </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 返回新链表的头，注意，不要返回dummy!!</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">reverseList</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 建立一个新的带假头的新链表</span></span>
<span class="line"><span style="color:#24292E;">        ListNode dummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 开始遍历旧链表</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ListNode tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head.next;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 把旧链表中的结点取出来，采用头部插入的方法添加到新链表中</span></span>
<span class="line"><span style="color:#24292E;">            head.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">            dummy.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">            head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回新链表的头，注意，不要返回dummy!!</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：每个结点只遍历一次，所以时间复杂度为 O(N)，内存空间只使用了常量空间，因此空间复杂度为 O(1)。</p><p>【<strong>小结</strong> 】仔细查看代码之后，链表反转的<strong>考点</strong> 就是之前我们学到的基本操作：<strong>假头，头部插入法</strong>，再结合今天学习的新链表的思路。可以总结如下：</p>`,5),i=p('<h4 id="例-2-删除结点" tabindex="-1">例 2：删除结点 <a class="header-anchor" href="#例-2-删除结点" aria-label="Permalink to &quot;例 2：删除结点&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个链表头及一个整数值，要求把链表里面等于整数值的结点都从链表中移除出去。</p><p>输入：1-&gt;2-&gt;3-&gt;2-&gt;4, remove = 2</p><p>输出：1-&gt;3-&gt;4。</p><p><strong>解释</strong>：要移除的整数值是 2。那么移除之后，返回的结果应该是 1-&gt;3-&gt;4。</p><p>【<strong>分析</strong>】这里我们不采用在原来的链表上进行删除的办法，而是采用新链表的操作思路：</p><ul><li><p>建立一个新的带假头的空链表；</p></li><li><p>遍历旧链表，依次取出旧链表中的每个点，如果不删除这个结点，那么就采用尾部插入方法接到新链表中。</p></li></ul><p>可以发现，在这里没有出现结点交换的操作。<strong>采用新链表的思路，避免了在原链表上不停地做结点的删除</strong>。为了方便你理解，我制作了动图演示，如下所示：</p>',8),A=p(`<p>【<strong>代码</strong>】基于以上思想，可以写出代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">removeElements</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成一个新链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode dummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 依次取出旧链表中的每个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ListNode back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果结点值需要保留，那么采用属部追加的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 添加到新链表中</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p.val </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> back;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意设置尾巴的next为空</span></span>
<span class="line"><span style="color:#E1E4E8;">        tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意返回的是dummy.next</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">removeElements</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成一个新链表</span></span>
<span class="line"><span style="color:#24292E;">        ListNode dummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ListNode tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 依次取出旧链表中的每个结点</span></span>
<span class="line"><span style="color:#24292E;">        ListNode p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ListNode back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果结点值需要保留，那么采用属部追加的方法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 添加到新链表中</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p.val </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">                tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> back;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意设置尾巴的next为空</span></span>
<span class="line"><span style="color:#24292E;">        tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意返回的是dummy.next</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)。</p><p>【<strong>小结</strong> 】我们将这道题的考点层层剥离之后，就只剩下<strong>生成 dummy 新链表，尾巴追加新结点，以及新链表的思路</strong>。关于解决这道这类题目的思路、重点以及分析方法，建议你先尝试自己梳理总结，再来看我给出的思维导图：</p>`,5),d=p('<p>如果我们仔细对比链表反转与删除结点，会发现，这两者的不同之处在于：</p><ul><li><p>链表反转使用的是头部插入的方法</p></li><li><p>删除结点采用的是尾部追加的方法</p></li></ul><p>只是换了一个考点，题目就完全大变样了。如果我们再严格地对比这两个题目，可以发现：</p><ul><li><p>链表反转时，头部插入是<strong>无</strong>条件的</p></li><li><p>删除结点时，尾部 append 是<strong>有</strong>条件的</p></li></ul><p>这种<strong>条件的千变万化</strong>，会带来很多有趣的题目。比如下面这道练习题。</p><p><strong>练习题 1</strong>：给定一个排序链表，删除重复出现的元素，使得每个元素只出现一次。</p><p>输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</p><p>输出: 1-&gt;2-&gt;3</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/83.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/83.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/83.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 2</strong>：给定一个排序链表，删除重复出现的元素，只留下没有重复出现的元素。</p><p>输入：1-&gt;1-&gt;2-&gt;3-&gt;3</p><p>输出：2</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/82.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/82.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/82.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>你可以把答案或者思考的过程写在评论区，我们一起讨论。</p><h4 id="例-3-合并" tabindex="-1">例 3 ：合并 <a class="header-anchor" href="#例-3-合并" aria-label="Permalink to &quot;例 3 ：合并&quot;">​</a></h4><p>【<strong>题目</strong>】合并给定的两个有序链表。</p><p>输入：a = 1-&gt;4-&gt;6, b = 3-&gt;5-&gt;7</p><p>输出：1-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7</p><p>【<strong>分析</strong> 】首先应该是生成一个带假头的新链表 C，然后把 A，B 中的元素从小到大，依次添加到新生成的链表 C 中。因此，我们还需要使用到<strong>尾部插入法</strong>。</p><p>具体操作方法如下。</p><ul><li><p>第一步：A，B 两个指针分别指向 A，B 链表的表头。</p></li><li><p>第二步：依次取出 A，B 两个指针中更小的值加入新链表中。</p></li><li><p>第三步：返回 C 链表假头的 next。</p></li></ul><p>具体演示如下所示：</p>',22),g=p(`<p>【<strong>代码</strong>】有了前面的思路，可以写出代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">mergeTwoLists</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">l1</span><span style="color:#E1E4E8;">, ListNode </span><span style="color:#FFAB70;">l2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 首先生成空链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode dummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 遍历两个有序链表,每次只取一个结点append到新链表里面</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (l1 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> l2 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果l2链表为空，或者l1链表里面的值更小，那么取l1结点追加到</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 新链表尾部</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (l2 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> l1 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> l1.val </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> l2.val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l1;</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l1;</span></span>
<span class="line"><span style="color:#E1E4E8;">                l1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l1.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 其他情况，则把l2结点添加到新链表尾部</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l2;</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l2;</span></span>
<span class="line"><span style="color:#E1E4E8;">                l2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l2.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意：这里一定要记得把tail.next设置为空。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 虽然这个题可能并不需要，但是应该养成收尾的好习惯</span></span>
<span class="line"><span style="color:#E1E4E8;">        tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 返回dummy.next, 不要返回dummy!!</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">mergeTwoLists</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">l1</span><span style="color:#24292E;">, ListNode </span><span style="color:#E36209;">l2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 首先生成空链表</span></span>
<span class="line"><span style="color:#24292E;">        ListNode dummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ListNode tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 遍历两个有序链表,每次只取一个结点append到新链表里面</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (l1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> l2 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果l2链表为空，或者l1链表里面的值更小，那么取l1结点追加到</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 新链表尾部</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (l2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> l1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> l1.val </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> l2.val) {</span></span>
<span class="line"><span style="color:#24292E;">                tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l1;</span></span>
<span class="line"><span style="color:#24292E;">                tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l1;</span></span>
<span class="line"><span style="color:#24292E;">                l1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l1.next;</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 其他情况，则把l2结点添加到新链表尾部</span></span>
<span class="line"><span style="color:#24292E;">                tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l2;</span></span>
<span class="line"><span style="color:#24292E;">                tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l2;</span></span>
<span class="line"><span style="color:#24292E;">                l2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l2.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意：这里一定要记得把tail.next设置为空。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 虽然这个题可能并不需要，但是应该养成收尾的好习惯</span></span>
<span class="line"><span style="color:#24292E;">        tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回dummy.next, 不要返回dummy!!</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)。</p><p>【<strong>小结</strong>】如果我们再分析一下这道题目，可以发现考点仍然是：</p><ul><li><p>生成 dummy 新链表</p></li><li><p>选择结点往新链表<strong>尾部追加数据</strong></p></li></ul><p>此时的尾部 append 是<strong>有</strong> 条件的：需要从两个链表头中<strong>选择一个较小</strong>的数据进行追加。当然，有条件的 append 还可以变成各种其他的条件来操作。不过即使千变万化，只要你看清楚题的考点，就能轻松应对、。</p><p>那么这里我们不妨再选择其中一个考点&quot;<strong>选择较小的数</strong>&quot;进行练习。在原题中，只有两个链表，所以可以直接通过比较得到较小的结点。可是如果有 k 个链表要合并的时候，又应该怎么做呢？比如下面这道练习题：</p><p><strong>练习题 3</strong>：给定 k 个有序链表，合并成一个有序链表</p><p>输入：[1-&gt;4-&gt;5，1-&gt;3-&gt;4, 2-&gt;6]</p><p>输出：[1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6]</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/23.%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/23.%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/23.%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>你可以把答案或者思考的过程写在评论区，我们一起讨论。</p><h4 id="例-4-交换链表中的结点" tabindex="-1">例 4：交换链表中的结点 <a class="header-anchor" href="#例-4-交换链表中的结点" aria-label="Permalink to &quot;例 4：交换链表中的结点&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个链表，需要将里面的结点两两交换。</p><p>输入：[1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6]</p><p>输出：[2-&gt;1-&gt;4-&gt;3-&gt;6-&gt;5]</p><p>【分析】经过观察发现，只不过把偶数位置与奇数位置的结点进行了交换。为了避免在原始链表中进行结点间的交换操作，我们可以采用如下方法：</p><ol><li><p>生成两个新链表，一个用来存放奇数位置结点的链表 odd，一个用来存放偶数位置结点的链表 even；</p></li><li><p>遍历旧链表，并且把奇数位置上的结点放到 odd 链表中，把偶数位置的结点放到链表 even 中；</p></li><li><p>合并 odd 链表与 even 链表。</p></li></ol><p>为了方便你理解，我同样制作了动图演示，如下：</p>`,20),u=p(`<p>到这里，<strong>新增链表已经从一条变成了两条</strong>，来帮助我们解决这道题目。</p><p>【<strong>代码</strong>】有了思路，我们可以写出代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">mergeList</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, ListNode </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode dummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 合并两个链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果a不空，那么先取a结点</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">                a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果b不空，再取b结点</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">                tail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">                b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意收尾</span></span>
<span class="line"><span style="color:#E1E4E8;">        tail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">swapPairs</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成奇数index应该存放的链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode oddDummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode oddTail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oddDummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成偶数index应该存放的链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode evenDummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode evenTail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> evenDummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ListNode back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//  如果是偶数，放到偶数链表中</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((index </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x01</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                evenTail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">                evenTail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果是奇数，放到奇数链表中</span></span>
<span class="line"><span style="color:#E1E4E8;">                oddTail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">                oddTail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> back;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意两个链表的收尾</span></span>
<span class="line"><span style="color:#E1E4E8;">        oddTail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        evenTail.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意这里传入的是oddDummy.next和evenDummy.next</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeList</span><span style="color:#E1E4E8;">(oddDummy.next, evenDummy.next);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">mergeList</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, ListNode </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ListNode dummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ListNode tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 合并两个链表</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果a不空，那么先取a结点</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">                tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">                a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果b不空，再取b结点</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">                tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">                b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意收尾</span></span>
<span class="line"><span style="color:#24292E;">        tail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">swapPairs</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成奇数index应该存放的链表</span></span>
<span class="line"><span style="color:#24292E;">        ListNode oddDummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ListNode oddTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oddDummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成偶数index应该存放的链表</span></span>
<span class="line"><span style="color:#24292E;">        ListNode evenDummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ListNode evenTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> evenDummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ListNode p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ListNode back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//  如果是偶数，放到偶数链表中</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((index </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x01</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                evenTail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                evenTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果是奇数，放到奇数链表中</span></span>
<span class="line"><span style="color:#24292E;">                oddTail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                oddTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> back;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意两个链表的收尾</span></span>
<span class="line"><span style="color:#24292E;">        oddTail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        evenTail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意这里传入的是oddDummy.next和evenDummy.next</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeList</span><span style="color:#24292E;">(oddDummy.next, evenDummy.next);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：每个结点会访问两次，拆分一次，合并一次，所以时间复杂度为 O(N)，空间复杂度为 O(1)。</p><p>【<strong>小结</strong>】这道题的考点也比较明确了，可以拆分出以下考点：</p><ul><li><p>拆分链表</p></li><li><p>新链表的思路</p></li><li><p>合并链表的操作</p></li></ul><p>尤其需要注意的是，使用新链表思路时，可以通过<strong>生成多条新链表</strong>来解决以前处理起来比较麻烦的问题。至此，我们一起进一步扩展了链表知识。此外，还发现了一些小型的组合操作，比如：**拆分链表，合并链表。**在合并时，如果按照不同的条件合并，就需要写出不一样的合并代码，结合前面例 3，可以知道合并分两种：</p><ul><li><p>有序合并</p></li><li><p>先后合并</p></li></ul><p>到这里可以总结出我们更加丰富的知识路线图，如下图所示：</p>`,10),D=p('<p>在这道题中，链表是两两成对进行了<strong>反转</strong> ，那么如果是 k 个一组进行反转应该怎么办呢？我们再来看看与<strong>交换</strong>有关的练习题。</p><p><strong>练习题 4</strong>：给定一个链表，要求将链表 k 个一组进行反转，如果最后一组不足 k 个，那么不反转。返回反转之后的链表。</p><p>输入：A = [1, 2, 3, 4, 5], k = 2</p><p>输出: [2, 1, 4, 3, 5]</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/25.k-%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/25.k-%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/25.k-%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 5</strong>：给定一个链表，从链表尾部开始，k 个一组进行反转，如果左边的分组不足 k 个，那么不反转。返回反转之后的链表。</p><p>输入：A = [1, 2, 3, 4, 5], k = 2</p><p>输出：[1, 3, 2, 5, 4]</p><p><strong>解释</strong>：注意是从链表的尾部开始k个一组的。所以这里是[1], [2, 3], [4, 5]这样分组来进行反转。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/25.%E9%80%86%E5%90%91k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/25.%E9%80%86%E5%90%91k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/25.%E9%80%86%E5%90%91k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="三板斧的第三斧-双指针" tabindex="-1">三板斧的第三斧：双指针 <a class="header-anchor" href="#三板斧的第三斧-双指针" aria-label="Permalink to &quot;三板斧的第三斧：双指针&quot;">​</a></h3><p>虽然新链表的思路非常有趣，但是关于它的更多探索还是应该留给你自己。收拾好行囊，我们将要去看更加瑰丽的奇景------<strong>双指针</strong>。</p><p>双指针，顾名思义就是两个指针在链表上移动。实际上，我们在前面链表的查找中已经使用过双指针了：比如链表中指定位置插入一个新结点，就使用了<strong>两个指针，一前一后两个指针在链表上前进</strong>。</p><p>其实两个指针在链表上前进时，有很多种形式，常见的主要有以下两种。</p><ol><li><p>间隔指针：前面的指针先走一步，然后后面的指针再一起走；前面的指针先走 k 步，后面的指针再一起走。</p></li><li><p>快慢指针：两个指针的速度一快一慢前进，比如一个每次走一步，一个每次走两步。</p></li></ol><p>接下来，我们来看看双指针能解决什么类型的问题。</p><h4 id="例-5-链表的倒数第-k-个结点" tabindex="-1">例 5：链表的倒数第 k 个结点 <a class="header-anchor" href="#例-5-链表的倒数第-k-个结点" aria-label="Permalink to &quot;例 5：链表的倒数第 k 个结点&quot;">​</a></h4><p>【<strong>题目</strong> 】给定一个链表，删除链表中的倒数第 k 个结点。这里我们认为<strong>最后一个结点是倒数第 1 个</strong>。</p><p>输入：1-&gt;2-&gt;3, k = 2</p><p>输出： 1-&gt;3</p><p>【分析】首先第一种常规思路是，先统计出整个链表的长度 len, 再去取第 len-k 结点的前驱进行删除。</p><p>但是，面试的时候，面试官往往会加一个限制条件 ：<strong>只能遍历链表一次</strong>。</p><p>以后凡是遇到链表题，看到这句话，实际上就是在告诉你&quot;<strong>用双指针吧</strong>&quot;。思路如下：</p><ol><li><p>在原链表前面加上 dummy，变成带假头的链表</p></li><li><p>front 指针从 dummy 开始，走 k 步，然后停下来</p></li><li><p>back 指针指向链表 dummy 假头</p></li><li><p>然后两个指针再一起走</p></li><li><p>当 front 指针指向<strong>最后一个结点</strong> 时，back 指针刚好指向<strong>倒数第 k 个结点</strong>的前驱。</p></li></ol><p>解题思路有了，还有两个细节需要你特别注意。</p><p>【<strong>细节 1</strong>】你需要小心处理三种情况：</p><ol><li><p>链表长度 &lt; k，此时什么也不做；</p></li><li><p>链表长度 == k，此时删除原来的链表头结点；</p></li><li><p>链表长度 &gt; k，此时找到<strong>倒数第 k 个结点</strong> 的前驱，然后删除<strong>倒数第 k 个结点</strong>。</p></li></ol><p>接下来，我们分别讨论这三种情况。</p><p><strong>情况 1</strong>：链表长度小于 k。front 指针会先走 k 步，如果链表长度小于 k，那么必然会导致 front 指针行走的步数小于 k，此时应该什么也不做。</p>',29),h=n("p",null,[n("strong",null,"情况 2"),s("：链表长度等于 k。此时需要删除倒数第 k 个结点，也就是旧链表的 head 结点。")],-1),m=n("p",null,"当 front 指针先走完 k 步之后，back 指针刚好位于 dummy 结点。而 dummy 结点就是倒数第 k+1 个结点，那么此时可以直接通过 back 指针删除它后面的结点（刚好是 head，也就是倒数第 k 个）。",-1),F=n("p",null,[n("strong",null,"情况 3"),s("：链表长度大于 k。back 指针刚好位于倒数第 k+1 个结点，此时可以直接通过 back 指针删除它后面的结点（刚好是倒数第 k 个)。")],-1),b=n("p",null,"我们发现：情况 2 和情况 3 实际上都是用 back 指针来删除后面的结点。因此，这两种情况可以一起处理。",-1),_=p(`<p>【<strong>细节 2</strong> 】任何时候，front 最后<strong>停下来的位置一定</strong> 要位于链表的<strong>最后一个结点</strong>。这是因为：要想删除倒数第 k 个结点的前驱结点，需要 back 刚好指向倒数第 k+1 个结点，那么就必须要让 front 非空，即指向倒数第一个结点。</p><p>【<strong>代码</strong>】有了思路以及相应的细节，我们就可以利用代码来解决问题了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">removeNthFromEnd</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将链表改造成带假头的链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode dummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        dummy.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 链表长度</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> preWalkedSteps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// front指针从dummy开始先走k步</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode front </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意front不能为空，需要指向链表的最后一个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (preWalkedSteps </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">               front </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> front.next </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            front </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> front.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            preWalkedSteps</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// back指针指向dummy，然后front与back指针一起走</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意front不能为空，需要指向链表的最后一个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (front </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> front.next </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> back.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            front </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> front.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果preWalkedSteps == k</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 说明处于情况2和情况3，需要删除倒数第k个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (preWalkedSteps </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            back.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> back.next.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 返回新的链表头</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dummy.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">removeNthFromEnd</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">k</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将链表改造成带假头的链表</span></span>
<span class="line"><span style="color:#24292E;">        ListNode dummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dummy.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 链表长度</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> preWalkedSteps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// front指针从dummy开始先走k步</span></span>
<span class="line"><span style="color:#24292E;">        ListNode front </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意front不能为空，需要指向链表的最后一个结点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (preWalkedSteps </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">               front </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> front.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            front </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> front.next;</span></span>
<span class="line"><span style="color:#24292E;">            preWalkedSteps</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// back指针指向dummy，然后front与back指针一起走</span></span>
<span class="line"><span style="color:#24292E;">        ListNode back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意front不能为空，需要指向链表的最后一个结点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (front </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> front.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> back.next;</span></span>
<span class="line"><span style="color:#24292E;">            front </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> front.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果preWalkedSteps == k</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 说明处于情况2和情况3，需要删除倒数第k个结点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (preWalkedSteps </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> k) {</span></span>
<span class="line"><span style="color:#24292E;">            back.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> back.next.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回新的链表头</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dummy.next;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)</p><p>【<strong>小结</strong>】当做完这道题之后，我们可以进一步完善双指针的技巧，总结的思维导图如下：</p>`,6),B=p('<p>然后，我们再来总结一下这道题目的考点。首先除了思路&quot;双指针&quot;以外，你还需要注意写代码的技巧。</p><ul><li><p>将旧链表改造成带 dummy 结点的链表，方便删除 head 结点。这是能让情况 2 和情况 3 统一处理的关键。</p></li><li><p>让指针指向链表最后一个结点的 while 语句的写法。</p></li><li><p>利用移动步数来判断链表长度与 k 的关系。</p></li></ul><p>接下来我们一起看一下双指针的另外一种形式，<strong>快慢指针</strong>。</p><h4 id="例-6-拆分链表" tabindex="-1">例 6：拆分链表 <a class="header-anchor" href="#例-6-拆分链表" aria-label="Permalink to &quot;例 6：拆分链表&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个链表，需要把链表从中间拆分成长度相等的两半（如果链表长度为奇数，那么拆分之后，前半部分长度更长一点）。</p><p>输入：[1-&gt;2-&gt;3-&gt;4-&gt;5]</p><p>输出：[1-&gt;2-&gt;3, 4-&gt;5]</p><p>【<strong>分析</strong>】我们需要分为 2 步：</p><ol><li><p>找到链表的中间结点</p></li><li><p>从中间结点把链表分为两半</p></li></ol><p>那么问题是，如何找到中间结点呢？如果是首先求出链表的长度，然后再利用 getPreNode(len/2) 函数的前驱，再把链表拆分成两半。</p><p>但是，这可能不是面试官想要的解法，因为这种解法会将链表遍历两遍，面试官可能会说：&quot;<strong>只能遍历一次</strong>&quot;。又听到了这个声音，这就是告诉你需要用双指针了。</p><p>所以问题的关键就是<strong>如何使用双指针找到链表的中间结点</strong>，可以采用如下办法：</p><ul><li><p>假设链表头在左边，尾巴在右边，两个指针 s1、s2 从链表头开始往右走；</p></li><li><p>s1 表示每次只往前走一步，s2 则表示每次只往前走 2 步；</p></li><li><p>在同样的时间内，当 s2 指向链表的末尾，s1 指针便指向链表的中间结点。</p></li></ul><p>只是在写代码的时候，需要特别注意以下 2 点：</p><p>1.当有<strong>偶数</strong> 个结点，<strong>s2 是空指针</strong> ，此时，s1 位于后半部分指针的头部，因此需要返回<strong>s1 的前驱</strong>；</p>',15),k=n("p",null,[s("2.当有"),n("strong",null,"奇数"),s(" 个结点，"),n("strong",null,"s2 是最后一个结点"),s(" ，此时 s1 指针位于前半部分的最后，"),n("strong",null,"直接返回 s1"),s("即可。")],-1),C=p(`<p>如果找到了中间结点，那么就可以直接进行拆分了。</p><p>【<strong>代码</strong>】接下来我们就实现拆分链表的逻辑，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">findMiddleNode</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意这里转化为带假头的链表，免去了空链表的判断</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode dummy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        dummy.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意，假头并不算是链表的一部分，所以这里是从head开始走</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// dummy就是head的前驱，所以pre要指向dummy.</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dummy;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 两个指针开始同时走</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 因为s2指针每次都要走两步，所以判空需要这样判断。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s2 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> s2.next </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1;</span></span>
<span class="line"><span style="color:#E1E4E8;">            s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s2.next.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当有偶数个结点的时候，s2是空指针，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 此时，s1位于后半部分指针的头部，因此需要返回s1的前驱。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当有奇数个结点的时候，s2是最后一个结点，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 此时s1指针位于前半部分的最后，直接返回s1即可。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s2 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pre;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ListNode</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里获取了链表的中间结点</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode mid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findMiddleNode</span><span style="color:#E1E4E8;">(head);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 拿到链表的中间结点之后，可以得到链表的后半部分的开头</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mid.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 把链表拆分为两半</span></span>
<span class="line"><span style="color:#E1E4E8;">        mid.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 返回两个链表的头部</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ListNode</span><span style="color:#E1E4E8;">[]{head, back};</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">findMiddleNode</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意这里转化为带假头的链表，免去了空链表的判断</span></span>
<span class="line"><span style="color:#24292E;">        ListNode dummy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        dummy.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意，假头并不算是链表的一部分，所以这里是从head开始走</span></span>
<span class="line"><span style="color:#24292E;">        ListNode s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        ListNode s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// dummy就是head的前驱，所以pre要指向dummy.</span></span>
<span class="line"><span style="color:#24292E;">        ListNode pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummy;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 两个指针开始同时走</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 因为s2指针每次都要走两步，所以判空需要这样判断。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s2 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> s2.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1;</span></span>
<span class="line"><span style="color:#24292E;">            s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1.next;</span></span>
<span class="line"><span style="color:#24292E;">            s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s2.next.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当有偶数个结点的时候，s2是空指针，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 此时，s1位于后半部分指针的头部，因此需要返回s1的前驱。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当有奇数个结点的时候，s2是最后一个结点，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 此时s1指针位于前半部分的最后，直接返回s1即可。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pre;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ListNode</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里获取了链表的中间结点</span></span>
<span class="line"><span style="color:#24292E;">        ListNode mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findMiddleNode</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 拿到链表的中间结点之后，可以得到链表的后半部分的开头</span></span>
<span class="line"><span style="color:#24292E;">        ListNode back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid.next;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 把链表拆分为两半</span></span>
<span class="line"><span style="color:#24292E;">        mid.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回两个链表的头部</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ListNode</span><span style="color:#24292E;">[]{head, back};</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/splitList.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/splitList.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/splitList.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)。</p><p>【<strong>小结</strong> 】这道题的核心就是<strong>如何通过双指针找到链表的中间结点</strong>。考点还是清晰明了，我们可以再将双指针的分析要点总结如下：</p>`,6),L=p('<p>不过对于这道题，我想给你留几个<strong>有趣的小问题</strong>，可以帮助你加深代码的理解，希望你可以尝试回答以下两个问题，并写在留言区，我们一起讨论。</p><ul><li><p>为什么没有判断空链表，对于空链表的支持是怎么完成的？</p></li><li><p>为什么 s1, s2 要从 head 开始走，如果从 dummy 开始走可以吗？如果可以，会有什么样的代码改动？</p></li></ul><p><strong>练习题 6：</strong> 将一个链表进行重排，如果我们用 L[x] 表示链表的第 x 个结点（从 0 开始）。将链表 L[0]-&gt;L[1]-&gt;L[2]-&gt;L[3]-&gt; .... -&gt;L[N-1] 重新排列为 L[0]-&gt;L[N-1]-&gt;L[1]-&gt;L[N-2]-&gt;L[2]-&gt;L[N-3].....。</p><p>输入：1-&gt;2-&gt;3-&gt;4-&gt;5</p><p>输出：1-&gt;5-&gt;2-&gt;4-&gt;3</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/143.%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/143.%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/143.%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><h4 id="例-7-链表环问题" tabindex="-1">例 7：链表环问题 <a class="header-anchor" href="#例-7-链表环问题" aria-label="Permalink to &quot;例 7：链表环问题&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个链表，原本的链表尾巴如果不为空，并且指向了链表的中间结点，这样我们就认为这个链表存在一个环。给定一个链表，判断链表中是否存在环？</p>',8),f=n("p",null,[s("【"),n("strong",null,"分析"),s("】首先，如果链表中存在环，只用一个指针遍历肯定是永无止境的，这一个指针会在环里面打转。因此，我们可以再次利用双指针，s1，s2 两个指针都从链表头开始，s1 指针表示每次只往前走一步，s2 指针则是每次只往前走两步。那么链表最终只有两种情况：")],-1),x=n("p",null,[n("strong",null,"1"),s(".s1 == s2，这个时候链表存在环；")],-1),N=n("p",null,[n("strong",null,"2"),s(".s1 != s2，这个时候链表不存在环。")],-1),v=p(`<p>不过我们还是需要处理<strong>两种边界条件</strong>：</p><ol><li><p>当为空链表的时候，s1 == s2，但是实际上此时链表无环；</p></li><li><p>当链表中只存在一个结点，并且无环的时候，运行的结果也会是 s1 == s2。</p></li></ol><p>这两种边界条件的处理，只需要特殊判断一下即可。</p><p>【<strong>代码</strong>】有了前面了思路，那么我们就可以写出解问题的代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasCycle</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 空链表和只有一个结点的链表的实现。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (head </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> head.next </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 分别设置两个快慢指针，他们都从head出发。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// s1表示慢指针，一次只走一步</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// s2表示快指针，一次走两步</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 开始走动两个指针，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当相遇到的时候就停下来</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s2 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> s2.next </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s2.next.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 判断是否有环。如果有环，那么两个指针必定相遇。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasCycle</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 空链表和只有一个结点的链表的实现。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> head.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 分别设置两个快慢指针，他们都从head出发。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// s1表示慢指针，一次只走一步</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// s2表示快指针，一次走两步</span></span>
<span class="line"><span style="color:#24292E;">        ListNode s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        ListNode s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 开始走动两个指针，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当相遇到的时候就停下来</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s2 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> s2.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s2.next.next;</span></span>
<span class="line"><span style="color:#24292E;">            s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1.next;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 判断是否有环。如果有环，那么两个指针必定相遇。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度为 O(N)，空间复杂度为 O(1)。</p><p>【<strong>小结</strong>】至此，我们完成了快慢指针的学习，可以在知识图谱中加上链表环问题了，如下图所示：</p>`,8),T=n("p",null,[s("这里我还想给你留一个"),n("strong",null,"小问题"),s("：在寻找链表环的过程中，对于两种特殊情况，我们实际上进行了特殊判断，那么有没有什么办法可以避免这种特殊的断呢？")],-1),P=n("p",null,"小提示：想想我们之前学习过的假头。",-1),S=n("p",null,"老规矩，希望你尝试思考并把想法写在留言区，期待和你一起讨论。另外，我也会根据大家的留言反馈，不定时输出加餐内容，比如练习题详解、留言区问题点评等。",-1),q=n("p",null,[s("【"),n("strong",null,"扩展"),s("】在面试中，伴随着链表环问题的，往往还有后招：如果链表中存在环，能不能把形成环的那个结点找出来？")],-1),w=n("p",null,"我们可以把这个问题转化成一个数学问题。我们一起看一下下面这张图：",-1),j=p(`<p>这里我们只考虑链表存在环的情况。假设 s1 慢指针与 s2 快指针在环中某个位置相遇。此时：</p><ul><li><p>s1 指针走过的路径长度为 a = x + y</p></li><li><p>s2 指针走过的路径长度为 b = x + y + n * (y + z)</p></li></ul><p>由于两个指针都是从同一个地点出发，s2 指针走得更快，那么走的长度肯定是 s1 指针的两倍。所以可以得到 b = 2a，即 b = x + y + n * (y + z) = 2x + 2y</p><p>由此，可以推导出 x = n * (y + z) - y = (n-1)*(y+z) + z，即 x - z = (n-1) * (y + z)</p><p>从 x-z 表达式可以看出，如果有两个指针同时从<strong>头结点，相遇结点</strong>这两个地方出发，它们肯定会在环形入口相遇。因为它**们之间的差值刚好是圆环长度的整数倍（**更加严格一点的证明可以用数学归纳法）。</p><p>经过数学证明，我们可以写出求解代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">detectCycle</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里都是判断链表是否存在环</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (head </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> head.next </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s2 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> s2.next </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s2.next.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当不存在链表环的时候，直接返回null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s1 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> s2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// s1指针重新指向链表head，从head出发</span></span>
<span class="line"><span style="color:#E1E4E8;">        s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// s2指针此时位于相遇的位置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 然后两个指针一起走</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s1 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> s2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s2.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 返回环形的入口结点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s1;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">detectCycle</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里都是判断链表是否存在环</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> head.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ListNode s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        ListNode s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s2 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> s2.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1.next;</span></span>
<span class="line"><span style="color:#24292E;">            s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s2.next.next;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当不存在链表环的时候，直接返回null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> s2) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// s1指针重新指向链表head，从head出发</span></span>
<span class="line"><span style="color:#24292E;">        s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// s2指针此时位于相遇的位置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 然后两个指针一起走</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> s2) {</span></span>
<span class="line"><span style="color:#24292E;">            s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1.next;</span></span>
<span class="line"><span style="color:#24292E;">            s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s2.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回环形的入口结点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-ii.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-ii.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/05.LinkedList/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-ii.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度为 O(N)，空间复杂度为 O(1)。</p><h3 id="总结与延伸" tabindex="-1">总结与延伸 <a class="header-anchor" href="#总结与延伸" aria-label="Permalink to &quot;总结与延伸&quot;">​</a></h3><p>经过这两讲的学习，你终于可以用这三板斧来毒打链表题了，在抄家伙之前，我们一起回想下每招式的作用吧。</p><ul><li><p><strong>第一斧：假头</strong>。假头的作用主要是避免关于空链表的判断与讨论，假头还可以用来避免检查前驱结点为空的情况。</p></li><li><p><strong>第二斧：新链表</strong>。新链表的引入是为了解决在旧链表中进行原地的交换、插入、删除，把复杂的操作变成在新链表中头部插入或者尾部添加。</p></li><li><p><strong>第三斧：双指针</strong>。双指针主要是用于寻找链表中的特定结点，双指针的走法可以一次一步，可以有快有慢，出发点也可以有前有后。</p></li></ul><p>了解了思路，你还需要深入理解操作的代码模板，然后就可以成功地进行解题实战了。这里我已经为你总结好了《<strong>链表题通关路线图</strong>》，请参照此地图来通关链表题吧。</p>`,13),I=p('<p><strong>链表操作是很多其他复杂算法的基础，需要你熟练掌握，比如 LRU，跳表等数据结构里面都会用到链表。希望你课后能熟练地运行本讲介绍的思路</strong>。</p><p>此外，从算法的难度上来说，实际上链表题并不算太难，但是非常考验基本功。我在处理链表题时，经常把文中介绍的题目作为模板深刻理解，达到熟练记忆的程度。我希望你在理解解题思路的基础上，也能够熟练记忆这些模板，逐渐建立一个系统的知识体系。</p><h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><p>最后，我再给你留一道<strong>思考题。</strong></p><p>链表排序：给定一个单向链表，如何给这个链表排序，要求复杂度达到 O(nlogn)。</p><ul><li><p>你能使用所讲的创建新链表 + 快排的思想吗？</p></li><li><p>你能使用快慢指针 + 合并排序的思想来解决吗？</p></li></ul><blockquote><p>解法 1：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.py" target="_blank" rel="noreferrer">Python</a></p><p>解法 2：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.qsort.java" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.qsort.cpp" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.qsort.py" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>学会了链表的三板斧，处理链表问题，变得越来越容易了。不过我们可不能总是待在舒适区，还有很多算法与数结构等着我们去征服。下一讲将介绍 06 | 树：如何深度运用树的遍历？记得按时来探险。</p>',8);function W(V,O,M,J,R,H){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"1.gif",src:"https://s0.lgstatic.com/i/image6/M01/1A/58/Cgp9HWBLPB-ADUhLAA5duiC4Cn0341.gif"}),s(),y,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/55/CioPOWBLPCqAFbDdAAEIj8hvRD4018.png"}),s(),i,l(a,{alt:"2.gif",src:"https://s0.lgstatic.com/i/image6/M00/1A/58/Cgp9HWBLPDmACYnZABNjwPGgFOE315.gif"}),s(),A,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/56/CioPOWBLPEiANaaFAAGpHYE1Luw914.png"}),s(),d,l(a,{alt:"3.gif",src:"https://s0.lgstatic.com/i/image6/M00/1A/56/CioPOWBLPFmAUvWfABh66BN8Jpo146.gif"}),s(),g,l(a,{alt:"4.gif",src:"https://s0.lgstatic.com/i/image6/M00/1A/56/CioPOWBLPHmASuS0ABO8i1nbo5k731.gif"}),s(),u,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/59/Cgp9HWBLPIuABvdjAAIdeUzaIaE820.png"}),s(),D,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/56/CioPOWBLPJiAJuL5AACldcUHsSo093.png"}),s(),h,m,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/5A/Cgp9HWBLPKGAed19AADYq0JsnnQ189.png"}),s(),F,l(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/5A/Cgp9HWBLPKmAX36bAADfNLuJxK4304.png"}),s(),b,l(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/5A/Cgp9HWBLPLCAIVQrAADfNLuJxK4542.png"}),s(),_,l(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/5A/Cgp9HWBLPL2AMjj9AACVkYTuuog333.png"}),s(),B,l(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/57/CioPOWBLPOWAC7-qAADDfwOq_28981.png"}),s(),k,l(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M00/1A/5B/Cgp9HWBLPOuAGwrJAADd3JbVNuk045.png"}),s(),C,l(a,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/5B/Cgp9HWBLPPiAZ1ICAACcFHDKHnU280.png"}),s(),L,l(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image6/M00/1D/11/Cgp9HWBPHjeAJc-1AACG-G5vmvk152.png"}),s(),f,x,l(a,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/58/CioPOWBLPQ-ARKeiAABYprWvhEY284.png"}),s(),N,l(a,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/58/CioPOWBLPRyAebn8AABOBQ3Pto0204.png"}),s(),v,l(a,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/5B/Cgp9HWBLPS2AWdvLAACf7D3G1jI099.png"}),s(),T,P,S,q,l(a,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/58/CioPOWBLPTWAavliAAC_v6RSPzw758.png"}),s(),w,l(a,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image6/M01/1A/58/CioPOWBLPTuAR6wcAACC03BCByU232.png"}),s(),j,l(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/3E/39/CioPOWCYmIWAFXX4AASqbS526bc322.png"}),s(),I])}const G=o(c,[["render",W]]);export{U as __pageData,G as default};
