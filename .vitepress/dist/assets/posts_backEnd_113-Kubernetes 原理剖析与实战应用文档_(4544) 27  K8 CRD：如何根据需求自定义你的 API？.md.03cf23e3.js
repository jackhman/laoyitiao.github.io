import{_ as n,j as p,o as l,g as e,k as o,h as c,Q as s}from"./chunks/framework.4e7d56ce.js";const g=JSON.parse('{"title":"聚合 API ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4544) 27  K8 CRD：如何根据需求自定义你的 API？.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4544) 27  K8 CRD：如何根据需求自定义你的 API？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4544) 27  K8 CRD：如何根据需求自定义你的 API？.md"},r=s(`<p>你好，我是正范。</p><p>随着使用的深入，你会发现 Kubernetes 中内置的对象定义，比如 Deployment、StatefulSet、Configmap，可能已经不能满足你的需求了。你很希望在 Kubernetes 定义一些自己的对象，一来可以通过 kube-apiserver 提供统一的访问入口，二来可以像其他内置对象一样，通过 kubectl 命令管理这些自定义的对象。</p><p>Kubernetes 中提供了两种自定义对象的方式，一种是聚合 API，另一种是 CRD。</p><p>我们今天就来看看。</p><h3 id="聚合-api" tabindex="-1">聚合 API <a class="header-anchor" href="#聚合-api" aria-label="Permalink to &quot;聚合 API&quot;">​</a></h3><p>聚合 API（Aggregation API，AA）是自 Kubernetes v1.7 版本就引入的功能，主要目的是方便用户将自己定义的 API 注册到 kube-apiserver 中，并且可以像使用其他内置的 API 一样，通过 APIServer 的 URL 就可以访问和操作。</p><p>在使用 API 聚合之前，我们还需要通过一些参数在 kube-apiserver 中启用这个功能：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">--requestheader-client-ca-file</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aggregator</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CA</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cer</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">--requestheader-allowed-names</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">front-proxy-client</span></span>
<span class="line"><span style="color:#E1E4E8;">--requestheader-extra-headers-prefix</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">X-Remote-Extra-</span></span>
<span class="line"><span style="color:#E1E4E8;">--requestheader-group-headers</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">X-Remote-Group</span></span>
<span class="line"><span style="color:#E1E4E8;">--requestheader-username-headers</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">X-Remote-User</span></span>
<span class="line"><span style="color:#E1E4E8;">--proxy-client-cert-file</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aggregator</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cer</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">--proxy-client-key-file</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aggregator</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ke</span><span style="color:#E1E4E8;">y</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">--requestheader-client-ca-file</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aggregator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CA</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cer</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">--requestheader-allowed-names</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">front-proxy-client</span></span>
<span class="line"><span style="color:#24292E;">--requestheader-extra-headers-prefix</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">X-Remote-Extra-</span></span>
<span class="line"><span style="color:#24292E;">--requestheader-group-headers</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">X-Remote-Group</span></span>
<span class="line"><span style="color:#24292E;">--requestheader-username-headers</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">X-Remote-User</span></span>
<span class="line"><span style="color:#24292E;">--proxy-client-cert-file</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aggregator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cer</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">--proxy-client-key-file</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aggregator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ke</span><span style="color:#24292E;">y</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>Kubernetes 在 kube-apiserver 中引入了一个 API 聚合层（API Aggregation Layer），可以将访问请求转发到后端用户自己的扩展 APIServer 中。你可以参考这个<a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/setup-extension-api-server/" target="_blank" rel="noreferrer">文档</a>学习如何安装一个扩展的 APIServer。当然，扩展的 APIServer 需要你自己修改并实现相关的代码逻辑。</p><ul><li><p>Kubernetes apiserver 会判断 --requestheader-client-ca-file 指定的 CA 证书中的 CN 是否是 --requestheader-allowed-names 提供的列表名称之一。如果不是，则该请求被拒绝。如果名称允许，则请求会被转发。</p></li><li><p>接着 Kubernetes apiserver 将使用由 --proxy-client-*-file 指定的文件来访问用户的扩展 APIServer。</p></li></ul><p>下图就是用户发起请求后一个完整的身份认证流程，你可以阅读<a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/configure-aggregation-layer/#%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B" target="_blank" rel="noreferrer">官方文档</a>来详细了解步骤 。</p>`,11),E=s(`<p>图 1：一个完整的身份认证流程</p><p>配置好了上述参数后， 为了让 kube-apiserver 知道我们自定义的 API，我们需要创建一个 APIService 的对象，比如：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apiregistration.k8s.io/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">APIService</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1alpha1.wardle.example.com</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 对象名称</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">insecureSkipTLSVerify</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">group</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">wardle.example.com</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 的 API group 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">groupPriorityMinimum</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># APIService 对对应 group 的优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">versionPriority</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 优先考虑 version 在 group 中的排序</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapi</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 服务的 name</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">wardle</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 服务的 namespace </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1alpha1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 的 API version</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apiregistration.k8s.io/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">APIService</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1alpha1.wardle.example.com</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 对象名称</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">insecureSkipTLSVerify</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">group</span><span style="color:#24292E;">: </span><span style="color:#032F62;">wardle.example.com</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 的 API group 名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">groupPriorityMinimum</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># APIService 对对应 group 的优先级</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">versionPriority</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">15</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 优先考虑 version 在 group 中的排序</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">service</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapi</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 服务的 name</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">wardle</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 服务的 namespace </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1alpha1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 扩展 Apiserver 的 API version</span></span></code></pre></div><p>通过上述 YAML 文件，我们就在 kube-apiserver 中创建一个 API 对象组，其对应的组（Group）为 wardle.example.com，版本号为 v1alpha1。创建成功后，我们就可以通过 /apis/wardle.example.com/v1alpha1 这个路径访问了。至于这个对象组里提供了哪些对象，就需要我们在扩展的 APIServer 中声明出来了。</p><p>那 kube-apiserver 又是怎么知道将 /apis/wardle.example.com/v1alpha1 这个路径的所有请求转发到后端的扩展 APIServer 中的呢？我们注意到上面的 APIService 定义中，还有一个 spec.service 字段，就是在这里，我们指定了扩展 APIServer 的服务名，也就是说 kube-apiserver 会将 /apis/wardle.example.com/v1alpha1 这个路径的所有访问通过 API 聚合层转发到后端的服务 myapi.wardle.svc 上。</p><p>扩展 APIServer 的具体代码设计及逻辑，你可以参考<a href="https://github.com/kubernetes/sample-apiserver" target="_blank" rel="noreferrer">sample-apiserver</a>或者使用<a href="https://github.com/kubernetes-incubator/apiserver-builder" target="_blank" rel="noreferrer">apiserver-builder</a>。</p><p>这种聚合 API 的方式对代码要求很高，但支持对 API 行为进行完全的掌控，比如你可以自己定义数据如何存储、API 各个版本的切换、各个对象的逻辑控制。</p><p>如果你只想简简单单地在 Kubernetes 中定义个对象，可以直接通过下面要介绍的 CRD 定义。</p><h3 id="crd" tabindex="-1">CRD <a class="header-anchor" href="#crd" aria-label="Permalink to &quot;CRD&quot;">​</a></h3><p>CRD（CustomResourceDefinitions）在 v1.7 刚引入进来的时候，其实是 ThirdPartyResources（TPR）的升级版本，而 TPR 在 v1.8 的版本被剔除了。CRD 目前使用非常广泛，各个周边项目都在使用它，比如 Ingress、Rancher。</p><p>我们来看一下官方的一个例子，通过如下的 YAML 文件，我们可以创建一个 API：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apiextensions.k8s.io/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">CustomResourceDefinition</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 名字必须与下面的 spec 字段匹配，并且格式为 &#39;&lt;名称的复数形式&gt;.&lt;组名&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">crontabs.stable.example.com</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 组名称，用于 REST API: /apis/&lt;组&gt;/&lt;版本&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">group</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">stable.example.com</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 列举此 CustomResourceDefinition 所支持的版本</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">versions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 每个版本都可以通过 served 标志来独立启用或禁止</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">served</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 其中一个且只有一个版本必需被标记为存储版本</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">storage</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">schema</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">openAPIV3Schema</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">cronSpec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">integer</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 可以是 Namespaced 或 Cluster</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Namespaced</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">names</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 名称的复数形式，用于 URL：/apis/&lt;组&gt;/&lt;版本&gt;/&lt;名称的复数形式&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">plural</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">crontabs</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 名称的单数形式，作为命令行使用时和显示时的别名</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">singular</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">crontab</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># kind 通常是单数形式的驼峰编码（CamelCased）形式。你的资源清单会使用这一形式。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">CronTab</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># shortNames 允许你在命令行使用较短的字符串来匹配资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">shortNames</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">ct</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apiextensions.k8s.io/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">CustomResourceDefinition</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 名字必须与下面的 spec 字段匹配，并且格式为 &#39;&lt;名称的复数形式&gt;.&lt;组名&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">crontabs.stable.example.com</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 组名称，用于 REST API: /apis/&lt;组&gt;/&lt;版本&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">group</span><span style="color:#24292E;">: </span><span style="color:#032F62;">stable.example.com</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 列举此 CustomResourceDefinition 所支持的版本</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">versions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 每个版本都可以通过 served 标志来独立启用或禁止</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">served</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 其中一个且只有一个版本必需被标记为存储版本</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">storage</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">schema</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">openAPIV3Schema</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">cronSpec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">image</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">integer</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 可以是 Namespaced 或 Cluster</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">scope</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Namespaced</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">names</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 名称的复数形式，用于 URL：/apis/&lt;组&gt;/&lt;版本&gt;/&lt;名称的复数形式&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">plural</span><span style="color:#24292E;">: </span><span style="color:#032F62;">crontabs</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 名称的单数形式，作为命令行使用时和显示时的别名</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">singular</span><span style="color:#24292E;">: </span><span style="color:#032F62;">crontab</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># kind 通常是单数形式的驼峰编码（CamelCased）形式。你的资源清单会使用这一形式。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">CronTab</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># shortNames 允许你在命令行使用较短的字符串来匹配资源</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">shortNames</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">ct</span></span></code></pre></div><p>我们可以像创建其他对象一样，通过 kubectl create 命令创建。创建好了以后，一个类型为 CronTab 的对象就在 kube-apiserver 中注册好了，你可以通过如下的 REST 接口访问，比如 LIST 命名空间 ns1 下的 CronTab 对象，可以通过这个 URL&quot;/apis/stable.example.com/v1/namespaces/ns1/crontabs/&quot;访问。这种接口跟 Kubernetes 内置的其他对象的接口风格是一模一样的。</p><p>声明好了 CronTab，下面我们就来看看如何创建一个 CronTab 类型的对象。我们来看看官方给的一个例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;stable.example.com/v1&quot;</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">CronTab</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">my-new-cron-object</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cronSpec</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;* * * * */5&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">my-awesome-cron-image</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;stable.example.com/v1&quot;</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">CronTab</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">my-new-cron-object</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cronSpec</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;* * * * */5&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">my-awesome-cron-image</span></span></code></pre></div><p>通过 kubectl create 创建 my-new-cron-object 后，就可以通过 kubectl get 查看，并使用 kubectl 管理你的 CronTab 对象了。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">kubectl get crontab</span></span>
<span class="line"><span style="color:#E1E4E8;">NAME                 AGE</span></span>
<span class="line"><span style="color:#E1E4E8;">my</span><span style="color:#F97583;">-new-</span><span style="color:#E1E4E8;">cron</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">object   6s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">kubectl get crontab</span></span>
<span class="line"><span style="color:#24292E;">NAME                 AGE</span></span>
<span class="line"><span style="color:#24292E;">my</span><span style="color:#D73A49;">-new-</span><span style="color:#24292E;">cron</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">object   6s</span></span></code></pre></div><p>这里的资源名是大小写不敏感的，我们在这里可以使用缩写 kubectl get ct，也可以使用 kubectl get crontabs。</p><p>同时原生内置的 API 对象一样，这些 CRD 不仅可以通过 kubectl 来创建、查看、修改，删除等操作，还可以给其配置 RBAC 规则。</p><p>我们还能开发自定义的控制器，来感知和操作这些自定义的 API。这一部分我会在下一讲中介绍。</p><p>我们在创建 CRD 的时候，还可以一起定义 /status 和 /scale 子资源，如下所示：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apiextensions.k8s.io/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">CustomResourceDefinition</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">crontabs.stable.example.com</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">group</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">stable.example.com</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">versions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">served</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">storage</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">schema</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">openAPIV3Schema</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">cronSpec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">integer</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">integer</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">labelSelector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># subresources 描述定制资源的子资源</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">subresources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># status 启用 status 子资源</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># scale 启用 scale 子资源</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">scale</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;"># specReplicasPath 定义定制资源中对应 scale.spec.replicas 的 JSON 路径</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">specReplicasPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">.spec.replicas</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;"># statusReplicasPath 定义定制资源中对应 scale.status.replicas 的 JSON 路径 </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">statusReplicasPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">.status.replicas</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;"># labelSelectorPath  定义定制资源中对应 scale.status.selector 的 JSON 路径 </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">labelSelectorPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">.status.labelSelector</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Namespaced</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">names</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">plural</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">crontabs</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">singular</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">crontab</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">CronTab</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">shortNames</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">ct</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apiextensions.k8s.io/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">CustomResourceDefinition</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">crontabs.stable.example.com</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">group</span><span style="color:#24292E;">: </span><span style="color:#032F62;">stable.example.com</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">versions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">served</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">storage</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">schema</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">openAPIV3Schema</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">cronSpec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">image</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">integer</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">status</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">integer</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">labelSelector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">string</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># subresources 描述定制资源的子资源</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">subresources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># status 启用 status 子资源</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">status</span><span style="color:#24292E;">: {}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># scale 启用 scale 子资源</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">scale</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;"># specReplicasPath 定义定制资源中对应 scale.spec.replicas 的 JSON 路径</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">specReplicasPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">.spec.replicas</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;"># statusReplicasPath 定义定制资源中对应 scale.status.replicas 的 JSON 路径 </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">statusReplicasPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">.status.replicas</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;"># labelSelectorPath  定义定制资源中对应 scale.status.selector 的 JSON 路径 </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">labelSelectorPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">.status.labelSelector</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">scope</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Namespaced</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">names</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">plural</span><span style="color:#24292E;">: </span><span style="color:#032F62;">crontabs</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">singular</span><span style="color:#24292E;">: </span><span style="color:#032F62;">crontab</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">CronTab</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">shortNames</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">ct</span></span></code></pre></div><p>这些子资源的定义，可以帮助我们在更新对象的时候，只更改期望的部分，比如只更新 status 部分，避免误更新 spec 部分。</p><p>同时 CRD 定义的时候还支持<a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#validation" target="_blank" rel="noreferrer">合法性检查</a>、<a href="https://kubernetes.io/zh/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#efaulting" target="_blank" rel="noreferrer">设置默认值</a>等操作，你可以参照文档来实践。</p><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>当然，你也可以选择在其他地方定义新的 API，你可以参考这份<a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/api-extension/custom-resources/#%E6%88%91%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E5%90%91%E6%88%91%E7%9A%84-kubernetes-%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0%E5%AE%9A%E5%88%B6%E8%B5%84%E6%BA%90" target="_blank" rel="noreferrer">文档</a>确定是否需要在 Kubernetes 中定义 API，还是让你的 API 独立运行。</p><p>你可以通过这个<a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/api-extension/custom-resources/#advanced-features-and-flexibility" target="_blank" rel="noreferrer">网址</a>中的内容来比较 CRD 和 聚合 API 的功能差异。简单来说，CRD 更为易用，而聚合 API 更为灵活。</p><p>Kubernetes 提供这两种选项以满足不同用户的需求，这样就既不会牺牲易用性也不会牺牲灵活性。</p><p>对于聚合 API 和 CRD，你还有什么问题的话，欢迎在留言区留言。</p><p>下一讲，我将介绍如何通过 Operator 扩展 Kubernetes API。</p>`,30);function y(i,A,u,F,d,m){const a=p("Image");return l(),e("div",null,[r,o(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/71/C8/CgqCHl-_cp6AR0muAAIPqi0uDMk927.png"}),c(),E])}const b=n(t,[["render",y]]);export{g as __pageData,b as default};
