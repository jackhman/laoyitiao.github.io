import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const b=JSON.parse('{"title":"Request 和 Response ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4819) 21  Exchange 层剖析：彻底搞懂 Requet-Repone 模型（上）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4819) 21  Exchange 层剖析：彻底搞懂 Requet-Repone 模型（上）.md","lastUpdated":null}'),p={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4819) 21  Exchange 层剖析：彻底搞懂 Requet-Repone 模型（上）.md"},e=l(`<p>在前面的课程中，我们深入介绍了 Dubbo Remoting 中的 Transport 层，了解了 Dubbo 抽象出来的端到端的统一传输层接口，并分析了以 Netty 为基础的相关实现。当然，其他 NIO 框架的接入也是类似的，本课程就不再展开赘述了。</p><p>在本课时中，我们将介绍 Transport 层的上一层，也是 Dubbo Remoting 层中的最顶层------ Exchange 层。<strong>Dubbo 将信息交换行为抽象成 Exchange 层，官方文档对这一层的说明是：封装了请求-响应的语义，即关注一问一答的交互模式，实现了同步转异步</strong>。在 Exchange 这一层，以 Request 和 Response 为中心，针对 Channel、ChannelHandler、Client、RemotingServer 等接口进行实现。</p><p>下面我们从 Request 和 Response 这一对基础类开始，依次介绍 Exchange 层中 ExchangeChannel、HeaderExchangeHandler 的核心实现。</p><h3 id="request-和-response" tabindex="-1">Request 和 Response <a class="header-anchor" href="#request-和-response" aria-label="Permalink to &quot;Request 和 Response&quot;">​</a></h3><p>Exchange 层的 Request 和 Response 这两个类是 Exchange 层的核心对象，是对请求和响应的抽象。我们先来看<strong>Request 类</strong>的核心字段：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用于生成请求的自增ID，当递增到Long.MAX_VALUE之后，会溢出到Long.MIN_VALUE，我们可以继续使用该负数作为消息ID</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AtomicLong INVOKE_ID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> mId; </span><span style="color:#6A737D;">// 请求的ID</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String mVersion; </span><span style="color:#6A737D;">// 请求版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求的双向标识，如果该字段设置为true，则Server端在收到请求后，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 需要给Client返回一个响应</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> mTwoWay </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 事件标识，例如心跳请求、只读请求等，都会带有这个标识</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> mEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求发送到Server之后，由Decoder将二进制数据解码成Request对象，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果解码环节遇到异常，则会设置该标识，然后交由其他ChannelHandler根据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该标识做进一步处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> mBroken </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求体，可以是任何Java类型的对象,也可以是null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Object mData; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用于生成请求的自增ID，当递增到Long.MAX_VALUE之后，会溢出到Long.MIN_VALUE，我们可以继续使用该负数作为消息ID</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AtomicLong INVOKE_ID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> mId; </span><span style="color:#6A737D;">// 请求的ID</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String mVersion; </span><span style="color:#6A737D;">// 请求版本号</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求的双向标识，如果该字段设置为true，则Server端在收到请求后，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 需要给Client返回一个响应</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> mTwoWay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 事件标识，例如心跳请求、只读请求等，都会带有这个标识</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> mEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求发送到Server之后，由Decoder将二进制数据解码成Request对象，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果解码环节遇到异常，则会设置该标识，然后交由其他ChannelHandler根据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该标识做进一步处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> mBroken </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求体，可以是任何Java类型的对象,也可以是null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Object mData; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>接下来是 Response 的核心字段：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应ID，与相应请求的ID一致</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> mId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当前协议的版本号，与请求消息的版本号一致</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String mVersion;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应状态码，有OK、CLIENT_TIMEOUT、SERVER_TIMEOUT等10多个可选值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> mStatus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OK; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> mEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String mErrorMsg; </span><span style="color:#6A737D;">// 可读的错误响应消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Object mResult; </span><span style="color:#6A737D;">// 响应体</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应ID，与相应请求的ID一致</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> mId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当前协议的版本号，与请求消息的版本号一致</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String mVersion;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应状态码，有OK、CLIENT_TIMEOUT、SERVER_TIMEOUT等10多个可选值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> mStatus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OK; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> mEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String mErrorMsg; </span><span style="color:#6A737D;">// 可读的错误响应消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Object mResult; </span><span style="color:#6A737D;">// 响应体</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="exchangechannel-defaultfuture" tabindex="-1">ExchangeChannel &amp; DefaultFuture <a class="header-anchor" href="#exchangechannel-defaultfuture" aria-label="Permalink to &quot;ExchangeChannel \\&amp; DefaultFuture&quot;">​</a></h3><p>在前面的课时中，我们介绍了 Channel 接口的功能以及 Transport 层对 Channel 接口的实现。在 Exchange 层中定义了 ExchangeChannel 接口，它在 Channel 接口之上抽象了 Exchange 层的网络连接。ExchangeChannel 接口的定义如下：</p><p><img src="https://s0.lgstatic.com/i/image/M00/5A/32/Ciqc1F90Q-OAE4K1AADklLgEs0k481.png" alt="Drawing 0.png"><br> ExchangeChannel 接口</p><p>其中，request() 方法负责发送请求，从图中可以看到这里有两个重载，其中一个重载可以指定请求的超时时间，返回值都是 Future 对象。</p><p><img src="https://s0.lgstatic.com/i/image/M00/5A/3D/CgqCHl90Q_SAIt4sAAAzhH5TZiw571.png" alt="Drawing 1.png"><br> HeaderExchangeChannel 继承关系图</p><p><strong>从上图中可以看出，HeaderExchangeChannel 是 ExchangeChannel 的实现</strong>，它本身是 Channel 的装饰器，封装了一个 Channel 对象，其 send() 方法和 request() 方法的实现都是依赖底层修饰的这个 Channel 对象实现的。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(Object message, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> sent) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Request </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Response</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> String) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        channel.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(message, sent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Request request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        request.</span><span style="color:#B392F0;">setVersion</span><span style="color:#E1E4E8;">(Version.</span><span style="color:#B392F0;">getProtocolVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        request.</span><span style="color:#B392F0;">setTwoWay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        request.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">        channel.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(request, sent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(Object request, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout, ExecutorService executor) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Request req </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 创建Request对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    req.</span><span style="color:#B392F0;">setVersion</span><span style="color:#E1E4E8;">(Version.</span><span style="color:#B392F0;">getProtocolVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    req.</span><span style="color:#B392F0;">setTwoWay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    req.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    DefaultFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultFuture.</span><span style="color:#B392F0;">newFuture</span><span style="color:#E1E4E8;">(channel, </span></span>
<span class="line"><span style="color:#E1E4E8;">       req, timeout, executor); </span><span style="color:#6A737D;">// 创建DefaultFuture</span></span>
<span class="line"><span style="color:#E1E4E8;">    channel.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(req);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> future;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(Object message, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> sent) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Request </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Response</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> String) {</span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(message, sent);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Request request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(Version.</span><span style="color:#6F42C1;">getProtocolVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">setTwoWay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(request, sent);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(Object request, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout, ExecutorService executor) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    Request req </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 创建Request对象</span></span>
<span class="line"><span style="color:#24292E;">    req.</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(Version.</span><span style="color:#6F42C1;">getProtocolVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    req.</span><span style="color:#6F42C1;">setTwoWay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    req.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    DefaultFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultFuture.</span><span style="color:#6F42C1;">newFuture</span><span style="color:#24292E;">(channel, </span></span>
<span class="line"><span style="color:#24292E;">       req, timeout, executor); </span><span style="color:#6A737D;">// 创建DefaultFuture</span></span>
<span class="line"><span style="color:#24292E;">    channel.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(req);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> future;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>注意这里的 request() 方法，它返回的是一个 DefaultFuture 对象。通过前面课时的介绍我们知道，io.netty.channel.Channel 的 send() 方法会返回一个 ChannelFuture 方法，表示此次发送操作是否完成，而这里的<strong>DefaultFuture 就表示此次请求-响应是否完成，也就是说，要收到响应为 Future 才算完成</strong>。</p><p>下面我们就来深入介绍一下请求发送过程中涉及的 DefaultFuture 以及HeaderExchangeChannel的内容。</p><p>首先来了解一下 DefaultFuture 的具体实现，它继承了 JDK 中的 CompletableFuture，其中维护了两个 static 集合。</p><ul><li><p>CHANNELS（Map&lt;Long, Channel&gt;集合）：管理请求与 Channel 之间的关联关系，其中 Key 为请求 ID，Value 为发送请求的 Channel。</p></li><li><p>FUTURES（Map&lt;Long, Channel&gt;集合）：管理请求与 DefaultFuture 之间的关联关系，其中 Key 为请求 ID，Value 为请求对应的 Future。</p></li></ul><p>DefaultFuture 中核心的实例字段包括如下几个。</p><ul><li><p>request（Request 类型）和 id（Long 类型）：对应请求以及请求的 ID。</p></li><li><p>channel（Channel 类型）：发送请求的 Channel。</p></li><li><p>timeout（int 类型）：整个请求-响应交互完成的超时时间。</p></li><li><p>start（long 类型）：该 DefaultFuture 的创建时间。</p></li><li><p>sent（volatile long 类型）：请求发送的时间。</p></li><li><p>timeoutCheckTask（Timeout 类型）：该定时任务到期时，表示对端响应超时。</p></li><li><p>executor（ExecutorService 类型）：请求关联的线程池。</p></li></ul><p>DefaultFuture.newFuture() 方法创建 DefaultFuture 对象时，需要先初始化上述字段，并创建请求相应的超时定时任务：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DefaultFuture </span><span style="color:#B392F0;">newFuture</span><span style="color:#E1E4E8;">(Channel channel, Request request, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout, ExecutorService executor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建DefaultFuture对象，并初始化其中的核心字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DefaultFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultFuture</span><span style="color:#E1E4E8;">(channel, request, timeout);</span></span>
<span class="line"><span style="color:#E1E4E8;">    future.</span><span style="color:#B392F0;">setExecutor</span><span style="color:#E1E4E8;">(executor); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对于ThreadlessExecutor的特殊处理，ThreadlessExecutor可以关联一个waitingFuture，就是这里创建DefaultFuture对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (executor </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ThreadlessExecutor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((ThreadlessExecutor) executor).</span><span style="color:#B392F0;">setWaitingFuture</span><span style="color:#E1E4E8;">(future);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个定时任务，用处理响应超时的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">timeoutCheck</span><span style="color:#E1E4E8;">(future);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> future;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DefaultFuture </span><span style="color:#6F42C1;">newFuture</span><span style="color:#24292E;">(Channel channel, Request request, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout, ExecutorService executor) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建DefaultFuture对象，并初始化其中的核心字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DefaultFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultFuture</span><span style="color:#24292E;">(channel, request, timeout);</span></span>
<span class="line"><span style="color:#24292E;">    future.</span><span style="color:#6F42C1;">setExecutor</span><span style="color:#24292E;">(executor); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对于ThreadlessExecutor的特殊处理，ThreadlessExecutor可以关联一个waitingFuture，就是这里创建DefaultFuture对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (executor </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ThreadlessExecutor) {</span></span>
<span class="line"><span style="color:#24292E;">        ((ThreadlessExecutor) executor).</span><span style="color:#6F42C1;">setWaitingFuture</span><span style="color:#24292E;">(future);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个定时任务，用处理响应超时的情况</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">timeoutCheck</span><span style="color:#24292E;">(future);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> future;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在 HeaderExchangeChannel.request() 方法中完成 DefaultFuture 对象的创建之后，会将请求通过底层的 Dubbo Channel 发送出去，发送过程中会触发沿途 ChannelHandler 的 sent() 方法，其中的 HeaderExchangeHandler 会调用 DefaultFuture.sent() 方法更新 sent 字段，记录请求发送的时间戳。后续如果响应超时，则会将该发送时间戳添加到提示信息中。</p><p>过一段时间之后，Consumer 会收到对端返回的响应，在读取到完整响应之后，会触发 Dubbo Channel 中各个 ChannelHandler 的 received() 方法，其中就包括上一课时介绍的 WrappedChannelHandler。例如，AllChannelHandler 子类会将后续 ChannelHandler.received() 方法的调用封装成任务提交到线程池中，响应会提交到 DefaultFuture 关联的线程池中，如上一课时介绍的 ThreadlessExecutor，然后由业务线程继续后续的 ChannelHandler 调用。（你也可以回顾一下上一课时对 Transport 层 Dispatcher 以及 ThreadlessExecutor 的介绍。）</p><p>当响应传递到 HeaderExchangeHandler 的时候，会通过调用 handleResponse() 方法进行处理，其中调用了 DefaultFuture.received() 方法，该方法会找到响应关联的 DefaultFuture 对象（根据请求 ID 从 FUTURES 集合查找）并调用 doReceived() 方法，将 DefaultFuture 设置为完成状态。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(Channel channel, Response response, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> timeout) { </span><span style="color:#6A737D;">// 省略try/finally代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 清理FUTURES中记录的请求ID与DefaultFuture之间的映射关系</span></span>
<span class="line"><span style="color:#E1E4E8;">    DefaultFuture future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FUTURES.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (future </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Timeout t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.timeoutCheckTask;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">timeout) { </span><span style="color:#6A737D;">// 未超时，取消定时任务</span></span>
<span class="line"><span style="color:#E1E4E8;">            t.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        future.</span><span style="color:#B392F0;">doReceived</span><span style="color:#E1E4E8;">(response); </span><span style="color:#6A737D;">// 调用doReceived()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{ </span><span style="color:#6A737D;">// 查找不到关联的DefaultFuture会打印日志(略)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 清理CHANNELS中记录的请求ID与Channel之间的映射关系</span></span>
<span class="line"><span style="color:#E1E4E8;">    CHANNELS.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// DefaultFuture.doReceived()方法的代码片段</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doReceived</span><span style="color:#E1E4E8;">(Response res) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;response cannot be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Response.OK) { </span><span style="color:#6A737D;">// 正常响应</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">complete</span><span style="color:#E1E4E8;">(res.</span><span style="color:#B392F0;">getResult</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Response.CLIENT_TIMEOUT </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Response.SERVER_TIMEOUT) { </span><span style="color:#6A737D;">// 超时</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">completeExceptionally</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TimeoutException</span><span style="color:#E1E4E8;">(res.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Response.SERVER_TIMEOUT, channel, res.</span><span style="color:#B392F0;">getErrorMessage</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 其他异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">completeExceptionally</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RemotingException</span><span style="color:#E1E4E8;">(channel, res.</span><span style="color:#B392F0;">getErrorMessage</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 下面是针对ThreadlessExecutor的兜底处理，主要是防止业务线程一直阻塞在ThreadlessExecutor上</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (executor </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> executor </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ThreadlessExecutor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ThreadlessExecutor threadlessExecutor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ThreadlessExecutor) executor;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (threadlessExecutor.</span><span style="color:#B392F0;">isWaiting</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// notifyReturn()方法会向ThreadlessExecutor提交一个任务，这样业务线程就不会阻塞了，提交的任务会尝试将DefaultFuture设置为异常结束</span></span>
<span class="line"><span style="color:#E1E4E8;">            threadlessExecutor.</span><span style="color:#B392F0;">notifyReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The result has returned...&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(Channel channel, Response response, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> timeout) { </span><span style="color:#6A737D;">// 省略try/finally代码块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 清理FUTURES中记录的请求ID与DefaultFuture之间的映射关系</span></span>
<span class="line"><span style="color:#24292E;">    DefaultFuture future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FUTURES.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (future </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Timeout t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.timeoutCheckTask;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">timeout) { </span><span style="color:#6A737D;">// 未超时，取消定时任务</span></span>
<span class="line"><span style="color:#24292E;">            t.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        future.</span><span style="color:#6F42C1;">doReceived</span><span style="color:#24292E;">(response); </span><span style="color:#6A737D;">// 调用doReceived()方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{ </span><span style="color:#6A737D;">// 查找不到关联的DefaultFuture会打印日志(略)}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 清理CHANNELS中记录的请求ID与Channel之间的映射关系</span></span>
<span class="line"><span style="color:#24292E;">    CHANNELS.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// DefaultFuture.doReceived()方法的代码片段</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doReceived</span><span style="color:#24292E;">(Response res) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (res </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;response cannot be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (res.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Response.OK) { </span><span style="color:#6A737D;">// 正常响应</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">complete</span><span style="color:#24292E;">(res.</span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (res.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Response.CLIENT_TIMEOUT </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Response.SERVER_TIMEOUT) { </span><span style="color:#6A737D;">// 超时</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">completeExceptionally</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TimeoutException</span><span style="color:#24292E;">(res.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Response.SERVER_TIMEOUT, channel, res.</span><span style="color:#6F42C1;">getErrorMessage</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 其他异常</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">completeExceptionally</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RemotingException</span><span style="color:#24292E;">(channel, res.</span><span style="color:#6F42C1;">getErrorMessage</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 下面是针对ThreadlessExecutor的兜底处理，主要是防止业务线程一直阻塞在ThreadlessExecutor上</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (executor </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> executor </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ThreadlessExecutor) {</span></span>
<span class="line"><span style="color:#24292E;">        ThreadlessExecutor threadlessExecutor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ThreadlessExecutor) executor;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (threadlessExecutor.</span><span style="color:#6F42C1;">isWaiting</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// notifyReturn()方法会向ThreadlessExecutor提交一个任务，这样业务线程就不会阻塞了，提交的任务会尝试将DefaultFuture设置为异常结束</span></span>
<span class="line"><span style="color:#24292E;">            threadlessExecutor.</span><span style="color:#6F42C1;">notifyReturn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The result has returned...&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>下面我们再来看看响应超时的场景。在创建 DefaultFuture 时调用的 timeoutCheck() 方法中，会创建 TimeoutCheckTask 定时任务，并添加到时间轮中，具体实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timeoutCheck</span><span style="color:#E1E4E8;">(DefaultFuture future) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeoutCheckTask task </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TimeoutCheckTask</span><span style="color:#E1E4E8;">(future.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    future.timeoutCheckTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TIME_OUT_TIMER.</span><span style="color:#B392F0;">newTimeout</span><span style="color:#E1E4E8;">(task, future.</span><span style="color:#B392F0;">getTimeout</span><span style="color:#E1E4E8;">(), TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timeoutCheck</span><span style="color:#24292E;">(DefaultFuture future) {</span></span>
<span class="line"><span style="color:#24292E;">    TimeoutCheckTask task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TimeoutCheckTask</span><span style="color:#24292E;">(future.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    future.timeoutCheckTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TIME_OUT_TIMER.</span><span style="color:#6F42C1;">newTimeout</span><span style="color:#24292E;">(task, future.</span><span style="color:#6F42C1;">getTimeout</span><span style="color:#24292E;">(), TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>TIME_OUT_TIMER 是一个 HashedWheelTimer 对象，即 Dubbo 中对时间轮的实现，这是一个 static 字段，所有 DefaultFuture 对象共用一个。</p><p>TimeoutCheckTask 是 DefaultFuture 中的内部类，实现了 TimerTask 接口，可以提交到时间轮中等待执行。当响应超时的时候，TimeoutCheckTask 会创建一个 Response，并调用前面介绍的 DefaultFuture.received() 方法。示例代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Timeout timeout) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查该任务关联的DefaultFuture对象是否已经完成</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (future.</span><span style="color:#B392F0;">getExecutor</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 提交到线程池执行，注意ThreadlessExecutor的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">        future.</span><span style="color:#B392F0;">getExecutor</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notifyTimeout</span><span style="color:#E1E4E8;">(future));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">notifyTimeout</span><span style="color:#E1E4E8;">(future);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notifyTimeout</span><span style="color:#E1E4E8;">(DefaultFuture future) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 没有收到对端的响应，这里会创建一个Response，表示超时的响应</span></span>
<span class="line"><span style="color:#E1E4E8;">    Response timeoutResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">(future.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    timeoutResponse.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(future.</span><span style="color:#B392F0;">isSent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Response.SERVER_TIMEOUT </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Response.CLIENT_TIMEOUT);</span></span>
<span class="line"><span style="color:#E1E4E8;">    timeoutResponse.</span><span style="color:#B392F0;">setErrorMessage</span><span style="color:#E1E4E8;">(future.</span><span style="color:#B392F0;">getTimeoutMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将关联的DefaultFuture标记为超时异常完成</span></span>
<span class="line"><span style="color:#E1E4E8;">    DefaultFuture.</span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(future.</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">(), timeoutResponse, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Timeout timeout) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查该任务关联的DefaultFuture对象是否已经完成</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (future.</span><span style="color:#6F42C1;">getExecutor</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 提交到线程池执行，注意ThreadlessExecutor的情况</span></span>
<span class="line"><span style="color:#24292E;">        future.</span><span style="color:#6F42C1;">getExecutor</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notifyTimeout</span><span style="color:#24292E;">(future));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">notifyTimeout</span><span style="color:#24292E;">(future);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notifyTimeout</span><span style="color:#24292E;">(DefaultFuture future) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 没有收到对端的响应，这里会创建一个Response，表示超时的响应</span></span>
<span class="line"><span style="color:#24292E;">    Response timeoutResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">(future.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    timeoutResponse.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(future.</span><span style="color:#6F42C1;">isSent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Response.SERVER_TIMEOUT </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Response.CLIENT_TIMEOUT);</span></span>
<span class="line"><span style="color:#24292E;">    timeoutResponse.</span><span style="color:#6F42C1;">setErrorMessage</span><span style="color:#24292E;">(future.</span><span style="color:#6F42C1;">getTimeoutMessage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将关联的DefaultFuture标记为超时异常完成</span></span>
<span class="line"><span style="color:#24292E;">    DefaultFuture.</span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(future.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">(), timeoutResponse, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="headerexchangehandler" tabindex="-1">HeaderExchangeHandler <a class="header-anchor" href="#headerexchangehandler" aria-label="Permalink to &quot;HeaderExchangeHandler&quot;">​</a></h3><p>在前面介绍 DefaultFuture 时，我们简单说明了请求-响应的流程，其实无论是发送请求还是处理响应，都会涉及 HeaderExchangeHandler，所以这里我们就来介绍一下 HeaderExchangeHandler 的内容。</p><p><strong>HeaderExchangeHandler 是 ExchangeHandler 的装饰器</strong>，其中维护了一个 ExchangeHandler 对象，ExchangeHandler 接口是 Exchange 层与上层交互的接口之一，上层调用方可以实现该接口完成自身的功能；然后再由 HeaderExchangeHandler 修饰，具备 Exchange 层处理 Request-Response 的能力；最后再由 Transport ChannelHandler 修饰，具备 Transport 层的能力。如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/5D/D2/Ciqc1F-FWUqAVkr0AADiEwO4wK4124.png" alt="Lark20201013-153600.png"><br> ChannelHandler 继承关系总览图</p><p>HeaderExchangeHandler 作为一个装饰器，其 connected()、disconnected()、sent()、received()、caught() 方法最终都会转发给上层提供的 ExchangeHandler 进行处理。这里我们需要聚焦的是 HeaderExchangeHandler 本身对 Request 和 Response 的处理逻辑。</p><p><img src="https://s0.lgstatic.com/i/image/M00/5D/D2/Ciqc1F-FWVeAbsckAAGeD-_NNHc225.png" alt="Lark20201013-153557.png"><br> received() 方法处理的消息分类</p><p>结合上图，我们可以看到在<strong>received() 方法</strong>中，对收到的消息进行了分类处理。</p><ul><li>只读请求会由<strong>handlerEvent() 方法</strong>进行处理，它会在 Channel 上设置 channel.readonly 标志，后续介绍的上层调用中会读取该值。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handlerEvent</span><span style="color:#E1E4E8;">(Channel channel, Request req) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (req.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> req.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(READONLY_EVENT)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        channel.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY, Boolean.TRUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handlerEvent</span><span style="color:#24292E;">(Channel channel, Request req) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (req.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> req.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(READONLY_EVENT)) {</span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY, Boolean.TRUE);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>双向请求由<strong>handleRequest() 方法</strong>进行处理，会先对解码失败的请求进行处理，返回异常响应；然后将正常解码的请求交给上层实现的 ExchangeHandler 进行处理，并添加回调。上层 ExchangeHandler 处理完请求后，会触发回调，根据处理结果填充响应结果和响应码，并向对端发送。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ExchangeChannel channel, Request req) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Response res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">(req.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), req.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (req.</span><span style="color:#B392F0;">isBroken</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 请求解码失败</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置异常信息和响应码</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">setErrorMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Fail to decode request due to: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(Response.BAD_REQUEST); </span></span>
<span class="line"><span style="color:#E1E4E8;">        channel.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(res); </span><span style="color:#6A737D;">// 将异常响应返回给对端</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 交给上层实现的ExchangeHandler进行处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompletionStage&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler.</span><span style="color:#B392F0;">reply</span><span style="color:#E1E4E8;">(channel, msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">    future.</span><span style="color:#B392F0;">whenComplete</span><span style="color:#E1E4E8;">((appResult, t) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 处理结束后的回调</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (t </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 返回正常响应</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(Response.OK);</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">setResult</span><span style="color:#E1E4E8;">(appResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 处理过程发生异常，设置异常信息和错误码</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(Response.SERVICE_ERROR);</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">setErrorMessage</span><span style="color:#E1E4E8;">(StringUtils.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(t));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        channel.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(res); </span><span style="color:#6A737D;">// 发送响应</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ExchangeChannel channel, Request req) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    Response res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">(req.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), req.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (req.</span><span style="color:#6F42C1;">isBroken</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 请求解码失败</span></span>
<span class="line"><span style="color:#24292E;">        Object data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置异常信息和响应码</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">setErrorMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Fail to decode request due to: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> msg);</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(Response.BAD_REQUEST); </span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(res); </span><span style="color:#6A737D;">// 将异常响应返回给对端</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Object msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 交给上层实现的ExchangeHandler进行处理</span></span>
<span class="line"><span style="color:#24292E;">    CompletionStage&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler.</span><span style="color:#6F42C1;">reply</span><span style="color:#24292E;">(channel, msg);</span></span>
<span class="line"><span style="color:#24292E;">    future.</span><span style="color:#6F42C1;">whenComplete</span><span style="color:#24292E;">((appResult, t) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 处理结束后的回调</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 返回正常响应</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(Response.OK);</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">setResult</span><span style="color:#24292E;">(appResult);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 处理过程发生异常，设置异常信息和错误码</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(Response.SERVICE_ERROR);</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">setErrorMessage</span><span style="color:#24292E;">(StringUtils.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(t));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(res); </span><span style="color:#6A737D;">// 发送响应</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li><p>单向请求直接委托给<strong>上层 ExchangeHandler 实现的 received() 方法</strong>进行处理，由于不需要响应，HeaderExchangeHandler 不会关注处理结果。</p></li><li><p>对于 Response 的处理，前文已提到了，HeaderExchangeHandler 会通过<strong>handleResponse() 方法</strong>将关联的 DefaultFuture 设置为完成状态（或是异常完成状态），具体内容这里不再展开讲述。</p></li><li><p>对于 String 类型的消息，HeaderExchangeHandler 会根据当前服务的角色进行分类，具体与 Dubbo 对 telnet 的支持相关，后面的课时会详细介绍，这里就不展开分析了。</p></li></ul><p>接下来我们再来看<strong>sent() 方法</strong>，该方法会通知上层 ExchangeHandler 实现的 sent() 方法，同时还会针对 Request 请求调用 DefaultFuture.sent() 方法记录请求的具体发送时间，该逻辑在前文也已经介绍过了，这里不再重复。</p><p>在<strong>connected() 方法</strong>中，会为 Dubbo Channel 创建相应的 HeaderExchangeChannel，并将两者绑定，然后通知上层 ExchangeHandler 处理 connect 事件。</p><p>在<strong>disconnected() 方法</strong>中，首先通知上层 ExchangeHandler 进行处理，之后在 DefaultFuture.closeChannel() 通知 DefaultFuture 连接断开（其实就是创建并传递一个 Response，该 Response 的状态码为 CHANNEL_INACTIVE），这样就不会继续阻塞业务线程了，最后再将 HeaderExchangeChannel 与底层的 Dubbo Channel 解绑。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了 Dubbo Exchange 层中对 Channel 和 ChannelHandler 接口的实现。</p><p>我们首先介绍了 Exchange 层中请求-响应模型的基本抽象，即 Request 类和 Response 类。然后又介绍了 ExchangeChannel 对 Channel 接口的实现，同时还说明了发送请求之后得到的 DefaultFuture 对象，这也是上一课时遗留的小问题。最后，讲解了 HeaderExchangeHandler 是如何将 Transporter 层的 ChannelHandler 对象与上层的 ExchangeHandler 对象相关联的。</p>`,50),o=[e];function t(r,c,E,y,i,u){return n(),a("div",null,o)}const d=s(p,[["render",t]]);export{b as __pageData,d as default};
