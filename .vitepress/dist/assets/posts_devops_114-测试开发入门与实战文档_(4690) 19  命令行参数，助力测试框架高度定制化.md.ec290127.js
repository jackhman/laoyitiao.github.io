import{_ as o,j as e,o as t,g as c,k as n,s,h as l,Q as p}from"./chunks/framework.b3d8e22e.js";const P=JSON.parse('{"title":"pytest 添加命令行参数 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4690) 19  命令行参数，助力测试框架高度定制化.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4690) 19  命令行参数，助力测试框架高度定制化.md","lastUpdated":1696417798000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4690) 19  命令行参数，助力测试框架高度定制化.md"},i=s("p",null,'欢迎进入"模块四 深入自动化测试框架原理"，算上开篇词、课前必读，以及前三个模块的学习，你对测试框架应该有了非常深刻的认识。',-1),y=s("p",null,"按照本课程知识，现在你已经能融合 API 和 UI 搭建出功能丰富的测试框架，并可以使用 PageObject 模型分离元素和操作；之后，我们又让测试框架具备 Data Driven 能力，并搭配 Jira 或者禅道创建出具备测试数据管理能力的一揽子测试解决方案。",-1),E=s("p",null,"用这些技能应对日常测试工作肯定没有任何问题，但是每一个有追求的测试人都会想：我能不能自己造一个轮子？",-1),d=s("blockquote",null,[s("p",null,"小提问： 为什么编写自己的测试框架或者应用程序，被称为造轮子？请带着这个问题进行下面的学习，在后面的部分我会解答。")],-1),g=s("p",null,"从本讲开始，我将拆解自动化测试框架的重要组成部分，并带领你一一自主实现。模块四结束时，你应该就具备不借助任何第三方库，独自开发测试框架的能力了。",-1),h=s("p",null,[l("今天我们先来看测试框架的第一个重点部分："),s("strong",null,"使用命令行参数定制化测试框架"),l("，下图是本讲的内容结构，可供你学习参考。")],-1),u=p(`<p>在 <strong>《10 | 你的第一个 API 测试框架（二）》</strong> 中，我讲了如何使用命令行参数来运行 pytest 命令。在 pytest 框架中，预置的命令行参数起着非常重要的作用，比如我们可以利用&quot;-k&quot;来根据函数名称挑选测试用例，利用&quot;-m&quot;来分组挑选测试用例。</p><p>但有些时候，我们还是希望可以定制一下命令行参数。比如，我的测试数据想通过命令行的方式传递，下面我们就来实际操作下。</p><h3 id="pytest-添加命令行参数" tabindex="-1">pytest 添加命令行参数 <a class="header-anchor" href="#pytest-添加命令行参数" aria-label="Permalink to &quot;pytest 添加命令行参数&quot;">​</a></h3><p>假设我们的文件结构如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests_command_lines</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">conftest.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_sample.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests_command_lines</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">conftest.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_sample.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span></code></pre></div><p>其中 conftest.py 的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_addoption</span><span style="color:#E1E4E8;">(parser):</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.addoption(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;--auth&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Your own auth key pair&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;session&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request.config.getoption(</span><span style="color:#9ECBFF;">&#39;--auth&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_addoption</span><span style="color:#24292E;">(parser):</span></span>
<span class="line"><span style="color:#24292E;">    parser.addoption(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;--auth&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Your own auth key pair&quot;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;session&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request.config.getoption(</span><span style="color:#032F62;">&#39;--auth&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>我在前面的章节讲过，在 conftest.py 定义的 fixtures 可作用于整个 Package 下的多个测试文件。在此 conftest.py 里，我定义了一个函数 pytest_addoption，这里注意：</p><ul><li><p>pytest_addoption 是一个 hook 方法，其名称不可改变；</p></li><li><p>pytest_addoption 允许用户注册一个自定义的命令行参数，方便用户使用命令行传递数据；</p></li><li><p>pytest_addoption 仅能在 conftest.py 文件或者 pytest plugins 里实现；</p></li><li><p>pytest_addoption 在测试用例执行前被调用。</p></li></ul><p>然后我们结合前面章节讲过的 fixture 函数，定义一个名字为 auth 的 fixture 接收自定义的命令行参数，并提供给整个 package 下的测试用例使用，这里需要注意的是：</p><ul><li><p>auth 函数是正常的 fixture 函数，需要加装饰器 pytest.fixture 装饰；</p></li><li><p>auth 函数的 scope 可以自由定义，这里我定义为 session；</p></li><li><p>auth 函数的命名可以更改，但是参数 request 不可更改；</p></li><li><p>request.config.getoption 用于接收命令行命令参数。</p></li></ul><p>通过函数 pytest_addoption 以及定义 fixture 方法，我们就可以自由定义命令行参数。</p><p>我们再来看下 test_sample.py 文件的代码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestDemo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_secret_auth</span><span style="color:#E1E4E8;">(self, auth):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">my auth are </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">.format(auth))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestDemo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_secret_auth</span><span style="color:#24292E;">(self, auth):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">my auth are </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(auth))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span></code></pre></div><p>这段代码非常简单，定义了一个测试函数 test_secret_auth，其参数是之前定义的 fixture 函数auth。</p><p>在命令行中通过如下方式运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest tests_command_lines </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&quot;secret_auth&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">auth iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest tests_command_lines </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&quot;secret_auth&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">auth iTesting</span></span></code></pre></div><p>运行结束后，可以发现我们传递的自定义命令行参数 auth 的值被正确接收并显示：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 部分运行输出</span></span>
<span class="line"><span style="color:#E1E4E8;">collected </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> item                                                                                             tests_command_lines</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test_sample.py::TestDemo::test_secret_auth</span></span>
<span class="line"><span style="color:#E1E4E8;">my auth are iTesting</span></span>
<span class="line"><span style="color:#79B8FF;">PASSED</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 部分运行输出</span></span>
<span class="line"><span style="color:#24292E;">collected </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> item                                                                                             tests_command_lines</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test_sample.py::TestDemo::test_secret_auth</span></span>
<span class="line"><span style="color:#24292E;">my auth are iTesting</span></span>
<span class="line"><span style="color:#005CC5;">PASSED</span></span></code></pre></div><p>通过自定义命令行参数，可以扩展测试框架功能。例如可以通过命令行参数实现，当我从命令行传递某个具体的指令时，skip 掉一些测试用例。</p><p>如果你仔细观察上文中<strong>pytest_addoption</strong> 这个函数，你会发现它定义命令行参数使用了 parser.addoption。那么这个<strong>parser.addoption</strong>是什么呢？</p><p>下图是 parser.addoption 的源代码：</p>`,22),_=p(`<p>通过代码可以发现，addoption 接收如下参数。</p><ul><li><p>*optnames：它是一个可变字符串，用来表示 option 的名称，例如上面例子中的&quot;--auth&quot;；</p></li><li><p><strong>attrs：attrs 是关键字参数，通常以 key:value 的形式存在，它能接收的参数与</strong>标准库 argparse**的 add_argument() 这个函数可接收的参数一致。</p></li></ul><h3 id="自主定义命令行参数-argparse-库" tabindex="-1">自主定义命令行参数（argparse 库） <a class="header-anchor" href="#自主定义命令行参数-argparse-库" aria-label="Permalink to &quot;自主定义命令行参数（argparse 库）&quot;">​</a></h3><p>如果你进一步查看 pytest 的源码，你将发现其实 pytest 中用于解析命令行参数的 parser 正是<strong>argparse 这个标准库</strong>。</p><p>argparse 是内置于标准库中的，用于 python 命令行解析的模块，使用 argparse 可以直接在命令行中向程序传入参数。argparse 用法，一般遵循如下步骤。</p><h4 id="_1-导入-argparse-模块" tabindex="-1">1. 导入 argparse 模块 <a class="header-anchor" href="#_1-导入-argparse-模块" aria-label="Permalink to &quot;1. 导入 argparse 模块&quot;">​</a></h4><p>argparse 无须安装，使用时直接 import 即可：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> argparse</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> argparse</span></span></code></pre></div><h4 id="_2-创建-argumentparser-对象" tabindex="-1">2. 创建 ArgumentParser 对象 <a class="header-anchor" href="#_2-创建-argumentparser-对象" aria-label="Permalink to &quot;2. 创建 ArgumentParser 对象&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> parser = argparse.ArgumentParser()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> parser = argparse.ArgumentParser()</span></span></code></pre></div><p>下面列出 ArgumentParser 可接收的常用参数如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">prog </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 程序的名称（默认：sys.argv[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]）</span></span>
<span class="line"><span style="color:#E1E4E8;">usage </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 描述程序用途的字符串（默认值：从添加到解析器的参数生成）</span></span>
<span class="line"><span style="color:#E1E4E8;">description </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 在参数帮助文档之前显示的文本（默认值：无）</span></span>
<span class="line"><span style="color:#E1E4E8;">epilog </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 在参数帮助文档之后显示的文本（默认值：无）</span></span>
<span class="line"><span style="color:#E1E4E8;">parents </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 一个 ArgumentParser 对象的列表，它们的参数也应包含在内</span></span>
<span class="line"><span style="color:#E1E4E8;">formatter_class </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 用于自定义帮助文档输出格式的类</span></span>
<span class="line"><span style="color:#E1E4E8;">prefix_chars </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 可选参数的前缀字符集合（默认值：</span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">）</span></span>
<span class="line"><span style="color:#E1E4E8;">fromfile_prefix_chars </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 当需要从文件中读取其他参数时，用于标识文件名的前缀字符集合（默认值：</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">）</span></span>
<span class="line"><span style="color:#E1E4E8;">argument_default </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 参数的全局默认值（默认值： </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">）</span></span>
<span class="line"><span style="color:#E1E4E8;">conflict_handler </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 解决冲突选项的策略（通常是不必要的）</span></span>
<span class="line"><span style="color:#E1E4E8;">add_help </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 为解析器添加一个 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">h</span><span style="color:#F97583;">/</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">help</span><span style="color:#E1E4E8;"> 选项（默认值： </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">）</span></span>
<span class="line"><span style="color:#E1E4E8;">allow_abbrev </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 如果缩写是无歧义的，则允许缩写长选项 （默认值：</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">）</span></span>
<span class="line"><span style="color:#E1E4E8;">exit_on_error </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 决定当错误发生时是否让 ArgumentParser 附带错误信息退出。 (默认值: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">prog </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 程序的名称（默认：sys.argv[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]）</span></span>
<span class="line"><span style="color:#24292E;">usage </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 描述程序用途的字符串（默认值：从添加到解析器的参数生成）</span></span>
<span class="line"><span style="color:#24292E;">description </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 在参数帮助文档之前显示的文本（默认值：无）</span></span>
<span class="line"><span style="color:#24292E;">epilog </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 在参数帮助文档之后显示的文本（默认值：无）</span></span>
<span class="line"><span style="color:#24292E;">parents </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 一个 ArgumentParser 对象的列表，它们的参数也应包含在内</span></span>
<span class="line"><span style="color:#24292E;">formatter_class </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 用于自定义帮助文档输出格式的类</span></span>
<span class="line"><span style="color:#24292E;">prefix_chars </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 可选参数的前缀字符集合（默认值：</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">fromfile_prefix_chars </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 当需要从文件中读取其他参数时，用于标识文件名的前缀字符集合（默认值：</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">argument_default </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 参数的全局默认值（默认值： </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">conflict_handler </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 解决冲突选项的策略（通常是不必要的）</span></span>
<span class="line"><span style="color:#24292E;">add_help </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 为解析器添加一个 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">h</span><span style="color:#D73A49;">/</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">help</span><span style="color:#24292E;"> 选项（默认值： </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">allow_abbrev </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 如果缩写是无歧义的，则允许缩写长选项 （默认值：</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">exit_on_error </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 决定当错误发生时是否让 ArgumentParser 附带错误信息退出。 (默认值: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span></code></pre></div><p>一般情况下，prog、usage、description 这三个参数使用得比较多。</p><h4 id="_3-添加参数" tabindex="-1">3. 添加参数 <a class="header-anchor" href="#_3-添加参数" aria-label="Permalink to &quot;3. 添加参数&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 可以通过add_argument添加一个或多个参数</span></span>
<span class="line"><span style="color:#E1E4E8;">parser.add_argument()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 可以通过add_argument添加一个或多个参数</span></span>
<span class="line"><span style="color:#24292E;">parser.add_argument()</span></span></code></pre></div><p>add_argument() 方法用于指定程序能够接受哪些命令行参数，add_argument() 接收两种类型的参数，分别是位置参数 (Positional arguments) 和可选参数 (Optional arguments)。下面详细介绍下两种参数。</p><ul><li><strong>位置参数(Positional arguments)</strong></li></ul><p>位置参数是指必须传递的参数，如果不传递就会报错。例如，在 tests_command_lines 文件夹下创建一个文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_argparse.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> argparse.ArgumentParser()</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;This is a demo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.parse_args()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> args.name:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(args.name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_argparse.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> argparse.ArgumentParser()</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;This is a demo&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.parse_args()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> args.name:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(args.name)</span></span></code></pre></div><p>首先，在命令行中查看支持的参数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 定位到test_argparse.py所在的文件夹，然后直接执行</span></span>
<span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest\\tests_command_lines&gt;python test_argparse.py -h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 定位到test_argparse.py所在的文件夹，然后直接执行</span></span>
<span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest\\tests_command_lines&gt;python test_argparse.py -h</span></span></code></pre></div><p>你会看到如下输出：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py -h</span></span>
<span class="line"><span style="color:#E1E4E8;">usage: test_argparse.py [</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">h] name</span></span>
<span class="line"><span style="color:#E1E4E8;">positional arguments:</span></span>
<span class="line"><span style="color:#E1E4E8;">  name        This </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> a demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">optional arguments:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">h, </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">help</span><span style="color:#E1E4E8;">  show this </span><span style="color:#79B8FF;">help</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py -h</span></span>
<span class="line"><span style="color:#24292E;">usage: test_argparse.py [</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">h] name</span></span>
<span class="line"><span style="color:#24292E;">positional arguments:</span></span>
<span class="line"><span style="color:#24292E;">  name        This </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> a demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">optional arguments:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">h, </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">help</span><span style="color:#24292E;">  show this </span><span style="color:#005CC5;">help</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exit</span></span></code></pre></div><p>通过 -h 命令，可以查看定义的所有位置参数（本例中是 name）。</p><p>下面不给定位置参数直接运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py</span></span></code></pre></div><p>运行结果如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">usage: test_argparse.py [</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">h] name</span></span>
<span class="line"><span style="color:#E1E4E8;">test_argparse.py: error: the following arguments are required: name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">usage: test_argparse.py [</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">h] name</span></span>
<span class="line"><span style="color:#24292E;">test_argparse.py: error: the following arguments are required: name</span></span></code></pre></div><p>由此可见，如果定义了位置参数，则位置参数必须传递。</p><p>如果给定参数的值运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py iTesting</span></span></code></pre></div><p>则会运行成功。</p><ul><li><strong>可选参数(Optional arguments)</strong></li></ul><p>相对于位置参数，可选参数的定义如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># test_argparse.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> argparse.ArgumentParser()</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;--name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;This is a demo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.parse_args()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> args.name:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(args.name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># test_argparse.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> argparse.ArgumentParser()</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;--name&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;This is a demo&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.parse_args()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> args.name:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(args.name)</span></span></code></pre></div><p>不给定可选参数直接运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py</span></span></code></pre></div><p>运行结果如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py</span></span>
<span class="line"><span style="color:#E1E4E8;">iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest\\tests\\tests_command_lines&gt;python test_argparse.py</span></span>
<span class="line"><span style="color:#24292E;">iTesting</span></span></code></pre></div><p>当可选参数不填写时，运行也不会报错。如果可选参数有默认值，argparse 将会把此可选参数默认传入。</p><h4 id="_4-解析参数" tabindex="-1">4.解析参数 <a class="header-anchor" href="#_4-解析参数" aria-label="Permalink to &quot;4.解析参数&quot;">​</a></h4><p>解析参数即&quot;<strong>步骤3 添加参数</strong>&quot;中的对参数的解析：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.parse_args()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.parse_args()</span></span></code></pre></div><p>ArgumentParser 通过 parse_args() 方法，把每个参数转换为适当的类型然后调用相应的操作。例如&quot;**步骤3 添加参数&quot;**中的打印语句:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> args.name:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(args.name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> args.name:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(args.name)</span></span></code></pre></div><p>了解了 argparse 的基本使用后，我们就可以通过命令行参数来更好的执行测试。更多关于 argparse 的高级用法，请直接参考 Python 标准库。</p><h3 id="测试框架雏形-创建自己的命令行程序" tabindex="-1">测试框架雏形 ------ 创建自己的命令行程序 <a class="header-anchor" href="#测试框架雏形-创建自己的命令行程序" aria-label="Permalink to &quot;测试框架雏形 ------ 创建自己的命令行程序&quot;">​</a></h3><p>现在我们知道，有了 argparse 就可以通过命令行参数来进行测试，那么假设你有一个测试框架，<strong>如何让你的测试框架也支持通过命令行测试呢</strong>？或者说，你有没有好奇过，为什么我们在命令行中直接输入&quot;pytest&quot;， 测试脚本就会运行？</p><p>下面，我们就通过创建一个支持命令行参数的&quot;测试框架&quot;来解开这个疑惑。</p><h4 id="_1-创建项目" tabindex="-1">1. 创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;1. 创建项目&quot;">​</a></h4><p>首先，创建一个项目，名称为 iTestingDemoFramework。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">iTestingDemoFramework</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">iTesting</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">main.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">setup.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">iTestingDemoFramework</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">iTesting</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">main.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">setup.py</span></span></code></pre></div><p>其次，更新各个文件的代码。其中 main.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># main.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> argparse.ArgumentParser(</span><span style="color:#FFAB70;">prog</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">usage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;This is a demo, please follow iTesting on wechat&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;This is a demo framework&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.parse_args()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> args.name:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, My name is Kevin Cai, Please search and follow below account from wechat:</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(args.name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    main()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># main.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> argparse</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> argparse.ArgumentParser(</span><span style="color:#E36209;">prog</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">usage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;This is a demo, please follow iTesting on wechat&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;This is a demo framework&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.parse_args()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> args.name:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, My name is Kevin Cai, Please search and follow below account from wechat:</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(args.name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    main()</span></span></code></pre></div><p>setup.py 的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> setuptools </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> setup, find_packages</span></span>
<span class="line"><span style="color:#E1E4E8;">setup(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">version</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;0.1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;This is a demo framework&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">author</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;kevin.cai&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">author_email</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;testertalk@outlook.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">zip_safe</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">include_package_data</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">packages</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">find_packages(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">license</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;MIT&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">url</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;https://www.helloqa.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">entry_points</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;console_scripts&#39;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;iTesting = iTesting.main:main&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> setuptools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> setup, find_packages</span></span>
<span class="line"><span style="color:#24292E;">setup(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">version</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;0.1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;This is a demo framework&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">author</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;kevin.cai&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">author_email</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;testertalk@outlook.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">zip_safe</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">include_package_data</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">packages</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">find_packages(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">license</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;MIT&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">url</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;https://www.helloqa.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">entry_points</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;console_scripts&#39;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;iTesting = iTesting.main:main&#39;</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>setup.py 文件是 python 模块安装所需要的文件，它描述了你的模块的各项信息。你可以按照上面的代码，创建自己的 setup.py 文件。更多关于 setup.py 的知识，请查看 <a href="https://pypi.org/project/setuptools/" target="_blank" rel="noreferrer">setuptools</a>。</p><h4 id="_2-检验-setup-py" tabindex="-1">2. 检验 setup.py <a class="header-anchor" href="#_2-检验-setup-py" aria-label="Permalink to &quot;2. 检验 setup.py&quot;">​</a></h4><p>在命令行中切换到项目所在的根目录，执行如下命令：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 切换到项目根目录， 此处是iTestingDemoFramework</span></span>
<span class="line"><span style="color:#E1E4E8;">python setup.py check</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 切换到项目根目录， 此处是iTestingDemoFramework</span></span>
<span class="line"><span style="color:#24292E;">python setup.py check</span></span></code></pre></div><p>这个命令会验证 setup.py 里所填写内容的正确性及安装相应的依赖包（如果有的话）。如果 setup.py 的内容及格式不正确，则命令行中会提示。</p><h4 id="_3-本地验证" tabindex="-1">3. 本地验证 <a class="header-anchor" href="#_3-本地验证" aria-label="Permalink to &quot;3. 本地验证&quot;">​</a></h4><p>当执行检验 setup.py，没有错误提示后，我们就可以在本地验证包的内容：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 1.项目根目录下，此处为iTestingDemoFramework。执行</span></span>
<span class="line"><span style="color:#E1E4E8;">python setup.py install</span></span>
<span class="line"><span style="color:#6A737D;"># 2.执行成功后，在命令行执行如下命令：</span></span>
<span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 1.项目根目录下，此处为iTestingDemoFramework。执行</span></span>
<span class="line"><span style="color:#24292E;">python setup.py install</span></span>
<span class="line"><span style="color:#6A737D;"># 2.执行成功后，在命令行执行如下命令：</span></span>
<span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">h</span></span></code></pre></div><p>执行后，可以看到 Console 的输出如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(venv) D:\\_Automation\\iTestingDemoFramework&gt;iTesting -h</span></span>
<span class="line"><span style="color:#E1E4E8;">usage: This is a demo, please follow iTesting on wechat</span></span>
<span class="line"><span style="color:#E1E4E8;">positional arguments:</span></span>
<span class="line"><span style="color:#E1E4E8;">  name        This is a demo framework</span></span>
<span class="line"><span style="color:#E1E4E8;">optional arguments:</span></span>
<span class="line"><span style="color:#E1E4E8;">  -h, --help  show this help message and exit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(venv) D:\\_Automation\\iTestingDemoFramework&gt;iTesting -h</span></span>
<span class="line"><span style="color:#24292E;">usage: This is a demo, please follow iTesting on wechat</span></span>
<span class="line"><span style="color:#24292E;">positional arguments:</span></span>
<span class="line"><span style="color:#24292E;">  name        This is a demo framework</span></span>
<span class="line"><span style="color:#24292E;">optional arguments:</span></span>
<span class="line"><span style="color:#24292E;">  -h, --help  show this help message and exit</span></span></code></pre></div><p>注意：此刻执行命令时不必在项目根目录下，你可以打开命令行直接输入 iTesting 也是可以执行的，因为 iTesting 这个程序已经被我们注册到系统了。</p><p>继续测试，打开命令行，直接输入我们定义的命令行参数 name 的值：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting iTesting</span></span></code></pre></div><p>执行完毕后输出如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hello, My name </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> Kevin Cai, Please search </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> follow below account </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> wechat:</span></span>
<span class="line"><span style="color:#E1E4E8;">iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hello, My name </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> Kevin Cai, Please search </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> follow below account </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> wechat:</span></span>
<span class="line"><span style="color:#24292E;">iTesting</span></span></code></pre></div><p>由此可以看到，命令行程序创建成功。如果 iTesting 是你的测试框架，是不是就意味着你的测试框架可以直接通过命令行运行了。</p><p>其实这也是为什么你在命令行中直接执行 pytest，pytest 会运行的原因。</p><blockquote><p>当然 pytest 里还有查找测试用例的逻辑，但是我们的程序 iTesting 里没有实现。</p></blockquote><h3 id="测试框架雏形-上传自己的命令行程序" tabindex="-1">测试框架雏形 ------上传自己的命令行程序 <a class="header-anchor" href="#测试框架雏形-上传自己的命令行程序" aria-label="Permalink to &quot;测试框架雏形 ------上传自己的命令行程序&quot;">​</a></h3><p>当你的测试框架开发完成，并且支持命令行执行后，你就可以上传至 Pypi，分享给更多人使用。</p><blockquote><p>PyPI(Python Package Index) 是 python 官方的第三方库的仓库，可以帮助我们查找和安装 Python 社区开发和共享的软件。</p></blockquote><p>下面演示下如何将你的应用程序打包（以 Win 10 系统为例）。</p><h4 id="_1-注册-pypi-账户" tabindex="-1">1. 注册 PyPI 账户 <a class="header-anchor" href="#_1-注册-pypi-账户" aria-label="Permalink to &quot;1. 注册 PyPI 账户&quot;">​</a></h4><p>要上传你自己打包好的程序到 PyPI，必须先注册一个账户，登录<a href="https://pypi.org/" target="_blank" rel="noreferrer">PyPI 官网</a>直接注册即可。</p><h4 id="_2-打包程序" tabindex="-1">2. 打包程序 <a class="header-anchor" href="#_2-打包程序" aria-label="Permalink to &quot;2. 打包程序&quot;">​</a></h4><p>你的程序要上传到 PyPI，必须打包。在命令行中执行如下命令，将程序打包：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 切换到项目根目录， 此处是iTestingDemoFramework</span></span>
<span class="line"><span style="color:#E1E4E8;">python setup.py sdist build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 切换到项目根目录， 此处是iTestingDemoFramework</span></span>
<span class="line"><span style="color:#24292E;">python setup.py sdist build</span></span></code></pre></div><p>打包成功后，你会看到项目根目录下多了三个文件夹，分别是 build、dist 以及 iTesting.egg-info，如下图所示：</p>`,84),F=p(`<p>打包的方式有很多种，除了上述所讲外，还可以用 wheel 打包。</p><p>首先安装 wheel：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install wheel</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install wheel</span></span></code></pre></div><p>安装好后，就可以把应用程序打包：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">python setup.py bdist_wheel</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">python setup.py bdist_wheel</span></span></code></pre></div><blockquote><p>wheel 翻译过来就是&quot;轮子&quot;的意思，所以创建自己的程序并打包成 wheel，就是一个造轮子的过程。后来造轮子，专指编写与已有应用程序拥有相同功能的程序。</p></blockquote><h4 id="_3-发布程序" tabindex="-1">3. 发布程序 <a class="header-anchor" href="#_3-发布程序" aria-label="Permalink to &quot;3. 发布程序&quot;">​</a></h4><p>首先，应该确保 twine 这个库安装。</p><blockquote><p>Twine 是一个在 PyPI 上发布 Python 包的实用程序。</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install twine</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install twine</span></span></code></pre></div><p>其次，通过命令行工具，在你的项目根目录下，通过如下命令上传：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在项目根目录下执行，本例为 iTestingDemoFramework</span></span>
<span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\iTestingDemoFramework&gt;twine upload dist/*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在项目根目录下执行，本例为 iTestingDemoFramework</span></span>
<span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\iTestingDemoFramework&gt;twine upload dist/*</span></span></code></pre></div><p>执行后，系统会交互式询问，让你提供 PyPI 上注册的用户名和密码，填写正确即可上传成功：</p>`,13),m=s("p",null,[l("最后访问"),s("a",{href:"https://pypi.org/project/iTesting/0.1/",target:"_blank",rel:"noreferrer"},"上传后的地址"),l("，你可以看到，我们创建的程序已经被正确上传。")],-1),v=p('<h4 id="_4-通过-pip-安装使用" tabindex="-1">4. 通过 pip 安装使用 <a class="header-anchor" href="#_4-通过-pip-安装使用" aria-label="Permalink to &quot;4. 通过 pip 安装使用&quot;">​</a></h4><p>应用程序上传至 PyPI 后，每个人都可以通过 pip install 直接下载使用，在命令行中输入：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install iTesting</span></span></code></pre></div><blockquote><p>注意，此命令可在任意目录下执行，不必限制在我们项目根目录下，因为我们的程序已经上传至 PyPI。</p></blockquote><p>你会看到如下安装界面：</p>',5),A=p(`<p>安装成功后，我们来测试下我们的功能， 在命令行中直接输入：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting iTesting</span></span></code></pre></div><p>可以看到，结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hello, My name is Kevin Cai, Please search and follow below account from wechat</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hello, My name is Kevin Cai, Please search and follow below account from wechat</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">iTesting</span></span></code></pre></div><p>至此，你的&quot;测试框架&quot;已经上架并可被任何人下载使用。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>我来总结下今天所讲的内容。</p><p>本章从 pytest 命令行参数引入，首先回顾了下 pytest 内置的命令行参数使用（例如 -k 的使用）；接着，在 pytest 框架中，创建自己的自定义参数来扩展应用程序功能。</p><p>然后我们更进一步，通过阅读 pytest 源码，得知 pytest 解析命令行参数正是用的 argparse 这个标准库，于是我介绍了 argparse 的基本使用，并带领大家实现了一个基于命令行的测试框架雏形（虽然什么具体功能都没有），并结合打包程序上传至 PyPI。</p><p>通过这个过程，你应该对如何开发支持命令行参数的测试框架，如何发布测试框架供他人使用这个流程有了比较清楚的了解。</p><p>好的，在后面的章节中，我将继续带领你，深入测试框架原理。</p><p>我是蔡超，我们下节课再见。</p><p>更多关于&quot;测试框架&quot;的知识，请关注公众号 iTesting 并回复&quot;测试框架&quot;查看。</p><hr><p><a href="https://wj.qq.com/s2/7506053/9b01" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p>`,15);function k(C,D,b,f,q,T){const a=e("Image");return t(),c("div",null,[i,y,E,d,g,h,n(a,{alt:"Lark20201111-153749.png",src:"https://s0.lgstatic.com/i/image/M00/6C/C1/Ciqc1F-rlNyAYJruAAJ1s2sC_oI765.png"}),u,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/6C/C1/Ciqc1F-rlO6AWE0YAAFy2gX8N48615.png"}),_,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/6C/C2/Ciqc1F-rlVSAUGJ5AAAvK9HTWWM176.png"}),F,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/6C/CD/CgqCHl-rlXuASwWuAABKEnStxhs583.png"}),m,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/6C/CD/CgqCHl-rlYGAA-SvAAA3Elyl8kU509.png"}),v,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/6C/C2/Ciqc1F-rlaaAfYmXAABO62yvV5w144.png"}),A])}const w=o(r,[["render",k]]);export{P as __pageData,w as default};
