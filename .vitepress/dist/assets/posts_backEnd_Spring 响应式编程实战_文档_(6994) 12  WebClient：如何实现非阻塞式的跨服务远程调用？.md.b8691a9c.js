import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.d3daa342.js";const d=JSON.parse('{"title":"12WebClient：如何实现非阻塞式的跨服务远程调用？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6994) 12  WebClient：如何实现非阻塞式的跨服务远程调用？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6994) 12  WebClient：如何实现非阻塞式的跨服务远程调用？.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/Spring 响应式编程实战_文档/(6994) 12  WebClient：如何实现非阻塞式的跨服务远程调用？.md"},o=l(`<h1 id="_12webclient-如何实现非阻塞式的跨服务远程调用" tabindex="-1">12WebClient：如何实现非阻塞式的跨服务远程调用？ <a class="header-anchor" href="#_12webclient-如何实现非阻塞式的跨服务远程调用" aria-label="Permalink to &quot;12WebClient：如何实现非阻塞式的跨服务远程调用？&quot;">​</a></h1><p>在上一讲中，我已经带你在 ReactiveSpringCSS 案例系统中通过 WebFlux 创建了响应式 Web 服务，并给你留下了一道思考题：如何实现非阻塞式的跨服务调用？</p><p>我们知道在 Spring 中存在一个功能强大的工具类 RestTemplate，专门用来实现基于 HTTP 协议的远程请求和响应处理。RestTemplate 的主要问题在于不支持响应式流规范，也就无法提供非阻塞式的流式操作。Spring 5 全面引入响应式编程模型，同时也提供了 RestTemplate 的响应式版本，这就是 WebClient 工具类。</p><p>这一讲我们就针对 WebClient 展开详细的探讨。首先我会带你创建和配置 WebClient对象；然后使用 WebClient 来访问远程 Web 服务，并介绍该组件的一些使用技巧；最后我依然会结合 ReactiveSpringCSS 案例来给出与现有服务之间的集成过程。</p><h3 id="创建和配置-webclient" tabindex="-1">创建和配置 WebClient <a class="header-anchor" href="#创建和配置-webclient" aria-label="Permalink to &quot;创建和配置 WebClient&quot;">​</a></h3><p>WebClient 类位于 org.springframework.web.reactive.function.client 包中，要想在项目中集成 WebClient 类，只需要引入 WebFlux 依赖即可。</p><h4 id="创建-webclient" tabindex="-1">创建 WebClient <a class="header-anchor" href="#创建-webclient" aria-label="Permalink to &quot;创建 WebClient&quot;">​</a></h4><p>创建 WebClient 有两种方法，一种是通过它所提供的 create() 工厂方法，另一种则是使用 WebClient Builder 构造器工具类。</p><p>我们可以直接使用 create() 工厂方法来创建 WebClient 的实例，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WebClient webClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebClient webClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();</span></span></code></pre></div><p>如果我们创建 WebClient 的目的是针对某一个特定服务进行操作，那么就可以使用该服务的地址作为 baseUrl 来初始化 WebClient，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WebClient webClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://localhost:8081/accounts&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebClient webClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://localhost:8081/accounts&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>WebClient 还附带了一个构造器类 Builder，使用方法也很简单，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WebClient webClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebClient webClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="配置-webclient" tabindex="-1">配置 WebClient <a class="header-anchor" href="#配置-webclient" aria-label="Permalink to &quot;配置 WebClient&quot;">​</a></h4><p>创建完 WebClient 实例之后，我们还可以在 WebClient.builder() 方法中添加相关的配置项，来对 WebClient 的行为做一些控制，通常用来设置消息头信息等，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WebClient webClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">baseUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://localhost:8081/accounts&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">defaultHeader</span><span style="color:#E1E4E8;">(HttpHeaders.CONTENT_TYPE, </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">defaultHeader</span><span style="color:#E1E4E8;">(HttpHeaders.USER_AGENT, </span><span style="color:#9ECBFF;">&quot;Reactive WebClient&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebClient webClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">baseUrl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://localhost:8081/accounts&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">defaultHeader</span><span style="color:#24292E;">(HttpHeaders.CONTENT_TYPE, </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">defaultHeader</span><span style="color:#24292E;">(HttpHeaders.USER_AGENT, </span><span style="color:#032F62;">&quot;Reactive WebClient&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上述代码展示了 defaultHeader 的使用方法，WebClient.builder() 还包含 defaultCookie、defaultRequest 等多个配置项可供使用。</p><p>现在，我们已经成功创建了 WebClient 对象，接下来就可以使用该对象来访问远程服务了。</p><h3 id="使用-webclient-访问服务" tabindex="-1">使用 WebClient 访问服务 <a class="header-anchor" href="#使用-webclient-访问服务" aria-label="Permalink to &quot;使用 WebClient 访问服务&quot;">​</a></h3><p>在远程服务访问上，WebClient 有几种常见的使用方式，包括非常实用的 retrieve() 和 exchange() 方法、用于封装请求数据的 RequestBody，以及表单和文件的提交。接下来我就对这些使用方式进行详细介绍并给出相关示例。</p><h4 id="构造-url" tabindex="-1">构造 URL <a class="header-anchor" href="#构造-url" aria-label="Permalink to &quot;构造 URL&quot;">​</a></h4><p>Web 请求中通过请求路径可以携带参数，在使用 WebClient 时也可以在它提供的 uri() 方法中添加路径变量和参数值。如果我们定义一个包含路径变量名为 id 的 URL，然后将 id 值设置为 100，那么就可以使用如下示例代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://localhost:8081/accounts/{id}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:8081/accounts/{id}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span></code></pre></div><p>当然，URL 中也可以使用多个路径变量以及多个参数值。如下所示的代码中就定义了 URL 中拥有路径变量 param1 和 param2，实际访问的时候将被替换为 value1 和 value2。如果有很多的参数，只要按照需求对请求地址进行拼装即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://localhost:8081/account/{param1}/{ param2}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value12&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:8081/account/{param1}/{ param2}&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value12&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>同时，我们也可以事先把这些路径变量和参数值拼装成一个 Map 对象，然后赋值给当前 URL。如下所示的代码就定义了 Key 为 param1 和 param2 的 HashMap，实际访问时会从这个 HashMap 中获取参数值进行替换，从而得到最终的请求路径为<a href="http://localhost:8081/accounts/value1/value2?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://localhost:8081/accounts/value1/value2</a>，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; uriVariables </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">uriVariables.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;param1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">uriVariables.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;param2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://localhost:8081/accounts/{param1}/{param2}&quot;</span><span style="color:#E1E4E8;">, variables);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; uriVariables </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">uriVariables.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;param1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">uriVariables.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;param2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:8081/accounts/{param1}/{param2}&quot;</span><span style="color:#24292E;">, variables);</span></span></code></pre></div><p>我们还可以通过使用 URIBuilder 来获取对请求信息的完全控制，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Flux</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Account</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAccounts</span><span style="color:#E1E4E8;">(String username, String token) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(uriBuilder </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> uriBuilder.</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/accounts&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Authorization&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Basic &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Base64Utils</span></span>
<span class="line"><span style="color:#E1E4E8;">                   .</span><span style="color:#B392F0;">encodeToString</span><span style="color:#E1E4E8;">((username </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> token).</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(UTF_8)))</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">bodyToFlux</span><span style="color:#E1E4E8;">(Account.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Flux</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Account</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAccounts</span><span style="color:#24292E;">(String username, String token) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(uriBuilder </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> uriBuilder.</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/accounts&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Authorization&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Basic &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Base64Utils</span></span>
<span class="line"><span style="color:#24292E;">                   .</span><span style="color:#6F42C1;">encodeToString</span><span style="color:#24292E;">((username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> token).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(UTF_8)))</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">bodyToFlux</span><span style="color:#24292E;">(Account.class);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们为每次请求添加了包含授权信息的&quot;Authorization&quot;消息头，用来传递用户名和访问令牌。一旦我们准备好请求信息，就可以使用 WebClient 提供的一系列工具方法完成远程服务的访问，例如上面示例中的 retrieve() 方法。</p><h4 id="retrieve-方法" tabindex="-1">retrieve() 方法 <a class="header-anchor" href="#retrieve-方法" aria-label="Permalink to &quot;retrieve() 方法&quot;">​</a></h4><p>retrieve() 方法是获取响应主体并对其进行解码的最简单方法，我们再看一个示例，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WebClient webClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://localhost:8081&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/accounts/{id}&quot;</span><span style="color:#E1E4E8;">, id)</span></span>
<span class="line"><span style="color:#E1E4E8;">	    .</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(Account.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebClient webClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:8081&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/accounts/{id}&quot;</span><span style="color:#24292E;">, id)</span></span>
<span class="line"><span style="color:#24292E;">	    .</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(Account.class);</span></span></code></pre></div><p>上述代码使用 JSON 作为序列化方式，我们也可以根据需要设置其他方式，例如采用 MediaType.TEXT_EVENT_STREAM 以实现基于流的处理，示例如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux&lt;</span><span style="color:#F97583;">Order</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/accounts&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(MediaType.TEXT_EVENT_STREAM)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">bodyToFlux</span><span style="color:#E1E4E8;">(Account.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux&lt;</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/accounts&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(MediaType.TEXT_EVENT_STREAM)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">bodyToFlux</span><span style="color:#24292E;">(Account.class);</span></span></code></pre></div><h4 id="exchange-方法" tabindex="-1">exchange() 方法 <a class="header-anchor" href="#exchange-方法" aria-label="Permalink to &quot;exchange() 方法&quot;">​</a></h4><p>如果希望对响应拥有更多的控制权，retrieve() 方法就显得无能为力，这时候我们可以使用 exchange() 方法来访问整个响应结果，该响应结果是一个 ClientResponse 对象，包含了响应的状态码、Cookie 等信息，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;"> .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/accounts/{id}&quot;</span><span style="color:#E1E4E8;">, id)</span></span>
<span class="line"><span style="color:#E1E4E8;"> .</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#E1E4E8;"> .</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;"> .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(response </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(Account.class));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;"> .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/accounts/{id}&quot;</span><span style="color:#24292E;">, id)</span></span>
<span class="line"><span style="color:#24292E;"> .</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#24292E;"> .</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;"> .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(response </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(Account.class));</span></span></code></pre></div><p>以上代码演示了如何对结果执行 flatMap() 操作符的实现方式，通过这一操作符调用 ClientResponse 的 bodyToMono() 方法以获取目标 Account 对象。</p><h4 id="使用-requestbody" tabindex="-1">使用 RequestBody <a class="header-anchor" href="#使用-requestbody" aria-label="Permalink to &quot;使用 RequestBody&quot;">​</a></h4><p>如果你有一个 Mono 或 Flux 类型的请求体，那么可以使用 WebClient 的 body() 方法来进行编码，使用示例如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; accountMono </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ... ;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/accounts&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">contentType</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(accountMono, Account.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(Void.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; accountMono </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ... ;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/accounts&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">contentType</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(accountMono, Account.class)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(Void.class);</span></span></code></pre></div><p>如果请求对象是一个普通的 POJO 而不是 Flux/Mono，则可以使用 syncBody() 方法作为一种快捷方式来传递请求，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Account account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ... ;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/accounts&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">contentType</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">syncBody</span><span style="color:#E1E4E8;">(account)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(Void.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Account account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ... ;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/accounts&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">contentType</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">syncBody</span><span style="color:#24292E;">(account)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(Void.class);</span></span></code></pre></div><h4 id="表单和文件提交" tabindex="-1">表单和文件提交 <a class="header-anchor" href="#表单和文件提交" aria-label="Permalink to &quot;表单和文件提交&quot;">​</a></h4><p>当传递的请求体是一个 MultiValueMap 对象时，WebClient 默认发起的是表单提交。例如，针对用户登录场景，我们可以构建一个 MultiValueMap 对象，并传入参数 username 和 password 进行提交，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String baseUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://localhost:8081&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">WebClient webClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(baseUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">MultiValueMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedMultiValueMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;jianxiang&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; mono </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/login&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">syncBody</span><span style="color:#E1E4E8;">(map)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(String.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String baseUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://localhost:8081&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">WebClient webClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(baseUrl);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">MultiValueMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedMultiValueMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jianxiang&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; mono </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">syncBody</span><span style="color:#24292E;">(map)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(String.class);</span></span></code></pre></div><p>如果想提交 Multipart Data，我们可以使用 MultipartBodyBuilder 工具类来简化请求的构建过程。MultipartBodyBuilder 的使用方法如下所示，最终我们也将得到一个 MultiValueMap 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">MultipartBodyBuilder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MultipartBodyBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">builder.</span><span style="color:#B392F0;">part</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;paramPart&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">builder.</span><span style="color:#B392F0;">part</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;filePart&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileSystemResource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jianxiang.png&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">builder.</span><span style="color:#B392F0;">part</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accountPart&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jianxiang&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">MultiValueMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, HttpEntity&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; parts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">MultipartBodyBuilder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MultipartBodyBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">builder.</span><span style="color:#6F42C1;">part</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;paramPart&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">builder.</span><span style="color:#6F42C1;">part</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;filePart&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileSystemResource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jianxiang.png&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">builder.</span><span style="color:#6F42C1;">part</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accountPart&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jianxiang&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">MultiValueMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, HttpEntity&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; parts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><p>一旦 MultiValueMap 构建完成，通过 WebClient 的 syncBody() 方法就可以实现请求提交，我已经在上文中提到过这种实现方法。</p><p>以上介绍的都是 WebClient 所提供的基础方法，我们可以使用这些方法来满足面向业务处理的常规请求。但如果你希望对远程调用过程有更多的控制，那么就需要使用 WebClient 所提供的的一些其他使用技巧了。让我们一起来看一下。</p><h3 id="webclient-的其他使用技巧" tabindex="-1">WebClient 的其他使用技巧 <a class="header-anchor" href="#webclient-的其他使用技巧" aria-label="Permalink to &quot;WebClient 的其他使用技巧&quot;">​</a></h3><p>除了实现常规的 HTTP 请求之外，WebClient 还有一些高级用法，包括请求拦截和异常处理等。</p><h4 id="请求拦截" tabindex="-1">请求拦截 <a class="header-anchor" href="#请求拦截" aria-label="Permalink to &quot;请求拦截&quot;">​</a></h4><p>和传统 RestTemplate 一样，WebClient 也支持使用过滤器函数。让我们回顾 WebClient 的构造器 Builder，你会发现 Builder 实际上是一个接口，它内置了一批初始化 Builder 和 WebClient 的方法定义。DefaultWebClientBuilder 就是该接口的默认实现，截取该类的部分核心代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultWebClientBuilder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebClient.Builder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> WebClient.Builder </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(ExchangeFilterFunction </span><span style="color:#FFAB70;">filter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">notNull</span><span style="color:#E1E4E8;">(filter, </span><span style="color:#9ECBFF;">&quot;ExchangeFilterFunction must not be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initFilters</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(filter);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 }</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> WebClient </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ExchangeFunction exchange </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initExchangeFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ExchangeFunction filteredExchange </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.filters </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.filters.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(ExchangeFilterFunction</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">andThen)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(filter </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> filter.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(exchange))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(exchange) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> exchange);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultWebClient</span><span style="color:#E1E4E8;">(filteredExchange, </span><span style="color:#B392F0;">initUriBuilderFactory</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">unmodifiableCopy</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.defaultHeaders), </span><span style="color:#B392F0;">unmodifiableCopy</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.defaultCookies),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultWebClientBuilder</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">	 }</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultWebClientBuilder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebClient.Builder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> WebClient.Builder </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(ExchangeFilterFunction </span><span style="color:#E36209;">filter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">notNull</span><span style="color:#24292E;">(filter, </span><span style="color:#032F62;">&quot;ExchangeFilterFunction must not be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initFilters</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(filter);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	 }</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> WebClient </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        ExchangeFunction exchange </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initExchangeFunction</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ExchangeFunction filteredExchange </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.filters </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.filters.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(ExchangeFilterFunction</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">andThen)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(filter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> filter.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(exchange))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(exchange) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> exchange);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultWebClient</span><span style="color:#24292E;">(filteredExchange, </span><span style="color:#6F42C1;">initUriBuilderFactory</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">unmodifiableCopy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultHeaders), </span><span style="color:#6F42C1;">unmodifiableCopy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultCookies),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultWebClientBuilder</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	 }</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 build() 方法的目的是构建出一个 DefaultWebClient，而 DefaultWebClient 的构造函数中依赖于 ExchangeFunction 接口。我们来看一下 ExchangeFunction 接口的定义，其中的 filter() 方法传入并执行 ExchangeFilterFunction，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExchangeFunction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> ExchangeFunction </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(ExchangeFilterFunction </span><span style="color:#FFAB70;">filter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">notNull</span><span style="color:#E1E4E8;">(filter, </span><span style="color:#9ECBFF;">&quot;&#39;filter&#39; must not be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> filter.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExchangeFunction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	    ...</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> ExchangeFunction </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(ExchangeFilterFunction </span><span style="color:#E36209;">filter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">notNull</span><span style="color:#24292E;">(filter, </span><span style="color:#032F62;">&quot;&#39;filter&#39; must not be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> filter.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当我们看到 Filter（过滤器）这个单词时，思路上就可以触类旁通了。在 Web 应用程序中，Filter 体现的就是一种拦截器作用，而多个 Filter 组合起来构成一种过滤器链。ExchangeFilterFunction 也是一个接口，其部分核心代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExchangeFilterFunction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">ClientResponse</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(ClientRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, ExchangeFunction </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> ExchangeFilterFunction </span><span style="color:#B392F0;">andThen</span><span style="color:#E1E4E8;">(ExchangeFilterFunction </span><span style="color:#FFAB70;">after</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">notNull</span><span style="color:#E1E4E8;">(after, </span><span style="color:#9ECBFF;">&quot;&#39;after&#39; must not be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (request, next) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ExchangeFunction nextExchange </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exchangeRequest </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> after.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(exchangeRequest, next);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(request, nextExchange);</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> ExchangeFunction </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(ExchangeFunction </span><span style="color:#FFAB70;">exchange</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">notNull</span><span style="color:#E1E4E8;">(exchange, </span><span style="color:#9ECBFF;">&quot;&#39;exchange&#39; must not be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(request, exchange);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExchangeFilterFunction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">ClientResponse</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(ClientRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, ExchangeFunction </span><span style="color:#E36209;">next</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> ExchangeFilterFunction </span><span style="color:#6F42C1;">andThen</span><span style="color:#24292E;">(ExchangeFilterFunction </span><span style="color:#E36209;">after</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">notNull</span><span style="color:#24292E;">(after, </span><span style="color:#032F62;">&quot;&#39;after&#39; must not be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (request, next) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ExchangeFunction nextExchange </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exchangeRequest </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> after.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(exchangeRequest, next);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(request, nextExchange);</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> ExchangeFunction </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(ExchangeFunction </span><span style="color:#E36209;">exchange</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">notNull</span><span style="color:#24292E;">(exchange, </span><span style="color:#032F62;">&quot;&#39;exchange&#39; must not be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(request, exchange);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，ExchangeFilterFunction 通过 andThen() 方法将自身添加到过滤器链并实现 filter() 这个函数式方法。我们可以使用过滤器函数以任何方式拦截和修改请求，例如通过修改 ClientRequest 来调用 ExchangeFilterFucntion 过滤器链中的下一个过滤器，或者让 ClientRequest 直接返回以阻止过滤器链的进一步执行。</p><p>作为示例，如下代码演示了如何使用过滤器功能添加 HTTP 基础认证机制。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WebClient client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">basicAuthentication</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebClient client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">basicAuthentication</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这样，基于客户端过滤机制，我们不需要在每个请求中添加 Authorization 消息头，过滤器将拦截每个 WebClient 请求并自动添加该消息头。再来看一个例子，我们将编写一个自定义的过滤器函数 logFilter()，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ExchangeFilterFunction </span><span style="color:#B392F0;">logFilter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (clientRequest, next) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Request: {} {}&quot;</span><span style="color:#E1E4E8;">, clientRequest.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(), clientRequest.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        clientRequest.</span><span style="color:#B392F0;">headers</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((name, values) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> values.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(value </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}={}&quot;</span><span style="color:#E1E4E8;">, name, value)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> next.</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(clientRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ExchangeFilterFunction </span><span style="color:#6F42C1;">logFilter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (clientRequest, next) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Request: {} {}&quot;</span><span style="color:#24292E;">, clientRequest.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(), clientRequest.</span><span style="color:#6F42C1;">url</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        clientRequest.</span><span style="color:#6F42C1;">headers</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((name, values) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> values.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}={}&quot;</span><span style="color:#24292E;">, name, value)));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> next.</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(clientRequest);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，logFilter() 方法的作用是对每个请求做详细的日志记录。我们同样可以通过 filter() 方法把该过滤器添加到请求链路中，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">WebClient webClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">logFilter</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebClient webClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">logFilter</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h4><p>当发起一个请求所得到的响应状态码为 4XX 或 5XX 时，WebClient 就会抛出一个 WebClientResponseException 异常，我们可以使用 onStatus() 方法来自定义对异常的处理方式，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Flux</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Account</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listAccounts</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/accounts)</span></span>
<span class="line"><span style="color:#9ECBFF;">        .retrieve()</span></span>
<span class="line"><span style="color:#9ECBFF;">        .onStatus(HttpStatus::is4xxClientError, clientResponse -&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">             Mono.error(new MyCustomClientException())</span></span>
<span class="line"><span style="color:#9ECBFF;">         )</span></span>
<span class="line"><span style="color:#9ECBFF;">        .onStatus(HttpStatus::is5xxServerError, clientResponse -&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">             Mono.error(new MyCustomServerException())</span></span>
<span class="line"><span style="color:#9ECBFF;">         )</span></span>
<span class="line"><span style="color:#9ECBFF;">        .bodyToFlux(Account.class);</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Flux</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Account</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listAccounts</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/accounts)</span></span>
<span class="line"><span style="color:#032F62;">        .retrieve()</span></span>
<span class="line"><span style="color:#032F62;">        .onStatus(HttpStatus::is4xxClientError, clientResponse -&gt;</span></span>
<span class="line"><span style="color:#032F62;">             Mono.error(new MyCustomClientException())</span></span>
<span class="line"><span style="color:#032F62;">         )</span></span>
<span class="line"><span style="color:#032F62;">        .onStatus(HttpStatus::is5xxServerError, clientResponse -&gt;</span></span>
<span class="line"><span style="color:#032F62;">             Mono.error(new MyCustomServerException())</span></span>
<span class="line"><span style="color:#032F62;">         )</span></span>
<span class="line"><span style="color:#032F62;">        .bodyToFlux(Account.class);</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre></div><p>这里我们构建了一个 MyCustomServerException 来返回自定义异常信息。需要注意的是，这种处理方式只适用于使用 retrieve() 方法进行远程请求的场景，exchange() 方法在获取 4XX 或 5XX 响应的情况下不会引发异常。因此，当使用 exchange() 方法时，我们需要自行检查状态码并以合适的方式处理它们。</p><h3 id="案例集成-基于-webclient-的非阻塞式跨服务通信" tabindex="-1">案例集成：基于 WebClient 的非阻塞式跨服务通信 <a class="header-anchor" href="#案例集成-基于-webclient-的非阻塞式跨服务通信" aria-label="Permalink to &quot;案例集成：基于 WebClient 的非阻塞式跨服务通信&quot;">​</a></h3><p>介绍完 WebClient 类的使用方式之后，让我们回到 ReactiveSpringCSS 案例。在上一讲中，我已经给出了位于 customer-service 的 CustomerService 类中的 generateCustomerTicket 方法的代码结构，该方法用于完成与 account-service 和 order-service 进行集成，我们来回顾一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">CustomerTicket</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateCustomerTicket</span><span style="color:#E1E4E8;">(String accountId, String orderNumber) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        CustomerTicket customerTicket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerTicket</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        customerTicket.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从远程 account-service 获取 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRemoteAccountByAccountId</span><span style="color:#E1E4E8;">(accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从远程 order-service 中获取 Order 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">OrderMapper</span><span style="color:#E1E4E8;">&gt; orderMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRemoteOrderByOrderNumber</span><span style="color:#E1E4E8;">(orderNumber);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">CustomerTicket</span><span style="color:#E1E4E8;">&gt; monoCustomerTicket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                Mono.</span><span style="color:#B392F0;">zip</span><span style="color:#E1E4E8;">(accountMapper, orderMapper).</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(tuple </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            AccountMapper account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tuple.</span><span style="color:#B392F0;">getT1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            OrderMapper order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tuple.</span><span style="color:#B392F0;">getT2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#E1E4E8;">            ...</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(customerTicket);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> monoCustomerTicket.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(customerTicketRepository</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">save);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">CustomerTicket</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateCustomerTicket</span><span style="color:#24292E;">(String accountId, String orderNumber) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#24292E;">        CustomerTicket customerTicket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerTicket</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        customerTicket.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;C_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从远程 account-service 获取 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRemoteAccountByAccountId</span><span style="color:#24292E;">(accountId);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从远程 order-service 中获取 Order 对象</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">OrderMapper</span><span style="color:#24292E;">&gt; orderMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRemoteOrderByOrderNumber</span><span style="color:#24292E;">(orderNumber);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">CustomerTicket</span><span style="color:#24292E;">&gt; monoCustomerTicket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                Mono.</span><span style="color:#6F42C1;">zip</span><span style="color:#24292E;">(accountMapper, orderMapper).</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(tuple </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            AccountMapper account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tuple.</span><span style="color:#6F42C1;">getT1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            OrderMapper order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tuple.</span><span style="color:#6F42C1;">getT2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#24292E;">            ...</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(customerTicket);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> monoCustomerTicket.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(customerTicketRepository</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">save);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另一方面，上一讲中我也给出了在 order-service 中基于函数式编程模型构建 Web 服务的实现过程。同样的，这里也以 getRemoteOrderByOrderNumber 方法为例来和你讨论如何完成与 Web 服务之间的远程调用。getRemoteOrderByOrderNumber 方法定义如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">OrderMapper</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRemoteOrderByOrderNumber</span><span style="color:#E1E4E8;">(String orderNumber) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderClient.</span><span style="color:#B392F0;">getOrderByOrderNumber</span><span style="color:#E1E4E8;">(orderNumber);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">OrderMapper</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRemoteOrderByOrderNumber</span><span style="color:#24292E;">(String orderNumber) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderClient.</span><span style="color:#6F42C1;">getOrderByOrderNumber</span><span style="color:#24292E;">(orderNumber);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，我们会构建一个 ReactiveOrderClient 类来完成对 order-service 的远程访问，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveOrderClient</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">OrderMapper</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getOrderByOrderNumber</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">orderNumber</span><span style="color:#E1E4E8;">) {          </span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">OrderMapper</span><span style="color:#E1E4E8;">&gt; orderMono </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost:8081/orders/{orderNumber}&quot;</span><span style="color:#E1E4E8;">, orderNumber)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(OrderMapper.class).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getOrderFromRemote&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderMono;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveOrderClient</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">OrderMapper</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getOrderByOrderNumber</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">orderNumber</span><span style="color:#24292E;">) {          </span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">OrderMapper</span><span style="color:#24292E;">&gt; orderMono </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost:8081/orders/{orderNumber}&quot;</span><span style="color:#24292E;">, orderNumber)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(OrderMapper.class).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getOrderFromRemote&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderMono;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以注意到，这里基于 WebClient.create() 工厂方法构建了一个 WebClient 对象，并通过它的 retrieve 方法来完成对远程 order-serivce 的请求过程。同时，我们看到这里的返回对象是一个 Mono<code>&lt;OrderMapper&gt;</code>，而不是一个 Mono<code>&lt;Order&gt;</code> 对象。事实上，它们的内部字段都是一一对应的，只是位于两个不同的代码工程中，所以故意从命名上做了区分。WebClient 会自动完成 OrderMapper 与 Order 之间的自动映射。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>在上一讲的基础上，这一讲我为你引入了 WebClient 模板类来完成对远程 HTTP 端点的响应式访问。WebClient 为开发人员提供了一大批有用的工具方法来实现 HTTP 请求的发送以及响应的获取。同时，该模板类还提供了一批定制化的入口供开发人员嵌入对 HTTP 请求过程进行精细化管理的处理逻辑。</p><p>这里给你留一道思考题：在使用 WebClient 时，如何实现对请求异常等控制逻辑的定制化处理？</p><p>关于远程调用，业界也存在一些协议，在网络通信层面提供非阻塞式的交互体验。RSocket 就是这一领域的主流实现，下一讲我将针对该协议和你一起展开讨论，到时候见。</p><blockquote><p>点击链接，获取课程相关代码↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,85),e=[o];function t(c,r,E,y,i,u){return n(),a("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
