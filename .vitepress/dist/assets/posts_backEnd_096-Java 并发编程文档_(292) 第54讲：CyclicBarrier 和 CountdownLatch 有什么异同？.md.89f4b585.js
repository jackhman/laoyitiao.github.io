import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.4e7d56ce.js";const d=JSON.parse('{"title":"第54讲：CyclicBarrier和CountdownLatch有什么异同？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/096-Java 并发编程文档/(292) 第54讲：CyclicBarrier 和 CountdownLatch 有什么异同？.md","filePath":"posts/backEnd/096-Java 并发编程文档/(292) 第54讲：CyclicBarrier 和 CountdownLatch 有什么异同？.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/096-Java 并发编程文档/(292) 第54讲：CyclicBarrier 和 CountdownLatch 有什么异同？.md"},o=l(`<h1 id="第54讲-cyclicbarrier和countdownlatch有什么异同" tabindex="-1">第54讲：CyclicBarrier和CountdownLatch有什么异同？ <a class="header-anchor" href="#第54讲-cyclicbarrier和countdownlatch有什么异同" aria-label="Permalink to &quot;第54讲：CyclicBarrier和CountdownLatch有什么异同？&quot;">​</a></h1><p>本课时我们主要介绍 CyclicBarrier 和 CountDownLatch 有什么不同。</p><h3 id="cyclicbarrier" tabindex="-1">CyclicBarrier <a class="header-anchor" href="#cyclicbarrier" aria-label="Permalink to &quot;CyclicBarrier&quot;">​</a></h3><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><p>CyclicBarrier 和 CountDownLatch 确实有一定的相似性，它们都能阻塞一个或者一组线程，直到某种预定的条件达到之后，这些之前在等待的线程才会统一出发，继续向下执行。正因为它们有这个相似点，你可能会认为它们的作用是完全一样的，其实并不是。</p><p>CyclicBarrier 可以构造出一个集结点，当某一个线程执行 await() 的时候，它就会到这个集结点开始等待，等待这个栅栏被撤销。直到预定数量的线程都到了这个集结点之后，这个栅栏就会被撤销，之前等待的线程就在此刻统一出发，继续去执行剩下的任务。</p><p>举一个生活中的例子。假设我们班级春游去公园里玩，并且会租借三人自行车，每个人都可以骑，但由于这辆自行车是三人的，所以要凑齐三个人才能骑一辆，而且从公园大门走到自行车驿站需要一段时间。那么我们模拟这个场景，写出如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CyclicBarrierDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CyclicBarrier cyclicBarrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CyclicBarrier</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Task</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, cyclicBarrier)).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Task</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CyclicBarrier cyclicBarrier;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Task</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, CyclicBarrier </span><span style="color:#FFAB70;">cyclicBarrier</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cyclicBarrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cyclicBarrier;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;同学&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;现在从大门出发，前往自行车驿站&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">) (Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;同学&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;到了自行车驿站，开始等待其他人到达&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                cyclicBarrier.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;同学&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;开始骑车&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BrokenBarrierException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CyclicBarrierDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        CyclicBarrier cyclicBarrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CyclicBarrier</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, cyclicBarrier)).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CyclicBarrier cyclicBarrier;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, CyclicBarrier </span><span style="color:#E36209;">cyclicBarrier</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cyclicBarrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cyclicBarrier;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;同学&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;现在从大门出发，前往自行车驿站&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">) (Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;同学&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;到了自行车驿站，开始等待其他人到达&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                cyclicBarrier.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;同学&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;开始骑车&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BrokenBarrierException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这段代码中可以看到，首先建了一个参数为 3 的 CyclicBarrier，参数为 3 的意思是需要等待 3 个线程到达这个集结点才统一放行；然后我们又在 for 循环中去开启了 6 个线程，每个线程中执行的 Runnable 对象就在下方的 Task 类中，直接看到它的 run 方法，它首先会打印出&quot;同学某某现在从大门出发，前往自行车驿站&quot;，然后是一个随机时间的睡眠，这就代表着从大门开始步行走到自行车驿站的时间，由于每个同学的步行速度不一样，所以时间用随机值来模拟。</p><p>当同学们都到了驿站之后，比如某一个同学到了驿站，首先会打印出&quot;同学某某到了自行车驿站，开始等待其他人到达&quot;的消息，然后去调用 CyclicBarrier 的 await() 方法。一旦它调用了这个方法，它就会陷入等待，直到三个人凑齐，才会继续往下执行，一旦开始继续往下执行，就意味着 3 个同学开始一起骑车了，所以打印出&quot;某某开始骑车&quot;这个语句。</p><p>接下来我们运行一下这个程序，结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">同学1现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学3现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学2现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学4现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学5现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学6现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学5到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学2到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学3到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学3开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学5开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学2开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学6到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学4到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学1到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学1开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学6开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学4开始骑车</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">同学1现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学3现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学2现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学4现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学5现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学6现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学5到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学2到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学3到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学3开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学5开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学2开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学6到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学4到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学1到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学1开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学6开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学4开始骑车</span></span></code></pre></div><p>可以看到 6 个同学纷纷从大门出发走到自行车驿站，因为每个人的速度不一样，所以会有 3 个同学先到自行车驿站，不过在这 3 个先到的同学里面，前面 2 个到的都必须等待第 3 个人到齐之后，才可以开始骑车。后面的同学也一样，由于第一辆车已经被骑走了，第二辆车依然也要等待 3 个人凑齐才能统一发车。</p><p>要想实现这件事情，如果你不利用 CyclicBarrier 去做的话，逻辑可能会非常复杂，因为你也不清楚哪个同学先到、哪个后到。而用了 CyclicBarrier 之后，可以非常简洁优雅的实现这个逻辑，这就是它的一个非常典型的应用场景。</p><h4 id="执行动作-barrieraction" tabindex="-1">执行动作 barrierAction <a class="header-anchor" href="#执行动作-barrieraction" aria-label="Permalink to &quot;执行动作 barrierAction&quot;">​</a></h4><p>public CyclicBarrier(int parties, Runnable barrierAction)：当 parties 线程到达集结点时，继续往下执行前，会执行这一次这个动作。</p><p>接下来我们再介绍一下它的一个额外功能，就是执行动作 barrierAction 功能。CyclicBarrier 还有一个构造函数是传入两个参数的，第一个参数依然是 parties，代表需要几个线程到齐；第二个参数是一个 Runnable 对象，它就是我们下面所要介绍的 barrierAction。</p><p>当预设数量的线程到达了集结点之后，在出发的时候，便会执行这里所传入的 Runnable 对象，那么假设我们把刚才那个代码的构造函数改成如下这个样子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">CyclicBarrier cyclicBarrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CyclicBarrier</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;凑齐3人了，出发！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">CyclicBarrier cyclicBarrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CyclicBarrier</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;凑齐3人了，出发！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>可以看出，我们传入了第二个参数，它是一个 Runnable 对象，在这里传入了这个 Runnable 之后，这个任务就会在到齐的时候去打印&quot;凑齐3人了，出发！&quot;。上面的代码如果改成这个样子，则执行结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">同学1现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学3现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学2现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学4现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学5现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学6现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#E1E4E8;">同学2到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学4到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学6到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">凑齐3人了，出发！</span></span>
<span class="line"><span style="color:#E1E4E8;">同学6开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学2开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学4开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学1到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学3到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">同学5到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#E1E4E8;">凑齐3人了，出发！</span></span>
<span class="line"><span style="color:#E1E4E8;">同学5开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学1开始骑车</span></span>
<span class="line"><span style="color:#E1E4E8;">同学3开始骑车</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">同学1现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学3现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学2现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学4现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学5现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学6现在从大门出发，前往自行车驿站</span></span>
<span class="line"><span style="color:#24292E;">同学2到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学4到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学6到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">凑齐3人了，出发！</span></span>
<span class="line"><span style="color:#24292E;">同学6开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学2开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学4开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学1到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学3到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">同学5到了自行车驿站，开始等待其他人到达</span></span>
<span class="line"><span style="color:#24292E;">凑齐3人了，出发！</span></span>
<span class="line"><span style="color:#24292E;">同学5开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学1开始骑车</span></span>
<span class="line"><span style="color:#24292E;">同学3开始骑车</span></span></code></pre></div><p>可以看出，三个人凑齐了一组之后，就会打印出&quot;凑齐 3 人了，出发！&quot;这样的语句，该语句恰恰是我们在这边传入 Runnable 所执行的结果。</p><p>值得注意的是，这个语句每个周期只打印一次，不是说你有几个线程在等待就打印几次，而是说这个任务只在&quot;开闸&quot;的时候执行一次。</p><h3 id="cyclicbarrier-和-countdownlatch-的异同" tabindex="-1">CyclicBarrier 和 CountDownLatch 的异同 <a class="header-anchor" href="#cyclicbarrier-和-countdownlatch-的异同" aria-label="Permalink to &quot;CyclicBarrier 和 CountDownLatch 的异同&quot;">​</a></h3><p>下面我们来总结一下 CyclicBarrier 和 CountDownLatch 有什么异同。</p><p>相同点：都能阻塞一个或一组线程，直到某个预设的条件达成发生，再统一出发。</p><p>但是它们也有很多不同点，具体如下。</p><ul><li><p><strong>作用对象不同</strong>：CyclicBarrier 要等固定数量的线程都到达了栅栏位置才能继续执行，而 CountDownLatch 只需等待数字倒数到 0，也就是说 CountDownLatch 作用于事件，但 CyclicBarrier 作用于线程；CountDownLatch 是在调用了 countDown 方法之后把数字倒数减 1，而 CyclicBarrier 是在某线程开始等待后把计数减 1。</p></li><li><p><strong>可重用性不同</strong>：CountDownLatch 在倒数到 0 并且触发门闩打开后，就不能再次使用了，除非新建一个新的实例；而 CyclicBarrier 可以重复使用，在刚才的代码中也可以看出，每 3 个同学到了之后都能出发，并不需要重新新建实例。CyclicBarrier 还可以随时调用 reset 方法进行重置，如果重置时有线程已经调用了 await 方法并开始等待，那么这些线程则会抛出 BrokenBarrierException 异常。</p></li><li><p><strong>执行动作不同</strong>：CyclicBarrier 有执行动作 barrierAction，而 CountDownLatch 没这个功能。</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>以上就是本课时的内容，在本课时中，首先介绍了 CyclicBarrier 的作用、代码示例和执行动作，然后对 CyclicBarrier 和 CountDownLatch 的异同进行了总结。</p>`,30),c=[o];function e(r,t,E,y,i,u){return n(),a("div",null,c)}const C=s(p,[["render",e]]);export{d as __pageData,C as default};
