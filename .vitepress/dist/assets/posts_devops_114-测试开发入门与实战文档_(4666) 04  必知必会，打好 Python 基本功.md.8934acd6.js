import{_ as p,j as o,o as e,g as t,k as a,h as l,Q as s}from"./chunks/framework.4e7d56ce.js";const g=JSON.parse('{"title":"Python 安装 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4666) 04  必知必会，打好 Python 基本功.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4666) 04  必知必会，打好 Python 基本功.md","lastUpdated":1696417798000}'),c={name:"posts/devops/114-测试开发入门与实战文档/(4666) 04  必知必会，打好 Python 基本功.md"},r=s(`<p>Python 语言是一门动态的、面向对象编程的语言，它凭借入门简单、功能强大等优势，受到越来越多开发人员的追捧，已成为一门长期霸榜前三位的热门编程语言。</p><p>它的语法非常简洁，同样的功能，相比 Java 等老牌编程语言，Python 花费更少的代码行数便可将其实现；对初学者也非常友好，它的代码可读性和可调试性很强，在复杂情况下，初学者也可以将重心放在编程对象和解决问题的思维方法上，而不必去过多关心语言的语法和类型。</p><p>所以，在转型测试开发过程中，你必须掌握好 Python 这一编程语言。</p><h3 id="python-安装" tabindex="-1">Python 安装 <a class="header-anchor" href="#python-安装" aria-label="Permalink to &quot;Python 安装&quot;">​</a></h3><p>Python 的最新版本是 3.8.3. 你可以点击进入 <a href="https://wiki.python.org/moin/BeginnersGuide/Download" target="_blank" rel="noreferrer">Pyhton 官网</a>下载安装包直接安装。</p><p>如果你当前系统用的是 Python 2，那么你需要安装最新版本 Python 3，安装完毕后，你可以通过输入以下命令行，来查看你系统的默认版本号。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">python</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">python</span></span></code></pre></div><p>如果发现显示的是 Python 2.x, 你可以通过如下方式更改默认值。</p><h4 id="_1-如果你的电脑是-windows-系统" tabindex="-1">1.如果你的电脑是 Windows 系统 <a class="header-anchor" href="#_1-如果你的电脑是-windows-系统" aria-label="Permalink to &quot;1.如果你的电脑是 Windows 系统&quot;">​</a></h4><ul><li><p>通过&quot;Windows + R&quot;快捷键组合打开运行；</p></li><li><p>输入&quot;sysdm.cpl&quot;；</p></li><li><p>点击&quot;环境变量（N）&quot;，在弹出的对话框中，找到&quot;系统变量&quot;；</p></li><li><p>选中&quot;Path&quot;，并将 Python 的路径更改为 Python3 这一安装路径；</p></li><li><p>再次在命令行输入&quot;python&quot;查看输出的版本号。</p></li></ul><h4 id="_2-如果你的电脑是-macos-系统" tabindex="-1">2.如果你的电脑是 MacOS 系统 <a class="header-anchor" href="#_2-如果你的电脑是-macos-系统" aria-label="Permalink to &quot;2.如果你的电脑是 MacOS 系统&quot;">​</a></h4><ul><li><p>打开 Terminal， 在命令行中输入&quot;which python 3&quot;，</p><p>你将看到如下类似输出 /usr/local/bin/python 3；</p></li><li><p>在 Terminal 继续输入&quot;open ~/.bash_profile &quot; ，并修改文件如下 alias python=&quot;/usr/local/bin/python3&quot;；</p></li><li><p>保存并关闭文件，然后运行如下命令</p><p>source ~/.bash_profile；</p></li><li><p>在 Terminal 里继续输入命令行入&quot;python&quot;，查看输出的版本号。</p></li></ul><p>为了更有效率地开发，Python 安装好后，你还需要点击进入 <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noreferrer">Pycharm 官网</a>，下载并配置集成开发环境。</p><h3 id="python-标准数据类型" tabindex="-1">Python 标准数据类型 <a class="header-anchor" href="#python-标准数据类型" aria-label="Permalink to &quot;Python 标准数据类型&quot;">​</a></h3><p>不像其他语言，Python 中的定义变量无须进行类型声明。Python 的标准数据类型有：Numbers（数字）、String（字符串）、List（列表）、Tuple（元组）和 Dictionary（字典）。</p><p>下面举个小例子来看下这几种类型的用法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#定义数字变量</span></span>
<span class="line"><span style="color:#E1E4E8;">total_num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#6A737D;">#定义字符串变量</span></span>
<span class="line"><span style="color:#E1E4E8;">welcome_words </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;欢迎来到蔡超的测试开发课&quot;</span></span>
<span class="line"><span style="color:#6A737D;">#定义列表。列表元素可修改，也可以添加删除</span></span>
<span class="line"><span style="color:#E1E4E8;">student_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Ray&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">#定义元组（元组与列表类似,区别在于元组的元素不能修改）</span></span>
<span class="line"><span style="color:#E1E4E8;">unique_student </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Ray&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">#定义字典,字典一般是key-value结构</span></span>
<span class="line"><span style="color:#E1E4E8;">course_rank </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;math&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logic&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;English&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Ray&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#定义数字变量</span></span>
<span class="line"><span style="color:#24292E;">total_num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#6A737D;">#定义字符串变量</span></span>
<span class="line"><span style="color:#24292E;">welcome_words </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;欢迎来到蔡超的测试开发课&quot;</span></span>
<span class="line"><span style="color:#6A737D;">#定义列表。列表元素可修改，也可以添加删除</span></span>
<span class="line"><span style="color:#24292E;">student_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Ray&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">#定义元组（元组与列表类似,区别在于元组的元素不能修改）</span></span>
<span class="line"><span style="color:#24292E;">unique_student </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Ray&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#定义字典,字典一般是key-value结构</span></span>
<span class="line"><span style="color:#24292E;">course_rank </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;math&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logic&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;English&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Ray&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Python 中，List 和 Dictionary 分别有很多种内置用法，在此介绍其中最常用的部分。</p><h4 id="_1-list-常用操作" tabindex="-1">1.List 常用操作 <a class="header-anchor" href="#_1-list-常用操作" aria-label="Permalink to &quot;1.List 常用操作&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#定义列表 list1 = [&#39;Kevin&#39;, &#39;Emily&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#计算列表元素个数</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">（</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">）</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(list1)</span></span>
<span class="line"><span style="color:#6A737D;">#获取列表的第N个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：list[N]</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">#返回Kevin</span></span>
<span class="line"><span style="color:#6A737D;">#往List的末尾添加一个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.append（x）</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.append（</span><span style="color:#9ECBFF;">&#39;Ray&#39;</span><span style="color:#E1E4E8;">）</span><span style="color:#6A737D;">#执行完后，list1变成[&#39;Kevin&#39;, &#39;Emily&#39;，&#39;Ray&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#扩展List，常常用来把一个可迭代数据的每一个元素append到List里, 它相当于a[len(a):] = iterable</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.extend(x)</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.extend([</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(list1) </span><span style="color:#6A737D;">#返回[&#39;Kevin&#39;, &#39;Emily&#39;，&#39;Ray&#39;，2， 3， 4]</span></span>
<span class="line"><span style="color:#6A737D;">#插入列表</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.insert(i, x) </span><span style="color:#6A737D;">#在第i个位置插入x元素</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.insert(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Ray&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">#在第0个位置插入元素Ray,列表变成[&#39;Ray&#39;, &#39;Kevin&#39;, &#39;Emily&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#删除元素</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.remove(x)</span><span style="color:#6A737D;">#删除列表里第一个元素，它的值等于x</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.remove(</span><span style="color:#9ECBFF;">&#39;Kevin&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">#删除指定位置的元素,如果没有指定i，就删除最后一个元素并返回剩余的list</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：list1.pop(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.pop(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">#删除&quot;Kevin这个元素&quot;</span></span>
<span class="line"><span style="color:#6A737D;">#清空列表</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.clear()</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.clear()</span></span>
<span class="line"><span style="color:#6A737D;">#返回list中x出现的次数</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.count(x)</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.count(</span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">#给列表排序, 把list安装key的值来排序， 当reverse等于true时为倒序。</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.sort(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reverse</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.sort(</span><span style="color:#FFAB70;">reverse</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">true) </span><span style="color:#6A737D;">#返回[&#39;Emily&#39;，&#39;Kevin&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#翻转列表</span></span>
<span class="line"><span style="color:#E1E4E8;">语法：</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">.reverse()</span></span>
<span class="line"><span style="color:#E1E4E8;">举例：list1.reverse() </span><span style="color:#6A737D;">#返回[&#39;Emily&#39;，&#39;Kevin&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#定义列表 list1 = [&#39;Kevin&#39;, &#39;Emily&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#计算列表元素个数</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">（</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">）</span></span>
<span class="line"><span style="color:#24292E;">举例：</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(list1)</span></span>
<span class="line"><span style="color:#6A737D;">#获取列表的第N个元素</span></span>
<span class="line"><span style="color:#24292E;">语法：list[N]</span></span>
<span class="line"><span style="color:#24292E;">举例：list1[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">#返回Kevin</span></span>
<span class="line"><span style="color:#6A737D;">#往List的末尾添加一个元素</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.append（x）</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.append（</span><span style="color:#032F62;">&#39;Ray&#39;</span><span style="color:#24292E;">）</span><span style="color:#6A737D;">#执行完后，list1变成[&#39;Kevin&#39;, &#39;Emily&#39;，&#39;Ray&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#扩展List，常常用来把一个可迭代数据的每一个元素append到List里, 它相当于a[len(a):] = iterable</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.extend(x)</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.extend([</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(list1) </span><span style="color:#6A737D;">#返回[&#39;Kevin&#39;, &#39;Emily&#39;，&#39;Ray&#39;，2， 3， 4]</span></span>
<span class="line"><span style="color:#6A737D;">#插入列表</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.insert(i, x) </span><span style="color:#6A737D;">#在第i个位置插入x元素</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.insert(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Ray&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">#在第0个位置插入元素Ray,列表变成[&#39;Ray&#39;, &#39;Kevin&#39;, &#39;Emily&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#删除元素</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.remove(x)</span><span style="color:#6A737D;">#删除列表里第一个元素，它的值等于x</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.remove(</span><span style="color:#032F62;">&#39;Kevin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#删除指定位置的元素,如果没有指定i，就删除最后一个元素并返回剩余的list</span></span>
<span class="line"><span style="color:#24292E;">语法：list1.pop(i)</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.pop(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">#删除&quot;Kevin这个元素&quot;</span></span>
<span class="line"><span style="color:#6A737D;">#清空列表</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.clear()</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.clear()</span></span>
<span class="line"><span style="color:#6A737D;">#返回list中x出现的次数</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.count(x)</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.count(</span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#给列表排序, 把list安装key的值来排序， 当reverse等于true时为倒序。</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.sort(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reverse</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.sort(</span><span style="color:#E36209;">reverse</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">true) </span><span style="color:#6A737D;">#返回[&#39;Emily&#39;，&#39;Kevin&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#翻转列表</span></span>
<span class="line"><span style="color:#24292E;">语法：</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">.reverse()</span></span>
<span class="line"><span style="color:#24292E;">举例：list1.reverse() </span><span style="color:#6A737D;">#返回[&#39;Emily&#39;，&#39;Kevin&#39;]</span></span></code></pre></div><h4 id="_2-dictionary-常用操作" tabindex="-1">2.Dictionary 常用操作 <a class="header-anchor" href="#_2-dictionary-常用操作" aria-label="Permalink to &quot;2.Dictionary 常用操作&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#先定义字典</span></span>
<span class="line"><span style="color:#E1E4E8;">dict1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;math&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logic&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">#返回指定键的值,如果字典里没这个可以则返回default的值</span></span>
<span class="line"><span style="color:#6A737D;">#获取math的值</span></span>
<span class="line"><span style="color:#E1E4E8;">dict1.get(</span><span style="color:#9ECBFF;">&quot;math&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">#获取不存在的值English, 则返回Ray</span></span>
<span class="line"><span style="color:#E1E4E8;">my_dict.get(</span><span style="color:#9ECBFF;">&quot;English&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Ray&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">#获取字典里的所有key</span></span>
<span class="line"><span style="color:#E1E4E8;">dict1.keys()</span></span>
<span class="line"><span style="color:#6A737D;">#获取字典所有的values</span></span>
<span class="line"><span style="color:#E1E4E8;">dict1.values()</span></span>
<span class="line"><span style="color:#6A737D;">#获取字典的key和value</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> dict1.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{key}</span><span style="color:#9ECBFF;"> -- </span><span style="color:#79B8FF;">{value}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">k, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">v))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#改变字典的值</span></span>
<span class="line"><span style="color:#E1E4E8;">dict1[</span><span style="color:#9ECBFF;">&quot;math&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Ray&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 执行后，字典变成{&quot;math&quot;: &quot;Ray&quot;, &quot;logic&quot;: &quot;Emily&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">#删除字典的某个值</span></span>
<span class="line"><span style="color:#F97583;">del</span><span style="color:#E1E4E8;"> dict1[</span><span style="color:#9ECBFF;">&quot;math&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">#执行后，字典变成{&quot;logic&quot;: &quot;Emily&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">#删除字典</span></span>
<span class="line"><span style="color:#F97583;">del</span><span style="color:#E1E4E8;"> dict1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#先定义字典</span></span>
<span class="line"><span style="color:#24292E;">dict1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;math&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logic&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">#返回指定键的值,如果字典里没这个可以则返回default的值</span></span>
<span class="line"><span style="color:#6A737D;">#获取math的值</span></span>
<span class="line"><span style="color:#24292E;">dict1.get(</span><span style="color:#032F62;">&quot;math&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#获取不存在的值English, 则返回Ray</span></span>
<span class="line"><span style="color:#24292E;">my_dict.get(</span><span style="color:#032F62;">&quot;English&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Ray&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#获取字典里的所有key</span></span>
<span class="line"><span style="color:#24292E;">dict1.keys()</span></span>
<span class="line"><span style="color:#6A737D;">#获取字典所有的values</span></span>
<span class="line"><span style="color:#24292E;">dict1.values()</span></span>
<span class="line"><span style="color:#6A737D;">#获取字典的key和value</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dict1.items():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{key}</span><span style="color:#032F62;"> -- </span><span style="color:#005CC5;">{value}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">k, </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#改变字典的值</span></span>
<span class="line"><span style="color:#24292E;">dict1[</span><span style="color:#032F62;">&quot;math&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Ray&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 执行后，字典变成{&quot;math&quot;: &quot;Ray&quot;, &quot;logic&quot;: &quot;Emily&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">#删除字典的某个值</span></span>
<span class="line"><span style="color:#D73A49;">del</span><span style="color:#24292E;"> dict1[</span><span style="color:#032F62;">&quot;math&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">#执行后，字典变成{&quot;logic&quot;: &quot;Emily&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">#删除字典</span></span>
<span class="line"><span style="color:#D73A49;">del</span><span style="color:#24292E;"> dict1</span></span></code></pre></div><h3 id="python-控制流" tabindex="-1">Python 控制流 <a class="header-anchor" href="#python-控制流" aria-label="Permalink to &quot;Python 控制流&quot;">​</a></h3><p>控制流非常重要，你的代码要如实表现业务逻辑，就必须掌握控制流，控制流中最常见的是分支语句和循环。</p><p>在 Python 里，常用的控制流关键字如下。</p><h4 id="_1-while-循环" tabindex="-1">1.while 循环 <a class="header-anchor" href="#_1-while-循环" aria-label="Permalink to &quot;1.while 循环&quot;">​</a></h4><p>while 循环的作用在于，当某个条件成立时，一直执行循环语句， 直至循环条件不成立为止。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#while循环</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> 判断条件(condition)：</span></span>
<span class="line"><span style="color:#E1E4E8;">    执行语句(statements)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">......</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#while循环</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> 判断条件(condition)：</span></span>
<span class="line"><span style="color:#24292E;">    执行语句(statements)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">......</span></span></code></pre></div>`,28),y=s(`<p>while 循环图</p><p>当你无法确定循环的次数时，通常使用 while 循环指定一个循环执行条件。</p><h4 id="_2-for-循环" tabindex="-1">2.for 循环 <a class="header-anchor" href="#_2-for-循环" aria-label="Permalink to &quot;2.for 循环&quot;">​</a></h4><p>当我们需要对列表、字典等进行遍历操作时，我们通常会用到 for 循环。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#for循环</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> iterating_var </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> sequence:</span></span>
<span class="line"><span style="color:#E1E4E8;">   执行语句(statements)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">......</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#for循环</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> iterating_var </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> sequence:</span></span>
<span class="line"><span style="color:#24292E;">   执行语句(statements)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">......</span></span></code></pre></div>`,5),E=s(`<p>for 循环图</p><p>当对列表、字典进行遍历时，或者当你能确定循环的次数时，通常使用 for 循环。</p><h4 id="_3-if-语句" tabindex="-1">3.if 语句 <a class="header-anchor" href="#_3-if-语句" aria-label="Permalink to &quot;3.if 语句&quot;">​</a></h4><p>if...else...语句用处非常广泛，当业务逻辑需要判断某个条件是否成立时，就可以用 if...else...语句。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#分支语句</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> 条件：</span></span>
<span class="line"><span style="color:#E1E4E8;">  执行条件语句A(statements)</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">：</span></span>
<span class="line"><span style="color:#E1E4E8;">  执行条件语句B(statements)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#分支语句</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> 条件：</span></span>
<span class="line"><span style="color:#24292E;">  执行条件语句A(statements)</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">：</span></span>
<span class="line"><span style="color:#24292E;">  执行条件语句B(statements)</span></span></code></pre></div>`,5),i=s(`<p>if 语句图</p><h4 id="_4-控制流应用案例" tabindex="-1">4.控制流应用案例 <a class="header-anchor" href="#_4-控制流应用案例" aria-label="Permalink to &quot;4.控制流应用案例&quot;">​</a></h4><p>了解了 Python 的控制流后，下面直接看个例子加深下印象，我建立了一个名为 test.py 的文件，内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#test.py</span></span>
<span class="line"><span style="color:#E1E4E8;">my_students </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">course_rank </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;math&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logic&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;English&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Ray&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    my_students_rank </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> course_rank.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> my_students):</span></span>
<span class="line"><span style="color:#E1E4E8;">            my_students_rank[v] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#E1E4E8;">    p_len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(my_students_rank)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(p_len </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> my_students_rank.keys():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{person}</span><span style="color:#9ECBFF;"> are good at </span><span style="color:#79B8FF;">{course}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(</span><span style="color:#FFAB70;">person</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">p, </span><span style="color:#FFAB70;">course</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">my_students_rank[p]))</span></span>
<span class="line"><span style="color:#E1E4E8;">            p_len </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#test.py</span></span>
<span class="line"><span style="color:#24292E;">my_students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">course_rank </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;math&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logic&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;English&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Ray&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    my_students_rank </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> course_rank.items():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">( v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> my_students):</span></span>
<span class="line"><span style="color:#24292E;">            my_students_rank[v] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k</span></span>
<span class="line"><span style="color:#24292E;">    p_len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(my_students_rank)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(p_len </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> my_students_rank.keys():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{person}</span><span style="color:#032F62;"> are good at </span><span style="color:#005CC5;">{course}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(</span><span style="color:#E36209;">person</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p, </span><span style="color:#E36209;">course</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">my_students_rank[p]))</span></span>
<span class="line"><span style="color:#24292E;">            p_len </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>那么这段代码是什么含义呢？我来逐句解释一下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#test.py</span></span>
<span class="line"><span style="color:#6A737D;">#1. 我定义了一个list类型的数据变量my_students,存放我所有的学生。</span></span>
<span class="line"><span style="color:#E1E4E8;">my_students </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">#2. 我定义了个dict类型的变量course_rank，存放整个学校所有课程分数最高的学生。</span></span>
<span class="line"><span style="color:#E1E4E8;">course_rank </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;math&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;logic&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Emily&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;English&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Ray&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">#如果该模块被直接调用时，则执行第9行以后的语句，否则不执行。</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#定义了一个字典my_students_rank。存放课程分数最高，且是我教的学生。</span></span>
<span class="line"><span style="color:#E1E4E8;">    my_students_rank </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#循环获取course_rank里的所有key和value，如果value在我的学生列表 my_students里，则把学生名字作为key，课程作为value保存在新建立的字典my_students_rank里。</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> course_rank.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> my_students):</span></span>
<span class="line"><span style="color:#E1E4E8;">            my_students_rank[v] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#获取课程分数最高，且是我的学生的人数</span></span>
<span class="line"><span style="color:#E1E4E8;">    p_len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(my_students_rank)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#循环字典里的每个key和value， 把每个学生擅长的科目打印出来。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(p_len </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> my_students_rank.keys():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{person}</span><span style="color:#9ECBFF;"> is good at </span><span style="color:#79B8FF;">{course}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(</span><span style="color:#FFAB70;">person</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">p, </span><span style="color:#FFAB70;">course</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">my_students_rank[p]))</span></span>
<span class="line"><span style="color:#E1E4E8;">            p_len </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#test.py</span></span>
<span class="line"><span style="color:#6A737D;">#1. 我定义了一个list类型的数据变量my_students,存放我所有的学生。</span></span>
<span class="line"><span style="color:#24292E;">my_students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">#2. 我定义了个dict类型的变量course_rank，存放整个学校所有课程分数最高的学生。</span></span>
<span class="line"><span style="color:#24292E;">course_rank </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;math&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;logic&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Emily&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;English&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Ray&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">#如果该模块被直接调用时，则执行第9行以后的语句，否则不执行。</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#定义了一个字典my_students_rank。存放课程分数最高，且是我教的学生。</span></span>
<span class="line"><span style="color:#24292E;">    my_students_rank </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">#循环获取course_rank里的所有key和value，如果value在我的学生列表 my_students里，则把学生名字作为key，课程作为value保存在新建立的字典my_students_rank里。</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> course_rank.items():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">( v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> my_students):</span></span>
<span class="line"><span style="color:#24292E;">            my_students_rank[v] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#获取课程分数最高，且是我的学生的人数</span></span>
<span class="line"><span style="color:#24292E;">    p_len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(my_students_rank)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#循环字典里的每个key和value， 把每个学生擅长的科目打印出来。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(p_len </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> my_students_rank.keys():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{person}</span><span style="color:#032F62;"> is good at </span><span style="color:#005CC5;">{course}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(</span><span style="color:#E36209;">person</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p, </span><span style="color:#E36209;">course</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">my_students_rank[p]))</span></span>
<span class="line"><span style="color:#24292E;">            p_len </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>我们来执行下这段语句：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#在terminal里，定位到test.py所在的目录下，然后执行</span></span>
<span class="line"><span style="color:#E1E4E8;">python test.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#在terminal里，定位到test.py所在的目录下，然后执行</span></span>
<span class="line"><span style="color:#24292E;">python test.py</span></span></code></pre></div><p>可以看到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Kevin is good at math</span></span>
<span class="line"><span style="color:#E1E4E8;">Emily is good at logic</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Kevin is good at math</span></span>
<span class="line"><span style="color:#24292E;">Emily is good at logic</span></span></code></pre></div><p>了解了 While 语句、for 语句、if...else...语句，你就可以使用代码来表述真实业务场景了。</p><p>但你会发现这些代码完全是流水账似的，没有函数也没有模块，这显然不符合代码规范。那么，我们就必须学习下模块和函数。</p><h3 id="函数、模块、包" tabindex="-1">函数、模块、包 <a class="header-anchor" href="#函数、模块、包" aria-label="Permalink to &quot;函数、模块、包&quot;">​</a></h3><p>上面我们讲了 Python 里的基本语法语句的使用，下面我们看下这些基本语法语句是如何被使用的。通常我们的代码为了方便调用，都会以函数、模块、包等形式存在。</p><h4 id="_1-函数" tabindex="-1">1.函数 <a class="header-anchor" href="#_1-函数" aria-label="Permalink to &quot;1.函数&quot;">​</a></h4><p>函数就是能实现一定功能的代码语句的集合。在 Python 中定义函数很简单：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">函数名</span><span style="color:#E1E4E8;">(参数)：</span></span>
<span class="line"><span style="color:#E1E4E8;">  函数体</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">函数名</span><span style="color:#24292E;">(参数)：</span></span>
<span class="line"><span style="color:#24292E;">  函数体</span></span></code></pre></div><p>跟其他语言一样， Python 函数定义同样支持无形参、有形参、可变参数等；而函数可以有返回值，也可以没有返回值。下面我们来一一学习：</p><ul><li><strong>无形参---不需要参数输入</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 无形参，无返回值</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print_log</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;&#39; Welcome to Kevin&#39;s class ! &#39;&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    print_log()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 无形参，无返回值</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_log</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;&#39; Welcome to Kevin&#39;s class ! &#39;&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    print_log()</span></span></code></pre></div><ul><li><strong>有形参---函数接受用户参数</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#有一个形参，有返回值</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is_true</span><span style="color:#E1E4E8;">(x):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#6A737D;"># 有两个形参，有返回值</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">min_number</span><span style="color:#E1E4E8;">(x, y):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;">y:</span></span>
<span class="line"><span style="color:#E1E4E8;">       x,y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> y, x</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span></span>
<span class="line"><span style="color:#6A737D;">#有可变个形参， 有返回值</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sum_number</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args):</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> args:</span></span>
<span class="line"><span style="color:#E1E4E8;">        total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;">k</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"><span style="color:#6A737D;">#可变个形参，接受key-value的形式, 无返回值</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count_student</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> kwargs.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{0}</span><span style="color:#9ECBFF;"> - </span><span style="color:#79B8FF;">{1}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(k, v))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#请你运行下面的函数，来理解Python的函数</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sum_number(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(total)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">min</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> min_number(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">min</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    count_student(</span><span style="color:#FFAB70;">math</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;kevin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">logic</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;emily&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#有一个形参，有返回值</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is_true</span><span style="color:#24292E;">(x):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6A737D;"># 有两个形参，有返回值</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">min_number</span><span style="color:#24292E;">(x, y):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;">y:</span></span>
<span class="line"><span style="color:#24292E;">       x,y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y, x</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span></span>
<span class="line"><span style="color:#6A737D;">#有可变个形参， 有返回值</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sum_number</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args):</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> args:</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;">k</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"><span style="color:#6A737D;">#可变个形参，接受key-value的形式, 无返回值</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count_student</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> kwargs.items():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{0}</span><span style="color:#032F62;"> - </span><span style="color:#005CC5;">{1}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(k, v))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#请你运行下面的函数，来理解Python的函数</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sum_number(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(total)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">min</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> min_number(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">min</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    count_student(</span><span style="color:#E36209;">math</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;kevin&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">logic</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;emily&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="_2-模块" tabindex="-1">2.模块 <a class="header-anchor" href="#_2-模块" aria-label="Permalink to &quot;2.模块&quot;">​</a></h4><p>模块是为了编写可维护的代码，而把函数分组放到不同文件里的行为。在 Python 中，一个 .py文件 就是一个模块，一个模块可以包括一个或多个功能，模块又可以被一个或多个其他模块引用。</p><p>使用模块的好处很多， 我讲典型的两个：</p><ul><li><strong>既提高了编程的效率，也增强了代码的可维护性。</strong></li></ul><p>把模块导入当前模块，当前模块即可拥有模块已经实现的功能。如果模块的功能本身需要更改，我们只需要更改模块定义的地方即可，其他地方都无须更改。</p><ul><li><strong>不同模块的函数名和变量名可以重名。</strong></li></ul><p>有了模块，避免了函数名和变量名之间的冲突，例如如下的文件结构：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">myproject</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">module1.py</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">module2.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myproject</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">module1.py</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">module2.py</span></span></code></pre></div><p>假设我在 module1.py 里和 module2.py 里，同时定义一个名字为 take_picture() 的函数。这两个不同模块的函数虽然都叫 take_picutre，但其行为可以不相同，也不会相互影响。</p><p>看到这里你可能会问，那如果模块名也相同怎么办呢？</p><h4 id="_3-包" tabindex="-1">3.包 <a class="header-anchor" href="#_3-包" aria-label="Permalink to &quot;3.包&quot;">​</a></h4><p>为了解决这个问题，Python 又定义了包（Package）。包就是一个目录文件，它必须包含一个名为 <strong>init</strong>.py 的文件。</p><p>如下就是一个包结构，在一个包里，不同层级目录下可以包含名字相同的模块。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">myproject</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> web</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> module.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> __init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> API</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> module.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> __init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> __init__.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myproject</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> web</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> module.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> __init__.py</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> API</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> module.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> __init__.py</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> __init__.py</span></span></code></pre></div><p>你可以看出，在 web 层级和 API 层级它们都包含着名字相同的模块 module.py，以下列出不同包下的模块引用方式：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 引入web目录下的包, 假设此目录下module.py里有类变量Module</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> web.module </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Module</span></span>
<span class="line"><span style="color:#6A737D;"># 引入API目录下的包，假设此目录下module.py里有类变量Module</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">API</span><span style="color:#E1E4E8;">.module </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Module</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 引入web目录下的包, 假设此目录下module.py里有类变量Module</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> web.module </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Module</span></span>
<span class="line"><span style="color:#6A737D;"># 引入API目录下的包，假设此目录下module.py里有类变量Module</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">API</span><span style="color:#24292E;">.module </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Module</span></span></code></pre></div><p>可以看出来，函数、模块、包的作用是把代码模块化，方便我们调用和写出更高效的编写代码。</p><h3 id="模块的导入" tabindex="-1">模块的导入 <a class="header-anchor" href="#模块的导入" aria-label="Permalink to &quot;模块的导入&quot;">​</a></h3><p>有了函数、模块和包， 客观上我们就可以写出符合规范的代码。</p><p>那么，一个模块是如何被其他模块调用的呢？有如下三种方式：</p><h4 id="_1-直接导入模块" tabindex="-1">1. 直接导入模块 <a class="header-anchor" href="#_1-直接导入模块" aria-label="Permalink to &quot;1. 直接导入模块&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#假设module1.py文件里有个take_picture方法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> module1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#假设module1.py文件里有个take_picture方法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> module1</span></span></code></pre></div><p>采用这种方式导入后，就可以直接使用</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module1.take_picture()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module1.take_picture()</span></span></code></pre></div><p>这一方式来调用 take_picture 函数，如果 module1 里含有其他函数，在 module1 被导入后，均可以通过 module1.xxx() 的方式来使用。</p><h4 id="_2-采用-from-import-方式导入" tabindex="-1">2. 采用 from...import 方式导入 <a class="header-anchor" href="#_2-采用-from-import-方式导入" aria-label="Permalink to &quot;2. 采用 from...import 方式导入&quot;">​</a></h4><p>有时候我们并不想把一个模块的所有功能都导入进来，假设我只想使用 take_picture 这一个方法，那么我可以使用 from...import 的方式：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> module1 </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> take_picture</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> module1 </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> take_picture</span></span></code></pre></div><p>采用这种方式导入后，如果我要使用 take_picture 函数，我可以直接在代码里以如下方式使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">take_picture</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">take_picture</span><span style="color:#24292E;">()</span></span></code></pre></div><p>可以注意到，这种情况我就不必要写模块名字了。</p><p>但假设这个模块里还有个 xxx 函数，我在没有导入的情况下，是无法直接通过 module1.xxx() 或者 xxx() 这样的方式使用的。</p><h4 id="_3-采用-from-import-方式导入" tabindex="-1">3. 采用 from...import* 方式导入 <a class="header-anchor" href="#_3-采用-from-import-方式导入" aria-label="Permalink to &quot;3. 采用 from...import\\* 方式导入&quot;">​</a></h4><p>如果你想一次性地导入一个模块下的所有函数， 你可以使用如下方式：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> module1 </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> module1 </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span></span></code></pre></div><p>采用这种方式导入后，你可以直接使用这个模块下的所有函数。</p><h4 id="_4-动态导入" tabindex="-1">4. 动态导入 <a class="header-anchor" href="#_4-动态导入" aria-label="Permalink to &quot;4. 动态导入&quot;">​</a></h4><p>上面介绍的三种导入方式都属于静态导入，这个很好理解。</p><p>但在实际应用中，也会有在程序运行时才知道要具体导入哪个模块的情况（例如，测试框架自动查找测试用例并导入测试用例所属的模块），这时就需要动态导入。</p><p>动态导入常常用 importlib 来完成，常用的动态导入有以下两种方式。</p><ul><li><strong>从模块直接导入</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> importlib </span></span>
<span class="line"><span style="color:#6A737D;">#导入a.b模块</span></span>
<span class="line"><span style="color:#E1E4E8;">mod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importlib.import_module（ </span><span style="color:#9ECBFF;">&quot;a.b&quot;</span><span style="color:#E1E4E8;">）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> importlib </span></span>
<span class="line"><span style="color:#6A737D;">#导入a.b模块</span></span>
<span class="line"><span style="color:#24292E;">mod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> importlib.import_module（ </span><span style="color:#032F62;">&quot;a.b&quot;</span><span style="color:#24292E;">）</span></span></code></pre></div><ul><li><strong>根据模块名，文件名导入</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> importlib.util</span></span>
<span class="line"><span style="color:#E1E4E8;">spec = importlib.util.spec_from_file_location(&quot;a.b&quot;, &quot;/path/to/file.py&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">md = importlib.util.module_from_spec(spec)</span></span>
<span class="line"><span style="color:#E1E4E8;">spec.loader.exec_module(md)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> importlib.util</span></span>
<span class="line"><span style="color:#24292E;">spec = importlib.util.spec_from_file_location(&quot;a.b&quot;, &quot;/path/to/file.py&quot;)</span></span>
<span class="line"><span style="color:#24292E;">md = importlib.util.module_from_spec(spec)</span></span>
<span class="line"><span style="color:#24292E;">spec.loader.exec_module(md)</span></span></code></pre></div><p>这个方式比较常用。下面我来举个具体的例子， 假设现在我们的项目目录情况如下:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">myproject</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> tests</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> a.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> __init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;"> b.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myproject</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> tests</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> a.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> __init__.py</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;"> b.py</span></span></code></pre></div><p>在模块 a.py 里，我定义了一个函数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;i am module a!&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;i am module a!&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>现在，我想在模块 b 中使用 hello() 这个函数， 要怎么操作呢？</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#b.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> glob</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> importlib.util</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find_modules_from_folder</span><span style="color:#E1E4E8;">(folder):</span></span>
<span class="line"><span style="color:#E1E4E8;">    absolute_f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.abspath(folder)</span></span>
<span class="line"><span style="color:#E1E4E8;">    md </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> glob.glob(os.path.join(absolute_f, </span><span style="color:#9ECBFF;">&quot;**/*.py&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [(os.path.basename(f)[:</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], f) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> md </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> os.path.isfile(f) </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> f.endswith(</span><span style="color:#9ECBFF;">&#39;__init__.py&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">import_modules_dynamically</span><span style="color:#E1E4E8;">(mod, file_path):</span></span>
<span class="line"><span style="color:#E1E4E8;">    spec </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importlib.util.spec_from_file_location(mod, file_path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    md </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importlib.util.module_from_spec(spec)</span></span>
<span class="line"><span style="color:#E1E4E8;">    spec.loader.exec_module(md)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> md</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> find_modules_from_folder(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> module:</span></span>
<span class="line"><span style="color:#E1E4E8;">        mod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> import_modules_dynamically(m[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], m[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        mod.hello()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#b.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> glob</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> importlib.util</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find_modules_from_folder</span><span style="color:#24292E;">(folder):</span></span>
<span class="line"><span style="color:#24292E;">    absolute_f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.abspath(folder)</span></span>
<span class="line"><span style="color:#24292E;">    md </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> glob.glob(os.path.join(absolute_f, </span><span style="color:#032F62;">&quot;**/*.py&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [(os.path.basename(f)[:</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], f) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> md </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> os.path.isfile(f) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> f.endswith(</span><span style="color:#032F62;">&#39;__init__.py&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">import_modules_dynamically</span><span style="color:#24292E;">(mod, file_path):</span></span>
<span class="line"><span style="color:#24292E;">    spec </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> importlib.util.spec_from_file_location(mod, file_path)</span></span>
<span class="line"><span style="color:#24292E;">    md </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> importlib.util.module_from_spec(spec)</span></span>
<span class="line"><span style="color:#24292E;">    spec.loader.exec_module(md)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> md</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> find_modules_from_folder(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> module:</span></span>
<span class="line"><span style="color:#24292E;">        mod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> import_modules_dynamically(m[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], m[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        mod.hello()</span></span></code></pre></div><p>这个代码有点复杂，我先给定一个文件夹，然后通过函数 find_modules_from_folder 来得到这个文件夹下的模块，及其对应的文件路径，然后我再通过 spec_from_file_location 来动态加载。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本节课我主要介绍了 Python 的一些基础编程知识，其中涉及变量、函数、控制流的定义，及其相关操作，最后介绍了模块的导入，这些知识是你使用 Python 编程时的必会知识，非常助于你后续解锁更复杂的操作。</p><p>好了，本节的内容就到这里，我希望你仔细研读本节内容，特别是对于 <a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noreferrer">Python 标准库</a>和 Python 的基础语言的掌握，一定要多学多练，这样你才能跟上下一课时&quot;05 | 告别 CURD，拥抱 Python 高阶编程&quot;的步伐~。</p><hr><p><a href="https://shenceyun.lagou.com/t/eka" target="_blank" rel="noreferrer">&quot;测试开发工程师名企直推营&quot; 入口，免费领取 50G 资料包</a></p>`,78);function u(d,F,h,m,_,A){const n=o("Image");return e(),t("div",null,[r,a(n,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/53/FF/CgqCHl9ojIaAUDXOAADml4yLrEM692.png"}),l(),y,a(n,{alt:"4.png",src:"https://s0.lgstatic.com/i/image/M00/53/F4/Ciqc1F9ojH2AVe_4AADcELueers072.png"}),l(),E,a(n,{alt:"5.png",src:"https://s0.lgstatic.com/i/image/M00/53/F4/Ciqc1F9ojE6AXnwQAACxphJ6AFY080.png"}),l(),i])}const v=p(c,[["render",u]]);export{g as __pageData,v as default};
