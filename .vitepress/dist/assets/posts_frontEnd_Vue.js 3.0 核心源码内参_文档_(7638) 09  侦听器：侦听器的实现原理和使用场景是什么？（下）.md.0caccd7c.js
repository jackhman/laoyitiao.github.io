import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.4e7d56ce.js";const h=JSON.parse('{"title":"09侦听器：侦听器的实现原理和使用场景是什么？（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7638) 09  侦听器：侦听器的实现原理和使用场景是什么？（下）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7638) 09  侦听器：侦听器的实现原理和使用场景是什么？（下）.md","lastUpdated":1696682708000}'),p={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7638) 09  侦听器：侦听器的实现原理和使用场景是什么？（下）.md"},o=l(`<h1 id="_09侦听器-侦听器的实现原理和使用场景是什么-下" tabindex="-1">09侦听器：侦听器的实现原理和使用场景是什么？（下） <a class="header-anchor" href="#_09侦听器-侦听器的实现原理和使用场景是什么-下" aria-label="Permalink to &quot;09侦听器：侦听器的实现原理和使用场景是什么？（下）&quot;">​</a></h1><p>在前面的课时中，我们多次提到回调函数是以一种调度的方式执行的，特别是当 flush 不是 sync 时，它会把回调函数执行的任务推到一个异步队列中执行。接下来，我们就来分析异步执行队列的设计。分析之前，我们先来思考一下，为什么会需要异步队列？</p><h3 id="异步任务队列的设计" tabindex="-1">异步任务队列的设计 <a class="header-anchor" href="#异步任务队列的设计" aria-label="Permalink to &quot;异步任务队列的设计&quot;">​</a></h3><p>我们把之前的例子简单修改一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> state = reactive({ count: </span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> }) </span></span>
<span class="line"><span style="color:#E1E4E8;">watch(() =&gt; state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  console.log(count) </span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">state.count++ </span></span>
<span class="line"><span style="color:#E1E4E8;">state.count++ </span></span>
<span class="line"><span style="color:#E1E4E8;">state.count++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> state = reactive({ count: </span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> }) </span></span>
<span class="line"><span style="color:#24292E;">watch(() =&gt; state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  console.log(count) </span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">state.count++ </span></span>
<span class="line"><span style="color:#24292E;">state.count++ </span></span>
<span class="line"><span style="color:#24292E;">state.count++</span></span></code></pre></div><p>这里，我们修改了三次 state.count，那么 watcher 的回调函数会执行三次吗？</p><p>答案是不会，实际上只输出了一次 count 的值，也就是最终计算的值 3。这在大多数场景下都是符合预期的，因为在一个 Tick（宏任务执行的生命周期）内，即使多次修改侦听的值，它的回调函数也只执行一次。</p><blockquote><p><strong>知识延伸</strong></p><p>组件的更新过程是异步的，我们知道修改模板中引用的响应式对象的值时，会触发组件的重新渲染，但是在一个 Tick 内，即使你多次修改多个响应式对象的值，组件的重新渲染也只执行一次。这是因为如果每次更新数据都触发组件重新渲染，那么重新渲染的次数和代价都太高了。</p></blockquote><p>那么，这是怎么做到的呢？我们先从异步任务队列的创建说起。</p><h4 id="异步任务队列的创建" tabindex="-1">异步任务队列的创建 <a class="header-anchor" href="#异步任务队列的创建" aria-label="Permalink to &quot;异步任务队列的创建&quot;">​</a></h4><p>通过前面的分析我们知道，在创建一个 watcher 时，如果配置 flush 为 pre 或不配置 flush ，那么 watcher 的回调函数就会异步执行。此时分别是通过 queueJob 和 queuePostRenderEffect 把回调函数推入异步队列中的。</p><p>在不涉及 suspense 的情况下，queuePostRenderEffect 相当于 queuePostFlushCb，我们来看它们的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 异步任务队列 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> queue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] </span></span>
<span class="line"><span style="color:#6A737D;">// 队列任务执行完后执行的回调函数队列 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> postFlushCbs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">queueJob</span><span style="color:#E1E4E8;">(job) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">queue.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(job)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    queue.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(job) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">queueFlush</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">queuePostFlushCb</span><span style="color:#E1E4E8;">(cb) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(cb)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    postFlushCbs.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(cb) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果是数组，把它拍平成一维 </span></span>
<span class="line"><span style="color:#E1E4E8;">    postFlushCbs.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(...cb) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">queueFlush</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 异步任务队列 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#6A737D;">// 队列任务执行完后执行的回调函数队列 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> postFlushCbs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">queueJob</span><span style="color:#24292E;">(job) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(job)) { </span></span>
<span class="line"><span style="color:#24292E;">    queue.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(job) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">queueFlush</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">queuePostFlushCb</span><span style="color:#24292E;">(cb) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(cb)) { </span></span>
<span class="line"><span style="color:#24292E;">    postFlushCbs.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(cb) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果是数组，把它拍平成一维 </span></span>
<span class="line"><span style="color:#24292E;">    postFlushCbs.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(...cb) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">queueFlush</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Vue.js 内部维护了一个 queue 数组和一个 postFlushCbs 数组，其中 queue 数组用作异步任务队列， postFlushCbs 数组用作异步任务队列执行完毕后的回调函数队列。</p><p>执行 queueJob 时会把这个任务 job 添加到 queue 的队尾，而执行 queuePostFlushCb 时，会把这个 cb 回调函数添加到 postFlushCbs 的队尾。它们在添加完毕后都执行了 queueFlush 函数，我们接着看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#6A737D;">// 异步任务队列是否正在执行 </span></span>
<span class="line"><span style="color:#E1E4E8;">let isFlushing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 异步任务队列是否等待执行 </span></span>
<span class="line"><span style="color:#E1E4E8;">let isFlushPending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(fn) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fn </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(fn) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> p </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">queueFlush</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isFlushing </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isFlushPending) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    isFlushPending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(flushJobs) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#6A737D;">// 异步任务队列是否正在执行 </span></span>
<span class="line"><span style="color:#24292E;">let isFlushing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 异步任务队列是否等待执行 </span></span>
<span class="line"><span style="color:#24292E;">let isFlushPending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(fn) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(fn) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> p </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">queueFlush</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isFlushing </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isFlushPending) { </span></span>
<span class="line"><span style="color:#24292E;">    isFlushPending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(flushJobs) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，Vue.js 内部还维护了 isFlushing 和 isFlushPending 变量，用来控制异步任务的刷新逻辑。</p><p>在 queueFlush 首次执行时，isFlushing 和 isFlushPending 都是 false，此时会把 isFlushPending 设置为 true，并且调用 nextTick(flushJobs) 去执行队列里的任务。</p><p>因为 isFlushPending 的控制，这使得即使多次执行 queueFlush，也不会多次去执行 flushJobs。另外 nextTick 在 Vue.js 3.0 中的实现也是非常简单，通过 Promise.resolve().then 去异步执行 flushJobs。</p><p>因为 JavaScript 是单线程执行的，这样的异步设计使你在一个 Tick 内，可以多次执行 queueJob 或者 queuePostFlushCb 去添加任务，也可以保证在宏任务执行完毕后的微任务阶段执行一次 flushJobs。</p><h4 id="异步任务队列的执行" tabindex="-1">异步任务队列的执行 <a class="header-anchor" href="#异步任务队列的执行" aria-label="Permalink to &quot;异步任务队列的执行&quot;">​</a></h4><p>创建完任务队列后，接下来要异步执行这个队列，我们来看一下 flushJobs 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> getId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (job) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (job.id </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Infinity </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> job.id) </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">flushJobs</span><span style="color:#E1E4E8;">(seen) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  isFlushPending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  isFlushing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  let job </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    seen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> seen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 组件的更新是先父后子 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果一个组件在父组件更新过程中卸载，它自身的更新应该被跳过 </span></span>
<span class="line"><span style="color:#E1E4E8;">  queue.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((a, b) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(a) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(b)) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((job </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> undefined) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (job </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">checkRecursiveUpdates</span><span style="color:#E1E4E8;">(seen, job) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(job, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* SCHEDULER */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">flushPostFlushCbs</span><span style="color:#E1E4E8;">(seen) </span></span>
<span class="line"><span style="color:#E1E4E8;">  isFlushing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一些 postFlushCb 执行过程中会再次添加异步任务，递归 flushJobs 会把它们都执行完毕 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (queue.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> postFlushCbs.length) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">flushJobs</span><span style="color:#E1E4E8;">(seen) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> getId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (job) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (job.id </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Infinity </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> job.id) </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">flushJobs</span><span style="color:#24292E;">(seen) { </span></span>
<span class="line"><span style="color:#24292E;">  isFlushPending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  isFlushing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  let job </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">    seen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> seen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 组件的更新是先父后子 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果一个组件在父组件更新过程中卸载，它自身的更新应该被跳过 </span></span>
<span class="line"><span style="color:#24292E;">  queue.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((a, b) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(a) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(b)) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((job </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> undefined) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (job </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">checkRecursiveUpdates</span><span style="color:#24292E;">(seen, job) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(job, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* SCHEDULER */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">flushPostFlushCbs</span><span style="color:#24292E;">(seen) </span></span>
<span class="line"><span style="color:#24292E;">  isFlushing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一些 postFlushCb 执行过程中会再次添加异步任务，递归 flushJobs 会把它们都执行完毕 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (queue.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> postFlushCbs.length) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">flushJobs</span><span style="color:#24292E;">(seen) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，flushJobs 函数开始执行的时候，会把 isFlushPending 重置为 false，把 isFlushing 设置为 true 来表示正在执行异步任务队列。</p><p>对于异步任务队列 queue，在遍历执行它们前会先对它们做一次从小到大的排序，这是因为两个主要原因：</p><ul><li><p>我们创建组件的过程是由父到子，所以创建组件副作用渲染函数也是先父后子，父组件的副作用渲染函数的 effect id 是小于子组件的，每次更新组件也是通过 queueJob 把 effect 推入异步任务队列 queue 中的。所以为了保证先更新父组再更新子组件，要对 queue 做从小到大的排序。</p></li><li><p>如果一个组件在父组件更新过程中被卸载，它自身的更新应该被跳过。所以也应该要保证先更新父组件再更新子组件，要对 queue 做从小到大的排序。</p></li></ul><p>接下来，就是遍历这个 queue，依次执行队列中的任务了，在遍历过程中，注意有一个 checkRecursiveUpdates 的逻辑，它是用来在非生产环境下检测是否有循环更新的，它的作用我们稍后会提。</p><p>遍历完 queue 后，又会进一步执行 flushPostFlushCbs 方法去遍历执行所有推入到 postFlushCbs 的回调函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">flushPostFlushCbs</span><span style="color:#E1E4E8;">(seen) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (postFlushCbs.length) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 拷贝副本 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cbs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [...</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(postFlushCbs)] </span></span>
<span class="line"><span style="color:#E1E4E8;">    postFlushCbs.length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      seen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> seen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> cbs.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) {                                                       </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">checkRecursiveUpdates</span><span style="color:#E1E4E8;">(seen, cbs[i]) </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      cbs[i]() </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">flushPostFlushCbs</span><span style="color:#24292E;">(seen) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (postFlushCbs.length) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拷贝副本 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cbs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [...</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(postFlushCbs)] </span></span>
<span class="line"><span style="color:#24292E;">    postFlushCbs.length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">      seen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> seen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> cbs.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) {                                                       </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkRecursiveUpdates</span><span style="color:#24292E;">(seen, cbs[i]) </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      cbs[i]() </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意这里遍历前会通过 <code>const cbs = [...new Set(postFlushCbs)]</code> 拷贝一个 postFlushCbs 的副本，这是因为在遍历的过程中，可能某些回调函数的执行会再次修改 postFlushCbs，所以拷贝一个副本循环遍历则不会受到 postFlushCbs 修改的影响。</p><p>遍历完 postFlushCbs 后，会重置 isFlushing 为 false，因为一些 postFlushCb 执行过程中可能会再次添加异步任务，所以需要继续判断如果 queue 或者 postFlushCbs 队列中还存在任务，则递归执行 flushJobs 把它们都执行完毕。</p><h4 id="检测循环更新" tabindex="-1">检测循环更新 <a class="header-anchor" href="#检测循环更新" aria-label="Permalink to &quot;检测循环更新&quot;">​</a></h4><p>前面我们提到了，在遍历执行异步任务和回调函数的过程中，都会在非生产环境下执行 checkRecursiveUpdates 检测是否有循环更新，它是用来解决什么问题的呢？</p><p>我们把之前的例子改写一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> state = reactive({ count: </span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> }) </span></span>
<span class="line"><span style="color:#E1E4E8;">watch(() =&gt; state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  state.count++ </span></span>
<span class="line"><span style="color:#E1E4E8;">  console.log(count) </span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">state.count++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> state = reactive({ count: </span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> }) </span></span>
<span class="line"><span style="color:#24292E;">watch(() =&gt; state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  state.count++ </span></span>
<span class="line"><span style="color:#24292E;">  console.log(count) </span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">state.count++</span></span></code></pre></div><p>如果你去跑这个示例，你会在控制台看到输出了 101 次值，然后报了错误： <code>Maximum recursive updates exceeded</code> 。这是因为我们在 watcher 的回调函数里更新了数据，这样会再一次进入回调函数，如果我们不加任何控制，那么回调函数会一直执行，直到把内存耗尽造成浏览器假死。</p><p>为了避免这种情况，Vue.js 实现了 checkRecursiveUpdates 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> RECURSION_LIMIT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">checkRecursiveUpdates</span><span style="color:#E1E4E8;">(seen, fn) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">seen.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(fn)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    seen.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(fn, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> seen.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(fn) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (count </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> RECURSION_LIMIT) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Maximum recursive updates exceeded. &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;You may have code that is mutating state in your component&#39;s &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;render function or updated hook or watcher source function.&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      seen.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(fn, count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> RECURSION_LIMIT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">checkRecursiveUpdates</span><span style="color:#24292E;">(seen, fn) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">seen.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(fn)) { </span></span>
<span class="line"><span style="color:#24292E;">    seen.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(fn, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> seen.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(fn) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (count </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> RECURSION_LIMIT) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Maximum recursive updates exceeded. &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;You may have code that is mutating state in your component&#39;s &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;render function or updated hook or watcher source function.&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      seen.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(fn, count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过前面的代码，我们知道 flushJobs 一开始便创建了 seen，它是一个 Map 对象，然后在 checkRecursiveUpdates 的时候会把任务添加到 seen 中，记录引用计数 count，初始值为 1，如果 postFlushCbs 再次添加了相同的任务，则引用计数 count 加 1，如果 count 大于我们定义的限制 100 ，则说明一直在添加这个相同的任务并超过了 100 次。那么，Vue.js 会抛出这个错误，因为在正常的使用中，不应该出现这种情况，而我们上述的错误示例就会触发这种报错逻辑。</p><h4 id="优化-只用一个变量" tabindex="-1">优化：只用一个变量 <a class="header-anchor" href="#优化-只用一个变量" aria-label="Permalink to &quot;优化：只用一个变量&quot;">​</a></h4><p>到这里，异步队列的设计就介绍完毕了，你可能会对 isFlushPending 和 isFlushing 有些疑问，为什么需要两个变量来控制呢？</p><p>从语义上来看，isFlushPending 用于判断是否在等待 nextTick 执行 flushJobs，而 isFlushing 是判断是否正在执行任务队列。</p><p>从功能上来看，它们的作用是为了确保以下两点：</p><ol><li><p>在一个 Tick 内可以多次添加任务到队列中，但是任务队列会在 nextTick 后执行；</p></li><li><p>在执行任务队列的过程中，也可以添加新的任务到队列中，并且在当前 Tick 去执行剩余的任务队列。</p></li></ol><p>但实际上，这里我们可以进行优化。在我看来，这里用一个变量就足够了，我们来稍微修改一下源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">queueFlush</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isFlushing) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    isFlushing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(flushJobs) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">flushJobs</span><span style="color:#E1E4E8;">(seen) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  let job </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    seen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> seen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  queue.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((a, b) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(a) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(b)) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((job </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> undefined) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (job </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">checkRecursiveUpdates</span><span style="color:#E1E4E8;">(seen, job) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(job, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* SCHEDULER */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">flushPostFlushCbs</span><span style="color:#E1E4E8;">(seen) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (queue.length </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> postFlushCbs.length) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">flushJobs</span><span style="color:#E1E4E8;">(seen) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  isFlushing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">queueFlush</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isFlushing) { </span></span>
<span class="line"><span style="color:#24292E;">    isFlushing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(flushJobs) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">flushJobs</span><span style="color:#24292E;">(seen) { </span></span>
<span class="line"><span style="color:#24292E;">  let job </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">    seen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> seen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  queue.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((a, b) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(a) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(b)) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((job </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> undefined) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (job </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">checkRecursiveUpdates</span><span style="color:#24292E;">(seen, job) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(job, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* SCHEDULER */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">flushPostFlushCbs</span><span style="color:#24292E;">(seen) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (queue.length </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> postFlushCbs.length) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">flushJobs</span><span style="color:#24292E;">(seen) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  isFlushing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，我们只需要一个 isFlushing 来控制就可以实现相同的功能了。在执行 queueFlush 的时候，判断 isFlushing 为 false，则把它设置为 true，然后 nextTick 会执行 flushJobs。在 flushJobs 函数执行完成的最后，也就是所有的任务（包括后添加的）都执行完毕，再设置 isFlushing 为 false。</p><blockquote><p>我这么修改源码后也跑通了 Vue.js 3.0 的单元测试，如果你觉得这么实现有问题的话，欢迎在留言区评论与我讨论。</p></blockquote><p>了解完 watch API 和异步任务队列的设计后，我们再来学习侦听器提供的另一个 API------ watchEffect API。</p><h3 id="watcheffect-api" tabindex="-1">watchEffect API <a class="header-anchor" href="#watcheffect-api" aria-label="Permalink to &quot;watchEffect API&quot;">​</a></h3><p>watchEffect API 的作用是注册一个副作用函数，副作用函数内部可以访问到响应式对象，当内部响应式对象变化后再立即执行这个函数。</p><p>可以先来看一个示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, watchEffect } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> count = ref(</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">watchEffect(() =&gt; console.log(count.value)) </span></span>
<span class="line"><span style="color:#E1E4E8;">count.value++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, watchEffect } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> count = ref(</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">watchEffect(() =&gt; console.log(count.value)) </span></span>
<span class="line"><span style="color:#24292E;">count.value++</span></span></code></pre></div><p>它的结果是依次输出 0 和 1。</p><p>watchEffect 和前面的 watch API 有哪些不同呢？主要有三点：</p><ol><li><p><strong>侦听的源不同</strong> 。watch API 可以侦听一个或多个响应式对象，也可以侦听一个 getter 函数，而 watchEffect API 侦听的是一个普通函数，只要内部访问了响应式对象即可，这个函数并不需要返回响应式对象。</p></li><li><p><strong>没有回调函数</strong> 。watchEffect API 没有回调函数，副作用函数的内部响应式对象发生变化后，会再次执行这个副作用函数。</p></li><li><p><strong>立即执行</strong> 。watchEffect API 在创建好 watcher 后，会立刻执行它的副作用函数，而 watch API 需要配置 immediate 为 true，才会立即执行回调函数。</p></li></ol><p>对 watchEffect API 有大体了解后，我们来看一下在我整理的 watchEffect 场景下， doWatch 函数的简化版实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(effect, options) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doWatch</span><span style="color:#E1E4E8;">(effect, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, options); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">doWatch</span><span style="color:#E1E4E8;">(source, cb, { immediate, deep, flush, onTrack, onTrigger } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EMPTY_OBJ) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentInstance; </span></span>
<span class="line"><span style="color:#E1E4E8;">  let getter; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFunction</span><span style="color:#E1E4E8;">(source)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.isUnmounted) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 执行清理函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cleanup) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cleanup</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 执行 source 函数，传入 onInvalidate 作为参数 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(source, instance, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* WATCH_CALLBACK */</span><span style="color:#E1E4E8;">, [onInvalidate]); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  let cleanup; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> onInvalidate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (fn) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    cleanup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> runner.options.onStop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(fn, instance, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* WATCH_CLEANUP */</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }; </span></span>
<span class="line"><span style="color:#E1E4E8;">  }; </span></span>
<span class="line"><span style="color:#E1E4E8;">  let scheduler; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建 scheduler </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flush </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sync&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoke; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flush </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;pre&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> job </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">instance </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> instance.isMounted) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">queueJob</span><span style="color:#E1E4E8;">(job); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">job</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    }; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> job </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(job, instance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.suspense); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建 runner </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> runner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">effect</span><span style="color:#E1E4E8;">(getter, { </span></span>
<span class="line"><span style="color:#E1E4E8;">    lazy</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    computed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    onTrack, </span></span>
<span class="line"><span style="color:#E1E4E8;">    onTrigger, </span></span>
<span class="line"><span style="color:#E1E4E8;">    scheduler </span></span>
<span class="line"><span style="color:#E1E4E8;">  }); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">recordInstanceBoundEffect</span><span style="color:#E1E4E8;">(runner); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 立即执行 runner </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runner</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回销毁函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">(runner); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(instance.effects, runner); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  }; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">watchEffect</span><span style="color:#24292E;">(effect, options) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doWatch</span><span style="color:#24292E;">(effect, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, options); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">doWatch</span><span style="color:#24292E;">(source, cb, { immediate, deep, flush, onTrack, onTrigger } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EMPTY_OBJ) { </span></span>
<span class="line"><span style="color:#24292E;">  instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentInstance; </span></span>
<span class="line"><span style="color:#24292E;">  let getter; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isFunction</span><span style="color:#24292E;">(source)) { </span></span>
<span class="line"><span style="color:#24292E;">    getter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance.isUnmounted) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 执行清理函数 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cleanup) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cleanup</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 执行 source 函数，传入 onInvalidate 作为参数 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(source, instance, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* WATCH_CALLBACK */</span><span style="color:#24292E;">, [onInvalidate]); </span></span>
<span class="line"><span style="color:#24292E;">    }; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  let cleanup; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> onInvalidate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (fn) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    cleanup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> runner.options.onStop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(fn, instance, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* WATCH_CLEANUP */</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    }; </span></span>
<span class="line"><span style="color:#24292E;">  }; </span></span>
<span class="line"><span style="color:#24292E;">  let scheduler; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建 scheduler </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flush </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sync&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoke; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flush </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pre&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> job </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">instance </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> instance.isMounted) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">queueJob</span><span style="color:#24292E;">(job); </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">job</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    }; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> job </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(job, instance </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance.suspense); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建 runner </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> runner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">effect</span><span style="color:#24292E;">(getter, { </span></span>
<span class="line"><span style="color:#24292E;">    lazy</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    computed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    onTrack, </span></span>
<span class="line"><span style="color:#24292E;">    onTrigger, </span></span>
<span class="line"><span style="color:#24292E;">    scheduler </span></span>
<span class="line"><span style="color:#24292E;">  }); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">recordInstanceBoundEffect</span><span style="color:#24292E;">(runner); </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 立即执行 runner </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runner</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回销毁函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">(runner); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(instance.effects, runner); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  }; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，getter 函数就是对 source 函数的简单封装，它会先判断组件实例是否已经销毁，然后每次执行 source 函数前执行 cleanup 清理函数。</p><p>watchEffect 内部创建的 runner 对应的 scheduler 对象就是 scheduler 函数本身，这样它再次执行时，就会执行这个 scheduler 函数，并且传入 runner 函数作为参数，其实就是按照一定的调度方式去执行基于 source 封装的 getter 函数。</p><p>创建完 runner 后就立刻执行了 runner，其实就是内部同步执行了基于 source 封装的 getter 函数。</p><p>在执行 source 函数的时候，会传入一个 onInvalidate 函数作为参数，接下来我们就来分析它的作用。</p><h4 id="注册无效回调函数" tabindex="-1">注册无效回调函数 <a class="header-anchor" href="#注册无效回调函数" aria-label="Permalink to &quot;注册无效回调函数&quot;">​</a></h4><p>有些时候，watchEffect 会注册一个副作用函数，在函数内部可以做一些异步操作，但是当这个 watcher 停止后，如果我们想去对这个异步操作做一些额外事情（比如取消这个异步操作），我们可以通过 onInvalidate 参数注册一个无效函数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {ref, watchEffect } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> id = ref(</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">watchEffect(onInvalidate =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 执行异步操作 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> token = performAsyncOperation(id.value) </span></span>
<span class="line"><span style="color:#E1E4E8;">  onInvalidate(() =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 id 发生变化或者 watcher 停止了，则执行逻辑取消前面的异步操作 </span></span>
<span class="line"><span style="color:#E1E4E8;">    token.cancel() </span></span>
<span class="line"><span style="color:#E1E4E8;">  }) </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {ref, watchEffect } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> id = ref(</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">watchEffect(onInvalidate =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 执行异步操作 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> token = performAsyncOperation(id.value) </span></span>
<span class="line"><span style="color:#24292E;">  onInvalidate(() =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果 id 发生变化或者 watcher 停止了，则执行逻辑取消前面的异步操作 </span></span>
<span class="line"><span style="color:#24292E;">    token.cancel() </span></span>
<span class="line"><span style="color:#24292E;">  }) </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>我们利用 watchEffect 注册了一个副作用函数，它有一个 onInvalidate 参数。在这个函数内部通过 performAsyncOperation 执行某些异步操作，并且访问了 id 这个响应式对象，然后通过 onInvalidate 注册了一个回调函数。</p><p>如果 id 发生变化或者 watcher 停止了，这个回调函数将会执行，然后执行 token.cancel 取消之前的异步操作。</p><p>我们来回顾 onInvalidate 在 doWatch 中的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> onInvalidate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (fn) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  cleanup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> runner.options.onStop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(fn, instance, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* WATCH_CLEANUP */</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }; </span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> onInvalidate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (fn) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  cleanup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> runner.options.onStop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(fn, instance, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* WATCH_CLEANUP */</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  }; </span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>实际上，当你执行 onInvalidate 的时候，就是注册了一个 cleanup 和 runner 的 onStop 方法，这个方法内部会执行 fn，也就是你注册的无效回调函数。</p><p>也就是说当响应式数据发生变化，会执行 cleanup 方法，当 watcher 被停止，会执行 onStop 方法，这两者都会执行注册的无效回调函数 fn。</p><p>通过这种方式，Vue.js 就很好地实现了 watcher 注册无效回调函数的需求。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该掌握了侦听器内部实现原理，了解侦听器支持的几种配置参数的作用，以及异步任务队列的设计原理。</p><p>你也应该掌握侦听器的常见应用场景：如何用 watch API 观测数据的变化去执行一些逻辑，如何利用 watchEffect API 去注册一些副作用函数，如何去注册无效回调函数，以及如何停止一个正在运行的 watcher。</p><p>相比于计算属性，侦听器更适合用于在数据变化后执行某段逻辑的场景，而计算属性则用于一个数据依赖另外一些数据计算而来的场景。</p><p>最后，给你留一道思考题目，在组件中创建的自定义 watcher，在组件销毁的时候会被销毁吗？是如何做的呢？欢迎你在留言区与我分享。</p><blockquote><p><strong>本节课的相关代码在源代码中的位置如下：</strong></p><p>packages/runtime-core/src/apiWatch.ts</p><p>packages/runtime-core/src/scheduler.ts</p></blockquote>`,78),e=[o];function c(t,r,E,y,i,u){return n(),a("div",null,e)}const d=s(p,[["render",c]]);export{h as __pageData,d as default};
