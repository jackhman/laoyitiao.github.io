import{_ as o,j as e,o as t,g as c,k as a,h as s,Q as p,s as l}from"./chunks/framework.a0d18f64.js";const m=JSON.parse('{"title":"17学习axio：封装一个结构清晰的Fetch库","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5922) 17  学习 axio：封装一个结构清晰的 Fetch 库.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5922) 17  学习 axio：封装一个结构清晰的 Fetch 库.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5922) 17  学习 axio：封装一个结构清晰的 Fetch 库.md"},E=p(`<h1 id="_17学习axio-封装一个结构清晰的fetch库" tabindex="-1">17学习axio：封装一个结构清晰的Fetch库 <a class="header-anchor" href="#_17学习axio-封装一个结构清晰的fetch库" aria-label="Permalink to &quot;17学习axio：封装一个结构清晰的Fetch库&quot;">​</a></h1><p>从这一讲开始，我们将进入核心框架原理与代码设计模式的学习。任何一个动态应用的实现，都离不开前后端的互动配合。前端发送请求获取数据是开发者必不可少的场景。正因为如此，每一个前端项目都有必要接入一个请求库。</p><p>那么请求库如何设计，才能保证使用者的顺畅？请求逻辑如何抽象成统一请求库，才能避免出现代码混乱堆积，难以维护的现象呢？下面我们就进入正题。</p><h3 id="一个请求库需要考虑哪些问题" tabindex="-1">一个请求库需要考虑哪些问题 <a class="header-anchor" href="#一个请求库需要考虑哪些问题" aria-label="Permalink to &quot;一个请求库需要考虑哪些问题&quot;">​</a></h3><p>一个请求，纵向向前承载了数据的发送，向后链接了数据的接收和消费，横向还需要处理网络环境和宿主能力，以及业务的扩展需求。因此设计一个好的请求库，首先需要预见可能会发生的问题。下面我们将重点展开几个关键问题。</p><h4 id="适配浏览器-or-node-js-环境" tabindex="-1">适配浏览器 or Node.js 环境 <a class="header-anchor" href="#适配浏览器-or-node-js-环境" aria-label="Permalink to &quot;适配浏览器 or Node.js 环境&quot;">​</a></h4><p>如今，前端开发不再局限于浏览器层面，Node.js 环境的出现，使得请求库的适配需求变得更加复杂。<strong>Node.js 基于 V8 JavaScript Engine，顶层对象是 global，不存在 Window 对象和浏览器宿主</strong>，因此使用传统的 XMLHttpRequest/Fetch 在 Node.js 上发送请求是行不通的。对于搭建了 Node.js 环境的前端来说，请求库的设计实现需要考虑是否同时支持在浏览器和 Node.js 两种环境发送请求。在同构的背景下，如何使不同环境的请求库使用体验趋于一致呢？下面我们将会对这部分内容进一步讲解。</p><h4 id="xhr-or-fetch" tabindex="-1">XHR or Fetch <a class="header-anchor" href="#xhr-or-fetch" aria-label="Permalink to &quot;XHR or Fetch&quot;">​</a></h4><p>单就浏览器环境发送请求来说，一般存在两种技术方法：</p><ul><li><p><a href="https://xhr.spec.whatwg.org/" target="_blank" rel="noreferrer">XMLHttpRequest 规范</a></p></li><li><p><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noreferrer">Fetch 规范</a></p></li></ul><p>我们先简要对比两种技术的使用方式。</p><p>使用 XMLHttpRequest 发送请求：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JSON.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.responseText);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error Occurred :&#39;</span><span style="color:#E1E4E8;">, err);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> xhr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> success;</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> error;</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;https://xxx&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JSON.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.responseText);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Error Occurred :&#39;</span><span style="color:#24292E;">, err);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">xhr.onload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> success;</span></span>
<span class="line"><span style="color:#24292E;">xhr.onerror </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> error;</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;https://xxx&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span></code></pre></div><p>简单来说，XMLHttpRequest 存在一些缺点，比如：</p><ul><li><p>配置和使用方式较为烦琐；</p></li><li><p>基于事件的异步模型不够友好。</p></li></ul><p>而 Fetch 的推出，主要也是为了解决上述问题。</p><p>使用 Fetch 发送一个请求：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://xxx&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (response) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(response);</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Something went wrong!&quot;</span><span style="color:#E1E4E8;">, err);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://xxx&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (response) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(response);</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Something went wrong!&quot;</span><span style="color:#24292E;">, err);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>我们可以看到，Fetch 基于 Promise，<strong>语法更加简洁，语义化更加突出</strong> ，但<strong>兼容性不如 XMLHttpRequest</strong>。</p><p>对于一个请求库来说，在浏览器端使用 XMLHttpRequest 还是 Fetch？这是一个问题。下面我们通过 axios 的实现具体展开讲解。</p><h4 id="功能设计与抽象粒度" tabindex="-1">功能设计与抽象粒度 <a class="header-anchor" href="#功能设计与抽象粒度" aria-label="Permalink to &quot;功能设计与抽象粒度&quot;">​</a></h4><p>无论是基于 XMLHttpRequest 还是 Fetch，实现一层封装，屏蔽一些基础能力并暴露给业务方使用，即实现一个请求库，这并不困难。我认为，真正难的是<strong>请求库的功能设计和抽象粒度</strong>。如果功能设计分层不够清晰，抽象方式不够灵活，很容易产出&quot;屎山代码&quot;。</p><p>比如，对于请求库来说，是否要处理以下看似通用，但又具有定制性的功能呢？你需要考虑以下功能点：</p><ul><li><p>自定义 headers 添加</p></li><li><p>统一断网/弱网处理</p></li><li><p>接口缓存处理</p></li><li><p>接口统一错误提示</p></li><li><p>接口统一数据处理</p></li><li><p>统一数据层结合</p></li><li><p>统一请求埋点</p></li></ul><p>这些设计问题如果初期不考虑清楚，那么在业务层面，一旦真正使用了设计不良的请求库，很容易遇到不满足业务需求的场景，而沦为手写 Fetch，势必导致代码库中请求方式多种多样，风格不一。</p><p>这里我们稍微展开，以一个请求库的分层封装为例，其实任何一种通用能力的封装都可以参考下图：</p>`,26),y=p("<p>请求库分层封装示例图</p><p>如图所示，底层能力部分，对应请求库中宿主提供的 XMLHttpRequest 或 Fetch 能力，以及项目中已经内置的框架/类库能力。这一部分对于一个已有项目来说，往往是较难改变或重构的，也是不同项目中可以复用的；而业务层，比如依赖 axios 请求库的更上层封装，我们一般可以分为：</p><ul><li><p>项目层</p></li><li><p>页面层</p></li><li><p>组件层</p></li></ul><p>三个方面，它们依次递进，完成最终业务消费。底层能力部分，对许多项目来说都可以使用，而<strong>让不同项目之间的代码质量和开发效率产生差异</strong>的，恰好是容易被轻视的业务级别的封装设计。</p><p>比如设计者在项目层的封装上，如果做了几乎所有事情，囊括了所有请求相关的规则，很容易使封装复杂，过度设计。不同层级的功能和职责是不同的，<strong>错位的使用和设计，是让项目变得更加混乱的诱因之一</strong>。</p><p>合理的设计是，底层部分保留对全局封装的影响范围，而项目层保留对页面层的影响能力，页面层保留对组件层的影响能力。</p>",6),i=p(`<p>比如，我们在项目层提供一个基础请求库封装，在这一层可以提供默认发送 cookie 等（一定需要存在）的行为，同时通过配置 options.fetch 保留覆盖 globalThis.fetch 的能力，这样可以在 Node 等环境中，通过<strong>注入一个 node-fetch npm 库</strong>的方式，支持 SSR 能力。</p><p>这里需要注意的是，我们一定要避免设计一个特别大的 Fetch 方法，通过拓展 options 把所有事情都做了，用 options 驱动一切行为，这比较容易让 Fetch 代码和逻辑变得复杂、难以理解，而且不利于 tree-shaking 和 code-spliting。</p><p>那么如何做到这种层次清晰的基础库呢？接下来，我们就从 axios 的设计分析寻找答案。</p><h3 id="axios-设计之美" tabindex="-1">axios 设计之美 <a class="header-anchor" href="#axios-设计之美" aria-label="Permalink to &quot;axios 设计之美&quot;">​</a></h3><p>axios 是一个被前端广泛使用的请求库，对应上述分层结构中，属于框架/类库层，我们来总结一下它的功能特点：</p><ul><li><p>在浏览器端，使用 XMLHttpRequest 发送请求；</p></li><li><p>支持 Node.js 端发送请求；</p></li><li><p>支持 Promise API，使用 Promise 风格语法；</p></li><li><p>支持请求和响应拦截；</p></li><li><p>支持自定义修改请求和返回内容；</p></li><li><p>支持请求取消；</p></li><li><p>默认支持 XSRF 防御。</p></li></ul><p>下面，我们主要从拦截器思想、适配器思想、安全思想三方面展开，分析 axios 设计的可取之处。</p><h4 id="拦截器思想" tabindex="-1">拦截器思想 <a class="header-anchor" href="#拦截器思想" aria-label="Permalink to &quot;拦截器思想&quot;">​</a></h4><p>拦截器思想是 axios 带来的最具启发性的思想之一。它赋予了<strong>分层开发时借助拦截行为，注入自定义能力的功能</strong>。简单来说，axios 的拦截器主要由：任务注册 → 任务编排 → 任务调度（执行）三步组成。</p><p>我们先看任务注册，在请求发出前，可以使用<code>axios.interceptors.request.use</code>方法注入拦截逻辑，比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">axios.interceptors.request.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求发送前做一些事情，比如添加 headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> config;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求出现错误时，处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">axios.interceptors.request.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (config) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求发送前做一些事情，比如添加 headers</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> config;</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求出现错误时，处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>在请求返回后，用<code>axios.interceptors.response.use</code>方法注入拦截逻辑，比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">axios.interceptors.response.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (response) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应返回 2xx 时，做一些操作，比如响应状态码为 401 时，自动跳转到登录页</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应返回 2xx 外响应码时，错误处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">axios.interceptors.response.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (response) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应返回 2xx 时，做一些操作，比如响应状态码为 401 时，自动跳转到登录页</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response;</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应返回 2xx 外响应码时，错误处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>任务注册部分的源码实现也不复杂：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/core/Axios.js</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">Axios</span><span style="color:#E1E4E8;">(instanceConfig) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.defaults </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instanceConfig;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.interceptors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    request</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterceptorManager</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    response</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterceptorManager</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// lib/core/InterceptorManager.js</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">InterceptorManager</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">InterceptorManager.prototype.use </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(fulfilled, rejected) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlers.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    fulfilled</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fulfilled,</span></span>
<span class="line"><span style="color:#E1E4E8;">    rejected</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rejected</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回当前的索引，用于移除已注册的拦截器</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlers.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/core/Axios.js</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">Axios</span><span style="color:#24292E;">(instanceConfig) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaults </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instanceConfig;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.interceptors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    request</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterceptorManager</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    response</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterceptorManager</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// lib/core/InterceptorManager.js</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">InterceptorManager</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">InterceptorManager.prototype.use </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(fulfilled, rejected) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlers.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    fulfilled</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fulfilled,</span></span>
<span class="line"><span style="color:#24292E;">    rejected</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rejected</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回当前的索引，用于移除已注册的拦截器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlers.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>如上代码，我们定义的请求/响应拦截器，会在每一个 axios 实例的 Interceptors 属性中维护，<code>this.interceptors.request</code>和<code>this.interceptors.response</code>也都是一个 InterceptorManager 实例，该实例的<code>handlers</code>属性<strong>以数组的形式</strong>存储了使用方定义的一个个拦截器逻辑。</p><p>注册了任务，我们再来看看任务编排时是如何将拦截器串联起来，并在任务调度阶段执行各个拦截器的。如下源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/core/Axios.js</span></span>
<span class="line"><span style="color:#E1E4E8;">Axios.prototype.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.defaults, config);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [dispatchRequest, undefined];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promise </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 任务编排</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.interceptors.request.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(function </span><span style="color:#B392F0;">unshiftRequestInterceptors</span><span style="color:#E1E4E8;">(interceptor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chain.</span><span style="color:#B392F0;">unshift</span><span style="color:#E1E4E8;">(interceptor.fulfilled, interceptor.rejected);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.interceptors.response.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(function </span><span style="color:#B392F0;">pushResponseInterceptors</span><span style="color:#E1E4E8;">(interceptor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chain.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(interceptor.fulfilled, interceptor.rejected);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 任务调度</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (chain.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    promise </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> promise.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(chain.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">(), chain.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> promise;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/core/Axios.js</span></span>
<span class="line"><span style="color:#24292E;">Axios.prototype.request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(config) {</span></span>
<span class="line"><span style="color:#24292E;">  config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeConfig</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaults, config);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> chain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [dispatchRequest, undefined];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> promise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 任务编排</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.interceptors.request.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(function </span><span style="color:#6F42C1;">unshiftRequestInterceptors</span><span style="color:#24292E;">(interceptor) {</span></span>
<span class="line"><span style="color:#24292E;">    chain.</span><span style="color:#6F42C1;">unshift</span><span style="color:#24292E;">(interceptor.fulfilled, interceptor.rejected);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.interceptors.response.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(function </span><span style="color:#6F42C1;">pushResponseInterceptors</span><span style="color:#24292E;">(interceptor) {</span></span>
<span class="line"><span style="color:#24292E;">    chain.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(interceptor.fulfilled, interceptor.rejected);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 任务调度</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (chain.length) {</span></span>
<span class="line"><span style="color:#24292E;">    promise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> promise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(chain.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">(), chain.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> promise;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>我们通过<code>chain</code>数组来编排调度任务，<code>dispatchRequest</code>方法实际执行请求的发送，编排过程实现：<strong>在实际发送请求的方法</strong> <code>dispatchRequest</code>前插入请求拦截器，在<code>dispatchRequest</code>方法后，插入响应拦截器。</p><p>任务调度其实就是通过一个 While 循环，通过一个 Promise 实例，遍历迭代<code>chain</code>数组方法，并基于 Promise 回调特性，将各个拦截器串联执行起来。</p><p>我们通过下图，来加深理解：</p>`,21),d=p(`<h4 id="适配器思想" tabindex="-1">适配器思想 <a class="header-anchor" href="#适配器思想" aria-label="Permalink to &quot;适配器思想&quot;">​</a></h4><p>前文提到了 axios 同时支持 Node.js 环境和浏览器环境发送请求，在浏览器中我们可以选用 XMLHttpRequest 或 Fetch 方法发送请求，但是在 Node.js 中，需要通过 HTTP 模块发送请求。对此，axiso 是如何设计实现的呢？</p><p>为了支持适配不同环境，axios 实现了适配器：Adapter，具体实现在<code>dispatchRequest</code>方法中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/core/dispatchRequest.js</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">dispatchRequest</span><span style="color:#E1E4E8;">(config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.adapter </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> defaults.adapter;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">adapter</span><span style="color:#E1E4E8;">(config).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(function </span><span style="color:#B392F0;">onAdapterResolution</span><span style="color:#E1E4E8;">(response) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, function </span><span style="color:#B392F0;">onAdapterRejection</span><span style="color:#E1E4E8;">(reason) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Promise.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(reason);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/core/dispatchRequest.js</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">dispatchRequest</span><span style="color:#24292E;">(config) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> adapter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.adapter </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> defaults.adapter;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adapter</span><span style="color:#24292E;">(config).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(function </span><span style="color:#6F42C1;">onAdapterResolution</span><span style="color:#24292E;">(response) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response;</span></span>
<span class="line"><span style="color:#24292E;">  }, function </span><span style="color:#6F42C1;">onAdapterRejection</span><span style="color:#24292E;">(reason) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Promise.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(reason);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>如上代码，axios 支持使用方实现自己的 Adapter，自定义不同环境中的请求实现方式，也提供了默认的 Adapter。默认 Adapter 逻辑代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">getDefaultAdapter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> adapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof XMLHttpRequest </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 浏览器端使用 XMLHttpRequest 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./adapters/xhr&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof process </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.prototype.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(process) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[object process]&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Node.js 端，使用 HTTP 模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./adapters/http&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> adapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">getDefaultAdapter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> adapter;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof XMLHttpRequest </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 浏览器端使用 XMLHttpRequest 方法</span></span>
<span class="line"><span style="color:#24292E;">    adapter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./adapters/xhr&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof process </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    Object.prototype.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(process) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[object process]&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Node.js 端，使用 HTTP 模块</span></span>
<span class="line"><span style="color:#24292E;">    adapter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./adapters/http&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> adapter;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一个 Adapter 需要返回一个 Promise 实例（这是因为<strong>axios 内部通过 Promise 链式调用完成请求调度</strong>），我们分别看看在浏览器端和 Node.js 端具体 Adapter 实现逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">xhrAdapter</span><span style="color:#E1E4E8;">(config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">(function </span><span style="color:#B392F0;">dispatchXhrRequest</span><span style="color:#E1E4E8;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> requestData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> requestHeaders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.headers;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fullPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildFullPath</span><span style="color:#E1E4E8;">(config.baseURL, config.url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(config.method.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">buildURL</span><span style="color:#E1E4E8;">(fullPath, config.params, config.paramsSerializer), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Listen for ready state</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.onreadystatechange </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">handleLoad</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Handle browser request cancellation (as opposed to a manual cancellation)</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.onabort </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">handleAbort</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Handle low level network errors</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">handleError</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Handle timeout</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.ontimeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">handleTimeout</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(requestData);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">xhrAdapter</span><span style="color:#24292E;">(config) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">(function </span><span style="color:#6F42C1;">dispatchXhrRequest</span><span style="color:#24292E;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> requestData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.data;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> requestHeaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.headers;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fullPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildFullPath</span><span style="color:#24292E;">(config.baseURL, config.url);</span></span>
<span class="line"><span style="color:#24292E;">    request.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(config.method.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">buildURL</span><span style="color:#24292E;">(fullPath, config.params, config.paramsSerializer), </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Listen for ready state</span></span>
<span class="line"><span style="color:#24292E;">    request.onreadystatechange </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">handleLoad</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Handle browser request cancellation (as opposed to a manual cancellation)</span></span>
<span class="line"><span style="color:#24292E;">    request.onabort </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">handleAbort</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Handle low level network errors</span></span>
<span class="line"><span style="color:#24292E;">    request.onerror </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">handleError</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Handle timeout</span></span>
<span class="line"><span style="color:#24292E;">    request.ontimeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">handleTimeout</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    request.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(requestData);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>如上代码，就是一个典型的使用 XMLHttpRequest 发送请求的实现内容。在 Node.js 端的实现，精简后代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> http </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/*eslint consistent-return:0*/</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">httpAdapter</span><span style="color:#E1E4E8;">(config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">(function </span><span style="color:#B392F0;">dispatchHttpRequest</span><span style="color:#E1E4E8;">(resolvePromise, rejectPromise) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolvePromise</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> reject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">rejectPromise</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.headers;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> transport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> req </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(options, function </span><span style="color:#B392F0;">handleResponse</span><span style="color:#E1E4E8;">(res) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Handle errors</span></span>
<span class="line"><span style="color:#E1E4E8;">    req.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, function </span><span style="color:#B392F0;">handleRequestError</span><span style="color:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Send the request</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isStream</span><span style="color:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      data.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, function </span><span style="color:#B392F0;">handleStreamError</span><span style="color:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">enhanceError</span><span style="color:#E1E4E8;">(err, config, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, req));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(req);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      req.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> http </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/*eslint consistent-return:0*/</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">httpAdapter</span><span style="color:#24292E;">(config) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">(function </span><span style="color:#6F42C1;">dispatchHttpRequest</span><span style="color:#24292E;">(resolvePromise, rejectPromise) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(value) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolvePromise</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> reject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(value) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">rejectPromise</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.data;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.headers;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> transport </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> req </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(options, function </span><span style="color:#6F42C1;">handleResponse</span><span style="color:#24292E;">(res) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Handle errors</span></span>
<span class="line"><span style="color:#24292E;">    req.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, function </span><span style="color:#6F42C1;">handleRequestError</span><span style="color:#24292E;">(err) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Send the request</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (utils.</span><span style="color:#6F42C1;">isStream</span><span style="color:#24292E;">(data)) {</span></span>
<span class="line"><span style="color:#24292E;">      data.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, function </span><span style="color:#6F42C1;">handleStreamError</span><span style="color:#24292E;">(err) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">enhanceError</span><span style="color:#24292E;">(err, config, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, req));</span></span>
<span class="line"><span style="color:#24292E;">      }).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(req);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      req.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>上述代码主要是调用 Node.js HTTP 模块，进行请求的发送和处理，当然，真实源码实现还需要考虑 HTTPS 以及 Redirect 等问题，这里我们不再展开。</p><p>讲到这里，可能你会问，什么场景下，才会需要自定义 Adapter 进行请求发送呢？比如<strong>在测试阶段或特殊环境</strong>中，我们可以 mock 请求：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isEnv </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ui-test&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;axios-mock-adapter&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isEnv </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ui-test&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	adapter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;axios-mock-adapter&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>实现一个自定义的 Adapter 也并不困难，说到底它也只是一个 Node.js 模块，导出一个 Promise 实例即可：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">myAdapter</span><span style="color:#E1E4E8;">(config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sendRequest</span><span style="color:#E1E4E8;">(resolve, reject, response);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">myAdapter</span><span style="color:#24292E;">(config) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sendRequest</span><span style="color:#24292E;">(resolve, reject, response);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相信你学会了这些内容，就对 <a href="https://github.com/ctimmerm/axios-mock-adapter" target="_blank" rel="noreferrer">axios-mock-adapter</a> 这个库的实现原理了然于胸了。</p><h4 id="安全思想" tabindex="-1">安全思想 <a class="header-anchor" href="#安全思想" aria-label="Permalink to &quot;安全思想&quot;">​</a></h4><p>说到请求，自然关联着安全问题。在本小节最后部分，我们对 axios 中的一些安全机制进行解析，涉及相关攻击手段：CSRF。</p><blockquote><p>Cross---Site Request Forgery，攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说，这个请求是完全合法的，但是却完成了攻击者期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至购买商品、虚拟货币转账等。</p></blockquote><p>在 axios 中，主要依赖双重 cookie 的方式防御 CSRF。具体来说，对于攻击者，获取用户 cookie 是比较困难的，因此，<strong>我们可以在请求中携带一个 cookie 值，来保证请求的安全性</strong>。这里我们将相关流程梳理为：</p><ul><li><p>用户访问页面，后端向请求域中注入一个 cookie，一般该 cookie 值为加密随机字符串；</p></li><li><p>在前端通过 Ajax 请求数据时，取出上述 cookie，添加到 URL 参数或者请求 header 中；</p></li><li><p>后端接口验证请求中携带的 cookie 值是否合法，不合法（不一致），则拒绝请求。</p></li></ul><p>我们看 axios 源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/defaults.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> defaults </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  adapter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefaultAdapter</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  xsrfCookieName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;XSRF-TOKEN&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  xsrfHeaderName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;X-XSRF-TOKEN&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/defaults.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> defaults </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  adapter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDefaultAdapter</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  xsrfCookieName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;XSRF-TOKEN&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  xsrfHeaderName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;X-XSRF-TOKEN&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在这里，axios 默认配置了默认<code>xsrfCookieName</code>和<code>xsrfHeaderName</code>，实际开发中可以按具体情况传入配置。在具体请求时，以<code>lib/adapters/xhr.js</code>为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 添加 xsrf header</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isStandardBrowserEnv</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> xsrfValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (config.withCredentials </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isURLSameOrigin</span><span style="color:#E1E4E8;">(fullPath)) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> config.xsrfCookieName </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookies.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(config.xsrfCookieName) </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (xsrfValue) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    requestHeaders[config.xsrfHeaderName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xsrfValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 添加 xsrf header</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (utils.</span><span style="color:#6F42C1;">isStandardBrowserEnv</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> xsrfValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (config.withCredentials </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isURLSameOrigin</span><span style="color:#24292E;">(fullPath)) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> config.xsrfCookieName </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    cookies.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(config.xsrfCookieName) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    undefined;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (xsrfValue) {</span></span>
<span class="line"><span style="color:#24292E;">    requestHeaders[config.xsrfHeaderName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xsrfValue;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由此可见，对一个成熟请求库的设计来说，安全防范这个话题永不过时。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本讲我们在开篇分析了代码设计、代码分层的方方面面，一个好的设计一定是层次明晰，各司其职的，一个好的设计也会直接帮助业务开发提升效率。封装和设计，是编程领域亘古不变的经典话题，需要每名开发者下沉到业务开发中体会、思考。</p><p>本小节的后半部分，我们从源码入手，分析了 axios 的优秀设计思想。即便你在业务中没有使用过 axios，但对于 axios 的学习始终是必要且重要的。</p><p>主要内容总结如下：</p>`,30),u=l("p",null,[s("最后，给大家布置一个思考题：axios 支持"),l("a",{href:"https://github.com/axios/axios#cancellation",target:"_blank",rel:"noreferrer"},"请求取消能力"),s("，这是如何实现的呢？欢迎在留言区和我分享你的观点。下一讲，我们将继续学习代码设计这一话题，通过对比 Koa 和 Redux，聚焦中间件化和插件化理念。我们下一讲再见。")],-1);function F(h,f,g,A,D,C){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"202125-101326.png",src:"https://s0.lgstatic.com/i/image6/M01/02/45/Cgp9HWAdGnOAEUmTAADzvClHn5k247.png"}),s(),y,a(n,{alt:"前端基建 金句.png",src:"https://s0.lgstatic.com/i/image6/M00/02/E5/CioPOWAeNr6AYnHYAAVEoQwNcDk580.png"}),s(),i,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/94/9E/CgqCHmAY6WuAA9A_AAEfckV_ZjM495.png"}),s(),d,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/8A/Cip5yGAY6X6ASgWfAAEY6D_f_OM734.png"}),s(),u])}const x=o(r,[["render",F]]);export{m as __pageData,x as default};
