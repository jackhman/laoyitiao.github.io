import{_ as o,j as e,o as t,g as c,k as p,h as n,s,Q as l}from"./chunks/framework.4e7d56ce.js";const V=JSON.parse('{"title":"06基础规范：如何理解JDBC关系型数据库访问规范？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Boot 实战开发_文档/(5721) 06  基础规范：如何理解 JDBC 关系型数据库访问规范？.md","filePath":"posts/backEnd/Spring Boot 实战开发_文档/(5721) 06  基础规范：如何理解 JDBC 关系型数据库访问规范？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Spring Boot 实战开发_文档/(5721) 06  基础规范：如何理解 JDBC 关系型数据库访问规范？.md"},E=s("h1",{id:"_06基础规范-如何理解jdbc关系型数据库访问规范",tabindex:"-1"},[n("06基础规范：如何理解JDBC关系型数据库访问规范？ "),s("a",{class:"header-anchor",href:"#_06基础规范-如何理解jdbc关系型数据库访问规范","aria-label":'Permalink to "06基础规范：如何理解JDBC关系型数据库访问规范？"'},"​")],-1),y=s("p",null,"从今天开始，我们将进入 Spring Boot 另一个核心技术体系的讨论，即数据访问技术体系。无论是互联网应用还是传统软件，对于任何一个系统而言，数据的存储和访问都是不可缺少的。",-1),i=s("p",null,"数据访问层的构建可能会涉及多种不同形式的数据存储媒介，本课程关注的是最基础也是最常用的数据存储媒介，即关系型数据库，针对关系型数据库，Java 中应用最广泛的就是 JDBC 规范，今天我们将对这个经典规范展开讨论。",-1),d=s("p",null,"JDBC 是 Java Database Connectivity 的全称，它的设计初衷是提供一套能够应用于各种数据库的统一标准，这套标准需要不同数据库厂家之间共同遵守，并提供各自的实现方案供 JDBC 应用程序调用。",-1),u=s("p",null,"作为一套统一标准，JDBC 规范具备完整的架构体系，如下图所示：",-1),D=l(`<p>JDBC 规范整体架构图</p><p>从上图中可以看到，Java 应用程序通过 JDBC 所提供的 API 进行数据访问，而这些 API 中包含了开发人员所需要掌握的各个核心编程对象，下面我们一起来看下。</p><h3 id="jdbc-规范中有哪些核心编程对象" tabindex="-1">JDBC 规范中有哪些核心编程对象？ <a class="header-anchor" href="#jdbc-规范中有哪些核心编程对象" aria-label="Permalink to &quot;JDBC 规范中有哪些核心编程对象？&quot;">​</a></h3><p>对于日常开发而言，JDBC 规范中的核心编程对象包括 DriverManger、DataSource、Connection、Statement，及 ResultSet。</p><h4 id="drivermanager" tabindex="-1">DriverManager <a class="header-anchor" href="#drivermanager" aria-label="Permalink to &quot;DriverManager&quot;">​</a></h4><p>正如前面的 JDBC 规范整体架构图中所示，JDBC 中的 DriverManager 主要负责加载各种不同的驱动程序（Driver），并根据不同的请求向应用程序返回相应的数据库连接（Connection），应用程序再通过调用 JDBC API 实现对数据库的操作。</p><p>JDBC 中的 Driver 定义如下，其中最重要的是第一个获取 Connection 的 connect 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Driver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取数据库连接</span></span>
<span class="line"><span style="color:#E1E4E8;">    Connection </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, java.util.Properties </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">acceptsURL</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">DriverPropertyInfo</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">getPropertyInfo</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, java.util.Properties </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMajorVersion</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMinorVersion</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jdbcCompliant</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Logger </span><span style="color:#B392F0;">getParentLogger</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLFeatureNotSupportedException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Driver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取数据库连接</span></span>
<span class="line"><span style="color:#24292E;">    Connection </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">url</span><span style="color:#24292E;">, java.util.Properties </span><span style="color:#E36209;">info</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">acceptsURL</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">url</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">DriverPropertyInfo</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getPropertyInfo</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">url</span><span style="color:#24292E;">, java.util.Properties </span><span style="color:#E36209;">info</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMajorVersion</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMinorVersion</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jdbcCompliant</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Logger </span><span style="color:#6F42C1;">getParentLogger</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLFeatureNotSupportedException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>针对 Driver 接口，不同的数据库供应商分别提供了自身的实现方案。例如，MySQL 中的 Driver 实现类如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Driver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NonRegisteringDriver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> java.sql.</span><span style="color:#B392F0;">Driver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过 DriverManager 注册 Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            java.sql.DriverManager.</span><span style="color:#B392F0;">registerDriver</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Driver</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SQLException </span><span style="color:#FFAB70;">E</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can&#39;t register driver!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Driver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NonRegisteringDriver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.sql.</span><span style="color:#6F42C1;">Driver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过 DriverManager 注册 Driver</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            java.sql.DriverManager.</span><span style="color:#6F42C1;">registerDriver</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Driver</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SQLException </span><span style="color:#E36209;">E</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Can&#39;t register driver!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里就使用用了 DriverManager，而 DriverManager 除提供了上述用于注册 Driver 的 registerDriver 方法之外，还提供了 getConnection 方法用于针对具体的 Driver 获取 Connection 对象。</p><h4 id="datasource" tabindex="-1">DataSource <a class="header-anchor" href="#datasource" aria-label="Permalink to &quot;DataSource&quot;">​</a></h4><p>通过前面的介绍，我们知道在 JDBC 规范中可直接通过 DriverManager 获取 Connection，我们也知道获取 Connection 的过程需要建立与数据库之间的连接，而这个过程会产生较大的系统开销。</p><p>为了提高性能，通常我们首先会建立一个中间层将 DriverManager 生成的 Connection 存放到连接池中，再从池中获取 Connection。</p><p>而我们可以认为 DataSource 就是这样一个中间层，它作为 DriverManager 的替代品而推出，是获取数据库连接的首选方法。</p><p>DataSource 在 JDBC 规范中代表的是一种数据源，核心作用是获取数据库连接对象 Connection。在日常开发过程中，我们通常会基于 DataSource 获取 Connection。DataSource 接口的定义如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSource</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommonDataSource</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Wrapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSource</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommonDataSource</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Wrapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">password</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面我们可以看到，DataSource 接口提供了两个获取 Connection 的重载方法，并继承了 CommonDataSource 接口。CommonDataSource 是 JDBC 中关于数据源定义的根接口，除了 DataSource 接口之外，它还有另外两个子接口，如下图所示：</p>`,18),F=s("p",null,"DataSource 类层结构图",-1),S=s("p",null,"其中，DataSource 是官方定义的获取 Connection 的基础接口，XADataSource 用来在分布式事务环境下实现 Connection 的获取，而 ConnectionPoolDataSource 是从连接池 ConnectionPool 中获取 Connection 的接口。",-1),C=s("p",null,"所谓的 ConnectionPool 相当于预先生成一批 Connection 并存放在池中，从而提升 Connection 获取的效率。",-1),h=s("p",null,"请注意 DataSource 接口同时还继承了一个 Wrapper 接口。从接口的命名上看，我们可以判断该接口起到一种包装器的作用。事实上，因为很多数据库供应商提供了超越标准 JDBC API 的扩展功能，所以 Wrapper 接口可以把一个由第三方供应商提供的、非 JDBC 标准的接口包装成标准接口。",-1),g=s("p",null,"以 DataSource 接口为例，如果我们想自己实现一个定制化的数据源类 MyDataSource，就可以提供一个实现了 Wrapper 接口的 MyDataSourceWrapper 类来完成包装和适配，如下图所示：",-1),A=s("p",null,"通过 Wrapper 接口扩展 JDBC 规范示意图",-1),B=s("p",null,"在 JDBC 规范中，除了 DataSource 之外，Connection、Statement、ResultSet 等核心对象也都继承了这个 Wrapper 接口。",-1),m=s("p",null,"作为一种基础组件，它同样不需要开发人员自己实现 DataSource，因为业界已经存在了很多优秀的实现方案，如 DBCP、C3P0 和 Druid 等。",-1),v=s("p",null,"例如 Druid 提供了 DruidDataSource，它不仅提供了连接池的功能，还提供了诸如监控等其他功能，它的类层结构如下图所示：",-1),_=l(`<p>DruidDataSource 的类层结构</p><h4 id="connection" tabindex="-1">Connection <a class="header-anchor" href="#connection" aria-label="Permalink to &quot;Connection&quot;">​</a></h4><p>DataSource 的目的是获取 Connection 对象。我们可以把 Connection 理解为一种会话（Session）机制，Connection 代表一个数据库连接，负责完成与数据库之间的通信。</p><p>所有 SQL 的执行都是在某个特定 Connection 环境中进行的，同时它还提供了一组重载方法分别用于创建 Statement 和 PreparedStatement。另一方面，Connection 也涉及事务相关的操作。</p><p>Connection 接口中定义的方法很丰富，其中最核心的几个方法如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Wrapper</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">AutoCloseable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//创建 Statement</span></span>
<span class="line"><span style="color:#E1E4E8;">	Statement </span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//创建 PreparedStatement</span></span>
<span class="line"><span style="color:#E1E4E8;">	PreparedStatement </span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//提交</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//回滚</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//关闭连接</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Wrapper</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">AutoCloseable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//创建 Statement</span></span>
<span class="line"><span style="color:#24292E;">	Statement </span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//创建 PreparedStatement</span></span>
<span class="line"><span style="color:#24292E;">	PreparedStatement </span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//提交</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//回滚</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//关闭连接</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里涉及具体负责执行 SQL 语句的 Statement 和 PreparedStatement 对象，我们接着往下看。</p><h4 id="statement-preparedstatement" tabindex="-1">Statement/PreparedStatement <a class="header-anchor" href="#statement-preparedstatement" aria-label="Permalink to &quot;Statement/PreparedStatement&quot;">​</a></h4><p>JDBC 规范中的 Statement 存在两种类型，一种是普通的 Statement，一种是支持预编译的 PreparedStatement。</p><p>所谓预编译，是指数据库的编译器会对 SQL 语句提前编译，然后将预编译的结果缓存到数据库中，下次执行时就可以通过替换参数并直接使用编译过的语句，从而大大提高 SQL 的执行效率。</p><p>当然，这种预编译也需要一定成本，因此在日常开发中，如果对数据库只执行一次性读写操作时，用 Statement 对象进行处理会比较合适；而涉及 SQL 语句的多次执行时，我们可以使用 PreparedStatement。</p><p>如果需要查询数据库中的数据，我们只需要调用 Statement 或 PreparedStatement 对象的 executeQuery 方法即可。</p><p>这个方法以 SQL 语句作为参数，执行完后返回一个 JDBC 的 ResultSet 对象。当然，Statement 或 PreparedStatement 还提供了一大批执行 SQL 更新和查询的重载方法，我们无意一一展开。</p><p>以 Statement 为例，它的核心方法如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Statement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Wrapper</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">AutoCloseable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//执行查询语句</span></span>
<span class="line"><span style="color:#E1E4E8;">	ResultSet </span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//执行更新语句</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeUpdate</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//执行 SQL 语句</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//执行批处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">executeBatch</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Statement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Wrapper</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">AutoCloseable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//执行查询语句</span></span>
<span class="line"><span style="color:#24292E;">	ResultSet </span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//执行更新语句</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeUpdate</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//执行 SQL 语句</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//执行批处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">executeBatch</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们同样引出了 JDBC 规范中最后一个核心编程对象，即代表执行结果的 ResultSet。</p><h4 id="resultset" tabindex="-1">ResultSet <a class="header-anchor" href="#resultset" aria-label="Permalink to &quot;ResultSet&quot;">​</a></h4><p>一旦我们通过 Statement 或 PreparedStatement 执行了 SQL 语句并获得了 ResultSet 对象，就可以使用该对象中定义的一大批用于获取 SQL 执行结果值的工具方法，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResultSet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Wrapper</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">AutoCloseable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//获取下一个结果</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//获取某一个类型的结果值</span></span>
<span class="line"><span style="color:#E1E4E8;">	Value </span><span style="color:#B392F0;">getXXX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">columnIndex</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResultSet</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Wrapper</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">AutoCloseable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//获取下一个结果</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//获取某一个类型的结果值</span></span>
<span class="line"><span style="color:#24292E;">	Value </span><span style="color:#6F42C1;">getXXX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">columnIndex</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ResultSet 提供了 next() 方法便于开发人员实现对整个结果集的遍历。如果 next() 方法返回为 true，意味着结果集中存在数据，可以调用 ResultSet 对象的一系列 getXXX() 方法来取得对应的结果值。</p><h3 id="如何使用-jdbc-规范访问数据库" tabindex="-1">如何使用 JDBC 规范访问数据库？ <a class="header-anchor" href="#如何使用-jdbc-规范访问数据库" aria-label="Permalink to &quot;如何使用 JDBC 规范访问数据库？&quot;">​</a></h3><p>对于开发人员而言，JDBC API 是我们访问数据库的主要途径，如果我们使用 JDBC 开发一个访问数据库的执行流程，常见的代码风格如下所示（省略了异常处理）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建池化的数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">PooledDataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PooledDataSource</span><span style="color:#E1E4E8;"> ();</span></span>
<span class="line"><span style="color:#6A737D;">// 设置 MySQL Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">dataSource.</span><span style="color:#B392F0;">setDriver</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置数据库 URL、用户名和密码</span></span>
<span class="line"><span style="color:#E1E4E8;">dataSource.</span><span style="color:#B392F0;">setUrl</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">dataSource.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">dataSource.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取连接</span></span>
<span class="line"><span style="color:#E1E4E8;">Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 执行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">PreparedStatement statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;select * from user&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取查询结果进行处理</span></span>
<span class="line"><span style="color:#E1E4E8;">ResultSet resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (resultSet.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 关闭资源</span></span>
<span class="line"><span style="color:#E1E4E8;">statement.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">resultSet.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">connection.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建池化的数据源</span></span>
<span class="line"><span style="color:#24292E;">PooledDataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PooledDataSource</span><span style="color:#24292E;"> ();</span></span>
<span class="line"><span style="color:#6A737D;">// 设置 MySQL Driver</span></span>
<span class="line"><span style="color:#24292E;">dataSource.</span><span style="color:#6F42C1;">setDriver</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置数据库 URL、用户名和密码</span></span>
<span class="line"><span style="color:#24292E;">dataSource.</span><span style="color:#6F42C1;">setUrl</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;jdbc:mysql://localhost:3306/test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">dataSource.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">dataSource.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取连接</span></span>
<span class="line"><span style="color:#24292E;">Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 执行查询</span></span>
<span class="line"><span style="color:#24292E;">PreparedStatement statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;select * from user&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取查询结果进行处理</span></span>
<span class="line"><span style="color:#24292E;">ResultSet resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (resultSet.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 关闭资源</span></span>
<span class="line"><span style="color:#24292E;">statement.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">resultSet.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">connection.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这段代码中完成了对基于前面介绍的 JDBC API 中的各个核心编程对象的数据访问。上述代码主要面向查询场景，而针对用于插入数据的处理场景，我们只需要在上述代码中替换几行代码，即将&quot;执行查询&quot;和&quot;获取查询结果进行处理&quot;部分的查询操作代码替换为插入操作代码就行。</p><p>最后，我们梳理一下基于 JDBC 规范进行数据库访问的整个开发流程，如下图所示：</p>`,25),b=s("p",null,"基于 JDBC 规范进行数据库访问的开发流程图",-1),x=s("p",null,"针对前面所介绍的代码示例，我们明确地将基于 JDBC 规范访问关系型数据库的操作分成两大部分：一部分是准备和释放资源以及执行 SQL 语句，另一部分则是处理 SQL 执行结果。",-1),L=s("p",null,'而对于任何数据访问而言，前者实际上都是重复的。在上图所示的整个开发流程中，事实上只有"处理 ResultSet "部分的代码需要开发人员根据具体的业务对象进行定制化处理。这种抽象为整个执行过程提供了优化空间。诸如 Spring 框架中 JdbcTemplate 这样的模板工具类就应运而生了，我们会在 07 讲中会详细介绍这个模板工具类。',-1),q=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),Q=s("p",null,"JDBC 规范是 Java EE 领域中进行数据库访问的标准规范，在业界应用非常广泛。今天的课程中，我们分析了该规范的核心编程对象，并梳理了使用 JDBC 规范访问数据库的开发流程。希望你能熟练掌握这部分知识，因为熟练掌握 JDBC 规范是我们理解后续内容的基础。",-1),P=s("p",null,"这里给你留一道思考题：在使用 JDBC 规范时，开发人员主要应用哪些编程对象完成对数据库的访问？",-1),J=s("p",null,"尽管 JDBC 规范非常经典，但其所提供的 API 过于面向底层，对于开发人员来说并不友好。因此 07 讲中，我们将引入 Spring 框架中提供的 JdbcTemplate 模板工具类来简化 JDBC 规范的使用方法。",-1);function w(k,j,f,M,R,I){const a=e("Image");return t(),c("div",null,[E,y,i,d,u,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/78/46/CgqCHl_J3f2AMaTEAADODtTLjeA995.png"}),n(),D,p(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image2/M01/05/2A/CgpVE1_9BRyALcLiAACsqMysPwQ396.png"}),n(),F,S,C,h,g,p(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M01/39/CE/Cgp9HWB8_iWABX6dAAC2_bCPSoQ200.png"}),n(),A,B,m,v,p(a,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image2/M01/05/2A/CgpVE1_9BS-AEQNBAABgakhN868633.png"}),n(),_,p(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/78/3B/Ciqc1F_J3jmANBxqAADebgJ5BdU438.png"}),n(),b,x,L,q,Q,P,J])}const W=o(r,[["render",w]]);export{V as __pageData,W as default};
