import{_ as s,o as a,h as n,Q as p}from"./chunks/framework.d3daa342.js";const g=JSON.parse('{"title":"02数据类型：你必须掌握的数据类型有哪些？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5228) 02  数据类型：你必须掌握的数据类型有哪些？.md","filePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5228) 02  数据类型：你必须掌握的数据类型有哪些？.md","lastUpdated":1696682708000}'),l={name:"posts/backEnd/22 讲通关 Go 语言_文档/(5228) 02  数据类型：你必须掌握的数据类型有哪些？.md"},o=p(`<h1 id="_02数据类型-你必须掌握的数据类型有哪些" tabindex="-1">02数据类型：你必须掌握的数据类型有哪些？ <a class="header-anchor" href="#_02数据类型-你必须掌握的数据类型有哪些" aria-label="Permalink to &quot;02数据类型：你必须掌握的数据类型有哪些？&quot;">​</a></h1><p>上节课的思考题是打印出自己的名字，这个作业比较简单，属于文本的替换，你只需要把我示例中的&quot;Hello 世界&quot;修改成自己的名字即可，比如以我的名字为例，替换为&quot;飞雪无情&quot;。</p><p>经过上一节课的学习，你已经对 Go 语言的程序结构有了初步了解，也准备好了相应的开发环境。但是一个完整的项目需要更复杂的逻辑，不是简单的&quot;Hello 世界&quot;可相比的。这些逻辑通过变量、常量、类型、函数方法、接口、结构体组成，这节课我就将带你认识它们，让你的 Go 语言程序变得更加生动。</p><h3 id="变量声明" tabindex="-1">变量声明 <a class="header-anchor" href="#变量声明" aria-label="Permalink to &quot;变量声明&quot;">​</a></h3><p>变量代表可变的数据类型，也就是说，它在程序执行的过程中可能会被一次甚至多次修改。</p><p>在 Go 语言中，通过 var 声明语句来定义一个变量，定义的时候需要指定这个变量的类型，然后再为它起个名字，并且设置好变量的初始值。所以 var 声明一个变量的格式如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> 变量名 类型 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 表达式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> 变量名 类型 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 表达式</span></span></code></pre></div><p>现在我通过一个示例来演示如何定义一个变量，并且设置它的初始值：</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>观察上面例子中 main 函数的内容，其中 var i int = 10 就是定义一个类型为 int（整数）、变量名为 i 的变量，它的初始值为 10</p><p>这里为了运行程序，我加了一行 fmt.Println(i)，你在上节课中就见到过它，表示打印出变量 i 的值。</p><p>这样做一方面是因为 Go 语言中定义的变量必须使用，否则无法编译通过，这也是 Go 语言比较好的特性，防止定义了变量不使用，导致浪费内存的情况；另一方面，在运行程序的时候可以查看变量 i 的结果。</p><p>通过输入 go run ch02/main.go 命令回车运行，即可看到如下结果：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ </span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> run ch02</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">main.</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ </span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> run ch02</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">main.</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">10</span></span></code></pre></div><p>打印的结果是10，和变量的初始值一样。</p><p>因为 Go 语言具有类型推导功能，所以也可以不去刻意地指定变量的类型，而是让 Go 语言自己推导，比如变量 i 也可以用如下的方式声明：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span></code></pre></div><p>这样变量 i 的类型默认是 int 类型。</p><p>你也可以一次声明多个变量，把要声明的多个变量放到一个括号中即可，如下面的代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    j </span><span style="color:#F97583;">int=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    k </span><span style="color:#F97583;">int=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    j </span><span style="color:#D73A49;">int=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    k </span><span style="color:#D73A49;">int=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>同理因为类型推导，以上多个变量声明也可以用以下代码的方式书写：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>这样就更简洁了。</p><p>其实不止 int 类型，我后面介绍的 float64、bool、string 等基础类型都可以被自动推导，也就是可以省略定义类型。</p><h3 id="演示项目目录结构" tabindex="-1">演示项目目录结构 <a class="header-anchor" href="#演示项目目录结构" aria-label="Permalink to &quot;演示项目目录结构&quot;">​</a></h3><p>为了让你更好地理解我演示的例子，这里我给出演示项目的目录结构，以后的所有课时都会按照这个目录进行演示。</p><p>我的演示项目结构如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">gotour</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ch01</span></span>
<span class="line"><span style="color:#B392F0;">│</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ch02</span></span>
<span class="line"><span style="color:#B392F0;">│</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span>
<span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go.mod</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">gotour</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ch01</span></span>
<span class="line"><span style="color:#6F42C1;">│</span><span style="color:#24292E;">   </span><span style="color:#032F62;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ch02</span></span>
<span class="line"><span style="color:#6F42C1;">│</span><span style="color:#24292E;">   </span><span style="color:#032F62;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go.mod</span></span></code></pre></div><p>其中 gotour 是演示项目的根目录，所有 Go 语言命令都会在这里执行，比如 go run。</p><p>ch01、ch02 这些目录是按照课时命名的，每一讲都有对应的目录，便于查找相应的源代码。具体的 Go 语言源代码会存放到对应的课时目录中。</p><h3 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h3><p>任何一门语言都有对应的基础类型，这些基础类型和现实中的事物一一对应，比如整型对应着 1、2、3、100 这些整数，浮点型对应着 1.1、3.4 这些小数等。Go 语言也不例外，它也有自己丰富的基础类型，常用的有：整型、浮点数、布尔型和字符串，下面我就为你详细介绍。</p><h4 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h4><p>在 Go 语言中，整型分为：</p><ul><li><p><strong>有符号整型</strong>：如 int、int8、int16、int32 和 int64。</p></li><li><p><strong>无符号整型</strong>：如 uint、uint8、uint16、uint32 和 uint64。</p></li></ul><p>它们的差别在于，有符号整型表示的数值可以为负数、零和正数，而无符号整型只能为零和正数。</p><p>除了有用&quot;位&quot;（bit）大小表示的整型外，还有 int 和 uint 这两个没有具体 bit 大小的整型，它们的大小可能是 32bit，也可能是 64bit，和硬件设备 CPU 有关。</p><p>在整型中，如果能确定 int 的 bit 就选择比较明确的 int 类型，因为这会让你的程序具备很好的移植性。</p><p>在 Go 语言中，还有一种字节类型 byte，它其实等价于 uint8 类型，可以理解为 uint8 类型的别名，用于定义一个字节，所以字节 byte 类型也属于整型。</p><h4 id="浮点数" tabindex="-1">浮点数 <a class="header-anchor" href="#浮点数" aria-label="Permalink to &quot;浮点数&quot;">​</a></h4><p>浮点数就代表现实中的小数。Go 语言提供了两种精度的浮点数，分别是 float32 和 float64。项目中最常用的是 float64，因为它的精度高，浮点计算的结果相比 float32 误差会更小。</p><p>下面的代码示例定义了两个变量 f32 和 f64，它们的类型分别为 float32 和 float64。</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> f32 </span><span style="color:#F97583;">float32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.2</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> f64 </span><span style="color:#F97583;">float64</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.3456</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;f32 is&quot;</span><span style="color:#E1E4E8;">,f32,</span><span style="color:#9ECBFF;">&quot;,f64 is&quot;</span><span style="color:#E1E4E8;">,f64)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> f32 </span><span style="color:#D73A49;">float32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.2</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> f64 </span><span style="color:#D73A49;">float64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.3456</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;f32 is&quot;</span><span style="color:#24292E;">,f32,</span><span style="color:#032F62;">&quot;,f64 is&quot;</span><span style="color:#24292E;">,f64)</span></span></code></pre></div><p>运行这段程序，会看到如下结果：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ch02/main.go</span></span>
<span class="line"><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">,f64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.3456</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ch02/main.go</span></span>
<span class="line"><span style="color:#6F42C1;">f32</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,f64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.3456</span></span></code></pre></div><p>**特别注意：**在演示示例的时候，我会尽可能地贴出演示需要的核心代码，也就是说，会省略 package 和 main 函数。如果没有特别说明，它们都是放在main函数中的，可以直接运行。</p><h4 id="布尔型" tabindex="-1">布尔型 <a class="header-anchor" href="#布尔型" aria-label="Permalink to &quot;布尔型&quot;">​</a></h4><p>一个布尔型的值只有两种：true 和 false，它们代表现实中的&quot;是&quot;和&quot;否&quot;。它们的值会经常被用于一些判断中，比如 if 语句（以后的课时会详细介绍）等。Go 语言中的布尔型使用关键字 bool 定义。</p><p>下面的代码声明了两个变量，你可以自己运行，看看打印输出的结果。</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bf </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bt </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bf is&quot;</span><span style="color:#E1E4E8;">,bf,</span><span style="color:#9ECBFF;">&quot;,bt is&quot;</span><span style="color:#E1E4E8;">,bt)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bf </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bt </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bf is&quot;</span><span style="color:#24292E;">,bf,</span><span style="color:#032F62;">&quot;,bt is&quot;</span><span style="color:#24292E;">,bt)</span></span></code></pre></div><p>布尔值可以用于一元操作符 !，表示逻辑非的意思，也可以用于二元操作符 &amp;&amp;、||，它们分别表示逻辑和、逻辑或。</p><h4 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h4><p>Go 语言中的字符串可以表示为任意的数据，比如以下代码，在 Go 语言中，字符串通过类型 string 声明：</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello&quot;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s2 </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;世界&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s1 is&quot;</span><span style="color:#E1E4E8;">,s1,</span><span style="color:#9ECBFF;">&quot;,s2 is&quot;</span><span style="color:#E1E4E8;">,s2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello&quot;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;世界&quot;</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s1 is&quot;</span><span style="color:#24292E;">,s1,</span><span style="color:#032F62;">&quot;,s2 is&quot;</span><span style="color:#24292E;">,s2)</span></span></code></pre></div><p>运行程序就可以看到打印的字符串结果。</p><p>在 Go 语言中，可以通过操作符 + 把字符串连接起来，得到一个新的字符串，比如将上面的 s1 和 s2 连接起来，如下所示：</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s1+s2=&quot;</span><span style="color:#E1E4E8;">,s1</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">s2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;s1+s2=&quot;</span><span style="color:#24292E;">,s1</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">s2)</span></span></code></pre></div><p>由于 s1 表示字符串&quot;Hello&quot;，s2 表示字符串&quot;世界&quot;，在终端输入 go run ch02/main.go 后，就可以打印出它们连接起来的结果&quot;Hello世界&quot;，如以下代码所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">s1+s2</span><span style="color:#E1E4E8;">= </span><span style="color:#9ECBFF;">Hello世界</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">s1+s2</span><span style="color:#24292E;">= </span><span style="color:#032F62;">Hello世界</span></span></code></pre></div><p>字符串也可以通过 += 运算符操作，你自己可以试试 s1+=s2 会得到什么新的字符串。</p><h4 id="零值" tabindex="-1">零值 <a class="header-anchor" href="#零值" aria-label="Permalink to &quot;零值&quot;">​</a></h4><p>零值其实就是一个变量的默认值，在 Go 语言中，如果我们声明了一个变量，但是没有对其进行初始化，那么 Go 语言会自动初始化其值为对应类型的零值。比如数字类的零值是 0，布尔型的零值是 false，字符串的零值是 &quot;&quot; 空字符串等。</p><p>通过下面的代码示例，就可以验证这些基础类型的零值：</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> zi </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> zf </span><span style="color:#F97583;">float64</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> zb </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> zs </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(zi,zf,zb,zs)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> zi </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> zf </span><span style="color:#D73A49;">float64</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> zb </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> zs </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(zi,zf,zb,zs)</span></span></code></pre></div><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><h4 id="变量简短声明" tabindex="-1">变量简短声明 <a class="header-anchor" href="#变量简短声明" aria-label="Permalink to &quot;变量简短声明&quot;">​</a></h4><p>有没有发现，上面我们演示的示例都有一个 var 关键字，但是这样写代码很烦琐。借助类型推导，Go 语言提供了变量的简短声明 :=，结构如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">变量名</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">表达式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">变量名</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">表达式</span></span></code></pre></div><p>借助 Go 语言简短声明功能，变量声明就会非常简洁，比如以上示例中的变量，可以通过如下代码简短声明：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">bf：</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">s1</span><span style="color:#F97583;">:=</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">bf：</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">s1</span><span style="color:#D73A49;">:=</span><span style="color:#032F62;">&quot;Hello&quot;</span></span></code></pre></div><p>在实际的项目实战中，如果你能为声明的变量初始化，那么就选择简短声明方式，这种方式也是使用最多的。</p><h4 id="指针" tabindex="-1">指针 <a class="header-anchor" href="#指针" aria-label="Permalink to &quot;指针&quot;">​</a></h4><p>在 Go 语言中，指针对应的是变量在内存中的存储位置，也就说指针的值就是变量的内存地址。通过 &amp; 可以获取一个变量的地址，也就是指针。</p><p>在以下的代码中，pi 就是指向变量 i 的指针。要想获得指针 pi 指向的变量值，通过*pi这个表达式即可。尝试运行这段程序，会看到输出结果和变量 i 的值一样。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pi</span><span style="color:#F97583;">:=&amp;</span><span style="color:#E1E4E8;">i</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pi)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pi</span><span style="color:#D73A49;">:=&amp;</span><span style="color:#24292E;">i</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pi)</span></span></code></pre></div><h4 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h4><p>在讲变量的时候，我说过变量是可以修改的，那么怎么修改呢？这就是赋值语句要做的事情。最常用也是最简单的赋值语句就是 =，如下代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;i的新值是&quot;</span><span style="color:#E1E4E8;">,i)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;i的新值是&quot;</span><span style="color:#24292E;">,i)</span></span></code></pre></div><p>这样变量 i 就被修改了，它的新值是 20。</p><h3 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h3><p>一门编程语言，有变量就有常量，Go 语言也不例外。在程序中，常量的值是指在编译期就确定好的，一旦确定好之后就不能被修改，这样就可以防止在运行期被恶意篡改。</p><h4 id="常量的定义" tabindex="-1">常量的定义 <a class="header-anchor" href="#常量的定义" aria-label="Permalink to &quot;常量的定义&quot;">​</a></h4><p>常量的定义和变量类似，只不过它的关键字是 const。</p><p>下面的示例定义了一个常量 name，它的值是&quot;飞雪无情&quot;。因为 Go 语言可以类型推导，所以在常量声明时也可以省略类型。</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span></span></code></pre></div><p>在 Go 语言中，只允许布尔型、字符串、数字类型这些基础类型作为常量。</p><h4 id="iota" tabindex="-1">iota <a class="header-anchor" href="#iota" aria-label="Permalink to &quot;iota&quot;">​</a></h4><p>iota 是一个常量生成器，它可以用来初始化相似规则的常量，避免重复的初始化。假设我们要定义 one、two、three 和 four 四个常量，对应的值分别是 1、2、3 和 4，如果不使用 iota，则需要按照如下代码的方式定义：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">const</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    one </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    two </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">    three </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">    four </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">const</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    one </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    two </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    three </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    four </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>以上声明都要初始化，会比较烦琐，因为这些常量是有规律的（连续的数字），所以可以使用 iota 进行声明，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">const</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    one </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iota</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    two</span></span>
<span class="line"><span style="color:#E1E4E8;">    three</span></span>
<span class="line"><span style="color:#E1E4E8;">    four</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(one,two,three,four)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">const</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    one </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iota</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    two</span></span>
<span class="line"><span style="color:#24292E;">    three</span></span>
<span class="line"><span style="color:#24292E;">    four</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(one,two,three,four)</span></span></code></pre></div><p>你自己可以运行程序，会发现打印的值和上面初始化的一样，也是 1、2、3、4。</p><p>iota 的初始值是 0，它的能力就是在每一个有常量声明的行后面 +1，下面我来分解上面的常量：</p><ol><li><p>one=(0)+1，这时候 iota 的值为 0，经过计算后，one 的值为 1。</p></li><li><p>two=(0+1)+1，这时候 iota 的值会 +1，变成了 1，经过计算后，two 的值为 2。</p></li><li><p>three=(0+1+1)+1，这时候 iota 的值会再 +1，变成了 2，经过计算后，three 的值为 3。</p></li><li><p>four=(0+1+1+1)+1，这时候 iota 的值会继续再 +1，变成了 3，经过计算后，four 的值为 4。</p></li></ol><p>如果你定义更多的常量，就依次类推，其中 () 内的表达式，表示 iota 自身 +1 的过程。</p><h3 id="字符串-1" tabindex="-1">字符串 <a class="header-anchor" href="#字符串-1" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><p>字符串是 Go 语言中常用的类型，在前面的基础类型小节中已经有过基本的介绍。这一小结会为你更详细地介绍字符串的使用。</p><h4 id="字符串和数字互转" tabindex="-1">字符串和数字互转 <a class="header-anchor" href="#字符串和数字互转" aria-label="Permalink to &quot;字符串和数字互转&quot;">​</a></h4><p>Go 语言是强类型的语言，也就是说不同类型的变量是无法相互使用和计算的，这也是为了保证Go 程序的健壮性，所以不同类型的变量在进行赋值或者计算前，需要先进行类型转换。涉及类型转换的知识点非常多，这里我先介绍这些基础类型之间的转换，更复杂的会在后面的课时介绍。</p><p>以字符串和数字互转这种最常见的情况为例，如下面的代码所示：</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">i2s</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">s2i,err</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">strconv.</span><span style="color:#79B8FF;">Atoi</span><span style="color:#E1E4E8;">(i2s)</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(i2s,s2i,err)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">i2s</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">s2i,err</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">strconv.</span><span style="color:#005CC5;">Atoi</span><span style="color:#24292E;">(i2s)</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(i2s,s2i,err)</span></span></code></pre></div><p>通过包 strconv 的 Itoa 函数可以把一个 int 类型转为 string，Atoi 函数则用来把 string 转为 int。</p><p>同理对于浮点数、布尔型，Go 语言提供了 strconv.ParseFloat、strconv.ParseBool、strconv.FormatFloat 和 strconv.FormatBool 进行互转，你可以自己试试。</p><p>对于数字类型之间，可以通过强制转换的方式，如以下代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">i2f</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">float64</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">f2i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(f64)</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(i2f,f2i)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">i2f</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">float64</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">f2i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(f64)</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(i2f,f2i)</span></span></code></pre></div><p>这种使用方式比简单，采用&quot;类型（要转换的变量）&quot;格式即可。采用强制转换的方式转换数字类型，可能会丢失一些精度，比如浮点型转为整型时，小数点部分会全部丢失，你可以自己运行上述示例，验证结果。</p><p>把变量转换为相应的类型后，就可以对相同类型的变量进行各种表达式运算和赋值了。</p><h4 id="strings-包" tabindex="-1">Strings 包 <a class="header-anchor" href="#strings-包" aria-label="Permalink to &quot;Strings 包&quot;">​</a></h4><p>讲到基础类型，尤其是字符串，不得不提 Go SDK 为我们提供的一个标准包 strings。它是用于处理字符串的工具包，里面有很多常用的函数，帮助我们对字符串进行操作，比如查找字符串、去除字符串的空格、拆分字符串、判断字符串是否有某个前缀或者后缀等。掌握好它，有利于我们的高效编程。</p><p>以下代码是我写的关于 strings 包的一些例子，你自己可以根据<a href="https://golang.google.cn/pkg/strings/" target="_blank" rel="noreferrer">strings 文档</a>自己写一些示例，多练习熟悉它们。</p><p><em><strong>ch02/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//判断s1的前缀是否是H</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(strings.</span><span style="color:#79B8FF;">HasPrefix</span><span style="color:#E1E4E8;">(s1,</span><span style="color:#9ECBFF;">&quot;H&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">//在s1中查找字符串o</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(strings.</span><span style="color:#79B8FF;">Index</span><span style="color:#E1E4E8;">(s1,</span><span style="color:#9ECBFF;">&quot;o&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">//把s1全部转为大写</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(strings.</span><span style="color:#79B8FF;">ToUpper</span><span style="color:#E1E4E8;">(s1))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//判断s1的前缀是否是H</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(strings.</span><span style="color:#005CC5;">HasPrefix</span><span style="color:#24292E;">(s1,</span><span style="color:#032F62;">&quot;H&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">//在s1中查找字符串o</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(strings.</span><span style="color:#005CC5;">Index</span><span style="color:#24292E;">(s1,</span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">//把s1全部转为大写</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(strings.</span><span style="color:#005CC5;">ToUpper</span><span style="color:#24292E;">(s1))</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本节课我讲解了变量、常量的声明、初始化，以及变量的简短声明，同时介绍了常用的基础类型、数字和字符串的转换以及 strings 工具包的使用，有了这些，你就可以写出功能更强大的程序。</p><p>在基础类型中，还有一个没有介绍的基础类型------复数，它不常用，就留给你来探索。这里给你一个提示：复数是用 complex 这个内置函数创建的。</p><p>本节课的思考题是：如何在一个字符串中查找某个字符串是否存在？提示一下，Go 语言自带的 strings 包里有现成的函数哦。</p><p>下一课时起，我将介绍 Go 语言的控制结构，如 if、switch 等，让你可以更加灵活的控制程序的执行流程。</p><hr><p><strong>《Java <strong><strong>工程师高薪训练营</strong></strong>》</strong></p><p>拉勾背书内推+硬核实战技术干货，帮助每位 Java 工程师达到阿里 P7 技术能力。<a href="https://kaiwu.lagou.com/java_architect.html?utm_source=lagouedu&amp;utm_medium=zhuanlan&amp;utm_campaign=Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5" target="_blank" rel="noreferrer">点击链接，快来领取！</a></p><p><strong>《Java 就业集训营》</strong></p><p>零基础 180 天高薪就业，<a href="https://kaiwu.lagou.com/java_basic.html?utm_source=zhuanlan%20article&amp;utm_medium=bottom&amp;utm_campaign=Go%E8%AF%AD%E8%A8%80%E4%B8%93%E6%A0%8F#/index" target="_blank" rel="noreferrer">点击链接，快来领取！</a></p>`,130),e=[o];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{g as __pageData,u as default};
