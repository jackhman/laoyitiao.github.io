import{_ as p,j as e,o as t,g as r,k as l,h as n,s,Q as o}from"./chunks/framework.a0d18f64.js";const T=JSON.parse('{"title":"第17讲：Dubbo插件核心剖析，Trace是这样跨服务传播的","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1735) 第17讲：Dubbo 插件核心剖析，Trace 是这样跨服务传播的.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1735) 第17讲：Dubbo 插件核心剖析，Trace 是这样跨服务传播的.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1735) 第17讲：Dubbo 插件核心剖析，Trace 是这样跨服务传播的.md"},E=s("h1",{id:"第17讲-dubbo插件核心剖析-trace是这样跨服务传播的",tabindex:"-1"},[n("第17讲：Dubbo插件核心剖析，Trace是这样跨服务传播的 "),s("a",{class:"header-anchor",href:"#第17讲-dubbo插件核心剖析-trace是这样跨服务传播的","aria-label":'Permalink to "第17讲：Dubbo插件核心剖析，Trace是这样跨服务传播的"'},"​")],-1),y=s("p",null,"今天我们进入 Dubbo 插件核心剖析的学习。",-1),i=s("h4",{id:"dubbo-架构剖析",tabindex:"-1"},[n("Dubbo 架构剖析 "),s("a",{class:"header-anchor",href:"#dubbo-架构剖析","aria-label":'Permalink to "Dubbo 架构剖析"'},"​")],-1),F=s("p",null,"Dubbo 是 Alibaba 开源的分布式服务框架，在前面的课时中，我们搭建的 demo-webapp 示例就是通过 Dubbo 实现远程调用 demo-provider 项目中 HelloService 服务的。通过前面 demo 示例的演示，你可能已经大概了解 Dubbo 的架构，如下图所示：",-1),u=s("p",null,"这里简单说明一下上图中各个步骤与 Demo 示例之间的关系：",-1),C=s("ol",null,[s("li",null,"demo-provider 项目所在的 Container 容器启动，初始化其中的服务。demo-provider 启动之后，作为服务的提供方（Dubbo Provider），Dubbo 框架会将其暴露的服务地址注册到注册中心（Registry，即示例中的 Zookeeper）。"),s("li",null,"demo-webapp 启动之后，作为服务的消费者（Dubbo Consumer），可以在注册中心处订阅关注的服务地址。"),s("li",null,"注册中心在收到订阅之后，会将 Dubbo Provider 的地址列表发送给 Dubbo Consumer，同时与 Dubbo Consumer 维持长连接。如果后续 Dubbo Provider 的地址列表发生变化，注册中心会实时将变更后的地址推送给 Dubbo Consumer。"),s("li",null,"在 Dubbo Consumer 从注册中心拿到 Dubbo Provider 的地址列表之后，会根据一定的负载均衡方式，从地址列表中选择一个 Dubbo Provider，与其建立网络连接，并发起 RPC 请求，调用其暴露的服务。"),s("li",null,"在 Dubbo Consumer 和 Dubbo Provider 运行的过程中，我们可以将调用时长、调用次数等监控信息定时发送到监控中心（Monitor）处进行统计，从而实现监控服务状态的能力。Monitor 在上述架构中不是必须存在的。")],-1),b=s("p",null,"了解了 Dubbo 框架顶层的运行逻辑之后，我们进一步深入了解一下 Dubbo 框架架构。Dubbo 最大的特点是按照分层的方式来进行架构的，这种方式可以使各个层之间的耦合降到最低。从服务模型的角度来看，Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费者消费服务，基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。如下图所示，图左侧蓝色部分为 Dubbo Consumer 相关接口和实现类，右边绿色部分为 Dubbo Provider 相关的接口和实现类， 位于中轴线上的为双方都用到的接口：",-1),D=o("<p>下面我将结合 Dubbo 官方文档，分别介绍一下 Dubbo 框架这 10 层的核心功能。</p><ul><li><strong>服务接口层（Service）</strong>：它与实际业务逻辑相关，根据 Provider 和 Consumer 的具体业务设计相应的接口和实现。其中接口对应 demo 示例中的 HelloService 接口，Implement 实现则对应 demo 示例中 DefaultHelloService 这个实现类。</li><li><strong>配置层（Config）</strong>：用来对外配置接口，以 ServiceConfig 和 ReferenceConfig 为中心，可以直接创建配置类，也可以通过 Spring 解析配置生成配置类。在 demo-webapp 中使用的@Reference 注解（注入 HelloService 接口实现），就是依赖 ReferenceConfig 实现的；在 demo-provider 中通过 application.yml 配置文件暴露的接口，就是依赖 ServiceConfig 实现的。</li><li><strong>服务代理层（Proxy）</strong>：它是服务接口代理，这一层会生成服务的客户端 Stub 和服务器端Skeleton。Stub 和 Skeleton 可以帮助我们屏蔽下层网络相关的操作细节，这样上层就可以像调用本地方法一样，进行远程调用了。</li><li><strong>服务注册层（Registry）</strong>：用于封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory、Registry 和 RegistryService。</li><li><strong>集群层（Cluster）</strong>：它主要用在 Consumer 这一侧，集群层可以封装多个负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster、Directory、Router 和 LoadBalance。将多个服务提供方组合为一个服务提供方，这样，就可以对 Consumer 透明，Consumer 会感觉自己只与一个 Provider 进行交互。</li><li><strong>监控层（Monitor）</strong>：用于统计 RPC 调用次数和调用时间。Dubbo 收发请求时，都会经过 Monitor 这一层，所以 Monitor 是 SkyWalking Dubbo 插件要关注的重点。</li><li><strong>远程调用层（Protocol）</strong>：这一层是对 RPC 调用的封装，封装了远程调用使用的底层协议，例如 Dubbo 协议、HTTP 协议、Thrift 协议、RMI 协议等。在 RPC 层面上，Protocol 层是核心层，只要有 Protocol + Invoker + Exporter 就可以完成非透明的 RPC 调用。</li><li><strong>信息交换层（Exchange）</strong>：这是一种封装请求-响应模式，用来完成同步与异步之间的转换。</li><li><strong>网络传输层（Transport）</strong>：它可以将底层的网路库（例如，netty、mina 等）抽象为统一接口。</li><li><strong>数据序列化层（Serialize）</strong>：包含可复用的一些工具，扩展接口为 Serialization、ObjectInput、ObjectOutput 和 ThreadPool。</li></ul><p>了解了 Dubbo 10 层架构中每一层的核心功能之后，我们通过一次请求将 Dubbo 这 10 个层次串联起来，如下图所示：</p>",3),g=o(`<p>图中底部的蓝色部分是 Consumer，上层绿色部分是 Provider。请求通过 Consumer 一侧的 Proxy 代理发出，在 Invoker 处会有 Cluster、Registry 两层参与进来，我们可以根据 Provider 地址列表以及负载均衡算法选择一个 Provider 进行调用。调用之后会经过 Filter，Dubbo 中的 Filter 可以做很多事情，例如，限流（limit）、监控（monitor），甚至可以直接创建 Mock 响应，返回给上层的 Consumer 服务。最后 Invoker 会选择合适的协议和序列化方式，通过 Client（封装了 Netty 等网络库）将请求发送出去。</p><p>在 Provider 侧接收到请求时，会通过底层的 Server（同样是依赖 Netty 等网络库实现）完成请求的接收，其中包括请求的反序列化、分配处理线程等操作。之后，在 Exporter 处选择合适的协议进行解析，经过 Filter 过滤之后交给 Invoker ，最终到达业务逻辑实现（Implement）。</p><h4 id="dubbo-filter" tabindex="-1">Dubbo Filter <a class="header-anchor" href="#dubbo-filter" aria-label="Permalink to &quot;Dubbo Filter&quot;">​</a></h4><p>很多框架和组件中都有与 Filter 类似概念，例如，Java Servlet 编程中的 Filter，还有上一课时介绍的 Tomcat 中的 Valve，都是与 Filter 类似的概念。在上个课时介绍 Dubbo 请求的处理流程时，我们在 Dubbo 中也看到了 Filter 的概念，Dubbo 官方针对 Filter 做了很多的原生支持，常见的有打印访问日志（AccessLogFilter）、限流（ActiveLimitFilter、ExecuteLimitFilter、TpsLimitFilter）、监控功能（MonitorFilter）、异常处理（ExceptionFilter）等，它们都是通过 Dubbo Filter 来实现的。Filter 也是 Dubbo 用来实现功能扩展的重要机制，我们可以通过添加自定义 Filter 来增强或改变 Dubbo 的行为。</p><p>这里简单看一下 Dubbo 中与 Filter 相关的核心逻辑。首先，构建 Dubbo Filter 链表的入口是在 ProtocolFilterWrapper.buildInvokerChain() 方法处，它将加载到的 Dubbo Filter 实例串成一个 Filter 链表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildInvokerChain</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        invoker, String key, String group) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; last </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker;  </span><span style="color:#6A737D;">// 最开始的last是指向invoker参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过SPI方式加载Filter</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Filter</span><span style="color:#E1E4E8;">&gt; filters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Filter.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">getActivateExtension</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), key, group);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历filters集合，将Filter封装成Invoker并串联成一个Filter链表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filters.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Filter filter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filters.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> last;</span></span>
<span class="line"><span style="color:#E1E4E8;">        last </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invocation </span><span style="color:#FFAB70;">invocation</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 执行当前Filter的逻辑，在Filter中会调用下一个</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// Invoker.invoke()方法，触发下一个 Filter</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> filter.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(next, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 其他方法的实现都委托给了invoker参数(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> last;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildInvokerChain</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        invoker, String key, String group) {</span></span>
<span class="line"><span style="color:#24292E;">    Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker;  </span><span style="color:#6A737D;">// 最开始的last是指向invoker参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过SPI方式加载Filter</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Filter</span><span style="color:#24292E;">&gt; filters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Filter.class)</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">getActivateExtension</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), key, group);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历filters集合，将Filter封装成Invoker并串联成一个Filter链表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> filters.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Filter filter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> filters.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last;</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 执行当前Filter的逻辑，在Filter中会调用下一个</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Invoker.invoke()方法，触发下一个 Filter</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> filter.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(next, invocation);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 其他方法的实现都委托给了invoker参数(略)</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> last;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>buildInvokeChain() 方法的调用点如下图所示，其中传入的 Invoker 对象分别对应 Consumer 和 Provider：</p>`,7),v=s("p",null,"在 getActivateExtension() 方法中，不是直接使用 SPI 方式加载 Filter 实现，中间还会有其他的过程，比如：",-1),A=s("ul",null,[s("li",null,"根据 Filter 上注解标注的 group 值确定它是工作在 Consumer 端还是 Provider 端。"),s("li",null,"根据用户配置开启或关闭某些特定的 Filter。"),s("li",null,"结合 Filter 默认优先级以及用户配置的优先级进行排序。")],-1),d=o(`<p>getActivateExtension() 方法的代码非常长，但是逻辑并不复杂，如果你感兴趣可以翻看一下具体的代码实现。</p><p>在众多 Dubbo Filter 中，我们这里重点关注 MonitorFilter 的实现，它里面的 invoke() 方法中会记录并发线程数、请求耗时以及请求结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    String remoteHost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getRemoteHost</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 记录请求的起始时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getConcurrent</span><span style="color:#E1E4E8;">(invoker, invocation).</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//增加当前并发数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Result result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(invocation); </span><span style="color:#6A737D;">// 执行后续Filter</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 收集监控信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(invoker, invocation, result, remoteHost, </span></span>
<span class="line"><span style="color:#E1E4E8;">            start, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (RpcException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(invoker, invocation, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, remoteHost, start, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 减少当前并发数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getConcurrent</span><span style="color:#E1E4E8;">(invoker, invocation).</span><span style="color:#B392F0;">decrementAndGet</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation) {</span></span>
<span class="line"><span style="color:#24292E;">    RpcContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    String remoteHost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getRemoteHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 记录请求的起始时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getConcurrent</span><span style="color:#24292E;">(invoker, invocation).</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//增加当前并发数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Result result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(invocation); </span><span style="color:#6A737D;">// 执行后续Filter</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 收集监控信息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(invoker, invocation, result, remoteHost, </span></span>
<span class="line"><span style="color:#24292E;">            start, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (RpcException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(invoker, invocation, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, remoteHost, start, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 减少当前并发数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getConcurrent</span><span style="color:#24292E;">(invoker, invocation).</span><span style="color:#6F42C1;">decrementAndGet</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>collect() 方法会将上述监控信息整理成 URL 并缓存起来，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Invoker</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> invoker, Invocation invocation, </span></span>
<span class="line"><span style="color:#E1E4E8;">        Result result, String remoteHost, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL monitorUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">getUrlParameter</span><span style="color:#E1E4E8;">(Constants.MONITOR_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Monitor monitor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> monitorFactory.</span><span style="color:#B392F0;">getMonitor</span><span style="color:#E1E4E8;">(monitorUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将请求的耗时时长、当前并发线程数以及请求结果等信息拼接到URL中</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL statisticsURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createStatisticsUrl</span><span style="color:#E1E4E8;">(invoker, invocation, </span></span>
<span class="line"><span style="color:#E1E4E8;">        result, remoteHost, start, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">    monitor.</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(statisticsURL); </span><span style="color:#6A737D;">// 在DubboMonitor中缓存该URL</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Invoker</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> invoker, Invocation invocation, </span></span>
<span class="line"><span style="color:#24292E;">        Result result, String remoteHost, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> error) {</span></span>
<span class="line"><span style="color:#24292E;">    URL monitorUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">getUrlParameter</span><span style="color:#24292E;">(Constants.MONITOR_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    Monitor monitor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monitorFactory.</span><span style="color:#6F42C1;">getMonitor</span><span style="color:#24292E;">(monitorUrl);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将请求的耗时时长、当前并发线程数以及请求结果等信息拼接到URL中</span></span>
<span class="line"><span style="color:#24292E;">    URL statisticsURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createStatisticsUrl</span><span style="color:#24292E;">(invoker, invocation, </span></span>
<span class="line"><span style="color:#24292E;">        result, remoteHost, start, error);</span></span>
<span class="line"><span style="color:#24292E;">    monitor.</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(statisticsURL); </span><span style="color:#6A737D;">// 在DubboMonitor中缓存该URL</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DubboMonitor.collect() 方法会从 URL 中提取监控信息，并将其缓存到底层的 Map（statisticsMap 字段） 中。在进行缓存之前，该方法会对于相同 URL 的监控数据进行合并。另外，DubboMonitor 还会启动一个定时任务，定时发送 statisticsMap 字段中缓存的监控数据。在发送监控数据的时候，也会将监控数据整理成 URL 地址进行发送，这里不再展开。</p><h4 id="skywalking-dubbo-插件" tabindex="-1">SkyWalking Dubbo 插件 <a class="header-anchor" href="#skywalking-dubbo-插件" aria-label="Permalink to &quot;SkyWalking Dubbo 插件&quot;">​</a></h4><p>Dubbo MonitorFilter 的相关内容介绍完之后，我们开始进行对 Skywalking Dubbo 插件的分析。在 apm-dubbo-2.7.x-plugin 插件中，skywalking-plugin.def 定义的类是 DubboInstrumentation，它继承了 ClassInstanceMethodsEnhancePluginDefine 抽象类，拦截的是 MonitorFilter.invoke() 方法。具体的增强逻辑定义在 DubboInterceptor 中，其中的 beforeMethod() 方法会判断当前处于 Consumer 端还是 Provider 端：</p><ul><li>如果处于 Consumer 端，则会将当前 TracingContext 上下文序列化成 ContextCarrier 字符串，并填充到 RpcContext 中。RpcContext 中携带的信息会在之后随 Dubbo 请求一起发送出去，相应的，还会创建 ExitSpan。</li><li>如果处于 Provider 端，则会从请求中反序列化 ContextCarrier 字符串，并填充当前 TracingContext 上下文。相应的，创建 EntrySpan。</li></ul><p>DubboInterceptor.beforeMethod() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeMethod</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] argumentsTypes, </span></span>
<span class="line"><span style="color:#E1E4E8;">            MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Invoker invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Invoker)allArguments[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// invoke()方法的两个参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    Invocation invocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Invocation)allArguments[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// RpcConterxt是Dubbo用来记录请求上下文信息的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcContext rpcContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测当前服务是Consumer端还是Provider端</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isConsumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rpcContext.</span><span style="color:#B392F0;">isConsumerSide</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    URL requestURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractSpan span;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requestURL.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requestURL.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isConsumer) { </span><span style="color:#6A737D;">// 检测是否为 Consumer</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ContextCarrier contextCarrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextCarrier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果当前是Consumer侧，则需要创建ExitSpan对象，其中EndpointName是</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 由请求URL地址、服务名以及方法名拼接而成的</span></span>
<span class="line"><span style="color:#E1E4E8;">        span </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">createExitSpan</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">generateOperationName</span><span style="color:#E1E4E8;">(requestURL, invocation), </span></span>
<span class="line"><span style="color:#E1E4E8;">               contextCarrier, host </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> port);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建CarrierItem链表，其中会根据当前Agent支持的版本号对</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ContextCarrier进行序列化，该过程在前文已经详细介绍过了</span></span>
<span class="line"><span style="color:#E1E4E8;">        CarrierItem next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextCarrier.</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (next.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将ContextCarrier字符串填充到RpcContext中，后续会随Dubbo请求一</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 起发出</span></span>
<span class="line"><span style="color:#E1E4E8;">            rpcContext.</span><span style="color:#B392F0;">getAttachments</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(next.</span><span style="color:#B392F0;">getHeadKey</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">                 next.</span><span style="color:#B392F0;">getHeadValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果当前是Provider侧，则尝试从</span></span>
<span class="line"><span style="color:#E1E4E8;">        ContextCarrier contextCarrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextCarrier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        CarrierItem next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextCarrier.</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">// 创建CarrierItem链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (next.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从RpcContext中获取ContextCarrier字符串反序列化，并填充当前上</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 面创建的空白ContextCarrier对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            next.</span><span style="color:#B392F0;">setHeadValue</span><span style="color:#E1E4E8;">(rpcContext</span></span>
<span class="line"><span style="color:#E1E4E8;">                  .</span><span style="color:#B392F0;">getAttachment</span><span style="color:#E1E4E8;">(next.</span><span style="color:#B392F0;">getHeadKey</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建 EntrySpan，这个过程在前面分析Tomcat插件的时候，详细分析过了</span></span>
<span class="line"><span style="color:#E1E4E8;">        span </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">createEntrySpan</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">generateOperationName</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            requestURL, invocation), contextCarrier);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置Tags</span></span>
<span class="line"><span style="color:#E1E4E8;">    Tags.URL.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(span, </span><span style="color:#B392F0;">generateRequestURL</span><span style="color:#E1E4E8;">(requestURL, invocation)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    span.</span><span style="color:#B392F0;">setComponent</span><span style="color:#E1E4E8;">(ComponentsDefine.DUBBO);</span><span style="color:#6A737D;">// 设置 component</span></span>
<span class="line"><span style="color:#E1E4E8;">    SpanLayer.</span><span style="color:#B392F0;">asRPCFramework</span><span style="color:#E1E4E8;">(span); </span><span style="color:#6A737D;">// 设置 SpanLayer</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeMethod</span><span style="color:#24292E;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] argumentsTypes, </span></span>
<span class="line"><span style="color:#24292E;">            MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    Invoker invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Invoker)allArguments[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// invoke()方法的两个参数</span></span>
<span class="line"><span style="color:#24292E;">    Invocation invocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Invocation)allArguments[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// RpcConterxt是Dubbo用来记录请求上下文信息的对象</span></span>
<span class="line"><span style="color:#24292E;">    RpcContext rpcContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测当前服务是Consumer端还是Provider端</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isConsumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rpcContext.</span><span style="color:#6F42C1;">isConsumerSide</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    URL requestURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    AbstractSpan span;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requestURL.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requestURL.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isConsumer) { </span><span style="color:#6A737D;">// 检测是否为 Consumer</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ContextCarrier contextCarrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextCarrier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果当前是Consumer侧，则需要创建ExitSpan对象，其中EndpointName是</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 由请求URL地址、服务名以及方法名拼接而成的</span></span>
<span class="line"><span style="color:#24292E;">        span </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">createExitSpan</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">generateOperationName</span><span style="color:#24292E;">(requestURL, invocation), </span></span>
<span class="line"><span style="color:#24292E;">               contextCarrier, host </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> port);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建CarrierItem链表，其中会根据当前Agent支持的版本号对</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ContextCarrier进行序列化，该过程在前文已经详细介绍过了</span></span>
<span class="line"><span style="color:#24292E;">        CarrierItem next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextCarrier.</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (next.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将ContextCarrier字符串填充到RpcContext中，后续会随Dubbo请求一</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 起发出</span></span>
<span class="line"><span style="color:#24292E;">            rpcContext.</span><span style="color:#6F42C1;">getAttachments</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(next.</span><span style="color:#6F42C1;">getHeadKey</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">                 next.</span><span style="color:#6F42C1;">getHeadValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果当前是Provider侧，则尝试从</span></span>
<span class="line"><span style="color:#24292E;">        ContextCarrier contextCarrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextCarrier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        CarrierItem next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextCarrier.</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">// 创建CarrierItem链表</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (next.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从RpcContext中获取ContextCarrier字符串反序列化，并填充当前上</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 面创建的空白ContextCarrier对象</span></span>
<span class="line"><span style="color:#24292E;">            next.</span><span style="color:#6F42C1;">setHeadValue</span><span style="color:#24292E;">(rpcContext</span></span>
<span class="line"><span style="color:#24292E;">                  .</span><span style="color:#6F42C1;">getAttachment</span><span style="color:#24292E;">(next.</span><span style="color:#6F42C1;">getHeadKey</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建 EntrySpan，这个过程在前面分析Tomcat插件的时候，详细分析过了</span></span>
<span class="line"><span style="color:#24292E;">        span </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">createEntrySpan</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">generateOperationName</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            requestURL, invocation), contextCarrier);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置Tags</span></span>
<span class="line"><span style="color:#24292E;">    Tags.URL.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(span, </span><span style="color:#6F42C1;">generateRequestURL</span><span style="color:#24292E;">(requestURL, invocation)); </span></span>
<span class="line"><span style="color:#24292E;">    span.</span><span style="color:#6F42C1;">setComponent</span><span style="color:#24292E;">(ComponentsDefine.DUBBO);</span><span style="color:#6A737D;">// 设置 component</span></span>
<span class="line"><span style="color:#24292E;">    SpanLayer.</span><span style="color:#6F42C1;">asRPCFramework</span><span style="color:#24292E;">(span); </span><span style="color:#6A737D;">// 设置 SpanLayer</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DubboInterceptor.afterMethod() 方法的实现就比较简单了，它会检查请求结果是否有异常，如果有异常，则通过 Log 将异常的堆栈信息记录到当前 Span 中，并在当前 Span 设置异常标志（即 errorOccurred 字段设置为 true），handleMethodException() 方法也是如此处理异常的，afterMethod() 方法最后会调用 ContextManager.stopSpan() 方法关闭当前 Span（也就是 beforeMethod() 方法中创建的 EntrySpan 或 ExitSpan）。</p><p>下图展示了 Dubbo 插件的整个处理逻辑：</p>`,13),m=s("h4",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),x=s("p",null,"本课时结合了 demo 示例，介绍了 Dubbo 框架远程调用的基本运行原理，并进一步介绍了 Dubbo 框架的 10 层结构。之后，重点介绍了 Dubbo 中 Filter 的工作原理以及 MonitorFilter 的相关实现。最后，结合上述基础知识分析了 SkyWalking Dubbo 插件的核心原理及实现。",-1);function k(h,_,R,I,S,B){const a=e("Image");return t(),r("div",null,[E,y,i,F,l(a,{alt:"image (12).png",src:"https://s0.lgstatic.com/i/image/M00/02/8A/Ciqc1F6xg_2AezlaAAlvM3IJlyE080.png"}),n(),u,C,b,l(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/02/8A/CgqCHl6xhB6Ac8xeAAUdCw2BNJU591.png"}),n(),D,l(a,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/02/8A/CgqCHl6xhHyATgFyAAcdl8xbycM744.png"}),n(),g,l(a,{alt:"使用Dubbo Filter链表的地方.png",src:"https://s0.lgstatic.com/i/image/M00/02/8A/CgqCHl6xhLWAf_qVAAD_d-gi4bI785.png"}),n(),v,A,l(a,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/02/8A/CgqCHl6xhMiAekQOAADLuNv3QQ4506.png"}),n(),d,l(a,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/02/8B/Ciqc1F6xhReAQwqkAAKW-g53Uqc000.png"}),n(),m,x])}const P=p(c,[["render",k]]);export{T as __pageData,P as default};
