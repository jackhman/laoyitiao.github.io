import{_ as s,o as a,g as n,Q as p}from"./chunks/framework.f949202b.js";const g=JSON.parse('{"title":"IDE for TypeScript ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/109-TypeScript 入门实战笔记文档/(7433) 01  如何快速搭建 TypeScript 学习开发环境？.md","filePath":"posts/frontEnd/109-TypeScript 入门实战笔记文档/(7433) 01  如何快速搭建 TypeScript 学习开发环境？.md","lastUpdated":null}'),l={name:"posts/frontEnd/109-TypeScript 入门实战笔记文档/(7433) 01  如何快速搭建 TypeScript 学习开发环境？.md"},e=p(`<p>&quot;工欲善其事，必先利其器。&quot;因此，在正式讲解 TypeScript 之前，我们有必要先掌握 TypeScript 开发环境的搭建及相关注意事项。</p><h3 id="ide-for-typescript" tabindex="-1">IDE for TypeScript <a class="header-anchor" href="#ide-for-typescript" aria-label="Permalink to &quot;IDE for TypeScript&quot;">​</a></h3><p>在搭建 TypeScript 环境之前，我们需要先认识几款适合 TypeScript 的 IDE。只有这样，在开发时我们才能根据实际情况选择合适的 IDE 进行安装，从而提升工作效率。</p><h4 id="vs-code" tabindex="-1">VS Code <a class="header-anchor" href="#vs-code" aria-label="Permalink to &quot;VS Code&quot;">​</a></h4><p>如果让我推荐一款 IDE 的话，我会首推微软的&quot;亲儿子&quot;------开源编辑器 VS Code（Visual Studio Code），因为它具备以下 4 点优势：</p><ol><li><p>在传统语法高亮、自动补全功能的基础上拓展了基于变量类型、函数定义，以及引入模块的智能补全；</p></li><li><p>支持在编辑器上直接运行和调试应用；</p></li><li><p>内置了 Git Comands，能大幅提升使用 Git 及其他 SCM 管理工具的协同开发效率；</p></li><li><p>基于 Electron 开发，具备超强的扩展性和定制性。</p></li></ol><p>下面请你<a href="https://code.visualstudio.com/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">点击这里打开官方网站，并下载安装包进行安装</a>。安装好后，我们点击启动图标即可启动 VS Code。</p><p>在 Mac 电脑上，如果你习惯使用命令行，可以将 VS Code bin 目录添加到环境变量 PATH 中，以便更方便地唤起它，如下代码所示：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> PATH</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$PATH</span><span style="color:#9ECBFF;">:/Applications/Visual Studio Code.app/Contents/Resources/app/bin&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> PATH</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$PATH</span><span style="color:#032F62;">:/Applications/Visual Studio Code.app/Contents/Resources/app/bin&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，在 Mac 命令行工具中，我们使用 Vim 编辑&quot;source ~/.bash_profile&quot;即可让配置的环境变量生效。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.bash_profile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.bash_profile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Vim 保存退出后，输入&quot;code 应用路径&quot;（如下所示），我们就可以快速打开和编辑指定路径下的应用了。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">应用路径</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">code</span><span style="color:#24292E;"> </span><span style="color:#032F62;">应用路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为 VS Code 中内置了特定版本的 TypeScript 语言服务，所以它天然支持 TypeScript 语法解析和类型检测，且这个内置的服务与手动安装的 TypeScript 完全隔离。因此，<strong>VS Code 支持在内置和手动安装版本之间动态切换语言服务，从而实现对不同版本的 TypeScript 的支持</strong>。</p><p>如果当前应用目录中安装了与内置服务不同版本的 TypeScript，我们就可以点击 VS Code 底部工具栏的版本号信息，从而实现 &quot;use VS Code&#39;s Version&quot; 和 &quot;use Workspace&#39;s Version&quot; 两者之间的随意切换。</p><p>设置当前窗口使用的 TypeScript 版本的具体操作，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/AB/Cgp9HWCV_ZaAcBb0ACrQ7VCdLNg442.gif" alt="versions.gif"><br> 可随意切换 TypeScript 版本窗口图</p><p>我们也可以在当前应用目录下的 &quot;.VS Code/settings.json&quot; 内添加命令（如下所示）配置 VS Code 默认使用应用目录下安装的 TypeScript 版本，以便提供语法解析和类型检测服务。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;typescript.tsdk&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node_modules/typescript/lib&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;typescript.tsdk&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node_modules/typescript/lib&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在实际编写 TypeScript 代码时，我们可以使用&quot;Shift + Command + M&quot;快捷键打开问题面板查看所有的类型错误信息概览，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/B4/CioPOWCV_aiANRthACtpGH2EbVM328.gif" alt="problems.gif"><br> 查看所有的类型错误信息概览图</p><p><strong>这里请注意：不同操作系统、不同 VS Code 版本的默认快捷键可能不一致，我们可以点击菜单栏中的&quot;视图（View）| 问题（Problems）&quot; 查看具体快捷键。</strong></p><p>当然，VS Code 也基于 TypeScript 语言服务提供了准确的代码自动补全功能，并显示详细的类型定义信息，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/AB/Cgp9HWCV_bqAahbtAASBXpVdoSk110.png" alt="Drawing 3.png"><br> 自动智能补全功能效果图</p><p>除了类型定义之外，TypeScript 语言服务还能将使用 JSDoc 语法编写的结构化注释信息提供给 VS Code，而这些信息将在对应的变量或者类型中通过 hover 展示出来，极大地提升了代码的可读性和开发效率，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/B4/CioPOWCV_c-AUMxiACJEAc_XkjE624.gif" alt="hover.gif"><br> JSDoc 信息提示图</p><p>我们还可以通过 &quot;Ctrl + \`&quot; 快捷键打开 VS Code 内置的命令行工具，以便在当前应用路径下执行各种操作，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_dqAK7K-AALYUhjm47c225.png" alt="Drawing 6.png"><br> VS Code 内置的命令行工具图</p><p>以上就是 VS Code 编辑器的基本介绍了，此时有没有蠢蠢欲动的感觉？</p><p>对于 VS Code 这款 IDE 而言，它比较大众化、开放化，已经能满足我们绝大多数的功能诉求。即便有些需求不能满足，我们也可以通过丰富的插件市场进行实现。</p><p>而 VS Code 唯一的不足就是需要我们自己手动选择合适的插件拓展功能，对于选择困难症的人来说简直抓狂。</p><h4 id="webstorm" tabindex="-1">WebStorm <a class="header-anchor" href="#webstorm" aria-label="Permalink to &quot;WebStorm&quot;">​</a></h4><p>另外一款值得推荐的 TypeScript 开发利器是 WebStorm，<strong>它具备开箱即用、无须做任何针对性的配置即可开发、执行和调试 TypeScript 源码这两大优势。</strong></p><p>下面请<a href="https://www.jetbrains.com/webstorm/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">点击这里打开官方网站，并下载安装包进行安装</a>。</p><p>WebStorm 也是基于标准的 TypeScript Language Service 来支持 TypeScript 的各种特性，与其他 IDE 在类型检测结果、自动完成提示上没有任何差异。</p><p>比如，它同样可以准确地进行代码自动补全，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_eqAU4ipAAUcTPGzEyU020.png" alt="Drawing 8.png"><br> 代码自动补全效果图</p><p>再比如，它同样支持 hover 提示类型及 JSDoc 注释，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_fyAO4ZRAASrHcWWn8Y686.png" alt="Drawing 10.png"><br> 提示类型及注释效果图</p><p>因为 WebStorm 毕竟是一款商业化（收钱的）软件，所以它还集成了很多强大的 TypeScript 开发功能，具体内容你<a href="https://www.jetbrains.com/zh-cn/webstorm/features/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">可点击这里查看</a>。</p><p>WebStorm 与 VS Code 相比，最大的<strong>优势在于开箱即用</strong>，这点可谓是选择困难症患者的福音。不过，它对电脑配置要求较高，对于 Mac 用户来说比较适合。</p><h4 id="playground" tabindex="-1">Playground <a class="header-anchor" href="#playground" aria-label="Permalink to &quot;Playground&quot;">​</a></h4><p>官方也提供了一个在线开发 TypeScript 的云环境------Playground。</p><p>基于它，我们无须在本地安装环境，只需要一个浏览器即可随时学习和编写 TypeScript，同时还可以方便地选择 TypeScript 版本、配置 tsconfig，并对 TypeScript 实时静态类型检测、转译输出 JavaScript 和在线执行。</p><p>而且在体验上，它也一点儿不逊色于任何本地的 IDE，对于刚刚学习 TypeScript 的我们来说，算是一个不错的选择。</p><ul><li><p><a href="https://www.typescriptlang.org/zh/play?target=1&amp;module=1&amp;ts=3.9.7#code/Q&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">点击查看中文版地址</a>（如下图所示）</p></li><li><p><a href="https://www.typescriptlang.org/play?alwaysStrict=false&amp;target=1&amp;module=1&amp;ts=3.9.7#code/Q&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">点击查看英文版地址</a></p></li></ul><p><img src="https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_gmAJ3BOAAOjOVbf4SY600.png" alt="Drawing 12.png"><br> 中文版的 TypeScript Playground 效果图</p><p>Playground 还为我们提供了分享的功能，比如我们可以把学习成果、遇到的难点通过 URL 的形式分享给他人。</p><p>不过，<strong>在实际开发业务应用中，我们还是极力推荐使用 VS Code</strong>，毕竟它是微软的&quot;亲儿子&quot;，与 TypeScript 集成得更好,拥有极其完善的插件体系，更重要的是还完全免费。</p><p>因此，接下来课程中的<strong>所有示例，我们都将使用 VS Code 进行开发和演示。</strong></p><h3 id="安装-typescript" tabindex="-1">安装 TypeScript <a class="header-anchor" href="#安装-typescript" aria-label="Permalink to &quot;安装 TypeScript&quot;">​</a></h3><p>接下来，我们继续了解如何基于 VS Code 完善 TypeScript 开发、转译环境。</p><p>因为 VS Code 只集成了 TypeScript 语言服务，不包含转译器，所以我们还需要单独安装 TypeScript。</p><p>为了方便快速完成一个入门小示例，这里我们推荐通过命令行工具使用 npm 全局安装 TypeScript。</p><p>具体操作：使用&quot;Ctrl + \`&quot;快捷键打开 VS Code 内置命令行工具，然后输入如下所示代码：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>注意：因为本课程使用示例都是基于 TypeScript 3.9.* 版本，所以建议你在尝试操作时也安装本课程使用的 TypeScript 版本（比如 3.9.2、3.9.3......3.9.7）</strong>，如下代码所示：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript@3.9.</span><span style="color:#79B8FF;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript@3.9.</span><span style="color:#005CC5;">*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>TypeScript 安装完成后，我们输入如下所示命令即可查看当前安装的 TypeScript 版本。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，我们可能会看到输出了我们安装的版本信息：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Version </span><span style="color:#79B8FF;">3.9</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Version </span><span style="color:#005CC5;">3.9</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们也可以通过安装在 Terminal 命令行中直接支持运行 TypeScript 代码（Node.js 侧代码）的 ts-node 来获得较好的开发体验。</p><p>通过 npm 全局安装 ts-node 的操作如下代码所示：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ts-node</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ts-node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你是 Mac 或者 Linux 用户，就极有可能在 npm i -g typescript 中遭遇 &quot;EACCES: permission denied&quot; 错误，此时我们可以通过以下 4 种办法进行解决：</p><ul><li><p>使用 nvm 重新安装 npm</p></li><li><p>修改 npm 默认安装目录</p></li><li><p>执行 sudo npm i -g xx</p></li><li><p>执行 sudo chown -R [user]:[user] /usr/local/lib/node_modules</p></li></ul><p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">你可以点击这里了解更多相关建议</a>。</p><p>最后，我们创建了一个 ts-course 的应用目录用来记录学习过程中的各种练习例子，然后使用 VS Code 即可打开这个应用。</p><h3 id="编写-hello-world" tabindex="-1">编写 Hello World <a class="header-anchor" href="#编写-hello-world" aria-label="Permalink to &quot;编写 Hello World&quot;">​</a></h3><p>我们可以在练习目录下输入&quot;tsc --init&quot;命令快速创建一个 tsconfig.json 文件，或者在 VS Code 应用窗口新建一个空的 tsconfg.json<strong>配置 TypeScript 的行为。</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>为了让 TypeScript 的行为更加严格、简单易懂，降低学习的心理负担，这就要求我们在 tsconfig.json 中开启如下所示设置，该设置将决定了 VS Code 语言服务如何对当前应用下的 TypeScript 代码进行类型检测。<strong>（说明：本课程中涉及的所有示例都是基于如下所示的统一配置编写。）</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* Strict Type-Checking Options */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                           </span><span style="color:#6A737D;">/* Enable all strict type-checking options. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;noImplicitAny&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                 </span><span style="color:#6A737D;">/* Raise error on expressions and declarations with an implied &#39;any&#39; type. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;strictNullChecks&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,              </span><span style="color:#6A737D;">/* Enable strict null checks. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;strictFunctionTypes&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,           </span><span style="color:#6A737D;">/* Enable strict checking of function types. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;strictBindCallApply&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,           </span><span style="color:#6A737D;">/* Enable strict &#39;bind&#39;, &#39;call&#39;, and &#39;apply&#39; methods on functions. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;strictPropertyInitialization&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">/* Enable strict checking of property initialization in classes. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;noImplicitThis&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,                </span><span style="color:#6A737D;">/* Raise error on &#39;this&#39; expressions with an implied &#39;any&#39; type. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;alwaysStrict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,                  </span><span style="color:#6A737D;">/* Parse in strict mode and emit &quot;use strict&quot; for each source file. */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* Strict Type-Checking Options */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                           </span><span style="color:#6A737D;">/* Enable all strict type-checking options. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;noImplicitAny&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                 </span><span style="color:#6A737D;">/* Raise error on expressions and declarations with an implied &#39;any&#39; type. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;strictNullChecks&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,              </span><span style="color:#6A737D;">/* Enable strict null checks. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;strictFunctionTypes&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,           </span><span style="color:#6A737D;">/* Enable strict checking of function types. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;strictBindCallApply&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,           </span><span style="color:#6A737D;">/* Enable strict &#39;bind&#39;, &#39;call&#39;, and &#39;apply&#39; methods on functions. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;strictPropertyInitialization&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">/* Enable strict checking of property initialization in classes. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;noImplicitThis&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                </span><span style="color:#6A737D;">/* Raise error on &#39;this&#39; expressions with an implied &#39;any&#39; type. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;alwaysStrict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,                  </span><span style="color:#6A737D;">/* Parse in strict mode and emit &quot;use strict&quot; for each source file. */</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>然后，我们输入如下所示代码即可新建一个 HelloWorld.ts 文件：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">word</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(word);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, World&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#E36209;">word</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(word);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, World&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在以上代码中，word 函数参数后边多出来的 &quot;: string&quot; 注解直观地告诉我们，这个变量的类型就是 string。如果你之前使用过其他强类型的语言（比如 Java），就能快速理解 TypeScript 语法。</p><p>当然，在当前目录下，我们也可以通过如下代码创建一个同名的 HelloWorld.js 文件，而这个文件中抹掉了类型注解的 TypeScript 代码。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">word</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(word);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, World&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#E36209;">word</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(word);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, World&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里我们可以看到，TypeScript 代码和我们熟悉的 JavaScript 相比，并没有明显的差异。</p><p>.ts 文件创建完成后，我们就可以使用 tsc（TypeScript Compiler） 命令将 .ts 文件转译为 .js 文件。</p><p><strong>注意：指定转译的目标文件后，tsc 将忽略当前应用路径下的 tsconfig.json 配置，因此我们需要通过显式设定如下所示的参数，让 tsc 以严格模式检测并转译 TypeScript 代码。</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HelloWorld.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--strict</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--alwaysStrict</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HelloWorld.ts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--strict</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--alwaysStrict</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同时，我们可以给 tsc 设定一个 watch 参数监听文件内容变更，实时进行类型检测和代码转译，如下代码所示：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HelloWorld.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--strict</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--alwaysStrict</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HelloWorld.ts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--strict</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--alwaysStrict</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s0.lgstatic.com/i/image6/M00/3D/AC/Cgp9HWCV_iGAYMjOAAVsTWlXVIk512.png" alt="Drawing 14.png"><br> tsc 转译监听模式效果图</p><p>我们也可以直接使用 ts-node 运行 HelloWorld.ts，如下代码所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node HelloWorld.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ts</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node HelloWorld.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行成功后，ts-node 就会输出如下所示内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hello, World</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hello, World</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当然，我们也可以唤起&quot;直接运行&quot;（本质上是先自动进行转译，再运行）TypeScript 的 ts-node 命令行来编写代码，这就跟我们在 Node.js 命令行或者浏览器中调试工具一样。</p><p>然后，我们再回车立即执行如下所示代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ts</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(word</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string) {</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">   console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(word);</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, World&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Hello, World</span></span>
<span class="line"><span style="color:#E1E4E8;">undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ts</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(word</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string) {</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(word);</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, World&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Hello, World</span></span>
<span class="line"><span style="color:#24292E;">undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>这里请注意：TypeScript 的类型注解旨在约束函数或者变量，在上面的例子中，我们就是通过约束一个示例函数来接收一个字符串类型（string）的参数。</strong></p><p>在接下来演示的例子中，我们将故意犯一个低级错误，先传递一个数字类型的参数给如下所示函数：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">word</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(word);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#E36209;">word</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(word);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后 VS Code 会标红这个错误，并在问题（Problems）面板中显示错误信息，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M00/3D/AC/Cgp9HWCV_jOAXmPNAAXOxhMuaTs987.png" alt="Drawing 16.png"><br> VS Code 问题面板显示效果图</p><p>最后，通过 tsc 转译或者 ts-node 运行这个示例，我们会看到如下所示的报错信息。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">error TS2345</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Argument of type </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;"> is not assignable to parameter of type </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">error TS2345</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Argument of type </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;"> is not assignable to parameter of type </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是因为函数 say 限定了形参的类型是 string，而我们调用 say 时传递的实参类型是 number，所以转译阶段抛出了这个错误。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>VS Code 让我们获得一种较为理想的开发体验，不必等到转译阶段，在编码时就能快速检测、抛出类型错误，极大地提升了 TypeScript 开发体验和效率。</p><p>特别需要注意的是，VS Code 默认使用自身内置的 TypeScript 语言服务版本，而在应用构建过程中，构建工具使用的却是应用路径下 node_modules/typescript 里的 TypeScript 版本。如果两个版本之间存在不兼容的特性，就会造成开发阶段和构建阶段静态类型检测结论不一致的情况，因此，我们务必将 VS Code 语言服务配置成使用当前工作区的 TypeScript 版本。</p><p><strong>插播一个思考题：如何选择和设置 VS Code 语言服务需要使用的 TypeScript 版本？欢迎你在留言区与我互动、交流。另外，如果你觉得本专栏有价值，欢迎分享给更多好友哦~</strong></p><p>到这里，TypeScript 开发环境就已经搭建好了，万事已具备。接下来我们的 TypeScript 学习开发班车就要发车了，你准备好迎接新的技能和新的挑战了吗？</p>`,106),o=[e];function t(r,c,i,y,d,E){return a(),n("div",null,o)}const b=s(l,[["render",t]]);export{g as __pageData,b as default};
