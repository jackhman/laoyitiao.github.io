import{_ as l,j as p,o,g as e,k as t,Q as r,s,h as n}from"./chunks/framework.b3d8e22e.js";const B=JSON.parse('{"title":"gRPC 介绍 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1847) 第43讲：使用 gRPC 作为服务之间的交互方式.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1847) 第43讲：使用 gRPC 作为服务之间的交互方式.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1847) 第43讲：使用 gRPC 作为服务之间的交互方式.md"},E=r(`<p>在本专栏介绍微服务架构时，我们提到了外部和内部 API 及其区别，示例应用中的微服务采用 API 优先的设计方式，并基于 OpenAPI 规范来创建 REST API。除了 REST API 之外，另外一种常见的开放 API 的格式是 gRPC，本课时将对 gRPC 进行介绍。</p><h3 id="grpc-介绍" tabindex="-1">gRPC 介绍 <a class="header-anchor" href="#grpc-介绍" aria-label="Permalink to &quot;gRPC 介绍&quot;">​</a></h3><p>在实现 API 的方式中，REST 和 gRPC 经常会被拿来进行比较，这两种方式各有长处和短处。REST 的优势在于简单易用，只需要使用 curl 这样的工具就可以与 API 交互；REST 一般使用 JSON 或 XML 这样的纯文本格式作为表达形式，使得开发和调试变得很容易。</p><p>gRPC 本质上是一种远程过程调用，默认使用 Protocol Buffers 作为传输格式，传输协议为 HTTP/2。Protocol Buffers 作为一种二进制格式，可以充分的节省传输带宽，但是相应的开发和调试会变得困难，需要首先对消息进行解码之后，才能得到原始的消息内容。与 REST 相比，gRPC 还可以充分利用 HTTP/2 的多路复用功能来提高性能。gRPC 在云原生中应用广泛，其本身也是 CNCF 中的孵化项目。</p><p>与 REST 相比，gRPC 支持 4 种不同的客户端与服务器的交互方式，如下表所示：</p><table><thead><tr><th><strong>交互方式</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>一元 RPC</td><td>客户端发送单个请求，服务器返回单个消息响应</td></tr><tr><td>服务器流 RPC</td><td>客户端发送单个请求，服务器返回一个消息流作为响应</td></tr><tr><td>客户端流 RPC</td><td>客户端发送一个消息流作为请求，服务器返回单个消息作为响应</td></tr><tr><td>双向流 RPC</td><td>客户端和服务器都可以发送消息流</td></tr></tbody></table><p>在上表的 4 种交互方式中，双向流 RPC 的实现最为复杂，因为需要根据应用的需求来确定客户端和服务器发送消息的顺序。客户端和服务器的消息发送可能是交织在一起的，除了双向流 RPC 之外的其他 3 种交互方式在实现上都相对简单。</p><p>对于云原生微服务来说，服务的内部 API 推荐使用 gRPC 来提高性能和减少带宽消耗；而对于服务的外部 API 来说，REST 仍然是目前的主流，也可以同时提供 REST 和 gRPC 两种外部 API。如果外部 API 使用 REST，而内部 API 使用 gRPC，那么我们可以使用 API 网关进行协议翻译。</p><p>虽然 gRPC 并不限制消息的内容类型，你可以使用 JSON、XML 或 Thrift 作为消息格式，从支持的成熟度来说，Protocol Buffers 仍然是最佳的选择。下面首先对 Protocol Buffers 进行介绍（以下简称为 Protobuf）。</p><h3 id="protocol-buffers" tabindex="-1">Protocol Buffers <a class="header-anchor" href="#protocol-buffers" aria-label="Permalink to &quot;Protocol Buffers&quot;">​</a></h3><p>Protobuf 是一种语言中立、平台中立和可扩展的机制，用来对结构化数据进行序列化。它由 Google 提出，目前是开源的技术。在使用 Protobuf 时，我们通过它提供的语言来描述消息的结构，然后再通过工具生成特定语言上的代码。通过生成的代码来进行消息的序列化，包括写入和读取消息。</p><p>Protobuf 的语言规范有两个版本 2 和 3，本课时介绍的是版本 3。Protobuf 中最基本的结构是消息类型，每个消息类型由多个字段组成。对于每个字段，我们需要定义它的名称、类型和编号。</p><p>消息的名称使用首字母大写的 CamelCase 格式，而字段名称则使用下划线分隔的小写格式。字段的类型有很多种，比如常见的标量类型，包括 int32、int64、float、double、bool、string 和 bytes 等。除此之外，还可以使用 enum 来定义枚举类型。</p><p>下面的代码展示了 Protobuf 中消息的定义，其中第一行的 syntax 声明了使用版本 3，message 用来声明消息类型。在枚举类型中，每个枚举项都需要指定对应的值，并且必须有一个值为 0 的枚举项。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">message TestMessage { </span></span>
<span class="line"><span style="color:#E1E4E8;">  int32 v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> v2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  string v3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  bool v4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Color</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Red</span><span style="color:#E1E4E8;"> = 0; </span></span>
<span class="line"><span style="color:#E1E4E8;">    Green </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    Blue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  Color color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">message TestMessage { </span></span>
<span class="line"><span style="color:#24292E;">  int32 v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  string v3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  bool v4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Color</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Red</span><span style="color:#24292E;"> = 0; </span></span>
<span class="line"><span style="color:#24292E;">    Green </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    Blue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  Color color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>消息中的每个字段都有一个唯一的数字编号，在消息的二进制格式中，该编号会作为字段的标识符。在消息类型被使用之后，该编号不能被修改。编号从 1 ~ 15 的字段只需要一个字节就可以对字段的编号与类型进行编码，而编号为 16 ~ 2047 的字段则需要两个字节，从节省带宽的角度来说，编号 1 ~ 15 应该分配给出现频率较高的字段。</p><p>消息类型中定义的字段，如果没有特殊声明，那么在实际的消息中最多出现一次。而对于可能出现多次的字段，则需要使用 repeated 来进行声明。</p><p>另外一种特殊的字段类型是 oneof，表示消息中包含的某些字段，在同一时间只会至多设置一个字段的值。当设置其中一个字段的值之后，其他字段的值会被自动清空。在下面代码的 DemoMessage 中，test 的类型是 oneof，这就意味着 test 中定义的 name 和 type 字段不会同时出现。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">message DemoMessage { </span></span>
<span class="line"><span style="color:#E1E4E8;">  oneof test { </span></span>
<span class="line"><span style="color:#E1E4E8;">    string name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    int32 type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  bool enabled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  repeated string values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">message DemoMessage { </span></span>
<span class="line"><span style="color:#24292E;">  oneof test { </span></span>
<span class="line"><span style="color:#24292E;">    string name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    int32 type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  bool enabled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  repeated string values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="grpc-使用" tabindex="-1">gRPC 使用 <a class="header-anchor" href="#grpc-使用" aria-label="Permalink to &quot;gRPC 使用&quot;">​</a></h3><p>gRPC 的方法也在 Protobuf 定义文件中声明。gRPC 的一个重要特征是通过代码生成工具来产生服务器和客户端的存根代码，生成的存根代码封装了 gRPC 底层的传输协议的细节。以服务器存根代码来说，开发者所要处理的只是从 Protobuf 文件中生成的 Java 对象，并不需要了解对象序列化的细节；从业务逻辑上来说，也只需要实现对方法调用的处理逻辑即可，并不需要了解传输协议的细节。下面介绍如何为地址管理服务提供 gRPC 协议的 API。</p><h4 id="protobuf-文档" tabindex="-1">Protobuf 文档 <a class="header-anchor" href="#protobuf-文档" aria-label="Permalink to &quot;Protobuf 文档&quot;">​</a></h4><p>创建 gRPC 服务的第一步是编写 Protobuf 文档，该文档用来描述 gRPC 服务所支持的方法，以及方法的参数和返回值的消息格式。下面的代码是地址管理服务 gRPC 的 Protobuf 文档的部分代码，该文档主要由 3 个部分组成，通过不同的指令来描述。下表给出了 Protobuf 文件中的常用指令。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>option</td><td>与代码生成相关的选项</td></tr><tr><td>message</td><td>不同消息类型的声明</td></tr><tr><td>service</td><td>所提供的 gRPC 服务</td></tr><tr><td>rpc</td><td>服务中包含的可供调用的方法</td></tr></tbody></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">option java_multiple_files </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">option java_package </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;io.vividcode.happyride.addressservice.grpc&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">option java_outer_classname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;AddressServiceProto&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">message Area { </span></span>
<span class="line"><span style="color:#E1E4E8;">  int32 id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  int32 level </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">message Address { </span></span>
<span class="line"><span style="color:#E1E4E8;">  string id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  repeated Area areas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">message GetAddressRequest { </span></span>
<span class="line"><span style="color:#E1E4E8;">  string address_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  int32 area_level </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">message GetAddressResponse { </span></span>
<span class="line"><span style="color:#E1E4E8;">  oneof optional_address { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Address address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">message GetAreaRequest { </span></span>
<span class="line"><span style="color:#E1E4E8;">  int64 area_code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  int32 ancestor_level </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">message GetAreaResponse { </span></span>
<span class="line"><span style="color:#E1E4E8;">  oneof optional_area { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Area area </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">message AddressSearchRequest { </span></span>
<span class="line"><span style="color:#E1E4E8;">  int64 area_code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  string query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">service AddressService { </span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">GetAddress</span><span style="color:#E1E4E8;">(GetAddressRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (GetAddressResponse); </span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">GetArea</span><span style="color:#E1E4E8;">(GetAreaRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (GetAreaResponse); </span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">Search</span><span style="color:#E1E4E8;">(AddressSearchRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (stream Address); </span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">GetAddresses</span><span style="color:#E1E4E8;">(stream GetAddressRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (stream Address); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">option java_multiple_files </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">option java_package </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;io.vividcode.happyride.addressservice.grpc&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">option java_outer_classname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;AddressServiceProto&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">message Area { </span></span>
<span class="line"><span style="color:#24292E;">  int32 id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  int32 level </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">message Address { </span></span>
<span class="line"><span style="color:#24292E;">  string id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  repeated Area areas </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">message GetAddressRequest { </span></span>
<span class="line"><span style="color:#24292E;">  string address_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  int32 area_level </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">message GetAddressResponse { </span></span>
<span class="line"><span style="color:#24292E;">  oneof optional_address { </span></span>
<span class="line"><span style="color:#24292E;">    Address address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">message GetAreaRequest { </span></span>
<span class="line"><span style="color:#24292E;">  int64 area_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  int32 ancestor_level </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">message GetAreaResponse { </span></span>
<span class="line"><span style="color:#24292E;">  oneof optional_area { </span></span>
<span class="line"><span style="color:#24292E;">    Area area </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">message AddressSearchRequest { </span></span>
<span class="line"><span style="color:#24292E;">  int64 area_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  string query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">service AddressService { </span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">GetAddress</span><span style="color:#24292E;">(GetAddressRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (GetAddressResponse); </span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">GetArea</span><span style="color:#24292E;">(GetAreaRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (GetAreaResponse); </span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">Search</span><span style="color:#24292E;">(AddressSearchRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (stream Address); </span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">GetAddresses</span><span style="color:#24292E;">(stream GetAddressRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (stream Address); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于 Java 应用来说，我们可以用下表中给出的选项来对生成的代码进行配置。</p><table><thead><tr><th><strong>选项</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>java_multiple_files</td><td>当值为 true 时，Protobuf 文件中的每个 message 类型，都会生成各自的 Java 文件；否则，每个 message 类型都会作为单个 Java 类的内部类</td></tr><tr><td>java_package</td><td>生成的 Java 代码的包名</td></tr><tr><td>java_outer_classname</td><td>生成的 Java 类的名称。当 java_multiple_files 为 false 时，该类作为包含 message 类型的外部类</td></tr></tbody></table><p>在 Protobuf 文件中的 message 类型，用来描述 gRPC 服务所提供的方法的参数和返回值的类型。一般来说，每个方法的参数和返回值都有各自独立的 message 类型声明。在方法的声明中，stream 表示流，可以出现在方法的参数或返回值的声明中，对应于不同的交互方式。在上面代码的声明中，GetAddress 和 GetArea 方法使用的是一元 RPC，而 Search 方法使用的是服务器流 RPC，GetAddresses 方法使用的是双向流 RPC。</p><h4 id="代码生成" tabindex="-1">代码生成 <a class="header-anchor" href="#代码生成" aria-label="Permalink to &quot;代码生成&quot;">​</a></h4><p>在完成了 protobuf 的声明之后，下一步是使用工具来生成相关的代码存根，生成代码时需要使用 protoc 工具及 gRPC 插件。在 Java 应用中，我们通过 Maven 插件来使用 protoc，Protobuf 文件保存在 src/main/proto 目录中。</p><p>下面的代码是相关的 Maven 配置，其中 os-maven-plugin 插件用来检测当前环境的操作系统版本，protobuf-maven-plugin 是运行 protoc 的 Maven 插件。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">extensions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">extension</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;kr.motd.maven&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;os-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.6.2&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">extension</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">extensions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.xolstice.maven.plugins&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;protobuf-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;0.6.1&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">protocArtifact</span><span style="color:#E1E4E8;">&gt;com.google.protobuf:protoc:\${protoc.version}:exe:\${os.detected.classifier}&lt;/</span><span style="color:#85E89D;">protocArtifact</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pluginId</span><span style="color:#E1E4E8;">&gt;grpc-java&lt;/</span><span style="color:#85E89D;">pluginId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pluginArtifact</span><span style="color:#E1E4E8;">&gt;io.grpc:protoc-gen-grpc-java:\${grpc.version}:exe:\${os.detected.classifier}&lt;/</span><span style="color:#85E89D;">pluginArtifact</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;compile&lt;/</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt;compile-custom&lt;/</span><span style="color:#85E89D;">goal</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;/</span><span style="color:#85E89D;">goals</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">execution</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">executions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">extensions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">extension</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;kr.motd.maven&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;os-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.6.2&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">extension</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">extensions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.xolstice.maven.plugins&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;protobuf-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;0.6.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">protocArtifact</span><span style="color:#24292E;">&gt;com.google.protobuf:protoc:\${protoc.version}:exe:\${os.detected.classifier}&lt;/</span><span style="color:#22863A;">protocArtifact</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pluginId</span><span style="color:#24292E;">&gt;grpc-java&lt;/</span><span style="color:#22863A;">pluginId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pluginArtifact</span><span style="color:#24292E;">&gt;io.grpc:protoc-gen-grpc-java:\${grpc.version}:exe:\${os.detected.classifier}&lt;/</span><span style="color:#22863A;">pluginArtifact</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;compile&lt;/</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt;compile-custom&lt;/</span><span style="color:#22863A;">goal</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">          &lt;/</span><span style="color:#22863A;">goals</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">execution</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">executions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在使用 Maven 构建之后，会在 Maven 项目的 target/generated-sources/protobuf 目录下生成 protobuf 相关的 Java 代码，其中 java 子目录中包含的是消息类型对应的 Java 代码，而 grpc-java 目录下面包含的是 gRPC 服务的代码。下面的代码给出了生成文件的目录结构。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">. </span></span>
<span class="line"><span style="color:#E1E4E8;">├── grpc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">java </span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── io </span></span>
<span class="line"><span style="color:#E1E4E8;">│       └── vividcode </span></span>
<span class="line"><span style="color:#E1E4E8;">│           └── happyride </span></span>
<span class="line"><span style="color:#E1E4E8;">│               └── addressservice </span></span>
<span class="line"><span style="color:#E1E4E8;">│                   └── grpc </span></span>
<span class="line"><span style="color:#E1E4E8;">│                       └── AddressServiceGrpc.java </span></span>
<span class="line"><span style="color:#E1E4E8;">└── java </span></span>
<span class="line"><span style="color:#E1E4E8;">    └── io </span></span>
<span class="line"><span style="color:#E1E4E8;">        └── vividcode </span></span>
<span class="line"><span style="color:#E1E4E8;">            └── happyride </span></span>
<span class="line"><span style="color:#E1E4E8;">                └── addressservice </span></span>
<span class="line"><span style="color:#E1E4E8;">                    └── grpc </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── Address.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── AddressOrBuilder.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── AddressSearchRequest.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── AddressSearchRequestOrBuilder.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── AddressServiceProto.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── Area.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── AreaOrBuilder.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── GetAddressRequest.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── GetAddressRequestOrBuilder.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── GetAddressResponse.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── GetAddressResponseOrBuilder.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── GetAreaRequest.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── GetAreaRequestOrBuilder.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        ├── GetAreaResponse.java </span></span>
<span class="line"><span style="color:#E1E4E8;">                        └── GetAreaResponseOrBuilder.java</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">. </span></span>
<span class="line"><span style="color:#24292E;">├── grpc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">java </span></span>
<span class="line"><span style="color:#24292E;">│   └── io </span></span>
<span class="line"><span style="color:#24292E;">│       └── vividcode </span></span>
<span class="line"><span style="color:#24292E;">│           └── happyride </span></span>
<span class="line"><span style="color:#24292E;">│               └── addressservice </span></span>
<span class="line"><span style="color:#24292E;">│                   └── grpc </span></span>
<span class="line"><span style="color:#24292E;">│                       └── AddressServiceGrpc.java </span></span>
<span class="line"><span style="color:#24292E;">└── java </span></span>
<span class="line"><span style="color:#24292E;">    └── io </span></span>
<span class="line"><span style="color:#24292E;">        └── vividcode </span></span>
<span class="line"><span style="color:#24292E;">            └── happyride </span></span>
<span class="line"><span style="color:#24292E;">                └── addressservice </span></span>
<span class="line"><span style="color:#24292E;">                    └── grpc </span></span>
<span class="line"><span style="color:#24292E;">                        ├── Address.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── AddressOrBuilder.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── AddressSearchRequest.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── AddressSearchRequestOrBuilder.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── AddressServiceProto.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── Area.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── AreaOrBuilder.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── GetAddressRequest.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── GetAddressRequestOrBuilder.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── GetAddressResponse.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── GetAddressResponseOrBuilder.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── GetAreaRequest.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── GetAreaRequestOrBuilder.java </span></span>
<span class="line"><span style="color:#24292E;">                        ├── GetAreaResponse.java </span></span>
<span class="line"><span style="color:#24292E;">                        └── GetAreaResponseOrBuilder.java</span></span></code></pre></div><p>生成的 AddressServiceGrpc 类中包含了 gRPC 服务器和客户端的代码，其中 AddressServiceImplBase 是服务端的基本实现类，其中的每个方法都对应 Protobuf 文件中服务 AddressService 中声明的方法。在服务端实现中，只需要继承 AddressServiceImplBase 类，并覆写这些方法即可。</p><h4 id="服务端实现" tabindex="-1">服务端实现 <a class="header-anchor" href="#服务端实现" aria-label="Permalink to &quot;服务端实现&quot;">​</a></h4><p>下面的代码给出了具体服务端实现类 AddressGrpcService 的部分代码。在 getAddress 方法中，方法的参数类型 GetAddressRequest 对应于 protobuf 中同名方法的参数的消息类型，而 StreamObserver 对象用来产生作为响应的消息。</p><p>StreamObserver 接口中的方法与反应式编程中的 Observer 是相同的，具体的方法如下表所示。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>onNext(V value)</td><td>产生一个消息</td></tr><tr><td>onError(Throwable t)</td><td>产生一个错误并终止流</td></tr><tr><td>onCompleted()</td><td>正常终止流</td></tr></tbody></table><p>Protobuf 中的每个消息都使用构建器模式来创建。下面代码中的 buildAddress 方法用来把 AddressVO 对象转换成 protobuf 中的 Address 类型的消息。而对于产生的消息，可通过 StreamObserver 对象的 onNext 方法来发送，等全部消息发送完成之后，使用 onCompleted 来结束流。在运行时，getAddress 方法最多只调用 onNext 方法一次，而 search 方法则可能多次调用 onNext 方法来产生多条消息。虽然 getAddress 方法使用的是一元 RPC 的交互模式，但是在实现中，仍然以流的形式来表示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GRpcService</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressGrpcService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressServiceImplBase</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  AddressService addressService; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  AreaService areaService; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(GetAddressRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      StreamObserver&lt;</span><span style="color:#F97583;">GetAddressResponse</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">responseObserver</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    GetAddressResponse.Builder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GetAddressResponse.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressService </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getAddressId</span><span style="color:#E1E4E8;">(), request.</span><span style="color:#B392F0;">getAreaLevel</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">(address </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">setAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">buildAddress</span><span style="color:#E1E4E8;">(address))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    responseObserver.</span><span style="color:#B392F0;">onNext</span><span style="color:#E1E4E8;">(builder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    responseObserver.</span><span style="color:#B392F0;">onCompleted</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(AddressSearchRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      StreamObserver&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">responseObserver</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressService.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getAreaCode</span><span style="color:#E1E4E8;">(), request.</span><span style="color:#B392F0;">getQuery</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            address </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> responseObserver.</span><span style="color:#B392F0;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">buildAddress</span><span style="color:#E1E4E8;">(address))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    responseObserver.</span><span style="color:#B392F0;">onCompleted</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Address </span><span style="color:#B392F0;">buildAddress</span><span style="color:#E1E4E8;">(AddressVO </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Address.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setAreaId</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getAreaId</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setAddressLine</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getAddressLine</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setLat</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getLat</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toPlainString</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setLng</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getLng</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toPlainString</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">addAllAreas</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getAreas</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">buildArea).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">())) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GRpcService</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressGrpcService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressServiceImplBase</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  AddressService addressService; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  AreaService areaService; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(GetAddressRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      StreamObserver&lt;</span><span style="color:#D73A49;">GetAddressResponse</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">responseObserver</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    GetAddressResponse.Builder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GetAddressResponse.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressService </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(request.</span><span style="color:#6F42C1;">getAddressId</span><span style="color:#24292E;">(), request.</span><span style="color:#6F42C1;">getAreaLevel</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(address </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">setAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">buildAddress</span><span style="color:#24292E;">(address))); </span></span>
<span class="line"><span style="color:#24292E;">    responseObserver.</span><span style="color:#6F42C1;">onNext</span><span style="color:#24292E;">(builder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    responseObserver.</span><span style="color:#6F42C1;">onCompleted</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(AddressSearchRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      StreamObserver&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">responseObserver</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressService.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(request.</span><span style="color:#6F42C1;">getAreaCode</span><span style="color:#24292E;">(), request.</span><span style="color:#6F42C1;">getQuery</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            address </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> responseObserver.</span><span style="color:#6F42C1;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">buildAddress</span><span style="color:#24292E;">(address))); </span></span>
<span class="line"><span style="color:#24292E;">    responseObserver.</span><span style="color:#6F42C1;">onCompleted</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Address </span><span style="color:#6F42C1;">buildAddress</span><span style="color:#24292E;">(AddressVO </span><span style="color:#E36209;">address</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Address.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setAreaId</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getAreaId</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setAddressLine</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getAddressLine</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setLat</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getLat</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toPlainString</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setLng</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getLng</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toPlainString</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">addAllAreas</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getAreas</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">buildArea).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">())) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面的代码是使用双向流 RPC 的 getAddresses 方法，该方法的返回值同样是一个 StreamObserver 对象，表示客户端请求的流。当作为返回值 StreamObserver 对象的 onNext 方法被调用时，说明客户端发送了一个新的消息，对于这个消息的处理方式是往 responseObserver 表示的流中写入作为响应的 Address 类型的消息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> StreamObserver</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">GetAddressRequest</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    StreamObserver</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Address</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> responseObserver) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> StreamObserver&lt;</span><span style="color:#F97583;">GetAddressRequest</span><span style="color:#E1E4E8;">&gt;() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onNext</span><span style="color:#E1E4E8;">(GetAddressRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      AddressGrpcService.this.addressService </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getAddressId</span><span style="color:#E1E4E8;">(), request.</span><span style="color:#B392F0;">getAreaLevel</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">              address </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> responseObserver.</span><span style="color:#B392F0;">onNext</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">                  AddressGrpcService.this.</span><span style="color:#B392F0;">buildAddress</span><span style="color:#E1E4E8;">(address))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onError</span><span style="color:#E1E4E8;">(Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      AddressGrpcService.LOGGER.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error&quot;</span><span style="color:#E1E4E8;">, t); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onCompleted</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">      responseObserver.</span><span style="color:#B392F0;">onCompleted</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  }; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> StreamObserver</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">GetAddressRequest</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    StreamObserver</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Address</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> responseObserver) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> StreamObserver&lt;</span><span style="color:#D73A49;">GetAddressRequest</span><span style="color:#24292E;">&gt;() { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onNext</span><span style="color:#24292E;">(GetAddressRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      AddressGrpcService.this.addressService </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(request.</span><span style="color:#6F42C1;">getAddressId</span><span style="color:#24292E;">(), request.</span><span style="color:#6F42C1;">getAreaLevel</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">              address </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> responseObserver.</span><span style="color:#6F42C1;">onNext</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">                  AddressGrpcService.this.</span><span style="color:#6F42C1;">buildAddress</span><span style="color:#24292E;">(address))); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onError</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      AddressGrpcService.LOGGER.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error&quot;</span><span style="color:#24292E;">, t); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onCompleted</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">      responseObserver.</span><span style="color:#6F42C1;">onCompleted</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  }; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AddressGrpcService 类上的注解 @GRpcService 来自 <a href="https://github.com/LogNet/grpc-spring-boot-starter" target="_blank" rel="noreferrer">grpc-spring-boot-starter 库</a>，用来在 Spring Boot 中集成 gRPC 服务。该第三方库可以自动启动 gRPC 服务器，免去了烦琐的配置。gRPC 服务器默认在 6565 端口启动，可以通过配置项 grpc.port 来修改。</p><h4 id="客户端实现" tabindex="-1">客户端实现 <a class="header-anchor" href="#客户端实现" aria-label="Permalink to &quot;客户端实现&quot;">​</a></h4><p>我们可以用生成的 gRPC 服务的客户端来调用服务。生成的代码中包含了 3 种不同类型的客户端，如下表所示：</p><table><thead><tr><th><strong>客户端</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddressServiceStub</td><td>使用 StreamObserver 的异步调用客户端</td></tr><tr><td>AddressServiceBlockingStub</td><td>执行同步调用的阻塞客户端</td></tr><tr><td>AddressServiceFutureStub</td><td>使用 Guava 中 ListenableFuture 的客户端</td></tr></tbody></table><p>在这 3 种客户端中，同步调用的客户端使用最简单，在创建客户端时，需要提供 Channel 对象。在下面的代码中，ManagedChannelBuilder 类用来创建连接到本机的 6565 端口的 Channel 对象，而 AddressServiceGrpc 类的 newBlockingStub 方法用来创建阻塞客户端的 AddressServiceBlockingStub 对象，该对象中方法的返回值是实际响应消息类型的对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Channel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ManagedChannelBuilder.</span><span style="color:#B392F0;">forAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6565</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">usePlaintext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">AddressServiceBlockingStub blockingStub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AddressServiceGrpc </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">newBlockingStub</span><span style="color:#E1E4E8;">(channel); </span></span>
<span class="line"><span style="color:#E1E4E8;">Iterator&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> blockingStub </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(AddressSearchRequest.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setAreaCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">110101001015L</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;王府井社区居委会&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">forEachRemaining</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ManagedChannelBuilder.</span><span style="color:#6F42C1;">forAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6565</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">usePlaintext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">AddressServiceBlockingStub blockingStub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AddressServiceGrpc </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">newBlockingStub</span><span style="color:#24292E;">(channel); </span></span>
<span class="line"><span style="color:#24292E;">Iterator&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> blockingStub </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(AddressSearchRequest.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setAreaCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">110101001015L</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王府井社区居委会&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">forEachRemaining</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>下面的代码给出了异步非阻塞客户端的使用方式。通过 AddressServiceGrpc 类的 newStub 方法可以创建出作为客户端的 AddressServiceStub 对象。在调用 getAddresses 方法时，返回的 StreamObserver<code>&lt;GetAddressRequest&gt;</code> 对象用来发送请求消息，而作为参数的 StreamObserver<code>&lt;Address&gt;</code> 对象则用来处理服务器返回的消息。CountDownLatch 对象的作用是等待响应流的结束。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Channel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ManagedChannelBuilder.</span><span style="color:#B392F0;">forAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6565</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">usePlaintext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">AddressServiceStub asyncStub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AddressServiceGrpc.</span><span style="color:#B392F0;">newStub</span><span style="color:#E1E4E8;">(channel); </span></span>
<span class="line"><span style="color:#E1E4E8;">CountDownLatch finishLatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountDownLatch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">StreamObserver&lt;</span><span style="color:#F97583;">GetAddressRequest</span><span style="color:#E1E4E8;">&gt; requestObserver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> asyncStub </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> StreamObserver&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt;() { </span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onNext</span><span style="color:#E1E4E8;">(Address </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(value); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onError</span><span style="color:#E1E4E8;">(Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        t.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        finishLatch.</span><span style="color:#B392F0;">countDown</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onCompleted</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Completed&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        finishLatch.</span><span style="color:#B392F0;">countDown</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    }); </span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  requestObserver.</span><span style="color:#B392F0;">onNext</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      GetAddressRequest.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">setAddressId</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;962fddbc-54cc-4758-bf01-56e2833c6443&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">setAreaLevel</span><span style="color:#E1E4E8;">(i).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">requestObserver.</span><span style="color:#B392F0;">onCompleted</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">finishLatch.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, TimeUnit.MINUTES);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ManagedChannelBuilder.</span><span style="color:#6F42C1;">forAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6565</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">usePlaintext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">AddressServiceStub asyncStub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AddressServiceGrpc.</span><span style="color:#6F42C1;">newStub</span><span style="color:#24292E;">(channel); </span></span>
<span class="line"><span style="color:#24292E;">CountDownLatch finishLatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountDownLatch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">StreamObserver&lt;</span><span style="color:#D73A49;">GetAddressRequest</span><span style="color:#24292E;">&gt; requestObserver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> asyncStub </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> StreamObserver&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt;() { </span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onNext</span><span style="color:#24292E;">(Address </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(value); </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onError</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        t.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        finishLatch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onCompleted</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Completed&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        finishLatch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    }); </span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  requestObserver.</span><span style="color:#6F42C1;">onNext</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      GetAddressRequest.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">setAddressId</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;962fddbc-54cc-4758-bf01-56e2833c6443&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">setAreaLevel</span><span style="color:#24292E;">(i).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">requestObserver.</span><span style="color:#6F42C1;">onCompleted</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">finishLatch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, TimeUnit.MINUTES);</span></span></code></pre></div><p>在本地开发和调试中，直接使用 Java 客户端不太方便，推荐使用单独的 gRPC 工具，如 <a href="https://github.com/uw-labs/bloomrpc" target="_blank" rel="noreferrer">BloomRPC</a>。BloomRPC 可以导入 Protobuf 文件并调用 gRPC 服务，如下图所示。</p>`,52),y=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),i=s("p",null,"相对于 REST API，gRPC 提供了更灵活的交互方式、更好的性能和更少的带宽占用，适用于云原生应用中微服务之间的交互。通过本课时的学习，你可以对 gRPC 和 Protocol Buffers 有基本的了解，以及如何在应用中创建 gRPC 服务，并通过客户端来调用 gRPC 服务。",-1),d=s("p",null,[n("最后呢，成老师邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我们最关注的点。"),s("a",{href:"https://wj.qq.com/s2/6902680/3fb2/",target:"_blank",rel:"noreferrer"},"点击链接，即可参与课程评价"),n("。")],-1);function u(g,F,A,v,C,b){const a=p("Image");return o(),e("div",null,[E,t(a,{alt:"bloomrpc.png",src:"https://s0.lgstatic.com/i/image/M00/40/D5/Ciqc1F8zqeKARFX7AAJaspyUGxw904.png"}),y,i,d])}const m=l(c,[["render",u]]);export{B as __pageData,m as default};
