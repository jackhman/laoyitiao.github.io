import{_ as l,j as e,o as t,g as c,k as p,h as a,s,Q as o}from"./chunks/framework.e0c66c3f.js";const j=JSON.parse('{"title":"自动化检测 SQL 注入 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Web 安全攻防之道_文档/(5976) 08  SQL 注入：漏洞的检测与防御.md","filePath":"posts/backEnd/Web 安全攻防之道_文档/(5976) 08  SQL 注入：漏洞的检测与防御.md","lastUpdated":null}'),r={name:"posts/backEnd/Web 安全攻防之道_文档/(5976) 08  SQL 注入：漏洞的检测与防御.md"},y=s("p",null,"上一讲我介绍了 SQL 注入中的二次注入，二次注入是由于第一次带入参数时做了安全转义，但开发人员在二次使用时并没有做转义，导致第二次使用时产生了注入。前两讲中我介绍了 SQL 注入的方法，这一讲我会讲接如何检测和防御 SQL 注入。",-1),E=s("h3",{id:"自动化检测-sql-注入",tabindex:"-1"},[a("自动化检测 SQL 注入 "),s("a",{class:"header-anchor",href:"#自动化检测-sql-注入","aria-label":'Permalink to "自动化检测 SQL 注入"'},"​")],-1),i=s("p",null,"如果开发者想尽早地发现 SQL 注入的问题，就需要主动对自己写的程序做一些安全检测。现在，让我来带你了解如何自动化地检测 SQL 注入漏洞。",-1),A=s("p",null,"目前检测 Web 漏洞的方式共有 3 种：SAST（静态应用安全测试）、DAST（动态应用安全测试）和 IAST（交互式应用安全测试）。",-1),d=s("h4",{id:"sast-静态应用安全测试",tabindex:"-1"},[a("SAST（静态应用安全测试） "),s("a",{class:"header-anchor",href:"#sast-静态应用安全测试","aria-label":'Permalink to "SAST（静态应用安全测试）"'},"​")],-1),F=s("p",null,"SAST（Static Application Security Testing，静态应用程序安全测试）是通过分应用程序源代码以提早发现安全漏洞，也包括二进制文件的静态逆向分析。在产品形式上，主要体现为代码审计系统等。",-1),S=s("p",null,"SAST 的工作流程如下图所示：",-1),_=s("p",null,"图 1：SAST 工作流程",-1),u=s("p",null,"PHP 代码的商业 SAST 产品有 RIPS、CheckMax 等，其中以 RIPS 审计能力最强，我还没见过比它更优秀的 PHP 代码审计产品。RIPS 早期有开源的社区版，后来走商业化路线，今年已经被 SonarSource 收购，联合其他语言的代码审计功能打包出售。",-1),h=s("p",null,"图 2：RIPS",-1),g=s("p",null,"SAST 分析比较全面，漏洞发现率高，哪怕是当前未能执行到的代码，也可能被发现到漏洞，但是对于它最大的挑战是如何降低误报率。",-1),C=s("p",null,"代码审计本质上是在误报率与发现率之间相互协调，直到在可接受的范围内找到一个平衡的过程。如果发现率很高，但其中包含过多的误报，告警量多到无法运营的程度，那也等同于没发现。就像外面反馈一个网站存在漏洞，在排查代码审计系统之前的审计结果时，发现有过告警，但由于同一时期的告警量太多导致无法及时跟进，发现了却未修复，就和没发现一样。",-1),m=s("p",null,"现在企业基本采用多种方式结合来测试，而不是单一地采用 SAST 方法。",-1),P=s("h4",{id:"dast-动态应用安全测试",tabindex:"-1"},[a("DAST（动态应用安全测试） "),s("a",{class:"header-anchor",href:"#dast-动态应用安全测试","aria-label":'Permalink to "DAST（动态应用安全测试）"'},"​")],-1),D=s("p",null,"DAST（Dynamic Application Security Testing，动态应用程序安全测试）是对应用程序进行黑盒分析，通常在测试或运行阶段分析应用程序的动态运行状态，通过模拟黑客行为对应用程序进行动态攻击，分析应用程序的反应，从而确定是否存在漏洞。",-1),T=s("p",null,"DAST 的工作流程如下图所示：",-1),b=s("p",null,"图 3：DAST 工作流程",-1),q=s("p",null,'DAST 在产品形式上主要体现为漏洞扫描器，著名的商业产品有 Acunetix Web Vulnerability Scanner（AWVS，不过近来的版本误报很多）、AppScan，还有国内长亭在 GitHub 上放出的 xray，这些都是许多"白帽子"喜欢用的扫描器。',-1),L=s("p",null,"图 4：AWVS",-1),R=s("p",null,"DAST 通过动态发送 payload 来测试漏洞，所以准确率相对较高，而且检测出来后就直接有现成的 PoC（Proof of Concept，概念验证）可以验证。但如果有些代码未执行，就无法发现。因此，跟 SAST 结合使用是最好的方式。",-1),Q=s("h4",{id:"iast-交互式应用安全测试",tabindex:"-1"},[a("IAST（交互式应用安全测试） "),s("a",{class:"header-anchor",href:"#iast-交互式应用安全测试","aria-label":'Permalink to "IAST（交互式应用安全测试）"'},"​")],-1),B=s("p",null,"IAST（Interactive Application Security Testing，交互式应用安全测试）是近几年兴起的一种应用安全测试新技术，曾被 Gartner 咨询公司列为网络安全领域的 Top 10 技术之一。IAST 融合了 DAST 和 SAST 的优势，漏洞检出率极高、误报率极低，同时可以定位到 API 接口和代码片段。",-1),I=s("p",null,"IAST 主要有代理和插桩两种模式，其他的 VPN 或流量镜像都是类似代理的流量采集方式。IAST 代理与插桩的工作流程如下图所示：",-1),k=s("p",null,"图 5：IAST 工作流程",-1),W=s("p",null,"以往的 DAST 漏洞扫描时，如果爬虫不到位、URL 收集不全就无法扫描到，IAST 的流量采集可以解决此类问题。同时，IAST 会借助 Hook 收集应用执行信息，比如 SQL 语句的执行函数。通过检查真正执行的语句，判断其是否包含攻击性或专用测试标记的 payload，IAST 可以非常精确地识别出漏洞。",-1),$=s("p",null,"比较著名的 IAST 产品有百度的 OpenRASP-IAST，它是在 OpenRASP 的基础上引入了 DAST 扫描器，组合成完整的 IAST。除此之外，AWVS AcuSensor 和 AppScan 也都引入 IAST 技术，支持在服务端部署 Agent 去监控程序并采集信息，再提供给扫描器进行进一步的扫描。",-1),O=o("",21),v=o("",12);function f(w,x,M,V,H,N){const n=e("Image");return t(),c("div",null,[y,E,i,A,d,F,S,p(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/04/D0/CgpVE1_2g2eAVkuXAADcNFg9Xjo146.png"}),a(),_,u,p(n,{alt:"Lark20210107-153834.png",src:"https://s0.lgstatic.com/i/image/M00/8C/F3/Ciqc1F_2urSAHFe7AALn84A3LL8747.png"}),a(),h,g,C,m,P,D,T,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/8C/F6/CgqCHl_2g4SAOI1bAACWgAuig8I025.png"}),a(),b,q,p(n,{alt:"Lark20210107-153841.png",src:"https://s0.lgstatic.com/i/image/M00/8C/FE/CgqCHl_2ur-AW1scAAIEHDEbJBQ515.png"}),a(),L,R,Q,B,I,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/8C/EB/Ciqc1F_2g5aADYlMAAGfNgZdQok921.png"}),a(),k,W,$,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/8C/F6/CgqCHl_2g6CANgygAAFhDNPUKuI402.png"}),a(),O,p(n,{alt:"Lark20210107-153849.png",src:"https://s0.lgstatic.com/i/image2/M01/04/D8/CgpVE1_2utKAeaawAAJVqoN5A3U639.png"}),a(),v,p(n,{alt:"Lark20210107-154027.png",src:"https://s0.lgstatic.com/i/image/M00/8C/FE/CgqCHl_2uveAeWuPAAU0njcpiX4888.png"})])}const G=l(r,[["render",f]]);export{j as __pageData,G as default};
