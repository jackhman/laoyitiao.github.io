import{_ as o,j as e,o as t,g as c,k as a,h as l,Q as n,s as p}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"API 网关的作用 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6754) 09  服务门户：Spring Cloud Gateway 如何把好微服务的大门.md","filePath":"posts/backEnd/SpringCloud Alibaba 实战_文档/(6754) 09  服务门户：Spring Cloud Gateway 如何把好微服务的大门.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/SpringCloud Alibaba 实战_文档/(6754) 09  服务门户：Spring Cloud Gateway 如何把好微服务的大门.md"},y=n('<p>上一讲我们学习了 Dubbo 是如何与 Nacos 协同作业。通过对比 RESTful 与 RPC，我们介绍了两种通信方式的区别，再通过实例讲解如何将 Dubbo 与 Nacos 进行整合。但你是否发现无论是基于 OpenFeign 的 RESTful 通信，还是基于 Dubbo 的 RPC 通信，它们都在强调的是微服务间的信息传递，属于微服务架构内部的事情。而对于用户端从外侧访问微服务如何有效管理，微服务又是如何将接口暴露给用户呢？这就需要通过 API 网关实现需求了，本讲咱们就针对 API 网关学习三方面知识：</p><ol><li><p>介绍 API 网关的用途与产品；</p></li><li><p>讲解 Spring Cloud Gateway 的配置技巧；</p></li><li><p>讲解 Gateway执行原理与自定义过滤器（Filter）。</p></li></ol><h3 id="api-网关的作用" tabindex="-1">API 网关的作用 <a class="header-anchor" href="#api-网关的作用" aria-label="Permalink to &quot;API 网关的作用&quot;">​</a></h3><p>如下图所示，对于整个微服务来说如果将每一个微服务的接口直接暴露给用户是错误的做法，这里主要体现出三个问题：</p><ul><li><p>服务将所有 API 接口对外直接暴露给用户端，这本身就是不安全和不可控的，用户可能越权访问不属于它的功能，例如普通的用户去访问管理员的高级功能。</p></li><li><p>后台服务可能采用不同的通信方式，如服务 A 采用 RESTful 通信，服务 B 采用 RPC 通信，不同的接入方式让用户端接入困难。尤其是 App 端接入 RPC 过程更为复杂。</p></li><li><p>在服务访问前很难做到统一的前置处理，如服务访问前需要对用户进行鉴权，这就必须将鉴权代码分散到每个服务模块中，随着服务数量增加代码将难以维护。</p></li></ul>',5),E=p("p",null,"用户端直接访问微服务",-1),i=p("p",null,"为了解决以上问题，API 网关应运而生，加入网关后应用架构变为下图所示。",-1),d=n('<p>引入 API 网关后的微服务架构</p><p>当引入 API 网关后，在用户端与微服务之间建立了一道屏障，通过 API 网关为微服务访问提供了统一的访问入口，所有用户端的请求被 API 网关拦截并在此基础上可以实现额外功能，例如：</p><ul><li><p>针对所有请求进行统一鉴权、熔断、限流、日志等前置处理，让微服务专注自己的业务。</p></li><li><p>统一调用风格，通常 API 网关对外提供 RESTful 风格 URL 接口。用户传入请求后，由 API 网关负责转换为后端服务需要的 RESTful、RPC、WebService 等方式，这样便大幅度简化用户的接入难度。</p></li><li><p>更好的安全性，在通过 API 网关鉴权后，可以控制不同角色用户访问后端服务的权利，实现了服务更细粒度的权限控制。</p></li><li><p>API 网关是用户端访问 API 的唯一入口，从用户的角度来说只需关注 API 网关暴露哪些接口，至于后端服务的处理细节，用户是不需要知道的。从这方面讲，微服务架构通过引入 API 网关，将用户端与微服务的具体实现进行了解耦。</p></li></ul><p>以上便是 API 网关的作用，那 API 网关有哪些产品呢？</p><h4 id="api-网关主流产品" tabindex="-1">API 网关主流产品 <a class="header-anchor" href="#api-网关主流产品" aria-label="Permalink to &quot;API 网关主流产品&quot;">​</a></h4><p>API 网关是微服务架构中必要的组件，具体的实现产品在软件市场上层出不穷，下面我列举三款在国内外主流的开源产品。</p><h4 id="openresty" tabindex="-1">OpenResty <a class="header-anchor" href="#openresty" aria-label="Permalink to &quot;OpenResty&quot;">​</a></h4><p>OpenResty 是一个强大的 Web 应用服务器，Web 开发人员可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块,更主要的是在性能方面，OpenResty可以快速构造出足以胜任 10K 以上并发连接响应的超高性能 Web 应用系统。360、UPYUN、阿里云、新浪、腾讯网、去哪儿网、酷狗音乐等都是 OpenResty 的深度用户。</p><p>OpenResty 因为性能强大在微服务架构早期深得架构师的喜爱。但 OpenResty 是一款独立的产品，与主流的注册中心存在一定兼容问题，需要架构师独立实现其服务注册、发现的功能。后来 Spring Cloud 官方极力推崇自家封装的 Zuul 或者 Spring Cloud Gateway，渐渐 OpenResty 便淡出了我们的视野。但不能否认，OpenResty 仍是一款优秀的 API 网关产品。</p><h4 id="spring-cloud-zuul" tabindex="-1">Spring Cloud Zuul <a class="header-anchor" href="#spring-cloud-zuul" aria-label="Permalink to &quot;Spring Cloud Zuul&quot;">​</a></h4><p>Zuul 是 Netflix 开源的微服务网关，它的主要职责是对用户请求进行路由转发与过滤。早期Spring Cloud 与 Netfilx 合作，使用 Zuul 作为微服务架构的首选网关产品。Zuul 是基于 J2EE Servlet 实现路由转发，网络通信采用同步方式，使用简单部署方便。经过 Spring Cloud 对 Zuul 的封装，Spring Cloud Zuul 应运而生。Spring Cloud Zuul 在原有 Zuul 的基础上，增加对注册中心的支持，同时在基于 Spring Boot Starter 机制基础上，可以在极短的时间内完成 API 网关的开发部署任务。</p>',11),g=n('<p>Zuul 基于 Servlet 的请求响应处理过程</p><p>但好景不长，后来 Netflix 内部产生分歧，Netflix 官方宣布 Zuul 停止维护，这让 Spring 机构也必须转型。于是 Spring Cloud 团队决定开发自己的第二代 API 网关产品：Spring Cloud Gateway。</p><h4 id="spring-cloud-gateway" tabindex="-1">Spring Cloud Gateway <a class="header-anchor" href="#spring-cloud-gateway" aria-label="Permalink to &quot;Spring Cloud Gateway&quot;">​</a></h4><p>与 Zuul 是&quot;别人家的孩子&quot;不同，Spring Cloud Gateway 是 Spring 自己开发的新一代 API 网关产品。它基于 NIO 异步处理，摒弃了 Zuul 基于 Servlet 同步通信的设计，因此拥有更好的性能。同时，Spring Cloud Gateway 对配置进行了进一步精简，比 Zuul 更加简单实用。</p><p>以下是 Spring Cloud Gateway 的关键特征：</p><ul><li><p>基于 JDK 8+ 开发；</p></li><li><p>基于 Spring Framework 5 + Project Reactor + Spring Boot 2.0 构建；</p></li><li><p>支持动态路由，能够匹配任何请求属性上的路由；</p></li><li><p>支持基于 HTTP 请求的路由匹配（Path、Method、Header、Host 等）；</p></li><li><p>过滤器可以修改 HTTP 请求和 HTTP 响应（增加/修改 Header、增加/修改请求参数、改写请求 Path 等等）；</p></li><li><p>...</p></li></ul><p>当下 Spring Cloud Gateway 已然是 Spring Cloud 体系上API 网关标准组件。Spring Cloud Gateway 十分优秀，Spring Cloud Alibaba 也默认选用该组件作为网关产品，下面我们就通过实例讲解 Spring Cloud Gateway 的使用办法。</p><h3 id="spring-cloud-gateway的配置技巧" tabindex="-1">Spring Cloud Gateway的配置技巧 <a class="header-anchor" href="#spring-cloud-gateway的配置技巧" aria-label="Permalink to &quot;Spring Cloud Gateway的配置技巧&quot;">​</a></h3><h4 id="spring-cloud-gateway使用入门" tabindex="-1">Spring Cloud Gateway使用入门 <a class="header-anchor" href="#spring-cloud-gateway使用入门" aria-label="Permalink to &quot;Spring Cloud Gateway使用入门&quot;">​</a></h4><p>示例说明：</p><p>假设&quot;service-a&quot;微服务提供了三个 RESTful 接口。</p>',11),A=p("p",null,'假设 "service-b" 微服务提供了三个 RESTful 接口。',-1),u=n(`<p>如何通过部署 Spring Cloud Gateway 实现 API 路由功能来屏蔽后端细节呢？</p><p>第一步，利用 Spring Initializr 向导创建 Gateway 工程，确保 pom.xml 引入以下依赖：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Nacos客户端 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Spring Cloud Gateway Starter --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-gateway&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 对外提供Gateway应用监控指标 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Nacos客户端 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Spring Cloud Gateway Starter --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-gateway&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 对外提供Gateway应用监控指标 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>第二步，在 application.yml 增加如下配置。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">gateway</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#配置微服务id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">discovery</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">192.168.31.101:8848</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#nacos通信地址</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">gateway</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#让gateway通过nacos实现自动路由转发</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">discovery</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">locator</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#locator.enabled是自动根据URL规则实现路由转发</span></span>
<span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#服务端口号</span></span>
<span class="line"><span style="color:#85E89D;">management</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">endpoints</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">web</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exposure</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">include</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#对外暴露actuator所有监控指标，便于监控系统收集跟踪</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">gateway</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#配置微服务id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">discovery</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">192.168.31.101:8848</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#nacos通信地址</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">gateway</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#让gateway通过nacos实现自动路由转发</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">discovery</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">locator</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#locator.enabled是自动根据URL规则实现路由转发</span></span>
<span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#服务端口号</span></span>
<span class="line"><span style="color:#22863A;">management</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">endpoints</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">web</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exposure</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">include</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#对外暴露actuator所有监控指标，便于监控系统收集跟踪</span></span></code></pre></div><p>在上面的配置中最重要的一句是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.cloud.gateway.discovery.locator.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.cloud.gateway.discovery.locator.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>这是一个自动项，允许 Gateway 自动实现后端微服务路由转发， Gateway 工程启动后，在浏览器地址栏按下面格式访问后端服务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//网关IP:端口/微服务id/URI</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//网关IP:端口/微服务id/URI</span></span></code></pre></div><p>例如，网关 IP 为：192.168.31.103，我们需要通过网关执行 service-a 的 list 方法，具体写法为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//192.168.31.103:80/service-a/list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//192.168.31.103:80/service-a/list</span></span></code></pre></div><p>访问后 Gateway 按下图流程进行请求路由转发。</p>`,12),F=n(`<p>基于网关自动路由处理流程</p><p>咱们来梳理下路由转发流程：</p><ol><li><p>Gateway、service-a 这些都是微服务实例，在启动时向 Nacos 注册登记；</p></li><li><p>用户端向 Gateway 发起请求，请求地址<a href="http://192.168.31.103:80/service-a/list" target="_blank" rel="noreferrer">http://192.168.31.103:80/service-a/list</a>；</p></li><li><p>Gateway 网关实例收到请求，解析其中第二部分 service-a，即微服务 Id，第三部分 URI 为&quot;/list&quot;。之后向 Nacos 查询 service-a 可用实例列表；</p></li><li><p>Nacos 返回 120 与 121 两个可用微服务实例信息；</p></li><li><p>Spring Cloud Gateway 内置 Ribbon，根据默认轮询策略将请求转发至 120 实例，转发的完整 URL 将附加用户的 URI，即<a href="http://192.168.31.120:80/list" target="_blank" rel="noreferrer">http://192.168.31.120:80/list</a>；</p></li><li><p>120 实例处理后返回 JSON 响应数据给 Gateway；</p></li><li><p>Gateway 返回给用户端，完成一次完整的请求路由转发过程。</p></li></ol><p>讲到这，我们已理解了 Spring Cloud Gateway 的执行过程。但是真实项目中，存在着各种特殊的路由转发规则，而非自动路由能简单解决的，在 Spring Cloud Gateway 项目中内置了强大的&quot;谓词&quot;系统，可以满足企业应用中的各种转发规则要求，下一小节咱们就来介绍常见的谓词用法。</p><h4 id="谓词-predicate-与过滤器-filter" tabindex="-1">谓词（Predicate）与过滤器（Filter） <a class="header-anchor" href="#谓词-predicate-与过滤器-filter" aria-label="Permalink to &quot;谓词（Predicate）与过滤器（Filter）&quot;">​</a></h4><p>在讲解前需要引入 Gateway 网关三个关键名词：路由（Route）、谓词（Predicate）、过滤器（Filter）。</p><p>路由（Route）是指一个完整的网关地址映射与处理过程。一个完整的路由包含两部分配置：谓词（Predicate）与过滤器（Filter）。前端应用发来的请求要被转发到哪个微服务上，是由谓词决定的；而转发过程中请求、响应数据被网关如何加工处理是由过滤器决定的。说起来有些晦涩，我们通过实例进行讲解就容易理解了。</p><p><strong>谓词（Predicate）</strong></p><p>这里我们给出一个实例，将原有 Gateway 工程的 application.yml 文件修改为下面的设置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">gateway</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">discovery</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nacos</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">gateway</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">discovery</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">locator</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#不再需要Gateway路由转发</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">routes</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;">#路由规则配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">#第一个路由配置，service-a路由规则</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">service_a_route</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#路由唯一标识</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">#lb开头代表基于gateway的负载均衡策略选择实例</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">uri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">lb://service-a</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">#谓词配置</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">predicates</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">#Path路径谓词，代表用户端URI如果以/a开头便会转发到service-a实例</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">Path=/a/**</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">#After生效时间谓词，2020年10月15日后该路由才能在网关对外暴露</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">After=2020-10-05T00:00:00.000+08:00[Asia/Shanghai]</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">#谓词配置</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">filters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">#忽略掉第一层前缀进行转发</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">StripPrefix=1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">#为响应头附加X-Response=Blue</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#9ECBFF;">AddResponseHeader=X-Response,Blue</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">#第二个路由配置，service-b路由规则</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">service_b_route</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">uri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">lb://service-b</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">predicates</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">Path=/b/**</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">filters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">StripPrefix=1</span></span>
<span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#85E89D;">management</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">endpoints</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">web</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">exposure</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">include</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;*&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">gateway</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">discovery</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">192.168.31.10:8848</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">gateway</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">discovery</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">locator</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#不再需要Gateway路由转发</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">routes</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;">#路由规则配置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#第一个路由配置，service-a路由规则</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">service_a_route</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#路由唯一标识</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">#lb开头代表基于gateway的负载均衡策略选择实例</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">uri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">lb://service-a</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">#谓词配置</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">predicates</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">#Path路径谓词，代表用户端URI如果以/a开头便会转发到service-a实例</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">Path=/a/**</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">#After生效时间谓词，2020年10月15日后该路由才能在网关对外暴露</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">After=2020-10-05T00:00:00.000+08:00[Asia/Shanghai]</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">#谓词配置</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">filters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">#忽略掉第一层前缀进行转发</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">StripPrefix=1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">#为响应头附加X-Response=Blue</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">AddResponseHeader=X-Response,Blue</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">#第二个路由配置，service-b路由规则</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">service_b_route</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">uri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">lb://service-b</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">predicates</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">Path=/b/**</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">filters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">StripPrefix=1</span></span>
<span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#22863A;">management</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">endpoints</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">web</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">exposure</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">include</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;*&#39;</span></span></code></pre></div><p>我来翻译下上面的配置：</p><p>在 2020 年 10 月 15 日后，当用户端发来/a/...开头的请求时，Spring Cloud Gateway 会自动获取 service-a 可用实例，默认采用轮询方式将URI附加至实例地址后，形成新地址，service-a处理后 Gateway 网关自动在响应头附加 X-Response=Blue。至于第二个 service_b_route，比较简单，只说明当用户访问/b开头 URL 时，转发到 service-b 可用实例。</p><p>完整的路由配置格式固定如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">gateway</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">discovery</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">locator</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#不再需要Gateway路由转发</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">routes</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">xxx</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#路由规则id</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">uri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">lb://微服务id</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#路由转发至哪个微服务</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">predicates</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">//具体的谓词</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#85E89D;">filters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">//具体的过滤器</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">gateway</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">discovery</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">locator</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#不再需要Gateway路由转发</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">routes</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">xxx</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#路由规则id</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">uri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">lb://微服务id</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#路由转发至哪个微服务</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">predicates</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">//具体的谓词</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#22863A;">filters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">//具体的过滤器</span></span></code></pre></div><p>其中 predicates 是重点，说明路由生效条件，在这里我将常见的谓词使用形式列出来。</p><ul><li>After 代表在指定时点后路由规则生效。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">predicates</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> After</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">04T00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">000</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">predicates</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> After</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">04T00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">000</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span></span></code></pre></div><ul><li>Before 代表在指定时点前路由规则生效。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">predicates</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Before</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">20T17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">42</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">47.789</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;">[America</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Denver]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">predicates</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Before</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">20T17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">42</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">47.789</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">07</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;">[America</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Denver]</span></span></code></pre></div><ul><li>Path 代表 URI 符合映射规则时生效。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">predicates</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">b</span><span style="color:#6A737D;">/**</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">predicates</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">b</span><span style="color:#6A737D;">/**</span></span></code></pre></div><ul><li>Header 代表包含指定请求头时生效。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">predicates</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Header</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">X</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Request</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Id, \\d</span><span style="color:#F97583;">+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">predicates</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Header</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">X</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Request</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Id, \\d</span><span style="color:#D73A49;">+</span></span></code></pre></div><p>这里额外解释下，如果请求具有名为 X-Request-Id 的 Header，其值与\\d+正则表达式匹配（具有一个或多个数字的值），则该路由匹配。</p><ul><li>Method 代表要求 HTTP 方法符合规定时生效。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">predicates</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Method</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">GET</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">predicates</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Method</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">GET</span></span></code></pre></div><p>谓词是 Gateway 网关中最灵活的部分，刚才列举的是最常用的谓词，还有很多谓词是在文中没有提到，如果你对这部分感兴趣可以翻阅<a href="https://spring.io/projects/spring-cloud-gateway%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E8%BF%9B%E8%A1%8C%E5%AD%A6%E4%B9%A0" target="_blank" rel="noreferrer">https://spring.io/projects/spring-cloud-gateway</a>进行学习。</p><p><strong>过滤器（Filter）</strong></p><p>过滤器（Filter）可以对请求或响应的数据进行额外处理，这里我们列出三个最常用的内置过滤器进行说明。</p><ul><li>AddRequestParameter 是对所有匹配的请求添加一个查询参数。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filters</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> AddRequestParameter</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">foo,bar #在请求参数中追加foo</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filters</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> AddRequestParameter</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">foo,bar #在请求参数中追加foo</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bar</span></span></code></pre></div><ul><li>AddResponseHeader 会对所有匹配的请求，在返回结果给客户端之前，在 Header 中添加响应的数据。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#在Response中添加Header头，key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">X</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Response</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Foo，Value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Bar。</span></span>
<span class="line"><span style="color:#E1E4E8;">filters</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> AddResponseHeader</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">X</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Response,Blue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#在Response中添加Header头，key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">X</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Response</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Foo，Value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Bar。</span></span>
<span class="line"><span style="color:#24292E;">filters</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> AddResponseHeader</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">X</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Response,Blue</span></span></code></pre></div><ul><li>Retry 为重试过滤器，当后端服务不可用时，网关会根据配置参数来发起重试请求。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filters</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">#涉及过滤器参数时，采用name</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">args的完整写法</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Retry #name是内置的过滤器名</span></span>
<span class="line"><span style="color:#E1E4E8;">  args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> #参数部分使用args说明</span></span>
<span class="line"><span style="color:#E1E4E8;">    retries</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">    status</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">503</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filters</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">#涉及过滤器参数时，采用name</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">args的完整写法</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Retry #name是内置的过滤器名</span></span>
<span class="line"><span style="color:#24292E;">  args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> #参数部分使用args说明</span></span>
<span class="line"><span style="color:#24292E;">    retries</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    status</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">503</span></span></code></pre></div><p>以上片段含义为，当后端服务返回 503 状态码的响应后，Retry 过滤器会重新发起请求，最多重试 3 次。</p><p>以上是三种最常用的内置过滤器的使用案例，因为 Spring Cloud 内置过滤器将近 30 个，这里咱们就不一一列举，有兴趣的同学可以查询官方资料。</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.6.RELEASE/reference/html/#gatewayfilter-factories" target="_blank" rel="noreferrer">https://docs.spring.io/spring-cloud-gateway/docs/2.2.6.RELEASE/reference/html/#gatewayfilter-factories</a></p><h3 id="gateway-的执行原理与自定义过滤器" tabindex="-1">Gateway 的执行原理与自定义过滤器 <a class="header-anchor" href="#gateway-的执行原理与自定义过滤器" aria-label="Permalink to &quot;Gateway 的执行原理与自定义过滤器&quot;">​</a></h3><h4 id="spring-cloud-gateway-的执行原理" tabindex="-1">Spring Cloud Gateway 的执行原理 <a class="header-anchor" href="#spring-cloud-gateway-的执行原理" aria-label="Permalink to &quot;Spring Cloud Gateway 的执行原理&quot;">​</a></h4><p>在初步掌握 Spring Cloud Gateway 的配置技巧与谓词用法后，我们来关注 Gateway 底层的实现细节。</p><p>下图是 Spring Cloud Gateway 的执行流程。</p>`,42),D=n(`<p>按执行顺序可以拆解以下几步：</p><ol><li><p>Spring Cloud Gateway 启动时基于 Netty Server 监听指定的端口（该端口可以通过 server.port 属性自定义）。当前端应用发送一个请求到网关时，进入 Gateway Handler Mapping 处理过程，网关会根据当前 Gateway 所配置的谓词（Predicate）来决定是由哪个微服务进行处理。</p></li><li><p>确定微服务后，请求向后进入 Gateway Web Handler 处理过程，该过程中 Gateway 根据过滤器（Filters）配置，将请求按前后顺序依次交给 Filter 过滤链进行前置（Pre）处理，前置处理通常是对请求进行前置检查，例如：判断是否包含某个指定请求头、检查请求的 IP 来源是否合法、请求包含的参数是否正确等。</p></li><li><p>当过滤链前置（Pre）处理完毕后，请求会被 Gateway 转发到真正的微服务实例进行处理，微服务处理后会返回响应数据，这些响应数据会按原路径返回被 Gateway 配置的过滤链进行后置处理（Post），后置处理通常是对响应进行额外处理，例如：将处理过程写入日志、为响应附加额外的响应头或者流量监控等。</p></li></ol><p>可以看到，在整个处理过程中谓词（Predicate）与过滤器（Filter）起到了重要作用，谓词决定了路径的匹配规则，让 Gateway 确定应用哪个微服务，而 Filter 则是对请求或响应作出实质的前置、后置处理。</p><p>在项目中功能场景多种多样，像日常的用户身份鉴权、日志记录、黑白名单、反爬虫等基础功能都可以通过自定义 Filter 为 Gateway 进行功能扩展，下面我们通过&quot;计时过滤器&quot;为例，讲解如何为 Gateway 绑定自定义全局过滤器。</p><h4 id="自定义全局过滤器" tabindex="-1">自定义全局过滤器 <a class="header-anchor" href="#自定义全局过滤器" aria-label="Permalink to &quot;自定义全局过滤器&quot;">​</a></h4><p>在 Spring Cloud Gateway 中，自定义过滤器分为两种，全局过滤器与局部过滤器。两者唯一的区别是：全局过滤器默认应用在所有路由（Route）上，而局部过滤器可以为指定的路由绑定。下面咱们通过&quot;计时过滤器&quot;这个案例讲解全局过滤器的配置。所谓计时过滤器是指任何从网关访问的请求，都要在日志中记录下从请求进入到响应退出的执行时间，通过这个时间运维人员便可以收集并分析哪些功能进行了慢处理，以此为依据进行进一步优化。下面是计时过滤器的代码，重要的部分我通过注释进行了说明。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.lagou.gateway.filter;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.slf4j.Logger;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.slf4j.LoggerFactory;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.cloud.gateway.filter.GlobalFilter;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.core.Ordered;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.web.server.ServerWebExchange;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> reactor.core.publisher.Mono;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//自动实例化并被Spring IOC容器管理</span></span>
<span class="line"><span style="color:#6A737D;">//全局过滤器必须实现两个接口：GlobalFilter、Ordered</span></span>
<span class="line"><span style="color:#6A737D;">//GlobalFilter是全局过滤器接口，实现类要实现filter()方法进行功能扩展</span></span>
<span class="line"><span style="color:#6A737D;">//Ordered接口用于排序，通过实现getOrder()方法返回整数代表执行当前过滤器的前后顺序</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ElapsedFilter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GlobalFilter</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Ordered</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//基于slf4j.Logger实现日志输出</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(ElapsedFilter.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//起始时间属性名</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String ELAPSED_TIME_BEGIN </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;elapsedTimeBegin&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 实现filter()方法记录处理时间</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">exchange</span><span style="color:#6A737D;"> 用于获取与当前请求、响应相关的数据，以及设置过滤器间传递的上下文数据</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">chain</span><span style="color:#6A737D;"> Gateway过滤器链对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> Mono对应一个异步任务，因为Gateway是基于Netty Server异步处理的,Mono对就代表异步处理完毕的情况。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(ServerWebExchange </span><span style="color:#FFAB70;">exchange</span><span style="color:#E1E4E8;">, GatewayFilterChain </span><span style="color:#FFAB70;">chain</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//Pre前置处理部分</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//在请求到达时，往ServerWebExchange上下文环境中放入了一个属性elapsedTimeBegin，保存请求执行前的时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">        exchange.</span><span style="color:#B392F0;">getAttributes</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ELAPSED_TIME_BEGIN, System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//chain.filter(exchange).then()对应Post后置处理部分</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//当响应产生后，记录结束与elapsedTimeBegin起始时间比对，获取RESTful API的实际执行时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chain.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(exchange).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                Mono.</span><span style="color:#B392F0;">fromRunnable</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">//当前过滤器得到响应时，计算并打印时间</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Long startTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exchange.</span><span style="color:#B392F0;">getAttribute</span><span style="color:#E1E4E8;">(ELAPSED_TIME_BEGIN);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (startTime </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(exchange.</span><span style="color:#B392F0;">getRequest</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRemoteAddress</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//远程访问的用户地址</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; | &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">  exchange.</span><span style="color:#B392F0;">getRequest</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">//Gateway URI</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; | cost &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startTime) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ms&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//处理时间</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                })</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//设置为最高优先级，最先执行ElapsedFilter过滤器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//return Ordered.LOWEST_PRECEDENCE; 代表设置为最低优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOrder</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Ordered.HIGHEST_PRECEDENCE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.lagou.gateway.filter;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.slf4j.Logger;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.slf4j.LoggerFactory;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.cloud.gateway.filter.GlobalFilter;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.core.Ordered;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.stereotype.Component;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.web.server.ServerWebExchange;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> reactor.core.publisher.Mono;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//自动实例化并被Spring IOC容器管理</span></span>
<span class="line"><span style="color:#6A737D;">//全局过滤器必须实现两个接口：GlobalFilter、Ordered</span></span>
<span class="line"><span style="color:#6A737D;">//GlobalFilter是全局过滤器接口，实现类要实现filter()方法进行功能扩展</span></span>
<span class="line"><span style="color:#6A737D;">//Ordered接口用于排序，通过实现getOrder()方法返回整数代表执行当前过滤器的前后顺序</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElapsedFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GlobalFilter</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Ordered</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//基于slf4j.Logger实现日志输出</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(ElapsedFilter.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//起始时间属性名</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String ELAPSED_TIME_BEGIN </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;elapsedTimeBegin&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 实现filter()方法记录处理时间</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">exchange</span><span style="color:#6A737D;"> 用于获取与当前请求、响应相关的数据，以及设置过滤器间传递的上下文数据</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">chain</span><span style="color:#6A737D;"> Gateway过滤器链对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> Mono对应一个异步任务，因为Gateway是基于Netty Server异步处理的,Mono对就代表异步处理完毕的情况。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(ServerWebExchange </span><span style="color:#E36209;">exchange</span><span style="color:#24292E;">, GatewayFilterChain </span><span style="color:#E36209;">chain</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//Pre前置处理部分</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//在请求到达时，往ServerWebExchange上下文环境中放入了一个属性elapsedTimeBegin，保存请求执行前的时间戳</span></span>
<span class="line"><span style="color:#24292E;">        exchange.</span><span style="color:#6F42C1;">getAttributes</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ELAPSED_TIME_BEGIN, System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//chain.filter(exchange).then()对应Post后置处理部分</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//当响应产生后，记录结束与elapsedTimeBegin起始时间比对，获取RESTful API的实际执行时间</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> chain.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(exchange).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                Mono.</span><span style="color:#6F42C1;">fromRunnable</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">//当前过滤器得到响应时，计算并打印时间</span></span>
<span class="line"><span style="color:#24292E;">                    Long startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exchange.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(ELAPSED_TIME_BEGIN);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (startTime </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(exchange.</span><span style="color:#6F42C1;">getRequest</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRemoteAddress</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//远程访问的用户地址</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; | &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">  exchange.</span><span style="color:#6F42C1;">getRequest</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">//Gateway URI</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; | cost &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ms&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//处理时间</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                })</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//设置为最高优先级，最先执行ElapsedFilter过滤器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//return Ordered.LOWEST_PRECEDENCE; 代表设置为最低优先级</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOrder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Ordered.HIGHEST_PRECEDENCE;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行后通过 Gateway 访问任意微服务便会输出日志：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">36</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">01</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">765</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">14052</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [ctor</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nio</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] com.lagou.gateway.filter.ElapsedFilter   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">57873</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> cost 821ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">36</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">01</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">765</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">14052</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [ctor</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nio</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] com.lagou.gateway.filter.ElapsedFilter   </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">57873</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> cost 821ms</span></span></code></pre></div><p>日志包含四部分：</p><ul><li><p>日志的基础信息包括时间、日志级别、线程、产生的类与方法等。</p></li><li><p>/0:0:0:0:0:0:0:1:57873 代表访问者的远程 IP 端口等信息。</p></li><li><p>/test-service/test 是通过 Gateway 访问的完整 URI，第一部分是服务名，第二部分是 RESTful 接口。</p></li><li><p>cost 821ms 是具体的执行时间。</p></li></ul><p>以上就是全局过滤器的开发方法，至于局部过滤器的配置方法与全局过滤器极为相似，有兴趣的同学通过下面的官方文档了解更详细的内容。</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.BUILD-SNAPSHOT/reference/html/%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9A%E7%BB%86%E8%8A%82" target="_blank" rel="noreferrer">https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.BUILD-SNAPSHOT/reference/html/</a></p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>这一讲咱们学了三方面内容，首先讲解了什么是 API 网关，API 网关是负责微服务请求统一路由转发的组件，用户端所有的请求都要经过 API 网关路由、加工、过滤后送达给后端微服务。其次，讲解了 Spring Cloud Gateway 网关的部署方式，了解到谓词（Predicate）与过滤器（Filter）的作用。最后，咱们通过实例介绍了 Spring Cloud Gateway 的执行原理并实现了计时功能的全局过滤器。</p><p>这里给你出一道思考题：结合你当前的项目思考下，API 网关除了路由还能额外实现哪些功能呢？</p><p>下一讲我们将开始一个新篇章，介绍在微服务环境下如何通过服务降级、熔断等机制保护我们的微服务架构，避免雪崩效应的产生。</p>`,17);function h(C,v,b,m,_,f){const s=e("Image");return t(),c("div",null,[y,a(s,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/23/99/Cgp9HWBXaFSANx-tAAE1dQdYjME754.png"}),l(),E,i,a(s,{alt:"微信图片_20210322095840.png",src:"https://s0.lgstatic.com/i/image6/M01/23/ED/CioPOWBX-fWAHNqWAAB1dyZpFjI441.png"}),l(),d,a(s,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/23/96/CioPOWBXaHKAXbZsAAOHtjWJwBo401.png"}),l(),g,a(s,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M00/23/99/Cgp9HWBXaICAUVGbAACopAyWXv0370.png"}),A,a(s,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M00/23/96/CioPOWBXaI2APUbjAACpocL8xRE677.png"}),u,a(s,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M00/23/99/Cgp9HWBXaViAFTHsAAHX8DX4Vz8328.png"}),l(),F,a(s,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image6/M00/23/96/CioPOWBXaLWAYmNDAADePiHh5QM390.png"}),D])}const S=o(r,[["render",h]]);export{B as __pageData,S as default};
