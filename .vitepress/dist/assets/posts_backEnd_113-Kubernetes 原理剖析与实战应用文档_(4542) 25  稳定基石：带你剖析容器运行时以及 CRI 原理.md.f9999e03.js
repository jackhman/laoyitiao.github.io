import{_ as p,j as t,o as l,g as r,k as e,h as n,Q as o,s}from"./chunks/framework.4e7d56ce.js";const v=JSON.parse('{"title":"容器运行时 （Container Runtime） ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4542) 25  稳定基石：带你剖析容器运行时以及 CRI 原理.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4542) 25  稳定基石：带你剖析容器运行时以及 CRI 原理.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4542) 25  稳定基石：带你剖析容器运行时以及 CRI 原理.md"},i=o('<p>当一个 Pod 在 Kube-APIServer 中被创建出来以后，会被调度器调度，然后确定一个合适的节点，最终被这个节点上的 Kubelet 拉起，以容器状态运行。</p><p>那么 Kubelet 是如何跟容器打交道的呢，它是如何进行创建容器、获取容器状态等操作的呢？</p><p>今天我们就来了解一下。</p><h3 id="容器运行时-container-runtime" tabindex="-1">容器运行时 （Container Runtime） <a class="header-anchor" href="#容器运行时-container-runtime" aria-label="Permalink to &quot;容器运行时 （Container Runtime）&quot;">​</a></h3><p>Kubelet 负责运行具体的 Pod，并维护其整个生命周期，为 Pod 提供存储、网络等必要的资源。但 Kubelet 本身并不负责真正的容器创建和逻辑管理，这些全部都是通过容器运行时（Container Runtime）完成的。大家平常熟知的 Docker 其实就是一种容器运行时，除此之外，还有<a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd" target="_blank" rel="noreferrer">containerd</a>、<a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#cri-o" target="_blank" rel="noreferrer">cri-o</a>、<a href="https://katacontainers.io/" target="_blank" rel="noreferrer">kata</a>、<a href="https://gvisor.dev/" target="_blank" rel="noreferrer">gVisor</a> 等等。</p><p>下图就是 Kubelet 跟容器运行时进行的交互图：</p>',6),E=s("p",null,[n("图 1："),s("a",{href:"https://www.threatstack.com/blog/diving-deeper-into-runtimes-kubernetes-cri-and-shims",target:"_blank",rel:"noreferrer"},"Kubelet 跟容器运行的交互图")],-1),y=s("p",null,"Kubelet 负责跟 kube-apiserver 进行数据同步，获取新的 Pod，并上报本机 Pod 的各个状态数据。Kubelet 通过调用容器运行时的接口完成容器的创建、容器状态的查询等工作。下图就是使用 Docker 作为容器的运行时。",-1),u=o(`<p>图 2：<a href="https://www.threatstack.com/blog/diving-deeper-into-runtimes-kubernetes-cri-and-shims" target="_blank" rel="noreferrer">使用 Docker 作为容器的运行</a></p><p>Docker 作为 Kubelet 内置支持的主要容器运行时，也是目前使用最为官方的容器运行时之一。</p><p>除了 Docker，在 Kubernetes v1.5 之前，Kubelet 还内置了对 <a href="https://coreos.com/rkt/docs/latest/" target="_blank" rel="noreferrer">rkt</a> 的支持。在这个阶段，如果我们想要自己去定义容器运行时，或者更改容器运行时的部分逻辑行为，是非常痛苦的，需要通过修改 Kubelet 的代码来实现。这些改动如果更新到上游社区，也会给社区造成很大的困扰，毕竟 Kubelet 自身的稳定性关乎着整个集群的稳定性。因此，这些改动在上游社区的合并通常都很谨慎，往往就需要开发者自己维护这些代码，维护成本非常高，也不方便升级。</p><p>介于这一点，很多开发者都希望 Kubernetes 可以支持更多的容器运行时。因此，从 v1.5 版本开始，社区引入了<a href="https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/" target="_blank" rel="noreferrer">CRI（Container Runtime Interface）</a>来解决这个问题。</p><p>CRI 接口的引入带来了两个好处：一是它很好地将 Kubelet 与容器运行时进行了解耦，这样我们每次对容器运行时进行更新升级等操作时，都再不需要对 Kubelet 做任何的更改；二是解放了 Kubelet，减少了 Kubelet 的负担，能够保证 Kubernetes 的代码质量和整个系统的稳定性。</p><p>下面我们就来了解一下CRI。</p><h3 id="cri" tabindex="-1">CRI <a class="header-anchor" href="#cri" aria-label="Permalink to &quot;CRI&quot;">​</a></h3><p>CRI 接口可以分为两部分。</p><p>一个是容器运行时服务 RuntimeService，它主要负责管理 Pod 和容器的生命周期，比如创建容器、删除容器、查询容器状态等等。下面就是用<a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol Buffers</a>定义的 RuntimeService 的接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Runtime service defines the public APIs for remote container runtimes</span></span>
<span class="line"><span style="color:#E1E4E8;">service RuntimeService {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Version returns the runtime name, runtime version, and runtime API version.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">Version</span><span style="color:#E1E4E8;">(VersionRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (VersionResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// RunPodSandbox creates and starts a pod-level sandbox. Runtimes must ensure</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the sandbox is in the ready state on success.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">RunPodSandbox</span><span style="color:#E1E4E8;">(RunPodSandboxRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (RunPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Start a sandbox pod which was forced to stop by external factors.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Network plugin returns same IPs when input same pod names and namespaces</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">StartPodSandbox</span><span style="color:#E1E4E8;">(StartPodSandboxRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (StartPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// StopPodSandbox stops any running process that is part of the sandbox and</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// reclaims network resources (e.g., IP addresses) allocated to the sandbox.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// If there are any running containers in the sandbox, they must be forcibly</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// terminated.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if all relevant</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// resources have already been reclaimed. kubelet will call StopPodSandbox</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// at least once before calling RemovePodSandbox. It will also attempt to</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// reclaim resources eagerly, as soon as a sandbox is not needed. Hence,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// multiple StopPodSandbox calls are expected.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">StopPodSandbox</span><span style="color:#E1E4E8;">(StopPodSandboxRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (StopPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// RemovePodSandbox removes the sandbox. If there are any running containers</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// in the sandbox, they must be forcibly terminated and removed.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the sandbox has</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// already been removed.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">RemovePodSandbox</span><span style="color:#E1E4E8;">(RemovePodSandboxRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (RemovePodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PodSandboxStatus returns the status of the PodSandbox. If the PodSandbox is not</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// present, returns an error.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">PodSandboxStatus</span><span style="color:#E1E4E8;">(PodSandboxStatusRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (PodSandboxStatusResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ListPodSandbox returns a list of PodSandboxes.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ListPodSandbox</span><span style="color:#E1E4E8;">(ListPodSandboxRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ListPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// CreateContainer creates a new container in specified PodSandbox</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">CreateContainer</span><span style="color:#E1E4E8;">(CreateContainerRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (CreateContainerResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// StartContainer starts the container.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">StartContainer</span><span style="color:#E1E4E8;">(StartContainerRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (StartContainerResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// StopContainer stops a running container with a grace period (i.e., timeout).</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the container has</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// already been stopped.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO: what must the runtime do after the grace period is reached?</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">StopContainer</span><span style="color:#E1E4E8;">(StopContainerRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (StopContainerResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// RemoveContainer removes the container. If the container is running, the</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// container must be forcibly removed.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the container has</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// already been removed.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">RemoveContainer</span><span style="color:#E1E4E8;">(RemoveContainerRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (RemoveContainerResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PauseContainer pauses the container.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">PauseContainer</span><span style="color:#E1E4E8;">(PauseContainerRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (PauseContainerResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// UnpauseContainer unpauses the container.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">UnpauseContainer</span><span style="color:#E1E4E8;">(UnpauseContainerRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (UnpauseContainerResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ListContainers lists all containers by filters.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ListContainers</span><span style="color:#E1E4E8;">(ListContainersRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ListContainersResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ContainerStatus returns status of the container. If the container is not</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// present, returns an error.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ContainerStatus</span><span style="color:#E1E4E8;">(ContainerStatusRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ContainerStatusResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// UpdateContainerResources updates ContainerConfig of the container.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">UpdateContainerResources</span><span style="color:#E1E4E8;">(UpdateContainerResourcesRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (UpdateContainerResourcesResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ReopenContainerLog asks runtime to reopen the stdout/stderr log file</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// for the container. This is often called after the log file has been</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// rotated. If the container is not running, container runtime can choose</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// to either create a new log file and return nil, or return an error.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Once it returns error, new container log file MUST NOT be created.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ReopenContainerLog</span><span style="color:#E1E4E8;">(ReopenContainerLogRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ReopenContainerLogResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ExecSync runs a command in a container synchronously.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ExecSync</span><span style="color:#E1E4E8;">(ExecSyncRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ExecSyncResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Exec prepares a streaming endpoint to execute a command in the container.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">Exec</span><span style="color:#E1E4E8;">(ExecRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ExecResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Attach prepares a streaming endpoint to attach to a running container.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">Attach</span><span style="color:#E1E4E8;">(AttachRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (AttachResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PortForward prepares a streaming endpoint to forward ports from a PodSandbox.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">PortForward</span><span style="color:#E1E4E8;">(PortForwardRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (PortForwardResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ContainerStats returns stats of the container. If the container does not</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// exist, the call returns an error.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ContainerStats</span><span style="color:#E1E4E8;">(ContainerStatsRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ContainerStatsResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ListContainerStats returns stats of all running containers.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ListContainerStats</span><span style="color:#E1E4E8;">(ListContainerStatsRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ListContainerStatsResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// UpdateRuntimeConfig updates the runtime configuration based on the given request.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">UpdateRuntimeConfig</span><span style="color:#E1E4E8;">(UpdateRuntimeConfigRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (UpdateRuntimeConfigResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Status returns the status of the runtime.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">Status</span><span style="color:#E1E4E8;">(StatusRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (StatusResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Runtime service defines the public APIs for remote container runtimes</span></span>
<span class="line"><span style="color:#24292E;">service RuntimeService {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Version returns the runtime name, runtime version, and runtime API version.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">Version</span><span style="color:#24292E;">(VersionRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (VersionResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// RunPodSandbox creates and starts a pod-level sandbox. Runtimes must ensure</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the sandbox is in the ready state on success.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">RunPodSandbox</span><span style="color:#24292E;">(RunPodSandboxRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (RunPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Start a sandbox pod which was forced to stop by external factors.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Network plugin returns same IPs when input same pod names and namespaces</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">StartPodSandbox</span><span style="color:#24292E;">(StartPodSandboxRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (StartPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// StopPodSandbox stops any running process that is part of the sandbox and</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// reclaims network resources (e.g., IP addresses) allocated to the sandbox.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// If there are any running containers in the sandbox, they must be forcibly</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// terminated.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if all relevant</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// resources have already been reclaimed. kubelet will call StopPodSandbox</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// at least once before calling RemovePodSandbox. It will also attempt to</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// reclaim resources eagerly, as soon as a sandbox is not needed. Hence,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// multiple StopPodSandbox calls are expected.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">StopPodSandbox</span><span style="color:#24292E;">(StopPodSandboxRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (StopPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// RemovePodSandbox removes the sandbox. If there are any running containers</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// in the sandbox, they must be forcibly terminated and removed.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the sandbox has</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// already been removed.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">RemovePodSandbox</span><span style="color:#24292E;">(RemovePodSandboxRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (RemovePodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PodSandboxStatus returns the status of the PodSandbox. If the PodSandbox is not</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// present, returns an error.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">PodSandboxStatus</span><span style="color:#24292E;">(PodSandboxStatusRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (PodSandboxStatusResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ListPodSandbox returns a list of PodSandboxes.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ListPodSandbox</span><span style="color:#24292E;">(ListPodSandboxRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ListPodSandboxResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// CreateContainer creates a new container in specified PodSandbox</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">CreateContainer</span><span style="color:#24292E;">(CreateContainerRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (CreateContainerResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// StartContainer starts the container.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">StartContainer</span><span style="color:#24292E;">(StartContainerRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (StartContainerResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// StopContainer stops a running container with a grace period (i.e., timeout).</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the container has</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// already been stopped.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// TODO: what must the runtime do after the grace period is reached?</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">StopContainer</span><span style="color:#24292E;">(StopContainerRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (StopContainerResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// RemoveContainer removes the container. If the container is running, the</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// container must be forcibly removed.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the container has</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// already been removed.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">RemoveContainer</span><span style="color:#24292E;">(RemoveContainerRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (RemoveContainerResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PauseContainer pauses the container.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">PauseContainer</span><span style="color:#24292E;">(PauseContainerRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (PauseContainerResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// UnpauseContainer unpauses the container.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">UnpauseContainer</span><span style="color:#24292E;">(UnpauseContainerRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (UnpauseContainerResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ListContainers lists all containers by filters.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ListContainers</span><span style="color:#24292E;">(ListContainersRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ListContainersResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ContainerStatus returns status of the container. If the container is not</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// present, returns an error.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ContainerStatus</span><span style="color:#24292E;">(ContainerStatusRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ContainerStatusResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// UpdateContainerResources updates ContainerConfig of the container.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">UpdateContainerResources</span><span style="color:#24292E;">(UpdateContainerResourcesRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (UpdateContainerResourcesResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ReopenContainerLog asks runtime to reopen the stdout/stderr log file</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// for the container. This is often called after the log file has been</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// rotated. If the container is not running, container runtime can choose</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// to either create a new log file and return nil, or return an error.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Once it returns error, new container log file MUST NOT be created.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ReopenContainerLog</span><span style="color:#24292E;">(ReopenContainerLogRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ReopenContainerLogResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ExecSync runs a command in a container synchronously.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ExecSync</span><span style="color:#24292E;">(ExecSyncRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ExecSyncResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Exec prepares a streaming endpoint to execute a command in the container.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">Exec</span><span style="color:#24292E;">(ExecRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ExecResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Attach prepares a streaming endpoint to attach to a running container.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">Attach</span><span style="color:#24292E;">(AttachRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (AttachResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PortForward prepares a streaming endpoint to forward ports from a PodSandbox.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">PortForward</span><span style="color:#24292E;">(PortForwardRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (PortForwardResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ContainerStats returns stats of the container. If the container does not</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// exist, the call returns an error.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ContainerStats</span><span style="color:#24292E;">(ContainerStatsRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ContainerStatsResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ListContainerStats returns stats of all running containers.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ListContainerStats</span><span style="color:#24292E;">(ListContainerStatsRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ListContainerStatsResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// UpdateRuntimeConfig updates the runtime configuration based on the given request.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">UpdateRuntimeConfig</span><span style="color:#24292E;">(UpdateRuntimeConfigRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (UpdateRuntimeConfigResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Status returns the status of the runtime.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">Status</span><span style="color:#24292E;">(StatusRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (StatusResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另一个部分是镜像服务 ImageService，主要负责容器镜像的生命周期管理，比如拉取镜像、删除镜像、查询镜像等等，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ImageService defines the public APIs for managing images.</span></span>
<span class="line"><span style="color:#E1E4E8;">service ImageService {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ListImages lists existing images.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ListImages</span><span style="color:#E1E4E8;">(ListImagesRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ListImagesResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ImageStatus returns the status of the image. If the image is not</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// present, returns a response with ImageStatusResponse.Image set to</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// nil.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ImageStatus</span><span style="color:#E1E4E8;">(ImageStatusRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ImageStatusResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PullImage pulls an image with authentication config.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">PullImage</span><span style="color:#E1E4E8;">(PullImageRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (PullImageResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// RemoveImage removes the image.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the image has</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// already been removed.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">RemoveImage</span><span style="color:#E1E4E8;">(RemoveImageRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (RemoveImageResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ImageFSInfo returns information of the filesystem that is used to store images.</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">ImageFsInfo</span><span style="color:#E1E4E8;">(ImageFsInfoRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (ImageFsInfoResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ImageService defines the public APIs for managing images.</span></span>
<span class="line"><span style="color:#24292E;">service ImageService {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ListImages lists existing images.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ListImages</span><span style="color:#24292E;">(ListImagesRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ListImagesResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ImageStatus returns the status of the image. If the image is not</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// present, returns a response with ImageStatusResponse.Image set to</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// nil.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ImageStatus</span><span style="color:#24292E;">(ImageStatusRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ImageStatusResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PullImage pulls an image with authentication config.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">PullImage</span><span style="color:#24292E;">(PullImageRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (PullImageResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// RemoveImage removes the image.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This call is idempotent, and must not return an error if the image has</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// already been removed.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">RemoveImage</span><span style="color:#24292E;">(RemoveImageRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (RemoveImageResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ImageFSInfo returns information of the filesystem that is used to store images.</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">ImageFsInfo</span><span style="color:#24292E;">(ImageFsInfoRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (ImageFsInfoResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>每一个容器运行时都需要自己实现一个 CRI shim，即完成对 CRI 这个抽象接口的具体实现。这样容器运行时就可以接收来自 Kubelet 的请求。</p><p>我们现在就来看看有了 CRI 接口以后，Kubelet 是如何和容器运行时进行交互的，见下图：</p>`,14),d=s("p",null,[n("图 3："),s("a",{href:"https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/",target:"_blank",rel:"noreferrer"},"Kubelet 与容器运行时的交互"),n(")")],-1),m=s("p",null,"从上图可以看出，新增的 CRI shim 是 Kubelet 和容器运行时之间的交互纽带，Kubelet 只需要跟 CRI shim 进行交互。Kubelet 调用 CRI shim 的接口，CRI shim 响应请求后会调用底层的运行容器时，完成对容器的相关操作。",-1),h=s("p",null,[n("这里我们需要将 Kubelet、CRI shim 以及容器运行时都部署在同一个节点上。一般来说，大多数的容器运行时都默认实现了 CRI 的接口，比如"),s("a",{href:"https://containerd.io/docs/",target:"_blank",rel:"noreferrer"},"containerd"),n("。")],-1),C=s("p",null,"目前 Kubelet 内部内置了对 Docker 的 CRI shim 的实现，见下图：",-1),R=s("p",null,[n("图 4："),s("a",{href:"https://dzone.com/articles/evolution-of-k8s-worker-nodes-cri-o",target:"_blank",rel:"noreferrer"},"Kubelet 内置对 CRI shim 的实现")],-1),b=s("p",null,[n("而对于其他的容器运行时，比如"),s("a",{href:"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd",target:"_blank",rel:"noreferrer"},"containerd"),n("，我们就需要配置 kubelet 的 --container-runtime 参数为 remote，并设置 --container-runtime-endpoint 为对应的容器运行时的监听地址。")],-1),g=s("p",null,[n("Kubernetes 自 v1.10 版本已经完成了和 containerd 1.1版本 的 GA 集成，你可以直接按照"),s("a",{href:"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#containerd",target:"_blank",rel:"noreferrer"},"这份文档"),n("来部署 containerd 作为你的容器运行时。")],-1),S=o('<p>图 5：部署 containerd</p><p>containerd 1.1 版本已经内置了对 CRI 的实现，比直接使用 Docker 的性能要高很多。</p><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>Kubernetes 作为容器编排调度领域的事实标准，其优秀的架构设计还体现在其可扩展接口上。比如 CRI 提供了简单易用的扩展接口，方便各个容器运行时跟 Kubelet 进行交互接入，极大地方便了用户进行定制化。</p><p>通过 CRI 对容器运行时进行抽象，我们无须修改 Kubelet 就可以天然地支持多种容器运行时，这极大地方便了开发者的对接，也减少了升级和维护成本。CRI 的出现也促进了容器运行时的繁荣，也为强隔离、多租户等复杂的场景带来了更多的选择。</p><p>除了 CRI 以外，在 Kubernetes 中还可以为不同的 Pod 设置不同的容器运行时（Container Runtime），以提供性能与安全性之间的平衡。从 1.12 版本开始，Kuberentes 就提供了 <a href="https://kubernetes.io/zh/docs/concepts/containers/runtime-class/" target="_blank" rel="noreferrer">RuntimeClass</a> 来实现这个功能。你可以阅读<a href="https://kubernetes.io/zh/docs/concepts/containers/runtime-class/" target="_blank" rel="noreferrer">这份官方文档</a>，来学习如何使用 RuntimeClass。</p><p>如果你对本节课有什么想法或者疑问，欢迎你在留言区留言，我们一起讨论。</p>',7);function f(A,F,D,I,P,x){const a=t("Image");return l(),r("div",null,[i,e(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/6F/EA/CgqCHl-3Y6CAIjzjAAEbwUIQ2pI143.png"}),E,y,e(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/6F/DE/Ciqc1F-3Y8OAGglUAAESe6PzHHQ855.png"}),n(),u,e(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/6F/DF/Ciqc1F-3ZBCAfnwJAACHtbND3KI539.png"}),d,m,h,C,e(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/6F/DF/Ciqc1F-3ZBmAdEVFAAAnf6SSCkk798.png"}),n(),R,b,g,e(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/6F/EA/CgqCHl-3ZCKAA7C9AABJ2r60MV4161.png"}),n(),S])}const q=p(c,[["render",f]]);export{v as __pageData,q as default};
