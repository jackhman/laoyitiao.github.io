import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.e0c66c3f.js";const v=JSON.parse('{"title":"钩子函数的执行 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7655) 25  Tranition 组件：过渡动画的实现原理是怎样的？（下）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7655) 25  Tranition 组件：过渡动画的实现原理是怎样的？（下）.md","lastUpdated":null}'),p={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7655) 25  Tranition 组件：过渡动画的实现原理是怎样的？（下）.md"},o=l(`<p>上节课，我们已经知道了，Vue.js 提供了内置的 Transition 组件帮我们实现动画过渡效果。在之前的分析中我把 Transition 组件的实现分成了三个部分：组件的渲染、钩子函数的执行、模式的应用。这节课我们从钩子函数的执行继续探究 Transition 组件的实现原理。</p><h3 id="钩子函数的执行" tabindex="-1">钩子函数的执行 <a class="header-anchor" href="#钩子函数的执行" aria-label="Permalink to &quot;钩子函数的执行&quot;">​</a></h3><p>这个部分我们先来看 beforeEnter 钩子函数。</p><p>在 patch 阶段的 mountElement 函数中，在插入元素节点前且存在过渡的条件下会执行 vnode.transition 中的 beforeEnter 函数，我们来看它的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">beforeEnter</span><span style="color:#E1E4E8;">(el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onBeforeEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">state.isMounted) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (appear) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onBeforeAppear </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> onBeforeEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (el._leaveCb) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.</span><span style="color:#B392F0;">_leaveCb</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* cancelled */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> leavingVNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> leavingVNodesCache[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (leavingVNode </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">isSameVNodeType</span><span style="color:#E1E4E8;">(vnode, leavingVNode) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    leavingVNode.el._leaveCb) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    leavingVNode.el.</span><span style="color:#B392F0;">_leaveCb</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(hook, [el])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">beforeEnter</span><span style="color:#24292E;">(el) {</span></span>
<span class="line"><span style="color:#24292E;">  let hook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onBeforeEnter</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">state.isMounted) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (appear) {</span></span>
<span class="line"><span style="color:#24292E;">      hook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onBeforeAppear </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> onBeforeEnter</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (el._leaveCb) {</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">_leaveCb</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* cancelled */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> leavingVNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> leavingVNodesCache[key]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leavingVNode </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">isSameVNodeType</span><span style="color:#24292E;">(vnode, leavingVNode) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    leavingVNode.el._leaveCb) {</span></span>
<span class="line"><span style="color:#24292E;">    leavingVNode.el.</span><span style="color:#6F42C1;">_leaveCb</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(hook, [el])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>beforeEnter 钩子函数主要做的事情就是根据 appear 的值和 DOM 是否挂载，来执行 onBeforeEnter 函数或者是 onBeforeAppear 函数，其他的逻辑我们暂时先不看。</p><p>appear、onBeforeEnter、onBeforeAppear 这些变量都是从 props 中获取的，那么这些 props 是怎么初始化的呢？回到 Transition 组件的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> Transition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (props, { slots }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(BaseTransition, </span><span style="color:#B392F0;">resolveTransitionProps</span><span style="color:#E1E4E8;">(props), slots)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Transition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (props, { slots }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(BaseTransition, </span><span style="color:#6F42C1;">resolveTransitionProps</span><span style="color:#24292E;">(props), slots)</span></span></code></pre></div><p>可以看到，传递的 props 经过了 resolveTransitionProps 函数的封装，我们来看它的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">resolveTransitionProps</span><span style="color:#E1E4E8;">(rawProps) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let { name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;v&#39;</span><span style="color:#E1E4E8;">, type, css </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, duration, enterFromClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`\${name}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">enter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">from\`, enterActiveClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`\${name}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">enter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">active\`, enterToClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`\${name}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">enter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">to\`, appearFromClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> enterFromClass, appearActiveClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> enterActiveClass, appearToClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> enterToClass, leaveFromClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`\${name}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">leave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">from\`, leaveActiveClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`\${name}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">leave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">active\`, leaveToClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> \`\${name}</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">leave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">to\` } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rawProps</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> baseProps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key in rawProps) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(key in DOMTransitionPropsValidators)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      baseProps[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rawProps[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">css) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> baseProps</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> durations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeDuration</span><span style="color:#E1E4E8;">(duration)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> enterDuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> durations </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> durations[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> leaveDuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> durations </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> durations[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onBeforeEnter, onAppear </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onEnter, onAppearCancelled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onEnterCancelled } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> baseProps</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> finishEnter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (el, isAppear, done) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearToClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearActiveClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    done </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> finishLeave </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (el, done) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    done </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> makeEnterHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (isAppear) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (el, done) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> onAppear </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> onEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finishEnter</span><span style="color:#E1E4E8;">(el, isAppear, done)</span></span>
<span class="line"><span style="color:#E1E4E8;">      hook </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hook</span><span style="color:#E1E4E8;">(el, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">nextFrame</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearFromClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearToClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(hook </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> hook.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enterDuration) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(resolve, enterDuration)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">whenTransitionEnds</span><span style="color:#E1E4E8;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(baseProps, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onBeforeEnter</span><span style="color:#E1E4E8;">(el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      onBeforeEnter </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onBeforeEnter</span><span style="color:#E1E4E8;">(el)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, enterActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, enterFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onBeforeAppear</span><span style="color:#E1E4E8;">(el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      onBeforeAppear </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onBeforeAppear</span><span style="color:#E1E4E8;">(el)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, appearActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, appearFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    onEnter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeEnterHook</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    onAppear</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeEnterHook</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onLeave</span><span style="color:#E1E4E8;">(el, done) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finishLeave</span><span style="color:#E1E4E8;">(el, done)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">nextFrame</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(onLeave </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> onLeave.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (leaveDuration) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(resolve, leaveDuration)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">whenTransitionEnds</span><span style="color:#E1E4E8;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">      onLeave </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onLeave</span><span style="color:#E1E4E8;">(el, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onEnterCancelled</span><span style="color:#E1E4E8;">(el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finishEnter</span><span style="color:#E1E4E8;">(el, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      onEnterCancelled </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onEnterCancelled</span><span style="color:#E1E4E8;">(el)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onAppearCancelled</span><span style="color:#E1E4E8;">(el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finishEnter</span><span style="color:#E1E4E8;">(el, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      onAppearCancelled </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onAppearCancelled</span><span style="color:#E1E4E8;">(el)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onLeaveCancelled</span><span style="color:#E1E4E8;">(el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finishLeave</span><span style="color:#E1E4E8;">(el)</span></span>
<span class="line"><span style="color:#E1E4E8;">      onLeaveCancelled </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onLeaveCancelled</span><span style="color:#E1E4E8;">(el)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">resolveTransitionProps</span><span style="color:#24292E;">(rawProps) {</span></span>
<span class="line"><span style="color:#24292E;">  let { name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;v&#39;</span><span style="color:#24292E;">, type, css </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, duration, enterFromClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`\${name}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">enter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">from\`, enterActiveClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`\${name}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">enter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">active\`, enterToClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`\${name}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">enter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">to\`, appearFromClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> enterFromClass, appearActiveClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> enterActiveClass, appearToClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> enterToClass, leaveFromClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`\${name}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">leave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">from\`, leaveActiveClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`\${name}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">leave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">active\`, leaveToClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \`\${name}</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">leave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">to\` } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rawProps</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> baseProps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key in rawProps) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(key in DOMTransitionPropsValidators)) {</span></span>
<span class="line"><span style="color:#24292E;">      baseProps[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rawProps[key]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">css) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> baseProps</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> durations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">normalizeDuration</span><span style="color:#24292E;">(duration)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> enterDuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> durations </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> durations[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> leaveDuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> durations </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> durations[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onBeforeEnter, onAppear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onEnter, onAppearCancelled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onEnterCancelled } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> baseProps</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> finishEnter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (el, isAppear, done) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearToClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterToClass)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearActiveClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">    done </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> finishLeave </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (el, done) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">    done </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> makeEnterHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (isAppear) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (el, done) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> onAppear </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> onEnter</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finishEnter</span><span style="color:#24292E;">(el, isAppear, done)</span></span>
<span class="line"><span style="color:#24292E;">      hook </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hook</span><span style="color:#24292E;">(el, resolve)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">nextFrame</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearFromClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterFromClass)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearToClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterToClass)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(hook </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> hook.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enterDuration) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(resolve, enterDuration)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">whenTransitionEnds</span><span style="color:#24292E;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(baseProps, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onBeforeEnter</span><span style="color:#24292E;">(el) {</span></span>
<span class="line"><span style="color:#24292E;">      onBeforeEnter </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onBeforeEnter</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, enterActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, enterFromClass)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onBeforeAppear</span><span style="color:#24292E;">(el) {</span></span>
<span class="line"><span style="color:#24292E;">      onBeforeAppear </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onBeforeAppear</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, appearActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, appearFromClass)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    onEnter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeEnterHook</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    onAppear</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeEnterHook</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onLeave</span><span style="color:#24292E;">(el, done) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finishLeave</span><span style="color:#24292E;">(el, done)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">nextFrame</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(onLeave </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> onLeave.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leaveDuration) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(resolve, leaveDuration)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">whenTransitionEnds</span><span style="color:#24292E;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">      onLeave </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onLeave</span><span style="color:#24292E;">(el, resolve)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onEnterCancelled</span><span style="color:#24292E;">(el) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finishEnter</span><span style="color:#24292E;">(el, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      onEnterCancelled </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onEnterCancelled</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onAppearCancelled</span><span style="color:#24292E;">(el) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finishEnter</span><span style="color:#24292E;">(el, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      onAppearCancelled </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onAppearCancelled</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onLeaveCancelled</span><span style="color:#24292E;">(el) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finishLeave</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">      onLeaveCancelled </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onLeaveCancelled</span><span style="color:#24292E;">(el)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>resolveTransitionProps 函数主要作用是，在我们给 Transition 传递的 Props 基础上做一层封装，然后返回一个新的 Props 对象，由于它包含了所有的 Props 处理，你不需要一下子了解所有的实现，按需分析即可。</p><p>我们来看 onBeforeEnter 函数，它的内部执行了基础 props 传入的 onBeforeEnter 钩子函数，并且给 DOM 元素 el 添加了 enterActiveClass 和 enterFromClass 样式。</p><p>其中，props 传入的 onBeforeEnter 函数就是我们写 Transition 组件时添加的 beforeEnter 钩子函数。enterActiveClass 默认值是 v-enter-active，enterFromClass 默认值是 v-enter-from，如果给 Transition 组件传入了 name 的 prop，比如 fade，那么 enterActiveClass 的值就是 fade-enter-active，enterFromClass 的值就是 fade-enter-from。</p><p>原来这就是在 DOM 元素对象在创建后，插入到页面前做的事情：<strong>执行 beforeEnter 钩子函数</strong> ，<strong>以及给元素添加相应的 CSS 样式</strong>。</p><p>onBeforeAppear 和 onBeforeEnter 的逻辑类似，就不赘述了，它是在我们给 Transition 组件传入 appear 的 Prop，且首次挂载的时候执行的。</p><p>执行完 beforeEnter 钩子函数，接着插入元素到页面，然后会执行 vnode.transition 中的enter 钩子函数，我们来看它的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">enter</span><span style="color:#E1E4E8;">(el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">  let afterHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onAfterEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">  let cancelHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onEnterCancelled</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">state.isMounted) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (appear) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onAppear </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> onEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">      afterHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onAfterAppear </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> onAfterEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">      cancelHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onAppearCancelled </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> onEnterCancelled</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  let called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> done </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (el._enterCb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (cancelled) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (called)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cancelled) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(cancelHook, [el])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(afterHook, [el])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hooks.delayedLeave) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      hooks.</span><span style="color:#B392F0;">delayedLeave</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    el._enterCb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hook) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hook</span><span style="color:#E1E4E8;">(el, done)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hook.length </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">enter</span><span style="color:#24292E;">(el) {</span></span>
<span class="line"><span style="color:#24292E;">  let hook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onEnter</span></span>
<span class="line"><span style="color:#24292E;">  let afterHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onAfterEnter</span></span>
<span class="line"><span style="color:#24292E;">  let cancelHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onEnterCancelled</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">state.isMounted) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (appear) {</span></span>
<span class="line"><span style="color:#24292E;">      hook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onAppear </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> onEnter</span></span>
<span class="line"><span style="color:#24292E;">      afterHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onAfterAppear </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> onAfterEnter</span></span>
<span class="line"><span style="color:#24292E;">      cancelHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onAppearCancelled </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> onEnterCancelled</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  let called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> done </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (el._enterCb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (cancelled) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (called)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cancelled) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(cancelHook, [el])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(afterHook, [el])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hooks.delayedLeave) {</span></span>
<span class="line"><span style="color:#24292E;">      hooks.</span><span style="color:#6F42C1;">delayedLeave</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    el._enterCb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> undefined</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hook) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">hook</span><span style="color:#24292E;">(el, done)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hook.length </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>enter 钩子函数主要做的事情就是根据 appear 的值和 DOM 是否挂载，执行 onEnter 函数或者是 onAppear 函数，并且这个函数的第二个参数是一个 done 函数，表示过渡动画完成后执行的回调函数，它是异步执行的。</p><blockquote><p>注意，当 onEnter 或者 onAppear 函数的参数长度小于等于 1 的时候，done 函数在执行完 hook 函数后同步执行。</p></blockquote><p>在 done 函数的内部，我们会执行 onAfterEnter 函数或者是 onEnterCancelled 函数，其它的逻辑我们也暂时先不看。</p><p>同理，onEnter、onAppear、onAfterEnter 和 onEnterCancelled 函数也是从 Props 传入的，我们重点看 onEnter 的实现，它是 makeEnterHook(false) 函数执行后的返回值，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> makeEnterHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (isAppear) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (el, done) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> onAppear </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> onEnter</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finishEnter</span><span style="color:#E1E4E8;">(el, isAppear, done)</span></span>
<span class="line"><span style="color:#E1E4E8;">    hook </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hook</span><span style="color:#E1E4E8;">(el, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nextFrame</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearFromClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearToClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(hook </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> hook.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (enterDuration) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(resolve, enterDuration)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">whenTransitionEnds</span><span style="color:#E1E4E8;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> makeEnterHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (isAppear) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (el, done) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> onAppear </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> onEnter</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finishEnter</span><span style="color:#24292E;">(el, isAppear, done)</span></span>
<span class="line"><span style="color:#24292E;">    hook </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hook</span><span style="color:#24292E;">(el, resolve)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">nextFrame</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearFromClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterFromClass)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearToClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterToClass)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(hook </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> hook.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enterDuration) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(resolve, enterDuration)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">whenTransitionEnds</span><span style="color:#24292E;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在函数内部，首先执行基础 props 传入的 onEnter 钩子函数，然后在下一帧给 DOM 元素 el 移除了 enterFromClass，同时添加了 enterToClass 样式。</p><p>其中，props 传入的 onEnter 函数就是我们写 Transition 组件时添加的 enter 钩子函数，enterFromClass 是我们在 beforeEnter 阶段添加的，会在当前阶段移除，新增的 enterToClass 值默认是 v-enter-to，如果给 Transition 组件传入了 name 的 prop，比如 fade，那么 enterToClass 的值就是 fade-enter-to。</p><p>注意，当我们添加了 enterToClass 后，这个时候浏览器就开始根据我们编写的 CSS 进入过渡动画了，那么动画何时结束呢？</p><p>Transition 组件允许我们传入 enterDuration 这个 prop，它会指定进入过渡的动画时长，当然如果你不指定，Vue.js 内部会监听动画结束事件，然后在动画结束后，执行 finishEnter 函数，来看它的实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finishEnter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isAppear</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearToClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, isAppear </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> appearActiveClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> enterActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">  done </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finishEnter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">isAppear</span><span style="color:#24292E;">, </span><span style="color:#E36209;">done</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearToClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterToClass)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, isAppear </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> appearActiveClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> enterActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">  done </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其实就是给 DOM 元素移除 enterToClass 以及 enterActiveClass，同时执行 done 函数，进而执行 onAfterEnter 钩子函数。</p><p>至此，元素进入的过渡动画逻辑就分析完了，接下来我们来分析元素离开的过渡动画逻辑。</p><p>当元素被删除的时候，会执行 remove 方法，在真正从 DOM 移除元素前且存在过渡的情况下，会执行 vnode.transition 中的 leave 钩子函数，并且把移动 DOM 的方法作为第二个参数传入，我们来看它的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">leave</span><span style="color:#E1E4E8;">(el, remove) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(vnode.key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (el._enterCb) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.</span><span style="color:#B392F0;">_enterCb</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* cancelled */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (state.isUnmounting) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(onBeforeLeave, [el])</span></span>
<span class="line"><span style="color:#E1E4E8;">  let called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> done </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (el._leaveCb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (cancelled) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (called)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cancelled) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(onLeaveCancelled, [el])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(onAfterLeave, [el])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    el._leaveCb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (leavingVNodesCache[key] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> vnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      delete leavingVNodesCache[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  leavingVNodesCache[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (onLeave) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onLeave</span><span style="color:#E1E4E8;">(el, done)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (onLeave.length </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">leave</span><span style="color:#24292E;">(el, remove) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(vnode.key)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (el._enterCb) {</span></span>
<span class="line"><span style="color:#24292E;">    el.</span><span style="color:#6F42C1;">_enterCb</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* cancelled */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (state.isUnmounting) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(onBeforeLeave, [el])</span></span>
<span class="line"><span style="color:#24292E;">  let called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> done </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (el._leaveCb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (cancelled) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (called)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cancelled) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(onLeaveCancelled, [el])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(onAfterLeave, [el])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    el._leaveCb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> undefined</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leavingVNodesCache[key] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> vnode) {</span></span>
<span class="line"><span style="color:#24292E;">      delete leavingVNodesCache[key]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  leavingVNodesCache[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (onLeave) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onLeave</span><span style="color:#24292E;">(el, done)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (onLeave.length </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>leave 钩子函数主要做的事情就是执行 props 传入的 onBeforeLeave 钩子函数和 onLeave 函数，onLeave 函数的第二个参数是一个 done 函数，它表示离开过渡动画结束后执行的回调函数。</p><p>done 函数内部主要做的事情就是执行 remove 方法移除 DOM，然后执行 onAfterLeave 钩子函数或者是 onLeaveCancelled 函数，其它的逻辑我们也先不看。</p><p>接下来，我们重点看一下 onLeave 函数的实现，看看离开过渡动画是如何执行的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">onLeave</span><span style="color:#E1E4E8;">(el, done) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finishLeave</span><span style="color:#E1E4E8;">(el, done)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">nextFrame</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addTransitionClass</span><span style="color:#E1E4E8;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(onLeave </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> onLeave.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (leaveDuration) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(resolve, leaveDuration)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">whenTransitionEnds</span><span style="color:#E1E4E8;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  onLeave </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onLeave</span><span style="color:#E1E4E8;">(el, resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">onLeave</span><span style="color:#24292E;">(el, done) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> resolve </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finishLeave</span><span style="color:#24292E;">(el, done)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">nextFrame</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, leaveFromClass)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addTransitionClass</span><span style="color:#24292E;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(onLeave </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> onLeave.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leaveDuration) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(resolve, leaveDuration)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">whenTransitionEnds</span><span style="color:#24292E;">(el, type, resolve)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  onLeave </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onLeave</span><span style="color:#24292E;">(el, resolve)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>onLeave 函数首先给 DOM 元素添加 leaveActiveClass 和 leaveFromClass，并执行基础 props 传入的 onLeave 钩子函数，然后在下一帧移除 leaveFromClass，并添加 leaveToClass。</p><p>其中，leaveActiveClass 的默认值是 v-leave-active，leaveFromClass 的默认值是 v-leave-from，leaveToClass 的默认值是 v-leave-to。如果给 Transition 组件传入了 name 的 prop，比如 fade，那么 leaveActiveClass 的值就是 fade-leave-active，leaveFromClass 的值就是 fade-leave-from，leaveToClass 的值就是 fade-leave-to。</p><p>注意，当我们添加 leaveToClass 时，浏览器就开始根据我们编写的 CSS 执行离开过渡动画了，那么动画何时结束呢？</p><p>和进入动画类似，Transition 组件允许我们传入 leaveDuration 这个 prop，指定过渡的动画时长，当然如果你不指定，Vue.js 内部会监听动画结束事件，然后在动画结束后，执行 resolve 函数，它是执行 finishLeave 函数的返回值，来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> finishLeave </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (el, done) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">removeTransitionClass</span><span style="color:#E1E4E8;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#E1E4E8;">  done </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> finishLeave </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (el, done) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, leaveToClass)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">removeTransitionClass</span><span style="color:#24292E;">(el, leaveActiveClass)</span></span>
<span class="line"><span style="color:#24292E;">  done </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其实就是给 DOM 元素移除 leaveToClass 以及 leaveActiveClass，同时执行 done 函数，进而执行 onAfterLeave 钩子函数。</p><p>至此，元素离开的过渡动画逻辑就分析完了，可以看出离开过渡动画和进入过渡动画是的思路差不多，本质上都是在添加和移除一些 CSS 去执行动画，并且在过程中执行用户传入的钩子函数。</p><h3 id="模式的应用" tabindex="-1">模式的应用 <a class="header-anchor" href="#模式的应用" aria-label="Permalink to &quot;模式的应用&quot;">​</a></h3><p>前面我们在介绍 Transition 的渲染过程中提到过模式的应用，模式有什么用呢，我们还是通过示例说明，把前面的例子稍加修改：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click=&quot;show</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">!show&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Toggle</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;/button&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;transition</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;fade&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;show&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-else</span><span style="color:#E1E4E8;">&gt;hi&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  export default {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      return {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  .fade-enter-active,</span></span>
<span class="line"><span style="color:#E1E4E8;">  .fade-leave-active {</span></span>
<span class="line"><span style="color:#E1E4E8;">    transition: opacity 0.5s ease;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  .fade-enter-from,</span></span>
<span class="line"><span style="color:#E1E4E8;">  .fade-leave-to {</span></span>
<span class="line"><span style="color:#E1E4E8;">    opacity: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click=&quot;show</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">!show&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Toggle</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&lt;/button&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&lt;transition</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;fade&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;show&quot;</span><span style="color:#24292E;">&gt;hello&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-else</span><span style="color:#24292E;">&gt;hi&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">transition</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  export default {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      return {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  .fade-enter-active,</span></span>
<span class="line"><span style="color:#24292E;">  .fade-leave-active {</span></span>
<span class="line"><span style="color:#24292E;">    transition: opacity 0.5s ease;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  .fade-enter-from,</span></span>
<span class="line"><span style="color:#24292E;">  .fade-leave-to {</span></span>
<span class="line"><span style="color:#24292E;">    opacity: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>我们在 show 条件为 false 的情况下，显示字符串 hi，你可以运行这个示例，然后会发现这个过渡效果有点生硬，并不理想。</p><p>然后，我们给这个 Transition 组件加一个 out-in 的 mode：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">transition</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mode</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;out-in&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;fade&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;show&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-else</span><span style="color:#E1E4E8;">&gt;hi&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">transition</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mode</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;out-in&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;fade&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;show&quot;</span><span style="color:#24292E;">&gt;hello&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-else</span><span style="color:#24292E;">&gt;hi&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">transition</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>我们会发现这个过渡效果好多了，hello 文本先完成离开的过渡后，hi 文本开始进入过渡动画。</p><p>模式非常适合这种两个元素切换的场景，Vue.js 给 Transition 组件提供了两种模式， in-out 和 out-in ，它们有什么区别呢？</p><ul><li><p>在 in-out 模式下，新元素先进行过渡，完成之后当前元素过渡离开。</p></li><li><p>在 out-in 模式下，当前元素先进行过渡，完成之后新元素过渡进入。</p></li></ul><p>在实际工作中，你大部分情况都是在使用 out-in 模式，而 in-out 模式很少用到，所以接下来我们就来分析 out-in 模式的实现原理。</p><p>我们先不妨思考一下，为什么在不加模式的情况下，会出现示例那样的过渡效果。</p><p>当我们点击按钮，show 变量由 true 变成 false，会触发当前元素 hello 文本的离开动画，也会同时触发新元素 hi 文本的进入动画。由于动画是同时进行的，而且在离开动画结束之前，当前元素 hello 是没有被移除 DOM 的，所以它还会占位，就把新元素 hi 文本挤到下面去了。当 hello 文本的离开动画执行完毕从 DOM 中删除后，hi 文本才能回到之前的位置。</p><p>那么，我们怎么做才能做到当前元素过渡动画执行完毕后，再执行新元素的过渡呢？</p><p>我们来看一下 out-in 模式的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> leavingHooks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveTransitionHooks</span><span style="color:#E1E4E8;">(oldInnerChild, rawProps, state, instance)</span></span>
<span class="line"><span style="color:#B392F0;">setTransitionHooks</span><span style="color:#E1E4E8;">(oldInnerChild, leavingHooks)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;out-in&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  state.isLeaving </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  leavingHooks.afterLeave </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    state.isLeaving </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">emptyPlaceholder</span><span style="color:#E1E4E8;">(child)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> leavingHooks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveTransitionHooks</span><span style="color:#24292E;">(oldInnerChild, rawProps, state, instance)</span></span>
<span class="line"><span style="color:#6F42C1;">setTransitionHooks</span><span style="color:#24292E;">(oldInnerChild, leavingHooks)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;out-in&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  state.isLeaving </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  leavingHooks.afterLeave </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    state.isLeaving </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    instance.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emptyPlaceholder</span><span style="color:#24292E;">(child)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当模式为 out-in 的时候，会标记 state.isLeaving 为 true，然后返回一个空的注释节点，同时更新当前元素的钩子函数中的 afterLeave 函数，内部执行 instance.update 重新渲染组件。</p><p>这样做就保证了在当前元素执行离开过渡的时候，新元素只渲染成一个注释节点，这样页面上看上去还是只执行当前元素的离开过渡动画。</p><p>然后当离开动画执行完毕后，触发了 Transition 组件的重新渲染，这个时候就可以如期渲染新元素并执行进入过渡动画了，是不是很巧妙呢？</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>好的，到这里我们这一节的学习就结束啦，通过这节课的学习，你应该了解了 Transition 组件是如何渲染的，如何执行过渡动画和相应的钩子函数的，以及当两个视图切换时，模式的工作原理是怎样的。</p><p>最后，给你留一道思考题，Transition 组件在 beforeEnter 钩子函数里会判断 el._leaveCb 是否存在，存在则执行，在 leave 钩子函数里会判断 el._enterCb 是否存在，存在则执行，这么做的原因是什么？欢迎你在留言区与我分享。</p><blockquote><p>本节课的相关代码在源代码中的位置如下：</p><p>packages/runtime-core/src/components/BasetTransition.ts</p><p>packages/runtime-core/src/renderer.ts</p><p>packages/runtime-dom/src/components/Transition.ts</p></blockquote>`,64),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const C=s(p,[["render",t]]);export{v as __pageData,C as default};
