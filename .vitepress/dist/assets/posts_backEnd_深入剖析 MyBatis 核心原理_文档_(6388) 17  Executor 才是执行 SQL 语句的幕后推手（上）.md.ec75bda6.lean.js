import{_ as e,j as p,o as t,g as c,k as l,h as a,s,Q as o}from"./chunks/framework.b3d8e22e.js";const H=JSON.parse('{"title":"模板方法模式 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6388) 17  Executor 才是执行 SQL 语句的幕后推手（上）.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6388) 17  Executor 才是执行 SQL 语句的幕后推手（上）.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6388) 17  Executor 才是执行 SQL 语句的幕后推手（上）.md"},E=s("p",null,[a("这一讲我们开始介绍 MyBatis 中的另一个核心接口------ Executor 接口。在 Executor 接口的实现过程中，MyBatis 使用了"),s("strong",null,"装饰器模式"),a(" 和"),s("strong",null,"模板方法模式"),a(" 这两种经典的设计模式，在前面的"),s("a",{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&sid=20-h5Url-0&buyFrom=2&pageId=1pz4#/detail/pc?id=6380&fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"《09 | 基于 MyBatis 缓存分析装饰器模式的最佳实践》"),a("这一讲中，我们已经详细分析过装饰器模式的实现细节和优缺点，今天我们就一起来看一下模板方法模式的相关内容，这些都是理解 Executor 接口的基础。")],-1),y=s("h3",{id:"模板方法模式",tabindex:"-1"},[a("模板方法模式 "),s("a",{class:"header-anchor",href:"#模板方法模式","aria-label":'Permalink to "模板方法模式"'},"​")],-1),i=s("p",null,"在我们开发业务逻辑的时候，可能会遇到流程复杂的逻辑，而这个复杂逻辑本身是可以拆解成多个小的行为，这些小的行为本身可能根据业务场景的不同而有所变化。",-1),u=s("p",null,'这里我们以转账流程为例，如下图所示，整个转账流程是固定的，但是"验证密码""验证余额"和"扣除金额"这三步针对不同的银行卡，要调用不同银行的接口去完成。',-1),d=s("p",null,"不同银行卡转账流程示意图",-1),h=s("p",null,"为了让整个复杂流程的代码具有更好的扩展性，我们一般会使用模板方法模式来处理。",-1),_=s("p",null,'在模板方法模式中，我们可以将复杂流程中每个步骤的边界确定下来，然后由一个"模板方法"定义每个步骤的执行流程，每个步骤对应着一个方法，这些方法也被称为"基本方法"。模板方法按照业务逻辑依次调用上述基本方法，来实现完整的复杂流程。',-1),g=s("p",null,[s("strong",null,"模板方法模式会将模板方法以及不需要随业务场景变化的基本方法放到父类中实现，随业务场景变化的基本方法会被定义为抽象方法，由子类提供真正的实现。")],-1),m=s("p",null,"下图展示了模板方法模式的核心类，其中 template() 方法是我们上面描述的模板方法，part1() 方法和 part3() 方法是逻辑不变的基本方法实现，而 part2()、part4() 方法是两个随场景变化的基本方法。",-1),C=s("p",null,"模板方法模式示意图",-1),A=s("p",null,[a("我们可以"),s("strong",null,"通过模板方法控制整个流程的走向以及其中固定不变的步骤，子类来实现流程的某些变化细节"),a('，这就实现了"变化与不变"的解耦，也实现了"整个流程与单个步骤"的解耦。当业务需要改变流程中某些步骤的具体行为时，直接添加新的子类即可实现，这也非常符合"开放-封闭"原则。另外，模板方法模式能够充分利用面向对象的多态特性，在系统运行时再选择一种具体子类来执行完整的流程，这也从另一个角度提高了系统的灵活性。')],-1),F=s("h3",{id:"executor-接口",tabindex:"-1"},[a("Executor 接口 "),s("a",{class:"header-anchor",href:"#executor-接口","aria-label":'Permalink to "Executor 接口"'},"​")],-1),D=s("p",null,"介绍完模板方法模式之后，我们开始介绍 Executor 这个核心接口。",-1),S=s("p",null,"首先来看 Executor 接口定义的核心方法，如下图所示，Executor 接口定义了数据库操作的基本方法，其中 query*() 方法、update() 方法、flushStatement() 方法是执行 SQL 语句的基础方法，commit() 方法、rollback() 方法以及 getTransaction() 方法与事务的提交/回滚相关，clearLocalCache() 方法、createCacheKey() 方法与缓存有关。",-1),B=s("p",null,"Executor 接口结构图",-1),x=s("p",null,"MyBatis 中有多个 Executor 接口的实现类，如下图所示：",-1),f=o("",18),q=o("",10),b={href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},k=s("p",null,[s("strong",null,"《Java 工程师高薪训练营》")],-1),L=s("p",null,[a("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),a("！")],-1);function T(M,P,Q,w,O,R){const n=p("Image");return t(),c("div",null,[E,y,i,u,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/5C/Cgp9HWBRybGAVCakAADpGtj3zWY699.png"}),a(),d,h,_,g,m,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/59/CioPOWBRybmACYSWAAVsA89p6H4687.png"}),a(),C,A,F,D,S,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/59/CioPOWBRycSAIT9sAAIepMCg8VA941.png"}),a(),B,x,l(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/20/4C/CioPOWBS-s2AUysXAAFqkAUOqx0880.png"}),a(),f,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/1F/5C/Cgp9HWBRykSAb6pcAAF-EFg4WfE845.png"}),a(),q,s("p",null,[s("a",b,[l(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"})])]),k,L])}const I=e(r,[["render",T]]);export{H as __pageData,I as default};
