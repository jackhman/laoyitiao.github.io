import{_ as p,j as o,o as e,g as t,k as n,h as a,Q as l,s as r}from"./chunks/framework.4e7d56ce.js";const h=JSON.parse('{"title":"03DefiningQueryMethod的命名语法与参数","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4703) 03  Defining Query Method 的命名语法与参数.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4703) 03  Defining Query Method 的命名语法与参数.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4703) 03  Defining Query Method 的命名语法与参数.md"},E=l(`<h1 id="_03definingquerymethod的命名语法与参数" tabindex="-1">03DefiningQueryMethod的命名语法与参数 <a class="header-anchor" href="#_03definingquerymethod的命名语法与参数" aria-label="Permalink to &quot;03DefiningQueryMethod的命名语法与参数&quot;">​</a></h1><p>Spring Data JPA 的最大特色是利用<strong>方法名定义查询方法</strong>（Defining Query Methods）来做 CRUD 操作，这一课时我将围绕这个内容来详细讲解。</p><p>在工作中，你是否经常为方法名的语义、命名规范而发愁？是否要为不同的查询条件写各种的 SQL 语句？是否为同一个实体的查询，写一个超级通用的查询方法或者 SQL？如果其他开发同事不查看你写的 SQL 语句，而直接看方法名的话，却不知道你想查什么而郁闷？</p><p>Spring Data JPA 的 Defining Query Methods（DQM）通过方法名和参数，可以很好地解决上面的问题，也能让我们的方法名的语义更加清晰，开发效率也会提升很多。DQM 语法共有 2 种，可以实现上面的那些问题，具体如下：</p><ul><li><p>一种是直接通过方法名就可以实现，这也是本课时会详细介绍的重点内容；</p></li><li><p>另一种是 @Query 手动在方法上定义，这将在第 05 课时&quot;@Query 帮我们解决了什么问题？什么时候应该选择 @Query?&quot;中详细介绍。</p></li></ul><p>下面我将从 6 个方面来详细讲解 Defining Query Methods。先来分析一下&quot;定义查询方法的配置和使用方法&quot;，这个是 Defining Query Methods 中必须要掌握的语法。</p><h3 id="定义查询方法的配置和使用方法" tabindex="-1">定义查询方法的配置和使用方法 <a class="header-anchor" href="#定义查询方法的配置和使用方法" aria-label="Permalink to &quot;定义查询方法的配置和使用方法&quot;">​</a></h3><p>若想要实现 CRUD 的操作，常规做法是写一大堆 SQL 语句。但在 JPA 里面，只需要继承 Spring Data Common 里面的任意 Repository 接口或者子接口，然后直接通过方法名就可以实现，神不神奇？来看下面具体的使用步骤。</p><p>第 1 步，User 实体的 UserRepository 继承 Spring Data Common 里面的 Repository 接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CrudRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">     User </span><span style="color:#B392F0;">findByEmailAddress</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">emailAddress</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CrudRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">     User </span><span style="color:#6F42C1;">findByEmailAddress</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">emailAddress</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第 2 步，对于 Service 层就可以直接使用 UserRepository 接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceImpl</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testJpa</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">findByEmailAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zjk@126.com&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceImpl</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testJpa</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">findByEmailAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zjk@126.com&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>这个时候就可以直接调用 CrudRepository 里面暴露的所有接口方法，以及 UserRepository 里面定义的方法，不需要写任何 SQL 语句，也不需要写任何实现方法。通过上面的两步我们完成了 Defining Query Methods（DQM）的基本使用，下面来看另外一种情况：<strong>选择性暴露方法</strong>。</p><p>然而，有时如果不想暴露 CrudRepository 里面的所有方法，那么可以直接继承我们认为需要暴露的那些方法的接口。假如 UserRepository 只想暴露 findOne 和 save，除了这两个方法之外不允许任何的 User 操作，其做法如下。</p><p>我们选择性地暴露 CRUD 方法，直接继承Repository（因为这里面没有任何方法），把CrudRepository 里面的 save 和 findOne 方法复制到我们自己的 MyBaseRepository 接口即可，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoRepositoryBean</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyBaseRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Serializable</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Repository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    T </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    T </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyBaseRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">     User </span><span style="color:#B392F0;">findByEmailAddress</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">emailAddress</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoRepositoryBean</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyBaseRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Serializable</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Repository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    T </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    T </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyBaseRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">     User </span><span style="color:#6F42C1;">findByEmailAddress</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">emailAddress</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样在 Service 层就只有 findOne、save、findByEmailAddress 这 3 个方法可以调用，不会有更多方法了，我们可以对 SimpleJpaRepository 里面任意已经实现的方法做选择性暴露。</p><p>综上所述，得出以下 2 点结论：</p><ul><li><p>MyRepository Extends Repository 接口可以实现 Defining Query Methods 的功能；</p></li><li><p>继承其他 Repository 的子接口，或者自定义子接口，可以选择性地暴露 SimpleJpaRepository 里面已经实现的基础公用方法。</p></li></ul><p>在平时的工作中，你可以通过方法名，或者定义方法名上面添加 @Query 注解两种方式来实现 CRUD 的目的，而 Spring 给我们提供了两种切换方式。接下来我们就讲讲&quot;方法的查询策略设置&quot;。</p><h3 id="方法的查询策略设置" tabindex="-1">方法的查询策略设置 <a class="header-anchor" href="#方法的查询策略设置" aria-label="Permalink to &quot;方法的查询策略设置&quot;">​</a></h3><p>目前在实际生产中还没有遇到要修改默认策略的情况，但我们必须要知道有这样的配置方法，做到心中有数，这样我们才能知道为什么方法名可以，@Query 也可以。通过 @EnableJpaRepositories 注解来配置方法的查询策略，详细配置方法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">queryLookupStrategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryLookupStrategy.Key.CREATE_IF_NOT_FOUND)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">queryLookupStrategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryLookupStrategy.Key.CREATE_IF_NOT_FOUND)</span></span></code></pre></div><p>其中，QueryLookupStrategy.Key 的值共 3 个，具体如下：</p><ul><li><p><strong>Create</strong>：直接根据方法名进行创建，规则是根据方法名称的构造进行尝试，一般的方法是从方法名中删除给定的一组已知前缀，并解析该方法的其余部分。如果方法名不符合规则，启动的时候会报异常，这种情况可以理解为，即使配置了 @Query 也是没有用的。</p></li><li><p><strong>USE_DECLARED_QUERY</strong>：声明方式创建，启动的时候会尝试找到一个声明的查询，如果没有找到将抛出一个异常，可以理解为必须配置 @Query。</p></li><li><p><strong>CREATE_IF_NOT_FOUND</strong>：这个是默认的，除非有特殊需求，可以理解为这是以上 2 种方式的兼容版。先用声明方式（@Query）进行查找，如果没有找到与方法相匹配的查询，那用 Create 的方法名创建规则创建一个查询；这两者都不满足的情况下，启动就会报错。</p></li></ul><p>以 Spring Boot 项目为例，更改其配置方法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">queryLookupStrategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryLookupStrategy.Key.CREATE_IF_NOT_FOUND)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example1Application</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Example1Application.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">queryLookupStrategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryLookupStrategy.Key.CREATE_IF_NOT_FOUND)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example1Application</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Example1Application.class, args);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上就是方法的查询策略设置，很简单。接下来我们再讲讲&quot;Defining Query Method（DQM）语法&quot;，这是可以让方法生效的详细语法。</p><h3 id="defining-query-method-dqm-语法" tabindex="-1">Defining Query Method（DQM）语法 <a class="header-anchor" href="#defining-query-method-dqm-语法" aria-label="Permalink to &quot;Defining Query Method（DQM）语法&quot;">​</a></h3><p>该语法是：带查询功能的方法名由查询策略（关键字）+ 查询字段 + 一些限制性条件组成，具有语义清晰、功能完整的特性，我们实际工作中 80% 的 API 查询都可以简单实现。</p><p>我们来看一个复杂点的例子，这是一个 and 条件更多、distinct or 排序、忽略大小写的例子。下面代码定义了 PersonRepository，我们可以在 service 层直接使用，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PersonRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Repository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// and 的查询关系</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByEmailAddressAndLastname</span><span style="color:#E1E4E8;">(EmailAddress </span><span style="color:#FFAB70;">emailAddress</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 包含 distinct 去重，or 的 sql 语法</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findDistinctPeopleByLastnameOrFirstname</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">firstname</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 根据 lastname 字段查询忽略大小写</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByLastnameIgnoreCase</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 根据 lastname 和 firstname 查询 equal 并且忽略大小写</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByLastnameAndFirstnameAllIgnoreCase</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">firstname</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对查询结果根据 lastname 排序，正序</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByLastnameOrderByFirstnameAsc</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对查询结果根据 lastname 排序，倒序</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByLastnameOrderByFirstnameDesc</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersonRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Repository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// and 的查询关系</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByEmailAddressAndLastname</span><span style="color:#24292E;">(EmailAddress </span><span style="color:#E36209;">emailAddress</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 包含 distinct 去重，or 的 sql 语法</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findDistinctPeopleByLastnameOrFirstname</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">firstname</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 根据 lastname 字段查询忽略大小写</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByLastnameIgnoreCase</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 根据 lastname 和 firstname 查询 equal 并且忽略大小写</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByLastnameAndFirstnameAllIgnoreCase</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">firstname</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对查询结果根据 lastname 排序，正序</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByLastnameOrderByFirstnameAsc</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对查询结果根据 lastname 排序，倒序</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByLastnameOrderByFirstnameDesc</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面表格是一个我们在上面 DQM 方法语法里常用的关键字列表，方便你快速查阅，并满足在实际代码中更加复杂的场景：</p>`,33),y=l(`<p>综上，总结 3 点经验：</p><ul><li><p>方法名的表达式通常是实体属性连接运算符的组合，如 And、or、Between、LessThan、GreaterThan、Like 等属性连接运算表达式，不同的数据库（NoSQL、MySQL）可能产生的效果不一样，如果遇到问题，我们可以打开 SQL 日志观察。</p></li><li><p>IgnoreCase 可以针对单个属性（如 findByLastnameIgnoreCase(...)），也可以针对查询条件里面所有的实体属性忽略大小写（所有属性必须在 String 情况下，如 findByLastnameAndFirstnameAllIgnoreCase(...)）。</p></li><li><p>OrderBy 可以在某些属性的排序上提供方向（Asc 或 Desc），称为静态排序，也可以通过一个方便的参数 Sort 实现指定字段的动态排序的查询方法（如 repository.findAll(Sort.by(Sort.Direction.ASC, &quot;myField&quot;))）。</p></li></ul><p>我们看到上面的表格虽然大多是 find 开头的方法，除此之外，JPA 还支持read、get、query、stream、count、exists、delete、remove等前缀，如字面意思一样。我们来看看 count、delete、remove 的例子，其他前缀可以举一反三。实例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CrudRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">countByLastname</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//查询总数</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteByLastname</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//根据一个字段进行删除操作，并返回删除行数</span></span>
<span class="line"><span style="color:#E1E4E8;">     List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">removeByLastname</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lastname</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//根据Lastname删除一堆User,并返回删除的User</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CrudRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">countByLastname</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//查询总数</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteByLastname</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//根据一个字段进行删除操作，并返回删除行数</span></span>
<span class="line"><span style="color:#24292E;">     List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">removeByLastname</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lastname</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//根据Lastname删除一堆User,并返回删除的User</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有的时候随着版本的更新，也会有更多的语法支持，或者不同的版本语法可能也不一样，我们通过源码来看一下上面说的几种语法。感兴趣的同学可以到类 org.springframework.data.repository.query.parser.PartTree 查看相关源码的逻辑和处理方法，关键源码如下：</p>`,5),i=r("p",null,"根据源码我们也可以分析出来，query method 包含其他的表达式，比如 find、count、delete、exist 等关键字在 by 之前通过正则表达式匹配。",-1),F=l(`<p>由此可知，我们方法中的关键字不是乱填的，是枚举帮我们定义好的。接下来打开枚举类 Type 源码看下，比什么都清楚。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">BETWEEN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsBetween&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Between&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">IS_NOT_NULL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNotNull&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;NotNull&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">IS_NULL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNull&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Null&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">LESS_THAN</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsLessThan&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;LessThan&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">LESS_THAN_EQUAL</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsLessThanEqual&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;LessThanEqual&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">GREATER_THAN</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsGreaterThan&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;GreaterThan&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">GREATER_THAN_EQUAL</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsGreaterThanEqual&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;GreaterThanEqual&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">BEFORE</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsBefore&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Before&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">AFTER</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsAfter&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;After&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NOT_LIKE</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNotLike&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;NotLike&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">LIKE</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsLike&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Like&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">STARTING_WITH</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsStartingWith&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;StartingWith&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;StartsWith&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ENDING_WITH</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsEndingWith&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;EndingWith&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;EndsWith&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">IS_NOT_EMPTY</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNotEmpty&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;NotEmpty&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">IS_EMPTY</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsEmpty&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Empty&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NOT_CONTAINING</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNotContaining&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;NotContaining&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;NotContains&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">CONTAINING</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsContaining&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Containing&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Contains&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NOT_IN</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNotIn&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;NotIn&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">IN</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsIn&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;In&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NEAR</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNear&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Near&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">WITHIN</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsWithin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Within&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">REGEX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;MatchesRegex&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Matches&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Regex&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">EXISTS</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;Exists&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">TRUE</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsTrue&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;True&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">FALSE</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsFalse&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;False&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NEGATING_SIMPLE_PROPERTY</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;IsNot&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Not&quot;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SIMPLE_PROPERTY</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]{</span><span style="color:#9ECBFF;">&quot;Is&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Equals&quot;</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">....}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">BETWEEN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsBetween&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Between&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">IS_NOT_NULL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNotNull&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;NotNull&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">IS_NULL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNull&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Null&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">LESS_THAN</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsLessThan&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;LessThan&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">LESS_THAN_EQUAL</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsLessThanEqual&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;LessThanEqual&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">GREATER_THAN</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsGreaterThan&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;GreaterThan&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">GREATER_THAN_EQUAL</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsGreaterThanEqual&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;GreaterThanEqual&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">BEFORE</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsBefore&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Before&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">AFTER</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsAfter&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;After&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NOT_LIKE</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNotLike&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;NotLike&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">LIKE</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsLike&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Like&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">STARTING_WITH</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsStartingWith&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;StartingWith&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;StartsWith&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ENDING_WITH</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsEndingWith&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EndingWith&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;EndsWith&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">IS_NOT_EMPTY</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNotEmpty&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;NotEmpty&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">IS_EMPTY</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsEmpty&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Empty&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NOT_CONTAINING</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNotContaining&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;NotContaining&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;NotContains&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">CONTAINING</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsContaining&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Containing&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Contains&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NOT_IN</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNotIn&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;NotIn&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">IN</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsIn&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;In&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NEAR</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNear&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Near&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">WITHIN</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsWithin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Within&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">REGEX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;MatchesRegex&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Matches&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Regex&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">EXISTS</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;Exists&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">TRUE</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsTrue&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;True&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">FALSE</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsFalse&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;False&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NEGATING_SIMPLE_PROPERTY</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;IsNot&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Not&quot;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SIMPLE_PROPERTY</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]{</span><span style="color:#032F62;">&quot;Is&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Equals&quot;</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">....}</span></span></code></pre></div><p>看源码就可以知道框架支持了哪些逻辑关键字，比如 NotIn、Like、In、Exists 等，有的时候比查文档和任何人写的博客都准确、还快。好了，上面介绍了方面名的基本表达方式，希望你可以在工作中灵活运用，举一反三。接下来我们讲讲特定类型的参数：Sort 排序和 Pageable 分页，这是分页和排序必备技能。</p><h3 id="特定类型的参数-sort-排序和-pageable-分页" tabindex="-1">特定类型的参数：Sort 排序和 Pageable 分页 <a class="header-anchor" href="#特定类型的参数-sort-排序和-pageable-分页" aria-label="Permalink to &quot;特定类型的参数：Sort 排序和 Pageable 分页&quot;">​</a></h3><p>Spring Data JPA 为了方便我们排序和分页，支持了两个特殊类型的参数：Sort 和 Pageable。</p><p>Sort 在查询的时候可以实现动态排序，我们看下其源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sort</span><span style="color:#E1E4E8;">(Direction direction, String... properties) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">(direction, properties </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(properties));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sort</span><span style="color:#24292E;">(Direction direction, String... properties) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">(direction, properties </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(properties));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Sort 里面决定了我们哪些字段的排序方向（ASC 正序、DESC 倒序）。</p><p>Pageable 在查询的时候可以实现分页效果和动态排序双重效果，我们看下 Pageable 的 Structure，如下图所示：</p>`,9),d=l(`<p>我们发现 Pageable 是一个接口，里面有常见的分页方法排序、当前页、下一行、当前指针、一共多少页、页码、pageSize 等。</p><p>在查询方法中如何使用 Pageable 和 Sort 呢？下面代码定义了根据 Lastname 查询 User 的分页和排序的实例，此段代码是在 UserRepository 接口里面定义的方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Page</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(String lastname, Pageable pageable);</span><span style="color:#6A737D;">//根据分页参数查询User，返回一个带分页结果的Page(下一课时详解)对象（方法一）</span></span>
<span class="line"><span style="color:#E1E4E8;">Slice</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(String lastname, Pageable pageable);</span><span style="color:#6A737D;">//我们根据分页参数返回一个Slice的user结果（方法二）</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(String lastname, Sort sort);</span><span style="color:#6A737D;">//根据排序结果返回一个List（方法三）</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(String lastname, Pageable pageable);</span><span style="color:#6A737D;">//根据分页参数返回一个List对象（方法四）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Page</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(String lastname, Pageable pageable);</span><span style="color:#6A737D;">//根据分页参数查询User，返回一个带分页结果的Page(下一课时详解)对象（方法一）</span></span>
<span class="line"><span style="color:#24292E;">Slice</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(String lastname, Pageable pageable);</span><span style="color:#6A737D;">//我们根据分页参数返回一个Slice的user结果（方法二）</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(String lastname, Sort sort);</span><span style="color:#6A737D;">//根据排序结果返回一个List（方法三）</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(String lastname, Pageable pageable);</span><span style="color:#6A737D;">//根据分页参数返回一个List对象（方法四）</span></span></code></pre></div><p><strong>方法一</strong>：允许将 org.springframework.data.domain.Pageable 实例传递给查询方法，将分页参数添加到静态定义的查询中，通过 Page 返回的结果得知可用的元素和页面的总数。这种分页查询方法可能是昂贵的（会默认执行一条 count 的 SQL 语句），所以用的时候要考虑一下使用场景。</p><p><strong>方法二</strong>：返回结果是 Slice，因为只知道是否有下一个 Slice 可用，而不知道 count，所以当查询较大的结果集时，只知道数据是足够的，也就是说用在业务场景中时不用关心一共有多少页。</p><p><strong>方法三</strong>：如果只需要排序，需在 org.springframework.data.domain.Sort 参数中添加一个参数，正如上面看到的，只需返回一个 List 也是有可能的。</p><p><strong>方法四</strong>：排序选项也通过 Pageable 实例处理，在这种情况下，Page 将不会创建构建实际实例所需的附加元数据（即不需要计算和查询分页相关数据），而仅仅用来做限制查询给定范围的实体。</p><p>那么如何使用呢？我们再来看一下源码，也就是 Pageable 的实现类，如下图所示：</p>`,8),g=l(`<p>由此可知，我们可以通过 PageRequest 里面提供的几个 of 静态方法（多态），分别构建页码、页面大小、排序等。我们来看下，在使用中的写法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//查询user里面的lastname=jk的第一页，每页大小是20条；并会返回一共有多少页的信息</span></span>
<span class="line"><span style="color:#E1E4E8;">Page&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jk&quot;</span><span style="color:#E1E4E8;">,PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//查询user里面的lastname=jk的第一页的20条数据，不知道一共多少条</span></span>
<span class="line"><span style="color:#E1E4E8;">Slice&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jk&quot;</span><span style="color:#E1E4E8;">,PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//查询出来所有的user里面的lastname=jk的User数据，并按照name正序返回List</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jk&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sort</span><span style="color:#E1E4E8;">(Sort.Direction.ASC, </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">//按照createdAt倒序，查询前一百条User数据</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findByLastname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jk&quot;</span><span style="color:#E1E4E8;">,PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, Sort.Direction.DESC, </span><span style="color:#9ECBFF;">&quot;createdAt&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//查询user里面的lastname=jk的第一页，每页大小是20条；并会返回一共有多少页的信息</span></span>
<span class="line"><span style="color:#24292E;">Page&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jk&quot;</span><span style="color:#24292E;">,PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//查询user里面的lastname=jk的第一页的20条数据，不知道一共多少条</span></span>
<span class="line"><span style="color:#24292E;">Slice&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jk&quot;</span><span style="color:#24292E;">,PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//查询出来所有的user里面的lastname=jk的User数据，并按照name正序返回List</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jk&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sort</span><span style="color:#24292E;">(Sort.Direction.ASC, </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">//按照createdAt倒序，查询前一百条User数据</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findByLastname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jk&quot;</span><span style="color:#24292E;">,PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, Sort.Direction.DESC, </span><span style="color:#032F62;">&quot;createdAt&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>上面讲解了分页和排序的应用场景，在实际工作中，如果遇到不知道参数怎么传递的情况，可以看一下源码，因为 Java 是类型安全的。接下来讲解&quot;限制查询结果 First 和 Top&quot;，这是分页的另一种表达方式。</p><h3 id="限制查询结果-first-和-top" tabindex="-1">限制查询结果 First 和 Top <a class="header-anchor" href="#限制查询结果-first-和-top" aria-label="Permalink to &quot;限制查询结果 First 和 Top&quot;">​</a></h3><p>有的时候我们想直接查询前几条数据，也不需要动态排序，那么就可以简单地在方法名字中使用 First 和 Top 关键字，来限制返回条数。</p><p>我们来看看 userRepository 里面可以定义的一些限制返回结果的使用。在查询方法上加限制查询结果的关键字 First 和 Top。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">User </span><span style="color:#B392F0;">findFirstByOrderByLastnameAsc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">User </span><span style="color:#B392F0;">findTopByOrderByAgeDesc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findDistinctUserTop3ByLastname</span><span style="color:#E1E4E8;">(String lastname, Pageable pageable);</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findFirst10ByLastname</span><span style="color:#E1E4E8;">(String lastname, Sort sort);</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findTop10ByLastname</span><span style="color:#E1E4E8;">(String lastname, Pageable pageable);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">User </span><span style="color:#6F42C1;">findFirstByOrderByLastnameAsc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">User </span><span style="color:#6F42C1;">findTopByOrderByAgeDesc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findDistinctUserTop3ByLastname</span><span style="color:#24292E;">(String lastname, Pageable pageable);</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findFirst10ByLastname</span><span style="color:#24292E;">(String lastname, Sort sort);</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findTop10ByLastname</span><span style="color:#24292E;">(String lastname, Pageable pageable);</span></span></code></pre></div><p>其中：</p><ul><li><p>查询方法在使用 First 或 Top 时，数值可以追加到 First 或 Top 后面，指定返回最大结果的大小；</p></li><li><p>如果数字被省略，则假设结果大小为 1；</p></li><li><p>限制表达式也支持 Distinct 关键字；</p></li><li><p>支持将结果包装到 Optional 中（下一课时详解）。</p></li><li><p>如果将 Pageable 作为参数，以 Top 和 First 后面的数字为准，即分页将在限制结果中应用。</p></li></ul><p>First 和 Top 关键字的使用非常简单，可以让我们的方法名语义更加清晰。接下来讲讲 NULL 的情况作了哪些支持。</p><h3 id="nonnull、-nonnullapi、-nullable" tabindex="-1"><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNull.html" target="_blank" rel="noreferrer">@NonNull</a>、<a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNullApi.html" target="_blank" rel="noreferrer">@NonNullApi</a>、<a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/Nullable.html" target="_blank" rel="noreferrer">@Nullable</a> <a class="header-anchor" href="#nonnull、-nonnullapi、-nullable" aria-label="Permalink to &quot;[@NonNull](https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNull.html)、[@NonNullApi](https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNullApi.html)、[@Nullable](https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/Nullable.html)&quot;">​</a></h3><p>从 Spring Data 2.0 开始，JPA 新增了<a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNull.html" target="_blank" rel="noreferrer">@NonNull</a> <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/NonNullApi.html" target="_blank" rel="noreferrer">@NonNullApi</a> <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/lang/Nullable.html" target="_blank" rel="noreferrer">@Nullable</a>，是对 null 的参数和返回结果做的支持。</p><ul><li><p><strong>@NonNullApi</strong>：在包级别用于声明参数，以及返回值的默认行为是不接受或产生空值的。</p></li><li><p><strong>@NonNull</strong>：用于不能为空的参数或返回值（在 @NonNullApi 适用的参数和返回值上不需要）。</p></li><li><p><strong>@Nullable</strong>：用于可以为空的参数或返回值。</p></li></ul><p>我在自己的 Repository 所在 package 的 package-info.java 类里面做如下声明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">org</span><span style="color:#E1E4E8;">.springframework.lang.NonNullApi</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.myrespository;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">org</span><span style="color:#24292E;">.springframework.lang.NonNullApi</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.myrespository;</span></span></code></pre></div><p>myrespository 下面的 UserRepository 实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.myrespository;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.lang.Nullable;</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Repository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  User </span><span style="color:#B392F0;">getByEmailAddress</span><span style="color:#E1E4E8;">(EmailAddress </span><span style="color:#FFAB70;">emailAddress</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.myrespository;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.lang.Nullable;</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Repository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  User </span><span style="color:#6F42C1;">getByEmailAddress</span><span style="color:#24292E;">(EmailAddress </span><span style="color:#E36209;">emailAddress</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个时候当 emailAddress 参数为 null 的时候就会抛异常，当返回结果为 null 的时候也会抛异常。因为我们在package 的 package-info.java里面指定了NonNullApi，所有返回结果和参数不能为 Null。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#E1E4E8;">  User </span><span style="color:#B392F0;">findByEmailAddress</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> EmailAddress emailAdress);</span><span style="color:#6A737D;">//当我们添加@Nullable 注解之后，参数和返回结果这个时候就都会允许为 null 了；</span></span>
<span class="line"><span style="color:#E1E4E8;">  Optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findOptionalByEmailAddress</span><span style="color:#E1E4E8;">(EmailAddress emailAddress); </span><span style="color:#6A737D;">//返回结果允许为 null,参数不允许为 null 的情况</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#24292E;">  User </span><span style="color:#6F42C1;">findByEmailAddress</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> EmailAddress emailAdress);</span><span style="color:#6A737D;">//当我们添加@Nullable 注解之后，参数和返回结果这个时候就都会允许为 null 了；</span></span>
<span class="line"><span style="color:#24292E;">  Optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findOptionalByEmailAddress</span><span style="color:#24292E;">(EmailAddress emailAddress); </span><span style="color:#6A737D;">//返回结果允许为 null,参数不允许为 null 的情况</span></span></code></pre></div><p>以上就是对 Defining Query Methods 的方法名和分页参数整体学习了。</p><h3 id="给我们的一些思考" tabindex="-1">给我们的一些思考 <a class="header-anchor" href="#给我们的一些思考" aria-label="Permalink to &quot;给我们的一些思考&quot;">​</a></h3><p>我们学习了 Defining Query Methods 的语法和其所表达的命名规范，在实际工作中，也可以将方法名（非常语义化的 respository 里面所定义方法命名规范）的强制约定规范运用到 controller 和 service 层，这样全部统一后，可以减少很多的沟通成本。</p><p>Spring Data Common 里面的 repository 基类，我们是否可以应用推广到 service 层呢？能否也建立一个自己的 baseService？我们来看下面的实战例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseService</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getDomainClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; S </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(S </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; List&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">saveAll</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteById</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteInBatch</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAllInBatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    T </span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Optional&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Optional&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Sort </span><span style="color:#FFAB70;">sort</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Page&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; List&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; List&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">, Sort </span><span style="color:#FFAB70;">sort</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Page&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">, Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllById</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">ids</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">existsById</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; S </span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(S </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseService</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getDomainClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; S </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(S </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; List&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">saveAll</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteById</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteInBatch</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAllInBatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    T </span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Optional&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Optional&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Sort </span><span style="color:#E36209;">sort</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Page&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; List&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; List&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">, Sort </span><span style="color:#E36209;">sort</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Page&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">, Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllById</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">ids</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">existsById</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; S </span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(S </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们模仿JpaRepository接口也自定义了一个自己的BaseService，声明了常用的CRUD操作，上面的代码是生产代码，可以作为参考。当然了我们也可以建立自己的 PagingAndSortingService、ComplexityService、SampleService 等来划分不同的 service接口，供不同目的 Service 子类继承。</p><p>我们再来模仿一个 SimpleJpaRepository，来实现自己的 BaseService 的实现类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseServiceImpl</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> JpaRepository&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseService</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">Class</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Class</span><span style="color:#E1E4E8;">&gt; DOMAIN_CLASS_CACHE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> R repository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseServiceImpl</span><span style="color:#E1E4E8;">(R </span><span style="color:#FFAB70;">repository</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.repository </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> repository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getDomainClass</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class thisClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; domainClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DOMAIN_CLASS_CACHE.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(thisClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Objects.</span><span style="color:#B392F0;">isNull</span><span style="color:#E1E4E8;">(domainClass)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            domainClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenericsUtils.</span><span style="color:#B392F0;">getGenericClass</span><span style="color:#E1E4E8;">(thisClass, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            DOMAIN_CLASS_CACHE.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(thisClass, domainClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> domainClass;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> R </span><span style="color:#B392F0;">getRepository</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; S </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(S </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(entity);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; List&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">saveAll</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">saveAll</span><span style="color:#E1E4E8;">(entities);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        repository.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(entity);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteById</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        repository.</span><span style="color:#B392F0;">deleteById</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        repository.</span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        repository.</span><span style="color:#B392F0;">deleteAll</span><span style="color:#E1E4E8;">(entities);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteInBatch</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        repository.</span><span style="color:#B392F0;">deleteInBatch</span><span style="color:#E1E4E8;">(entities);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteAllInBatch</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        repository.</span><span style="color:#B392F0;">deleteAllInBatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Optional&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(example);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Optional&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Sort </span><span style="color:#FFAB70;">sort</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(sort);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Page&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(pageable);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; List&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(example);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; List&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">, Sort </span><span style="color:#FFAB70;">sort</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(example, sort);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Page&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">, Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(example, pageable);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllById</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">ids</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAllById</span><span style="color:#E1E4E8;">(ids);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(example);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(example);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">existsById</span><span style="color:#E1E4E8;">(ID </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">existsById</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        repository.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; S </span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(S </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(entity);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseServiceImpl</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">R</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> JpaRepository&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseService</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">&gt; DOMAIN_CLASS_CACHE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> R repository;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseServiceImpl</span><span style="color:#24292E;">(R </span><span style="color:#E36209;">repository</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.repository </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> repository;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getDomainClass</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Class thisClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; domainClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DOMAIN_CLASS_CACHE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(thisClass);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Objects.</span><span style="color:#6F42C1;">isNull</span><span style="color:#24292E;">(domainClass)) {</span></span>
<span class="line"><span style="color:#24292E;">            domainClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenericsUtils.</span><span style="color:#6F42C1;">getGenericClass</span><span style="color:#24292E;">(thisClass, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            DOMAIN_CLASS_CACHE.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(thisClass, domainClass);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> domainClass;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> R </span><span style="color:#6F42C1;">getRepository</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; S </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(S </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(entity);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; List&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">saveAll</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">saveAll</span><span style="color:#24292E;">(entities);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        repository.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(entity);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteById</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        repository.</span><span style="color:#6F42C1;">deleteById</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        repository.</span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        repository.</span><span style="color:#6F42C1;">deleteAll</span><span style="color:#24292E;">(entities);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteInBatch</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        repository.</span><span style="color:#6F42C1;">deleteInBatch</span><span style="color:#24292E;">(entities);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteAllInBatch</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        repository.</span><span style="color:#6F42C1;">deleteAllInBatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Optional&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(example);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Optional&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Sort </span><span style="color:#E36209;">sort</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(sort);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Page&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(pageable);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; List&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(example);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; List&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">, Sort </span><span style="color:#E36209;">sort</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(example, sort);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Page&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">, Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(example, pageable);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllById</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">ids</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAllById</span><span style="color:#24292E;">(ids);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(example);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(example);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">existsById</span><span style="color:#24292E;">(ID </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">existsById</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        repository.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; S </span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(S </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(entity);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码就是 BaseService 常用的 CURD 实现代码，我们这里面大部分也是直接调用 Repository 提供的方法。需要注意的是，当继承 BaseServiceImpl 的时候需要传递自己的 Repository，如下面实例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseServiceImpl</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">UserRepository</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceImpl</span><span style="color:#E1E4E8;">(UserRepository </span><span style="color:#FFAB70;">repository</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(repository);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseServiceImpl</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">UserRepository</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceImpl</span><span style="color:#24292E;">(UserRepository </span><span style="color:#E36209;">repository</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(repository);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    .....</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>实战思考只是提供一种常见的实现思路，你也可以根据实际情况进行扩展和扩充。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时主要讲解了 Defining Query Methods 的语法和参数部分的内容。首先介绍了配置方法，其次讲解了 DQM 语法结构所支持的关键字和特殊参数类型，最后对分页和 Null 做了特殊说明。通过本课时的学习，希望你可以轻松掌握 DQM 的方法名和参数的精髓所在，下一课时将会重点介绍 DQM 的返回结果有哪些支持，及其实现原理和实战应用场景，到时见~</p><p>这里留个思考题：如何返回自定义 DTO 而不是 Entity?</p><blockquote><p>有思想，有方法，有技巧，有源码。如果觉得有帮助，就动动手指分享吧！同时也欢迎你在留言区发表学习感悟，大家一起更好地成长。</p><p>学会看源码，逐步从入门到精通，提高学习效率。此种学习方法，可以应用在任何需要学习的框架里面。</p><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,34);function A(u,D,C,B,S,m){const s=o("Image");return e(),t("div",null,[E,n(s,{alt:"Lark20200918-182821.png",src:"https://s0.lgstatic.com/i/image/M00/51/31/Ciqc1F9ki9CAPfoLAAMOpmuNPDY563.png"}),a(),y,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/51/31/Ciqc1F9kjAWAfjJiAAc5lsBJToo426.png"}),a(),i,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/51/31/Ciqc1F9kjA6AFsC1AASo47BSWUo068.png"}),a(),F,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/51/31/Ciqc1F9kjB-AVHUCAADjYUn04XE249.png"}),a(),d,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/51/3C/CgqCHl9kjDSAFKPVAASB48M-k1w197.png"}),a(),g])}const v=p(c,[["render",A]]);export{h as __pageData,v as default};
