import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.d3daa342.js";const u=JSON.parse('{"title":"18原理实践：自己动手使用Golang开发Docker（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4589) 18  原理实践：自己动手使用 Golang 开发 Docker（下）.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4589) 18  原理实践：自己动手使用 Golang 开发 Docker（下）.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/045_由浅入深吃透 Docker/(4589) 18  原理实践：自己动手使用 Golang 开发 Docker（下）.md"},o=l(`<h1 id="_18原理实践-自己动手使用golang开发docker-下" tabindex="-1">18原理实践：自己动手使用Golang开发Docker（下） <a class="header-anchor" href="#_18原理实践-自己动手使用golang开发docker-下" aria-label="Permalink to &quot;18原理实践：自己动手使用Golang开发Docker（下）&quot;">​</a></h1><p>上一课时我们安装了 Golang，学习了一些容器必备的基础知识，并且自己动手编译了一个 gocker，实现了 Namespace 的隔离。今天我将带你深入剖析 gocker 的源码和实现原理，并且带你实现 cgroups 的资源限制。</p><h3 id="gocker-源码剖析" tabindex="-1">gocker 源码剖析 <a class="header-anchor" href="#gocker-源码剖析" aria-label="Permalink to &quot;gocker 源码剖析&quot;">​</a></h3><p>打开 gocker 的源码，我们可以看到 gocker 的实现主要有两个 go 文件：一个是 main.go，一个是 run.go。这两个文件起了什么作用呢？</p><p>我们首先来看下 main.go 文件：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cat main.</span><span style="color:#F97583;">go</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/urfave/cli/v2</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/wilhelmguo/gocker/runc</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cli.</span><span style="color:#79B8FF;">NewApp</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.Name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;gocker&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.Usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;gocker 是 golang 编写的精简版 Docker，目的是学习 Docker 的运行原理。&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    app.Commands </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">cli.Command{</span></span>
<span class="line"><span style="color:#E1E4E8;">        runc.InitCommand,</span></span>
<span class="line"><span style="color:#E1E4E8;">        runc.RunCommand,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> app.</span><span style="color:#79B8FF;">Run</span><span style="color:#E1E4E8;">(os.Args); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cat main.</span><span style="color:#D73A49;">go</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/urfave/cli/v2</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/wilhelmguo/gocker/runc</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cli.</span><span style="color:#005CC5;">NewApp</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    app.Name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;gocker&quot;</span></span>
<span class="line"><span style="color:#24292E;">    app.Usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;gocker 是 golang 编写的精简版 Docker，目的是学习 Docker 的运行原理。&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    app.Commands </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">cli.Command{</span></span>
<span class="line"><span style="color:#24292E;">        runc.InitCommand,</span></span>
<span class="line"><span style="color:#24292E;">        runc.RunCommand,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> app.</span><span style="color:#005CC5;">Run</span><span style="color:#24292E;">(os.Args); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>main.go 文件中引用了一个第三方工具库 github.com/urfave/cli，该工具库提供了一个编写命令行的工具，可以帮助我们快速构建命令行应用程序，Docker 默认的容器运行时 runC 也引用了该工具库。</p><p>main 函数是 gocker 执行的入口文件，main 定义了 gocker 的名称和简单介绍，同时调用了 InitCommand 和 RunCommand 实现了<code>gocker init</code>和<code>gocker run</code>这两个命令的初始化。</p><p>下面我们查看一下 run.go 的文件内容，run.go 文件中定义了 InitCommand 和 RunCommand 的详细实现以及容器启动的过程，文件内容如下。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cat runc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">run.</span><span style="color:#F97583;">go</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">errors</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">io/ioutil</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os/exec</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">path/filepath</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">strings</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">syscall</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/urfave/cli/v2</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> RunCommand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.Command{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Name: </span><span style="color:#9ECBFF;">&quot;run&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Usage: </span><span style="color:#9ECBFF;">\`启动一个隔离的容器</span></span>
<span class="line"><span style="color:#9ECBFF;">            gocker run -it [command]\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Flags: []cli.Flag{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.BoolFlag{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Name:  </span><span style="color:#9ECBFF;">&quot;it&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Usage: </span><span style="color:#9ECBFF;">&quot;是否启用命令行交互模式&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.StringFlag{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Name:  </span><span style="color:#9ECBFF;">&quot;rootfs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Usage: </span><span style="color:#9ECBFF;">&quot;容器根目录&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    Action: </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(context </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">cli.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Args</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Len</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;参数不全，请检查！&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        read, write, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Pipe</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        tty </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;it&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        rootfs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rootfs&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> exec.</span><span style="color:#79B8FF;">Command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/proc/self/exe&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;init&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.SysProcAttr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">syscall.SysProcAttr{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Cloneflags: syscall.CLONE_NEWNS </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWUTS </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWIPC </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWPID </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWNET,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> tty {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cmd.Stdin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.Stdin</span></span>
<span class="line"><span style="color:#E1E4E8;">            cmd.Stdout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.Stdout</span></span>
<span class="line"><span style="color:#E1E4E8;">            cmd.Stderr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.Stderr</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.ExtraFiles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">os.File{read}</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.Dir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rootfs</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cmd.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;command start error&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        write.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(strings.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Args</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Slice</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        write.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.</span><span style="color:#79B8FF;">Wait</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> InitCommand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.Command{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Name:  </span><span style="color:#9ECBFF;">&quot;init&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Usage: </span><span style="color:#9ECBFF;">&quot;初始化容器进程，请勿直接调用！&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Action: </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(context </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">cli.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        pwd, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Getwd</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Get current path error </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Current path is &quot;</span><span style="color:#E1E4E8;">, pwd)</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmdArray </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">readCommandArray</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cmdArray </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(cmdArray) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Command is empty&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CmdArray is &quot;</span><span style="color:#E1E4E8;">, cmdArray)</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pivotRoot</span><span style="color:#E1E4E8;">(pwd)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pivotRoot error </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//mount proc</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaultMountFlags </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.MS_NOEXEC </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> syscall.MS_NOSUID </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> syscall.MS_NODEV</span></span>
<span class="line"><span style="color:#E1E4E8;">        syscall.</span><span style="color:#79B8FF;">Mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;proc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/proc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;proc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">uintptr</span><span style="color:#E1E4E8;">(defaultMountFlags), </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 配置hostname</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">Sethostname</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lagoudocker&quot;</span><span style="color:#E1E4E8;">)); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error setting hostname - </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        path, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> exec.</span><span style="color:#79B8FF;">LookPath</span><span style="color:#E1E4E8;">(cmdArray[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Exec loop path error </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// export PATH=$PATH:/bin</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">Exec</span><span style="color:#E1E4E8;">(path, cmdArray[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:], os.</span><span style="color:#79B8FF;">Environ</span><span style="color:#E1E4E8;">()); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(err.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pivotRoot</span><span style="color:#E1E4E8;">(root </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 确保新 root 和老 root 不在同一目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// MS_BIND：执行bind挂载，使文件或者子目录树在文件系统内的另一个点上可视。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// MS_REC： 创建递归绑定挂载，递归更改传播类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">Mount</span><span style="color:#E1E4E8;">(root, root, </span><span style="color:#9ECBFF;">&quot;bind&quot;</span><span style="color:#E1E4E8;">, syscall.MS_BIND</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">syscall.MS_REC, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Mount rootfs to itself error: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建 .pivot_root 文件夹，用于存储 old_root</span></span>
<span class="line"><span style="color:#E1E4E8;">    pivotDir </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> filepath.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(root, </span><span style="color:#9ECBFF;">&quot;.pivot_root&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Mkdir</span><span style="color:#E1E4E8;">(pivotDir, </span><span style="color:#79B8FF;">0777</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 Golang 封装的 PivotRoot</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">PivotRoot</span><span style="color:#E1E4E8;">(root, pivotDir); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pivot_root </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 修改工作目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">Chdir</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;chdir / </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    pivotDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filepath.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.pivot_root&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 卸载 .pivot_root</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">Unmount</span><span style="color:#E1E4E8;">(pivotDir, syscall.MNT_DETACH); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unmount pivot_root dir </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 删除临时文件夹 .pivot_root</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Remove</span><span style="color:#E1E4E8;">(pivotDir)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readCommandArray</span><span style="color:#E1E4E8;">() []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    pipe </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">NewFile</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uintptr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;pipe&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ioutil.</span><span style="color:#79B8FF;">ReadAll</span><span style="color:#E1E4E8;">(pipe)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;init read pipe error </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    msgStr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#79B8FF;">Split</span><span style="color:#E1E4E8;">(msgStr, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cat runc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">run.</span><span style="color:#D73A49;">go</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">errors</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">io/ioutil</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os/exec</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">path/filepath</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">strings</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">syscall</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/urfave/cli/v2</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> RunCommand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.Command{</span></span>
<span class="line"><span style="color:#24292E;">    Name: </span><span style="color:#032F62;">&quot;run&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    Usage: </span><span style="color:#032F62;">\`启动一个隔离的容器</span></span>
<span class="line"><span style="color:#032F62;">            gocker run -it [command]\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    Flags: []cli.Flag{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.BoolFlag{</span></span>
<span class="line"><span style="color:#24292E;">            Name:  </span><span style="color:#032F62;">&quot;it&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            Usage: </span><span style="color:#032F62;">&quot;是否启用命令行交互模式&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.StringFlag{</span></span>
<span class="line"><span style="color:#24292E;">            Name:  </span><span style="color:#032F62;">&quot;rootfs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            Usage: </span><span style="color:#032F62;">&quot;容器根目录&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    Action: </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(context </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">cli.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Args</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Len</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;参数不全，请检查！&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        read, write, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Pipe</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        tty </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;it&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        rootfs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rootfs&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        cmd </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> exec.</span><span style="color:#005CC5;">Command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/proc/self/exe&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;init&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        cmd.SysProcAttr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">syscall.SysProcAttr{</span></span>
<span class="line"><span style="color:#24292E;">            Cloneflags: syscall.CLONE_NEWNS </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWUTS </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWIPC </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWPID </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWNET,</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> tty {</span></span>
<span class="line"><span style="color:#24292E;">            cmd.Stdin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.Stdin</span></span>
<span class="line"><span style="color:#24292E;">            cmd.Stdout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.Stdout</span></span>
<span class="line"><span style="color:#24292E;">            cmd.Stderr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.Stderr</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        cmd.ExtraFiles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">os.File{read}</span></span>
<span class="line"><span style="color:#24292E;">        cmd.Dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rootfs</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cmd.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;command start error&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        write.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(strings.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Args</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Slice</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        write.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        cmd.</span><span style="color:#005CC5;">Wait</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> InitCommand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.Command{</span></span>
<span class="line"><span style="color:#24292E;">    Name:  </span><span style="color:#032F62;">&quot;init&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    Usage: </span><span style="color:#032F62;">&quot;初始化容器进程，请勿直接调用！&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    Action: </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(context </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">cli.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        pwd, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Getwd</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Get current path error </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Current path is &quot;</span><span style="color:#24292E;">, pwd)</span></span>
<span class="line"><span style="color:#24292E;">        cmdArray </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">readCommandArray</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cmdArray </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(cmdArray) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Command is empty&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CmdArray is &quot;</span><span style="color:#24292E;">, cmdArray)</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pivotRoot</span><span style="color:#24292E;">(pwd)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pivotRoot error </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//mount proc</span></span>
<span class="line"><span style="color:#24292E;">        defaultMountFlags </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.MS_NOEXEC </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> syscall.MS_NOSUID </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> syscall.MS_NODEV</span></span>
<span class="line"><span style="color:#24292E;">        syscall.</span><span style="color:#005CC5;">Mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;proc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/proc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;proc&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">uintptr</span><span style="color:#24292E;">(defaultMountFlags), </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 配置hostname</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">Sethostname</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lagoudocker&quot;</span><span style="color:#24292E;">)); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error setting hostname - </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        path, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> exec.</span><span style="color:#005CC5;">LookPath</span><span style="color:#24292E;">(cmdArray[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Exec loop path error </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// export PATH=$PATH:/bin</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">Exec</span><span style="color:#24292E;">(path, cmdArray[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:], os.</span><span style="color:#005CC5;">Environ</span><span style="color:#24292E;">()); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(err.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pivotRoot</span><span style="color:#24292E;">(root </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 确保新 root 和老 root 不在同一目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// MS_BIND：执行bind挂载，使文件或者子目录树在文件系统内的另一个点上可视。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// MS_REC： 创建递归绑定挂载，递归更改传播类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">Mount</span><span style="color:#24292E;">(root, root, </span><span style="color:#032F62;">&quot;bind&quot;</span><span style="color:#24292E;">, syscall.MS_BIND</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">syscall.MS_REC, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Mount rootfs to itself error: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建 .pivot_root 文件夹，用于存储 old_root</span></span>
<span class="line"><span style="color:#24292E;">    pivotDir </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> filepath.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(root, </span><span style="color:#032F62;">&quot;.pivot_root&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Mkdir</span><span style="color:#24292E;">(pivotDir, </span><span style="color:#005CC5;">0777</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 Golang 封装的 PivotRoot</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">PivotRoot</span><span style="color:#24292E;">(root, pivotDir); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pivot_root </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 修改工作目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">Chdir</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chdir / </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    pivotDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> filepath.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.pivot_root&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 卸载 .pivot_root</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">Unmount</span><span style="color:#24292E;">(pivotDir, syscall.MNT_DETACH); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unmount pivot_root dir </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 删除临时文件夹 .pivot_root</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Remove</span><span style="color:#24292E;">(pivotDir)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readCommandArray</span><span style="color:#24292E;">() []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    pipe </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">NewFile</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uintptr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;pipe&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    msg, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ioutil.</span><span style="color:#005CC5;">ReadAll</span><span style="color:#24292E;">(pipe)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;init read pipe error </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    msgStr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(msg)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> strings.</span><span style="color:#005CC5;">Split</span><span style="color:#24292E;">(msgStr, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>看到这么多代码你是不是有点懵？别担心，我帮你一一解读。</p><p>上面文件中有两个比较重要的变量 InitCommand 和 RunCommand，它们的作用如下：</p><ul><li><p>RunCommand 是当我们执行 gocker run 命令时调用的函数，是实现 gocker run 的入口；</p></li><li><p>InitCommand 是当我们执行 gocker run 时自动调用 gocker init 来初始化容器的一些环境。</p></li></ul><h4 id="runcommand-容器启动的入口" tabindex="-1">RunCommand （容器启动的入口） <a class="header-anchor" href="#runcommand-容器启动的入口" aria-label="Permalink to &quot;RunCommand （容器启动的入口）&quot;">​</a></h4><p>我们先从 RunCommand 来分析：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> RunCommand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.Command{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 定义一个启动命令，这里定义的是 run 命令，当执行 gocker run 时会调用该函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    Name: </span><span style="color:#9ECBFF;">&quot;run&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用说明</span></span>
<span class="line"><span style="color:#E1E4E8;">    Usage: </span><span style="color:#9ECBFF;">\`启动一个隔离的容器</span></span>
<span class="line"><span style="color:#9ECBFF;">            gocker run -it [command]\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行 gocker run 命令可以传递的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    Flags: []cli.Flag{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.BoolFlag{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Name:  </span><span style="color:#9ECBFF;">&quot;it&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Usage: </span><span style="color:#9ECBFF;">&quot;是否启用命令行交互模式&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.StringFlag{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Name:  </span><span style="color:#9ECBFF;">&quot;rootfs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Usage: </span><span style="color:#9ECBFF;">&quot;容器根目录&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// gocker run 命令的执行函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    Action: </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(context </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">cli.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 校验参数 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Args</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Len</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;参数不全，请检查！&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        read, write, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Pipe</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取传入的参数的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        tty </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;it&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        rootfs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rootfs&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里执行 /proc/self/exe init 相当于执行 gocker init</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> exec.</span><span style="color:#79B8FF;">Command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/proc/self/exe&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;init&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 定义新创建哪些命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.SysProcAttr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">syscall.SysProcAttr{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Cloneflags: syscall.CLONE_NEWNS </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWUTS </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWIPC </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWPID </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">                syscall.CLONE_NEWNET,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 把容器的标准输出重定向到主机的标准输出</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> tty {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cmd.Stdin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.Stdin</span></span>
<span class="line"><span style="color:#E1E4E8;">            cmd.Stdout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.Stdout</span></span>
<span class="line"><span style="color:#E1E4E8;">            cmd.Stderr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.Stderr</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.ExtraFiles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">os.File{read}</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.Dir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rootfs</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 启动容器</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cmd.</span><span style="color:#79B8FF;">Start</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;command start error&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        write.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(strings.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Args</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Slice</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        write.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 等待容器退出</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmd.</span><span style="color:#79B8FF;">Wait</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> RunCommand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.Command{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 定义一个启动命令，这里定义的是 run 命令，当执行 gocker run 时会调用该函数</span></span>
<span class="line"><span style="color:#24292E;">    Name: </span><span style="color:#032F62;">&quot;run&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用说明</span></span>
<span class="line"><span style="color:#24292E;">    Usage: </span><span style="color:#032F62;">\`启动一个隔离的容器</span></span>
<span class="line"><span style="color:#032F62;">            gocker run -it [command]\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行 gocker run 命令可以传递的参数</span></span>
<span class="line"><span style="color:#24292E;">    Flags: []cli.Flag{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.BoolFlag{</span></span>
<span class="line"><span style="color:#24292E;">            Name:  </span><span style="color:#032F62;">&quot;it&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            Usage: </span><span style="color:#032F62;">&quot;是否启用命令行交互模式&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.StringFlag{</span></span>
<span class="line"><span style="color:#24292E;">            Name:  </span><span style="color:#032F62;">&quot;rootfs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            Usage: </span><span style="color:#032F62;">&quot;容器根目录&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// gocker run 命令的执行函数</span></span>
<span class="line"><span style="color:#24292E;">    Action: </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(context </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">cli.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 校验参数 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Args</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Len</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;参数不全，请检查！&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        read, write, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Pipe</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取传入的参数的值</span></span>
<span class="line"><span style="color:#24292E;">        tty </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;it&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        rootfs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rootfs&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里执行 /proc/self/exe init 相当于执行 gocker init</span></span>
<span class="line"><span style="color:#24292E;">        cmd </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> exec.</span><span style="color:#005CC5;">Command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/proc/self/exe&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;init&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 定义新创建哪些命名空间</span></span>
<span class="line"><span style="color:#24292E;">        cmd.SysProcAttr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">syscall.SysProcAttr{</span></span>
<span class="line"><span style="color:#24292E;">            Cloneflags: syscall.CLONE_NEWNS </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWUTS </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWIPC </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWPID </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">                syscall.CLONE_NEWNET,</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 把容器的标准输出重定向到主机的标准输出</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> tty {</span></span>
<span class="line"><span style="color:#24292E;">            cmd.Stdin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.Stdin</span></span>
<span class="line"><span style="color:#24292E;">            cmd.Stdout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.Stdout</span></span>
<span class="line"><span style="color:#24292E;">            cmd.Stderr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.Stderr</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        cmd.ExtraFiles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">os.File{read}</span></span>
<span class="line"><span style="color:#24292E;">        cmd.Dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rootfs</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 启动容器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cmd.</span><span style="color:#005CC5;">Start</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;command start error&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        write.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(strings.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Args</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Slice</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        write.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 等待容器退出</span></span>
<span class="line"><span style="color:#24292E;">        cmd.</span><span style="color:#005CC5;">Wait</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span></code></pre></div><p>RunCommand 变量实际上是一个 Command 结构体，这个结构体包含了四个变量。</p><ol><li><p>Name：定义一个启动命令，这里定义的是 run 命令，当执行 gocker run 时会调用该函数。</p></li><li><p>Usage：<code>gocker run</code>命令的使用说明。</p></li><li><p>Flags：执行<code>gocker run</code>命令可以传递的参数。</p></li><li><p>Action： 该变量是真正的 gocker run 命令的入口， 主要做了以下事情：</p><ul><li><p>校验 gocker run 传递的参数；</p></li><li><p>构造一个 Pipe，把 gocker 的启动参数写入，方便在 init 进程中获取；</p></li><li><p>定义 /proc/self/exe init 调用，相当于调用 gocker init ；</p></li><li><p>创建五种命名空间用于资源隔离，分别为 Mount Namespace、UTS Namespace、IPC Namespace、PID Namespace 和 Net Namespace；</p></li><li><p>调用 cmd.Start 函数，开始执行容器启动步骤，首先创建出来一个 namespace （上一步定义的五种namespace）隔离的进程，然后调用 /proc/self/exe，也就是调用 gocker init，执行 InitCommand 中定义的容器初始化步骤。</p></li></ul></li></ol><p>那么 InitCommand 究竟做了什么呢？</p><h4 id="initcommand-准备容器环境" tabindex="-1">InitCommand（准备容器环境） <a class="header-anchor" href="#initcommand-准备容器环境" aria-label="Permalink to &quot;InitCommand（准备容器环境）&quot;">​</a></h4><p>下面我们看下 InitCommand 中的内容：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> InitCommand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cli.Command{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Name:  </span><span style="color:#9ECBFF;">&quot;init&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Usage: </span><span style="color:#9ECBFF;">&quot;初始化容器进程，请勿直接调用！&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Action: </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(context </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">cli.Context) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取当前执行目录</span></span>
<span class="line"><span style="color:#E1E4E8;">        pwd, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Getwd</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Get current path error </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Current path is &quot;</span><span style="color:#E1E4E8;">, pwd)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取用户传递的启动参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        cmdArray </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">readCommandArray</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cmdArray </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(cmdArray) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Command is empty&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CmdArray is &quot;</span><span style="color:#E1E4E8;">, cmdArray)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// pivotRoot 的作用类似于 chroot，可以把我们准备的镜像目录设置为容器的根目录。</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pivotRoot</span><span style="color:#E1E4E8;">(pwd)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pivotRoot error </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 挂载容器自己的 proc 目录，实现 ps 只能看到容器自己的进程</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaultMountFlags </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.MS_NOEXEC </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> syscall.MS_NOSUID </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> syscall.MS_NODEV</span></span>
<span class="line"><span style="color:#E1E4E8;">        syscall.</span><span style="color:#79B8FF;">Mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;proc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/proc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;proc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">uintptr</span><span style="color:#E1E4E8;">(defaultMountFlags), </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 配置主机名为 lagoudocker</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">Sethostname</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lagoudocker&quot;</span><span style="color:#E1E4E8;">)); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error setting hostname - </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        path, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> exec.</span><span style="color:#79B8FF;">LookPath</span><span style="color:#E1E4E8;">(cmdArray[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Exec loop path error </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// syscall.Exec 相当于 shell 中的 exec 实现，这里用 用户传递的主命令来替换 init 进程，从而实现容器的 1 号进程为用户传递的主进程</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> syscall.</span><span style="color:#79B8FF;">Exec</span><span style="color:#E1E4E8;">(path, cmdArray[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:], os.</span><span style="color:#79B8FF;">Environ</span><span style="color:#E1E4E8;">()); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(err.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> InitCommand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cli.Command{</span></span>
<span class="line"><span style="color:#24292E;">    Name:  </span><span style="color:#032F62;">&quot;init&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    Usage: </span><span style="color:#032F62;">&quot;初始化容器进程，请勿直接调用！&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    Action: </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(context </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">cli.Context) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取当前执行目录</span></span>
<span class="line"><span style="color:#24292E;">        pwd, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Getwd</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Get current path error </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Current path is &quot;</span><span style="color:#24292E;">, pwd)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取用户传递的启动参数</span></span>
<span class="line"><span style="color:#24292E;">        cmdArray </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">readCommandArray</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cmdArray </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(cmdArray) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Command is empty&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CmdArray is &quot;</span><span style="color:#24292E;">, cmdArray)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// pivotRoot 的作用类似于 chroot，可以把我们准备的镜像目录设置为容器的根目录。</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pivotRoot</span><span style="color:#24292E;">(pwd)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pivotRoot error </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 挂载容器自己的 proc 目录，实现 ps 只能看到容器自己的进程</span></span>
<span class="line"><span style="color:#24292E;">        defaultMountFlags </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.MS_NOEXEC </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> syscall.MS_NOSUID </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> syscall.MS_NODEV</span></span>
<span class="line"><span style="color:#24292E;">        syscall.</span><span style="color:#005CC5;">Mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;proc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/proc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;proc&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">uintptr</span><span style="color:#24292E;">(defaultMountFlags), </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 配置主机名为 lagoudocker</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">Sethostname</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lagoudocker&quot;</span><span style="color:#24292E;">)); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error setting hostname - </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        path, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> exec.</span><span style="color:#005CC5;">LookPath</span><span style="color:#24292E;">(cmdArray[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Exec loop path error </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// syscall.Exec 相当于 shell 中的 exec 实现，这里用 用户传递的主命令来替换 init 进程，从而实现容器的 1 号进程为用户传递的主进程</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> syscall.</span><span style="color:#005CC5;">Exec</span><span style="color:#24292E;">(path, cmdArray[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:], os.</span><span style="color:#005CC5;">Environ</span><span style="color:#24292E;">()); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(err.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过代码你能看出 InitCommand 都做了哪些容器启动前的准备工作吗？</p><p>InitCommand 主要做了以下几件事情：</p><ol><li><p>获取当前运行目录；</p></li><li><p>从 RunCommand 中获取用户传递的容器启动参数；</p></li><li><p>修改当前进程运行的根目录为用户传递的 rootfs 目录；</p></li><li><p>挂载容器自己的 proc 目录，使得容器中执行 ps 命令只能看到自己命名空间下的进程；</p></li><li><p>设置容器的主机名称为 lagoudocker；</p></li><li><p>执行 syscall.Exec 实现使用用户传递的启动命令替换当前 init 进程。</p></li></ol><p>这里有两个比较关键的技术点 pivotRoot 和 syscall.Exec。</p><ul><li><p>pivotRoot：pivotRoot 是一个系统调用，主要功能是改变当前进程的根目录，它可以把当前进程的根目录移动到我们传递的 rootfs 目录下，从而使得我们不仅能够看到指定目录，还可以看到它的子目录信息。</p></li><li><p>syscall.Exec：syscall.Exec 是一个系统调用，这个系统调用可以实现执行指定的命令，但是并不创建新的进程，而是在当前的进程空间执行，替换掉正在执行的进程，复用同一个进程号。通过这种机制，才实现了我们在容器中看到的 1 号进程是我们传递的命令，而不是 init 进程。</p></li></ul><p>最后，总结下容器的完整创建流程:</p><p>1.使用以下命令创建容器</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gocker run -it -rootfs=/tmp/busybox /bin/sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gocker run -it -rootfs=/tmp/busybox /bin/sh</span></span></code></pre></div><p>2.RunCommand 解析请求的参数（-it -rootfs=/tmp/busybox）和主进程启动命令（/bin/sh）；</p><p>3.创建 namespace 隔离的容器进程；</p><p>4.启动容器进程；</p><p>5.容器内的进程执行 /proc/self/exe 调用自己实现容器的初始化，修改当前进程运行的根目录，挂载 proc 文件系统，修改主机名，最后使用 sh 进程替换当前容器的进程，使得容器的主进程为 sh 进程。</p><p>目前我们的容器虽然实现了使用 Namespace 隔离各种资源，但是容器内的进程仍然可以任意地使用主机的 CPU 、内存等资源。而这可能导致主机的资源竞争，下面我们使用cgroups来实现对 CPU 和内存的限制。</p><h3 id="为-gocker-添加-cgroups-限制" tabindex="-1">为 gocker 添加 cgroups 限制 <a class="header-anchor" href="#为-gocker-添加-cgroups-限制" aria-label="Permalink to &quot;为 gocker 添加 cgroups 限制&quot;">​</a></h3><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=455#/detail/pc?id=4581" target="_blank" rel="noreferrer">在第 10 讲中</a>，我们手动操作 cgroups 实现了对容器资源的限制，下面我把这部分手动操作转化为代码。</p><h4 id="编写资源限制源码" tabindex="-1">编写资源限制源码 <a class="header-anchor" href="#编写资源限制源码" aria-label="Permalink to &quot;编写资源限制源码&quot;">​</a></h4><p>首先我们定义 cgroups 的挂载目录和我们要创建的目录，定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> gockerCgroupPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;gocker&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cgroupsRoot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/sys/fs/cgroup&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> gockerCgroupPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;gocker&quot;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cgroupsRoot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/sys/fs/cgroup&quot;</span></span></code></pre></div><p>然后定义Cgroups结构体，分别定义 CPU 和 Memory 字段，用于存储用户端传递的 CPU 和 Memory 限制值：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cgroups</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 单位 核</span></span>
<span class="line"><span style="color:#E1E4E8;">    CPU </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 单位 兆</span></span>
<span class="line"><span style="color:#E1E4E8;">    Memory </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cgroups</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 单位 核</span></span>
<span class="line"><span style="color:#24292E;">    CPU </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 单位 兆</span></span>
<span class="line"><span style="color:#24292E;">    Memory </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着定义 Cgroups 对象的一些操作方法，这样方便我们对当前容器的 cgroups 进程操作。方法定义如下。</p><ul><li><p>Apply：把容器的 pid 写入到对应子系统下的 tasks 文件中，使得 cgroups 限制对容器进程生效。</p></li><li><p>Destroy：容器退出时删除对应的 cgroups 文件。</p></li><li><p>SetCPULimit：将 CPU 限制值写入到 cpu.cfs_quota_us 文件中。</p></li><li><p>SetMemoryLimit：将内存限制值写入 memory.limit_in_bytes 文件中。</p></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Cgroups) </span><span style="color:#B392F0;">Apply</span><span style="color:#E1E4E8;">(pid </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c.CPU </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cpuCgroupPath, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getCgroupPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cpu&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ioutil.</span><span style="color:#79B8FF;">WriteFile</span><span style="color:#E1E4E8;">(path.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(cpuCgroupPath, </span><span style="color:#9ECBFF;">&quot;tasks&quot;</span><span style="color:#E1E4E8;">), []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(pid)), </span><span style="color:#79B8FF;">0644</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;set cgroup cpu fail </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c.Memory </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        memoryCgroupPath, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getCgroupPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;memory&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ioutil.</span><span style="color:#79B8FF;">WriteFile</span><span style="color:#E1E4E8;">(path.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(memoryCgroupPath, </span><span style="color:#9ECBFF;">&quot;tasks&quot;</span><span style="color:#E1E4E8;">), []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(pid)), </span><span style="color:#79B8FF;">0644</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;set cgroup memory fail </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 释放cgroup</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Cgroups) </span><span style="color:#B392F0;">Destroy</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c.CPU </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cpuCgroupPath, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getCgroupPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cpu&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">RemoveAll</span><span style="color:#E1E4E8;">(cpuCgroupPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c.Memory </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        memoryCgroupPath, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getCgroupPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;memory&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">RemoveAll</span><span style="color:#E1E4E8;">(memoryCgroupPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Cgroups) </span><span style="color:#B392F0;">SetCPULimit</span><span style="color:#E1E4E8;">(cpu </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpuCgroupPath, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getCgroupPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cpu&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ioutil.</span><span style="color:#79B8FF;">WriteFile</span><span style="color:#E1E4E8;">(path.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(cpuCgroupPath, </span><span style="color:#9ECBFF;">&quot;cpu.cfs_quota_us&quot;</span><span style="color:#E1E4E8;">), []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(cpu</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)), </span><span style="color:#79B8FF;">0644</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;set cpu limit fail </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Cgroups) </span><span style="color:#B392F0;">SetMemoryLimit</span><span style="color:#E1E4E8;">(memory </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    memoryCgroupPath, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getCgroupPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;memory&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ioutil.</span><span style="color:#79B8FF;">WriteFile</span><span style="color:#E1E4E8;">(path.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(memoryCgroupPath, </span><span style="color:#9ECBFF;">&quot;memory.limit_in_bytes&quot;</span><span style="color:#E1E4E8;">), []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(memory</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">)), </span><span style="color:#79B8FF;">0644</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;set memory limit fail </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Cgroups) </span><span style="color:#6F42C1;">Apply</span><span style="color:#24292E;">(pid </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c.CPU </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        cpuCgroupPath, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getCgroupPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cpu&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ioutil.</span><span style="color:#005CC5;">WriteFile</span><span style="color:#24292E;">(path.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(cpuCgroupPath, </span><span style="color:#032F62;">&quot;tasks&quot;</span><span style="color:#24292E;">), []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(pid)), </span><span style="color:#005CC5;">0644</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;set cgroup cpu fail </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c.Memory </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        memoryCgroupPath, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getCgroupPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;memory&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ioutil.</span><span style="color:#005CC5;">WriteFile</span><span style="color:#24292E;">(path.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(memoryCgroupPath, </span><span style="color:#032F62;">&quot;tasks&quot;</span><span style="color:#24292E;">), []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(pid)), </span><span style="color:#005CC5;">0644</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;set cgroup memory fail </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 释放cgroup</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Cgroups) </span><span style="color:#6F42C1;">Destroy</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c.CPU </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        cpuCgroupPath, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getCgroupPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cpu&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">RemoveAll</span><span style="color:#24292E;">(cpuCgroupPath)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c.Memory </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        memoryCgroupPath, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getCgroupPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;memory&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">RemoveAll</span><span style="color:#24292E;">(memoryCgroupPath)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Cgroups) </span><span style="color:#6F42C1;">SetCPULimit</span><span style="color:#24292E;">(cpu </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    cpuCgroupPath, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getCgroupPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cpu&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ioutil.</span><span style="color:#005CC5;">WriteFile</span><span style="color:#24292E;">(path.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(cpuCgroupPath, </span><span style="color:#032F62;">&quot;cpu.cfs_quota_us&quot;</span><span style="color:#24292E;">), []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(cpu</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)), </span><span style="color:#005CC5;">0644</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;set cpu limit fail </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Cgroups) </span><span style="color:#6F42C1;">SetMemoryLimit</span><span style="color:#24292E;">(memory </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    memoryCgroupPath, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getCgroupPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;memory&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ioutil.</span><span style="color:#005CC5;">WriteFile</span><span style="color:#24292E;">(path.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(memoryCgroupPath, </span><span style="color:#032F62;">&quot;memory.limit_in_bytes&quot;</span><span style="color:#24292E;">), []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(memory</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">)), </span><span style="color:#005CC5;">0644</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;set memory limit fail </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后在 run 命令的 Action 函数中，添加 cgroups 初始化逻辑，将 CPU 和内存的限制值写入到 cgroups 文件中，并且将当前进程的 pid 也写入到 cgroups 的 tasks 文件中，使得 CPU 和内存的限制对于当前容器进程生效。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        cgroup </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cgroups.</span><span style="color:#79B8FF;">NewCgroups</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> cgroup.</span><span style="color:#79B8FF;">Destroy</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        cpus </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cpus&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cpus </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cgroup.</span><span style="color:#79B8FF;">SetCPULimit</span><span style="color:#E1E4E8;">(cpus)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        m </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;m&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cgroup.</span><span style="color:#79B8FF;">SetMemoryLimit</span><span style="color:#E1E4E8;">(m)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        cgroup.</span><span style="color:#79B8FF;">Apply</span><span style="color:#E1E4E8;">(cmd.Process.Pid)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">        cgroup </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cgroups.</span><span style="color:#005CC5;">NewCgroups</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> cgroup.</span><span style="color:#005CC5;">Destroy</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        cpus </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cpus&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cpus </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            cgroup.</span><span style="color:#005CC5;">SetCPULimit</span><span style="color:#24292E;">(cpus)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        m </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;m&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            cgroup.</span><span style="color:#005CC5;">SetMemoryLimit</span><span style="color:#24292E;">(m)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        cgroup.</span><span style="color:#005CC5;">Apply</span><span style="color:#24292E;">(cmd.Process.Pid)</span></span></code></pre></div><p>到此，我们成功实现了一个带有资源限制的 gocker 容器。下面进入 gocker 的目录，并且编译一下 gocker：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cd gocker</span></span>
<span class="line"><span style="color:#E1E4E8;">$ git checkout lesson</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">$ go install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cd gocker</span></span>
<span class="line"><span style="color:#24292E;">$ git checkout lesson</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">$ go install</span></span></code></pre></div><p>执行完 go install 后， Golang 会自动帮助我们编译当前项目下的代码，编译后的二进制文件存放在 $GOPATH/bin 目录下，由于我们之前在 $HOME/.bashrc 文件下把 $GOPATH/bin 放入了系统 PATH 中，所以此时你可以直接使用 gocker 命令了。</p><h4 id="启动带有资源限制的容器" tabindex="-1">启动带有资源限制的容器 <a class="header-anchor" href="#启动带有资源限制的容器" aria-label="Permalink to &quot;启动带有资源限制的容器&quot;">​</a></h4><p>接下来我们使用 gocker 来启动一个带有 CPU 限制的容器：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># gocker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cpus</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rootfs</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sh</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">09</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">46</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Current</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">09</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">46</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CmdArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;">  [</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sh]</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> #</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># gocker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cpus</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rootfs</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sh</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">09</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">46</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Current</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">is</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">09</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">46</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CmdArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">is</span><span style="color:#24292E;">  [</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sh]</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> #</span></span></code></pre></div><p>然后我们新打开一个命令行窗口，查看一下 cgroups 相关的文件是否被创建：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sys</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cgroup</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cpu</span></span>
<span class="line"><span style="color:#E1E4E8;"># ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l</span></span>
<span class="line"><span style="color:#E1E4E8;">总用量 </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cgroup.clone_children</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">w</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">w</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">w</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cgroup.event_control</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cgroup.procs</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cgroup.sane_behavior</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpuacct.stat</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpuacct.usage</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpuacct.usage_percpu</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpu.cfs_period_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpu.cfs_quota_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpu.rt_period_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpu.rt_runtime_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpu.shares</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> cpu.stat</span></span>
<span class="line"><span style="color:#E1E4E8;">drwxr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> gocker</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> notify_on_release</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> release_agent</span></span>
<span class="line"><span style="color:#E1E4E8;">drwxr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x </span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> system.slice</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> tasks</span></span>
<span class="line"><span style="color:#E1E4E8;">drwxr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">xr</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;"> user.slice</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sys</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cgroup</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cpu</span></span>
<span class="line"><span style="color:#24292E;"># ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l</span></span>
<span class="line"><span style="color:#24292E;">总用量 </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cgroup.clone_children</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">w</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">w</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">w</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cgroup.event_control</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cgroup.procs</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cgroup.sane_behavior</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpuacct.stat</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpuacct.usage</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpuacct.usage_percpu</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpu.cfs_period_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpu.cfs_quota_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpu.rt_period_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpu.rt_runtime_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpu.shares</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> cpu.stat</span></span>
<span class="line"><span style="color:#24292E;">drwxr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> gocker</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> notify_on_release</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> release_agent</span></span>
<span class="line"><span style="color:#24292E;">drwxr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x </span><span style="color:#005CC5;">70</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> system.slice</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> tasks</span></span>
<span class="line"><span style="color:#24292E;">drwxr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">xr</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;"> user.slice</span></span></code></pre></div><p>可以看到我们启动容器后， gocker 在 cpu 子系统下，已经成功创建 gocker 目录。然后我们查看一下 gocker 目录下的内容：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l gocker</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">总用量 </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cgroup.clone_children</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">w</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">w</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">w</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cgroup.event_control</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cgroup.procs</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpuacct.stat</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpuacct.usage</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpuacct.usage_percpu</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpu.cfs_period_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpu.cfs_quota_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpu.rt_period_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpu.rt_runtime_us</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpu.shares</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> cpu.stat</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> notify_on_release</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root root </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> 9月  </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> tasks</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l gocker</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">总用量 </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cgroup.clone_children</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">w</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">w</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">w</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cgroup.event_control</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cgroup.procs</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpuacct.stat</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpuacct.usage</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpuacct.usage_percpu</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpu.cfs_period_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpu.cfs_quota_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpu.rt_period_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpu.rt_runtime_us</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpu.shares</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> cpu.stat</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> notify_on_release</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root root </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 9月  </span><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> tasks</span></span></code></pre></div><p>可以看到 cgroups 已经帮我们初始化好了 cpu 子系统的文件，然后我们查看一下 cpu.cfs_quota_us 的内容：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># cat gocker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cpu.cfs_quota_us</span></span>
<span class="line"><span style="color:#79B8FF;">100000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># cat gocker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cpu.cfs_quota_us</span></span>
<span class="line"><span style="color:#005CC5;">100000</span></span></code></pre></div><p>可以看到我们容器的 CPU资源已经被限制为 1 核。下面我们来验证一下 CPU 限制是否生效。</p><p>首先我们在容器窗口使用以下命令制造一个死循环，来提升 cpu 使用率：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> echo;done;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> echo;done;</span></span></code></pre></div><p>然后在主机的窗口使用 top 查看一下cpu 使用率：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">top </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">57</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> up </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> days, </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> users,  load average</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.08</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.27</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.14</span></span>
<span class="line"><span style="color:#79B8FF;">Tasks</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">113</span><span style="color:#E1E4E8;"> total,   </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> running, </span><span style="color:#79B8FF;">109</span><span style="color:#E1E4E8;"> sleeping,   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> stopped,   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> zombie</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#79B8FF;">Cpu</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23.5</span><span style="color:#E1E4E8;"> us, </span><span style="color:#79B8FF;">26.9</span><span style="color:#E1E4E8;"> sy,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> ni, </span><span style="color:#79B8FF;">49.2</span><span style="color:#E1E4E8;"> id,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> wa,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> hi,  </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;"> si,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> st</span></span>
<span class="line"><span style="color:#79B8FF;">KiB</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Mem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">3880512</span><span style="color:#E1E4E8;"> total,  </span><span style="color:#79B8FF;">1573052</span><span style="color:#E1E4E8;"> free,   </span><span style="color:#79B8FF;">408696</span><span style="color:#E1E4E8;"> used,  </span><span style="color:#79B8FF;">1898764</span><span style="color:#E1E4E8;"> buff</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#79B8FF;">KiB</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Swap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> total,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> free,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> used.  </span><span style="color:#79B8FF;">3141076</span><span style="color:#E1E4E8;"> avail </span><span style="color:#79B8FF;">Mem</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">PID</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">USER</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">PR</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">NI</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">VIRT</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">RES</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SHR</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">CPU</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">MEM</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">TIME</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">COMMAND</span></span>
<span class="line"><span style="color:#79B8FF;">30766</span><span style="color:#E1E4E8;"> root      </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">1312</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">260</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">212</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">R</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">99.3</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">30.90</span><span style="color:#E1E4E8;"> sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">top </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">57</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> up </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> days, </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> users,  load average</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.08</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.27</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.14</span></span>
<span class="line"><span style="color:#005CC5;">Tasks</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">113</span><span style="color:#24292E;"> total,   </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> running, </span><span style="color:#005CC5;">109</span><span style="color:#24292E;"> sleeping,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> stopped,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> zombie</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#005CC5;">Cpu</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23.5</span><span style="color:#24292E;"> us, </span><span style="color:#005CC5;">26.9</span><span style="color:#24292E;"> sy,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> ni, </span><span style="color:#005CC5;">49.2</span><span style="color:#24292E;"> id,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> wa,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> hi,  </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;"> si,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> st</span></span>
<span class="line"><span style="color:#005CC5;">KiB</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Mem</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">3880512</span><span style="color:#24292E;"> total,  </span><span style="color:#005CC5;">1573052</span><span style="color:#24292E;"> free,   </span><span style="color:#005CC5;">408696</span><span style="color:#24292E;"> used,  </span><span style="color:#005CC5;">1898764</span><span style="color:#24292E;"> buff</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#005CC5;">KiB</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Swap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> total,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> free,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> used.  </span><span style="color:#005CC5;">3141076</span><span style="color:#24292E;"> avail </span><span style="color:#005CC5;">Mem</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">PID</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">USER</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">PR</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">NI</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">VIRT</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">RES</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">SHR</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">S</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">CPU</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">MEM</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">TIME</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">COMMAND</span></span>
<span class="line"><span style="color:#005CC5;">30766</span><span style="color:#24292E;"> root      </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">1312</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">260</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">212</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">R</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">99.3</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">30.90</span><span style="color:#24292E;"> sh</span></span></code></pre></div><p>通过 top 的输出可以看到我们的容器 cpu 使用率被限制到了 100% 以内，即 1 个核。</p><p>到此，我们的容器不仅有了 Namespace 隔离，同时也有了 cgroups 的资源限制。</p><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>上一课时和本课时，我们一起安装了 golang，并且使用 golang 实现了一个精简版的 Docker，它具有基本的 namespace 隔离，并且还使用 cgroups 对容器进行了资源限制。</p><p>这两个课时的关键技术我帮你总结如下。</p><ol><li><p>Linux 的 /proc 目录是一种&quot;文件系统&quot;，它存放于内存中，是一个虚拟的文件系统，/proc 目录存放了当前内核运行状态的一系列特殊的文件，你可以通过这些文件查看当前的进程信息。</p></li><li><p>/proc/self/exe 是一个特殊的连接，执行该文件等同于执行当前程序的二进制文件</p></li><li><p>pivotRoot 是一个系统调用，主要功能是改变当前进程的根目录，它可以把当前进程的根目录移动到我们传递的 rootfs 目录下</p></li><li><p>syscall.Exec 是一个系统调用，这个系统调用可以实现新的进程直接替换正在执行的老的进程，并且复用老进程的 ID。</p></li></ol><p>另外，容器的实现当然离不开 Linux 的 namespace 和 cgroups 这两项关键技术，有了 Linux 的这些关键技术才使得我们的容器可以顺利实现，可以说 Linux 是容器技术的基石。而容器的编写，我们不仅可以使用 Go 语言，也可以使用其他编程语言，甚至只使用 shell 命令也可以实现一个容器。</p><p>那么，你可以使用 shell 命令实现一个精简版的 Docker 吗？思考后，不妨试着写一下。</p><p>下一课时，我将教你使用 Docker Compose 解决开发环境的依赖。</p><p>本课时的源码详见<a href="https://github.com/wilhelmguo/gocker/tree/lesson-18" target="_blank" rel="noreferrer">这里</a>。</p>`,74),e=[o];function r(t,c,E,y,F,i){return n(),a("div",null,e)}const A=s(p,[["render",r]]);export{u as __pageData,A as default};
