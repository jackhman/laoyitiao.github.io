import{_ as a,j as p,o as l,g as o,k as e,Q as c,s}from"./chunks/framework.b3d8e22e.js";const m=JSON.parse('{"title":"npm scripts 原理介绍 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5952) 23  npm cript：打造一体化的构建和部署流程.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5952) 23  npm cript：打造一体化的构建和部署流程.md","lastUpdated":1696417798000}'),t={name:"posts/frontEnd/105-前端基础建设与架构文档/(5952) 23  npm cript：打造一体化的构建和部署流程.md"},r=c(`<p>之前我们提到过，一个顺畅的基建流程离不开 npm scripts。npm scripts 将工程化的各个环节串联起来，相信任何一个现代化的项目都有自己的 npm scripts 设计。那么作为架构师或资深开发者，我们如何设计并实现项目配套的 npm scripts 呢？关于 npm scripts 我们如何进行封装抽象，做到复用或基建统一呢？</p><p>这一讲，我们就围绕如何使用 npm scripts，打造一体化的构建和部署流程展开。</p><h3 id="npm-scripts-原理介绍" tabindex="-1">npm scripts 原理介绍 <a class="header-anchor" href="#npm-scripts-原理介绍" aria-label="Permalink to &quot;npm scripts 原理介绍&quot;">​</a></h3><p>这一部分，我们将对 npm scripts 是什么，以及其核心原理进行讲解。</p><h4 id="npm-scripts-是什么" tabindex="-1">npm scripts 是什么 <a class="header-anchor" href="#npm-scripts-是什么" aria-label="Permalink to &quot;npm scripts 是什么&quot;">​</a></h4><p>我们先来系统地了解一下 npm scripts。Node.js 在设计 npm 之初，允许开发者在 package.json 文件中，通过 scripts 字段来自定义项目的脚本。比如我们可以在 package.json 中这样使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node build.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;dev&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node dev.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node test.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node build.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;dev&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node dev.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node test.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对应上述代码，我们在项目中可以使用命令行执行相关的脚本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm run build</span></span>
<span class="line"><span style="color:#E1E4E8;">$ npm run dev</span></span>
<span class="line"><span style="color:#E1E4E8;">$ npm run test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm run build</span></span>
<span class="line"><span style="color:#24292E;">$ npm run dev</span></span>
<span class="line"><span style="color:#24292E;">$ npm run test</span></span></code></pre></div><p>其中<code>build.js</code>、<code>dev.js</code>、<code>test.js</code>三个 Node.js 模块分别对应上面三个命令行执行命令。这样的设计，可以方便我们统计和集中维护项目工程化或基建相关的所有脚本/命令，也可以利用 npm 很多辅助功能，例如下面几个功能。</p><ul><li><p>使用 npm 钩子，比如<code>pre</code>、<code>post</code>，对应命令<code>npm run build</code>的钩子命令就是：<code>prebuild</code>和<code>postbuild</code>。</p></li><li><p>开发者使用<code>npm run build</code>时，会默认自动先执行<code>npm run prebuild</code>再执行<code>npm run build</code>，最后执行<code>npm run postbuild</code>，对此我们可以自定义：</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;prebuild&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node prebuild.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node build.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;postbuild&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node postbuild.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;prebuild&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node prebuild.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node build.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;postbuild&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node postbuild.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><ul><li><p>使用 npm 提供的<code>p<wbr>rocess.env.npm_lifecycle_event</code>等环境变量。通过<code>p<wbr>rocess.env.npm_lifecycle_event</code>，可以在相关 npm scripts 脚本中获得当前运行的脚本名称。</p></li><li><p>使用 npm 提供的<code>npm_package_</code>能力，获取 package.json 中的相关字段，比如下面代码：</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 package.json 中的 name 字段值</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.npm_package_name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 package.json 中的 version 字段值</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.npm_package_version)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取 package.json 中的 name 字段值</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p<wbr>rocess.env.npm_package_name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取 package.json 中的 version 字段值</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p<wbr>rocess.env.npm_package_version)</span></span></code></pre></div><p>更多 npm 为 npm scripts 提供的&quot;黑魔法&quot;，我们不再一一列举了。你可以前往 <a href="https://docs.npmjs.com/" target="_blank" rel="noreferrer">https://docs.npmjs.com/</a> 进行了解。</p><h4 id="npm-scripts-原理" tabindex="-1">npm scripts 原理 <a class="header-anchor" href="#npm-scripts-原理" aria-label="Permalink to &quot;npm scripts 原理&quot;">​</a></h4><p>其实，npm scripts 原理比较简单。我们依靠<code>npm run xxx</code>来执行一个 npm scripts，那么核心奥秘就在于<code>npm run</code>了。<code>npm run</code>会自动创建一个 Shell（实际使用的 Shell 会根据系统平台而不同，类 UNIX 系统里，如 macOS 或 Linux 中指代的是 /bin/sh， 在 Windows 中使用的是 cmd.exe），我们的 npm scripts 脚本就在这个新创建的 Shell 中被运行。这样一来，我们可以得出几个关键结论：</p><ul><li><p>只要是 Shell 可以运行的命令，都可以作为 npm scripts 脚本；</p></li><li><p>npm 脚本的退出码，也自然遵守 Shell 脚本规则；</p></li><li><p>如果我们的系统里安装了 Python，可以将 Python 脚本作为 npm scripts；</p></li><li><p>npm scripts 脚本可以使用 Shell 通配符等常规能力。</p></li></ul><p>比如这样的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;lint&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;eslint **/*.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;lint&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eslint **/*.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p><code>*</code>表示任意文件名，<code>**</code>表示任意一层子目录，在执行<code>npm run lint</code>后，就可以对当前目录下，任意一层子目录的 js 文件进行 lint 审查。</p><p>另外，请你思考：<code>npm run</code>创建出来的 Shell 有什么特别之处呢？</p><p>我们知道，<code>node_modules/.bin</code>子目录中的所有脚本都<strong>可以直接以脚本名的形式调用，而不必写出完整路径</strong>，比如下面代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;webpack&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;webpack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 package.json 中直接写<code>webpack</code>即可，而不需要写成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./node_modules/.bin/webpack&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./node_modules/.bin/webpack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>的形式。这是为什么呢？</p><p>实际上，<code>npm run</code>创建出来的 Shell 需要<strong>将当前目录的</strong> <code>node_modules/.bin</code>子目录加入<strong>PATH 变量中</strong>，在 npm scripts 执行完成后，再将 PATH 变量恢复。</p><h4 id="npm-scripts-使用技巧" tabindex="-1">npm scripts 使用技巧 <a class="header-anchor" href="#npm-scripts-使用技巧" aria-label="Permalink to &quot;npm scripts 使用技巧&quot;">​</a></h4><p>这里我们简单讲解两个常见场景，以此介绍 npm scripts 的关键使用技巧。</p><p><strong>传递参数</strong></p><p>任何命令脚本，都需要进行参数传递。在 npm scripts 中，可以使用<code>--</code>标记参数。比如下面代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ webpack </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">profile </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">json </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> stats.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ webpack </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">profile </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">json </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> stats.json</span></span></code></pre></div><p>另外一种传参的方式是通过 package.json，比如下面代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;webpack --profile --json &gt; stats.json&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;build&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;webpack --profile --json &gt; stats.json&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>串行/并行执行脚本</strong></p><p>在一个项目中，任意 npm scripts 可能彼此之间都有会依赖关系，我们可以通过<code>&amp;&amp;</code>符号来串行执行脚本。比如下面代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm run pre.js </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> npm run post.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm run pre.js </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> npm run post.js</span></span></code></pre></div><p>如果需要并行执行，可以使用<code>&amp;</code>符号，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm run scriptA.js </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> npm run scriptB.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm run scriptA.js </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> npm run scriptB.js</span></span></code></pre></div><p>这两种串行/并行执行方式其实是 Bash 的能力，社区里也封装了很多串行/并行执行脚本的公共包供开发者选用，比如：<a href="https://github.com/mysticatea/npm-run-all" target="_blank" rel="noreferrer">npm-run-all</a> 就是一个常用的例子。</p><p><strong>最后的提醒</strong></p><p>最后，特别强调两点注意事项。</p><p>首先，<strong>npm scripts 可以和 git-hooks 相结合</strong> ，为项目提供更顺畅、自然的能力。比如 <a href="https://github.com/observing/pre-commit" target="_blank" rel="noreferrer">pre-commit</a>、<a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer">husky</a>、<a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer">lint-staged</a> 这类工具，支持 Git Hooks 各种种类，在必要的 git 操作节点，执行我们的 npm scripts。</p><p>同时需要注意的是，我们编写的 npm scripts 应该考虑<strong>不同操作系统上兼容性的问题</strong> ，因为 npm scripts 理论上在任何系统都应该 just work。社区为我们提供了很多跨平台的方案，比如 <a href="https://www.npmjs.com/package/run-script-os" target="_blank" rel="noreferrer">un-script-os</a> 允许我们针对不同平台进行不同的定制化脚本，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;run-script-os&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test:win32&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;echo &#39;del whatever you want in Windows 32/64&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test:darwin:linux&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;echo &#39;You can combine OS tags and rm all the things!&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test:default&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;echo &#39;This will run on any platform that does not have its own script&#39;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;run-script-os&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test:win32&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;echo &#39;del whatever you want in Windows 32/64&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test:darwin:linux&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;echo &#39;You can combine OS tags and rm all the things!&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test:default&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;echo &#39;This will run on any platform that does not have its own script&#39;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再比如，更加常见的<a href="https://www.npmjs.com/package/cross-env" target="_blank" rel="noreferrer">https://www.npmjs.com/package/cross-env</a>，可以为我们自动在不同的平台设置环境变量。</p><p>好了，接下来我们从一个实例出发，打造一个 lucas-scripts，实践操作 npm scripts，同时丰富我们的工程化经验。</p><h3 id="打造一个-lucas-scripts" tabindex="-1">打造一个 lucas-scripts <a class="header-anchor" href="#打造一个-lucas-scripts" aria-label="Permalink to &quot;打造一个 lucas-scripts&quot;">​</a></h3><p>lucas-scripts 其实是我设想的一个 npm scripts 插件集合，通过 Monorepo 风格的项目，借助 npm 抽象&quot;自己常用的&quot;npm scripts 脚本，以在多个项目中达到复用的目的。</p><p>其设计思想其实源于 Kent C.Dodds（<a href="https://kentcdodds.com/blog/tools-without-config/" target="_blank" rel="noreferrer">https://kentcdodds.com/blog</a>）的：Tools without config 思想。事实上，在 PayPal 公司内部，有一个 paypal-scripts（未开源），借助 paypal-scripts 的设计思路，就有了 lucas-scripts。我们先从设计思想上分析，不管是 paypal-scripts 还是 lucas-scripts，它们主要解决了哪类问题。</p><p>谈到前端开发，各种工具配置着实令人头大，而对于一个企业级团队来说，维护统一的企业级工具配置或设计，对工程效率的提升至关重要。这些工具包括但不限于：</p><ul><li><p>测试工具及方案</p></li><li><p>Client 端打包工具及方案</p></li><li><p>Linting 工具及方案</p></li><li><p>Babel 工具及方案</p></li></ul><p>等等，这些工具及方案的背后往往是烦琐的配置，同时，这些配置的设计却至关重要。比如我们的 Webpack 可以工作，但是它的配置设计却经常经不起推敲；Linters 经常过时，跟不上语言的发展，使得我们的构建流程无比脆弱而容易中断。</p><p>在此背景下，lucas-scripts 负责维护和掌管工程基建中的种种工具及方案，同时它的使命不仅仅是 Bootstrap 一个项目，而是长期维护基建方案，可以随时升级，随时插拔。</p><p>这很类似我们熟悉的 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noreferrer">create-react-app</a>，create-react-app 可以帮助 React 开发者迅速启动一个项目，它以黑盒的方式维护了 Webpack 构建以及 Jest 测试、Eslint 等能力。开发者只需要使用 react-scripts 就能够满足构建和测试等需求，开发者只需要关心业务开发。lucas-scripts 的理念相同：开发者只需要使用 lucas-scripts，就可以使用开箱即用的各类型 npm scripts 插件，npm scripts 插件提供基础工具的配置和方案设计。</p><p>但需要注意的是，<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noreferrer">create-react-app</a> 官方并不允许开发者自定义这些工具的配置及方案设计，而我们的 lucas-scripts 理应实现更灵活的配置能力。如何做到开发者自定义配置的能力呢？设计上，我们支持<strong>开发者在项目中添加</strong> <code>.babelrc</code>或在项目的 package.json 中添加相应的 babel 配置项，lucas-scripts 在运行时读取这些信息，并采用开发者自定义的配置即可。</p><p>比如，我们支持项目中 package.json 配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;babel&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;presets&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;lucas-scripts/babel&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;plugins&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;glamorous-displayname&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;babel&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;presets&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;lucas-scripts/babel&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;plugins&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;glamorous-displayname&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码可以做到使用 lucas-scripts 定义的 Babel 预设，同时支持开发者使用名为 glamorous-displayname 的 Babel 插件。</p><p>下面，我们就以 lucas-scripts 中封装的 Babel 配置进行详细讲解。</p><p>在使用 lucas-scripts 的 Babel 方案时，我们提供了默认的一套 Babel 设计方案，具体代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用 browserslist 包进行降级目标设置</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> browserslist </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;browserslist&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> semver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;semver&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 几个工具包，这里不再一一展开</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ifDep,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ifAnyDep,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ifTypescript,</span></span>
<span class="line"><span style="color:#E1E4E8;">  parseEnv,</span></span>
<span class="line"><span style="color:#E1E4E8;">  appDirectory,</span></span>
<span class="line"><span style="color:#E1E4E8;">  pkg,</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../utils&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 获取环境变量</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {BABEL_ENV, NODE_ENV, BUILD_FORMAT} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p<wbr>rocess.env</span></span>
<span class="line"><span style="color:#6A737D;">// 几个关键变量的判断</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isTest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (BABEL_ENV </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> NODE_ENV) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isPreact </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseEnv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BUILD_PREACT&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isRollup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseEnv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BUILD_ROLLUP&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isUMD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BUILD_FORMAT </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;umd&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isCJS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BUILD_FORMAT </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isWebpack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseEnv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BUILD_WEBPACK&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isMinify </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseEnv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BUILD_MINIFY&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> treeshake </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseEnv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BUILD_TREESHAKE&#39;</span><span style="color:#E1E4E8;">, isRollup </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> isWebpack)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> alias </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseEnv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BUILD_ALIAS&#39;</span><span style="color:#E1E4E8;">, isPreact </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {react</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;preact&#39;</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 @babel/runtime</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hasBabelRuntimeDep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  pkg.dependencies </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> pkg.dependencies[</span><span style="color:#9ECBFF;">&#39;@babel/runtime&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> RUNTIME_HELPERS_WARN </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;You should add @babel/runtime as dependency to your package. It will allow reusing &quot;babel helpers&quot; from node_modules rather than bundling their copies into your files.&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 强制使用 @babel/runtime，以减少编译后代码体积等</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">treeshake </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hasBabelRuntimeDep </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isTest) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(RUNTIME_HELPERS_WARN)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (treeshake </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isUMD </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hasBabelRuntimeDep) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(RUNTIME_HELPERS_WARN)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取用户的 browserslist 配置，默认给一个 ie 10 和 ios 7 配置</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> browsersConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> browserslist.</span><span style="color:#B392F0;">loadConfig</span><span style="color:#E1E4E8;">({path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> appDirectory}) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;ie 10&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;ios 7&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 envTargets</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> envTargets </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isTest</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;current&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> isWebpack </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> isRollup</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {browsers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> browsersConfig}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNodeVersion</span><span style="color:#E1E4E8;">(pkg)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @babel/preset-env 配置，默认使用以下配置项</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> envOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {modules</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, loose</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> envTargets}</span></span>
<span class="line"><span style="color:#6A737D;">// babel 默认方案</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">  presets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    [require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">), envOptions],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果存在 react 或 preact 依赖，则补充 @babel/preset-react</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ifAnyDep</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;preact&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span></span>
<span class="line"><span style="color:#E1E4E8;">        require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/preset-react&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        {pragma</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> isPreact </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ifDep</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;React.h&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined},</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果使用 Typescript，则补充 @babel/preset-typescript</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ifTypescript</span><span style="color:#E1E4E8;">([require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/preset-typescript&#39;</span><span style="color:#E1E4E8;">)]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ].</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Boolean),</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// 强制使用 @babel/plugin-transform-runtime </span></span>
<span class="line"><span style="color:#E1E4E8;">      require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/plugin-transform-runtime&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      {useESModules</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> treeshake </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isCJS},</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 babel-plugin-macros</span></span>
<span class="line"><span style="color:#E1E4E8;">    require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;babel-plugin-macros&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 别名配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">          require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;babel-plugin-module-resolver&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">          {root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;./src&#39;</span><span style="color:#E1E4E8;">], alias},</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 是否编译为 UMD 规范</span></span>
<span class="line"><span style="color:#E1E4E8;">    isUMD</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;babel-plugin-transform-inline-environment-variables&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 强制使用 @babel/plugin-proposal-class-properties</span></span>
<span class="line"><span style="color:#E1E4E8;">    [require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/plugin-proposal-class-properties&#39;</span><span style="color:#E1E4E8;">), {loose</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 是否进行压缩</span></span>
<span class="line"><span style="color:#E1E4E8;">    isMinify</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;babel-plugin-minify-dead-code-elimination&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    treeshake</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/plugin-transform-modules-commonjs&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ].</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Boolean),</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 node 版本</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">getNodeVersion</span><span style="color:#E1E4E8;">({engines</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nodeVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;10.13&#39;</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> oldestVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> semver</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">validRange</span><span style="color:#E1E4E8;">(nodeVersion)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">&gt;=&lt;|</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">g, </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Boolean)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(semver.compare)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">oldestVersion) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      \`Unable to determine the oldest version in the range in your package.json at engines.node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${nodeVersion}&quot;</span><span style="color:#E1E4E8;">. Please attempt to make it less ambiguous.\`,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> oldestVersion</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用 browserslist 包进行降级目标设置</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> browserslist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;browserslist&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> semver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;semver&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 几个工具包，这里不再一一展开</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  ifDep,</span></span>
<span class="line"><span style="color:#24292E;">  ifAnyDep,</span></span>
<span class="line"><span style="color:#24292E;">  ifTypescript,</span></span>
<span class="line"><span style="color:#24292E;">  parseEnv,</span></span>
<span class="line"><span style="color:#24292E;">  appDirectory,</span></span>
<span class="line"><span style="color:#24292E;">  pkg,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../utils&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 获取环境变量</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {BABEL_ENV, NODE_ENV, BUILD_FORMAT} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p<wbr>rocess.env</span></span>
<span class="line"><span style="color:#6A737D;">// 几个关键变量的判断</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isTest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BABEL_ENV </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> NODE_ENV) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isPreact </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseEnv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BUILD_PREACT&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isRollup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseEnv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BUILD_ROLLUP&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isUMD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BUILD_FORMAT </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;umd&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isCJS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BUILD_FORMAT </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isWebpack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseEnv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BUILD_WEBPACK&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isMinify </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseEnv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BUILD_MINIFY&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> treeshake </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseEnv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BUILD_TREESHAKE&#39;</span><span style="color:#24292E;">, isRollup </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> isWebpack)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> alias </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseEnv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BUILD_ALIAS&#39;</span><span style="color:#24292E;">, isPreact </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {react</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;preact&#39;</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 @babel/runtime</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hasBabelRuntimeDep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  pkg.dependencies </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> pkg.dependencies[</span><span style="color:#032F62;">&#39;@babel/runtime&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> RUNTIME_HELPERS_WARN </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;You should add @babel/runtime as dependency to your package. It will allow reusing &quot;babel helpers&quot; from node_modules rather than bundling their copies into your files.&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 强制使用 @babel/runtime，以减少编译后代码体积等</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">treeshake </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hasBabelRuntimeDep </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isTest) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(RUNTIME_HELPERS_WARN)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (treeshake </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isUMD </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hasBabelRuntimeDep) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(RUNTIME_HELPERS_WARN)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取用户的 browserslist 配置，默认给一个 ie 10 和 ios 7 配置</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> browsersConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> browserslist.</span><span style="color:#6F42C1;">loadConfig</span><span style="color:#24292E;">({path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> appDirectory}) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;ie 10&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;ios 7&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 envTargets</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> envTargets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isTest</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;current&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> isWebpack </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> isRollup</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {browsers</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> browsersConfig}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNodeVersion</span><span style="color:#24292E;">(pkg)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @babel/preset-env 配置，默认使用以下配置项</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> envOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {modules</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, loose</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> envTargets}</span></span>
<span class="line"><span style="color:#6A737D;">// babel 默认方案</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">  presets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    [require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">), envOptions],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果存在 react 或 preact 依赖，则补充 @babel/preset-react</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ifAnyDep</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      [</span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;preact&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      [</span></span>
<span class="line"><span style="color:#24292E;">        require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/preset-react&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        {pragma</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> isPreact </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ifDep</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;React.h&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;h&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined},</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果使用 Typescript，则补充 @babel/preset-typescript</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ifTypescript</span><span style="color:#24292E;">([require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/preset-typescript&#39;</span><span style="color:#24292E;">)]),</span></span>
<span class="line"><span style="color:#24292E;">  ].</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Boolean),</span></span>
<span class="line"><span style="color:#24292E;">  plugins</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// 强制使用 @babel/plugin-transform-runtime </span></span>
<span class="line"><span style="color:#24292E;">      require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/plugin-transform-runtime&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      {useESModules</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> treeshake </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isCJS},</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 babel-plugin-macros</span></span>
<span class="line"><span style="color:#24292E;">    require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;babel-plugin-macros&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 别名配置</span></span>
<span class="line"><span style="color:#24292E;">    alias</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">          require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;babel-plugin-module-resolver&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">          {root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;./src&#39;</span><span style="color:#24292E;">], alias},</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否编译为 UMD 规范</span></span>
<span class="line"><span style="color:#24292E;">    isUMD</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;babel-plugin-transform-inline-environment-variables&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 强制使用 @babel/plugin-proposal-class-properties</span></span>
<span class="line"><span style="color:#24292E;">    [require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/plugin-proposal-class-properties&#39;</span><span style="color:#24292E;">), {loose</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否进行压缩</span></span>
<span class="line"><span style="color:#24292E;">    isMinify</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;babel-plugin-minify-dead-code-elimination&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    treeshake</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/plugin-transform-modules-commonjs&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  ].</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Boolean),</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 获取 node 版本</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">getNodeVersion</span><span style="color:#24292E;">({engines</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nodeVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;10.13&#39;</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}}) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> oldestVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> semver</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">validRange</span><span style="color:#24292E;">(nodeVersion)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">&gt;=&lt;|</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">g, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Boolean)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(semver.compare)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">oldestVersion) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      \`Unable to determine the oldest version in the range in your package.json at engines.node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${nodeVersion}&quot;</span><span style="color:#24292E;">. Please attempt to make it less ambiguous.\`,</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldestVersion</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过上面代码，我们将 Babel 方案强制使用了一些最佳实践，比如使用了特定 loose、moudles 设置的 @babel/preset-env 配置项，使用了 @babel/plugin-transform-runtime，使用了 @babel/plugin-proposal-class-properties，各种原理我们已经在 07 讲《<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5912" target="_blank" rel="noreferrer">梳理混乱的 Babel，不再被编译报错困扰</a>》中有所涉及。</p><p>了解了 Babel 的设计方案，我们在使用 lucas-scripts 时是如何调用设计方案并执行 Babel 编译的呢？我们看看相关逻辑源码，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 支持使用 DEFAULT_EXTENSIONS，具体见：https://www.babeljs.cn/docs/babel-core#default_extensions</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {DEFAULT_EXTENSIONS} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/core&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> spawn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cross-spawn&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> yargsParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;yargs-parser&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> rimraf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;rimraf&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> glob </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;glob&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 工具方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hasPkgProp,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fromRoot,</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolveBin,</span></span>
<span class="line"><span style="color:#E1E4E8;">  hasFile,</span></span>
<span class="line"><span style="color:#E1E4E8;">  hasTypescript,</span></span>
<span class="line"><span style="color:#E1E4E8;">  generateTypeDefs,</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../../utils&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">let args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.argv.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> here </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, p)</span></span>
<span class="line"><span style="color:#6A737D;">// 解析命令行参数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parsedArgs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">yargsParser</span><span style="color:#E1E4E8;">(args)</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 lucas-scripts 提供的默认 babel 方案</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> useBuiltinConfig </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--presets&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.babelrc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.babelrc.js&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;babel.config.js&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasPkgProp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;babel&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 lucas-scripts 提供的默认 babel 方案，读取相关配置</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useBuiltinConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--presets&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">here</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../../config/babelrc.js&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 babel-core 所提供的 DEFAULT_EXTENSIONS 能力</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> extensions </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--extensions&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--x&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--extensions&#39;</span><span style="color:#E1E4E8;">, [...DEFAULT_EXTENSIONS, </span><span style="color:#9ECBFF;">&#39;.ts&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.tsx&#39;</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#6A737D;">// 忽略某些文件夹，不进行编译</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> builtInIgnore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;**/__tests__/**,**/__mocks__/**&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ignore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--ignore&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--ignore&#39;</span><span style="color:#E1E4E8;">, builtInIgnore]</span></span>
<span class="line"><span style="color:#6A737D;">// 是否复制文件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> copyFiles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--no-copy-files&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--copy-files&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用特定的 output 文件夹</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> useSpecifiedOutDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--out-dir&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 默认的 output 文件夹名为 dist</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> builtInOutDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dist&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> outDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useSpecifiedOutDir </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--out-dir&#39;</span><span style="color:#E1E4E8;">, builtInOutDir]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> noTypeDefinitions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--no-ts-defs&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 编译开始前，是否先清理 output 文件夹</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">useSpecifiedOutDir </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--no-clean&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rimraf.</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fromRoot</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;--no-clean&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (noTypeDefinitions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;--no-ts-defs&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 入口编译流程</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 使用 spawn.sync 方式，调用 @babel/cli </span></span>
<span class="line"><span style="color:#E1E4E8;">  let result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> spawn.</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolveBin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@babel/cli&#39;</span><span style="color:#E1E4E8;">, {executable</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;babel&#39;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...outDir,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...copyFiles,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...ignore,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...extensions,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...config,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;src&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ].</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(args),</span></span>
<span class="line"><span style="color:#E1E4E8;">    {stdio</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;inherit&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果 status 不为 0，返回编译状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.status </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.status</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> pathToOutDir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fromRoot</span><span style="color:#E1E4E8;">(parsedArgs.outDir </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> builtInOutDir)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 使用 Typescript，并产出 type 类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hasTypescript </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">noTypeDefinitions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Generating TypeScript definitions&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateTypeDefs</span><span style="color:#E1E4E8;">(pathToOutDir)</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TypeScript definitions generated&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.status </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.status</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 因为 babel 目前仍然会拷贝一份需要忽略不进行编译的文件，所以我们将这些文件手动进行清理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ignoredPatterns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (parsedArgs.ignore </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> builtInIgnore)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(pattern </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(pathToOutDir, pattern))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ignoredFiles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ignoredPatterns.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    (all, pattern) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [...all, ...glob.</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(pattern)],</span></span>
<span class="line"><span style="color:#E1E4E8;">    [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  ignoredFiles.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(ignoredFile </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rimraf.</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(ignoredFile)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.status</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 支持使用 DEFAULT_EXTENSIONS，具体见：https://www.babeljs.cn/docs/babel-core#default_extensions</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {DEFAULT_EXTENSIONS} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/core&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> spawn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cross-spawn&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> yargsParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;yargs-parser&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> rimraf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;rimraf&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> glob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;glob&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 工具方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  hasPkgProp,</span></span>
<span class="line"><span style="color:#24292E;">  fromRoot,</span></span>
<span class="line"><span style="color:#24292E;">  resolveBin,</span></span>
<span class="line"><span style="color:#24292E;">  hasFile,</span></span>
<span class="line"><span style="color:#24292E;">  hasTypescript,</span></span>
<span class="line"><span style="color:#24292E;">  generateTypeDefs,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../../utils&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">let args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process.argv.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> here </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, p)</span></span>
<span class="line"><span style="color:#6A737D;">// 解析命令行参数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parsedArgs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">yargsParser</span><span style="color:#24292E;">(args)</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 lucas-scripts 提供的默认 babel 方案</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> useBuiltinConfig </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--presets&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.babelrc&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.babelrc.js&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;babel.config.js&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasPkgProp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;babel&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 lucas-scripts 提供的默认 babel 方案，读取相关配置</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> useBuiltinConfig</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--presets&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">here</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../../config/babelrc.js&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 babel-core 所提供的 DEFAULT_EXTENSIONS 能力</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> extensions </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--extensions&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--x&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--extensions&#39;</span><span style="color:#24292E;">, [...DEFAULT_EXTENSIONS, </span><span style="color:#032F62;">&#39;.ts&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.tsx&#39;</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#6A737D;">// 忽略某些文件夹，不进行编译</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> builtInIgnore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;**/__tests__/**,**/__mocks__/**&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ignore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--ignore&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--ignore&#39;</span><span style="color:#24292E;">, builtInIgnore]</span></span>
<span class="line"><span style="color:#6A737D;">// 是否复制文件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> copyFiles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--no-copy-files&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--copy-files&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用特定的 output 文件夹</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> useSpecifiedOutDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--out-dir&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 默认的 output 文件夹名为 dist</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> builtInOutDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dist&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> outDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> useSpecifiedOutDir </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--out-dir&#39;</span><span style="color:#24292E;">, builtInOutDir]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> noTypeDefinitions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--no-ts-defs&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 编译开始前，是否先清理 output 文件夹</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">useSpecifiedOutDir </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--no-clean&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">  rimraf.</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fromRoot</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;--no-clean&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (noTypeDefinitions) {</span></span>
<span class="line"><span style="color:#24292E;">  args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;--no-ts-defs&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 入口编译流程</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 使用 spawn.sync 方式，调用 @babel/cli </span></span>
<span class="line"><span style="color:#24292E;">  let result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> spawn.</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolveBin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@babel/cli&#39;</span><span style="color:#24292E;">, {executable</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;babel&#39;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">      ...outDir,</span></span>
<span class="line"><span style="color:#24292E;">      ...copyFiles,</span></span>
<span class="line"><span style="color:#24292E;">      ...ignore,</span></span>
<span class="line"><span style="color:#24292E;">      ...extensions,</span></span>
<span class="line"><span style="color:#24292E;">      ...config,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ].</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(args),</span></span>
<span class="line"><span style="color:#24292E;">    {stdio</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;inherit&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果 status 不为 0，返回编译状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.status </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.status</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> pathToOutDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fromRoot</span><span style="color:#24292E;">(parsedArgs.outDir </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> builtInOutDir)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 使用 Typescript，并产出 type 类型</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hasTypescript </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">noTypeDefinitions) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Generating TypeScript definitions&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateTypeDefs</span><span style="color:#24292E;">(pathToOutDir)</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;TypeScript definitions generated&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.status </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.status</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 因为 babel 目前仍然会拷贝一份需要忽略不进行编译的文件，所以我们将这些文件手动进行清理</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ignoredPatterns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (parsedArgs.ignore </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> builtInIgnore)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(pattern </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(pathToOutDir, pattern))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ignoredFiles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ignoredPatterns.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (all, pattern) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [...all, ...glob.</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(pattern)],</span></span>
<span class="line"><span style="color:#24292E;">    [],</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  ignoredFiles.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(ignoredFile </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    rimraf.</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(ignoredFile)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.status</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">())</span></span></code></pre></div><p>通过上面代码，我们就可以将 lucas-script 的 Babel 方案融会贯通了。</p><p>整体设计思路我 fork 了 <a href="https://github.com/kentcdodds/kcd-scripts" target="_blank" rel="noreferrer">https://github.com/kentcdodds/kcd-scripts</a>，并进行部分优化和改动，你可以在<a href="https://github.com/HOUCe/kcd-scripts" target="_blank" rel="noreferrer">https://github.com/HOUCe/kcd-scripts</a>中进一步学习。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们先介绍了 npm scripts 的重要性，接着分析了 npm scripts 的原理；后半部分，从实践出发，分析了 lucas-scripts 的设计理念，以此进一步巩固 npm scripts 相关知识。</p><p>本讲内容总结如下：</p>`,71),E=s("p",null,"说到底，npm scripts 就是一个 Shell，我们以前端开发者所熟悉的 Node.js 来实现 npm scripts，当然这还不够。事实上，npm scripts 的背后是对一整套工程化体系的理解，比如我们需要通过 npm scripts 来抽象 Babel 方案、抽象 Rollup 方案等。相信通过这一讲的学习，你会有所收获。",-1),y=s("p",null,"下一讲，我们将深入工程化体系的一个重点细节------自动化代码检查，并反过来使用 lucas-scripts 再实现一套智能的代码 Lint 脚本，请你继续学习。",-1);function i(F,u,d,D,g,A){const n=p("Image");return l(),o("div",null,[r,e(n,{alt:"npm scripts：打造一体化的构建和部署流程.png",src:"https://s0.lgstatic.com/i/image6/M01/0A/8E/Cgp9HWA3ZvSAGD15AAITBEgOZ_c039.png"}),E,y])}const h=a(t,[["render",i]]);export{m as __pageData,h as default};
