import{_ as o,j as e,o as t,g as c,k as l,h as n,s,Q as p}from"./chunks/framework.cfb14fe0.js";const x=JSON.parse('{"title":"26加餐：直击Dubbo“心脏”，带你一起探秘Invoker（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4971) 26  加餐：直击 Dubbo “心脏”，带你一起探秘 Invoker（上）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4971) 26  加餐：直击 Dubbo “心脏”，带你一起探秘 Invoker（上）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4971) 26  加餐：直击 Dubbo “心脏”，带你一起探秘 Invoker（上）.md"},E=s("h1",{id:"_26加餐-直击dubbo-心脏-带你一起探秘invoker-上",tabindex:"-1"},[n("26加餐：直击Dubbo“心脏”，带你一起探秘Invoker（上） "),s("a",{class:"header-anchor",href:"#_26加餐-直击dubbo-心脏-带你一起探秘invoker-上","aria-label":'Permalink to "26加餐：直击Dubbo“心脏”，带你一起探秘Invoker（上）"'},"​")],-1),y=s("p",null,"在前面课时介绍 DubboProtocol 的时候我们看到，上层业务 Bean 会被封装成 Invoker 对象，然后传入 DubboProtocol.export() 方法中，该 Invoker 被封装成 DubboExporter，并保存到 exporterMap 集合中缓存。",-1),i=s("p",null,"在 DubboProtocol 暴露的 ProtocolServer 收到请求时，经过一系列解码处理，最终会到达 DubboProtocol.requestHandler 这个 ExchangeHandler 对象中，该 ExchangeHandler 对象会从 exporterMap 集合中取出请求的 Invoker，并调用其 invoke() 方法处理请求。",-1),d=s("p",null,"DubboProtocol.protocolBindingRefer() 方法则会将底层的 ExchangeClient 集合封装成 DubboInvoker，然后由上层逻辑封装成代理对象，这样业务层就可以像调用本地 Bean 一样，完成远程调用。",-1),h=s("h3",{id:"深入-invoker",tabindex:"-1"},[n("深入 Invoker "),s("a",{class:"header-anchor",href:"#深入-invoker","aria-label":'Permalink to "深入 Invoker"'},"​")],-1),u=s("p",null,"首先，我们来看 AbstractInvoker 这个抽象类，它继承了 Invoker 接口，继承关系如下图所示：",-1),v=p(`<p>AbstractInvoker 继承关系示意图</p><p>从图中可以看到，最核心的 DubboInvoker 继承自AbstractInvoker 抽象类，AbstractInvoker 的核心字段有如下几个。</p><ul><li><p>type（Class<code>&lt;T&gt;</code> 类型）：该 Invoker 对象封装的业务接口类型，例如 Demo 示例中的 DemoService 接口。</p></li><li><p>url（URL 类型）：与当前 Invoker 关联的 URL 对象，其中包含了全部的配置信息。</p></li><li><p>attachment（Map&lt;String, Object&gt; 类型）：当前 Invoker 关联的一些附加信息，这些附加信息可以来自关联的 URL。在 AbstractInvoker 的构造函数的某个重载中，会调用 convertAttachment() 方法，其中就会从关联的 URL 对象获取指定的 KV 值记录到 attachment 集合中。</p></li><li><p>available（volatile boolean类型）、destroyed（AtomicBoolean 类型）：这两个字段用来控制当前 Invoker 的状态。available 默认值为 true，destroyed 默认值为 false。在 destroy() 方法中会将 available 设置为 false，将 destroyed 字段设置为 true。</p></li></ul><p>在 AbstractInvoker 中实现了 Invoker 接口中的 invoke() 方法，这里有点模板方法模式的感觉，其中先对 URL 中的配置信息以及 RpcContext 中携带的附加信息进行处理，添加到 Invocation 中作为附加信息，然后调用 doInvoke() 方法发起远程调用（该方法由 AbstractInvoker 的子类具体实现），最后得到 AsyncRpcResult 对象返回。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Invocation inv) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 首先将传入的Invocation转换为RpcInvocation</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcInvocation invocation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (RpcInvocation) inv;</span></span>
<span class="line"><span style="color:#E1E4E8;">    invocation.</span><span style="color:#B392F0;">setInvoker</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将前文介绍的attachment集合添加为Invocation的附加信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmptyMap</span><span style="color:#E1E4E8;">(attachment)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        invocation.</span><span style="color:#B392F0;">addObjectAttachmentsIfAbsent</span><span style="color:#E1E4E8;">(attachment);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将RpcContext的附加信息添加为Invocation的附加信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; contextAttachments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getObjectAttachments</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmptyMap</span><span style="color:#E1E4E8;">(contextAttachments)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        invocation.</span><span style="color:#B392F0;">addObjectAttachments</span><span style="color:#E1E4E8;">(contextAttachments);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置此次调用的模式，异步还是同步</span></span>
<span class="line"><span style="color:#E1E4E8;">    invocation.</span><span style="color:#B392F0;">setInvokeMode</span><span style="color:#E1E4E8;">(RpcUtils.</span><span style="color:#B392F0;">getInvokeMode</span><span style="color:#E1E4E8;">(url, invocation));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果是异步调用，给这次调用添加一个唯一ID</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcUtils.</span><span style="color:#B392F0;">attachInvocationIdIfAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    AsyncRpcResult asyncResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 调用子类实现的doInvoke()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        asyncResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (AsyncRpcResult) </span><span style="color:#B392F0;">doInvoke</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InvocationTargetException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (RpcException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        asyncResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AsyncRpcResult.</span><span style="color:#B392F0;">newDefaultAsyncResult</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, e, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setFuture</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FutureAdapter</span><span style="color:#E1E4E8;">(asyncResult.</span><span style="color:#B392F0;">getResponseFuture</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> asyncResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Invocation inv) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 首先将传入的Invocation转换为RpcInvocation</span></span>
<span class="line"><span style="color:#24292E;">    RpcInvocation invocation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (RpcInvocation) inv;</span></span>
<span class="line"><span style="color:#24292E;">    invocation.</span><span style="color:#6F42C1;">setInvoker</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将前文介绍的attachment集合添加为Invocation的附加信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmptyMap</span><span style="color:#24292E;">(attachment)) {</span></span>
<span class="line"><span style="color:#24292E;">        invocation.</span><span style="color:#6F42C1;">addObjectAttachmentsIfAbsent</span><span style="color:#24292E;">(attachment);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将RpcContext的附加信息添加为Invocation的附加信息</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; contextAttachments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getObjectAttachments</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmptyMap</span><span style="color:#24292E;">(contextAttachments)) {</span></span>
<span class="line"><span style="color:#24292E;">        invocation.</span><span style="color:#6F42C1;">addObjectAttachments</span><span style="color:#24292E;">(contextAttachments);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置此次调用的模式，异步还是同步</span></span>
<span class="line"><span style="color:#24292E;">    invocation.</span><span style="color:#6F42C1;">setInvokeMode</span><span style="color:#24292E;">(RpcUtils.</span><span style="color:#6F42C1;">getInvokeMode</span><span style="color:#24292E;">(url, invocation));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果是异步调用，给这次调用添加一个唯一ID</span></span>
<span class="line"><span style="color:#24292E;">    RpcUtils.</span><span style="color:#6F42C1;">attachInvocationIdIfAsync</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), invocation);</span></span>
<span class="line"><span style="color:#24292E;">    AsyncRpcResult asyncResult;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 调用子类实现的doInvoke()方法</span></span>
<span class="line"><span style="color:#24292E;">        asyncResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (AsyncRpcResult) </span><span style="color:#6F42C1;">doInvoke</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InvocationTargetException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (RpcException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 省略异常处理的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        asyncResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsyncRpcResult.</span><span style="color:#6F42C1;">newDefaultAsyncResult</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, e, invocation);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setFuture</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FutureAdapter</span><span style="color:#24292E;">(asyncResult.</span><span style="color:#6F42C1;">getResponseFuture</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> asyncResult;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，需要深入介绍的第一个类是 RpcContext。</p><h3 id="rpccontext" tabindex="-1">RpcContext <a class="header-anchor" href="#rpccontext" aria-label="Permalink to &quot;RpcContext&quot;">​</a></h3><p><strong>RpcContext 是线程级别的上下文信息</strong>，每个线程绑定一个 RpcContext 对象，底层依赖 ThreadLocal 实现。RpcContext 主要用于存储一个线程中一次请求的临时状态，当线程处理新的请求（Provider 端）或是线程发起新的请求（Consumer 端）时，RpcContext 中存储的内容就会更新。</p><p>下面来看 RpcContext 中两个<strong>InternalThreadLocal</strong>的核心字段，这两个字段的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在发起请求时，会使用该RpcContext来存储上下文信息</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InternalThreadLocal&lt;</span><span style="color:#F97583;">RpcContext</span><span style="color:#E1E4E8;">&gt; LOCAL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> InternalThreadLocal&lt;</span><span style="color:#F97583;">RpcContext</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> RpcContext </span><span style="color:#B392F0;">initialValue</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在接收到响应的时候，会使用该RpcContext来存储上下文信息</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InternalThreadLocal&lt;</span><span style="color:#F97583;">RpcContext</span><span style="color:#E1E4E8;">&gt; SERVER_LOCAL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在发起请求时，会使用该RpcContext来存储上下文信息</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InternalThreadLocal&lt;</span><span style="color:#D73A49;">RpcContext</span><span style="color:#24292E;">&gt; LOCAL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> InternalThreadLocal&lt;</span><span style="color:#D73A49;">RpcContext</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> RpcContext </span><span style="color:#6F42C1;">initialValue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在接收到响应的时候，会使用该RpcContext来存储上下文信息</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InternalThreadLocal&lt;</span><span style="color:#D73A49;">RpcContext</span><span style="color:#24292E;">&gt; SERVER_LOCAL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...</span></span></code></pre></div><p>JDK 提供的 ThreadLocal 底层实现大致如下：对于不同线程创建对应的 ThreadLocalMap，用于存放线程绑定信息，当用户调用<strong>ThreadLocal.get() 方法</strong> 获取变量时，底层会先获取当前线程 Thread，然后获取绑定到当前线程 Thread 的 ThreadLocalMap，最后将当前 ThreadLocal 对象作为 Key 去 ThreadLocalMap 表中获取线程绑定的数据。<strong>ThreadLocal.set() 方法</strong>的逻辑与之类似，首先会获取绑定到当前线程的 ThreadLocalMap，然后将 ThreadLocal 实例作为 Key、待存储的数据作为 Value 存储到 ThreadLocalMap 中。</p><p>Dubbo 的 InternalThreadLocal 与 JDK 提供的 ThreadLocal 功能类似，只是底层实现略有不同，其底层的 InternalThreadLocalMap 采用数组结构存储数据，直接通过 index 获取变量，相较于 Map 方式计算 hash 值的性能更好。</p><p>这里我们来介绍一下 dubbo-common 模块中的 InternalThread 这个类，它继承了 Thread 类，Dubbo 的线程工厂 NamedInternalThreadFactory 创建的线程类其实都是 InternalThread 实例对象，你可以回顾前面第 19 课时介绍的 ThreadPool 接口实现，它们都是通过 NamedInternalThreadFactory 这个工厂类来创建线程的。</p><p>InternalThread 中主要提供了 setThreadLocalMap() 和 threadLocalMap() 两个方法，用于设置和获取 InternalThreadLocalMap。InternalThreadLocalMap 中的核心字段有如下四个。</p><ul><li><p>indexedVariables（Object[] 类型）：用于存储绑定到当前线程的数据。</p></li><li><p>NEXT_INDEX（AtomicInteger 类型）：自增索引，用于计算下次存储到 indexedVariables 数组中的位置，这是一个静态字段。</p></li><li><p>slowThreadLocalMap（ThreadLocal<code>&lt;InternalThreadLocalMap&gt;</code> 类型）：当使用原生 Thread 的时候，会使用该 ThreadLocal 存储 InternalThreadLocalMap，这是一个降级策略。</p></li><li><p>UNSET（Object 类型）：当一个与线程绑定的值被删除之后，会被设置为 UNSET 值。</p></li></ul><p>在 InternalThreadLocalMap 中获取当前线程绑定的InternalThreadLocaMap的静态方法，都会与 slowThreadLocalMap 字段配合实现降级，也就是说，如果当前线程为原生 Thread 类型，则根据 slowThreadLocalMap 获取InternalThreadLocalMap。这里我们以 getIfSet() 方法为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> InternalThreadLocalMap </span><span style="color:#B392F0;">getIfSet</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取当前线程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (thread </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InternalThread) { </span><span style="color:#6A737D;">// 判断当前线程的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是InternalThread类型，直接获取InternalThreadLocalMap返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ((InternalThread) thread).</span><span style="color:#B392F0;">threadLocalMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 原生Thread则需要通过ThreadLocal获取InternalThreadLocalMap</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> slowThreadLocalMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> InternalThreadLocalMap </span><span style="color:#6F42C1;">getIfSet</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取当前线程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (thread </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InternalThread) { </span><span style="color:#6A737D;">// 判断当前线程的类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是InternalThread类型，直接获取InternalThreadLocalMap返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((InternalThread) thread).</span><span style="color:#6F42C1;">threadLocalMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 原生Thread则需要通过ThreadLocal获取InternalThreadLocalMap</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> slowThreadLocalMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>InternalThreadLocalMap 中的 get()、remove()、set() 等方法都有类似的降级操作，这里不再一一重复。</p><p>在拿到 InternalThreadLocalMap 对象之后，我们就可以调用其 setIndexedVariable() 方法和 indexedVariable() 方法读写，这里我们得结合InternalThreadLocal进行讲解。在 InternalThreadLocal 的构造方法中，会使用 InternalThreadLocalMap.NEXT_INDEX 初始化其 index 字段（int 类型），在 InternalThreadLocal.set() 方法中就会将传入的数据存储到 InternalThreadLocalMap.indexedVariables 集合中，具体的下标位置就是这里的 index 字段值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(V value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> InternalThreadLocalMap.UNSET）{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 如果要存储的值为null或是UNSERT，则直接清除</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取当前线程绑定的InternalThreadLocalMap</span></span>
<span class="line"><span style="color:#E1E4E8;">        InternalThreadLocalMap threadLocalMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> InternalThreadLocalMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将value存储到InternalThreadLocalMap.indexedVariables集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (threadLocalMap.</span><span style="color:#B392F0;">setIndexedVariable</span><span style="color:#E1E4E8;">(index, value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将当前InternalThreadLocal记录到待删除集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">addToVariablesToRemove</span><span style="color:#E1E4E8;">(threadLocalMap, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(V value) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> InternalThreadLocalMap.UNSET）{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 如果要存储的值为null或是UNSERT，则直接清除</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取当前线程绑定的InternalThreadLocalMap</span></span>
<span class="line"><span style="color:#24292E;">        InternalThreadLocalMap threadLocalMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InternalThreadLocalMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将value存储到InternalThreadLocalMap.indexedVariables集合中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (threadLocalMap.</span><span style="color:#6F42C1;">setIndexedVariable</span><span style="color:#24292E;">(index, value)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将当前InternalThreadLocal记录到待删除集合中</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">addToVariablesToRemove</span><span style="color:#24292E;">(threadLocalMap, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>InternalThreadLocal 的静态变量 VARIABLES_TO_REMOVE_INDEX 是调用InternalThreadLocalMap 的 nextVariableIndex 方法得到的一个索引值，在 InternalThreadLocalMap 数组的对应位置保存的是 Set<code>&lt;InternalThreadLocal&gt;</code> 类型的集合，也就是上面提到的&quot;待删除集合&quot;，即绑定到当前线程所有的 InternalThreadLocal，这样就可以方便管理对象及内存的释放。</p><p>接下来我们继续看 InternalThreadLocalMap.setIndexedVariable() 方法的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setIndexedVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index, Object value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] lookup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> indexedVariables;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> lookup.length) { </span><span style="color:#6A737D;">// 将value存储到index指定的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object oldValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lookup[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">        lookup[index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> oldValue </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> UNSET; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当index超过indexedVariables数组的长度时，需要对indexedVariables数组进行扩容</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">expandIndexedVariableTableAndSet</span><span style="color:#E1E4E8;">(index, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setIndexedVariable</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, Object value) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] lookup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> indexedVariables;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> lookup.length) { </span><span style="color:#6A737D;">// 将value存储到index指定的位置</span></span>
<span class="line"><span style="color:#24292E;">        Object oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lookup[index];</span></span>
<span class="line"><span style="color:#24292E;">        lookup[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldValue </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> UNSET; </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当index超过indexedVariables数组的长度时，需要对indexedVariables数组进行扩容</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">expandIndexedVariableTableAndSet</span><span style="color:#24292E;">(index, value);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>明确了设置 InternalThreadLocal 变量的流程之后，我们再来分析读取 InternalThreadLocal 变量的流程，入口在 InternalThreadLocal 的 get() 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> V </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前线程绑定的InternalThreadLocalMap</span></span>
<span class="line"><span style="color:#E1E4E8;">    InternalThreadLocalMap threadLocalMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> InternalThreadLocalMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据当前InternalThreadLocal对象的index字段，从InternalThreadLocalMap中读取相应的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> threadLocalMap.</span><span style="color:#B392F0;">indexedVariable</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (v </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> InternalThreadLocalMap.UNSET) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (V) v; </span><span style="color:#6A737D;">// 如果非UNSET，则表示读取到了有效数据，直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取到UNSET值，则会调用initialize()方法进行初始化，其中首先会调用initialValue()方法进行初始化，然后会调用前面介绍的setIndexedVariable()方法和addToVariablesToRemove()方法存储初始化得到的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(threadLocalMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> V </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前线程绑定的InternalThreadLocalMap</span></span>
<span class="line"><span style="color:#24292E;">    InternalThreadLocalMap threadLocalMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InternalThreadLocalMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据当前InternalThreadLocal对象的index字段，从InternalThreadLocalMap中读取相应的数据</span></span>
<span class="line"><span style="color:#24292E;">    Object v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> threadLocalMap.</span><span style="color:#6F42C1;">indexedVariable</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (v </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> InternalThreadLocalMap.UNSET) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (V) v; </span><span style="color:#6A737D;">// 如果非UNSET，则表示读取到了有效数据，直接返回</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取到UNSET值，则会调用initialize()方法进行初始化，其中首先会调用initialValue()方法进行初始化，然后会调用前面介绍的setIndexedVariable()方法和addToVariablesToRemove()方法存储初始化得到的值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(threadLocalMap);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以看到，在 RpcContext 中，LOCAL 和 SERVER_LOCAL 两个 InternalThreadLocal 类型的字段都实现了 initialValue() 方法，它们的实现都是创建并返回 RpcContext 对象。</p><p>理解了 InternalThreadLocal 的底层原理之后，我们回到 RpcContext 继续分析。RpcContext 作为调用的上下文信息，可以记录非常多的信息，下面介绍其中的一些核心字段。</p><ul><li><p>attachments（Map&lt;String, Object&gt; 类型）：可用于记录调用上下文的附加信息，这些信息会被添加到 Invocation 中，并传递到远端节点。</p></li><li><p>values（Map&lt;String, Object&gt; 类型）：用来记录上下文的键值对信息，但是不会被传递到远端节点。</p></li><li><p>methodName、parameterTypes、arguments：分别用来记录调用的方法名、参数类型列表以及具体的参数列表，与相关 Invocation 对象中的信息一致。</p></li><li><p>localAddress、remoteAddress（InetSocketAddress 类型）：记录了自己和远端的地址。</p></li><li><p>request、response（Object 类型）：可用于记录底层关联的请求和响应。</p></li><li><p>asyncContext（AsyncContext 类型）：异步Context，其中可以存储异步调用相关的 RpcContext 以及异步请求相关的 Future。</p></li></ul><h3 id="dubboinvoker" tabindex="-1">DubboInvoker <a class="header-anchor" href="#dubboinvoker" aria-label="Permalink to &quot;DubboInvoker&quot;">​</a></h3><p>通过前面对 DubboProtocol 的分析我们知道，protocolBindingRefer() 方法会根据调用的业务接口类型以及 URL 创建底层的 ExchangeClient 集合，然后封装成 DubboInvoker 对象返回。DubboInvoker 是 AbstractInvoker 的实现类，在其 doInvoke() 方法中首先会选择此次调用使用 ExchangeClient 对象，然后确定此次调用是否需要返回值，最后调用 ExchangeClient.request() 方法发送请求，对返回的 Future 进行简单封装并返回。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Result </span><span style="color:#B392F0;">doInvoke</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Invocation invocation) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    RpcInvocation inv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (RpcInvocation) invocation;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 此次调用的方法名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcUtils.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 向Invocation中添加附加信息，这里将URL的path和version添加到附加信息中</span></span>
<span class="line"><span style="color:#E1E4E8;">    inv.</span><span style="color:#B392F0;">setAttachment</span><span style="color:#E1E4E8;">(PATH_KEY, </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    inv.</span><span style="color:#B392F0;">setAttachment</span><span style="color:#E1E4E8;">(VERSION_KEY, version);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExchangeClient currentClient; </span><span style="color:#6A737D;">// 选择一个ExchangeClient实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (clients.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clients[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clients[index.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> clients.length];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isOneway </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RpcUtils.</span><span style="color:#B392F0;">isOneway</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据调用的方法名称和配置计算此次调用的超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calculateTimeout</span><span style="color:#E1E4E8;">(invocation, methodName); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isOneway) { </span><span style="color:#6A737D;">// 不需要关注返回值的请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isSent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethodParameter</span><span style="color:#E1E4E8;">(methodName, Constants.SENT_KEY, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentClient.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(inv, isSent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> AsyncRpcResult.</span><span style="color:#B392F0;">newDefaultAsyncResult</span><span style="color:#E1E4E8;">(invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 需要关注返回值的请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取处理响应的线程池，对于同步请求，会使用ThreadlessExecutor，ThreadlessExecutor的原理前面已经分析过了，这里不再赘述；对于异步请求，则会使用共享的线程池，ExecutorRepository接口的相关设计和实现在前面已经详细分析过了，这里不再重复。</span></span>
<span class="line"><span style="color:#E1E4E8;">        ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCallbackExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), inv);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 使用上面选出的ExchangeClient执行request()方法，将请求发送出去</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">AppResponse</span><span style="color:#E1E4E8;">&gt; appResponseFuture </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                currentClient.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(inv, timeout, executor).</span><span style="color:#B392F0;">thenApply</span><span style="color:#E1E4E8;">(obj </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> (AppResponse) obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里将AppResponse封装成AsyncRpcResult返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        AsyncRpcResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncRpcResult</span><span style="color:#E1E4E8;">(appResponseFuture, inv);</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">setExecutor</span><span style="color:#E1E4E8;">(executor);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Result </span><span style="color:#6F42C1;">doInvoke</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Invocation invocation) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    RpcInvocation inv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (RpcInvocation) invocation;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 此次调用的方法名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcUtils.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 向Invocation中添加附加信息，这里将URL的path和version添加到附加信息中</span></span>
<span class="line"><span style="color:#24292E;">    inv.</span><span style="color:#6F42C1;">setAttachment</span><span style="color:#24292E;">(PATH_KEY, </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    inv.</span><span style="color:#6F42C1;">setAttachment</span><span style="color:#24292E;">(VERSION_KEY, version);</span></span>
<span class="line"><span style="color:#24292E;">    ExchangeClient currentClient; </span><span style="color:#6A737D;">// 选择一个ExchangeClient实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (clients.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        currentClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clients[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        currentClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clients[index.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> clients.length];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isOneway </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RpcUtils.</span><span style="color:#6F42C1;">isOneway</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), invocation);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据调用的方法名称和配置计算此次调用的超时时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calculateTimeout</span><span style="color:#24292E;">(invocation, methodName); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isOneway) { </span><span style="color:#6A737D;">// 不需要关注返回值的请求</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isSent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethodParameter</span><span style="color:#24292E;">(methodName, Constants.SENT_KEY, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        currentClient.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(inv, isSent);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> AsyncRpcResult.</span><span style="color:#6F42C1;">newDefaultAsyncResult</span><span style="color:#24292E;">(invocation);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 需要关注返回值的请求</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取处理响应的线程池，对于同步请求，会使用ThreadlessExecutor，ThreadlessExecutor的原理前面已经分析过了，这里不再赘述；对于异步请求，则会使用共享的线程池，ExecutorRepository接口的相关设计和实现在前面已经详细分析过了，这里不再重复。</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCallbackExecutor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), inv);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用上面选出的ExchangeClient执行request()方法，将请求发送出去</span></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">AppResponse</span><span style="color:#24292E;">&gt; appResponseFuture </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                currentClient.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(inv, timeout, executor).</span><span style="color:#6F42C1;">thenApply</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> (AppResponse) obj);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里将AppResponse封装成AsyncRpcResult返回</span></span>
<span class="line"><span style="color:#24292E;">        AsyncRpcResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncRpcResult</span><span style="color:#24292E;">(appResponseFuture, inv);</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">setExecutor</span><span style="color:#24292E;">(executor);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 DubboInvoker.invoke() 方法中有一些细节需要关注一下。首先是根据 URL 以及 Invocation 中的配置，决定此次调用是否为<strong>oneway 调用方式</strong>。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">public static boolean isOneway(URL url, Invocation inv) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    boolean isOneway;</span></span>
<span class="line"><span style="color:#E1E4E8;">    if (Boolean.FALSE.toString().equals(inv.getAttachment(RETURN_KEY))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        isOneway = true; // 首先关注的是Invocation中&quot;return&quot;这个附加属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    } else {</span></span>
<span class="line"><span style="color:#E1E4E8;">        isOneway = !url.getMethodParameter(getMethodName(inv), RETURN_KEY, true); // 之后关注URL中，调用方法对应的&quot;return&quot;配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    return isOneway;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">public static boolean isOneway(URL url, Invocation inv) {</span></span>
<span class="line"><span style="color:#24292E;">    boolean isOneway;</span></span>
<span class="line"><span style="color:#24292E;">    if (Boolean.FALSE.toString().equals(inv.getAttachment(RETURN_KEY))) {</span></span>
<span class="line"><span style="color:#24292E;">        isOneway = true; // 首先关注的是Invocation中&quot;return&quot;这个附加属性</span></span>
<span class="line"><span style="color:#24292E;">    } else {</span></span>
<span class="line"><span style="color:#24292E;">        isOneway = !url.getMethodParameter(getMethodName(inv), RETURN_KEY, true); // 之后关注URL中，调用方法对应的&quot;return&quot;配置</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    return isOneway;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>oneway 指的是客户端发送消息后，不需要得到响应。所以，对于那些不关心服务端响应的请求，就比较适合使用 oneway 通信，如下图所示：</p>`,34),A=p(`<p>oneway 和 twoway 通信方式对比图</p><p>可以看到发送 oneway 请求的方式是send() 方法，而后面发送 twoway 请求的方式是 request() 方法。通过之前的分析我们知道，request() 方法会相应地创建 DefaultFuture 对象以及检测超时的定时任务，而 send() 方法则不会创建这些东西，它是直接将 Invocation 包装成 oneway 类型的 Request 发送出去。</p><p>在服务端的 HeaderExchangeHandler.receive() 方法中，会针对 oneway 请求和 twoway 请求执行不同的分支处理：twoway 请求由 handleRequest() 方法进行处理，其中会关注调用结果并形成 Response 返回给客户端；oneway 请求则直接交给上层的 DubboProtocol.requestHandler，完成方法调用之后，不会返回任何 Response。</p><p>我们就结合如下示例代码来简单说明一下 HeaderExchangeHandler.request() 方法中的相关片段。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ExchangeChannel exchangeChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HeaderExchangeChannel.</span><span style="color:#B392F0;">getOrAddChannel</span><span style="color:#E1E4E8;">(channel);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (message </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (request.</span><span style="color:#B392F0;">isTwoWay</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">handleRequest</span><span style="color:#E1E4E8;">(exchangeChannel, request);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            handler.</span><span style="color:#B392F0;">received</span><span style="color:#E1E4E8;">(exchangeChannel, request.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> ... </span><span style="color:#6A737D;">// 省略其他分支的展示</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(Channel channel, Object message) throws RemotingException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ExchangeChannel exchangeChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HeaderExchangeChannel.</span><span style="color:#6F42C1;">getOrAddChannel</span><span style="color:#24292E;">(channel);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Request) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (request.</span><span style="color:#6F42C1;">isTwoWay</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(exchangeChannel, request);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            handler.</span><span style="color:#6F42C1;">received</span><span style="color:#24292E;">(exchangeChannel, request.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> ... </span><span style="color:#6A737D;">// 省略其他分支的展示</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了 Dubbo 最核心的接口------ Invoker。首先，我们介绍了 AbstractInvoker 抽象类提供的公共能力；然后分析了 RpcContext 的功能和涉及的组件，例如，InternalThreadLocal、InternalThreadLocalMap 等；最后我们说明了 DubboInvoker 对 doinvoke() 方法的实现，并区分了 oneway 和 twoway 两种类型的请求。</p><p>下一课时，我们将继续介绍 DubboInvoker 的实现。</p>`,8);function F(b,D,g,I,C,T){const a=e("Image");return t(),c("div",null,[E,y,i,d,h,u,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/61/07/Ciqc1F-Oq-uAdi4nAABRchTw_kQ666.png"}),n(),v,l(a,{alt:"Lark20201023-161312.png",src:"https://s0.lgstatic.com/i/image/M00/62/8F/CgqCHl-SkLWAaPzTAACgt5rmWHg530.png"}),n(),A])}const L=o(r,[["render",F]]);export{x as __pageData,L as default};
