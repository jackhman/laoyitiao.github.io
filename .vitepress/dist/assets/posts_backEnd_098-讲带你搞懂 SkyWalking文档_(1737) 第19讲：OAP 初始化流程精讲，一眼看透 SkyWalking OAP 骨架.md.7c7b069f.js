import{_ as p,j as e,o as r,g as t,k as a,s,h as o,Q as l}from"./chunks/framework.b3d8e22e.js";const R=JSON.parse('{"title":"OAP 架构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1737) 第19讲：OAP 初始化流程精讲，一眼看透 SkyWalking OAP 骨架.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1737) 第19讲：OAP 初始化流程精讲，一眼看透 SkyWalking OAP 骨架.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1737) 第19讲：OAP 初始化流程精讲，一眼看透 SkyWalking OAP 骨架.md"},i=s("p",null,"在前面的课程中，我们重点介绍了 SkyWalking Agent 的工作原理和核心实现，包括 Agent 核心启动流程、插件实现代码增强的核心原理、核心 BootService 实现类的原理、Trace 概念在 SkyWalking 中的落地实现、收发 Trace 数据的核心实现。最后深入介绍了 Tomcat、Dubbo 等常用开源软件的插件实现，以及 toolkit-activation 工具箱的核心原理。",-1),E=s("h4",{id:"oap-架构",tabindex:"-1"},[o("OAP 架构 "),s("a",{class:"header-anchor",href:"#oap-架构","aria-label":'Permalink to "OAP 架构"'},"​")],-1),y=s("p",null,"从本课时开始，我们将开始介绍 SkyWalking OAP 服务。OAP 与 Agent 类似，也采用了微内核架构（Microkernel Architecture），如下图所示。",-1),d=s("p",null,"OAP 使用 ModuleManager（组件管理器）管理多个 Module（组件），一个 Module 可以对应多个 ModuleProvider（组件服务提供者），ModuleProvider 是 Module 底层真正的实现。",-1),u=s("p",null,"在 OAP 服务启动时，一个 Module 只能选择使用一个 ModuleProvider 对外提供服务。一个 ModuleProvider 可能支撑了一个非常复杂的大功能，在一个 ModuleProvider 中，可以包含多个 Service ，一个 Service 实现了一个 ModuleProvider 中的一部分功能，通过将多个 Service 进行组装集成，可以得到 ModuleProvider 的完整功能。",-1),v=s("p",null,"ApplicationConfiguration（应用配置对象） 负责管理整个 OAP 的配置信息，ApplicationConfiguration 中包含多个 ModuleConfiguration(组件配置对象) 。",-1),g=s("p",null,"ModuleConfiguration 负责管理一个 Module 的配置信息，ModuleConfiguration 与 Module 是一一对应关系。ModuleConfiguration 中包含多个 ProviderConfiguration（服务提供者配置对象）。ProviderConfiguration 负责管理一个 ModuleProvider 的配置信息，两者也是一一对应的关系。上面两组对象之间的映射关系，如下图所示：",-1),M=l(`<p>在之前搭建 SkyWalking 源码环境的课时中我们看到，OAPServerStartUp 类的 main() 方法是整个 OAP 服务的入口方法，其核心逻辑如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">public static </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(String[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// mode这个环境变量有两个可选值：init、no-init，其中init值表示初始化底层</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 的存储结构，例如，使用ES时会初始化其中的索引，使用数据库时会初始化表结构；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// no-init值表示不初始化上述存储结构</span></span>
<span class="line"><span style="color:#E1E4E8;">    String mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mode&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    RunningMode.</span><span style="color:#B392F0;">setMode</span><span style="color:#E1E4E8;">(mode); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建ApplicationConfigLoader，加载配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    ApplicationConfigLoader configLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApplicationConfigLoader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ApplicationConfiguration applicationConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           configLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建ModuleManager，并根据配置初始化全部Module</span></span>
<span class="line"><span style="color:#E1E4E8;">    ModuleManager manager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    manager.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(applicationConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查找指定Module中的指定Service进行使用，后面会展开核心Module进行分析</span></span>
<span class="line"><span style="color:#E1E4E8;">    manager.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(TelemetryModule.</span><span style="color:#79B8FF;">NAME</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">provider</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">getService</span><span style="color:#E1E4E8;">(MetricsCreator.class).</span><span style="color:#B392F0;">createGauge</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;uptime&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;oap server start up time&quot;</span><span style="color:#E1E4E8;">, MetricsTag.</span><span style="color:#79B8FF;">EMPTY_KEY</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          MetricsTag.</span><span style="color:#79B8FF;">EMPTY_VALUE</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> 1000d);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">public static </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(String[] args) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// mode这个环境变量有两个可选值：init、no-init，其中init值表示初始化底层</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 的存储结构，例如，使用ES时会初始化其中的索引，使用数据库时会初始化表结构；</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// no-init值表示不初始化上述存储结构</span></span>
<span class="line"><span style="color:#24292E;">    String mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mode&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    RunningMode.</span><span style="color:#6F42C1;">setMode</span><span style="color:#24292E;">(mode); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建ApplicationConfigLoader，加载配置文件</span></span>
<span class="line"><span style="color:#24292E;">    ApplicationConfigLoader configLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApplicationConfigLoader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ApplicationConfiguration applicationConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           configLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建ModuleManager，并根据配置初始化全部Module</span></span>
<span class="line"><span style="color:#24292E;">    ModuleManager manager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModuleManager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    manager.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(applicationConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查找指定Module中的指定Service进行使用，后面会展开核心Module进行分析</span></span>
<span class="line"><span style="color:#24292E;">    manager.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(TelemetryModule.</span><span style="color:#005CC5;">NAME</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">provider</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">getService</span><span style="color:#24292E;">(MetricsCreator.class).</span><span style="color:#6F42C1;">createGauge</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;uptime&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;oap server start up time&quot;</span><span style="color:#24292E;">, MetricsTag.</span><span style="color:#005CC5;">EMPTY_KEY</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          MetricsTag.</span><span style="color:#005CC5;">EMPTY_VALUE</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> 1000d);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="初始化配置" tabindex="-1">初始化配置 <a class="header-anchor" href="#初始化配置" aria-label="Permalink to &quot;初始化配置&quot;">​</a></h4><p>OAP 启动时会使用 ApplicationConfigLoader 加载 application.yml 配置文件，该文件位于 server-starter 子模块的 resources 目录下，如下图所示：</p>`,4),A=s("p",null,"application.yml 配置文件中包含了整个 OAP 服务中全部 Module 的配置信息，后面在介绍一个 Module 的时候会展示相应的配置信息。",-1),F=s("p",null,"在 load() 方法中， ApplicationConfigLoader 会创建 ApplicationConfiguration 对象以及相关的 ModuleConfiguration、ProviderConfiguration 对象。ApplicationConfiguration 维护了一个 HashMap<String, ModuleConfiguration> 集合（modules 字段），记录了 Module 名称与相应配置对象。",-1),P=s("p",null,"在 ModuleConfiguration 中只维护了一个 HashMap<String, ProviderConfiguration> 集合（providers 字段）记录了 ModuleProvider 名称与相应配置对象。在 ProviderConfiguration 中只有一个 Properties 集合（properties 字段），存储了 application.yml 中 KV 配置信息。下图所示 core Module 对应的 ModuleConfiguration 以及它下面 default ModuleProvider 对应的 ProviderConfiguration：",-1),C=l(`<p>完成 application.yml 配置文件的读取之后，会紧接着调用 overrideConfigBySystemEnv() 方法读取 System.getProperties() 集合，并覆盖从 application.yml 读取到的相应默认值。</p><h4 id="modulemanager" tabindex="-1">ModuleManager <a class="header-anchor" href="#modulemanager" aria-label="Permalink to &quot;ModuleManager&quot;">​</a></h4><p>完成配置的初始化之后，OAPServerStartUp 会创建 ModuleManager 对象。ModuleManager 中的 loadedModules 字段负责管理加载的 Module：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Key是Module的名称，Value是相应的ModuleDefine，ModuleDefine就是对</span></span>
<span class="line"><span style="color:#6A737D;">// Module的抽象</span></span>
<span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ModuleDefine</span><span style="color:#E1E4E8;">&gt; loadedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Key是Module的名称，Value是相应的ModuleDefine，ModuleDefine就是对</span></span>
<span class="line"><span style="color:#6A737D;">// Module的抽象</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ModuleDefine</span><span style="color:#24292E;">&gt; loadedModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span></code></pre></div><p>在其 init() 方法中首先会通过 SPI 的方式加载插件配置文件中定义的 Module 实现类和 ModuleProvider 实现类，并调用其 prepare() 方法执行一些准备操作，最后创建 BootstrapFlow 开始启动流程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(ApplicationConfiguration applicationConfiguration){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据配置拿到所有Module的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] moduleNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> applicationConfiguration.</span><span style="color:#B392F0;">moduleList</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过SPI方式加载ModuleDefine接口和 ModuleProvider接口的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceLoader&lt;</span><span style="color:#F97583;">ModuleDefine</span><span style="color:#E1E4E8;">&gt; moduleServiceLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">         ServiceLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(ModuleDefine.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceLoader&lt;</span><span style="color:#F97583;">ModuleProvider</span><span style="color:#E1E4E8;">&gt; moduleProviderLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">         ServiceLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(ModuleProvider.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    LinkedList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; moduleList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(moduleNames));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ModuleDefine module </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> moduleServiceLoader) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String moduleName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> moduleNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (moduleName.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(module.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 通过SPI可能加载很多ModuleDefine实现以及ModuleProvider实      </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 现类，但是这里只初始化在配置文件中出现过的Module,并调用</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 其prepare()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">                ModuleDefine newInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">                   module.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                newInstance.</span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, applicationConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">getModuleConfiguration</span><span style="color:#E1E4E8;">(moduleName), </span></span>
<span class="line"><span style="color:#E1E4E8;">                          moduleProviderLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 记录初始化的ModuleDefine对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                loadedModules.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(moduleName, newInstance);</span></span>
<span class="line"><span style="color:#E1E4E8;">                moduleList.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(moduleName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    isInPrepareStage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化BootstrapFlow，具体的初始化逻辑后面展开分析</span></span>
<span class="line"><span style="color:#E1E4E8;">    BootstrapFlow bootstrapFlow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BootstrapFlow</span><span style="color:#E1E4E8;">(loadedModules);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 启动Module</span></span>
<span class="line"><span style="color:#E1E4E8;">    bootstrapFlow.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 启动流程结束之后会通知相关组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    bootstrapFlow.</span><span style="color:#B392F0;">notifyAfterCompleted</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(ApplicationConfiguration applicationConfiguration){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据配置拿到所有Module的名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] moduleNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> applicationConfiguration.</span><span style="color:#6F42C1;">moduleList</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过SPI方式加载ModuleDefine接口和 ModuleProvider接口的实现</span></span>
<span class="line"><span style="color:#24292E;">    ServiceLoader&lt;</span><span style="color:#D73A49;">ModuleDefine</span><span style="color:#24292E;">&gt; moduleServiceLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">         ServiceLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(ModuleDefine.class);</span></span>
<span class="line"><span style="color:#24292E;">    ServiceLoader&lt;</span><span style="color:#D73A49;">ModuleProvider</span><span style="color:#24292E;">&gt; moduleProviderLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">         ServiceLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(ModuleProvider.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; moduleList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(moduleNames));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ModuleDefine module </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> moduleServiceLoader) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String moduleName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> moduleNames) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (moduleName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(module.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 通过SPI可能加载很多ModuleDefine实现以及ModuleProvider实      </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 现类，但是这里只初始化在配置文件中出现过的Module,并调用</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 其prepare()方法</span></span>
<span class="line"><span style="color:#24292E;">                ModuleDefine newInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">                   module.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                newInstance.</span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, applicationConfiguration</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">getModuleConfiguration</span><span style="color:#24292E;">(moduleName), </span></span>
<span class="line"><span style="color:#24292E;">                          moduleProviderLoader);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 记录初始化的ModuleDefine对象</span></span>
<span class="line"><span style="color:#24292E;">                loadedModules.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(moduleName, newInstance);</span></span>
<span class="line"><span style="color:#24292E;">                moduleList.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(moduleName);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    isInPrepareStage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化BootstrapFlow，具体的初始化逻辑后面展开分析</span></span>
<span class="line"><span style="color:#24292E;">    BootstrapFlow bootstrapFlow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BootstrapFlow</span><span style="color:#24292E;">(loadedModules);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 启动Module</span></span>
<span class="line"><span style="color:#24292E;">    bootstrapFlow.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 启动流程结束之后会通知相关组件</span></span>
<span class="line"><span style="color:#24292E;">    bootstrapFlow.</span><span style="color:#6F42C1;">notifyAfterCompleted</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="moduledefine" tabindex="-1">ModuleDefine <a class="header-anchor" href="#moduledefine" aria-label="Permalink to &quot;ModuleDefine&quot;">​</a></h4><p>前文提到 Module 与 ModuleProvider 的一对多关系，所以 ModuleDefine 抽象类继承了 ModuleProviderHolder 接口，该接口中只定义了一个 provider() 方法，用于获取该 Module 当前使用的 ModuleProvider 对象。</p><p>通过对 ModuleManager 的分析我们知道，ModuleDefine 的实现类是通过 SPI 方式被加载到内存的，这些实现类分散在不同的插件模块中，下图展示了 OAP 服务中几个核心插件模块的 ModuleDefine 实现类：</p>`,9),m=l(`<p>上图 ModuleDefine 实现类后面的课程会逐个分析，先来看 ModuleDefine 抽象类本身，其中有两个字段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当前Module的名称</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String name; </span></span>
<span class="line"><span style="color:#6A737D;">// 属于该Module的所有ModuleProvider对象</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> LinkedList&lt;</span><span style="color:#F97583;">ModuleProvider</span><span style="color:#E1E4E8;">&gt; loadedProviders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当前Module的名称</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String name; </span></span>
<span class="line"><span style="color:#6A737D;">// 属于该Module的所有ModuleProvider对象</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">ModuleProvider</span><span style="color:#24292E;">&gt; loadedProviders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span></code></pre></div><p>每个 Module 都有一个全局唯一的名称，通过前面对配置初始化的介绍我们了解到，ModuleManager 会通过 Module 名称在 application.yml 配置文件中查找相应的配置信息。下图展示了核心 Module 对应的名称：</p>`,3),D=l(`<p>在 ModuleDefine.prepare() 方法中，会查找与当前 Module 配置的 ModuleProvider 实现，然后记录到 loadedProviders 集合中。随后会继续调用这些 ModuleProvider 对象的 prepare() 方法，继续准备操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(ModuleManager moduleManager,  </span></span>
<span class="line"><span style="color:#E1E4E8;">      ApplicationConfiguration.ModuleConfiguration configuration,</span></span>
<span class="line"><span style="color:#E1E4E8;">          ServiceLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ModuleProvider</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> moduleProviderLoader)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ModuleProvider provider </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> moduleProviderLoader) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里只关心配置文件中指定的、与当前Module相关的ModuleProvider实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">configuration.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(provider.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (provider.</span><span style="color:#B392F0;">module</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 初始化ModuleProvider对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            ModuleProvider newProvider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                  provider.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            newProvider.</span><span style="color:#B392F0;">setManager</span><span style="color:#E1E4E8;">(moduleManager);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 设置ModuleProvider与 Module之间的关联关系</span></span>
<span class="line"><span style="color:#E1E4E8;">            newProvider.</span><span style="color:#B392F0;">setModuleDefine</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将ModuleProvider对象记录到loadedProviders集合</span></span>
<span class="line"><span style="color:#E1E4E8;">            loadedProviders.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(newProvider);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查:该Module没有任何关联的ModuleProvider，会在这里报错(省略该检查代码)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ModuleProvider moduleProvider </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> loadedProviders) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 前面读取配置信息时，ModuleProvider的配置信息是存储到ProviderConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 之中的Properties集合之中，此处，每个ModuleProvider都会关联一个        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ModuleConfig对象，并ProviderConfig中的配置信息拷贝到ModuleConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 对象中的相应字段，实现Properties到Java Bean的转换</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">copyProperties</span><span style="color:#E1E4E8;">(moduleProvider.</span><span style="color:#B392F0;">createConfigBeanIfAbsent</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">             configuration.</span><span style="color:#B392F0;">getProviderConfiguration</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                 moduleProvider.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">()), </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(),         </span></span>
<span class="line"><span style="color:#E1E4E8;">                       moduleProvider.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用ModuleProvider的prepare()方法，继续prepare流程</span></span>
<span class="line"><span style="color:#E1E4E8;">        moduleProvider.</span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(ModuleManager moduleManager,  </span></span>
<span class="line"><span style="color:#24292E;">      ApplicationConfiguration.ModuleConfiguration configuration,</span></span>
<span class="line"><span style="color:#24292E;">          ServiceLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ModuleProvider</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> moduleProviderLoader)  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ModuleProvider provider </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> moduleProviderLoader) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里只关心配置文件中指定的、与当前Module相关的ModuleProvider实现类</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">configuration.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(provider.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (provider.</span><span style="color:#6F42C1;">module</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 初始化ModuleProvider对象</span></span>
<span class="line"><span style="color:#24292E;">            ModuleProvider newProvider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                  provider.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            newProvider.</span><span style="color:#6F42C1;">setManager</span><span style="color:#24292E;">(moduleManager);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 设置ModuleProvider与 Module之间的关联关系</span></span>
<span class="line"><span style="color:#24292E;">            newProvider.</span><span style="color:#6F42C1;">setModuleDefine</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将ModuleProvider对象记录到loadedProviders集合</span></span>
<span class="line"><span style="color:#24292E;">            loadedProviders.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(newProvider);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查:该Module没有任何关联的ModuleProvider，会在这里报错(省略该检查代码)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ModuleProvider moduleProvider </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> loadedProviders) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 前面读取配置信息时，ModuleProvider的配置信息是存储到ProviderConfig</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 之中的Properties集合之中，此处，每个ModuleProvider都会关联一个        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ModuleConfig对象，并ProviderConfig中的配置信息拷贝到ModuleConfig</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对象中的相应字段，实现Properties到Java Bean的转换</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">copyProperties</span><span style="color:#24292E;">(moduleProvider.</span><span style="color:#6F42C1;">createConfigBeanIfAbsent</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">             configuration.</span><span style="color:#6F42C1;">getProviderConfiguration</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                 moduleProvider.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">()), </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(),         </span></span>
<span class="line"><span style="color:#24292E;">                       moduleProvider.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用ModuleProvider的prepare()方法，继续prepare流程</span></span>
<span class="line"><span style="color:#24292E;">        moduleProvider.</span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ModuleDefine.provider() 方法（继承自 ModuleProviderHolder 接口）不仅会返回底层的 ModuleProvider 实例，还会保证 loadedProviders 集合有且只有一个 ModuleProvider 实现存在，如下所示，这也是前文提到的每个 Module 只会选用一个 ModuleProvider 实现的原因：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ModuleProvider </span><span style="color:#B392F0;">provider</span><span style="color:#E1E4E8;">() throws {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loadedProviders.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> loadedProviders.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xxxException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 抛异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loadedProviders.</span><span style="color:#B392F0;">getFirst</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 返回唯一的ModuleProvider实例</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ModuleProvider </span><span style="color:#6F42C1;">provider</span><span style="color:#24292E;">() throws {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loadedProviders.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> loadedProviders.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xxxException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 抛异常</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loadedProviders.</span><span style="color:#6F42C1;">getFirst</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 返回唯一的ModuleProvider实例</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="moduleprovider" tabindex="-1">ModuleProvider <a class="header-anchor" href="#moduleprovider" aria-label="Permalink to &quot;ModuleProvider&quot;">​</a></h4><p>完成 Module 的初始化之后再来看 ModuleProvider。 ModuleProvider 下可以关联多个 Service（一对多的关系，每个 Service 实现了一个简单功能，多个 Service 组装起来就是 ModuleProvider 的全部功能），所以实现了 ModuleServiceHolder 接口。在 ModuleServiceHolder 接口中定义了两个方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleServiceHolder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注册Service实例，当Service类型与service对象不匹配时，会报错</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerServiceImplementation</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Service</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serviceType</span><span style="color:#E1E4E8;">, Service </span><span style="color:#FFAB70;">service</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取指定类型的Service对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Service</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">getService</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serviceType</span><span style="color:#E1E4E8;">) ;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModuleServiceHolder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注册Service实例，当Service类型与service对象不匹配时，会报错</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerServiceImplementation</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Service</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serviceType</span><span style="color:#24292E;">, Service </span><span style="color:#E36209;">service</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取指定类型的Service对象</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Service</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">getService</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serviceType</span><span style="color:#24292E;">) ;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ModuleProvider 中维护了一个 HashMap 集合（services 字段），其中记录了 Service 类型与相应 Service 对象之间的映射关系。ModuleProvider 对 ModuleServiceHolder 接口的实现就是读写该集合。</p><p>与 ModuleDefine 实现类相同，ModuleProvider 的实现类也是通过 SPI 方式被加载的，下图展示了 OAP 服务中几个核心插件模块的 ModuleProvider 实现类：</p>`,9),f=s("p",null,"除了 ModuleServiceHolder 接口中的这两个关键方法之外，ModuleProvider 中还定义了一些通用的抽象方法：",-1),h=s("ul",null,[s("li",null,[s("strong",null,"name() 方法"),o('：返回当前 ModuleProvider 的名称，该名称在同一个 Module 下是唯一的。例如，StorageModule 负责实现 OAP 的持久化存储功能，Module 名称为 "storage"，具体依赖的底层存储可以是 ElasticSearch、H2 等，分别对应StorageModuleElasticsearchProvider、H2StorageProvider 两个 ModuleProvider 实现类，ModuleProvider 名称分别是 "elasticsearch" 和 "h2"。')]),s("li",null,[s("strong",null,"createConfigBeanIfAbsent() 方法"),o(": 返回当前 ModuleProvider 对应的 ModuleConfig 对象。ModuleConfig 是一个空的抽象类，其实现类都是用于存储配置信息的 Java Bean。下图展示了 OAP 服务中几个核心插件模块对应的 ModuleConfig 实现类：")])],-1),_=s("p",null,"结合 ModuleDefine、ModuleProvider 以及 ModuleConfig，整个存储模块的结构如下：",-1),S=l('<ul><li><p><strong>prepare() 方法</strong>：与 ModuleDefine 中的 prepare() 方法的功能相同，也是完成一些准备性的操作，不同的 ModuleProvider 实现类会执行不同的准备操作。例如，StorageModuleElasticsearchProvider 会准备 High Level Rest Client 来访问 ElasticSearch，而 H2StorageProvider 则会准备 JDBC Client 来访问 H2 数据库。</p></li><li><p><strong>requiredModules() 方法</strong>：返回当前 ModuleProvider 依赖的 Module 名称。整个 OAP 服务会有多个 Module，Module 之间相对独立，但是也有一定的依赖关系，例如，trace-receiver-plugin 插件模块（用于接收 Trace 数据）就依赖了 CoreModule、ConfigurationModule 等基础 Module。</p></li><li><p><strong>requiredCheck() 方法</strong>：在 ModuleDefine.service() 这个方法中会定义该 Module 提供的一系列 Service，例如，在 StorageModule 中就会提供 StorageDAO、IRegisterLockDAO 等等一系列 DAO。requiredCheck() 方法会在 ModuleProvider 启动之前，检查当前 services 集合中是否已经装载了这些 Service 的实现，从而保证 ModuleProvider 能够完整地提供 Module 的功能。</p></li><li><p><strong>start() 方法</strong>：启动当前 ModuleProvider，其中会完成一些初始化操作和启动操作。不同的 ModuleProvider 实现类会执行不同的初始化操作。例如，StorageModuleElasticsearchProvider 会在 ElasticSearch 中初始化相关的索引，而 H2StorageProvider 则会在 H2 数据库中初始化后续使用的表结构。</p></li><li><p><strong>notifyAfterCompleted() 方法</strong>：当全部 Module 完成检查、初始化并启动之后，OAP 会回调该方法，通知所有监听者，当前 ModuleProvider 开始对外提供服务。</p></li></ul><p>一个 ModuleProvider 对外提供相对完整的功能，ModuleProvider 中的一个子功能可以有一个 Service 实现。Service 接口是个空接口，没有定义任何方法，有点类似于 java.io.Serializable 接口，只是一个简单的标记接口。</p><h4 id="bootstrapflow" tabindex="-1">BootstrapFlow <a class="header-anchor" href="#bootstrapflow" aria-label="Permalink to &quot;BootstrapFlow&quot;">​</a></h4><p>通过前面 ModuleManager 的分析，我们得到了下面的调用链：</p>',4),B=l(`<p>那 ModuleProvider 的相关检查方法以及 start() 方法是在哪里调用的呢？在 ModuleManager.init() 方法中可以得到答案 ------ BootstrapFlow。在 BootstrapFlow 构造方法中会根据 ModuleProvider 与 Module 之间的依赖关系，确定所有 ModuleProvider 的启动顺序，并记录到一个 LinkedList 集合中（startupSequence 字段）。</p><p>在 BootstrapFlow.start() 方法中会遍历 startupSequence 集合，逐个启动 ModuleProvider 实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(ModuleManager moduleManager) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 按照startupSequence集合的顺序启动所有ModuleProvider实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ModuleProvider provider </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> startupSequence) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检测当前ModuleProvider依赖的Module对象是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] requiredModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> provider.</span><span style="color:#B392F0;">requiredModules</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (requiredModules </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String module </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> requiredModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">moduleManager.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(module)) { ... ... </span><span style="color:#6A737D;">// 抛异常 }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查当前ModuleProvider对象是否能提供其所属Module需要的Service</span></span>
<span class="line"><span style="color:#E1E4E8;">        provider.</span><span style="color:#B392F0;">requiredCheck</span><span style="color:#E1E4E8;">(provider.</span><span style="color:#B392F0;">getModule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">services</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        provider.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 上述两项检查都通过之后，才能启动ModuleProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(ModuleManager moduleManager) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 按照startupSequence集合的顺序启动所有ModuleProvider实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ModuleProvider provider </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> startupSequence) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检测当前ModuleProvider依赖的Module对象是否存在</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] requiredModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> provider.</span><span style="color:#6F42C1;">requiredModules</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (requiredModules </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String module </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> requiredModules) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">moduleManager.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(module)) { ... ... </span><span style="color:#6A737D;">// 抛异常 }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查当前ModuleProvider对象是否能提供其所属Module需要的Service</span></span>
<span class="line"><span style="color:#24292E;">        provider.</span><span style="color:#6F42C1;">requiredCheck</span><span style="color:#24292E;">(provider.</span><span style="color:#6F42C1;">getModule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">services</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        provider.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 上述两项检查都通过之后，才能启动ModuleProvider</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>start() 方法完成启动之后，会紧接着调用 notifyAfterCompleted() 方法，通知全部 ModuleProvider 实例：全部 Module 已正常启动了，可以对外提供服务了。</p><p>最后，简单看一下 startupSequence 集合的生成原理。下图示例中，ModuleProvider a 依赖 Module B、Module C，ModuleProvider b 依赖 Module C、ModuleProvider c 依赖 Module D。</p>`,5),k=s("p",null,"在 BootstrapFlow.makeSequence() 方法中，根据 ModuleProvider 对 Module 依赖关系确定 ModuleProvider 的启动顺序，保证每个 ModuleProvider 启动时，其依赖 Module 的 ModuleProvider 已经启动。上图示例的最终启动顺序如下：",-1),b=s("p",null,"makeSequence() 方法的具体实现是靠四层 for 循环实现的，没有什么高深的算法，这里不展开了。",-1),T=s("h4",{id:"总结",tabindex:"-1"},[o("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),L=s("p",null,"本课时首先介绍了 Skywalking OAP 服务的整体框架，OAP 与 Agent 类似，也是微内核+插件的架构，主要围绕 Module、 ModuleProvider、Service 等核心概念展开。然后介绍了 SkyWalking OAP 服务的启动流程，其中涉及 ModuleDefine、ModuleProvider 等核心组件的准备流程和初始化流程。",-1);function q(w,I,O,N,V,x){const n=e("Image");return r(),t("div",null,[i,E,y,a(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/08/09/CgqCHl66RCiAJ3mTAAHxQQrh8Cg825.png"}),d,u,v,g,a(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/08/0A/Ciqc1F66RO-ANDsBAADxvp0EW2Q875.png"}),M,a(n,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RQuAKLYRAAB7aXtA8Vc434.png"}),A,F,P,a(n,{alt:"ModuleDefine继承图.png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/CgqCHl66RRSAMwsQAACTJig2rOc013.png"}),C,a(n,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/CgqCHl66RSyAasXnAAxKC1wvreU269.png"}),m,a(n,{alt:"image (4).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RTOAc7l_AAGhZ9L9Cqc865.png"}),D,a(n,{alt:"CoreModuleProvider.png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RUuAOOobAADhJDK8Z_Q834.png"}),f,h,a(n,{alt:"ModuleConfig.png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/CgqCHl66RVSAUPzJAACewmU9Ffw912.png"}),_,a(n,{alt:"image (5).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RV-AHPCmAAuhu0QRPZ4250.png"}),S,a(n,{alt:"image (6).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RW2AVITpAABWeBaF_vg920.png"}),B,a(n,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RXeADVj3AAD7tFRaUQw017.png"}),k,a(n,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RX6Af8e5AABjm7z7wTQ773.png"}),b,T,L])}const j=p(c,[["render",q]]);export{R as __pageData,j as default};
