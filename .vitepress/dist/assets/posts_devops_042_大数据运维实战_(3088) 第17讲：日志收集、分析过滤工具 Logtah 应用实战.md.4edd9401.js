import{_ as s,o as a,g as n,Q as p}from"./chunks/framework.f949202b.js";const F=JSON.parse('{"title":"Logstash 介绍与安装 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/042_大数据运维实战/(3088) 第17讲：日志收集、分析过滤工具 Logtah 应用实战.md","filePath":"posts/devops/042_大数据运维实战/(3088) 第17讲：日志收集、分析过滤工具 Logtah 应用实战.md","lastUpdated":null}'),l={name:"posts/devops/042_大数据运维实战/(3088) 第17讲：日志收集、分析过滤工具 Logtah 应用实战.md"},o=p(`<p>本课时主要讲解&quot;日志收集、分析过滤工具 Logstash 应用实战&quot;。</p><h3 id="logstash-介绍与安装" tabindex="-1">Logstash 介绍与安装 <a class="header-anchor" href="#logstash-介绍与安装" aria-label="Permalink to &quot;Logstash 介绍与安装&quot;">​</a></h3><p>Logstash 是一款轻量级的、开源的日志收集处理框架，它可以方便地把分散的、多样化的日志搜集起来，并进行自定义过滤分析处理，然后传输到指定的位置，比如某个服务器或者文件。</p><p>Logstash 的理念很简单，从功能上来讲，它只做 3 件事情：</p><ul><li><p>input，数据收集；</p></li><li><p>filter，数据加工，比如过滤、修改等；</p></li><li><p>output，数据输出。</p></li></ul><p>由此可知，Logstash 实现的功能主要分为<strong>接收数据</strong> 、<strong>解析过滤并转换数据</strong> 、<strong>输出数据</strong>三个部分，这三个部分对应的插件依次是 input 插件、filter 插件、output 插件。其中，filter 插件是可选的，其他两个是必须插件，也就是说在一个完整的 Logstash 配置文件中，必须有 input 插件和 output 插件。</p><p>Logstash 安装非常简单，只需要下载解压即可，不过需要安装 Java 运行环境，即 JDK，你可以<a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noreferrer">点击 Elastic 官网获取 Logstash 安装包</a>，这里下载的版本是 logstash-7.7.1.tar.gz。将下载下来的安装包直接解压到一个路径下即可完成安装，这里我将 logstash 安装到 nnmaster.cloud 主机（172.16.213.151）上，将 logstash 程序安装到 /usr/local 目录下。基本操作过程如下：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@logstashserver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# tar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zxvf logstash</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7.7</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">tar.gz </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span></span>
<span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@logstashserver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# mv </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7.7</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@logstashserver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# tar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zxvf logstash</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7.7</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">tar.gz </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span></span>
<span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@logstashserver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# mv </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7.7</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里我们将 logstash 安装到了 /usr/local 目录下。</p><h3 id="如何编写-logstash-配置文件" tabindex="-1">如何编写 Logstash 配置文件 <a class="header-anchor" href="#如何编写-logstash-配置文件" aria-label="Permalink to &quot;如何编写 Logstash 配置文件&quot;">​</a></h3><p>Logstash 的配置文件在安装程序下的 config 子目录下，其中，jvm.options 是设置 JVM 内存资源的配置文件；logstash.yml 是 Logstash 全局属性配置文件，一般无须修改，另外还需要自己创建一个 Logstash 事件配置文件。这里重点介绍下 Logstash 事件配置文件的编写方法和使用方式。</p><p>在介绍 Logstash 配置之前，先来认识一下 Logstash 是如何实现输入和输出的。Logstash 提供了一个 shell 脚本 /usr/local/logstash/bin/logstash，可以方便快速地启动一个 Logstash 进程。在 Linux 命令行下，运行如下命令启动 Logstash 进程：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@logstashserver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@logstashserver</span><span style="color:#E1E4E8;"> logstash]# bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e </span><span style="color:#9ECBFF;">&#39;input{stdin{}} output{stdout{codec=&gt;rubydebug}}&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@logstashserver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@logstashserver</span><span style="color:#24292E;"> logstash]# bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e </span><span style="color:#032F62;">&#39;input{stdin{}} output{stdout{codec=&gt;rubydebug}}&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>首先解释下这条命令的含义：</p><ul><li><p>-e 代表执行的意思；</p></li><li><p>input 即输入的意思，其里面是输入的方式，这里选择了 stdin，也就是标准输入（从终端输入）；</p></li><li><p>output 即输出的意思，其里面是输出的方式，这里选择了 stdout，也就是标准输出（输出到终端），其中 codec 是个插件，表明格式，这里放在 stdout 中，表示输出的格式；rubydebug 是专门用来做测试的格式，一般用来在终端输出 JSON 格式。</p></li></ul><p>接着，在终端输入信息。这里我们输入 &quot;Hello World&quot;，按回车，马上就会有返回结果，内容如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@timestamp&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">15T10</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">08</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">55.</span><span style="color:#FDAEB7;font-style:italic;">611Z</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;nnmaster.cloud&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;@version&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;@timestamp&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">15T10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">08</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">55.</span><span style="color:#B31D28;font-style:italic;">611Z</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;nnmaster.cloud&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;@version&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这就是 Logstash 的输出格式，在输出内容中会给事件添加一些额外信息。比如 &quot;@version&quot;&quot;host&quot;&quot;@timestamp&quot; 都是新增的字段，而最重要的是 @timestamp，用来标记事件的发生时间。由于这个字段涉及 Logstash 内部流转，如果给一个字符串字段重命名为 @timestamp 的话，Logstash 就会直接报错。另外，也不能删除这个字段。</p><p>在 Logstash 的输出中，常见的字段还有 type，表示事件的唯一类型；tags 表示事件的某方面属性，我们可以随意给事件添加字段或者从事件里删除字段。在执行上面的命令后，可以看到，你输入什么内容，Logstash 就会按照上面的格式输出什么内容。使用 CTRL-C 命令可以退出运行的 Logstash 事件。</p><p>使用 -e 参数在命令行中指定配置是不常用的方式，但是如果 Logstash 需要配置更多规则的话，就必须把配置固化到文件里，这就是 Logstash 事件配置文件。如果把上面命令行执行的 Logstash 命令，写到一个配置文件 logstash-simple.conf 中，就变成如下的内容：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input { </span></span>
<span class="line"><span style="color:#E1E4E8;">stdin { }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">stdout { </span><span style="color:#FFAB70;">codec</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> rubydebug }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input { </span></span>
<span class="line"><span style="color:#24292E;">stdin { }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">stdout { </span><span style="color:#E36209;">codec</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> rubydebug }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这就是最简单的 Logstash 事件配置文件。此时，还可以使用 Logstash 的 -f 参数来读取配置文件，然后启动 Logstash 进程，操作如下：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@logstashserver</span><span style="color:#E1E4E8;"> logstash]# bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f logstash</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">simple.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@logstashserver</span><span style="color:#24292E;"> logstash]# bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f logstash</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">simple.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这种方式也可以启动 Logstash 进程，不过这种方式启动的进程是在前台运行的，若要放到后台运行，可通过 nohup 命令实现，操作如下：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@logstashserver</span><span style="color:#E1E4E8;"> logstash]# nohup bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f logstash</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">simple.conf </span><span style="color:#F97583;">&amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@logstashserver</span><span style="color:#24292E;"> logstash]# nohup bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f logstash</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">simple.conf </span><span style="color:#D73A49;">&amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，Logstash 进程就放到后台运行了，在当前目录会生成一个 nohup.out 文件，可通过此文件查看 Logstash 进程的启动状态。</p><h3 id="logstash-输入插件-input" tabindex="-1">Logstash 输入插件（Input） <a class="header-anchor" href="#logstash-输入插件-input" aria-label="Permalink to &quot;Logstash 输入插件（Input）&quot;">​</a></h3><p>Logstash 的输入插件主要用来接收数据，它支持多种数据源，常见的有<strong>读取文件</strong> 、<strong>标准输入</strong> 、<strong>读取网络数据</strong>等，这里分别介绍下每种接收数据源的配置方法。</p><h4 id="_1-logstash-基本语法组成" tabindex="-1">1. Logstash 基本语法组成 <a class="header-anchor" href="#_1-logstash-基本语法组成" aria-label="Permalink to &quot;1. Logstash 基本语法组成&quot;">​</a></h4><p>Logstash 配置文件由如下 3 部分组成，其中 input、output 部分是必须配置，filter 部分是可选配置，而 filter 就是过滤器插件，可以在这部分实现各种日志过滤功能。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input {</span></span>
<span class="line"><span style="color:#E1E4E8;">输入插件</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">过滤匹配插件</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">输出插件</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input {</span></span>
<span class="line"><span style="color:#24292E;">输入插件</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">过滤匹配插件</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">输出插件</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>下面我将依次进行介绍。</p><h4 id="_2-logstash-从文件读取数据" tabindex="-1">2. Logstash 从文件读取数据 <a class="header-anchor" href="#_2-logstash-从文件读取数据" aria-label="Permalink to &quot;2. Logstash 从文件读取数据&quot;">​</a></h4><p>Logstash 使用一个名为 filewatch 的 ruby gem 库来监听文件变化，并通过一个叫 .sincedb 的数据库文件来记录被监听的日志文件的读取进度（时间戳），该数据文件的默认路径在 &lt;path.data&gt;/plugins/inputs/file 下面，文件名类似于.sincedb_452905a167cf4509fd08acb964fdb20c，而 &lt;path.data&gt; 表示 Logstash 插件存储目录，默认是 LOGSTASH_HOME/data。</p><p>看下面一个事件配置文件：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file {</span></span>
<span class="line"><span style="color:#E1E4E8;">        path </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;/var/log/secure&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        type </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;system&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        start_position </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;beginning&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout{</span></span>
<span class="line"><span style="color:#E1E4E8;">        codec</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">rubydebug    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input {</span></span>
<span class="line"><span style="color:#24292E;">    file {</span></span>
<span class="line"><span style="color:#24292E;">        path </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;/var/log/secure&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        type </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;system&quot;</span></span>
<span class="line"><span style="color:#24292E;">        start_position </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;beginning&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    stdout{</span></span>
<span class="line"><span style="color:#24292E;">        codec</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">rubydebug    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这个配置是监听并接收本机的 /var/log/secure 文件内容，start_position 表示按时间戳记录的地方开始读取，如果没有时间戳则从头开始读取，有点类似 cat 命令。默认情况下，Logstash 会从文件的结束位置开始读取数据，也就是说 Logstash 进程会以类似 tail -f 命令的形式逐行获取数据。type 用来标记事件类型，通常会在输入区域通过 type 标记事件类型。</p><p>假定 /var/log/secure中输入的内容为如下信息：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Jun </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">57</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">52</span><span style="color:#E1E4E8;"> nnmaster sshd[</span><span style="color:#79B8FF;">2854</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Failed password </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> root from </span><span style="color:#79B8FF;">172.16</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">213</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">226</span><span style="color:#E1E4E8;"> port </span><span style="color:#79B8FF;">46460</span><span style="color:#E1E4E8;"> ssh2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Jun </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">57</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">52</span><span style="color:#24292E;"> nnmaster sshd[</span><span style="color:#005CC5;">2854</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Failed password </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> root from </span><span style="color:#005CC5;">172.16</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">213</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">226</span><span style="color:#24292E;"> port </span><span style="color:#005CC5;">46460</span><span style="color:#24292E;"> ssh2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么经过 Logstash 后，会输出内容为如下 JSON 格式：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Jun 16 14:57:52 nnmaster sshd[2854]: Failed password for root from 172.16.213.226 port 46460 ssh2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;nnmaster.cloud&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@timestamp&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">16T06</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">57</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">52.</span><span style="color:#FDAEB7;font-style:italic;">675Z</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;@version&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/var/log/secure&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;system&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Jun 16 14:57:52 nnmaster sshd[2854]: Failed password for root from 172.16.213.226 port 46460 ssh2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;nnmaster.cloud&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;@timestamp&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">16T06</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">57</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">52.</span><span style="color:#B31D28;font-style:italic;">675Z</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;@version&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/var/log/secure&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;system&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>从输出可以看出，message 字段是真正的输出内容，将输入的信息原样输出了，最后还有一个 type 字段，这是在 input 中定义的一个事件类型，也被原样输出了，在后面将要介绍的过滤插件中会用到这个 type 字段。</p><h4 id="_3-logstash-从标准输入读取数据" tabindex="-1">3. Logstash 从标准输入读取数据 <a class="header-anchor" href="#_3-logstash-从标准输入读取数据" aria-label="Permalink to &quot;3. Logstash 从标准输入读取数据&quot;">​</a></h4><p>stdin 是从标准输入获取信息，下面是一个关于 stdin 的事件配置文件：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input{</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdin{</span></span>
<span class="line"><span style="color:#E1E4E8;">        add_field</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;">&quot;ok&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        tags</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;add field&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        type</span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;">&quot;mytype&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout{</span></span>
<span class="line"><span style="color:#E1E4E8;">        codec</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">rubydebug    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input{</span></span>
<span class="line"><span style="color:#24292E;">    stdin{</span></span>
<span class="line"><span style="color:#24292E;">        add_field</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;">&quot;ok&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        tags</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;add field&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        type</span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;">&quot;mytype&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    stdout{</span></span>
<span class="line"><span style="color:#24292E;">        codec</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">rubydebug    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>如果输入 &quot;hello world&quot;，那么可以在终端看到如下输出信息：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;nnmaster.cloud&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mytype&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;tags&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">       [</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#9ECBFF;">&quot;add field&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ok&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;@timestamp&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">15T10</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">56.</span><span style="color:#FDAEB7;font-style:italic;">419Z</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;@version&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;nnmaster.cloud&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mytype&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;tags&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">       [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#032F62;">&quot;add field&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ok&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;@timestamp&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">15T10</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">56.</span><span style="color:#B31D28;font-style:italic;">419Z</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;@version&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>type 和 tags 是 Logstash 的两个特殊字段，type 一般会放在 input 中标记事件类型，tags 主要用于在事件中增加标签，以便在后续的处理流程中使用，主要用于 filter 或 output 阶段。</p><h4 id="_4-logstash-从网络读取-tcp-数据" tabindex="-1">4. Logstash 从网络读取 TCP 数据 <a class="header-anchor" href="#_4-logstash-从网络读取-tcp-数据" aria-label="Permalink to &quot;4. Logstash 从网络读取 TCP 数据&quot;">​</a></h4><p>下面的事件配置文件就是通过&quot;LogStash::Inputs::TCP&quot;和&quot;LogStash::Filters::Grok&quot;配合实现 syslog 功能的例子，这里使用了 logstash 的 TCP/UDP 插件读取网络数据：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input {</span></span>
<span class="line"><span style="color:#E1E4E8;">  tcp {</span></span>
<span class="line"><span style="color:#E1E4E8;">    port </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;5044&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">  grok {</span></span>
<span class="line"><span style="color:#E1E4E8;">    match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;%{SYSLOGLINE}&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout{</span></span>
<span class="line"><span style="color:#E1E4E8;">        codec</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">rubydebug</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input {</span></span>
<span class="line"><span style="color:#24292E;">  tcp {</span></span>
<span class="line"><span style="color:#24292E;">    port </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5044&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">  grok {</span></span>
<span class="line"><span style="color:#24292E;">    match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;%{SYSLOGLINE}&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    stdout{</span></span>
<span class="line"><span style="color:#24292E;">        codec</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">rubydebug</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>其中，5044 端口是 Logstash 启动的 TCP 监听端口。注意这里用到了日志过滤&quot;LogStash::Filters::Grok&quot;功能，下面马上会介绍。</p><p>&quot;LogStash::Inputs::TCP&quot;最常见的用法就是结合 nc 命令导入旧数据。启动 Logstash 进程后，在另一个终端运行如下命令即可导入旧数据：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@kafkazk</span><span style="color:#E1E4E8;">1 app]# nc </span><span style="color:#79B8FF;">172.16</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">213.151</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">5044</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/var/</span><span style="color:#E1E4E8;">log</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">secure</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@kafkazk</span><span style="color:#24292E;">1 app]# nc </span><span style="color:#005CC5;">172.16</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">213.151</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5044</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/var/</span><span style="color:#24292E;">log</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">secure</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这种方式，就把 /var/log/secure 的内容全部导入到 Logstash 中了，当 nc 命令结束时，数据也就导入完成了。</p><p>这里其实还可以将 Filebeat 收集到的日志直接导入到 Logstash，也就是在 Filebeat 的输出部分，做如下设置：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">output.logstash</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">hosts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;nnmaster.cloud:5044&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">output.logstash</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">hosts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;nnmaster.cloud:5044&quot;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样，Filebeat 就可以向 nnmaster.cloud 的 5044 端口发送数据，而 Logstash 就可以接收此数据，进而执行过滤、分析、输出等操作。</p><p>此时 Logstash 的 input 部分应该配置如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input {</span></span>
<span class="line"><span style="color:#E1E4E8;">  beats {</span></span>
<span class="line"><span style="color:#E1E4E8;">   port </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5044</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input {</span></span>
<span class="line"><span style="color:#24292E;">  beats {</span></span>
<span class="line"><span style="color:#24292E;">   port </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5044</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，这里使用了 beats 主要用来接收从 Filebeat 发送过来的数据。</p><h3 id="logstash-编码插件-codec" tabindex="-1">Logstash 编码插件（Codec） <a class="header-anchor" href="#logstash-编码插件-codec" aria-label="Permalink to &quot;Logstash 编码插件（Codec）&quot;">​</a></h3><p>在前面介绍的例子中，其实我们已经用过编码插件 Codec 了，即 rubydebug，它是一种编码插件，一般只用在 Stdout 插件中，作为配置测试或者调试的工具。</p><p><strong>编码插件（Codec）</strong> 可以在 Logstash 中输入或输出时处理不同类型的数据，同时，还可以更好更方便地与其他自定义格式的数据产品共存，比如 fluent、netflow 等通用数据格式的其他产品。因此，Logstash 不只是一个 input → filter → output 的数据流，而是一个 input → decode → filter → encode → output 的数据流。</p><p>Codec 支持的编码格式常见的有 plain、json、json_lines 等，下面依次介绍。</p><h4 id="_1-codec-插件之-plain" tabindex="-1">1. Codec 插件之 plain <a class="header-anchor" href="#_1-codec-插件之-plain" aria-label="Permalink to &quot;1. Codec 插件之 plain&quot;">​</a></h4><p>plain 是一个空的解析器，它可以让用户自己指定格式，也就是说输入是什么格式，输出就是什么格式。下面是一个包含 plain 编码的事件配置文件：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input{</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdin {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output{</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout {</span></span>
<span class="line"><span style="color:#E1E4E8;">         codec </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;plain&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input{</span></span>
<span class="line"><span style="color:#24292E;">    stdin {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output{</span></span>
<span class="line"><span style="color:#24292E;">    stdout {</span></span>
<span class="line"><span style="color:#24292E;">         codec </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;plain&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在启动 Logstash 进程后，如果输入 &quot;hello world&quot;，那么则输出如下结果：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">16T07</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">21.</span><span style="color:#FDAEB7;font-style:italic;">114Z</span><span style="color:#E1E4E8;">  nnmaster.cloud hello world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">16T07</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">21.</span><span style="color:#B31D28;font-style:italic;">114Z</span><span style="color:#24292E;">  nnmaster.cloud hello world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看出，输入的内容都被原样输出了，并且前面加上了时间和主机名字段。</p><h4 id="_2-codec-插件之-json" tabindex="-1">2. Codec 插件之 json <a class="header-anchor" href="#_2-codec-插件之-json" aria-label="Permalink to &quot;2. Codec 插件之 json&quot;">​</a></h4><p>如果发送给 Logstash 的数据内容为 json 格式，则可以在 input 字段加入 codec=&gt;json 来进行解析，这样就可以根据具体内容生成字段了，方便分析和储存。如果想让 Logstash 输出为 json 格式，则可以在 output 字段中加入 codec=&gt;json。下面是一个包含 json 编码的事件配置文件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdin {</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">codec</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input {</span></span>
<span class="line"><span style="color:#24292E;">    stdin {</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    stdout {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">codec</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>同理，在启动 Logstash 进程后，如果输入&quot;hello world&quot;，那么输出信息为：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;@version&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;@timestamp&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;2020-06-16T07:18:39.520Z&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;nnmaster.cloud&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;@version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;@timestamp&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;2020-06-16T07:18:39.520Z&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;nnmaster.cloud&quot;</span><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这就是 json 格式的输出，可以看出，json 每个字段是 key:values 格式，多个字段之间通过逗号分隔。</p><h3 id="logstash-过滤器插件-filter" tabindex="-1">Logstash 过滤器插件（Filter） <a class="header-anchor" href="#logstash-过滤器插件-filter" aria-label="Permalink to &quot;Logstash 过滤器插件（Filter）&quot;">​</a></h3><p>丰富的过滤器插件是 Logstash 功能强大的重要因素。名为过滤器，其实它提供的不单单是过滤器的功能，还可以对进入过滤器的原始数据进行复杂的逻辑处理，甚至添加独特的事件到后续流程中。</p><h4 id="_1-grok-正则捕获" tabindex="-1">1. Grok 正则捕获 <a class="header-anchor" href="#_1-grok-正则捕获" aria-label="Permalink to &quot;1. Grok 正则捕获&quot;">​</a></h4><p>Grok 是一个十分强大的 Logstash Filter 插件，它可以通过正则解析任意文本，将非结构化日志数据格式转换为结构化的、方便查询的结构。它是目前 Logstash 中解析非结构化日志数据最好的方式。</p><p>Grok 的语法规则是：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">%</span><span style="color:#E1E4E8;">{语法: </span><span style="color:#9ECBFF;">语义}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">%</span><span style="color:#24292E;">{语法: </span><span style="color:#032F62;">语义}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里的&quot;语法&quot;指的是匹配模式，例如，使用 NUMBER 模式可以匹配出数字，IP 模式则会匹配出 127.0.0.1 这样的 IP 地址。比如按以下格式输入内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">172.16</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">213</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">132</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Jun</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">403</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5039</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">172.16</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">213</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">132</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Jun</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">403</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5039</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么，</p><ul><li><p>%{IP:clientip} 匹配模式将获得的结果为：clientip: 172.16.213.132</p></li><li><p>%{HTTPDATE:timestamp} 匹配模式将获得的结果为：timestamp: 16/Jun/2020:16:24:19 +0800</p></li><li><p>%{QS:referrer} 匹配模式将获得的结果为：referrer: &quot;GET / HTTP/1.1&quot;</p></li></ul><p>到这里为止，我们已经获取了上面输入中前三个部分的内容，分别是 clientip、timestamp 和 referrer 三个字段。如果要获取剩余部分的信息，方法类似。</p><p>要在线调试 Grok，<a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noreferrer">可点击这里进行在线调试</a>，非常方便。</p><p>下面是一个组合匹配模式，它可以获取上面输入的所有内容：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">%</span><span style="color:#E1E4E8;">{IP:clientip}</span><span style="color:#B392F0;">\\</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\[</span><span style="color:#9ECBFF;">%{HTTPDATE:timestamp}</span><span style="color:#79B8FF;">\\]\\ </span><span style="color:#9ECBFF;">%{QS:referrer}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:response}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:bytes}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">%</span><span style="color:#24292E;">{IP:clientip}</span><span style="color:#6F42C1;">\\</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\[</span><span style="color:#032F62;">%{HTTPDATE:timestamp}</span><span style="color:#005CC5;">\\]\\ </span><span style="color:#032F62;">%{QS:referrer}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:response}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:bytes}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>正则匹配是非常严格的匹配，在这个组合匹配模式中，使用了转义字符 \\，这是因为输入的内容中有空格和中括号。</p><p>通过上面这个组合匹配模式，我们将输入的内容分成了 5 个部分，即 5 个字段。将输入内容分割为不同的数据字段，这对于日后解析和查询日志数据非常有用，这正是我们使用 grok 的目的。</p><p>Logstash 默认提供了近 200 个匹配模式（其实就是定义好的正则表达式）让我们来使用，可以在 Logstash 安装目录下找到。例如，我这里的路径为：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">vendor</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bundle</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">jruby</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2.5</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gems</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logstash</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">patterns</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">core</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4.1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">patterns</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">vendor</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bundle</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">jruby</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2.5</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gems</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logstash</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">patterns</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">core</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4.1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">patterns</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此目录下有定义好的各种匹配模式，基本匹配定义在 grok-patterns 文件中。从这些定义好的匹配模式中，可以查到上面使用的四个匹配模式对应的定义规则，如下表所示：</p><table><thead><tr><th style="text-align:center;"><strong>匹配模式</strong></th><th style="text-align:center;"><strong>正则定义规则</strong></th></tr></thead><tbody><tr><td style="text-align:center;">NUMBER</td><td style="text-align:center;">(?:%{BASE10NUM})</td></tr><tr><td style="text-align:center;">HTTPDATE</td><td style="text-align:center;">%{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT}</td></tr><tr><td style="text-align:center;">IP</td><td style="text-align:center;">(?:%{IPV6}|%{IPV4})</td></tr><tr><td style="text-align:center;">QS</td><td style="text-align:center;">%{QUOTEDSTRING}</td></tr></tbody></table><p>除此之外，还有很多默认定义好的匹配模式文件，比如 httpd、java、linux-syslog、redis、mongodb、nagios 等，这些已经定义好的匹配模式，可以直接在 Grok 过滤器中进行引用。当然也可以定义自己需要的匹配模式。</p><p>在了解完 Grok 的匹配规则之后，下面通过一个配置实例深入介绍下 Logstash 是如何将非结构化日志数据转换成结构化数据的。首先看下面的一个事件配置文件：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input{</span></span>
<span class="line"><span style="color:#E1E4E8;">stdin{}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">filter{</span></span>
<span class="line"><span style="color:#E1E4E8;">grok{</span></span>
<span class="line"><span style="color:#E1E4E8;">match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;%{IP:clientip}</span><span style="color:#79B8FF;">\\ \\[</span><span style="color:#9ECBFF;">%{HTTPDATE:timestamp}</span><span style="color:#79B8FF;">\\]\\ </span><span style="color:#9ECBFF;">%{QS:referrer}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:response}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:bytes}&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output{</span></span>
<span class="line"><span style="color:#E1E4E8;">stdout{</span></span>
<span class="line"><span style="color:#E1E4E8;">codec </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rubydebug&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input{</span></span>
<span class="line"><span style="color:#24292E;">stdin{}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">filter{</span></span>
<span class="line"><span style="color:#24292E;">grok{</span></span>
<span class="line"><span style="color:#24292E;">match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;%{IP:clientip}</span><span style="color:#005CC5;">\\ \\[</span><span style="color:#032F62;">%{HTTPDATE:timestamp}</span><span style="color:#005CC5;">\\]\\ </span><span style="color:#032F62;">%{QS:referrer}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:response}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:bytes}&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output{</span></span>
<span class="line"><span style="color:#24292E;">stdout{</span></span>
<span class="line"><span style="color:#24292E;">codec </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rubydebug&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个配置文件中，输入配置成了 stdin，在 filter 中添加了 grok 过滤插件，并通过 match 来执行正则表达式解析，中括号中的正则表达式就是上面提到的组合匹配模式，然后通过 rubydebug 编码格式输出信息。这样的组合有助于调试和分析输出结果。通过此配置启动 Logstash进程后，我们仍然输入之前给出的那段内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">172.16</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">213</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">132</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Jun</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">403</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5039</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">172.16</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">213</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">132</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Jun</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">403</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5039</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，查看 rubydebug 格式的日志输出，内容如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;16/Jun/2020:16:24:19 +0800&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;response&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;403&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;bytes&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;5039&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;@version&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;clientip&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;172.16.213.132&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;nnmaster.cloud&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;referrer&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">GET / HTTP/1.1</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;172.16.213.132 [16/Jun/2020:16:24:19 +0800] </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">GET / HTTP/1.1</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> 403 5039&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@timestamp&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">16T07</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">46</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">53.</span><span style="color:#FDAEB7;font-style:italic;">120Z</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;16/Jun/2020:16:24:19 +0800&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;response&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;403&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;bytes&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5039&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;@version&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;clientip&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;172.16.213.132&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;nnmaster.cloud&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;referrer&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">GET / HTTP/1.1</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;172.16.213.132 [16/Jun/2020:16:24:19 +0800] </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">GET / HTTP/1.1</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> 403 5039&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;@timestamp&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">16T07</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">46</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">53.</span><span style="color:#B31D28;font-style:italic;">120Z</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>从这个输出可知，通过 Grok 定义好的 5 个字段都获取到了内容，并正常输出了，看似完美，其实还有不少瑕疵。</p><p>首先，message 字段也输出了完整的输入内容。这样看来，数据实质上就相当于是重复存储了两份，此时可以用 remove_field 参数来删除掉 message 字段，只保留最重要的部分。</p><p>其次，timestamp 字段表示日志的产生时间，而 @timestamp 默认情况下显示的是当前时间，在上面的输出中可以看出，这两个字段的时间并不一致，那么问题来了，在 ELK 日志处理系统中，@timestamp 字段会被 elasticsearch 用到，用来标注日志的生成时间。如此一来，日志生成的时间就会发生混乱，要解决这个问题，需要用到另一个插件，即 Data 插件，这个时间插件用来转换日志记录中的时间字符串，变成 LogStash::Timestamp 对象，然后转存到 @timestamp 字段里。</p><p>使用 Data 插件很简单，添加下面一段配置即可：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">date {</span></span>
<span class="line"><span style="color:#E1E4E8;">match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">date {</span></span>
<span class="line"><span style="color:#24292E;">match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意：时区偏移量需要用一个字母 Z 来转换。</p><p>最后，将 timestamp 获得的值传给 @timestamp 后，timestamp 其实也就没有存在的意义了，所以还需要删除这个字段。</p><p>将上面 3 个步骤的操作统一合并到配置文件中，修改后的配置文件内容如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdin {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    grok {</span></span>
<span class="line"><span style="color:#E1E4E8;">        match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;%{IP:clientip}</span><span style="color:#79B8FF;">\\ \\[</span><span style="color:#9ECBFF;">%{HTTPDATE:timestamp}</span><span style="color:#79B8FF;">\\]\\ </span><span style="color:#9ECBFF;">%{QS:referrer}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:response}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:bytes}&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        remove_field </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">date {</span></span>
<span class="line"><span style="color:#E1E4E8;">        match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">mutate {</span></span>
<span class="line"><span style="color:#E1E4E8;">            remove_field </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout {</span></span>
<span class="line"><span style="color:#E1E4E8;">        codec </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rubydebug&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input {</span></span>
<span class="line"><span style="color:#24292E;">    stdin {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    grok {</span></span>
<span class="line"><span style="color:#24292E;">        match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;%{IP:clientip}</span><span style="color:#005CC5;">\\ \\[</span><span style="color:#032F62;">%{HTTPDATE:timestamp}</span><span style="color:#005CC5;">\\]\\ </span><span style="color:#032F62;">%{QS:referrer}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:response}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:bytes}&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        remove_field </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">date {</span></span>
<span class="line"><span style="color:#24292E;">        match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">mutate {</span></span>
<span class="line"><span style="color:#24292E;">            remove_field </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    stdout {</span></span>
<span class="line"><span style="color:#24292E;">        codec </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rubydebug&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在这个配置文件中，使用了 Date 插件、mutate 插件及 remove_field 配置项，关于这两个插件后面会马上介绍。</p><p>将修改后的配置文件重新运行后，仍然输入之前的那段内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">172.16</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">213</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">132</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Jun</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">403</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5039</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">172.16</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">213</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">132</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Jun</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">403</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5039</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结果如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;@version&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;nnmaster.cloud&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;bytes&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;5039&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;@timestamp&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">16T08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">000Z</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;referrer&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">GET / HTTP/1.1</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;response&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;403&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;clientip&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;172.16.213.132&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;@version&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;nnmaster.cloud&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;bytes&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5039&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;@timestamp&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">16T08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">000Z</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;referrer&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">GET / HTTP/1.1</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;response&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;403&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;clientip&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;172.16.213.132&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这就是我们需要的最终结果。</p><h4 id="_2-时间处理-date" tabindex="-1">2. 时间处理 (Date) <a class="header-anchor" href="#_2-时间处理-date" aria-label="Permalink to &quot;2. 时间处理 (Date)&quot;">​</a></h4><p>Date 插件对于排序事件和回填旧数据尤其重要，它可以用来转换日志记录中的时间字段，变成 LogStash::Timestamp 对象，然后转存到 @timestamp 字段里，在上一课时中已经做过简单的介绍。</p><p>下面是 Date 插件的一个配置示例（这里仅仅列出 filter 部分）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    grok {</span></span>
<span class="line"><span style="color:#E1E4E8;">        match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;%{HTTPDATE:timestamp}&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    date {</span></span>
<span class="line"><span style="color:#E1E4E8;">        match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    grok {</span></span>
<span class="line"><span style="color:#24292E;">        match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;%{HTTPDATE:timestamp}&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    date {</span></span>
<span class="line"><span style="color:#24292E;">        match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>为什么要使用这个 Date 插件呢？主要有两方面原因。</p><p>一方面由于 Logstash 会给收集到的每条日志自动打上时间戳（即 @timestamp），但是这个时间戳记录的是 input 接收数据的时间，而不是日志生成的时间（因为日志生成时间与 input 接收的时间肯定不同），这样就可能导致搜索数据时产生混乱。</p><p>另一方面，不知道大家是否注意到了，在上面那段 rubydebug 编码格式的输出中，@timestamp 字段虽然已经获取了 timestamp 字段的时间，但是仍然比北京时间早了 8 个小时，这是因为在 Elasticsearch 内部，对时间类型字段都是统一采用 UTC 时间，而日志统一采用 UTC 时间存储，是国际安全、运维界的一个共识。其实这并不影响什么，因为 ELK 已经给出了解决方案，那就是在 Kibana 平台上，程序会自动读取浏览器的当前时区，然后在 Web 页面自动将 UTC 时间转换为当前时区的时间。</p><h4 id="_3-数据修改-mutate" tabindex="-1">3. 数据修改（Mutate） <a class="header-anchor" href="#_3-数据修改-mutate" aria-label="Permalink to &quot;3. 数据修改（Mutate）&quot;">​</a></h4><p>Mutate 插件是 Logstash 另一个非常重要插件，它提供了丰富的基础类型数据处理能力，包括重命名、删除、替换和修改日志事件中的字段。这里重点介绍下 Mutate 插件的字段类型转换功能（convert）、正则表达式替换匹配字段功能（gsub）、分隔符分割字符串为数组功能（split）、重命名字段功能（rename）、删除字段功能（remove_field）的具体实现方法。</p><p>（1）字段类型转换功能</p><p>Mutate 可以设置的转换类型有 integer、float 和 string。下面是一个关于 mutate 字段类型转换的示例（仅列出 filter 部分）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutate {</span></span>
<span class="line"><span style="color:#E1E4E8;">        convert </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;filed_name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;integer&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    mutate {</span></span>
<span class="line"><span style="color:#24292E;">        convert </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;filed_name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;integer&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个示例表示将 filed_name 字段类型修改为 integer。</p><p>（2）正则表达式替换匹配字段</p><p>gsub 可以通过正则表达式替换字段中匹配到的值，只对字符串字段有效。下面是一个关于 mutate 插件中 gsub 的示例（仅列出 filter 部分）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutate {</span></span>
<span class="line"><span style="color:#E1E4E8;">        gsub </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;filed_name_1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&quot;_&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    mutate {</span></span>
<span class="line"><span style="color:#24292E;">        gsub </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;filed_name_1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&quot;_&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个示例表示将 filed_name1 字段中所有 &quot;/&quot; 字符替换为 &quot;_&quot;。</p><p>（3）分隔符分割字符串为数组</p><p>split 可以通过指定的分隔符分割字段中的字符串为数组。下面是一个关于 mutate 插件中 split 的示例（仅列出 filter 部分）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutate {</span></span>
<span class="line"><span style="color:#E1E4E8;">        split </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;filed_name_2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    mutate {</span></span>
<span class="line"><span style="color:#24292E;">        split </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;filed_name_2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;|&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个示例表示将 filed_name_2 字段以 &quot;|&quot; 为区间分隔成数组形式。</p><p>（4）重命名字段</p><p>rename 可以实现重命名某个字段的功能。下面是一个关于 mutate 插件中 rename 的示例（仅列出 filter 部分）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutate {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rename </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;old_field&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;new_field&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    mutate {</span></span>
<span class="line"><span style="color:#24292E;">        rename </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;old_field&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;new_field&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个示例表示将字段 old_field 重命名为 new_field。</p><p>（5）删除字段</p><p>remove_field 可以实现删除某个字段的功能。下面是一个关于 mutate 插件中 remove_field 的示例（仅列出 filter 部分）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mutate {</span></span>
<span class="line"><span style="color:#E1E4E8;">        remove_field  </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    mutate {</span></span>
<span class="line"><span style="color:#24292E;">        remove_field  </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">  [</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个示例表示将字段 timestamp 删除。 在本课时的最后，我们将上面 mutate 插件的几个功能点整合到一个完整的配置文件中，以验证 mutate 插件实现的功能细节，配置文件内容如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">input {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdin {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">filter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    grok {</span></span>
<span class="line"><span style="color:#E1E4E8;">        match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;%{IP:clientip}</span><span style="color:#79B8FF;">\\ \\[</span><span style="color:#9ECBFF;">%{HTTPDATE:timestamp}</span><span style="color:#79B8FF;">\\]\\ </span><span style="color:#9ECBFF;">%{QS:referrer}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:response}</span><span style="color:#79B8FF;">\\ </span><span style="color:#9ECBFF;">%{NUMBER:bytes}&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        remove_field </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">date {</span></span>
<span class="line"><span style="color:#E1E4E8;">        match </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">mutate {</span></span>
<span class="line"><span style="color:#E1E4E8;">           rename </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;response&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;response_new&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">           convert </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;response&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">           gsub </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;referrer&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">           remove_field </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">           split </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;clientip&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout {</span></span>
<span class="line"><span style="color:#E1E4E8;">        codec </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rubydebug&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input {</span></span>
<span class="line"><span style="color:#24292E;">    stdin {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">filter {</span></span>
<span class="line"><span style="color:#24292E;">    grok {</span></span>
<span class="line"><span style="color:#24292E;">        match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;%{IP:clientip}</span><span style="color:#005CC5;">\\ \\[</span><span style="color:#032F62;">%{HTTPDATE:timestamp}</span><span style="color:#005CC5;">\\]\\ </span><span style="color:#032F62;">%{QS:referrer}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:response}</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">%{NUMBER:bytes}&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        remove_field </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">date {</span></span>
<span class="line"><span style="color:#24292E;">        match </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">mutate {</span></span>
<span class="line"><span style="color:#24292E;">           rename </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;response&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;response_new&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">           convert </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;response&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">           gsub </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;referrer&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">           remove_field </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">           split </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;clientip&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    stdout {</span></span>
<span class="line"><span style="color:#24292E;">        codec </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rubydebug&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>将此配置文件运行后，仍然输入之前的那段内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">172.16</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">213</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">132</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Jun</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">403</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5039</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">172.16</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">213</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">132</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Jun</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">403</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5039</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出结果如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;nnmaster.cloud&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;response_new&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;403&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;clientip&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#9ECBFF;">&quot;172&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#9ECBFF;">&quot;16&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#9ECBFF;">&quot;213&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#9ECBFF;">&quot;132&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">&quot;bytes&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;5039&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;@timestamp&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">16T08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">000Z</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;referrer&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;@version&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;nnmaster.cloud&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;response_new&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;403&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;clientip&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#032F62;">&quot;172&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#032F62;">&quot;16&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#032F62;">&quot;213&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#032F62;">&quot;132&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#032F62;">&quot;bytes&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5039&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;@timestamp&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">16T08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">000Z</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;referrer&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET / HTTP/1.1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;@version&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>从这个输出中，可以很清楚地看到，mutate 插件是如何操作日志事件中字段的。</p><h3 id="logstash-输出插件-output" tabindex="-1">Logstash 输出插件（Output） <a class="header-anchor" href="#logstash-输出插件-output" aria-label="Permalink to &quot;Logstash 输出插件（Output）&quot;">​</a></h3><p>Output 是 Logstash 的最后阶段，一个事件可以经过多个输出，而一旦所有输出处理完成后，整个事件就执行完成。 一些常用的输出包括：</p><ul><li><p>file，表示将日志数据写入磁盘上的文件；</p></li><li><p>elasticsearch，表示将日志数据发送给 Elasticsearch，它可以高效方便和易于查询的保存数据。</p></li></ul><p>此外，Logstash 还支持输出到 Nagios、HDFS、Email（发送邮件）和 Exec（调用命令执行）。</p><h4 id="_1-输出到标准输出-stdout" tabindex="-1">1. 输出到标准输出（stdout） <a class="header-anchor" href="#_1-输出到标准输出-stdout" aria-label="Permalink to &quot;1. 输出到标准输出（stdout）&quot;">​</a></h4><p>stdout 与之前介绍过的 stdin 插件一样，它是最基础和简单的输出插件。下面是一个配置实例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    stdout {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">codec</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> rubydebug</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    stdout {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">codec</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> rubydebug</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>stdout 插件主要的功能和用途是用于调试，该插件在前面已经多次使用过，这里就不再过多介绍了。</p><h4 id="_2-保存为文件-file" tabindex="-1">2. 保存为文件（file） <a class="header-anchor" href="#_2-保存为文件-file" aria-label="Permalink to &quot;2. 保存为文件（file）&quot;">​</a></h4><p>file 插件可以将输出保存到一个文件中，配置实例如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file {</span></span>
<span class="line"><span style="color:#E1E4E8;">        path </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/data/log/%{+yyyy-MM-dd}/%{host}_%{+HH}.log&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    file {</span></span>
<span class="line"><span style="color:#24292E;">        path </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/data/log/%{+yyyy-MM-dd}/%{host}_%{+HH}.log&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在上面这个配置中，使用了变量匹配，用于自动匹配时间和主机名，这在实际使用中很有帮助。</p><p>file 插件默认会以 JSON 形式将数据保存到指定的文件中，而如果只希望按照日志的原始格式保存的话，就需要通过 codec 编码方式自定义 %{message}，将日志按照原始格式保存输出到文件。配置实例如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">output {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file {</span></span>
<span class="line"><span style="color:#E1E4E8;">        path </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/data/log/%{+yyyy-MM-dd}/%{host}_%{+HH}.log.gz&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        codec </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> line { format </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;%{message}&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        gzip </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">output {</span></span>
<span class="line"><span style="color:#24292E;">    file {</span></span>
<span class="line"><span style="color:#24292E;">        path </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/data/log/%{+yyyy-MM-dd}/%{host}_%{+HH}.log.gz&quot;</span></span>
<span class="line"><span style="color:#24292E;">        codec </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> line { format </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;%{message}&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        gzip </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在这个配置中，使用了 codec 编码方式，将输出日志转换为原始格式，同时，输出数据文件还开启了 gzip 压缩，自动将输出保存为压缩文件格式。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时注意讲解了 Logstash 的配置文件编写方法，以及输入插件、编码插件、过滤插件和输出插件的使用方法，这些插件的熟练掌握对于 Logstash 来说至关重要。因为 Logstash 所有功能的实现都是建立在插件基础上的。Logstash 默认自带的插件已经能够满足我们 80% 左右的应用需求。</p>`,171),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const b=s(l,[["render",t]]);export{F as __pageData,b as default};
