import{_ as a,j as p,o as l,g as o,k as t,h as e,Q as r,s}from"./chunks/framework.cfb14fe0.js";const B=JSON.parse('{"title":"11数组排序（下）：ort排序方法的实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6184) 11  数组排序（下）：ort 排序方法的实现原理.md","filePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6184) 11  数组排序（下）：ort 排序方法的实现原理.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/JavaScript 核心原理精讲_文档/(6184) 11  数组排序（下）：ort 排序方法的实现原理.md"},E=r("",40),y=s("p",null,"将这两个排序的时间复杂度对比来看，如果当 n 足够小的时候，最好的情况下，插入排序的时间复杂度为 O(n) 要优于快速排序的 O(nlogn)，因此就解释了这里当 V8 实现 JS 数组排序算法时，数据量较小的时候会采用插入排序的原因了。",-1),i=s("p",null,"在日常的前端开发工作中，对此的应用会比较多，研究源码的机会也是相对较少的。通过本讲的学习，我还是希望你能够多想想日常工作中经常用到的 JS 方法，及其底层源代码的实现逻辑，从而整体提升 JS 的编程能力和理解能力。",-1),F=s("p",null,"这一讲我只是带你剖析了 sort 的源码实现，下一讲我会带你手写 JS 数组多个方法的底层实现。",-1),A=s("p",null,"另外在后面的课程中，类似这样的源码剖析还会有很多，在看每一个部分的同时，希望你能多练习、多研究，也欢迎你在下方留言发表自己在学习过程中遇到的困惑以及学习感悟等，让我们共同进步。",-1);function D(C,d,m,_,v,h){const n=p("Image");return l(),o("div",null,[E,t(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/04/2B/Cgp9HWAib-6AdHI6AADCTvUUDdI454.png"}),e(),y,i,F,A])}const g=a(c,[["render",D]]);export{B as __pageData,g as default};
