import{_ as i,j as a,o as s,h as n,k as o,f as l,s as t,Q as e}from"./chunks/framework.d3daa342.js";const y=JSON.parse('{"title":"08深入剖析浏览器中页面的渲染过程","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/108-前端进阶笔记文档/(7204) 08  深入剖析浏览器中页面的渲染过程.md","filePath":"posts/frontEnd/108-前端进阶笔记文档/(7204) 08  深入剖析浏览器中页面的渲染过程.md","lastUpdated":1696682708000}'),_={name:"posts/frontEnd/108-前端进阶笔记文档/(7204) 08  深入剖析浏览器中页面的渲染过程.md"},c=t("h1",{id:"_08深入剖析浏览器中页面的渲染过程",tabindex:"-1"},[l("08深入剖析浏览器中页面的渲染过程 "),t("a",{class:"header-anchor",href:"#_08深入剖析浏览器中页面的渲染过程","aria-label":'Permalink to "08深入剖析浏览器中页面的渲染过程"'},"​")],-1),r=t("p",null,"作为前端开发，我们的日常工作中除了编码以外，几乎大多数时间都在跟浏览器打交道。所以我们更加要吃透浏览器，掌握它到底是怎样将我们编写的代码渲染到页面中的。",-1),d=t("p",null,"所以，今天我主要结合浏览器的内部工作原理，深入剖析下浏览器中页面的渲染过程。",-1),h=t("p",null,"第 6 讲我们介绍了一个 HTTP 请求在浏览器中的请求过程，该过程将浏览器作为单独的对象，描述客户端和服务端之间的通信过程。那么，当我们在浏览器的地址栏中输入 URL，按下回车键，到页面在浏览器中渲染完成，这个过程中浏览器的内部发生了什么了呢？",-1),g=t("p",null,"为了了解这个过程，首先我们要了解浏览器的内部结构。",-1),u=t("h3",{id:"浏览器的内部结构",tabindex:"-1"},[l("浏览器的内部结构 "),t("a",{class:"header-anchor",href:"#浏览器的内部结构","aria-label":'Permalink to "浏览器的内部结构"'},"​")],-1),m=t("p",null,"从结构上来说，浏览器主要包括了八个子系统：用户界面、浏览器引擎、渲染引擎、网络子系统、JavaScript 解释器、XML 解析器、显示后端、数据持久性子系统。",-1),A=t("p",null,"这些子系统组合构成了我们的浏览器。页面的加载和渲染过程，离不开网络子系统、渲染引擎、JavaScript 解释器和浏览器引擎。",-1),C=t("p",null,"以前端开发最常使用的 Chrome 浏览器为例， Chrome 浏览器是使用多进程架构的方式来管理这些子系统。",-1),T=t("h3",{id:"chrome-多进程架构",tabindex:"-1"},[l("Chrome 多进程架构 "),t("a",{class:"header-anchor",href:"#chrome-多进程架构","aria-label":'Permalink to "Chrome 多进程架构"'},"​")],-1),S=t("p",null,"Chrome 浏览器采用的多进程架构，主要包括四个进程：",-1),P=e("",3),M=e("",10),I=e("",7),f=t("p",null,"我们来分别看下。",-1),B=t("p",null,[t("strong",null,"1. 解析。")],-1),D=t("p",null,"渲染器进程的主线程会解析以下内容：",-1),H=t("ul",null,[t("li",null,[t("p",null,"解析 HTML 内容，产生一个 DOM 节点树；")]),t("li",null,[t("p",null,"解析 CSS，产生 CSS 规则树；")]),t("li",null,[t("p",null,"解析 Javascript 脚本，由于 Javascript 脚本可以通过 DOM API 和 CSSOM API 来操作 DOM 节点树和 CSS 规则树，因此该过程中会等待 JavaScript 运行完成才继续解析 HTML。")])],-1),E=t("p",null,"解析完成后，我们得到了 DOM 节点树和 CSS 规则树，布局过程便是通过 DOM 节点树和 CSS 规则树来构造渲染树（Render Tree）。",-1),U=t("p",null,[t("strong",null,"2. 布局。")],-1),O=t("p",null,"通过解析之后，渲染器进程知道每个节点的结构和样式，但如果需要渲染页面，浏览器还需要进行布局，布局过程便是我们常说的渲染树的创建过程。",-1),V=t("p",null,[l("在这个过程中，像"),t("code",null,"header"),l("或"),t("code",null,"display:none"),l("的元素，它们会存在 DOM 节点树中，但不会被添加到渲染树里。")],-1),b=e("",11),q=t("p",null,"合成过程如下：",-1),v=t("ol",null,[t("li",null,[t("p",null,"当主线程创建了合成层并确定了绘制顺序，便将这些信息提交给合成线程；")]),t("li",null,[t("p",null,"合成器线程将每个图层栅格化，然后将每个图块发送给光栅线程；")]),t("li",null,[t("p",null,"光栅线程栅格化每个瓦片，并将它们存储在 GPU 内存中；")]),t("li",null,[t("p",null,"合成器线程通过 IPC 提交给浏览器进程，这些合成器帧被发送到 GPU 进程处理，并显示在屏幕上。")])],-1),x=e("",9);function G(L,R,N,J,W,k){const p=a("Image");return s(),n("div",null,[c,r,d,h,g,u,m,o(p,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGef-AVdyVAAHZWEKP8kc582.png"}),l(),A,C,T,S,o(p,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/3A/95/CioPOWB_9faAVGKiAAHoS6wTpmU695.png"}),l(),P,o(p,{alt:"图片9.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGelWAbiaSAAEx45xN4zQ889.png"}),l(),o(p,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGegmAGuduAAEB_cEYcEU948.png"}),l(),M,o(p,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGemeAeLIdAAGeyyv3jvM989.png"}),l(),I,o(p,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/BE/CioPOWCGeqOATDmZAABqHA_KZjw863.png"}),l(),f,B,D,H,o(p,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGeqqAJjA6AAN4ArIs9uY183.png"}),l(),E,U,O,V,o(p,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/B5/Cgp9HWCGeq-AM147AAHqFon6pEw645.png"}),l(),b,o(p,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/3A/96/CioPOWB_9tKAP-iSAAAbxYxtmYI438.png"}),l(),q,v,o(p,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M01/3A/8D/Cgp9HWB_9tiANnD-AAE0dHoZY_A915.png"}),l(),x])}const Y=i(_,[["render",G]]);export{y as __pageData,Y as default};
