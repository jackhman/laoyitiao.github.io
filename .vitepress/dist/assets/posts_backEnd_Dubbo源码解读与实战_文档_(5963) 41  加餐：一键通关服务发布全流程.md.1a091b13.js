import{_ as o,j as e,o as t,g as r,k as p,h as n,Q as l,s}from"./chunks/framework.e0c66c3f.js";const R=JSON.parse('{"title":"DubboBootstrap 入口 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5963) 41  加餐：一键通关服务发布全流程.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5963) 41  加餐：一键通关服务发布全流程.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(5963) 41  加餐：一键通关服务发布全流程.md"},E=l(`<p>在前面的课时中，我们已经将整个 Dubbo 的核心实现进行了分析。接下来的两个课时，我们将串联 Dubbo 中的这些核心实现，分析 Dubbo<strong>服务发布</strong> 和<strong>服务引用</strong>的全流程，帮助你将之前课时介绍的独立知识点联系起来，形成一个完整整体。</p><p>本课时我们就先来重点关注 Provider 节点发布服务的过程，在这个过程中会使用到之前介绍的很多 Dubbo 核心组件。我们从 DubboBootstrap 这个入口类开始介绍，分析 Provider URL 的组装以及服务发布流程，其中会详细介绍本地发布和远程发布的核心流程。</p><h3 id="dubbobootstrap-入口" tabindex="-1">DubboBootstrap 入口 <a class="header-anchor" href="#dubbobootstrap-入口" aria-label="Permalink to &quot;DubboBootstrap 入口&quot;">​</a></h3><p>在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=4257" target="_blank" rel="noreferrer">第 01 课时</a>dubbo-demo-api-provider 示例的 Provider 实现中我们可以看到，整个 Provider 节点的启动入口是 DubboBootstrap.start() 方法，在该方法中会执行一些初始化操作，以及一些状态控制字段的更新，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DubboBootstrap </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (started.</span><span style="color:#B392F0;">compareAndSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)) { </span><span style="color:#6A737D;">// CAS操作，保证启动一次</span></span>
<span class="line"><span style="color:#E1E4E8;">        ready.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 用于判断当前节点是否已经启动完毕，在后面的Dubbo QoS中会使用到该字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化一些基础组件，例如，配置中心相关组件、事件监听、元数据相关组件，这些组件在后面将会进行介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 重点：发布服务</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">exportServices</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isOnlyRegisterProvider</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasExportedServices</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 用于暴露本地元数据服务，后面介绍元数据的时候会深入介绍该部分的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">exportMetadataService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 用于将服务实例注册到专用于服务发现的注册中心</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">registerServiceInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理Consumer的ReferenceConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">referServices</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (asyncExportingFutures.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 异步发布服务，会启动一个线程监听发布是否完成，完成之后会将ready设置为true</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">awaitFinish</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                ready.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 同步发布服务成功之后，会将ready设置为true</span></span>
<span class="line"><span style="color:#E1E4E8;">            ready.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DubboBootstrap </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (started.</span><span style="color:#6F42C1;">compareAndSet</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)) { </span><span style="color:#6A737D;">// CAS操作，保证启动一次</span></span>
<span class="line"><span style="color:#24292E;">        ready.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 用于判断当前节点是否已经启动完毕，在后面的Dubbo QoS中会使用到该字段</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化一些基础组件，例如，配置中心相关组件、事件监听、元数据相关组件，这些组件在后面将会进行介绍</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重点：发布服务</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">exportServices</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isOnlyRegisterProvider</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasExportedServices</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 用于暴露本地元数据服务，后面介绍元数据的时候会深入介绍该部分的内容</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">exportMetadataService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 用于将服务实例注册到专用于服务发现的注册中心</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">registerServiceInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理Consumer的ReferenceConfig</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">referServices</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (asyncExportingFutures.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 异步发布服务，会启动一个线程监听发布是否完成，完成之后会将ready设置为true</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">awaitFinish</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                ready.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 同步发布服务成功之后，会将ready设置为true</span></span>
<span class="line"><span style="color:#24292E;">            ready.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>不仅是直接通过 API 启动 Provider 的方式会使用到 DubboBootstrap，在 Spring 与 Dubbo 集成的时候也是使用 DubboBootstrap 作为服务发布入口的</strong>，具体逻辑在 DubboBootstrapApplicationListener 这个 Spring Context 监听器中，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DubboBootstrapApplicationListener</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OneTimeExecutionApplicationContextEventListener</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ordered</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DubboBootstrap dubboBootstrap;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DubboBootstrapApplicationListener</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化DubboBootstrap对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dubboBootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DubboBootstrap.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onApplicationContextEvent</span><span style="color:#E1E4E8;">(ApplicationContextEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 监听ContextRefreshedEvent事件和ContextClosedEvent事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ContextRefreshedEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">onContextRefreshedEvent</span><span style="color:#E1E4E8;">((ContextRefreshedEvent) event);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ContextClosedEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">onContextClosedEvent</span><span style="color:#E1E4E8;">((ContextClosedEvent) event);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onContextRefreshedEvent</span><span style="color:#E1E4E8;">(ContextRefreshedEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        dubboBootstrap.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动DubboBootstrap</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onContextClosedEvent</span><span style="color:#E1E4E8;">(ContextClosedEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        dubboBootstrap.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOrder</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LOWEST_PRECEDENCE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DubboBootstrapApplicationListener</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OneTimeExecutionApplicationContextEventListener</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ordered</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DubboBootstrap dubboBootstrap;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DubboBootstrapApplicationListener</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化DubboBootstrap对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dubboBootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DubboBootstrap.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onApplicationContextEvent</span><span style="color:#24292E;">(ApplicationContextEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 监听ContextRefreshedEvent事件和ContextClosedEvent事件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ContextRefreshedEvent) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">onContextRefreshedEvent</span><span style="color:#24292E;">((ContextRefreshedEvent) event);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ContextClosedEvent) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">onContextClosedEvent</span><span style="color:#24292E;">((ContextClosedEvent) event);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onContextRefreshedEvent</span><span style="color:#24292E;">(ContextRefreshedEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        dubboBootstrap.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动DubboBootstrap</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onContextClosedEvent</span><span style="color:#24292E;">(ContextClosedEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        dubboBootstrap.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOrder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LOWEST_PRECEDENCE;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们重点关注的是<strong>exportServices() 方法，它是服务发布核心逻辑的入口</strong>，其中每一个服务接口都会转换为对应的 ServiceConfig 实例，然后通过代理的方式转换成 Invoker，最终转换成 Exporter 进行发布。服务发布流程中涉及的核心对象转换，如下图所示：</p>`,8),y=l(`<p>服务发布核心流程图</p><p>exportServices() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exportServices</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从配置管理器中获取到所有的要暴露的服务配置，一个接口类对应一个ServiceConfigBase实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    configManager.</span><span style="color:#B392F0;">getServices</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(sc </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServiceConfig serviceConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ServiceConfig) sc;</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setBootstrap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (exportAsync) { </span><span style="color:#6A737D;">// 异步模式，获取一个线程池来异步执行服务发布逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">            ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executorRepository.</span><span style="color:#B392F0;">getServiceExporterExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            Future&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executor.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                sc.</span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                exportedServices.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sc);</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 记录异步发布的Future</span></span>
<span class="line"><span style="color:#E1E4E8;">            asyncExportingFutures.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(future);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">// 同步发布</span></span>
<span class="line"><span style="color:#E1E4E8;">            sc.</span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            exportedServices.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sc);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exportServices</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从配置管理器中获取到所有的要暴露的服务配置，一个接口类对应一个ServiceConfigBase实例</span></span>
<span class="line"><span style="color:#24292E;">    configManager.</span><span style="color:#6F42C1;">getServices</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(sc </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ServiceConfig serviceConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ServiceConfig) sc;</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setBootstrap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (exportAsync) { </span><span style="color:#6A737D;">// 异步模式，获取一个线程池来异步执行服务发布逻辑</span></span>
<span class="line"><span style="color:#24292E;">            ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> executorRepository.</span><span style="color:#6F42C1;">getServiceExporterExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            Future&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> executor.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                sc.</span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                exportedServices.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sc);</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 记录异步发布的Future</span></span>
<span class="line"><span style="color:#24292E;">            asyncExportingFutures.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(future);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">// 同步发布</span></span>
<span class="line"><span style="color:#24292E;">            sc.</span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            exportedServices.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sc);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="serviceconfig" tabindex="-1">ServiceConfig <a class="header-anchor" href="#serviceconfig" aria-label="Permalink to &quot;ServiceConfig&quot;">​</a></h3><p>在 ServiceConfig.export() 方法中，服务发布的第一步是检查参数，第二步会根据当前配置决定是延迟发布还是立即调用 doExport() 方法进行发布，第三步会通过 exported() 方法回调相关监听器，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">shouldExport</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bootstrap </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        bootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DubboBootstrap.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        bootstrap.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查并更新各项配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">checkAndUpdateSubConfigs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 初始化元数据相关服务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">shouldDelay</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 延迟发布</span></span>
<span class="line"><span style="color:#E1E4E8;">        DELAY_EXPORT_EXECUTOR.</span><span style="color:#B392F0;">schedule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">doExport, </span><span style="color:#B392F0;">getDelay</span><span style="color:#E1E4E8;">(), TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 立即发布</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doExport</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">exported</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 回调监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">shouldExport</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bootstrap </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DubboBootstrap.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        bootstrap.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查并更新各项配置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkAndUpdateSubConfigs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 初始化元数据相关服务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">shouldDelay</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 延迟发布</span></span>
<span class="line"><span style="color:#24292E;">        DELAY_EXPORT_EXECUTOR.</span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">doExport, </span><span style="color:#6F42C1;">getDelay</span><span style="color:#24292E;">(), TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 立即发布</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doExport</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">exported</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 回调监听器</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 checkAndUpdateSubConfigs() 方法中，会去检查各项配置是否合理，并补齐一些缺省的配置信息，这个方法非常冗长，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>完成配置的检查之后，再来看 doExport() 方法，其中首先调用 loadRegistries() 方法加载注册中心信息，即将 RegistryConfig 配置解析成 registryUrl。无论是使用 XML、Annotation，还是 API 配置方式，都可以配置多个注册中心地址，一个服务接口可以同时注册在多个不同的注册中心。</p><p>RegistryConfig 是 Dubbo 的多个配置对象之一，可以通过解析 XML、Annotation 中注册中心相关的配置得到，对应的配置如下（当然，也可以直接通过 API 创建得到）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">registry address</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;"> protocol</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;zookeeper&quot;</span><span style="color:#E1E4E8;"> port</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;2181&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">registry address</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;zookeeper://127.0.0.1:2181&quot;</span><span style="color:#24292E;"> protocol</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;zookeeper&quot;</span><span style="color:#24292E;"> port</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;2181&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span></code></pre></div><p>RegistryUrl 的格式大致如下（为了方便查看，这里将每个 URL 参数单独放在一行中展示）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// path是Zookeeper的地址</span></span>
<span class="line"><span style="color:#E1E4E8;">registry</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?</span></span>
<span class="line"><span style="color:#E1E4E8;">application</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">api</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9405</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">registry</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">zookeeper </span><span style="color:#6A737D;">// 使用的注册中心是Zookeeper</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">timestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1600307343086</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// path是Zookeeper的地址</span></span>
<span class="line"><span style="color:#24292E;">registry</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?</span></span>
<span class="line"><span style="color:#24292E;">application</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">api</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9405</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">registry</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">zookeeper </span><span style="color:#6A737D;">// 使用的注册中心是Zookeeper</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">timestamp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1600307343086</span></span></code></pre></div><p>加载注册中心信息得到 RegistryUrl 之后，会遍历所有的 ProtocolConfig，依次调用 doExportUrlsFor1Protocol(protocolConfig, registryURLs) 在每个注册中心发布服务。一个服务接口可以以多种协议进行发布，每种协议都对应一个 ProtocolConfig，例如我们在 Demo 示例中，只使用了 dubbo 协议，对应的配置是：<code>&lt;dubbo:protocol name=&quot;dubbo&quot; /&gt;</code>。</p><h3 id="组装服务-url" tabindex="-1">组装服务 URL <a class="header-anchor" href="#组装服务-url" aria-label="Permalink to &quot;组装服务 URL&quot;">​</a></h3><p>doExportUrlsFor1Protocol() 方法的代码非常长，这里我们分成两个部分进行介绍：一部分是组装服务的 URL，另一部分就是后面紧接着介绍的服务发布。</p><p><strong>组装服务的 URL</strong>核心步骤有如下 7 步。</p><ol><li><p>获取此次发布使用的协议，默认使用 dubbo 协议。</p></li><li><p>设置服务 URL 中的参数，这里会从 MetricsConfig、ApplicationConfig、ModuleConfig、ProviderConfig、ProtocolConfig 中获取配置信息，并作为参数添加到 URL 中。这里调用的 appendParameters() 方法会将 AbstractConfig 中的配置信息存储到 Map 集合中，后续在构造 URL 的时候，会将该集合中的 KV 作为 URL 的参数。</p></li><li><p>解析指定方法的 MethodConfig 配置以及方法参数的 ArgumentConfig 配置，得到的配置信息也是记录到 Map 集合中，后续作为 URL 参数。</p></li><li><p>根据此次调用是泛化调用还是普通调用，向 Map 集合中添加不同的键值对。</p></li><li><p>获取 token 配置，并添加到 Map 集合中，默认随机生成 UUID。</p></li><li><p>获取 host、port 值，并开始组装服务的 URL。</p></li><li><p>根据 Configurator 覆盖或新增 URL 参数。</p></li></ol><p>下面是 doExportUrlsFor1Protocol() 方法组装 URL 的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doExportUrlsFor1Protocol</span><span style="color:#E1E4E8;">(ProtocolConfig protocolConfig, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> registryURLs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> protocolConfig.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取协议名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(name)) { </span><span style="color:#6A737D;">// 默认使用Dubbo协议</span></span>
<span class="line"><span style="color:#E1E4E8;">        name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DUBBO;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(); </span><span style="color:#6A737D;">// 记录URL的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(SIDE_KEY, PROVIDER_SIDE); </span><span style="color:#6A737D;">// side参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加URL参数，例如Dubbo版本、时间戳、当前PID等</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceConfig.</span><span style="color:#B392F0;">appendRuntimeParameters</span><span style="color:#E1E4E8;">(map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 下面会从各个Config获取参数，例如，application、interface参数等</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractConfig.</span><span style="color:#B392F0;">appendParameters</span><span style="color:#E1E4E8;">(map, </span><span style="color:#B392F0;">getMetrics</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractConfig.</span><span style="color:#B392F0;">appendParameters</span><span style="color:#E1E4E8;">(map, </span><span style="color:#B392F0;">getApplication</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractConfig.</span><span style="color:#B392F0;">appendParameters</span><span style="color:#E1E4E8;">(map, </span><span style="color:#B392F0;">getModule</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractConfig.</span><span style="color:#B392F0;">appendParameters</span><span style="color:#E1E4E8;">(map, provider);</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractConfig.</span><span style="color:#B392F0;">appendParameters</span><span style="color:#E1E4E8;">(map, protocolConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractConfig.</span><span style="color:#B392F0;">appendParameters</span><span style="color:#E1E4E8;">(map, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    MetadataReportConfig metadataReportConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMetadataReportConfig</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (metadataReportConfig </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> metadataReportConfig.</span><span style="color:#B392F0;">isValid</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(METADATA_KEY, REMOTE_METADATA_STORAGE_TYPE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">())) { </span><span style="color:#6A737D;">// 从MethodConfig中获取URL参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (MethodConfig method </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            AbstractConfig.</span><span style="color:#B392F0;">appendParameters</span><span style="color:#E1E4E8;">(map, method, method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            String retryKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.retry&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (map.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(retryKey)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                String retryValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(retryKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(retryValue)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.retries&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">ArgumentConfig</span><span style="color:#E1E4E8;">&gt; arguments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getArguments</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(arguments)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ArgumentConfig argument </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> arguments) { </span><span style="color:#6A737D;">// 从ArgumentConfig中获取URL参数</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ... ...</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ProtocolUtils.</span><span style="color:#B392F0;">isGeneric</span><span style="color:#E1E4E8;">(generic)) { </span><span style="color:#6A737D;">// 根据generic是否为true，向map中添加不同的信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(GENERIC_KEY, generic);</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(METHODS_KEY, ANY_VALUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Version.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">(interfaceClass, version);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (revision </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> revision.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(REVISION_KEY, revision);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Wrapper.</span><span style="color:#B392F0;">getWrapper</span><span style="color:#E1E4E8;">(interfaceClass).</span><span style="color:#B392F0;">getMethodNames</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (methods.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(METHODS_KEY, ANY_VALUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 添加method参数</span></span>
<span class="line"><span style="color:#E1E4E8;">            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(METHODS_KEY, StringUtils.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(methods)), </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加token到map集合中，默认随机生成UUID</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(ConfigUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(token) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> provider </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> provider.</span><span style="color:#B392F0;">getToken</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ConfigUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(token)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ConfigUtils.</span><span style="color:#B392F0;">isDefault</span><span style="color:#E1E4E8;">(token)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(TOKEN_KEY, UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(TOKEN_KEY, token);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将map数据放入serviceMetadata中，这与元数据相关，后面再详细介绍其作用</span></span>
<span class="line"><span style="color:#E1E4E8;">    serviceMetadata.</span><span style="color:#B392F0;">getAttachments</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取host、port值</span></span>
<span class="line"><span style="color:#E1E4E8;">    String host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findConfigedHosts</span><span style="color:#E1E4E8;">(protocolConfig, registryURLs, map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findConfigedPorts</span><span style="color:#E1E4E8;">(protocolConfig, name, map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据上面获取的host、port以及前文获取的map集合组装URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(name, host, port, </span><span style="color:#B392F0;">getContextPath</span><span style="color:#E1E4E8;">(protocolConfig).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path).</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(path), map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过Configurator覆盖或添加新的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(ConfiguratorFactory.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">hasExtension</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(ConfiguratorFactory.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getConfigurator</span><span style="color:#E1E4E8;">(url).</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doExportUrlsFor1Protocol</span><span style="color:#24292E;">(ProtocolConfig protocolConfig, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> registryURLs) {</span></span>
<span class="line"><span style="color:#24292E;">    String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> protocolConfig.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取协议名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(name)) { </span><span style="color:#6A737D;">// 默认使用Dubbo协议</span></span>
<span class="line"><span style="color:#24292E;">        name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DUBBO;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(); </span><span style="color:#6A737D;">// 记录URL的参数</span></span>
<span class="line"><span style="color:#24292E;">    map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(SIDE_KEY, PROVIDER_SIDE); </span><span style="color:#6A737D;">// side参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加URL参数，例如Dubbo版本、时间戳、当前PID等</span></span>
<span class="line"><span style="color:#24292E;">    ServiceConfig.</span><span style="color:#6F42C1;">appendRuntimeParameters</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 下面会从各个Config获取参数，例如，application、interface参数等</span></span>
<span class="line"><span style="color:#24292E;">    AbstractConfig.</span><span style="color:#6F42C1;">appendParameters</span><span style="color:#24292E;">(map, </span><span style="color:#6F42C1;">getMetrics</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    AbstractConfig.</span><span style="color:#6F42C1;">appendParameters</span><span style="color:#24292E;">(map, </span><span style="color:#6F42C1;">getApplication</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    AbstractConfig.</span><span style="color:#6F42C1;">appendParameters</span><span style="color:#24292E;">(map, </span><span style="color:#6F42C1;">getModule</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    AbstractConfig.</span><span style="color:#6F42C1;">appendParameters</span><span style="color:#24292E;">(map, provider);</span></span>
<span class="line"><span style="color:#24292E;">    AbstractConfig.</span><span style="color:#6F42C1;">appendParameters</span><span style="color:#24292E;">(map, protocolConfig);</span></span>
<span class="line"><span style="color:#24292E;">    AbstractConfig.</span><span style="color:#6F42C1;">appendParameters</span><span style="color:#24292E;">(map, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    MetadataReportConfig metadataReportConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMetadataReportConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (metadataReportConfig </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> metadataReportConfig.</span><span style="color:#6F42C1;">isValid</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(METADATA_KEY, REMOTE_METADATA_STORAGE_TYPE);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">())) { </span><span style="color:#6A737D;">// 从MethodConfig中获取URL参数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (MethodConfig method </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            AbstractConfig.</span><span style="color:#6F42C1;">appendParameters</span><span style="color:#24292E;">(map, method, method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            String retryKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.retry&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (map.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(retryKey)) {</span></span>
<span class="line"><span style="color:#24292E;">                String retryValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(retryKey);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(retryValue)) {</span></span>
<span class="line"><span style="color:#24292E;">                    map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.retries&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">ArgumentConfig</span><span style="color:#24292E;">&gt; arguments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getArguments</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(arguments)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ArgumentConfig argument </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> arguments) { </span><span style="color:#6A737D;">// 从ArgumentConfig中获取URL参数</span></span>
<span class="line"><span style="color:#24292E;">                    ... ...</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ProtocolUtils.</span><span style="color:#6F42C1;">isGeneric</span><span style="color:#24292E;">(generic)) { </span><span style="color:#6A737D;">// 根据generic是否为true，向map中添加不同的信息</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(GENERIC_KEY, generic);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(METHODS_KEY, ANY_VALUE);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        String revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Version.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">(interfaceClass, version);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (revision </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> revision.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(REVISION_KEY, revision);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Wrapper.</span><span style="color:#6F42C1;">getWrapper</span><span style="color:#24292E;">(interfaceClass).</span><span style="color:#6F42C1;">getMethodNames</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (methods.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(METHODS_KEY, ANY_VALUE);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 添加method参数</span></span>
<span class="line"><span style="color:#24292E;">            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(METHODS_KEY, StringUtils.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(methods)), </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加token到map集合中，默认随机生成UUID</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ConfigUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(token) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> provider </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> provider.</span><span style="color:#6F42C1;">getToken</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ConfigUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(token)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ConfigUtils.</span><span style="color:#6F42C1;">isDefault</span><span style="color:#24292E;">(token)) {</span></span>
<span class="line"><span style="color:#24292E;">            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(TOKEN_KEY, UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(TOKEN_KEY, token);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将map数据放入serviceMetadata中，这与元数据相关，后面再详细介绍其作用</span></span>
<span class="line"><span style="color:#24292E;">    serviceMetadata.</span><span style="color:#6F42C1;">getAttachments</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取host、port值</span></span>
<span class="line"><span style="color:#24292E;">    String host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findConfigedHosts</span><span style="color:#24292E;">(protocolConfig, registryURLs, map);</span></span>
<span class="line"><span style="color:#24292E;">    Integer port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findConfigedPorts</span><span style="color:#24292E;">(protocolConfig, name, map);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据上面获取的host、port以及前文获取的map集合组装URL</span></span>
<span class="line"><span style="color:#24292E;">    URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(name, host, port, </span><span style="color:#6F42C1;">getContextPath</span><span style="color:#24292E;">(protocolConfig).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(path), map);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过Configurator覆盖或添加新的参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(ConfiguratorFactory.class)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">hasExtension</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(ConfiguratorFactory.class)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getConfigurator</span><span style="color:#24292E;">(url).</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>经过上述准备操作之后，得到的服务 URL 如下所示（为了方便查看，这里将每个 URL 参数单独放在一行中展示）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//172.17.108.185:20880/org.apache.dubbo.demo.DemoService?</span></span>
<span class="line"><span style="color:#E1E4E8;">anyhost</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">application</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">api</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">bind.ip</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">172.17</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">108</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">185</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">bind.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20880</span></span>
<span class="line"><span style="color:#F97583;">&amp;default=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">deprecated</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">dynamic</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">generic</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">interface</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.demo.DemoService</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sayHello,sayHelloAsync</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3918</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">release</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">side</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">timestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1600437404483</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//172.17.108.185:20880/org.apache.dubbo.demo.DemoService?</span></span>
<span class="line"><span style="color:#24292E;">anyhost</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">application</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">api</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">bind.ip</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">172.17</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">108</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">185</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">bind.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20880</span></span>
<span class="line"><span style="color:#D73A49;">&amp;default=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">deprecated</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">dynamic</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">generic</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">interface</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.demo.DemoService</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sayHello,sayHelloAsync</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3918</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">release</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">side</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">timestamp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1600437404483</span></span></code></pre></div><h3 id="服务发布入口" tabindex="-1">服务发布入口 <a class="header-anchor" href="#服务发布入口" aria-label="Permalink to &quot;服务发布入口&quot;">​</a></h3><p>完成了服务 URL 的组装之后，doExportUrlsFor1Protocol() 方法开始执行服务发布。服务发布可以分为<strong>远程发布</strong> 和<strong>本地发布</strong>，具体发布方式与服务 URL 中的 scope 参数有关。</p><p>scope 参数有三个可选值，分别是 none、remote 和 local，分别代表不发布、发布到本地和发布到远端注册中心，从下面介绍的 doExportUrlsFor1Protocol() 方法代码中可以看到：</p><ul><li><p>发布到本地的条件是 scope != remote；</p></li><li><p>发布到注册中心的条件是 scope != local。</p></li></ul><p><strong>scope 参数的默认值为 null</strong>，也就是说，默认会同时在本地和注册中心发布该服务。下面来看 doExportUrlsFor1Protocol() 方法中发布服务的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doExportUrlsFor1Protocol</span><span style="color:#E1E4E8;">(ProtocolConfig protocolConfig, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> registryURLs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span><span style="color:#6A737D;">// 省略组装服务URL的过程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从URL中获取scope参数，其中可选值有none、remote、local三个，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 分别代表不发布、发布到本地以及发布到远端，具体含义在下面一一介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">    String scope </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SCOPE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">SCOPE_NONE.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(scope)) { </span><span style="color:#6A737D;">//  scope不为none，才进行发布</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">SCOPE_REMOTE.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(scope)) {</span><span style="color:#6A737D;">// 发布到本地</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">exportLocal</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">SCOPE_LOCAL.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(scope)) { </span><span style="color:#6A737D;">// 发布到远端的注册中心</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(registryURLs)) { </span><span style="color:#6A737D;">// 当前配置了至少一个注册中心</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (URL registryURL </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> registryURLs) { </span><span style="color:#6A737D;">// 向每个注册中心发布服务</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// injvm协议只在exportLocal()中有用，不会将服务发布到注册中心</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 所以这里忽略injvm协议</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (LOCAL_PROTOCOL.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">())){</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 设置服务URL的dynamic参数</span></span>
<span class="line"><span style="color:#E1E4E8;">                    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">addParameterIfAbsent</span><span style="color:#E1E4E8;">(DYNAMIC_KEY, registryURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(DYNAMIC_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 创建monitorUrl，并作为monitor参数添加到服务URL中</span></span>
<span class="line"><span style="color:#E1E4E8;">                    URL monitorUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigValidationUtils.</span><span style="color:#B392F0;">loadMonitor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, registryURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (monitorUrl </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">addParameterAndEncoded</span><span style="color:#E1E4E8;">(MONITOR_KEY, monitorUrl.</span><span style="color:#B392F0;">toFullString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 设置服务URL的proxy参数，即生成动态代理方式(jdk或是javassist)，作为参数添加到RegistryURL中</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(PROXY_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(proxy)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        registryURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registryURL.</span><span style="color:#B392F0;">addParameter</span><span style="color:#E1E4E8;">(PROXY_KEY, proxy);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 为服务实现类的对象创建相应的Invoker，getInvoker()方法的第三个参数中，会将服务URL作为export参数添加到RegistryURL中</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 这里的PROXY_FACTORY是ProxyFactory接口的适配器</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROXY_FACTORY.</span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(ref, (Class) interfaceClass, registryURL.</span><span style="color:#B392F0;">addParameterAndEncoded</span><span style="color:#E1E4E8;">(EXPORT_KEY, url.</span><span style="color:#B392F0;">toFullString</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// DelegateProviderMetaDataInvoker是个装饰类，将当前ServiceConfig和Invoker关联起来而已，invoke()方法透传给底层Invoker对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                    DelegateProviderMetaDataInvoker wrapperInvoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DelegateProviderMetaDataInvoker</span><span style="color:#E1E4E8;">(invoker, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 调用Protocol实现，进行发布</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 这里的PROTOCOL是Protocol接口的适配器</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Exporter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; exporter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROTOCOL.</span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">(wrapperInvoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    exporters.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(exporter);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 不存在注册中心，仅发布服务，不会将服务信息发布到注册中心。Consumer没法在注册中心找到该服务的信息，但是可以直连</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 具体的发布过程与上面的过程类似，只不过不会发布到注册中心</span></span>
<span class="line"><span style="color:#E1E4E8;">                Invoker&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; invoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROXY_FACTORY.</span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(ref, (Class) interfaceClass, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">                DelegateProviderMetaDataInvoker wrapperInvoker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DelegateProviderMetaDataInvoker</span><span style="color:#E1E4E8;">(invoker, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                Exporter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; exporter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROTOCOL.</span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">(wrapperInvoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">                exporters.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(exporter);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 元数据相关操作</span></span>
<span class="line"><span style="color:#E1E4E8;">            WritableMetadataService metadataService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WritableMetadataService.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(METADATA_KEY, DEFAULT_METADATA_STORAGE_TYPE));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (metadataService </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                metadataService.</span><span style="color:#B392F0;">publishServiceDefinition</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.urls.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doExportUrlsFor1Protocol</span><span style="color:#24292E;">(ProtocolConfig protocolConfig, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> registryURLs) {</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span><span style="color:#6A737D;">// 省略组装服务URL的过程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从URL中获取scope参数，其中可选值有none、remote、local三个，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 分别代表不发布、发布到本地以及发布到远端，具体含义在下面一一介绍</span></span>
<span class="line"><span style="color:#24292E;">    String scope </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SCOPE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">SCOPE_NONE.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(scope)) { </span><span style="color:#6A737D;">//  scope不为none，才进行发布</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">SCOPE_REMOTE.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(scope)) {</span><span style="color:#6A737D;">// 发布到本地</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">exportLocal</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">SCOPE_LOCAL.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(scope)) { </span><span style="color:#6A737D;">// 发布到远端的注册中心</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(registryURLs)) { </span><span style="color:#6A737D;">// 当前配置了至少一个注册中心</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (URL registryURL </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> registryURLs) { </span><span style="color:#6A737D;">// 向每个注册中心发布服务</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// injvm协议只在exportLocal()中有用，不会将服务发布到注册中心</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 所以这里忽略injvm协议</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (LOCAL_PROTOCOL.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">())){</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 设置服务URL的dynamic参数</span></span>
<span class="line"><span style="color:#24292E;">                    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">addParameterIfAbsent</span><span style="color:#24292E;">(DYNAMIC_KEY, registryURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(DYNAMIC_KEY));</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 创建monitorUrl，并作为monitor参数添加到服务URL中</span></span>
<span class="line"><span style="color:#24292E;">                    URL monitorUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigValidationUtils.</span><span style="color:#6F42C1;">loadMonitor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, registryURL);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (monitorUrl </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">addParameterAndEncoded</span><span style="color:#24292E;">(MONITOR_KEY, monitorUrl.</span><span style="color:#6F42C1;">toFullString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 设置服务URL的proxy参数，即生成动态代理方式(jdk或是javassist)，作为参数添加到RegistryURL中</span></span>
<span class="line"><span style="color:#24292E;">                    String proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(PROXY_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(proxy)) {</span></span>
<span class="line"><span style="color:#24292E;">                        registryURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registryURL.</span><span style="color:#6F42C1;">addParameter</span><span style="color:#24292E;">(PROXY_KEY, proxy);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 为服务实现类的对象创建相应的Invoker，getInvoker()方法的第三个参数中，会将服务URL作为export参数添加到RegistryURL中</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 这里的PROXY_FACTORY是ProxyFactory接口的适配器</span></span>
<span class="line"><span style="color:#24292E;">                    Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROXY_FACTORY.</span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(ref, (Class) interfaceClass, registryURL.</span><span style="color:#6F42C1;">addParameterAndEncoded</span><span style="color:#24292E;">(EXPORT_KEY, url.</span><span style="color:#6F42C1;">toFullString</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// DelegateProviderMetaDataInvoker是个装饰类，将当前ServiceConfig和Invoker关联起来而已，invoke()方法透传给底层Invoker对象</span></span>
<span class="line"><span style="color:#24292E;">                    DelegateProviderMetaDataInvoker wrapperInvoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DelegateProviderMetaDataInvoker</span><span style="color:#24292E;">(invoker, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 调用Protocol实现，进行发布</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 这里的PROTOCOL是Protocol接口的适配器</span></span>
<span class="line"><span style="color:#24292E;">                    Exporter&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; exporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROTOCOL.</span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">(wrapperInvoker);</span></span>
<span class="line"><span style="color:#24292E;">                    exporters.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(exporter);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 不存在注册中心，仅发布服务，不会将服务信息发布到注册中心。Consumer没法在注册中心找到该服务的信息，但是可以直连</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 具体的发布过程与上面的过程类似，只不过不会发布到注册中心</span></span>
<span class="line"><span style="color:#24292E;">                Invoker&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; invoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROXY_FACTORY.</span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(ref, (Class) interfaceClass, url);</span></span>
<span class="line"><span style="color:#24292E;">                DelegateProviderMetaDataInvoker wrapperInvoker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DelegateProviderMetaDataInvoker</span><span style="color:#24292E;">(invoker, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                Exporter&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; exporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROTOCOL.</span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">(wrapperInvoker);</span></span>
<span class="line"><span style="color:#24292E;">                exporters.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(exporter);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 元数据相关操作</span></span>
<span class="line"><span style="color:#24292E;">            WritableMetadataService metadataService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WritableMetadataService.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(METADATA_KEY, DEFAULT_METADATA_STORAGE_TYPE));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (metadataService </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                metadataService.</span><span style="color:#6F42C1;">publishServiceDefinition</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.urls.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="本地发布" tabindex="-1">本地发布 <a class="header-anchor" href="#本地发布" aria-label="Permalink to &quot;本地发布&quot;">​</a></h3><p>了解了本地发布、远程发布的入口逻辑之后，下面我们开始深入本地发布的逻辑。</p><p>在 exportLocal() 方法中，会将 Protocol 替换成 injvm 协议，将 host 设置成 127.0.0.1，将 port 设置为 0，得到新的 LocalURL，大致如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">injvm</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1/org.apache.dubbo.demo.DemoService?anyhost=true</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">application</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">api</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">bind.ip</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">172.17</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">108</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">185</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">bind.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20880</span></span>
<span class="line"><span style="color:#F97583;">&amp;default=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">deprecated</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">dynamic</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">generic</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">interface</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.demo.DemoService</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sayHello,sayHelloAsync</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4249</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">release</span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">side</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">provider</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">timestamp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1600440074214</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">injvm</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1/org.apache.dubbo.demo.DemoService?anyhost=true</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">application</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">api</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">bind.ip</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">172.17</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">108</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">185</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">bind.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20880</span></span>
<span class="line"><span style="color:#D73A49;">&amp;default=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">deprecated</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">dynamic</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">generic</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">interface</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.demo.DemoService</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sayHello,sayHelloAsync</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4249</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">release</span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">side</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">provider</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">timestamp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1600440074214</span></span></code></pre></div><p>之后，会通过 ProxyFactory 接口适配器找到对应的 ProxyFactory 实现（默认使用 JavassistProxyFactory），并调用 getInvoker() 方法创建 Invoker 对象；最后，通过 Protocol 接口的适配器查找到 InjvmProtocol 实现，并调用 export() 方法进行发布。 exportLocal() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exportLocal</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL local </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URLBuilder.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(url) </span><span style="color:#6A737D;">// 创建新URL</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(LOCAL_PROTOCOL)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setHost</span><span style="color:#E1E4E8;">(LOCALHOST_VALUE)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 本地发布</span></span>
<span class="line"><span style="color:#E1E4E8;">    Exporter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; exporter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PROTOCOL.</span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            PROXY_FACTORY.</span><span style="color:#B392F0;">getInvoker</span><span style="color:#E1E4E8;">(ref, (Class) interfaceClass, local));</span></span>
<span class="line"><span style="color:#E1E4E8;">    exporters.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(exporter);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exportLocal</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    URL local </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> URLBuilder.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(url) </span><span style="color:#6A737D;">// 创建新URL</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(LOCAL_PROTOCOL)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setHost</span><span style="color:#24292E;">(LOCALHOST_VALUE)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 本地发布</span></span>
<span class="line"><span style="color:#24292E;">    Exporter&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; exporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PROTOCOL.</span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            PROXY_FACTORY.</span><span style="color:#6F42C1;">getInvoker</span><span style="color:#24292E;">(ref, (Class) interfaceClass, local));</span></span>
<span class="line"><span style="color:#24292E;">    exporters.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(exporter);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>InjvmProtocol 的相关实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><h3 id="远程发布" tabindex="-1">远程发布 <a class="header-anchor" href="#远程发布" aria-label="Permalink to &quot;远程发布&quot;">​</a></h3><p>介绍完本地发布之后，我们再来看远程发布的核心逻辑，远程服务发布的流程相较本地发布流程，要复杂得多。</p><p>在 doExportUrlsFor1Protocol() 方法中，远程发布服务时，会遍历全部 RegistryURL，并根据 RegistryURL 选择对应的 Protocol 扩展实现进行发布。我们知道 RegistryURL 是 &quot;registry://&quot; 协议，所以这里使用的是 RegistryProtocol 实现。</p><p>下面来看 RegistryProtocol.export() 方法的核心流程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Exporter</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> originInvoker) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将&quot;registry://&quot;协议转换成&quot;zookeeper://&quot;协议</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL registryUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRegistryUrl</span><span style="color:#E1E4E8;">(originInvoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取export参数，其中存储了一个&quot;dubbo://&quot;协议的ProviderURL</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL providerUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getProviderUrl</span><span style="color:#E1E4E8;">(originInvoker);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取要监听的配置目录，这里会在ProviderURL的基础上添加category=configurators参数，并封装成对OverrideListener记录到overrideListeners集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> URL overrideSubscribeUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSubscribedOverrideUrl</span><span style="color:#E1E4E8;">(providerUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> OverrideListener overrideSubscribeListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OverrideListener</span><span style="color:#E1E4E8;">(overrideSubscribeUrl, originInvoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">    overrideListeners.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(overrideSubscribeUrl, overrideSubscribeListener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化时会检测一次Override配置，重写ProviderURL</span></span>
<span class="line"><span style="color:#E1E4E8;">    providerUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">overrideUrlWithConfig</span><span style="color:#E1E4E8;">(providerUrl, overrideSubscribeListener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 导出服务，底层会通过执行DubboProtocol.export()方法，启动对应的Server</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ExporterChangeableWrapper&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; exporter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doLocalExport</span><span style="color:#E1E4E8;">(originInvoker, providerUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据RegistryURL获取对应的注册中心Registry对象，其中会依赖之前课时介绍的RegistryFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Registry registry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRegistry</span><span style="color:#E1E4E8;">(originInvoker);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取将要发布到注册中心上的Provider URL，其中会删除一些多余的参数信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> URL registeredProviderUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUrlToRegistry</span><span style="color:#E1E4E8;">(providerUrl, registryUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据register参数值决定是否注册服务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> register </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> providerUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(REGISTER_KEY, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (register) { </span><span style="color:#6A737D;">// 调用Registry.register()方法将registeredProviderUrl发布到注册中心</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(registryUrl, registeredProviderUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将Provider相关信息记录到的ProviderModel中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">registerStatedUrl</span><span style="color:#E1E4E8;">(registryUrl, registeredProviderUrl, register);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 向注册中心进行订阅override数据，主要是监听该服务的configurators节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    registry.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(overrideSubscribeUrl, overrideSubscribeListener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    exporter.</span><span style="color:#B392F0;">setRegisterUrl</span><span style="color:#E1E4E8;">(registeredProviderUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    exporter.</span><span style="color:#B392F0;">setSubscribeUrl</span><span style="color:#E1E4E8;">(overrideSubscribeUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发RegistryProtocolListener监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">notifyExport</span><span style="color:#E1E4E8;">(exporter);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> DestroyableExporter&lt;&gt;(exporter);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Exporter</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> originInvoker) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将&quot;registry://&quot;协议转换成&quot;zookeeper://&quot;协议</span></span>
<span class="line"><span style="color:#24292E;">    URL registryUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRegistryUrl</span><span style="color:#24292E;">(originInvoker);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取export参数，其中存储了一个&quot;dubbo://&quot;协议的ProviderURL</span></span>
<span class="line"><span style="color:#24292E;">    URL providerUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getProviderUrl</span><span style="color:#24292E;">(originInvoker);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取要监听的配置目录，这里会在ProviderURL的基础上添加category=configurators参数，并封装成对OverrideListener记录到overrideListeners集合中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> URL overrideSubscribeUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSubscribedOverrideUrl</span><span style="color:#24292E;">(providerUrl);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> OverrideListener overrideSubscribeListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OverrideListener</span><span style="color:#24292E;">(overrideSubscribeUrl, originInvoker);</span></span>
<span class="line"><span style="color:#24292E;">    overrideListeners.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(overrideSubscribeUrl, overrideSubscribeListener);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化时会检测一次Override配置，重写ProviderURL</span></span>
<span class="line"><span style="color:#24292E;">    providerUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">overrideUrlWithConfig</span><span style="color:#24292E;">(providerUrl, overrideSubscribeListener);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 导出服务，底层会通过执行DubboProtocol.export()方法，启动对应的Server</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ExporterChangeableWrapper&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; exporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doLocalExport</span><span style="color:#24292E;">(originInvoker, providerUrl);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据RegistryURL获取对应的注册中心Registry对象，其中会依赖之前课时介绍的RegistryFactory</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Registry registry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRegistry</span><span style="color:#24292E;">(originInvoker);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取将要发布到注册中心上的Provider URL，其中会删除一些多余的参数信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> URL registeredProviderUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUrlToRegistry</span><span style="color:#24292E;">(providerUrl, registryUrl);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据register参数值决定是否注册服务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> register </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> providerUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(REGISTER_KEY, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (register) { </span><span style="color:#6A737D;">// 调用Registry.register()方法将registeredProviderUrl发布到注册中心</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(registryUrl, registeredProviderUrl);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将Provider相关信息记录到的ProviderModel中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">registerStatedUrl</span><span style="color:#24292E;">(registryUrl, registeredProviderUrl, register);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 向注册中心进行订阅override数据，主要是监听该服务的configurators节点</span></span>
<span class="line"><span style="color:#24292E;">    registry.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(overrideSubscribeUrl, overrideSubscribeListener);</span></span>
<span class="line"><span style="color:#24292E;">    exporter.</span><span style="color:#6F42C1;">setRegisterUrl</span><span style="color:#24292E;">(registeredProviderUrl);</span></span>
<span class="line"><span style="color:#24292E;">    exporter.</span><span style="color:#6F42C1;">setSubscribeUrl</span><span style="color:#24292E;">(overrideSubscribeUrl);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 触发RegistryProtocolListener监听器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">notifyExport</span><span style="color:#24292E;">(exporter);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> DestroyableExporter&lt;&gt;(exporter);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以看到，远程发布流程大致可分为下面 5 个步骤。</p><ol><li><p>准备 URL，比如 ProviderURL、RegistryURL 和 OverrideSubscribeUrl。</p></li><li><p>发布 Dubbo 服务。在 doLocalExport() 方法中调用 DubboProtocol.export() 方法启动 Provider 端底层 Server。</p></li><li><p>注册 Dubbo 服务。在 register() 方法中，调用 ZookeeperRegistry.register() 方法向 Zookeeper 注册服务。</p></li><li><p>订阅 Provider 端的 Override 配置。调用 ZookeeperRegistry.subscribe() 方法订阅注册中心 configurators 节点下的配置变更。</p></li><li><p>触发 RegistryProtocolListener 监听器。</p></li></ol><p>远程发布的详细流程如下图所示：</p>`,42),i=s("p",null,"服务发布详细流程图",-1),F=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),d=s("p",null,"本课时我们重点介绍了 Dubbo 服务发布的核心流程。",-1),g=s("p",null,"首先我们介绍了 DubboBootstrap 这个入口门面类中与服务发布相关的方法，重点是 start() 和 exportServices() 两个方法；然后详细介绍了 ServiceConfig 类的三个核心步骤：检查参数、立即（或延迟）执行 doExport() 方法进行发布、回调服务发布的相关监听器。",-1),A=s("p",null,[n("接下来，我们分析了"),s("strong",null,"doExportUrlsFor1Protocol() 方法，它是发布一个服务的入口，也是规定服务发布流程的地方"),n("，其中涉及 Provider URL 的组装、本地服务发布流程以及远程服务发布流程，对于这些步骤，我们都进行了详细的分析。")],-1),D=s("p",null,"下一课时，我们将继续分析 Dubbo 服务引用的全流程，记得按时来听课。",-1);function C(u,v,m,b,f,B){const a=e("Image");return t(),r("div",null,[E,p(a,{alt:"Lark20201215-163844.png",src:"https://s0.lgstatic.com/i/image/M00/89/79/Ciqc1F_YdkGABhTFAACpT-2oDtw867.png"}),n(),y,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/01/2C/CgpVE1_YNDaATl3fAAFcJTJOw3M699.png"}),n(),i,F,d,g,A,D])}const U=o(c,[["render",C]]);export{R as __pageData,U as default};
