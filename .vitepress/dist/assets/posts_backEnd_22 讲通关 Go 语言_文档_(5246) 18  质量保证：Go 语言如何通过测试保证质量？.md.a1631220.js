import{_ as p,j as l,o,g as e,k as a,h as c,Q as s}from"./chunks/framework.4e7d56ce.js";const u=JSON.parse('{"title":"单元测试 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5246) 18  质量保证：Go 语言如何通过测试保证质量？.md","filePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5246) 18  质量保证：Go 语言如何通过测试保证质量？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/22 讲通关 Go 语言_文档/(5246) 18  质量保证：Go 语言如何通过测试保证质量？.md"},r=s(`<p>从这节课开始，我会带你学习本专栏的第四模块：工程管理。现在项目的开发都不是一个人可以完成的，需要多人进行协作，那么在多人协作中如何保证代码的质量，你写的代码如何被其他人使用，如何优化代码的性能等， 就是第四模块的内容。</p><p>这一讲首先来学习 Go 语言的单元测试和基准测试。</p><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><p>在开发完一个功能后，你可能会直接把代码合并到代码库，用于上线或供其他人使用。但这样是不对的，因为你还没有对所写的代码进行测试。没有经过测试的代码逻辑可能会存在问题：如果强行合并到代码库，可能影响其他人的开发；如果强行上线，可能导致线上 Bug、影响用户使用。</p><h4 id="什么是单元测试" tabindex="-1">什么是单元测试 <a class="header-anchor" href="#什么是单元测试" aria-label="Permalink to &quot;什么是单元测试&quot;">​</a></h4><p>顾名思义，单元测试强调的是对单元进行测试。在开发中，一个单元可以是一个函数、一个模块等。一般情况下，你要测试的单元应该是一个完整的<strong>最小单元</strong>，比如 Go 语言的函数。这样的话，当每个最小单元都被验证通过，那么整个模块、甚至整个程序就都可以被验证通过。</p><p>单元测试由开发者自己编写，也就是谁改动了代码，谁就要编写相应的单元测试代码以验证本次改动的正确性。</p><h4 id="go-语言的单元测试" tabindex="-1">Go 语言的单元测试 <a class="header-anchor" href="#go-语言的单元测试" aria-label="Permalink to &quot;Go 语言的单元测试&quot;">​</a></h4><p>虽然每种编程语言里单元测试的概念是一样的，但它们对单元测试的设计不一样。Go 语言也有自己的单元测试规范，下面我会通过一个完整的示例为你讲解，这个例子就是经典的斐波那契数列。</p><p>斐波那契数列是一个经典的黄金分隔数列：它的第 0 项是 0；第 1 项是 1；从第 2 项开始，每一项都等于前两项之和。所以它的数列是：0、1、1、2、3、5、8、13、21......</p><blockquote><p>说明：为了便于总结后面的函数方程式，我这里特意写的从第 0 项开始，其实现实中没有第 0 项。</p></blockquote><p>根据以上规律，可以总结出它的函数方程式。</p><ol><li><p>F(0)=0</p></li><li><p>F(1)=1</p></li><li><p>F(n)=F(n - 1)+F(n - 2)</p></li></ol><p>有了函数方程式，再编写一个 Go 语言函数来计算斐波那契数列就比较简单了，代码如下：</p><p><em><strong>ch18/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fibonacci</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fibonacci</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>也就是通过递归的方式实现了斐波那契数列的计算。</p><p>Fibonacci 函数已经编写好了，可以供其他开发者使用，不过在使用之前，需要先对它进行单元测试。你需要新建一个 go 文件用于存放单元测试代码。刚刚编写的 Fibonacci 函数在<em>ch18/main.go</em> 文件中，那么对 Fibonacci 函数进行单元测试的代码需要放在<em>ch18/main_test.go</em>中*，*测试代码如下：</p><p><em><strong>ch18/main_test.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestFibonacci</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//预先定义的一组斐波那契数列作为测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span></span>
<span class="line"><span style="color:#E1E4E8;">   fsMap[</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">34</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> fsMap {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fib </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(k)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> fib {</span></span>
<span class="line"><span style="color:#E1E4E8;">         t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;结果正确:n为</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">,值为</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, k, fib)</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         t.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;结果错误：期望</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">,但是计算的值是</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, v, fib)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestFibonacci</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//预先定义的一组斐波那契数列作为测试用例</span></span>
<span class="line"><span style="color:#24292E;">   fsMap </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span></span>
<span class="line"><span style="color:#24292E;">   fsMap[</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">34</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> fsMap {</span></span>
<span class="line"><span style="color:#24292E;">      fib </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(k)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fib {</span></span>
<span class="line"><span style="color:#24292E;">         t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;结果正确:n为</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">,值为</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, k, fib)</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         t.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;结果错误：期望</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">,但是计算的值是</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, v, fib)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个单元测试中，我通过 map 预定义了一组测试用例，然后通过 Fibonacci 函数计算结果。同预定义的结果进行比较，如果相等，则说明 Fibonacci 函数计算正确，不相等则说明计算错误。</p><p>然后即可运行如下命令，进行单元测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch18</span></span></code></pre></div><p>这行命令会运行 ch18 目录下的所有单元测试，因为我只写了一个单元测试，所以可以看到结果如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch18</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">=== </span><span style="color:#9ECBFF;">RUN</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">TestFibonacci</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为0,值为0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为1,值为1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为6,值为8</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为8,值为21</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为9,值为34</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为2,值为1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为3,值为2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为4,值为3</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为5,值为5</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main_test.go:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">结果正确:n为7,值为13</span></span>
<span class="line"><span style="color:#B392F0;">---</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASS:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TestFibonacci</span><span style="color:#E1E4E8;"> (0.00s)</span></span>
<span class="line"><span style="color:#B392F0;">PASS</span></span>
<span class="line"><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">gotour/ch18</span><span style="color:#E1E4E8;">     (cached)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch18</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">=== </span><span style="color:#032F62;">RUN</span><span style="color:#24292E;">   </span><span style="color:#032F62;">TestFibonacci</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为0,值为0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为1,值为1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为6,值为8</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为8,值为21</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为9,值为34</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为2,值为1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为3,值为2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为4,值为3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为5,值为5</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main_test.go:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">结果正确:n为7,值为13</span></span>
<span class="line"><span style="color:#6F42C1;">---</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASS:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TestFibonacci</span><span style="color:#24292E;"> (0.00s)</span></span>
<span class="line"><span style="color:#6F42C1;">PASS</span></span>
<span class="line"><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">      </span><span style="color:#032F62;">gotour/ch18</span><span style="color:#24292E;">     (cached)</span></span></code></pre></div><p>在打印的测试结果中，你可以看到 PASS 标记，说明单元测试通过，而且还可以看到我在单元测试中写的日志。</p><p>这就是一个完整的 Go 语言单元测试用例，它是在 Go 语言提供的测试框架下完成的。Go 语言测试框架可以让我们很容易地进行单元测试，但是需要遵循五点规则。</p><ol><li><p>含有单元测试代码的 go 文件必须以 _test.go 结尾，Go 语言测试工具只认符合这个规则的文件。</p></li><li><p>单元测试文件名 _test.go 前面的部分最好是被测试的函数所在的 go 文件的文件名，比如以上示例中单元测试文件叫 main_test.go，因为测试的 Fibonacci 函数在 main.go 文件里。</p></li><li><p>单元测试的函数名必须以 Test 开头，是可导出的、公开的函数。</p></li><li><p>测试函数的签名必须接收一个指向 testing.T 类型的指针，并且不能返回任何值。</p></li><li><p>函数名最好是 Test + 要测试的函数名，比如例子中是 TestFibonacci，表示测试的是 Fibonacci 这个函数。</p></li></ol><p>遵循以上规则，你就可以很容易地编写单元测试了。单元测试的重点在于熟悉业务代码的逻辑、场景等，以便尽可能地全面测试，保障代码质量。</p>`,29),E=s(`<h4 id="单元测试覆盖率" tabindex="-1">单元测试覆盖率 <a class="header-anchor" href="#单元测试覆盖率" aria-label="Permalink to &quot;单元测试覆盖率&quot;">​</a></h4><p>以上示例中的 Fibonacci 函数是否被全面地测试了呢？这就需要用单元测试覆盖率进行检测了。</p><p>Go 语言提供了非常方便的命令来查看单元测试覆盖率。还是以 Fibonacci 函数的单元测试为例，通过一行命令即可查看它的单元测试覆盖率。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--coverprofile=ch18.cover</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--coverprofile=ch18.cover</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch18</span></span></code></pre></div><p>这行命令包括 --coverprofile 这个 Flag，它可以得到一个单元测试覆盖率文件，运行这行命令还可以同时看到测试覆盖率。Fibonacci 函数的测试覆盖率如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">PASS</span></span>
<span class="line"><span style="color:#B392F0;">coverage:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">85.7</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">statements</span></span>
<span class="line"><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">gotour/ch18</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">0.367</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">coverage:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">85.7</span><span style="color:#9ECBFF;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">statements</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">PASS</span></span>
<span class="line"><span style="color:#6F42C1;">coverage:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">85.7</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">statements</span></span>
<span class="line"><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">      </span><span style="color:#032F62;">gotour/ch18</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">0.367</span><span style="color:#032F62;">s</span><span style="color:#24292E;">  </span><span style="color:#032F62;">coverage:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">85.7</span><span style="color:#032F62;">%</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">statements</span></span></code></pre></div><p>可以看到，测试覆盖率为 85.7%。从这个数字来看，Fibonacci 函数应该没有被全面地测试，这时候就需要查看详细的单元测试覆盖率报告了。</p><p>运行如下命令，可以得到一个 HTML 格式的单元测试覆盖率报告：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">➜ go tool cover </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">html</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ch18.cover </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ch18.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">➜ go tool cover </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">html</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ch18.cover </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ch18.html</span></span></code></pre></div><p>命令运行后，会在当前目录下生成一个 ch18.html 文件，使用浏览器打开它，可以看到图中的内容：</p>`,10),y=s(`<p>单元测试覆盖率报告</p><p>红色标记的部分是没有测试到的，绿色标记的部分是已经测试到的。这就是单元测试覆盖率报告的好处，通过它你可以很容易地检测自己写的单元测试是否完全覆盖。</p><p>根据报告，我再修改一下单元测试，把没有覆盖的代码逻辑覆盖到，代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fsMap[</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fsMap[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>也就是说，由于图中 n&lt;0 的部分显示为红色，表示没有测试到，所以我们需要再添加一组测试用例，用于测试 n&lt;0 的情况。现在再运行这个单元测试，查看它的单元测试覆盖率，就会发现已经是 100% 了。</p><h3 id="基准测试" tabindex="-1">基准测试 <a class="header-anchor" href="#基准测试" aria-label="Permalink to &quot;基准测试&quot;">​</a></h3><p>除了需要保证我们编写的代码的逻辑正确外，有时候还有性能要求。那么如何衡量代码的性能呢？这就需要基准测试了。</p><h4 id="什么是基准测试" tabindex="-1">什么是基准测试 <a class="header-anchor" href="#什么是基准测试" aria-label="Permalink to &quot;什么是基准测试&quot;">​</a></h4><p>基准测试（Benchmark）是一项用于测量和评估软件性能指标的方法，主要用于评估你写的代码的性能。</p><h4 id="go-语言的基准测试" tabindex="-1">Go 语言的基准测试 <a class="header-anchor" href="#go-语言的基准测试" aria-label="Permalink to &quot;Go 语言的基准测试&quot;">​</a></h4><p>Go 语言的基准测试和单元测试规则基本一样，只是测试函数的命名规则不一样。现在还以 Fibonacci 函数为例，演示 Go 语言基准测试的使用。</p><p>Fibonacci 函数的基准测试代码如下：</p><p><em><strong>ch18/main_test.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BenchmarkFibonacci</span><span style="color:#E1E4E8;">(b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.B){</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">b.N;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BenchmarkFibonacci</span><span style="color:#24292E;">(b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.B){</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">b.N;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是一个非常简单的 Go 语言基准测试示例，它和单元测试的不同点如下：</p><ol><li><p>基准测试函数必须以 Benchmark 开头，必须是可导出的；</p></li><li><p>函数的签名必须接收一个指向 testing.B 类型的指针，并且不能返回任何值；</p></li><li><p>最后的 for 循环很重要，被测试的代码要放到循环里；</p></li><li><p>b.N 是基准测试框架提供的，表示循环的次数，因为需要反复调用测试的代码，才可以评估性能。</p></li></ol><p>写好了基准测试，就可以通过如下命令来测试 Fibonacci 函数的性能：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bench=.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch18</span></span>
<span class="line"><span style="color:#B392F0;">goos:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">darwin</span></span>
<span class="line"><span style="color:#B392F0;">goarch:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">amd64</span></span>
<span class="line"><span style="color:#B392F0;">pkg:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gotour/ch18</span></span>
<span class="line"><span style="color:#B392F0;">BenchmarkFibonacci-8</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">3461616</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">343</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ns/op</span></span>
<span class="line"><span style="color:#B392F0;">PASS</span></span>
<span class="line"><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">gotour/ch18</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">2.230</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bench=.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch18</span></span>
<span class="line"><span style="color:#6F42C1;">goos:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">darwin</span></span>
<span class="line"><span style="color:#6F42C1;">goarch:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">amd64</span></span>
<span class="line"><span style="color:#6F42C1;">pkg:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gotour/ch18</span></span>
<span class="line"><span style="color:#6F42C1;">BenchmarkFibonacci-8</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">3461616</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">343</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ns/op</span></span>
<span class="line"><span style="color:#6F42C1;">PASS</span></span>
<span class="line"><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">      </span><span style="color:#032F62;">gotour/ch18</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">2.230</span><span style="color:#032F62;">s</span></span></code></pre></div><p>运行基准测试也要使用 go test 命令，不过要加上 -bench 这个 Flag，它接受一个表达式作为参数，以匹配基准测试的函数，&quot;.&quot;表示运行所有基准测试。</p><p>下面着重解释输出的结果。看到函数后面的 -8 了吗？这个表示运行基准测试时对应的 GOMAXPROCS 的值。接着的 3461616 表示运行 for 循环的次数，也就是调用被测试代码的次数，最后的 343 ns/op 表示每次需要花费 343 纳秒。</p><p>基准测试的时间默认是 1 秒，也就是 1 秒调用 3461616 次、每次调用花费 343 纳秒。如果想让测试运行的时间更长，可以通过 -benchtime 指定，比如 3 秒，代码如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bench=.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-benchtime=3s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bench=.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-benchtime=3s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch18</span></span></code></pre></div><h4 id="计时方法" tabindex="-1">计时方法 <a class="header-anchor" href="#计时方法" aria-label="Permalink to &quot;计时方法&quot;">​</a></h4><p>进行基准测试之前会做一些准备，比如构建测试数据等，这些准备也需要消耗时间，所以需要把这部分时间排除在外。这就需要通过 ResetTimer 方法重置计时器，示例代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BenchmarkFibonacci</span><span style="color:#E1E4E8;">(b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">   b.</span><span style="color:#79B8FF;">ResetTimer</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//重置计时器</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b.N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BenchmarkFibonacci</span><span style="color:#24292E;">(b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.B) {</span></span>
<span class="line"><span style="color:#24292E;">   n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">   b.</span><span style="color:#005CC5;">ResetTimer</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//重置计时器</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> b.N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样可以避免因为准备数据耗时造成的干扰。</p><p>除了 ResetTimer 方法外，还有 StartTimer 和 StopTimer 方法，帮你灵活地控制什么时候开始计时、什么时候停止计时。</p><h4 id="内存统计" tabindex="-1">内存统计 <a class="header-anchor" href="#内存统计" aria-label="Permalink to &quot;内存统计&quot;">​</a></h4><p>在基准测试时，还可以统计每次操作分配内存的次数，以及每次操作分配的字节数，这两个指标可以作为优化代码的参考。要开启内存统计也比较简单，代码如下，即通过 ReportAllocs() 方法：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BenchmarkFibonacci</span><span style="color:#E1E4E8;">(b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">   b.</span><span style="color:#79B8FF;">ReportAllocs</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//开启内存统计</span></span>
<span class="line"><span style="color:#E1E4E8;">   b.</span><span style="color:#79B8FF;">ResetTimer</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//重置计时器</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b.N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BenchmarkFibonacci</span><span style="color:#24292E;">(b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.B) {</span></span>
<span class="line"><span style="color:#24292E;">   n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">   b.</span><span style="color:#005CC5;">ReportAllocs</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//开启内存统计</span></span>
<span class="line"><span style="color:#24292E;">   b.</span><span style="color:#005CC5;">ResetTimer</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//重置计时器</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> b.N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在再运行这个基准测试，就可以看到如下结果：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bench=.</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">./ch18</span></span>
<span class="line"><span style="color:#B392F0;">goos:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">darwin</span></span>
<span class="line"><span style="color:#B392F0;">goarch:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">amd64</span></span>
<span class="line"><span style="color:#B392F0;">pkg:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gotour/ch18</span></span>
<span class="line"><span style="color:#B392F0;">BenchmarkFibonacci-8</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2486265</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">486</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ns/op</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">B/op</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocs/op</span></span>
<span class="line"><span style="color:#B392F0;">PASS</span></span>
<span class="line"><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">gotour/ch18</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">2.533</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bench=.</span><span style="color:#24292E;">  </span><span style="color:#032F62;">./ch18</span></span>
<span class="line"><span style="color:#6F42C1;">goos:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">darwin</span></span>
<span class="line"><span style="color:#6F42C1;">goarch:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">amd64</span></span>
<span class="line"><span style="color:#6F42C1;">pkg:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gotour/ch18</span></span>
<span class="line"><span style="color:#6F42C1;">BenchmarkFibonacci-8</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2486265</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">486</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ns/op</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">B/op</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocs/op</span></span>
<span class="line"><span style="color:#6F42C1;">PASS</span></span>
<span class="line"><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">      </span><span style="color:#032F62;">gotour/ch18</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">2.533</span><span style="color:#032F62;">s</span></span></code></pre></div><p>可以看到相比原来的基准测试多了两个指标，分别是 0 B/op 和 0 allocs/op。前者表示每次操作分配了多少字节的内存，后者表示每次操作分配内存的次数。这两个指标可以作为代码优化的参考，尽可能地越小越好。</p><blockquote><p>小提示：以上两个指标是否越小越好？这是不一定的，因为有时候代码实现需要空间换时间，所以要根据自己的具体业务而定，做到在满足业务的情况下越小越好。</p></blockquote><h4 id="并发基准测试" tabindex="-1">并发基准测试 <a class="header-anchor" href="#并发基准测试" aria-label="Permalink to &quot;并发基准测试&quot;">​</a></h4><p>除了普通的基准测试外，Go 语言还支持并发基准测试，你可以测试在多个 goroutine 并发下代码的性能。还是以 Fibonacci 为例，它的并发基准测试代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BenchmarkFibonacciRunParallel</span><span style="color:#E1E4E8;">(b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">   b.</span><span style="color:#79B8FF;">RunParallel</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(pb </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.PB) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> pb.</span><span style="color:#79B8FF;">Next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BenchmarkFibonacciRunParallel</span><span style="color:#24292E;">(b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.B) {</span></span>
<span class="line"><span style="color:#24292E;">   n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">   b.</span><span style="color:#005CC5;">RunParallel</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(pb </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.PB) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> pb.</span><span style="color:#005CC5;">Next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，Go 语言通过 RunParallel 方法运行并发基准测试。RunParallel 方法会创建多个 goroutine，并将 b.N 分配给这些 goroutine 执行。</p><h4 id="基准测试实战" tabindex="-1">基准测试实战 <a class="header-anchor" href="#基准测试实战" aria-label="Permalink to &quot;基准测试实战&quot;">​</a></h4><p>相信你已经理解了 Go 语言的基准测试，也学会了如何使用，现在我以一个实战帮你复习。</p><p>还是以 Fibonacci 函数为例，通过前面小节的基准测试，会发现它并没有分配新的内存，也就是说 Fibonacci 函数慢并不是因为内存，排除掉这个原因，就可以归结为所写的算法问题了。</p><p>在递归运算中，一定会有重复计算，这是影响递归的主要因素。解决重复计算可以使用缓存，把已经计算好的结果保存起来，就可以重复使用了。</p><p>基于这个思路，我将 Fibonacci 函数的代码进行如下修改：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//缓存已经计算的结果</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fibonacci</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cache[n]; ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   result </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Fibonacci</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   cache[n] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//缓存已经计算的结果</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fibonacci</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cache[n]; ok {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   result </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Fibonacci</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   cache[n] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这组代码的核心在于采用一个 map 将已经计算好的结果缓存、便于重新使用。改造后，我再来运行基准测试，看看刚刚优化的效果，如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">BenchmarkFibonacci-8</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">97823403</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">11.7</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ns/op</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">BenchmarkFibonacci-8</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">97823403</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">11.7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ns/op</span></span></code></pre></div><p>可以看到，结果为 11.7 纳秒，相比优化前的 343 纳秒，性能足足提高了 28 倍。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>单元测试是保证代码质量的好方法，但单元测试也不是万能的，使用它可以降低 Bug 率，但也不要完全依赖。除了单元测试外，还可以辅以 Code Review、人工测试等手段更好地保证代码质量。</p><p>在这节课的最后给你留个练习题：在运行 go test 命令时，使用 -benchmem 这个 Flag 进行内存统计。</p><p>下一讲我将介绍&quot;性能优化：Go 语言如何进行代码检查和优化？&quot;记得来听课！</p>`,51);function i(F,C,h,d,g,B){const n=l("Image");return o(),e("div",null,[r,a(n,{alt:"go语言18金句.png",src:"https://s0.lgstatic.com/i/image/M00/8C/47/CgqCHl_prPqAHwCaAAVlA05ga0A298.png"}),E,a(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D2/CgpVE1_i7P2ALPmDAACtzdHE7Jo110.png"}),c(),y])}const A=p(t,[["render",i]]);export{u as __pageData,A as default};
