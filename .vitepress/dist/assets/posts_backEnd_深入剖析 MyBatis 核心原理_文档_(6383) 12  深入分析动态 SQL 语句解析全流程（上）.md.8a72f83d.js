import{_ as o,D as e,o as t,g as c,J as l,h as s,Q as p,m as n}from"./chunks/framework.f67d7268.js";const b=JSON.parse('{"title":"12深入分析动态SQL语句解析全流程（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6383) 12  深入分析动态 SQL 语句解析全流程（上）.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6383) 12  深入分析动态 SQL 语句解析全流程（上）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6383) 12  深入分析动态 SQL 语句解析全流程（上）.md"},E=p(`<h1 id="_12深入分析动态sql语句解析全流程-上" tabindex="-1">12深入分析动态SQL语句解析全流程（上） <a class="header-anchor" href="#_12深入分析动态sql语句解析全流程-上" aria-label="Permalink to &quot;12深入分析动态SQL语句解析全流程（上）&quot;">​</a></h1><p>在前面两讲中，我们详细介绍了 mybatis-config.xml 全局配置文件以及 Mapper.xml 映射文件的解析流程，MyBatis 会将 Mapper 映射文件中定义的 SQL 语句解析成 SqlSource 对象，其中的动态标签、SQL 语句文本等，会解析成对应类型的 SqlNode 对象。</p><p>在开始介绍 SqlSource 接口、SqlNode 接口等核心接口的相关内容之前，我们需要先来了解一下动态 SQL 中使用到的基础知识和基础组件。</p><h3 id="ognl-表达式语言" tabindex="-1">OGNL 表达式语言 <a class="header-anchor" href="#ognl-表达式语言" aria-label="Permalink to &quot;OGNL 表达式语言&quot;">​</a></h3><p><strong>OGNL 表达式语言是一款成熟的、面向对象的表达式语言</strong>。在动态 SQL 语句中使用到了 OGNL 表达式读写 JavaBean 属性值、执行 JavaBean 方法这两个基础功能。</p><p>OGNL 表达式是相对完备的一门表达式语言，我们可以通过&quot;对象变量名称.方法名称（或属性名称）&quot;调用一个 JavaBean 对象的方法（或访问其属性），还可以通过&quot;@[类的完全限定名]@[静态方法（或静态字段）]&quot;调用一个 Java 类的静态方法（或访问静态字段）。OGNL 表达式还支持很多更复杂、更强大的功能，这里不再一一介绍。</p><p>下面我就通过一个示例来帮助你快速了解 OGNL 表达式的基础使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OGNLDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Customer customer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> OgnlContext context;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Customer </span><span style="color:#B392F0;">createCustomer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Test Customer&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setPhone</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1234567&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Address address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        address.</span><span style="color:#B392F0;">setCity</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;city-001&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        address.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        address.</span><span style="color:#B392F0;">setCountry</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;country-001&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        address.</span><span style="color:#B392F0;">setStreet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;street-001&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ArrayList&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addresses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        addresses.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(address);</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setAddresses</span><span style="color:#E1E4E8;">(addresses);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> customer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCustomer</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 创建Customer对象以及Address对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建OgnlContext上下文对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OgnlContext</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultClassResolver</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultTypeConverter</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OgnlMemberAccess</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置root以及address这个key，默认从root开始查找属性或方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">setRoot</span><span style="color:#E1E4E8;">(customer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">, customer.</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Ognl.paraseExpression()方法负责解析OGNL表达式，获取Customer的addresses属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Ognl.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(Ognl.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;addresses&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                context, context.</span><span style="color:#B392F0;">getRoot</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 输出是[Address{id=1, street=&#39;street-001&#39;, city=&#39;city-001&#39;, country=&#39;country-001&#39;}]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取city属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Ognl.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(Ognl.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;addresses[0].city&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                context, context.</span><span style="color:#B392F0;">getRoot</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">// 输出是city-001</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// #address表示访问的不是root对象，而是OgnlContext中key为addresses的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Ognl.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(Ognl.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#address.city&quot;</span><span style="color:#E1E4E8;">), context,</span></span>
<span class="line"><span style="color:#E1E4E8;">                context.</span><span style="color:#B392F0;">getRoot</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">// 输出是city-001</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行Customer的getName()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Ognl.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(Ognl.</span><span style="color:#B392F0;">parseExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getName()&quot;</span><span style="color:#E1E4E8;">), context,</span></span>
<span class="line"><span style="color:#E1E4E8;">                context.</span><span style="color:#B392F0;">getRoot</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 输出是Test Customer</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OGNLDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Customer customer;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> OgnlContext context;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Customer </span><span style="color:#6F42C1;">createCustomer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        customer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Test Customer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setPhone</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1234567&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Address address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        address.</span><span style="color:#6F42C1;">setCity</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;city-001&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        address.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        address.</span><span style="color:#6F42C1;">setCountry</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;country-001&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        address.</span><span style="color:#6F42C1;">setStreet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;street-001&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addresses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        addresses.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(address);</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setAddresses</span><span style="color:#24292E;">(addresses);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> customer;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        customer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCustomer</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 创建Customer对象以及Address对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建OgnlContext上下文对象</span></span>
<span class="line"><span style="color:#24292E;">        context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OgnlContext</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultClassResolver</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultTypeConverter</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OgnlMemberAccess</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置root以及address这个key，默认从root开始查找属性或方法</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">setRoot</span><span style="color:#24292E;">(customer);</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">, customer.</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Ognl.paraseExpression()方法负责解析OGNL表达式，获取Customer的addresses属性</span></span>
<span class="line"><span style="color:#24292E;">        Object obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Ognl.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(Ognl.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addresses&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                context, context.</span><span style="color:#6F42C1;">getRoot</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 输出是[Address{id=1, street=&#39;street-001&#39;, city=&#39;city-001&#39;, country=&#39;country-001&#39;}]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取city属性</span></span>
<span class="line"><span style="color:#24292E;">        obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Ognl.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(Ognl.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addresses[0].city&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                context, context.</span><span style="color:#6F42C1;">getRoot</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">// 输出是city-001</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// #address表示访问的不是root对象，而是OgnlContext中key为addresses的对象</span></span>
<span class="line"><span style="color:#24292E;">        obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Ognl.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(Ognl.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#address.city&quot;</span><span style="color:#24292E;">), context,</span></span>
<span class="line"><span style="color:#24292E;">                context.</span><span style="color:#6F42C1;">getRoot</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">// 输出是city-001</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行Customer的getName()方法</span></span>
<span class="line"><span style="color:#24292E;">        obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Ognl.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(Ognl.</span><span style="color:#6F42C1;">parseExpression</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getName()&quot;</span><span style="color:#24292E;">), context,</span></span>
<span class="line"><span style="color:#24292E;">                context.</span><span style="color:#6F42C1;">getRoot</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 输出是Test Customer</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MyBatis 为了提高 OGNL 表达式的工作效率，添加了一层 OgnlCache 来<strong>缓存</strong> 表达式编译之后的结果（不是表达式的执行结果），OgnlCache 通过一个 ConcurrentHashMap&lt;String, Object&gt; 类型的集合（expressionCache 字段，静态字段）来<strong>记录</strong>OGNL 表达式编译之后的结果。通过缓存拿到表达式编译的结果之后，OgnlCache 底层还会依赖上述示例中的 OGNL 工具类以及 OgnlContext 完成表达式的执行。</p><h3 id="dynamiccontext-上下文" tabindex="-1">DynamicContext 上下文 <a class="header-anchor" href="#dynamiccontext-上下文" aria-label="Permalink to &quot;DynamicContext 上下文&quot;">​</a></h3><p>在 MyBatis 解析一条动态 SQL 语句的时候，可能整个流程非常长，其中涉及多层方法的调用、方法的递归、复杂的循环等，其中<strong>产生的中间结果需要有一个地方进行存储，那就是 DynamicContext 上下文对象</strong>。</p><p>DynamicContext 中有两个核心属性：一个是 sqlBuilder 字段（StringJoiner 类型），用来记录解析之后的 SQL 语句；另一个是 bindings 字段，用来记录上下文中的一些 KV 信息。</p><p>DynamicContext 定义了一个 ContextMap 内部类，ContextMap 用来记录运行时用户传入的、用来替换&quot;#{}&quot;占位符的实参。在 DynamicContext 构造方法中，会<strong>根据传入的实参类型决定如何创建对应的 ContextMap 对象</strong>，核心代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DynamicContext</span><span style="color:#E1E4E8;">(Configuration configuration, Object parameterObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parameterObject </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(parameterObject </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Map)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 对于非Map类型的实参，会创建对应的MetaObject对象，并封装成ContextMap对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        MetaObject metaObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">newMetaObject</span><span style="color:#E1E4E8;">(parameterObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> existsTypeHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getTypeHandlerRegistry</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">hasTypeHandler</span><span style="color:#E1E4E8;">(parameterObject.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        bindings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextMap</span><span style="color:#E1E4E8;">(metaObject, existsTypeHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 对于Map类型的实参，这里会创建一个空的ContextMap对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        bindings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextMap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里实参对应的Key是_parameter</span></span>
<span class="line"><span style="color:#E1E4E8;">    bindings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(PARAMETER_OBJECT_KEY, parameterObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bindings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(DATABASE_ID_KEY, configuration.</span><span style="color:#B392F0;">getDatabaseId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DynamicContext</span><span style="color:#24292E;">(Configuration configuration, Object parameterObject) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parameterObject </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(parameterObject </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Map)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对于非Map类型的实参，会创建对应的MetaObject对象，并封装成ContextMap对象</span></span>
<span class="line"><span style="color:#24292E;">        MetaObject metaObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newMetaObject</span><span style="color:#24292E;">(parameterObject);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> existsTypeHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getTypeHandlerRegistry</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">hasTypeHandler</span><span style="color:#24292E;">(parameterObject.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        bindings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextMap</span><span style="color:#24292E;">(metaObject, existsTypeHandler);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对于Map类型的实参，这里会创建一个空的ContextMap对象</span></span>
<span class="line"><span style="color:#24292E;">        bindings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里实参对应的Key是_parameter</span></span>
<span class="line"><span style="color:#24292E;">    bindings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(PARAMETER_OBJECT_KEY, parameterObject);</span></span>
<span class="line"><span style="color:#24292E;">    bindings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(DATABASE_ID_KEY, configuration.</span><span style="color:#6F42C1;">getDatabaseId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ContextMap 继承了 HashMap 并覆盖了 get() 方法，在 get() 方法中有一个简单的降级逻辑：</p><ul><li><p>首先，尝试按照 Map 的规则查找 Key，如果查找成功直接返回；</p></li><li><p>然后，再尝试检查 parameterObject 这个实参对象是否包含 Key 这个属性，如果包含的话，则直接读取该属性值返回；</p></li><li><p>最后，根据当前是否包含 parameterObject 相应的 TypeHandler 决定是返回整个 parameterObject 对象，还是返回 null。</p></li></ul><p>后面在介绍 <code>&lt;foreach&gt;</code>、<code>&lt;trim&gt;</code> 等标签的处理逻辑中，你可以看到向 DynamicContext.bindings 集合中写入 KV 数据的操作，但是读取这个 ContextMap 的地方主要是在 OGNL 表达式中，也就是在 DynamicContext 中定义了一个静态代码块，指定了 OGNL 表达式读写 ContextMap 集合的逻辑，这部分读取逻辑封装在 ContextAccessor 中。除此之外，你还可以看到 ContextAccessor 中的 getProperty() 方法会将传入的 target 参数（实际上就是 ContextMap）转换为 Map，并先尝试按照 Map 规则进行查找；查找失败之后，会尝试获取&quot;_parameter&quot;对应的 parameterObject 对象，从 parameterObject 中获取指定的 Value 值。</p><h3 id="组合模式" tabindex="-1">组合模式 <a class="header-anchor" href="#组合模式" aria-label="Permalink to &quot;组合模式&quot;">​</a></h3><p><strong>组合模式（有时候也被称为&quot;部分-整体&quot;模式）是将同一类型的多个对象组合成一个树形结构。在使用这个树形结构的时候，我们可以像处理一个对象那样进行处理，而不用关心其复杂的树形结构。</strong></p><p>组合模式的核心结构如下图所示：</p>`,20),y=p(`<p>从上图中，我们可以看出组合模式的核心组件有下面三个。</p><ul><li><p><strong>Component 接口：定义了整个树形结构中每个节点的基础行为</strong>。一般情况下会定义两类方法，一类是真正的业务行为，另一类是管理子节点的行为，例如 addChild()、removeChild()、getChildren() 等方法。</p></li><li><p><strong>Leaf 类：抽象的是树形结构中的叶子节点</strong>。Leaf 类只实现了 Component 接口中的业务方法，而管理子节点的方法是空实现或直接抛出异常。</p></li><li><p><strong>Composite 类：抽象了树形结构中的树枝节点（非叶子节点）</strong>。Composite 类不仅要实现 Component 接口的业务方法，而且还需要实现子节点管理的相关方法，并在内部维护一个集合类来管理这些子节点。Composite 实现的业务方法一般逻辑比较简单，大都是直接循环调用所有子节点的业务方法。</p></li></ul><p>通过以上对组合模式的介绍，你可以看出组合模式有以下两个优势：</p><ul><li><p>由于使用方并不关心自己使用的是树形 Component 结构还是单个 Component 对象，所以可以帮助上层使用方屏蔽复杂的树形结构，将使用方的逻辑与树形结构解耦；</p></li><li><p>如果要在树形结构中添加新的功能，只需要增加树形结构中的节点即可，也就是提供新的 Component 接口实现并添加到树中，这符合&quot;开放-封闭&quot;原则。</p></li></ul><h3 id="sqlnode" tabindex="-1">SqlNode <a class="header-anchor" href="#sqlnode" aria-label="Permalink to &quot;SqlNode&quot;">​</a></h3><p>在 MyBatis 处理动态 SQL 语句的时候，会将动态 SQL 标签解析为 SqlNode 对象，<strong>多个 SqlNode 对象就是通过组合模式组成树形结构供上层使用的</strong>。</p><p>下面我们就来讲解一下 SqlNode 的相关实现。首先，介绍一下 SqlNode 接口的定义，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// apply()方法会根据用户传入的实参，解析该SqlNode所表示的动态SQL内容并</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将解析之后的SQL片段追加到DynamicContext.sqlBuilder字段中暂存。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当SQL语句中全部的动态SQL片段都解析完成之后，就可以从DynamicContext.sqlBuilder字段中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 得到一条完整的、可用的SQL语句了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(DynamicContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// apply()方法会根据用户传入的实参，解析该SqlNode所表示的动态SQL内容并</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将解析之后的SQL片段追加到DynamicContext.sqlBuilder字段中暂存。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当SQL语句中全部的动态SQL片段都解析完成之后，就可以从DynamicContext.sqlBuilder字段中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 得到一条完整的、可用的SQL语句了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(DynamicContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MyBatis 为 SqlNode 接口提供了非常多的实现类（如下图），其中很多实现类都对应一个动态 SQL 标签，但是也有 SqlNode 实现扮演了组合模式中 Composite 的角色，例如，MixedSqlNode 实现类。</p>`,9),i=p(`<p>SqlNode 继承关系图</p><p>下面我们就来逐一介绍这每个 SqlNode 实现类的功能和核心实现。</p><h4 id="_1-statictextsqlnode-和-mixedsqlnode" tabindex="-1">1. StaticTextSqlNode 和 MixedSqlNode <a class="header-anchor" href="#_1-statictextsqlnode-和-mixedsqlnode" aria-label="Permalink to &quot;1. StaticTextSqlNode 和 MixedSqlNode&quot;">​</a></h4><p><strong>StaticTextSqlNode 用于表示非动态的 SQL 片段</strong>，其中维护了一个 text 字段（String 类型），用于记录非动态 SQL 片段的文本内容，其 apply() 方法会直接将 text 字段值追加到 DynamicContext.sqlBuilder 的最末尾。</p><p><strong>MixedSqlNode 在整个 SqlNode 树中充当了树枝节点，也就是扮演了组合模式中 Composite 的角色</strong> ，其中维护了一个 <code>List&lt;SqlNode&gt;</code> 集合用于记录 MixedSqlNode 下所有的子 SqlNode 对象。MixedSqlNode 对于 apply() 方法的实现也相对比较简单，核心逻辑就是遍历 <code>List&lt;SqlNode&gt;</code> 集合中全部的子 SqlNode 对象并调用 apply() 方法，由子 SqlNode 对象完成真正的动态 SQL 处理逻辑。</p><h4 id="_2-textsqlnode" tabindex="-1">2. TextSqlNode <a class="header-anchor" href="#_2-textsqlnode" aria-label="Permalink to &quot;2. TextSqlNode&quot;">​</a></h4><p><strong>TextSqlNode 实现抽象了包含 &quot;\${}&quot;占位符的动态 SQL 片段</strong>。TextSqlNode 通过一个 text 字段（String 类型）记录了包含&quot;\${}&quot;占位符的 SQL 文本内容，在 apply() 方法实现中会结合用户给定的实参解析&quot;\${}&quot;占位符，核心代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建GenericTokenParser解析器，这里指定的占位符的起止符号分别是&quot;\${&quot;和&quot;}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    GenericTokenParser parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createParser</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingTokenParser</span><span style="color:#E1E4E8;">(context, injectionFilter));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将解析之后的SQL片段追加到DynamicContext暂存</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">appendSql</span><span style="color:#E1E4E8;">(parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(text));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建GenericTokenParser解析器，这里指定的占位符的起止符号分别是&quot;\${&quot;和&quot;}&quot;</span></span>
<span class="line"><span style="color:#24292E;">    GenericTokenParser parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createParser</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingTokenParser</span><span style="color:#24292E;">(context, injectionFilter));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将解析之后的SQL片段追加到DynamicContext暂存</span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">appendSql</span><span style="color:#24292E;">(parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(text));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里<strong>使用 GenericTokenParser 识别&quot;\${}&quot;占位符</strong> ，在识别到占位符之后，会<strong>通过 BindingTokenParser 将&quot;\${}&quot;占位符替换为用户传入的实参</strong>。BindingTokenParser 继承了TokenHandler 接口，在其 handleToken() 方法实现中，会根据 DynamicContext.bindings 这个 ContextMap 中的 KV 数据替换 SQL 语句中的&quot;\${}&quot;占位符，相关的代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">handleToken</span><span style="color:#E1E4E8;">(String content) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取用户提供的实参数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object parameter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getBindings</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;_parameter&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parameter </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 通过value占位符，也可以查找到parameter对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">getBindings</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (SimpleTypeRegistry.</span><span style="color:#B392F0;">isSimpleType</span><span style="color:#E1E4E8;">(parameter.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        context.</span><span style="color:#B392F0;">getBindings</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">, parameter);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过Ognl解析&quot;\${}&quot;占位符中的表达式，解析失败的话会返回空字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OgnlCache.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(content, context.</span><span style="color:#B392F0;">getBindings</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    String srtValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(value); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">checkInjection</span><span style="color:#E1E4E8;">(srtValue); </span><span style="color:#6A737D;">// 对解析后的值进行过滤</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> srtValue; </span><span style="color:#6A737D;">// 通过过滤的值才能正常返回</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">handleToken</span><span style="color:#24292E;">(String content) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取用户提供的实参数据</span></span>
<span class="line"><span style="color:#24292E;">    Object parameter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getBindings</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_parameter&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parameter </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 通过value占位符，也可以查找到parameter对象</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">getBindings</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (SimpleTypeRegistry.</span><span style="color:#6F42C1;">isSimpleType</span><span style="color:#24292E;">(parameter.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        context.</span><span style="color:#6F42C1;">getBindings</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">, parameter);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过Ognl解析&quot;\${}&quot;占位符中的表达式，解析失败的话会返回空字符串</span></span>
<span class="line"><span style="color:#24292E;">    Object value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OgnlCache.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(content, context.</span><span style="color:#6F42C1;">getBindings</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    String srtValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(value); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkInjection</span><span style="color:#24292E;">(srtValue); </span><span style="color:#6A737D;">// 对解析后的值进行过滤</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> srtValue; </span><span style="color:#6A737D;">// 通过过滤的值才能正常返回</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-ifsqlnode" tabindex="-1">3. IfSqlNode <a class="header-anchor" href="#_3-ifsqlnode" aria-label="Permalink to &quot;3. IfSqlNode&quot;">​</a></h4><p><strong>IfSqlNode 实现类对应了动态 SQL 语句中的 <code>&lt;if&gt;</code> 标签</strong> ，在 MyBatis 的 <code>&lt;if&gt;</code> 标签中使用可以通过 test 属性指定一个表达式，当表达式成立时，<code>&lt;if&gt;</code> 标签内的 SQL 片段才会出现在完整的 SQL 语句中。</p><p>在 IfSqlNode 中，通过 test 字段（String 类型）记录了 <code>&lt;if&gt;</code> 标签中的 test 表达式，通过 contents 字段（SqlNode 类型）维护了 <code>&lt;if&gt;</code> 标签下的子 SqlNode 对象。在 IfSqlNode 的 apply() 方法实现中，会依赖 ExpressionEvaluator 工具类解析 test 表达式，只有 test 表达式为 true，才会调用子 SqlNode 对象（即 contents 字段）的 apply() 方法。需要说明的是：这里使用到的 ExpressionEvaluator 工具类底层也是依赖 OGNL 表达式实现 test 表达式解析的。</p><h4 id="_4-trimsqlnode" tabindex="-1">4. TrimSqlNode <a class="header-anchor" href="#_4-trimsqlnode" aria-label="Permalink to &quot;4. TrimSqlNode&quot;">​</a></h4><p><strong>TrimSqlNode 对应 MyBatis 动态 SQL 语句中的 <code>&lt;trim&gt;</code> 标签</strong>。</p><p>在使用 <code>&lt;trim&gt;</code> 标签的时候，我们可以指定 prefix 和 suffix 属性添加前缀和后缀，也可以指定 prefixesToOverrides 和 suffixesToOverrides 属性来删除多个前缀和后缀（使用&quot;|&quot;分割不同字符串）。在 TrimSqlNode 中维护了同名的四个字段值，即 prefix 字段、suffix 字段（这两个是 String 类型）以及 prefixesToOverride 字段、suffixesToOverride 字段（这两个是 List<code>&lt;String&gt;</code> 类型）。</p><p>下面先来看一下 TrimSqlNode 的 apply() 方法的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FilteredDynamicContext filteredDynamicContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FilteredDynamicContext</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 首先执行子SqlNode对象的apply()方法完成对应动态SQL片段的解析</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contents.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(filteredDynamicContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用FilteredDynamicContext.applyAll()方法完成前后缀的处理操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    filteredDynamicContext.</span><span style="color:#B392F0;">applyAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#24292E;">    FilteredDynamicContext filteredDynamicContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FilteredDynamicContext</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 首先执行子SqlNode对象的apply()方法完成对应动态SQL片段的解析</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contents.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(filteredDynamicContext);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用FilteredDynamicContext.applyAll()方法完成前后缀的处理操作</span></span>
<span class="line"><span style="color:#24292E;">    filteredDynamicContext.</span><span style="color:#6F42C1;">applyAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 apply() 方法的实现可以看出，TrimSqlNode 处理前后缀的核心逻辑是在 FilteredDynamicContext 中完成的。<strong>FilteredDynamicContext 可以看作是 DynamicContext 的装饰器</strong>。除了 DynamicContext 本身临时存储解析结果和参数的功能之外，FilteredDynamicContext 还通过其 applyAll() 方法实现了前后缀的处理，其中会判断 TrimSqlNode 下子 SqlNode 的解析结果的长度，然后执行 applyPrefix() 方法处理前缀，执行 applySuffix() 方法处理后缀。</p><ul><li><p>applyPrefix() 方法在处理前缀的时候，首先会遍历 prefixesToOverride 集合，从 SQL 片段的<strong>头部</strong>逐个尝试进行删除，之后在 SQL 片段的头部插入一个空格以及 prefix 字段指定的前缀字符串。</p></li><li><p>applySuffix() 方法在处理后缀的时候，首先会遍历 suffixesToOverride 集合，从 SQL 片段的<strong>尾部</strong>逐个尝试进行删除，之后在 SQL 片段的尾部插入一个空格以及 suffix 字段指定的后缀字符串。</p></li></ul><p>另外，从前面的 SqlNode 继承关系图中还可以看出，WhereSqlNode 和 SetSqlNode 是 TrimSqlNode 的子类。</p><p>在 WhereSqlNode 中将 prefix 设置为&quot;WHERE&quot;字符串，prefixesToOverride 集合包含 &quot;OR&quot;&quot;AND&quot;&quot;OR\\n&quot;&quot;AND\\n&quot;&quot;OR\\r&quot;&quot;AND\\r&quot; 等字符串，这样就实现了删除 SQL 片段开头多余的 &quot;AND&quot;&quot;OR&quot; 关键字，并添加&quot;WHERE&quot;关键字的效果。</p><p>在 SetSqlNode 中将 prefix 设置为&quot;SET&quot;关键字，prefixesToOverride 集合和 suffixesToOverride 集合只包含&quot;，&quot;（逗号）字符串，这样就实现了删除 SQL 片段开头和结尾多余的逗号，并添加&quot;SET&quot;关键字的效果。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们重点介绍了 MyBatis 中动态 SQL 语句中涉及的核心内容。</p><ul><li><p>首先，说明了动态 SQL 语句中使用的 OGNL 表达式语言，这样你就了解了动态 SQL 语句中占位符的处理逻辑。</p></li><li><p>然后，介绍了 DynamicContext 对象，其中维护了解析动态 SQL 语句上下文信息；随后我还分析了组合模式，因为它是 MyBatis 组合各动态 SQL 节点的设计思想。</p></li><li><p>最后，讲解了 TextSqlNode、IfSqlNode、TrimSqlNode 等多个 SqlNode 节点的实现。</p></li></ul><p>在下一讲，我们将继续介绍剩余的 SqlNode 实现以及 SqlSource 的相关内容，记得按时来听课。</p><hr><p>[</p>`,29),d=n("p",null,[s("]("),n("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/Mka"),s(")")],-1),u=n("p",null,[n("strong",null,"《Java 工程师高薪训练营》")],-1),F=n("p",null,[s("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),n("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),s("！")],-1);function g(C,q,m,x,D,A){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/11/09/CioPOWA_SLWAFQcIAAFSMa4YVOM751.png"}),s(),y,l(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image6/M00/0F/F1/Cgp9HWA-CCGAMA5bAADLCPKFfWg640.png"}),s(),i,l(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"}),s(),d,u,F])}const h=o(r,[["render",g]]);export{b as __pageData,h as default};
