import{_ as p,j as l,o as e,g as o,k as a,Q as s}from"./chunks/framework.e0c66c3f.js";const T=JSON.parse('{"title":"配置 Firebase 服务 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6682) 27  统计分析：如何架构灵活的统计分析服务，助力产品增长？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6682) 27  统计分析：如何架构灵活的统计分析服务，助力产品增长？.md","lastUpdated":1696338709000}'),c={name:"posts/frontEnd/048_iOS开发进阶/(6682) 27  统计分析：如何架构灵活的统计分析服务，助力产品增长？.md"},t=s('<p>App 上架是产品发展的一个里程碑，同时也是产品长远发展的起点。那有没有什么方法能帮助我们持续地改善产品功能与用户体验，并制定产品发展的方向与目标呢？当然有！我们可以使用统计分析服务（Analytics）。</p><p><strong>统计分析服务能为我们提供用户交互度指标（Engagement Metrics），这些指标包括用户会话的活跃度、活跃的设备类型以及用户留存率等。</strong> 有了这些指标，我们就能衡量每次发布的新功能是否能有效提高用户的交互频率，从而及时调整产品发展的方向。</p><p>市面上有许多统计分析服务，为了方便使用各种不同的服务，我们为 Moments App 架构了一套灵活的统计分析模块，同时使用 Firebase 作为例子来演示如何支持一种统计分析服务。之所以选择 Firebase，其主要原因有如下三个：</p><ol><li><p>Firebase 功能齐全，除了统计分析服务以外，几乎包含了我们优化 App 所需的各种服务，例如崩溃报告、远程配置与遥控功能开关、App 分发服务、A/B 测试等；</p></li><li><p>免费版的 Firebase 足够使用，与功能相当的收费产品相比，能省下不少钱；</p></li><li><p>Firebase 配置方便，只需搭建一次就能长久使用。</p></li></ol><h3 id="配置-firebase-服务" tabindex="-1">配置 Firebase 服务 <a class="header-anchor" href="#配置-firebase-服务" aria-label="Permalink to &quot;配置 Firebase 服务&quot;">​</a></h3><p>在讲述如何使用 Firebase 的统计分析服务前，我们先看看如何为 Moments App 配置 Firebase 的服务。</p><h4 id="_1-创建项目" tabindex="-1">1. 创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;1. 创建项目&quot;">​</a></h4><p>首先，我们登录到 Firebase 网站来新建一个项目。请注意，在新建的时候必须选择&quot;Enable Google Analytics for this project&quot;（为该项目启动统计分析服务）选项，否则将没办法使用 A/B 测试等一系列的服务。</p><p>然后在新项目里添加 App，我的做法是为开发环境、测试环境和生产环境各自添加不同的 App。下图演示了如何添加测试环境的 Internal App。</p>',9),r=s('<p>这里关键是要填写正确的 Bundle ID。你可以到各个 Target 的 xcconfig 文件里面分别找到它们的 Bundle ID，例如在 InternalTarget.xcconfig 文件里面有如下的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PRODUCT_BUNDLE_IDENTIFIER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> com.ibanimatable.moments.internal</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PRODUCT_BUNDLE_IDENTIFIER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> com.ibanimatable.moments.internal</span></span></code></pre></div><h4 id="_2-下载-firebase-配置文件" tabindex="-1">2. 下载 Firebase 配置文件 <a class="header-anchor" href="#_2-下载-firebase-配置文件" aria-label="Permalink to &quot;2. 下载 Firebase 配置文件&quot;">​</a></h4><p>第二步是为三个环境的 App 分别下载 Firebase 的配置文件。当我们把三个配置文件下载完毕后，为了方便管理，可以使用&quot;GoogleService-Info-&lt;环境名称&gt;.plist&quot;的命名方式来改名，然后把所有的配置文件都拖到 Moments 项目里面，如下图所示：</p>',4),E=s('<p>同时在各个 Target 的 xcconfig 文件分别添加名叫<code>FIREBASE_CONFIG_FILENAME</code>的 Build Setting，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FIREBASE_CONFIG_FILENAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GoogleService</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Info</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Development</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FIREBASE_CONFIG_FILENAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GoogleService</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Info</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Development</span></span></code></pre></div><p>接着在 Build Phases 上添加&quot;Copy Firebase Config File&quot;步骤的配置信息，并输入下面的脚本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cp </span><span style="color:#9ECBFF;">&quot;${PROJECT_DIR}/Moments/Configurations/Firebase/${FIREBASE_CONFIG_FILENAME}.plist&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}/GoogleService-Info.plist&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cp </span><span style="color:#032F62;">&quot;${PROJECT_DIR}/Moments/Configurations/Firebase/${FIREBASE_CONFIG_FILENAME}.plist&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}/GoogleService-Info.plist&quot;</span></span></code></pre></div><p>具体配置如下图所示：</p>',5),i=s(`<p>有了这个步骤的配置，Xcode 在构建的过程中就会执行。因为步骤配置里的 Shell 脚本中使用了 xcconfig 里面的<code>FIREBASE_CONFIG_FILENAME</code>变量，所以当我们构建不同环境的 App 时，Xcode 会自动拷贝对应的 Firebase 配置文件到不同的 App 里面，这样就使得不同的 App 能把用户事件发送到不同的统计分析数据服务，进而保证生产环境的数据不会受到污染。</p><h4 id="_3-安装-firebase-sdk" tabindex="-1">3. 安装 Firebase SDK <a class="header-anchor" href="#_3-安装-firebase-sdk" aria-label="Permalink to &quot;3. 安装 Firebase SDK&quot;">​</a></h4><p>下载完配置文件以后，下一步是安装 Firebase SDK。<strong>官方推荐的方式是使用 CocoaPods 来安装 Firebase SDK</strong>。我们只需要把 Firebase 添加到 Podfile 即可，具体代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">def thirdparty_pods</span></span>
<span class="line"><span style="color:#E1E4E8;">  pod </span><span style="color:#9ECBFF;">&#39;Firebase/Analytics&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;= 7.0.0&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">end</span></span>
<span class="line"><span style="color:#E1E4E8;">target </span><span style="color:#9ECBFF;">&#39;Moments&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  thirdparty_pods</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">def thirdparty_pods</span></span>
<span class="line"><span style="color:#24292E;">  pod </span><span style="color:#032F62;">&#39;Firebase/Analytics&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;= 7.0.0&#39;</span></span>
<span class="line"><span style="color:#24292E;">end</span></span>
<span class="line"><span style="color:#24292E;">target </span><span style="color:#032F62;">&#39;Moments&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">  thirdparty_pods</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">end</span></span></code></pre></div><p>我们通过<code>pod</code>命令来添加统计分析服务，然后把这些 Pod 通过<code>thirdparty_pods</code>函数添加到 Moments target 里面，最后重新执行<code>bundle exec pod install</code>命令就能完成 Firebase SDK 的安装了。</p><h4 id="_4-初始化-firebase-服务" tabindex="-1">4. 初始化 Firebase 服务 <a class="header-anchor" href="#_4-初始化-firebase-服务" aria-label="Permalink to &quot;4. 初始化 Firebase 服务&quot;">​</a></h4><p>安装完 Firebase SDK 后，我们还需要在 App 里面进行初始化 Firebase 服务，只需要两步，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Firebase</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppDelegate</span><span style="color:#E1E4E8;">: UIResponder, UIApplicationDelegate {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> application: UIApplication,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#B392F0;">didFinishLaunchingWithOptions</span><span style="color:#E1E4E8;"> launchOptions: [UIApplication.LaunchOptionsKey: </span><span style="color:#79B8FF;">Any</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FirebaseApp.</span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Firebase</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppDelegate</span><span style="color:#24292E;">: UIResponder, UIApplicationDelegate {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> application: UIApplication,</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#6F42C1;">didFinishLaunchingWithOptions</span><span style="color:#24292E;"> launchOptions: [UIApplication.LaunchOptionsKey: </span><span style="color:#005CC5;">Any</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        FirebaseApp.</span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第一步是通过<code>import Firebase</code>语句来引入 Firebase 库，第二步是在<code>application(_:didFinishLaunchingWithOptions:)</code>函数里调用<code>FirebaseApp.configure()</code> 函数来启动 Firebase 服务。</p><p>好了，至此我们就为 Moments App 配置好 Firebase 服务了。</p><h3 id="统计分析模块" tabindex="-1">统计分析模块 <a class="header-anchor" href="#统计分析模块" aria-label="Permalink to &quot;统计分析模块&quot;">​</a></h3><p>下面我们以 Moments App 为例子，看看如何架构与实现一个灵活的统计分析模块以及如何使用该模块。</p><h4 id="_1-统计分析模块的架构与实现" tabindex="-1">1. 统计分析模块的架构与实现 <a class="header-anchor" href="#_1-统计分析模块的架构与实现" aria-label="Permalink to &quot;1. 统计分析模块的架构与实现&quot;">​</a></h4><p>首先，我们看一下统计分析模块的架构图，如下图所示：</p>`,14),y=s(`<p>这里我们从右往左看，根据依赖关系，<strong>统计分析模块由用户活动事件（Event）、事件跟踪提供者（Provider）和事件跟踪数据仓库（Repo）这三部分组成</strong>。</p><p>下面我们分别看一下它们的实现。</p><p>所有的事件类型都遵循了一个名叫<code>TrackingEventType</code>的空协议（Protocol），其定义如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TrackingEventType</span><span style="color:#E1E4E8;"> { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrackingEventType</span><span style="color:#24292E;"> { }</span></span></code></pre></div><p>然后就可以定义该协议的字类型。根据用途的不同，我们把事件分成以下三类：</p><ul><li><p><code>ScreenviewsTrackingEvent</code>，用于记录页面事件；</p></li><li><p><code>ActionTrackingEventType</code>，用于记录行为事件，例如点击了某个按钮；</p></li><li><p><code>TrackingEvent</code>，用于记录通用的事件。</p></li></ul><p>接着我们定义了<code>TrackingProvider</code>协议来发送事件。该协议定义了三个方法来分别发送不同的事件，具体定义如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TrackingProvider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackScreenviews</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackAction</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrackingProvider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackScreenviews</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackAction</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackEvent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，<code>trackScreenviews()</code>用于发送页面事件，<code>trackAction()</code>负责发送行为事件，而<code>trackEvent()</code>用于发送通用的事件。</p><p>当要支持某种统计分析服务（例如 Firebase）的时候，我们就需要为<code>TrackingProvider</code>提供一个具体的实现类型，比如，下面就是<code>FirebaseTrackingProvider</code>的具体实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FirebaseTrackingProvider</span><span style="color:#E1E4E8;">: TrackingProvider {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackScreenviews</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> ScreenviewsTrackingEvent </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Analytics.</span><span style="color:#79B8FF;">logEvent</span><span style="color:#E1E4E8;">(AnalyticsEventSelectContent, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                            AnalyticsParameterScreenName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> event.screenName,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">AnalyticsParameterScreenClass</span><span style="color:#E1E4E8;">: event.screenClass])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackAction</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> FirebaseActionTrackingEvent </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Analytics.</span><span style="color:#79B8FF;">logEvent</span><span style="color:#E1E4E8;">(AnalyticsEventSelectContent, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: event.parameters)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> TrackingEvent </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Analytics.</span><span style="color:#79B8FF;">logEvent</span><span style="color:#E1E4E8;">(event.name, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: event.parameters)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FirebaseTrackingProvider</span><span style="color:#24292E;">: TrackingProvider {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackScreenviews</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> ScreenviewsTrackingEvent </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Analytics.</span><span style="color:#005CC5;">logEvent</span><span style="color:#24292E;">(AnalyticsEventSelectContent, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">                            AnalyticsParameterScreenName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> event.screenName,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">AnalyticsParameterScreenClass</span><span style="color:#24292E;">: event.screenClass])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackAction</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> FirebaseActionTrackingEvent </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Analytics.</span><span style="color:#005CC5;">logEvent</span><span style="color:#24292E;">(AnalyticsEventSelectContent, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: event.parameters)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackEvent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> TrackingEvent </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Analytics.</span><span style="color:#005CC5;">logEvent</span><span style="color:#24292E;">(event.name, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: event.parameters)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>FirebaseTrackingProvider</code>遵循了<code>TrackingProvider</code>协议，并实现了<code>trackScreenviews()</code>、<code>trackAction()</code>和<code>trackEvent()</code>三个方法。在这些方法里面，都是通过<code>guard</code>语句来检查输入类型是否正确，并通过 Firebase SDK 所提供的<code>Analytics.logEvent()</code>方法来发送事件。</p><p>假如我们需要支持新的统计分析服务时，就可以为该服务提供一个遵循<code>TrackingProvider</code>协议的实现类型。例如，当我们支持 Mixpanel 时，就可实现一个名叫<code>MixpanelTrackingProvider</code>的结构体。</p><p>有了<code>TrackingProvider</code>的实例以后，我们就可以通过 Repo 来管理它们。这里我们一起看一下<code>TrackingRepoType</code>协议和它的实现类型<code>TrackingRepo</code>。</p><p><code>TrackingRepoType</code>的实现如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TrackingRepoType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">trackingProvider</span><span style="color:#E1E4E8;">: TrackingProvider)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackScreenviews</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackAction</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrackingRepoType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">trackingProvider</span><span style="color:#24292E;">: TrackingProvider)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackScreenviews</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackAction</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackEvent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该协议定义了<code>register(trackingProvider:)</code>方法来注册各种<code>TrackingProvider</code>，然后还定义了三个方法来发送不同类型的事件。</p><p><code>TrackingRepo</code>的具体实现如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TrackingRepo</span><span style="color:#E1E4E8;">: TrackingRepoType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shared: TrackingRepo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> providers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [TrackingProvider]()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">() { }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">trackingProvider</span><span style="color:#E1E4E8;">: TrackingProvider) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        providers.</span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(trackingProvider)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackScreenviews</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        providers.</span><span style="color:#79B8FF;">forEach</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">trackScreenviews</span><span style="color:#E1E4E8;">(event) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackAction</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        providers.</span><span style="color:#79B8FF;">forEach</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">trackAction</span><span style="color:#E1E4E8;">(event) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        providers.</span><span style="color:#79B8FF;">forEach</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">trackEvent</span><span style="color:#E1E4E8;">(event) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrackingRepo</span><span style="color:#24292E;">: TrackingRepoType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shared: TrackingRepo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> providers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [TrackingProvider]()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">() { }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">trackingProvider</span><span style="color:#24292E;">: TrackingProvider) {</span></span>
<span class="line"><span style="color:#24292E;">        providers.</span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(trackingProvider)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackScreenviews</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#24292E;">        providers.</span><span style="color:#005CC5;">forEach</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">trackScreenviews</span><span style="color:#24292E;">(event) }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackAction</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#24292E;">        providers.</span><span style="color:#005CC5;">forEach</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">trackAction</span><span style="color:#24292E;">(event) }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackEvent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#24292E;">        providers.</span><span style="color:#005CC5;">forEach</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">trackEvent</span><span style="color:#24292E;">(event) }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>TrackingRepo</code>实现了<code>TrackingRepoType</code>协议的所有方法，其中<code>register(trackingProvider:)</code>方法把各个注册的<code>TrackingProvider</code>的实例都保存在<code>providers</code>属性里面，而<code>trackScreenviews()</code>、<code>trackAction()</code>和<code>trackEvent()</code>三个方法则分别调用了<code>providers</code>属性所对应的方法。你可以看到，假如我们注册了多个统计分析服务的 Provider，<code>TrackingRepo</code>会把每个事件依次发送给各个后台服务。</p><p>到此为止，我们就实现了一套灵活的统计分析模块。有了它，我们可以很便捷地添加或者替换不同的统计分析服务。</p><h4 id="_2-统计分析模块的使用" tabindex="-1">2. 统计分析模块的使用 <a class="header-anchor" href="#_2-统计分析模块的使用" aria-label="Permalink to &quot;2. 统计分析模块的使用&quot;">​</a></h4><p>要使用统计分析模块，需要两步，第一步是注册<code>TrackingProvider</code>的实例，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">FirebaseTrackingProvider</span><span style="color:#E1E4E8;">()].</span><span style="color:#79B8FF;">forEach</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TrackingRepo.shared.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">trackingProvider</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">FirebaseTrackingProvider</span><span style="color:#24292E;">()].</span><span style="color:#005CC5;">forEach</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    TrackingRepo.shared.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">trackingProvider</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过调用<code>TrackingRepo</code>的<code>register</code>方法来注册<code>FirebaseTrackingProvider</code>的实例，这样就能把事件发送到 Firebase 统计分析服务了。如果有需要，我们还可以同时注册多个统计分析服务的 Provider。</p><p>第二步是使用<code>TrackingRepo</code>的实例来发送事件。例如，下面的代码演示了如何发送页面事件：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">trackingRepo.</span><span style="color:#79B8FF;">trackScreenviews</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ScreenviewsTrackingEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">screenName</span><span style="color:#E1E4E8;">: L10n.Tracking.momentsScreen, </span><span style="color:#79B8FF;">screenClass</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">describing</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">)))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">trackingRepo.</span><span style="color:#005CC5;">trackScreenviews</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ScreenviewsTrackingEvent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">screenName</span><span style="color:#24292E;">: L10n.Tracking.momentsScreen, </span><span style="color:#005CC5;">screenClass</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">describing</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">)))</span></span></code></pre></div><p>我们通过调用<code>trackingRepo</code>的<code>trackScreenviews()</code>方法来发送进入朋友圈页面的事件。</p><h4 id="_3-为不同统计分析服务自定义事件内容" tabindex="-1">3. 为不同统计分析服务自定义事件内容 <a class="header-anchor" href="#_3-为不同统计分析服务自定义事件内容" aria-label="Permalink to &quot;3. 为不同统计分析服务自定义事件内容&quot;">​</a></h4><p>不同的统计分析服务所接收的事件内容可能不一样。这里我们以点赞按钮事件为例子看看如何为 Firebase 服务自定义事件。</p><p>首先我们看一下<code>LikeActionTrackingEvent</code>的定义：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LikeActionTrackingEvent</span><span style="color:#E1E4E8;">: ActionTrackingEventType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> momentID: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> userID: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LikeActionTrackingEvent</span><span style="color:#24292E;">: ActionTrackingEventType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> momentID: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> userID: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该事件只有两个属性，其中<code>momentID</code>表示点赞的朋友圈信息的 ID，而<code>userID</code>表示点赞用户的 ID。为了特定给 Firebase 统计分析服务定制事件的内容，我们定义了一个名叫<code>FirebaseActionTrackingEvent</code>的空协议：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FirebaseActionTrackingEvent</span><span style="color:#E1E4E8;">: ActionTrackingEventType { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FirebaseActionTrackingEvent</span><span style="color:#24292E;">: ActionTrackingEventType { }</span></span></code></pre></div><p>然后给<code>LikeActionTrackingEvent</code>提供了一个类型扩展，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LikeActionTrackingEvent</span><span style="color:#E1E4E8;">: FirebaseActionTrackingEvent {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parameters: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">Any</span><span style="color:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">AnalyticsParameterItemID</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;moment-id-</span><span style="color:#9ECBFF;">\\(momentID)</span><span style="color:#9ECBFF;">-user-id-</span><span style="color:#9ECBFF;">\\(userID)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">AnalyticsParameterItemName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;moment-like&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LikeActionTrackingEvent</span><span style="color:#24292E;">: FirebaseActionTrackingEvent {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> parameters: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">Any</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">AnalyticsParameterItemID</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;moment-id-</span><span style="color:#032F62;">\\(momentID)</span><span style="color:#032F62;">-user-id-</span><span style="color:#032F62;">\\(userID)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">AnalyticsParameterItemName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;moment-like&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该类型扩展使得<code>LikeActionTrackingEvent</code>遵循了<code>FirebaseActionTrackingEvent</code>协议，并为<code>parameters</code>属性提供了一个默认的实现，在实现里面使用了在 Firebase SDK 里面定义的两个常量：<code>AnalyticsParameterItemID</code>和<code>AnalyticsParameterItemName</code>。当我们使用了这些常量时，Firebase 统计分析后台就会把事件自动映射成选择内容的 Item ID 和名字。</p><p>那提供这样一个类型扩展到底有什么好处呢？我们再看一下<code>FirebaseTrackingProvider</code>里<code>trackAction</code>方法的实现。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackAction</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> FirebaseActionTrackingEvent </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Analytics.</span><span style="color:#79B8FF;">logEvent</span><span style="color:#E1E4E8;">(AnalyticsEventSelectContent, </span><span style="color:#79B8FF;">parameters</span><span style="color:#E1E4E8;">: event.parameters)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackAction</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: TrackingEventType) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> FirebaseActionTrackingEvent </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Analytics.</span><span style="color:#005CC5;">logEvent</span><span style="color:#24292E;">(AnalyticsEventSelectContent, </span><span style="color:#005CC5;">parameters</span><span style="color:#24292E;">: event.parameters)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在该方法里面，我们通过<code>guard</code>语句检查传递进来的事件是否为<code>FirebaseActionTrackingEvent</code>类型，如果不是，程序就直接退出了。如果是，就调用<code>event.parameters</code>属性来获取事件的内容，这时候就会调用类型扩展里<code>parameters</code>属性的默认实现，类型扩展方法能保证<code>FirebaseTrackingProvider</code>只发送遵循了<code>FirebaseActionTrackingEvent</code>协议的事件类型。</p><p>假如我们需要为其他统计分析服务自定义事件的内容时，该怎么做呢？例如，为 Mixpanel 自定义事件，可以通过下面的代码实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LikeActionTrackingEvent</span><span style="color:#E1E4E8;">: MixpanelActionTrackingEvent {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parameters: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">Any</span><span style="color:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">MixPanelEventKey</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;moment-id-</span><span style="color:#9ECBFF;">\\(momentID)</span><span style="color:#9ECBFF;">-user-id-</span><span style="color:#9ECBFF;">\\(userID)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">MixPanelEventName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;moment-like&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LikeActionTrackingEvent</span><span style="color:#24292E;">: MixpanelActionTrackingEvent {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> parameters: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">Any</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">MixPanelEventKey</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;moment-id-</span><span style="color:#032F62;">\\(momentID)</span><span style="color:#032F62;">-user-id-</span><span style="color:#032F62;">\\(userID)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">MixPanelEventName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;moment-like&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过类型扩展来遵循不同的事件协议，我们就可以很灵活地为各个统计分析服务发送不同内容的事件了。</p><p>最后，我们再看一下如何发送<code>LikeActionTrackingEvent</code>事件，具体实现如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">trackingRepo.</span><span style="color:#79B8FF;">trackAction</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">LikeActionTrackingEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">momentID</span><span style="color:#E1E4E8;">: momentID, </span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: userID))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">trackingRepo.</span><span style="color:#005CC5;">trackAction</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">LikeActionTrackingEvent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">momentID</span><span style="color:#24292E;">: momentID, </span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: userID))</span></span></code></pre></div><p><code>trackingRepo</code>会自动把事件发送到各个注册的统计分析服务中，并且根据<code>LikeActionTrackingEvent</code>的类型扩展来准备不同的事件内容。</p><h4 id="_4-firebase-统计分析报告" tabindex="-1">4. Firebase 统计分析报告 <a class="header-anchor" href="#_4-firebase-统计分析报告" aria-label="Permalink to &quot;4. Firebase 统计分析报告&quot;">​</a></h4><p>完成了上述的开发工作后，我们就能收集用户行为数据了，并且还可以在 Firebase 的统计分析服务上查看相关的报告。下图是 Moments App 的统计分析报告：</p>`,48),d=s('<p>我们可以在 Analyics 菜单下看到各种各样的报告，如事件统计、设备类型以及用户留存率等。<strong>这些报告能协助我们更准确地做出产品决定</strong>，比如，通过 iOS 活跃版本的报告能帮我们决定 App 支持 iOS 的最低版本号，假如绝大部分用户都使用 iOS 13 以上的版本，我们就引入 SwiftUI 和 Combine 等新技术。</p><p>我建议你仔细阅读统计分析服务的相关文档，并熟悉各种统计报告以及指标，从而助力产品的增长。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲，我们讲述了如何架构一个灵活的统计分析模块，有了这个模块，我们就可以很方便地支持和替换不同的统计分析服务。同时，我们还以 Firebase 为例子讲述了如何配置 Firebase 的统计分析服务。总之，我希望你能好好地利用这些分析报告和指标，进而助力产品的增长。</p><p><strong>思考题</strong></p><blockquote><p>请参照 FirebaseTrackingProvider 来编写一个遵循 TrackingProvider 协议的 SystemLogTrackingProvider 来打印日志，在该 Provider 里通过系统提供的 os_log() 方法来打印事件。</p></blockquote><p>请把你的答案写到留言区或者提交一个 PR 哦。下一讲我将介绍如何使用 Firebase 的崩溃报告服务去解决线上的 Bug，记得按时来听课。</p><p><strong>源码地址</strong></p><blockquote><p>统计分析模块源码地址：<a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Analytics?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Analytics</a></p></blockquote>',9);function F(g,v,k,u,C,A){const n=l("Image");return e(),o("div",null,[t,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/41/51/Cgp9HWCrgiGAUFjAAAD2MmgiiDs166.png"}),r,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/41/51/Cgp9HWCrgi6ACes3AA-s5YKaXBk146.png"}),E,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/41/51/Cgp9HWCrgjaAcJ61AA15f4d4K2M666.png"}),i,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M00/41/51/Cgp9HWCrglCAZTKOAAM0NmFucJo862.png"}),y,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/41/59/CioPOWCrgm-ACTRxAAUh4NIuWcI675.png"}),d])}const _=p(c,[["render",F]]);export{T as __pageData,_ as default};
