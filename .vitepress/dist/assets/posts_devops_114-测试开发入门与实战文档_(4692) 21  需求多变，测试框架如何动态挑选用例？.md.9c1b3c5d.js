import{_ as o,j as e,o as t,g as c,k as a,h as l,Q as p,s}from"./chunks/framework.e0c66c3f.js";const R=JSON.parse('{"title":"动态挑选测试用例的应用场景 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4692) 21  需求多变，测试框架如何动态挑选用例？.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4692) 21  需求多变，测试框架如何动态挑选用例？.md","lastUpdated":1696338709000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4692) 21  需求多变，测试框架如何动态挑选用例？.md"},y=p('<p>上一讲，我们学习了当测试环境变化时，测试框架如何实现测试环境秒切换。在实现这个功能的同时，我也实现了测试用例查找、测试模块自动导入、测试数据加载，以及测试用例执行等动作。这一讲，我们就来学习如何实现测试用例动态挑选。</p><p>在正式开始本节课前，请你在命令行中执行如下命令：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install iTesting</span></span></code></pre></div><p>安装好后，在命令行执行如下命令：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> env dev </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k test_demo </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m myMark</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> env dev </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k test_demo </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m myMark</span></span></code></pre></div><p>观察程序的输出值，然后更改命令执行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">env qa </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k login </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m myMark</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">env qa </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k login </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m myMark</span></span></code></pre></div><p>再次观察程序的输出值，看看两者之间有什么不同。</p><p>本讲我将带你实现一个可以自由切换测试环境，自主挑选测试用例的测试框架。</p>',9),E=p(`<h3 id="动态挑选测试用例的应用场景" tabindex="-1">动态挑选测试用例的应用场景 <a class="header-anchor" href="#动态挑选测试用例的应用场景" aria-label="Permalink to &quot;动态挑选测试用例的应用场景&quot;">​</a></h3><p>测试用例动态挑选的应用场景很多，常见的有如下几种：</p><ul><li><p>开发更改了某个模块的代码，仅需要回归这个模块的测试用例时；</p></li><li><p>开发人员 Merge 代码到 Develop 分支时，标记了冒烟测试标签的测试用例需要被触发；</p></li><li><p>在生产环境执行测试时，敏感的测试用例（例如涉及金钱）需要被忽略执行；</p></li><li><p>当测试框架需要对有特定标签的测试用例执行额外的操作时。</p></li></ul><h3 id="pytest-中实现测试用例动态挑选的方法" tabindex="-1">pytest 中实现测试用例动态挑选的方法 <a class="header-anchor" href="#pytest-中实现测试用例动态挑选的方法" aria-label="Permalink to &quot;pytest 中实现测试用例动态挑选的方法&quot;">​</a></h3><p>在 pytest 框架中，我们知道测试用例的挑选可以有很多方式，我们来回顾下它们的用法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 1. 按照测试类执行</span></span>
<span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的所有测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest test_lagou.py::TestLaGou</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 按照测试方法执行</span></span>
<span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的，名字为test_get_new_message的测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest test_lagou.py::TestLaGou::test_get_new_message</span></span>
<span class="line"><span style="color:#6A737D;"># 3. 使用-m 标签 </span></span>
<span class="line"><span style="color:#6A737D;"># 选中同时带有mark1和mark2这个标签的测试用例运行</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;mark1 and mark2&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1的测试用例，不运行mark2的测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;mark1 and not mark2&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1或 mark2标签的所有测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&quot;mark1 or mark</span></span>
<span class="line"><span style="color:#6A737D;"># 4. 使用-k标签</span></span>
<span class="line"><span style="color:#6A737D;"># 按照文件名称匹配。运行test_lagou.py下的所有的测试</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&quot;test_lagou.py&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 按照文件名字部分匹配。只有运行测试文件名字中含有lagou字样，则它含有的所有测试用例都会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&quot;lagou&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 1. 按照测试类执行</span></span>
<span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的所有测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest test_lagou.py::TestLaGou</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 按照测试方法执行</span></span>
<span class="line"><span style="color:#6A737D;"># 运行test_lagou.py文件下的，类名是TestLaGou下的，名字为test_get_new_message的测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest test_lagou.py::TestLaGou::test_get_new_message</span></span>
<span class="line"><span style="color:#6A737D;"># 3. 使用-m 标签 </span></span>
<span class="line"><span style="color:#6A737D;"># 选中同时带有mark1和mark2这个标签的测试用例运行</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;mark1 and mark2&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1的测试用例，不运行mark2的测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;mark1 and not mark2&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 选中带有mark1或 mark2标签的所有测试用例</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&quot;mark1 or mark</span></span>
<span class="line"><span style="color:#6A737D;"># 4. 使用-k标签</span></span>
<span class="line"><span style="color:#6A737D;"># 按照文件名称匹配。运行test_lagou.py下的所有的测试</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&quot;test_lagou.py&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 按照文件名字部分匹配。只有运行测试文件名字中含有lagou字样，则它含有的所有测试用例都会执行</span></span>
<span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&quot;lagou&quot;</span></span></code></pre></div><p>使用上述用法，可以根据用户的需要，仅运行满足条件的测试用例。</p><p>如果让你来实现这些功能，你该如何做呢？</p><h3 id="自研框架如何实现测试用例动态挑选" tabindex="-1">自研框架如何实现测试用例动态挑选 <a class="header-anchor" href="#自研框架如何实现测试用例动态挑选" aria-label="Permalink to &quot;自研框架如何实现测试用例动态挑选&quot;">​</a></h3><p>下面，我仍以上一讲中实现的 iTesting 这个框架为例，为你详细讲解如何实现这些功能。</p><p>首先，查看项目结构：</p>`,11),i=p(`<p>更改 tests 目录下 test_iTesting.py 这个文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">staticmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(username, password):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 这里写你的业务逻辑，简单起见，我返回True</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n%s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> username)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n%s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> password)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestDemo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_login</span><span style="color:#E1E4E8;">(self, username, password, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> Demo.login(username, password) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_demo1</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_demo2</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">staticmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(username, password):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 这里写你的业务逻辑，简单起见，我返回True</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n%s</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> username)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n%s</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> password)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestDemo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_login</span><span style="color:#24292E;">(self, username, password, expected):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> Demo.login(username, password) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_demo1</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_demo2</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span></code></pre></div><p>在这个文件中，我新增加了两个测试方法 test_demo1 和 test_demo2。</p><h4 id="_1-实现类似-pytest-的-k-功能" tabindex="-1">1.实现类似 pytest 的 -k 功能 <a class="header-anchor" href="#_1-实现类似-pytest-的-k-功能" aria-label="Permalink to &quot;1.实现类似 pytest 的 -k 功能&quot;">​</a></h4><p>现在，我来实现类似 pytest 的 -k 功能，步骤如下：</p><ul><li><p>添加命令行参数 -k；</p></li><li><p>更改 main.py 中的 run 方法，在发现测试文件、测试类、测试函数时，与 -k 提供的参数值对比，如果 -k 提供的参数是测试文件名、测试类名、测试函数名的子集时，执行这个测试。</p></li></ul><p>（1）第一步， 添加命令行参数 -k。更改 main.py 文件的 parse_options 方法，增加 -k 参数。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse_options</span><span style="color:#E1E4E8;">(user_options</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> argparse.ArgumentParser(</span><span style="color:#FFAB70;">prog</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     </span><span style="color:#FFAB70;">usage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Demo Automation Framework, Search wechat account iTesting for more information&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;-env&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;dev&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">choices</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;dev&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;qa&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;staging&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;prod&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Env parameter&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;-k&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;only run tests which match the given substring expression&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> user_options:</span></span>
<span class="line"><span style="color:#E1E4E8;">        args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sys.argv[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shlex.split(user_options)</span></span>
<span class="line"><span style="color:#E1E4E8;">    options, un_known </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.parse_known_args(args)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> options.env:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">想了解更多测试框架内容吗？请关注公众号iTesting&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Currently the env are set to: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> options.env)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> options.k:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你设置了-k参数，将会运行所有包括&#39;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&#39;的测试文件，测试类，测试函数&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> options.k)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> options</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse_options</span><span style="color:#24292E;">(user_options</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> argparse.ArgumentParser(</span><span style="color:#E36209;">prog</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                     </span><span style="color:#E36209;">usage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Demo Automation Framework, Search wechat account iTesting for more information&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;-env&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;dev&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#E36209;">choices</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;dev&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;qa&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;staging&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;prod&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Env parameter&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;-k&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;only run tests which match the given substring expression&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> user_options:</span></span>
<span class="line"><span style="color:#24292E;">        args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sys.argv[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shlex.split(user_options)</span></span>
<span class="line"><span style="color:#24292E;">    options, un_known </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.parse_known_args(args)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> options.env:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">想了解更多测试框架内容吗？请关注公众号iTesting&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Currently the env are set to: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> options.env)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> options.k:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你设置了-k参数，将会运行所有包括&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;的测试文件，测试类，测试函数&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> options.k)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> options</span></span></code></pre></div><p>parse_options 这个方法，是利用了 argparse 这个标准库，接收命令行参数并解析。在这里添加了 -k 参数，它没有默认值。</p><p>（2）接着我们看第二步，更改 main.py 里的 run 方法：</p>`,10),F=p('<p>由于代码层次较多，贴出来的代码不具备可读性，为了讲解方便，我直接贴出 run 方法源码的截图。</p><blockquote><p>为尽可能简洁地向你展示代码原理，并让你看得懂，我选择直接展示最原始、没有优化的代码。在实际工作中，我们应该遵循本课程前面章节中讲的测试框架的设计原则，尽可能抽象共用模块。</p></blockquote><p>仔细观察上述代码，上述代码实现了测试用例按照名称挑选运行，请重点关注以下几行。</p><ul><li>第 85 行，首先判断命令行参数 -k 存在不存在。</li></ul><p>如参数不存在，直接执行 121 行及以后的代码逻辑，即执行所有测试用例；如果存在，代码走第 87 行。</p><ul><li>第 87 行，找出测试 Module（即.py 测试文件）名中含有 -k 参数值的所有测试 module。</li></ul><p>如果测试 Module 中包括 -k 的参数值，那么整个 Module 下的所有测试用例都会执行；如果不包括，则代码走第 98 行。</p><ul><li>第 98 行，如果测试 Module 中不包括 -k 的参数值，则找出测试类名中含有 -k 的参数值的所有测试类。</li></ul><p>如果测试类名中含有 -k 的参数值（第 103 行），则这个测试类下的所有测试用例都会被执行；如果不存在，则代码走 111 行。</p><ul><li>第 111 行，找出测试函数名中含有 -k 参数值的所有测试函数。</li></ul><p>如果测试函数名中含有 -k 参数值（第 116 行），则执行这个测试函数；反之，则不执行这个测试函数。</p><blockquote><p>仔细观察，你会发现其实我没有写执行模块，即当前我们仅仅查找出了应该运行的测试文件、测试类和测试方法。但我并没有真正运行它，只是打印出该运行的函数名称。</p></blockquote><p>（3）下面我在命令行中分别<strong>根据需要来运行下我的程序</strong>，看看结果有什么不同。</p><ul><li><strong>按照测试文件名挑选测试用例执行</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#032F62;">&#39;iTesting&#39;</span></span></code></pre></div><p>运行结果如下：</p>',16),u=p('<p>可以看到，test_iTesting.py 下的所有测试用例都被执行了。</p><ul><li><strong>按照测试类名挑选测试用例执行</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">env dev </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k TestDem</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">env dev </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k TestDem</span></span></code></pre></div><p>运行结果如下：</p>',4),d=p('<p>可以看到，TestDem 匹配到了 TestDemo 这个测试类，所以测试类 TestDemo 下的所有测试用例都被执行了。</p><ul><li><strong>按照测试函数名挑选测试用例执行</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">env dev </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k login</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">env dev </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k login</span></span></code></pre></div><p>运行结果如下：</p>',4),g=p(`<p>可以看到，login 匹配到了如下目录 (test_iTesting/TestDemo/) 下的 test_login 函数，所以 test_login 被执行了。</p><p>通过给定 -k 参数，我们实现了根据名字模糊匹配并执行测试用例。</p><h4 id="_2-实现类似-pytest-的-m-功能" tabindex="-1">2.实现类似 pytest 的 -m 功能 <a class="header-anchor" href="#_2-实现类似-pytest-的-m-功能" aria-label="Permalink to &quot;2.实现类似 pytest 的 -m 功能&quot;">​</a></h4><p>现在，我来实现类似 pytest 的 -m 功能，步骤如下：</p><ul><li><p>添加 -m 这个命令行参数；</p></li><li><p>给所有测试类，测试函数打标签；</p></li><li><p>当通过 -m 给定的标签等于测试类/测试函数的标签时，执行这个测试类/测试函数。</p></li></ul><p><strong>（1）第一步，添加命令行参数 -m。</strong></p><p>更改 main.py 文件的 parse_options 方法，增加 -m 参数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse_options</span><span style="color:#E1E4E8;">(user_options</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> argparse.ArgumentParser(</span><span style="color:#FFAB70;">prog</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     </span><span style="color:#FFAB70;">usage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Demo Automation Framework, Search wechat account iTesting for more information&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;-env&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;dev&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">choices</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;dev&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;qa&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;staging&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;prod&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Env parameter&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;-k&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;only run tests which match the given substring expression&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.add_argument(</span><span style="color:#9ECBFF;">&quot;-m&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;only run tests with same marks&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> user_options:</span></span>
<span class="line"><span style="color:#E1E4E8;">        args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sys.argv[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shlex.split(user_options)</span></span>
<span class="line"><span style="color:#E1E4E8;">    options, un_known </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.parse_known_args(args)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> options.env:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">想了解更多测试框架内容吗？请关注公众号iTesting&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Currently the env are set to: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> options.env)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> options.k:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你设置了-k参数，将会运行所有包括&#39;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&#39;的测试文件，测试类，测试函数&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> options.k)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> options.m:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你设置了-m参数，将会运行所有标签为&#39;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&#39;的测试类，测试函数&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> options.m)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> options</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse_options</span><span style="color:#24292E;">(user_options</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> argparse.ArgumentParser(</span><span style="color:#E36209;">prog</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                     </span><span style="color:#E36209;">usage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Demo Automation Framework, Search wechat account iTesting for more information&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;-env&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;dev&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#E36209;">choices</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;dev&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;qa&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;staging&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;prod&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Env parameter&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;-k&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;only run tests which match the given substring expression&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    parser.add_argument(</span><span style="color:#032F62;">&quot;-m&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;only run tests with same marks&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> user_options:</span></span>
<span class="line"><span style="color:#24292E;">        args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sys.argv[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shlex.split(user_options)</span></span>
<span class="line"><span style="color:#24292E;">    options, un_known </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.parse_known_args(args)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> options.env:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">想了解更多测试框架内容吗？请关注公众号iTesting&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Currently the env are set to: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> options.env)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> options.k:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你设置了-k参数，将会运行所有包括&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;的测试文件，测试类，测试函数&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> options.k)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> options.m:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你设置了-m参数，将会运行所有标签为&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;的测试类，测试函数&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> options.m)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> options</span></span></code></pre></div><p><strong>（2）第二步，给所有测试类和测试方法类打标签，这就要用到装饰器。</strong></p><p>注意，这里我为了使得代码量尽量少，演示尽量简单，先行定义以下打标签要遵循的规则：</p><p>当前仅实现给测试方法打标签，给测试类打标签暂不实现。</p><p>在 main.py 文件中定义一个新函数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 确保以下第二行放入main.py开头的导入语句</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> functools </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> wraps</span></span>
<span class="line"><span style="color:#6A737D;"># 新增一个类装饰器用来装饰测试用例</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestMark</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, mark</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.mark </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mark</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__call__</span><span style="color:#E1E4E8;">(self, func):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">@wraps</span><span style="color:#E1E4E8;">(func)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrapper</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> func</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">setattr</span><span style="color:#E1E4E8;">(wrapper, </span><span style="color:#9ECBFF;">&quot;__test_case_mark__&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.mark)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wrapper</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 确保以下第二行放入main.py开头的导入语句</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> functools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> wraps</span></span>
<span class="line"><span style="color:#6A737D;"># 新增一个类装饰器用来装饰测试用例</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestMark</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, mark</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.mark </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mark</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__call__</span><span style="color:#24292E;">(self, func):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">@wraps</span><span style="color:#24292E;">(func)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrapper</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> func</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">setattr</span><span style="color:#24292E;">(wrapper, </span><span style="color:#032F62;">&quot;__test_case_mark__&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.mark)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wrapper</span></span></code></pre></div><p>接着，更改 test_iTesting.py 文件，给测试类 TestDemo 下的测试方法加上装饰器 TestMark：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 此文件中，其他部分不变，只更改如下部分</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestDemo</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_login</span><span style="color:#E1E4E8;">(self, username, password, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> Demo.login(username, password) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@TestMark</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myMark&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_demo_true</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_demo_false</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 此文件中，其他部分不变，只更改如下部分</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestDemo</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_login</span><span style="color:#24292E;">(self, username, password, expected):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> Demo.login(username, password) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@TestMark</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myMark&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_demo_true</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_demo_false</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span></code></pre></div><p>最后，把识别 -m 的逻辑添加到 run 方法。为了演示方便，我这里展示出，当没有指定 -k 参数时，判断 -m 标签的源码：</p>`,16),_=s("p",null,"请观察：",-1),m=s("ul",null,[s("li",null,[s("p",null,"第 142 行，判断测试函数有没有 -m 参数。没有 -m 参数，执行第 148 行及以后的代码，执行完就结束；有 -m 参数，继续第 2 步。")]),s("li",null,[s("p",null,[l('有 -m 的情况下，查看测试函数的"'),s("strong",null,"test_cse_mark"),l('"这个属性，并且要判断它的值等不等于用户传入的 -m 的参数值（第 143 行）。如果都相同，则将执行这个测试函数；如果不相同，则不执行这个测试函数。')])])],-1),h=s("p",null,"注意：关于 -m 的判断，是在最后 func_name.startswith('test') 这里判断的（这个语句在上述的 141 行），这是个独立的判断，即所有存在 func_name.startswith('test') 这句话后，都应该加 -m 的判断。明白了这个之后，我们把其余存在 func_name.startswith('test') 这句话的地方进行更改，更改后的 run 方法如下所示。",-1),A=s("p",null,"现在在 -k 参数存在的情况下，将 -m 参数的代码补上：",-1),C=p('<p>在 -k 存在的情形下，添加 -m 方法很简单，找到<strong>func_name.startswith(&#39;test&#39;)</strong> ，<strong>然后执行替换操作即可。</strong></p><p><strong>（3）下面我们来运行下，看看效果如何。</strong></p><ul><li><strong>不指定 -k，只指定 -m。</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m myMark</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m myMark</span></span></code></pre></div><p>运行结束后，查看结果如下：</p>',5),k=p('<p>因为只有 test_demo_true 这个函数有 myMark 的标签，所以只有它执行了。</p><ul><li><strong>指定 -k，匹配到测试 Module，不指定 -m。</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k iTesting</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k iTesting</span></span></code></pre></div><p>运行结束后，查看结果如下：</p>',4),D=p('<p>因为匹配到了 test_iTesting.py，所以 test_iTesting.py 下面所有测试用例都被执行了。</p><ul><li><strong>指定 -k，匹配到测试类TestDemo，指定 -m。</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k TestDemo </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m myMark</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k TestDemo </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m myMark</span></span></code></pre></div><p>运行结束后，查看结果如下：</p>',4),v=p('<p>虽然 TestDemo 匹配了 test_iTesting.py 文件夹下的两个函数 test_demo_true 和 test_demo_false。但是因为只有 test_demo_true 用 myMark 这个标签，故只有它被运行了。</p><ul><li><strong>指定 -k，匹配到测试函数 test_login，指定 -m。</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iTesting </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k login </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m myMark</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iTesting </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k login </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m myMark</span></span></code></pre></div><p>运行结束后，查看结果如下：</p>',4),T=s("p",null,"可以看到虽然 -k 和 -m 分别匹配到了 test_login 和 test_demo_true 两个函数，但是没有一个函数是同时满足 -k 和 -m 的条件的，所以没有测试用例被执行。",-1),B=s("h3",{id:"总结",tabindex:"-1"},[l("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),q=s("p",null,"这一讲，我们详细讨论并解释了如何动态挑选测试用例。从 pytest 动态挑选测试用例的方法入手，我以 -k 和 -m 两个参数为例，逐一编码实现了与 pytest 类似的功能。本节课内容较多，代码层次也更深，希望你能实际动手操作一遍以加深理解。",-1),f=s("p",null,"至此，我已经带领大家实现了自研框架的大部分功能，包括测试用例查找、测试模块自动导入、测试数据加载、测试用例执行，以及测试用例按照名称或者标签挑选执行。当然，为了尽可能清晰简洁地向你讲解代码实现的原理，我们本讲的代码采用流水线的方式，不具备美感。",-1),b=s("p",null,"在实际工作中，真正可用的自研框架，其代码一定比这个复杂得多，而且更抽象，解耦也会做得比这个好。所以本讲希望你以了解其原理及实现过程为主，勤加练习。",-1),w=s("p",null,'关于自研框架更深入层次的技术介绍，请关注我的公众号 iTesting 并回复"测试框架"查看。',-1),S=s("hr",null,null,-1),P=s("p",null,[s("a",{href:"https://wj.qq.com/s2/7506053/9b01",target:"_blank",rel:"noreferrer"},"课程评价入口，挑选 5 名小伙伴赠送小礼品～")],-1);function M(x,N,V,I,L,j){const n=e("Image");return t(),c("div",null,[y,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/6F/32/Ciqc1F-04WiAP9iEAAKhLoT-LeY024.png"}),E,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/6E/63/CgqCHl-yOxSABdE2AAAm5n_ipOg309.png"}),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/6E/63/CgqCHl-yOyWAeLCeAAJpknK3K_8677.png"}),F,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/6E/63/CgqCHl-yOy-AXXxOAABDFUpgYpA425.png"}),u,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/6E/58/Ciqc1F-yOzaAbdY9AAA8ijJKju0603.png"}),d,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/6E/63/CgqCHl-yOz6AH5gyAAAtjErpPmQ798.png"}),l(),g,a(n,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image/M00/6F/32/Ciqc1F-04i-Ac9-VAAZ3Auqhaqc236.png"}),_,m,h,A,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/6E/63/CgqCHl-yO1SALrpAAAQGpdPczGE534.png"}),C,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/6E/58/Ciqc1F-yO1qAWNesAAAyDWcA6rs157.png"}),k,a(n,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image/M00/6F/3D/CgqCHl-04kWAB7B4AAXWh8-D_X8908.png"}),D,a(n,{alt:"图片11.png",src:"https://s0.lgstatic.com/i/image/M00/6F/32/Ciqc1F-04lKAYl1cAAP1t2IV2dQ598.png"}),v,a(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/6E/63/CgqCHl-yO2-AYJHmAAAxIb3T0pY276.png"}),T,B,q,f,b,w,S,P])}const G=o(r,[["render",M]]);export{R as __pageData,G as default};
