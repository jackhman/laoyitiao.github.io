import{_ as e,j as o,o as r,g as t,k as p,h as n,s,Q as l}from"./chunks/framework.4e7d56ce.js";const x=JSON.parse('{"title":"设计 SpringHealth 中的消息发布场景 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4767) 22  消息发布：如何使用 Spring Cloud Stream 实现消息发布者和消费者？（上）.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4767) 22  消息发布：如何使用 Spring Cloud Stream 实现消息发布者和消费者？（上）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4767) 22  消息发布：如何使用 Spring Cloud Stream 实现消息发布者和消费者？（上）.md"},E=s("p",null,"从上一课时的内容中，我们对 Spring Cloud Stream 的基本架构有了全面的了解。今天，就让我们回到案例，来看看如何使用 Spring Cloud Stream 来完成消息发布者和消费者的构建。",-1),i=s("h3",{id:"设计-springhealth-中的消息发布场景",tabindex:"-1"},[n("设计 SpringHealth 中的消息发布场景 "),s("a",{class:"header-anchor",href:"#设计-springhealth-中的消息发布场景","aria-label":'Permalink to "设计 SpringHealth 中的消息发布场景"'},"​")],-1),y=s("p",null,"在《消息驱动：如何理解 Spring 中对消息处理机制的抽象过程？》课时中，我们已经给出了在 SpringHealth 案例系统中应用消息处理机制的一个典型场景。类似 SpringHealth 这样的系统中的用户信息变动并不会太频繁，所以很多时候我们会想到通过缓存系统来存放用户信息。而一旦用户信息发生变化，user-service 可以发送一个事件，给到相关的订阅者并更新缓存信息，如下图所示：",-1),d=s("p",null,"用户信息更新场景中的事件驱动架构",-1),u=s("p",null,"一般而言，事件在命名上通常采用过去时态以表示该事件所代表的动作已经发生。所以，我们把这里的用户信息变更事件命名为 UserInfoChangedEvent。通常，我们也会建议使用一个独立的事件消费者来订阅这个事件，就像上图中的 consumer-service1 一样。但为了保持 SpringHealth 系统的简单性，我们不想再单独构建一个微服务，而是选择把事件订阅和消费的相关功能同样放在了 intervention-service 中，如下图所示：",-1),g=s("p",null,"简化之后的用户信息更新场景处理流程",-1),h=s("p",null,"接下来我们关注于上图中的事件发布者 user-service。在 user-service 中需要设计并实现使用 Spring Cloud Stream 发布消息的各个组件，包括 Source、Channel 和 Binder。我们围绕 UserInfoChangedEvent 事件给出 user-service 内部的整个实现流程，如下图所示：",-1),v=l(`<p>user-service 消息发布实现流程</p><p>在 user-service 中，势必会存在一个对用户信息的修改操作，这个修改操作会上图中的触发 UserInfoChangedEvent 事件，然后该事件将被构建成一个消息并通过 UserInfoChangedSource 进行发送。UserInfoChangedSource 就是一种 Spring Cloud Stream 中的具体 Source 实现。然后 UserInfoChangedSource 使用默认的名为&quot;output&quot;的 Channel 进行消息发布。在案例中，我们将同时演示 Kafka 和 RabbitMQ，所以 Binder 组件分别封装了这两个消息中间件。</p><h3 id="实现消息发布者" tabindex="-1">实现消息发布者 <a class="header-anchor" href="#实现消息发布者" aria-label="Permalink to &quot;实现消息发布者&quot;">​</a></h3><p>站在消息处理的角度讲，这个消息发布流程并不复杂，主要的实现过程是如何使用 Spring Cloud Stream 完成 Source 组件的创建、Binder 组件的配置以及如何与 user-service 进行集成，让我们一起来看一下。</p><h4 id="使用-enablebinding-注解" tabindex="-1">使用 @EnableBinding 注解 <a class="header-anchor" href="#使用-enablebinding-注解" aria-label="Permalink to &quot;使用 @EnableBinding 注解&quot;">​</a></h4><p>无论是消息发布者还是消息消费者，首先都需要引入 spring-cloud-stream 依赖，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-stream&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-stream&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>而在 SpringHealth 案例中，如果我们使用 Kafka 作为我们的消息中间件系统，那么也需要引入 spring-cloud-starter-stream-kafka 依赖，如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-stream-kafka&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-stream-kafka&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>对应的，RabbitMQ 就需要引入 spring-cloud-starter-stream-rabbit 依赖，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-stream-rabbit&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-stream-rabbit&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>对于消息发布者而言，它在 Spring Cloud Stream 体系中扮演着 Source 的角色，<a href="mailto:%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%9C%A8user-service%E7%9A%84Bootstrap%E7%B1%BB%E4%B8%AD%E6%B7%BB%E5%8A%A0@EnableBinding(Source.class)" target="_blank" rel="noreferrer">所以我们需要在 user-service 的 Bootstrap 类中标明这个 Spring</a>Boot 应用程序是一个 Source 组件。调整之后的 UserApplication 类如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableBinding</span><span style="color:#E1E4E8;">(Source.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(UserApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableBinding</span><span style="color:#24292E;">(Source.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(UserApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，我们在原有 UserApplication 上我们添加了一个 @EnableBinding(Source.class) 注解，该注解的作用就是告诉 Spring Cloud Stream 这个 Spring Boot 应用程序是一个消息发布者，需要绑定到消息中间件，实现两者之间的连接。@EnableBinding 注解定义比较简单，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">EnableBinding</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EnableBinding</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以使用一个或者多个接口作为该注解的参数。在上面的代码中，我们使用了 Source 接口，表示与消息中间件绑定的是一个消息发布者。在下一课时中，我们在介绍消息消费者时同样也会使用到这个 @EnableBinding 注解。</p><h4 id="定义-event" tabindex="-1">定义 Event <a class="header-anchor" href="#定义-event" aria-label="Permalink to &quot;定义 Event&quot;">​</a></h4><p>接下来，需要给出 UserInfoChangedEvent 的定义。对于事件的定义也存在一些通用的做法，事件类型、事件所对应的操作、事件对应的业务领域对象等是一个完整事件定义所必需的元素。因此，我们将 UserInfoChangedEvent 定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoChangedEvent</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String type;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事件所对应的操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String operation;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事件对应的领域模型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoChangedEvent</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事件类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String type;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事件所对应的操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String operation;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事件对应的领域模型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>定义完事件的数据结构之后，接下来我们就需要通过 Source 接口来具体实现消息的发布。</p><h4 id="创建-source" tabindex="-1">创建 Source <a class="header-anchor" href="#创建-source" aria-label="Permalink to &quot;创建 Source&quot;">​</a></h4><p>在 Spring Cloud Stream 中，Source 是一个接口，包含了一个发送消息的 MessageChannel，让我们简单回顾一下该接口的定义，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Source</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String OUTPUT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;output&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Output</span><span style="color:#E1E4E8;">(Source.OUTPUT)</span></span>
<span class="line"><span style="color:#E1E4E8;">    MessageChannel </span><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Source</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String OUTPUT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;output&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Output</span><span style="color:#24292E;">(Source.OUTPUT)</span></span>
<span class="line"><span style="color:#24292E;">    MessageChannel </span><span style="color:#6F42C1;">output</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用这个接口的方式也很简单，我们只需要在业务代码中直接进行注入即可，就像在使用一个普通的 Javabean 一样。完整的 UserInfoChangedSource 类如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.cloud.stream.messaging.Source;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.messaging.support.MessageBuilder;</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoChangedSource</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Source source;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(UserInfoChangedSource.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoChangedSource</span><span style="color:#E1E4E8;">(Source </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishUserInfoChangedEvent</span><span style="color:#E1E4E8;">(UserInfoOperation </span><span style="color:#FFAB70;">operation</span><span style="color:#E1E4E8;">, User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">         logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Sending message for UserId: {}&quot;</span><span style="color:#E1E4E8;">, user.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">        UserInfoChangedEvent change </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoChangedEvent</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            UserInfoChangedEvent.class.</span><span style="color:#B392F0;">getTypeName</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            operation.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            user);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        source.</span><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(MessageBuilder.</span><span style="color:#B392F0;">withPayload</span><span style="color:#E1E4E8;">(change).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishUserInfoAddedEvent</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">publishUserInfoChangedEvent</span><span style="color:#E1E4E8;">(UserInfoOperation.ADD, user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishUserInfoUpdatedEvent</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">publishUserInfoChangedEvent</span><span style="color:#E1E4E8;">(UserInfoOperation.UPDATE, user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishUserInfoDeletedEvent</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">publishUserInfoChangedEvent</span><span style="color:#E1E4E8;">(UserInfoOperation.DELETE, user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.cloud.stream.messaging.Source;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.messaging.support.MessageBuilder;</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoChangedSource</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Source source;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(UserInfoChangedSource.class);</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoChangedSource</span><span style="color:#24292E;">(Source </span><span style="color:#E36209;">source</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishUserInfoChangedEvent</span><span style="color:#24292E;">(UserInfoOperation </span><span style="color:#E36209;">operation</span><span style="color:#24292E;">, User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">         logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Sending message for UserId: {}&quot;</span><span style="color:#24292E;">, user.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">        UserInfoChangedEvent change </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoChangedEvent</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            UserInfoChangedEvent.class.</span><span style="color:#6F42C1;">getTypeName</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">            operation.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">            user);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        source.</span><span style="color:#6F42C1;">output</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(MessageBuilder.</span><span style="color:#6F42C1;">withPayload</span><span style="color:#24292E;">(change).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishUserInfoAddedEvent</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">publishUserInfoChangedEvent</span><span style="color:#24292E;">(UserInfoOperation.ADD, user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishUserInfoUpdatedEvent</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">publishUserInfoChangedEvent</span><span style="color:#24292E;">(UserInfoOperation.UPDATE, user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishUserInfoDeletedEvent</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">publishUserInfoChangedEvent</span><span style="color:#24292E;">(UserInfoOperation.DELETE, user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到我们创建了一个 publishUserInfoChangedEvent 方法，在该方法中，我们首先构建了 UserInfoChangedEvent 事件并通过 Spring Messaging 模块所提供的 MessageBuilder 工具类将它转换为消息中间件所能发送的Message对象。然后，我们调用 Source 接口的 output() 方法将事件发送出去，这里的 output() 方法背后使用的就是一个具体的 MessageChannel。</p><h4 id="配置-binder" tabindex="-1">配置 Binder <a class="header-anchor" href="#配置-binder" aria-label="Permalink to &quot;配置 Binder&quot;">​</a></h4><p>为了通过 UserInfoChangedSource 将代表 UserInfoChangedEvent 的消息发送到正确的地址，我们需要在 application.yml 配置文件中配置 Binder 信息。Binder 信息中存在一些通用的配置项，例如如果要想把消息发布到消息中间件，就需要知道消息所发送的通道或者说目的地 Destination，以及序列化方式，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  cloud:</span></span>
<span class="line"><span style="color:#E1E4E8;">    stream:</span></span>
<span class="line"><span style="color:#E1E4E8;">      bindings:</span></span>
<span class="line"><span style="color:#E1E4E8;">        output:</span></span>
<span class="line"><span style="color:#E1E4E8;">          destination:  userInfoChangedTopic</span></span>
<span class="line"><span style="color:#E1E4E8;">          content-type: application/json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  cloud:</span></span>
<span class="line"><span style="color:#24292E;">    stream:</span></span>
<span class="line"><span style="color:#24292E;">      bindings:</span></span>
<span class="line"><span style="color:#24292E;">        output:</span></span>
<span class="line"><span style="color:#24292E;">          destination:  userInfoChangedTopic</span></span>
<span class="line"><span style="color:#24292E;">          content-type: application/json</span></span></code></pre></div><p>另一方面，因为 Binder 完成了与具体消息中间件的整合过程，所以需要针对特定的消息中间件来提供专门的配置项。我们先来看在使用 Kafka 的场景下 Binder 的配置方法，相关配置项如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  cloud:</span></span>
<span class="line"><span style="color:#E1E4E8;">    stream:</span></span>
<span class="line"><span style="color:#E1E4E8;">      bindings:</span></span>
<span class="line"><span style="color:#E1E4E8;">        output:</span></span>
<span class="line"><span style="color:#E1E4E8;">          destination:  userInfoChangedTopic</span></span>
<span class="line"><span style="color:#E1E4E8;">          content-type: application/json</span></span>
<span class="line"><span style="color:#E1E4E8;">      kafka:</span></span>
<span class="line"><span style="color:#E1E4E8;">        binder:</span></span>
<span class="line"><span style="color:#E1E4E8;">          zk-nodes: localhost</span></span>
<span class="line"><span style="color:#E1E4E8;">	      brokers: localhost</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  cloud:</span></span>
<span class="line"><span style="color:#24292E;">    stream:</span></span>
<span class="line"><span style="color:#24292E;">      bindings:</span></span>
<span class="line"><span style="color:#24292E;">        output:</span></span>
<span class="line"><span style="color:#24292E;">          destination:  userInfoChangedTopic</span></span>
<span class="line"><span style="color:#24292E;">          content-type: application/json</span></span>
<span class="line"><span style="color:#24292E;">      kafka:</span></span>
<span class="line"><span style="color:#24292E;">        binder:</span></span>
<span class="line"><span style="color:#24292E;">          zk-nodes: localhost</span></span>
<span class="line"><span style="color:#24292E;">	      brokers: localhost</span></span></code></pre></div><p>在以上配置项中，除了前面介绍的通用配置型之外，因为 Kafka 的运行依赖于 Zookeeper，所以&quot;kafka&quot;配置段使用 Kafka 作为消息中间件平台，并将其 Zookeeper 地址以及 Kafka 自身的地址都指向了本地。</p><p>相比 Kafka，RabbitMQ 的配置稍微复杂一点，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  cloud:</span></span>
<span class="line"><span style="color:#E1E4E8;">    stream:</span></span>
<span class="line"><span style="color:#E1E4E8;">      bindings:</span></span>
<span class="line"><span style="color:#E1E4E8;">        default:</span></span>
<span class="line"><span style="color:#E1E4E8;">          content-type: application/json</span></span>
<span class="line"><span style="color:#E1E4E8;">          binder: rabbitmq</span></span>
<span class="line"><span style="color:#E1E4E8;">        output:</span></span>
<span class="line"><span style="color:#E1E4E8;">          destination: userInfoChangedExchange</span></span>
<span class="line"><span style="color:#E1E4E8;">          contentType: application/json        </span></span>
<span class="line"><span style="color:#E1E4E8;">      binders:</span></span>
<span class="line"><span style="color:#E1E4E8;">        rabbitmq:</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: rabbit</span></span>
<span class="line"><span style="color:#E1E4E8;">          environment:</span></span>
<span class="line"><span style="color:#E1E4E8;">            spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">              rabbitmq:</span></span>
<span class="line"><span style="color:#E1E4E8;">                host: 127.0.0.1</span></span>
<span class="line"><span style="color:#E1E4E8;">                port: 5672</span></span>
<span class="line"><span style="color:#E1E4E8;">                username: guest</span></span>
<span class="line"><span style="color:#E1E4E8;">                password: guest</span></span>
<span class="line"><span style="color:#E1E4E8;">                virtual-host: /</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  cloud:</span></span>
<span class="line"><span style="color:#24292E;">    stream:</span></span>
<span class="line"><span style="color:#24292E;">      bindings:</span></span>
<span class="line"><span style="color:#24292E;">        default:</span></span>
<span class="line"><span style="color:#24292E;">          content-type: application/json</span></span>
<span class="line"><span style="color:#24292E;">          binder: rabbitmq</span></span>
<span class="line"><span style="color:#24292E;">        output:</span></span>
<span class="line"><span style="color:#24292E;">          destination: userInfoChangedExchange</span></span>
<span class="line"><span style="color:#24292E;">          contentType: application/json        </span></span>
<span class="line"><span style="color:#24292E;">      binders:</span></span>
<span class="line"><span style="color:#24292E;">        rabbitmq:</span></span>
<span class="line"><span style="color:#24292E;">          type: rabbit</span></span>
<span class="line"><span style="color:#24292E;">          environment:</span></span>
<span class="line"><span style="color:#24292E;">            spring:</span></span>
<span class="line"><span style="color:#24292E;">              rabbitmq:</span></span>
<span class="line"><span style="color:#24292E;">                host: 127.0.0.1</span></span>
<span class="line"><span style="color:#24292E;">                port: 5672</span></span>
<span class="line"><span style="color:#24292E;">                username: guest</span></span>
<span class="line"><span style="color:#24292E;">                password: guest</span></span>
<span class="line"><span style="color:#24292E;">                virtual-host: /</span></span></code></pre></div><p>在以上配置项中，我们设置了 destination为userInfoChangedExchange 后会在 RabbitMQ 中创建一个名为&quot;userInfoChangedExchange&quot;的交换器，并把 Spring Cloud Stream 的消息输出通道绑定到该交换器。同时，我们在 bindings 配置段中指定了一个&quot;default&quot;子配置段，用于指定默认所使用的 binder。在这个示例中，我们将这个默认 binder 命名为&quot;rabbitmq&quot;并在&quot;binders&quot;配置段中指定了运行 RabbitMQ 的相关参数。请注意 RabbitMQ 和 Kafka 这两款消息中间件在配置方式上各个配置项的层级以及内容上的差别。</p><h4 id="集成服务" tabindex="-1">集成服务 <a class="header-anchor" href="#集成服务" aria-label="Permalink to &quot;集成服务&quot;">​</a></h4><p>最后，我们要做的事情就是在 user-service 中集成消息发布功能。在前一版本的 UserService 类的基础之上，我们添加对 UserInfoChangedSource 的使用过程，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfoChangedSource userInfoChangedSource;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">getUserById</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(userId).</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">userName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addUser</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">         userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">         userInfoChangedSource.</span><span style="color:#B392F0;">publishUserInfoAddedEvent</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateUser</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">         userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">         userInfoChangedSource.</span><span style="color:#B392F0;">publishUserInfoUpdatedEvent</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteUser</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">         userRepository.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">         userInfoChangedSource.</span><span style="color:#B392F0;">publishUserInfoDeletedEvent</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfoChangedSource userInfoChangedSource;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">getUserById</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(userId).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">userName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addUser</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">         userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">         userInfoChangedSource.</span><span style="color:#6F42C1;">publishUserInfoAddedEvent</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateUser</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">         userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">         userInfoChangedSource.</span><span style="color:#6F42C1;">publishUserInfoUpdatedEvent</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteUser</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">         userRepository.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">         userInfoChangedSource.</span><span style="color:#6F42C1;">publishUserInfoDeletedEvent</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，我们在增加、修改和删除用户操作时都添加了发布用户信息变更事件的机制。注意到在 UserService 中我们并没有构建具体的 UserInfoChangedEvent 事件，而是把这部分操作放在了 UserInfoChangedSource中，目的也是为了降低各个层次之间的依赖关系，并封装对事件的统一操作。</p><p>至此，完整的消息发布者实现完毕。接下来，我们来看看消息消费场景应该如何进行设计。</p><h3 id="设计-springhealth-中的消息消费场景" tabindex="-1">设计 SpringHealth 中的消息消费场景 <a class="header-anchor" href="#设计-springhealth-中的消息消费场景" aria-label="Permalink to &quot;设计 SpringHealth 中的消息消费场景&quot;">​</a></h3><p>我们继续讨论 SpringHealth 案例，根据整个消息交互流程，intervention-service 就是 UserInfoChangedEvent 事件的消费者。作为该事件的消费者，intervention-service 需要把变更后的用户信息更新到缓存中。</p><p>在 Spring Cloud Stream 中，负责消费消息的是 Sink 组件，因此，我们同样围绕 UserInfoChangedEvent 事件给出 intervention-service 内部的整个实现流程，如下图所示：</p>`,43),b=l(`<p>intervention-service 消息消费实现流程</p><p>在上图中，UserInfoChangedEvent 事件通过消息中间件发送到 Spring Cloud Stream 中，Spring Cloud Stream 通过 Sink 获取消息并交由 UserInfoChangedSink 实现具体的消费逻辑。可以想象在这个 UserInfoChangedSink 中会负责实现缓存相关的处理逻辑。</p><p>让我们把消息消费过程与 intervention-service 中的业务流程串联起来。我们知道在 intervention-service 中存在 UserServiceClient 类，其核心方法 getUserByUserName 如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(String userName){</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">        ResponseEntity&lt;</span><span style="color:#F97583;">UserMapper</span><span style="color:#E1E4E8;">&gt; restExchange </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                restTemplate.</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;http://zuulservice:5555/springhealth/user/users/username/{userName}&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        HttpMethod.GET,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, UserMapper.class, userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span></span>
<span class="line"><span style="color:#E1E4E8;">        UserMapper user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> restExchange.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(String userName){</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">        ResponseEntity&lt;</span><span style="color:#D73A49;">UserMapper</span><span style="color:#24292E;">&gt; restExchange </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                restTemplate.</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;http://zuulservice:5555/springhealth/user/users/username/{userName}&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        HttpMethod.GET,</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, UserMapper.class, userName);</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"><span style="color:#24292E;">        UserMapper user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> restExchange.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们直接通过调用 user-service 远程获取 User 信息。我们知道用户账户信息变更是一个低频事件，而每次通过 UserServiceClient 实现远程调用的成本很高且没有必要。现在我们可以通过 Spring Cloud Stream 获取用户信息更新的消息了，UserServiceClient 就有了优化的空间。基本思路就是缓存用户信息，并通过消息触发缓存更新，然后我们先从缓存中获取用户信息，只有在缓存中找不到对应的用户信息时才会发起远程调用。下图展示了采用这一设计思想之后的流程图：</p>`,5),C=s("p",null,"用户账户更新流程图",-1),F=s("p",null,"在上图中，我们看到 user-service 异步发送的 UserInfoChangedEvent 事件会被消费，该消息的处理器 UserInfoChangedSink 所消费，然后 UserInfoChangedSink 将更新后的用户账户信息进行缓存以供 intervertion-service 使用。显然，UserInfoChangedSink 是整个流程的关键。至于如何实现这个 UserInfoChangedSink，我们放在下一课时中进行详细展开并给出代码示例。",-1),m=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),A=s("p",null,"今天，我们基于用户信息更新这一特定业务场景，介绍了使用 Spring Cloud Stream 来完成对 SpringHealth 系统中消息发布消费流程的建模，并提供了针对消息发布者的实现过程。可以看到，只要理解了 Spring Cloud Stream 的基本架构，使用该框架发送消息的开发更多的是配置工作。",-1),f=s("p",null,"这里给你留一道思考题：在 Spring Cloud Stream 配置不同的 Binder 时，有哪些公共配置项，又有哪些是针对具体消息中间件的特定配置项？",-1),S=s("p",null,"下一课时将继续讨论基于 Spring Cloud Stream 的开发过程，我们关注于消息消费者的实现，以及自定义消息通道、消费者分组以及消息分区等高级主题的实现方式。",-1);function U(I,B,k,D,_,q){const a=o("Image");return r(),t("div",null,[E,i,y,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/76/EF/CgqCHl_IvYmAAdzPAABKd1VzQCI715.png"}),n(),d,u,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/76/E4/Ciqc1F_IvgSAQ-k8AABA--dRdWc848.png"}),n(),g,h,p(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/76/EF/CgqCHl_IvjSAX_W6AAHB35Qu21g693.png"}),n(),v,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/76/F0/CgqCHl_IvlKADfCXAAA8UAK4iIs978.png"}),n(),b,p(a,{alt:"5.png",src:"https://s0.lgstatic.com/i/image/M00/76/F0/CgqCHl_IvmGADKwmAAFJvHum5Z8651.png"}),n(),C,F,m,A,f,S])}const M=e(c,[["render",U]]);export{x as __pageData,M as default};
