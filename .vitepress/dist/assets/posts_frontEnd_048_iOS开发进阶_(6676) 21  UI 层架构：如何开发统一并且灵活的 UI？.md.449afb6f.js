import{_ as o,j as e,o as t,g as c,k as n,h as p,s as a,Q as l}from"./chunks/framework.e0c66c3f.js";const h=JSON.parse('{"title":"通用列表 UI 模块的架构与实现 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6676) 21  UI 层架构：如何开发统一并且灵活的 UI？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6676) 21  UI 层架构：如何开发统一并且灵活的 UI？.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6676) 21  UI 层架构：如何开发统一并且灵活的 UI？.md"},E=a("p",null,"作为 iOS 开发者，我们每天都花大量的时间来开发和调试 UI，那有没有什么办法帮助我们把繁杂的 UI 开发工作简化成有章可循的步骤，从而提高开发的效率呢？在这一讲中，我就和你聊聊，如何架构和开发一套灵活的 UI 框架。",-1),y=a("h3",{id:"通用列表-ui-模块的架构与实现",tabindex:"-1"},[p("通用列表 UI 模块的架构与实现 "),a("a",{class:"header-anchor",href:"#通用列表-ui-模块的架构与实现","aria-label":'Permalink to "通用列表 UI 模块的架构与实现"'},"​")],-1),i=a("p",null,"列表 UI 是 App 最为常用的 UI 页面，它可以帮我们通过滚动的方式支持无限的内容。为了简化大量的重复性劳动，我在 Moments App 架构实现了一个通用的列表 UI 模块。下面是这个模块的架构图。",-1),d=l(`<p>这个框架使用了<code>UIViewController</code>和<code>UITableView</code>来封装列表页面。其核心是<code>BaseTableViewController</code>。<code>BaseTableViewController</code>继承于<code>BaseViewController</code>，而<code>BaseViewController</code>继承自<code>UIViewController</code>。</p><p>我们先看看<code>BaseViewController</code>的具体实现，代码示例如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseViewController</span><span style="color:#E1E4E8;">: UIViewController {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">lazy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> disposeBag: DisposeBag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">nibName</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">bundle</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@available</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">unavailable</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;We don&#39;t support init view controller from a nib.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nibName</span><span style="color:#E1E4E8;"> nibNameOrNil: </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">bundle</span><span style="color:#E1E4E8;"> nibBundleOrNil: Bundle</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">nibName</span><span style="color:#E1E4E8;">: nibNameOrNil, </span><span style="color:#79B8FF;">bundle</span><span style="color:#E1E4E8;">: nibBundleOrNil)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@available</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">unavailable</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;We don&#39;t support init view controller from a nib.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">required</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init?</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">coder</span><span style="color:#E1E4E8;">: NSCoder) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">fatalError</span><span style="color:#E1E4E8;">(L10n.Development.fatalErrorInitCoderNotImplemented)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseViewController</span><span style="color:#24292E;">: UIViewController {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">lazy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> disposeBag: DisposeBag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">nibName</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bundle</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@available</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">unavailable</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;We don&#39;t support init view controller from a nib.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nibName</span><span style="color:#24292E;"> nibNameOrNil: </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">bundle</span><span style="color:#24292E;"> nibBundleOrNil: Bundle</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">nibName</span><span style="color:#24292E;">: nibNameOrNil, </span><span style="color:#005CC5;">bundle</span><span style="color:#24292E;">: nibBundleOrNil)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@available</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">unavailable</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;We don&#39;t support init view controller from a nib.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">required</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init?</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">coder</span><span style="color:#24292E;">: NSCoder) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">fatalError</span><span style="color:#24292E;">(L10n.Development.fatalErrorInitCoderNotImplemented)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为 Moments App 是使用纯代码的方式来编写 UI，所以<code>BaseViewController</code>重写了<code>init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)</code>和<code>init?(coder: NSCoder)</code>两个方法，并直接抛出异常。这样做使得所有继承<code>BaseViewController</code>的子类，都没办法通过 Storyboard 或者 Xib 文件来生成 ViewController 的实例。因为我们使用 RxSwift，<code>BaseViewController</code>还定义了一个<code>disposeBag</code>属性来方便管理所有 Obervable 序列的订阅。</p><p><code>BaseTableViewController</code>继承了<code>BaseViewController</code>，并使用<code>UITableView</code>来封装一个通用的列表页面。我们一起看看它是怎样实现的。</p><p>在 MVVM 模式里，View 依赖于 ViewModel。作为 View 的<code>BaseTableViewController</code>依赖于 ViewModel 层的<code>ListViewModel</code>协议，这使得<code>BaseTableViewController</code>只依赖于接口而不是具体的类型，从而提高了程序的可扩展性。</p><p>同时，<code>BaseTableViewController</code>还定义了三个属性来显示 UI 控件：</p><ul><li><p><code>tableView</code>属性用于显示一个 TableView；</p></li><li><p><code>activityIndicatorView</code>属性用于显示俗称小菊花的加载器；</p></li><li><p><code>errorLabel</code>用于显示出错信息的标签控件。</p></li></ul><p>以下是属性定义的代码示例。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> viewModel: ListViewModel</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tableView: UITableView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.separatorStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">none</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.rowHeight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UITableView.automaticDimension</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.estimatedRowHeight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.contentInsetAdjustmentBehavior </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .never</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UIColor.designKit.background</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> activityIndicatorView: UIActivityIndicatorView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">style</span><span style="color:#E1E4E8;">: .large)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> errorLabel: UILabel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.isHidden </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.textColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UIColor.designKit.primaryText</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> L10n.MomentsList.errorMessage</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> viewModel: ListViewModel</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tableView: UITableView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.separatorStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">none</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.rowHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UITableView.automaticDimension</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.estimatedRowHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.contentInsetAdjustmentBehavior </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .never</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UIColor.designKit.background</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> activityIndicatorView: UIActivityIndicatorView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">style</span><span style="color:#24292E;">: .large)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> errorLabel: UILabel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.isHidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.textColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UIColor.designKit.primaryText</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> L10n.MomentsList.errorMessage</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了方便初始化 UIKit 的控件，我写了一个公共的<code>configure()</code>方法，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">AnyObject</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> object: T, </span><span style="color:#B392F0;">closure</span><span style="color:#E1E4E8;">: (T) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> T {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">closure</span><span style="color:#E1E4E8;">(object)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> object</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">AnyObject</span><span style="color:#24292E;">&gt;(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> object: T, </span><span style="color:#6F42C1;">closure</span><span style="color:#24292E;">: (T) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> T {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">closure</span><span style="color:#24292E;">(object)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> object</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了该方法，我们就可以把所有初始化操作都放在一个闭包（Closure）里面，方便代码的维护。</p><p>接着我们看一下<code>setupUI()</code>方法的代码实现。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupUI</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    view.backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UIColor.designKit.background</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableViewCellsToRegister.</span><span style="color:#79B8FF;">forEach</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        tableView.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">forCellReuseIdentifier</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    [tableView, activityIndicatorView, errorLabel].</span><span style="color:#79B8FF;">forEach</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        view.</span><span style="color:#79B8FF;">addSubview</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupUI</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    view.backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UIColor.designKit.background</span></span>
<span class="line"><span style="color:#24292E;">    tableViewCellsToRegister.</span><span style="color:#005CC5;">forEach</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        tableView.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">value</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">forCellReuseIdentifier</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.key)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    [tableView, activityIndicatorView, errorLabel].</span><span style="color:#005CC5;">forEach</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        view.</span><span style="color:#005CC5;">addSubview</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法负责设置 UI 的样式，例如设置背景颜色，注册 TableView Cell 和添加子控件。</p><p>配置完 UI 的样式以后，下一步是配置自动布局的约束（Auto Layout Constraint）。当使用 UIKit 作为 View 层的时候，我推荐使用苹果公司所推荐的<strong>自动布局</strong>来排版 UI 页面。</p><p>自动布局能帮助我们支持不同分辨率和屏幕对比率的页面，而且苹果公司每年都在不断优化自动布局引擎的性能。不过，它也有一个缺点，那就是手写自动布局的约束代码会十分冗长，为此我使用一个名叫<strong>SnapKit 的库</strong> 来进行简化。下面我们就通过<code>setupConstraints()</code>的代码，来看看 SnapKit 的威力。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupConstraints</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.edges.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    activityIndicatorView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.center.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    errorLabel.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.center.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupConstraints</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    tableView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.edges.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    activityIndicatorView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.center.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    errorLabel.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.center.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上述代码所示，当使用 SnapKit 来配置自动布局的约束时，我们需要调用它的扩展方法<code>makeConstraints</code>，然后把所有约束的配置都放到闭包里面。在这里，我是通过<code>edges.equalToSuperview()</code>把<code>tableView</code>延伸到它的父组件（也就是<code>BaseTableViewController</code>的<code>view</code>）中，然后通过<code>center.equalToSuperview()</code>方法把<code>activityIndicatorView</code>和<code>errorLabel</code>都分别居中。</p><p>假如不使用 SnapKit，要完成延伸<code>tableView</code>的操作，就需要以下的代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">NSLayoutConstraint.</span><span style="color:#79B8FF;">activate</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableView.leadingAnchor.</span><span style="color:#79B8FF;">constraint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">: view.leadingAnchor),</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableView.trailingAnchor.</span><span style="color:#79B8FF;">constraint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">: view.trailingAnchor),</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableView.topAnchor.</span><span style="color:#79B8FF;">constraint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">: view.topAnchor),</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableView.bottomAnchor.</span><span style="color:#79B8FF;">constraint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">: view.bottomAnchor)</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">NSLayoutConstraint.</span><span style="color:#005CC5;">activate</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    tableView.leadingAnchor.</span><span style="color:#005CC5;">constraint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">: view.leadingAnchor),</span></span>
<span class="line"><span style="color:#24292E;">    tableView.trailingAnchor.</span><span style="color:#005CC5;">constraint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">: view.trailingAnchor),</span></span>
<span class="line"><span style="color:#24292E;">    tableView.topAnchor.</span><span style="color:#005CC5;">constraint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">: view.topAnchor),</span></span>
<span class="line"><span style="color:#24292E;">    tableView.bottomAnchor.</span><span style="color:#005CC5;">constraint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">: view.bottomAnchor)</span></span>
<span class="line"><span style="color:#24292E;">])</span></span></code></pre></div><p>我们不得不分别配置每一个约束，并放进一个数组里面，然后传递给静态方法<code>NSLayoutConstraint.activate</code>。 所以你看，使用 SnapKit 多么方便。</p><p>完成了 UI 的布局以后，我们看一下数据绑定。Moments App 使用了 RxSwift 把 ViewModel 层和 View 层进行绑定，绑定的代码在<code>setupBindings()</code>函数里，具体如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupBindings</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableView.refreshControl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">UIRefreshControl</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> refreshControl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.rx.</span><span style="color:#79B8FF;">controlEvent</span><span style="color:#E1E4E8;">(.valueChanged)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;"> { refreshControl.isRefreshing }</span></span>
<span class="line"><span style="color:#E1E4E8;">            .bind { [</span><span style="color:#F97583;">weak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">] </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">loadItems</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RxTableViewSectionedReloadDataSource</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">SectionModel</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, ListItemViewModel</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">configureCell</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;">, tableView, indexPath, item </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cell </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tableView.</span><span style="color:#79B8FF;">dequeueReusableCell</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">withIdentifier</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">describing</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">: item)), </span><span style="color:#79B8FF;">for</span><span style="color:#E1E4E8;">: indexPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">        (cell </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> ListItemCell)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">with</span><span style="color:#E1E4E8;">: item)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cell</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    viewModel.listItems</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: tableView.rx.</span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">dataSource</span><span style="color:#E1E4E8;">: dataSource))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    viewModel.hasError</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: errorLabel.rx.isHidden)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupBindings</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    tableView.refreshControl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">UIRefreshControl</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> refreshControl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.rx.</span><span style="color:#005CC5;">controlEvent</span><span style="color:#24292E;">(.valueChanged)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">filter</span><span style="color:#24292E;"> { refreshControl.isRefreshing }</span></span>
<span class="line"><span style="color:#24292E;">            .bind { [</span><span style="color:#D73A49;">weak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">] </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">loadItems</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RxTableViewSectionedReloadDataSource</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">SectionModel</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, ListItemViewModel</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">configureCell</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;">, tableView, indexPath, item </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cell </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tableView.</span><span style="color:#005CC5;">dequeueReusableCell</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">withIdentifier</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">describing</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">type</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">: item)), </span><span style="color:#005CC5;">for</span><span style="color:#24292E;">: indexPath)</span></span>
<span class="line"><span style="color:#24292E;">        (cell </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> ListItemCell)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">update</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">with</span><span style="color:#24292E;">: item)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cell</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    viewModel.listItems</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: tableView.rx.</span><span style="color:#005CC5;">items</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">dataSource</span><span style="color:#24292E;">: dataSource))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    viewModel.hasError</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: errorLabel.rx.isHidden)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个函数由三部分组成，第一部分是通过 RxSwift 和 RxCocoa ，把<code>UIRefreshControl</code>控件里的<code>isRefreshing</code>事件和<code>loadItems()</code>函数绑定起来。当用户下拉刷新控件的时候会调用<code>loadItems()</code>函数来刷新列表的数据。</p><p>第二部分是把 TableView Cell 控件与 ViewModel 的<code>listItems</code>Subject 属性绑定起来，当<code>listItems</code>发出新的事件时，我们会调用<code>ListItemCell</code>的<code>update(with viewModel: ListItemViewModel)</code>方法来更新 UI。<strong>经过了这一绑定，UI 就能随着 ViewModel 的数据变化而自动更新。</strong></p><p>第三部分与第二部分类似，都是把 ViewModel 与 View 层的控件进行绑定。在这里，我们把 ViewModel 的<code>hasError</code>Subject 属性绑定到<code>errorLabel.rx.isHidden</code>属性来控制<code>errorLabel</code>是否可见。</p><p>你可能注意到在<code>errorLabel</code>后面有<code>.rx</code>属性，这是 RxCocoa 为<code>UILabel</code>控件所提供的一个扩展，它为<code>isHidden</code>属性提供了响应式编程的功能。有了这一功能，它就可以与 ViewModel 的 Subject 属性进行绑定，从而实现自动更新。</p><p>数据绑定以后，我们一起看看<code>loadItems()</code>函数的实现。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadItems</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    viewModel.hasError.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    viewModel.</span><span style="color:#79B8FF;">loadItems</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">observeOn</span><span style="color:#E1E4E8;">(MainScheduler.instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">do</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onDispose</span><span style="color:#E1E4E8;">: { [</span><span style="color:#F97583;">weak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.activityIndicatorView.rx.isAnimating.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.tableView.refreshControl</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">endRefreshing</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">startWith</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">distinctUntilChanged</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: activityIndicatorView.rx.isAnimating)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadItems</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    viewModel.hasError.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    viewModel.</span><span style="color:#005CC5;">loadItems</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">observeOn</span><span style="color:#24292E;">(MainScheduler.instance)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">do</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onDispose</span><span style="color:#24292E;">: { [</span><span style="color:#D73A49;">weak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.activityIndicatorView.rx.isAnimating.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.tableView.refreshControl</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">endRefreshing</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">startWith</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">distinctUntilChanged</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: activityIndicatorView.rx.isAnimating)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>loadItems()</code>方法用于加载数据。当我们第一次进入朋友圈页面的时候，或者用户下拉刷新控件的时候，就会调用该方法来重新加载数据。</p><p>该方法主要做两项工作，第一项是调用<code>viewModel.hasError.onNext(false)</code>来更新 ViewModel 的<code>hasError</code>属性， 它能让 UI 上的错误标签信息消失。</p><p>从代码中你可以看到，尽管我们想更新 UI 层的<code>errorLabel</code>控件，却没有直接通过<code>errorLabel.isHidden = true</code>的方式来更新，而是通过 ViewModel 的<code>hasError</code>属性来完成。这是因为我要保证 View/UI 层都是由 ViewModel 驱动，通过单方向的数据流来减少 Bug ，从而提高代码的可维护性。</p><p><code>loadItems()</code>方法的第二项工作，是让 ViewModel 去加载数据并绑定到<code>activityIndicatorView</code>控件的<code>isAnimating</code>属性上。因为我们需要在主排程器上执行 UI 任务，因此调用了<code>.observeOn(MainScheduler.instance)</code>，把所有任务都安排到主排程器上。</p><p>当 ViewModel 的<code>loadItems()</code>方法开始执行的时候，先通过<code>.startWith(true)</code>来让<code>activityIndicatorView</code>启动动画效果。当 ViewModel 的<code>loadItems()</code>方法返回数据时，把结果数据通过<code>.map { false }</code>方法来返回<code>false</code>，从而使得<code>activityIndicatorView</code>停止动画效果。</p><p>假如用户在调用 ViewModel 的<code>loadItems()</code>方法的过程中，退出列表页面，我们通过<code>.do(onDispose:{})</code>方法来停止<code>activityIndicatorView</code>和<code>refreshControl</code>两个控件的刷新动画。</p><p>到此为止，我们已经知道<code>BaseTableViewController</code>是如何通过 TableView 来实现列表 UI 的了。</p><p>为了显现不同的 TableView Cell，接下来我们了解下通用的 Cell 是如何实现的。</p><p>这部分由四个类型所组成，分别是<code>ListItemCell</code>协议及其子结构体<code>BaseTableViewCell</code>，以及<code>ListItemView</code>协议及其子结构体<code>BaseListItemView</code>。</p><p><code>ListItemCell</code>协议的定义非常简单，如下所示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListItemCell</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> viewModel: ListItemViewModel)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListItemCell</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> viewModel: ListItemViewModel)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该协议只包含了一个<code>update(with viewModel: ListItemViewModel)</code>方法来让其子类型根据<code>ListItemViewModel</code>的数据进行更新。</p><p>其子类型<code>BaseTableViewCell</code>的具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseTableViewCell</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">V</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">BaseListItemView</span><span style="color:#E1E4E8;">&gt;: UITableViewCell, ListItemCell {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> view: V</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">: UITableViewCell.CellStyle, </span><span style="color:#B392F0;">reuseIdentifier</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        view </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">style</span><span style="color:#E1E4E8;">: style, </span><span style="color:#79B8FF;">reuseIdentifier</span><span style="color:#E1E4E8;">: reuseIdentifier)</span></span>
<span class="line"><span style="color:#E1E4E8;">        selectionStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">none</span></span>
<span class="line"><span style="color:#E1E4E8;">        contentView.</span><span style="color:#79B8FF;">addSubview</span><span style="color:#E1E4E8;">(view)</span></span>
<span class="line"><span style="color:#E1E4E8;">        view.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.edges.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">required</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init?</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">coder</span><span style="color:#E1E4E8;">: NSCoder) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">fatalError</span><span style="color:#E1E4E8;">(L10n.Development.fatalErrorInitCoderNotImplemented)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> viewModel: ListItemViewModel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        view.</span><span style="color:#79B8FF;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">with</span><span style="color:#E1E4E8;">: viewModel)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseTableViewCell</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">V</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">BaseListItemView</span><span style="color:#24292E;">&gt;: UITableViewCell, ListItemCell {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> view: V</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">: UITableViewCell.CellStyle, </span><span style="color:#6F42C1;">reuseIdentifier</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        view </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">style</span><span style="color:#24292E;">: style, </span><span style="color:#005CC5;">reuseIdentifier</span><span style="color:#24292E;">: reuseIdentifier)</span></span>
<span class="line"><span style="color:#24292E;">        selectionStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">none</span></span>
<span class="line"><span style="color:#24292E;">        contentView.</span><span style="color:#005CC5;">addSubview</span><span style="color:#24292E;">(view)</span></span>
<span class="line"><span style="color:#24292E;">        view.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.edges.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">required</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init?</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">coder</span><span style="color:#24292E;">: NSCoder) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">fatalError</span><span style="color:#24292E;">(L10n.Development.fatalErrorInitCoderNotImplemented)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> viewModel: ListItemViewModel) {</span></span>
<span class="line"><span style="color:#24292E;">        view.</span><span style="color:#005CC5;">update</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">with</span><span style="color:#24292E;">: viewModel)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>BaseTableViewCell</code>是一个<code>UITableViewCell</code>的子类，并遵循了<code>ListItemCell</code>协议，因此它需要实现<code>update(with viewModel: ListItemViewModel)</code>方法。在该方法里面，它直接调用<code>view</code>属性的<code>update(with viewModel: ListItemViewModel)</code>来更新<code>BaseListItemView</code>组件的 UI。</p><p>那为什么我们不把所有 UI 子控件都直接写在 Cell 里，而使用一个额外的<code>BaseListItemView</code>呢？因为这样做可以把<code>BaseListItemView</code>复用到<code>UICollectionView</code>等其他容器中。</p><p>接下来我们一起看看<code>BaseListItemView</code>及其所遵循的<code>ListItemView</code>协议的代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListItemView</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> viewModel: ListItemViewModel)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseListItemView</span><span style="color:#E1E4E8;">: UIView, ListItemView {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">lazy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> disposeBag: DisposeBag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> viewModel: ListItemViewModel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">fatalError</span><span style="color:#E1E4E8;">(L10n.Development.fatalErrorSubclassToImplement)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListItemView</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> viewModel: ListItemViewModel)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseListItemView</span><span style="color:#24292E;">: UIView, ListItemView {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">lazy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> disposeBag: DisposeBag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> viewModel: ListItemViewModel) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">fatalError</span><span style="color:#24292E;">(L10n.Development.fatalErrorSubclassToImplement)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>ListItemView</code>协议只定义了<code>update(with viewModel: ListItemViewModel)</code>接口来通过 ViewModel 更新 UI。因为每个 UI 组件的布局与呈现都可能不一样，因此，<code>BaseListItemView</code>在实现<code>update(with viewModel: ListItemViewModel)</code>方法时，直接抛出了异常，这样能迫使其子类重写该方法。</p><p>上面就是通用列表 UI 模块的架构与实现，有了这一个框架，我们就能快速实现不同的列表页面，下面以朋友圈功能作为例子来看看如何实现一个朋友圈时间轴页面。</p><h3 id="朋友圈时间轴页面的实现" tabindex="-1">朋友圈时间轴页面的实现 <a class="header-anchor" href="#朋友圈时间轴页面的实现" aria-label="Permalink to &quot;朋友圈时间轴页面的实现&quot;">​</a></h3><p>首先我们一起看看朋友圈时间轴页面的架构图。</p>`,53),C=l(`<p><code>MomentsTimelineViewController</code>用于显示朋友圈时间轴页面，其具体代码如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentsTimelineViewController</span><span style="color:#E1E4E8;">: BaseTableViewController {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        viewModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MomentsTimelineViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: UserDataStore.current.userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">viewDidAppear</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> animated: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">viewDidAppear</span><span style="color:#E1E4E8;">(animated)</span></span>
<span class="line"><span style="color:#E1E4E8;">        viewModel.</span><span style="color:#79B8FF;">trackScreenviews</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tableViewCellsToRegister: [</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> : UITableViewCell.</span><span style="color:#F97583;">Type</span><span style="color:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            UserProfileListItemViewModel.reuseIdentifier</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> BaseTableViewCell</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserProfileListItemView</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            MomentListItemViewModel.reuseIdentifier</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> BaseTableViewCell</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MomentListItemView</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">self</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentsTimelineViewController</span><span style="color:#24292E;">: BaseTableViewController {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        viewModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MomentsTimelineViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: UserDataStore.current.userID)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">viewDidAppear</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> animated: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">viewDidAppear</span><span style="color:#24292E;">(animated)</span></span>
<span class="line"><span style="color:#24292E;">        viewModel.</span><span style="color:#005CC5;">trackScreenviews</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tableViewCellsToRegister: [</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> : UITableViewCell.</span><span style="color:#D73A49;">Type</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            UserProfileListItemViewModel.reuseIdentifier</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> BaseTableViewCell</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserProfileListItemView</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            MomentListItemViewModel.reuseIdentifier</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> BaseTableViewCell</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MomentListItemView</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">self</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为<code>BaseViewController</code>已经封装好绝大部分的 UI 处理逻辑，作为子类，<code>MomentsTimelineViewController</code>的实现变得非常简单，只需三部分。</p><p>首先是初始化<code>viewModel</code>。因为<code>BaseViewController</code>通过<code>var viewModel: ListViewModel!</code>来定义<code>viewModel</code>属性，作为子类的<code>MomentsTimelineViewController</code>也必须初始化<code>viewModel</code>属性，否则程序会崩溃。具体来说，我们只需创建一个<code>MomentsTimelineViewModel</code>对象来完成初始化即可。它的实现我在上一讲已经介绍过了，你可以再留意下。</p><p>然后，我在<code>func viewDidAppear(_ animated: Bool)</code>方法里面调用<code>viewModel.trackScreenviews()</code>来让 ViewModel 发送用户行为数据。</p><p>为了帮<code>BaseViewController</code>提供需要注册的 TableView Cell ，最后我重写了<code>tableViewCellsToRegister</code>属性。该属性存放<code>BaseTableViewCell</code>的实例。<code>BaseTableViewCell</code>使用范型（generic）来存放<code>BaseListItemView</code>的子类，这些子类包括<code>UserProfileListItemView</code>和<code>MomentListItemView</code>。</p><p>你可以从下图中看到它们所呈现的 UI 组件。</p>`,7),F=l(`<p><code>MomentsTimelineViewController</code>我们已介绍完毕了，下面咱们以<code>UserProfileListItemView</code>为例，看一下开发子控件的步骤与实现。</p><p><code>UserProfileListItemView</code>用于显示用户自己的资料，例如用户名字，头像和背景图。因为有了通用和统一的 UI 开发框架，每次开发 UI 页面的步骤都是一致的，具体我分为以下几步完成：</p><ol><li><p>初始化 UI 控件的属性；</p></li><li><p>配置 UI 控件的样式；</p></li><li><p>设置自动布局的约束；</p></li><li><p>重写<code>update(with viewModel: ListItemViewModel)</code>方法，根据 ViewModel 的数据来更新 UI。</p></li></ol><p>先看一下初始化 UI 控件属性的代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> backgroundImageView: UIImageView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.contentMode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .scaleAspectFill</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.accessibilityIgnoresInvertColors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> avatarImageView: UIImageView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">asAvatar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cornerRadius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.contentMode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .scaleAspectFill</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.accessibilityIgnoresInvertColors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nameLabel: UILabel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.font </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UIFont.designKit.title3</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.textColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .white</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.numberOfLines </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> backgroundImageView: UIImageView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.contentMode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .scaleAspectFill</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.accessibilityIgnoresInvertColors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> avatarImageView: UIImageView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">asAvatar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cornerRadius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.contentMode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .scaleAspectFill</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.accessibilityIgnoresInvertColors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nameLabel: UILabel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.font </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UIFont.designKit.title3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.textColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .white</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.numberOfLines </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们分别调用<code>configure()</code>函数来初始化三个 UI 控件的属性，<code>backgroundImageView</code>用于显示背景图，<code>avatarImageView</code>用于显示用户头像，而<code>nameLabel</code>用于显示用户名字。</p><p>你可以根据下图，看到它们分别使用在哪里。</p>`,7),u=l(`<p>接着来看在第二步中如何配置 UI 控件的样式，我用<code>setupUI()</code>方法来实现。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupUI</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UIColor.designKit.background</span></span>
<span class="line"><span style="color:#E1E4E8;">    [backgroundImageView, avatarImageView, nameLabel].</span><span style="color:#79B8FF;">forEach</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">addSubview</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupUI</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UIColor.designKit.background</span></span>
<span class="line"><span style="color:#24292E;">    [backgroundImageView, avatarImageView, nameLabel].</span><span style="color:#005CC5;">forEach</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">addSubview</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这里，我使用了 DesignKit 来设置了背景颜色，并把子控件添加到当前 View 里面。</p><p>然后看第三步如何设置自动布局的约束，其实现代码如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupConstraints</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    backgroundImageView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.top.leading.trailing.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.bottom.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Spacing.medium)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.height.</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">(backgroundImageView.snp.width).</span><span style="color:#79B8FF;">multipliedBy</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">priority</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">999</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    avatarImageView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.right.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Spacing.medium)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.bottom.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.height.</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.width.</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    nameLabel.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.right.</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.avatarImageView.snp.left).</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Spacing.medium)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.centerY.</span><span style="color:#79B8FF;">equalTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.avatarImageView.snp.centerY)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupConstraints</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    backgroundImageView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.top.leading.trailing.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.bottom.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Spacing.medium)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.height.</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">(backgroundImageView.snp.width).</span><span style="color:#005CC5;">multipliedBy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">priority</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">999</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    avatarImageView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.right.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Spacing.medium)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.bottom.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.height.</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.width.</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    nameLabel.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.right.</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.avatarImageView.snp.left).</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Spacing.medium)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.centerY.</span><span style="color:#005CC5;">equalTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.avatarImageView.snp.centerY)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中<code>backgroundImageView</code>的顶部和两边都延展到父控件，因为底部需要留白来显示用户头像，因此添加了<code>medium</code>作为间距。背景图片的长宽比是 5:4。</p><p><code>avatarImageView</code>位于父控件的右下角，并设定长度和宽度都为 80pt。<code>nameLabel</code>位于<code>avatarImageView</code>的左边，并与之水平。这样我们就使用 SnapKit 完成用户资料 UI 的布局了。</p><p>最后一部分是调用<code>update()</code>方法来更新 UI，其代码如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> viewModel: ListItemViewModel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> viewModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> UserProfileListItemViewModel </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    backgroundImageView.kf.</span><span style="color:#79B8FF;">setImage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">with</span><span style="color:#E1E4E8;">: viewModel.backgroundImageURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">    avatarImageView.kf.</span><span style="color:#79B8FF;">setImage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">with</span><span style="color:#E1E4E8;">: viewModel.avatarURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">    nameLabel.</span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel.name</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> viewModel: ListItemViewModel) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> UserProfileListItemViewModel </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    backgroundImageView.kf.</span><span style="color:#005CC5;">setImage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">with</span><span style="color:#24292E;">: viewModel.backgroundImageURL)</span></span>
<span class="line"><span style="color:#24292E;">    avatarImageView.kf.</span><span style="color:#005CC5;">setImage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">with</span><span style="color:#24292E;">: viewModel.avatarURL)</span></span>
<span class="line"><span style="color:#24292E;">    nameLabel.</span><span style="color:#005CC5;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel.name</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为<code>UserProfileListItemViewModel</code>已经为<code>UserProfileListItemView</code>准备好呈现所需的所有数据，因此，只要简单的赋值就可以更新 UI 了。</p><p><code>MomentListItemView</code>的代码结构和<code>UserProfileListItemView</code>基本一样，你可以到拉勾教育的代码仓库进行查看。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲中，我为你介绍了如何架构和实现一个通用的列表 UI 模块，有了这个模块，我们按照以下这几个步骤就可以完成 UI 的开发了。</p><ol><li><p>初始化 UI 控件的属性，把 UI 分解成不同的子控件，然后通过<code>configure()</code>来初始化各个控件属性。</p></li><li><p>配置 UI 控件的样式，如配置背景颜色等，并把各个子控件添加到父控件里面。</p></li><li><p>设置自动布局的约束，推荐使用 SnapKit 来简化配置约束的工作。</p></li><li><p>重写<code>update(with viewModel: ListItemViewModel)</code>方法，根据 ViewModel 的数据来更新 UI。如果有数据绑定，那么使用 RxSwift 和 RxCocoa 把 ViewModel 的 Subject 属性绑定到 UI 控件上。如果不需要数据绑定，只需把 ViewModel 准备好的值赋给 UI 控件即可。</p></li></ol><p><strong>思考题</strong></p><blockquote><p>请问你们使用苹果提供的自动布局吗？如果是，是使用原生语法还是类似 SnapKit 那种库呢？或者说使用 Texture 等其他非苹果的框架进行布局？能分享你的使用经验吗？</p></blockquote><p>可以把你的思考写到留言区哦，下一讲，我会介绍如何使用现有架构添加点赞功能。</p><p><strong>源码地址</strong></p><blockquote><p>通用列表 UI 的源码地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Views?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Views</a></p><p>朋友圈时间轴页面实现的源码地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments/Views?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments/Views</a></p></blockquote>`,19);function w(g,m,B,v,b,I){const s=e("Image");return t(),c("div",null,[E,y,i,n(s,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/A9/Cgp9HWCL1DiANqbhAAMguDPxTIw094.png"}),p(),d,n(s,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/3C/B1/CioPOWCL09mAbIiFAAIX3-W1eco290.png"}),p(),C,n(s,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/B3/CioPOWCL3JKAWyl6AAalmHPesaU548.png"}),F,n(s,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/B3/CioPOWCL3LGAfuNrABZKzpfsijg925.png"}),u])}const f=o(r,[["render",w]]);export{h as __pageData,f as default};
