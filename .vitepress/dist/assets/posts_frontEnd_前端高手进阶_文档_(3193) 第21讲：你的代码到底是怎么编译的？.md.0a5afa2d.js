import{_ as a,j as p,o as l,g as o,k as e,h as t,Q as s}from"./chunks/framework.4e7d56ce.js";const g=JSON.parse('{"title":"第21讲：你的代码到底是怎么编译的？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/前端高手进阶_文档/(3193) 第21讲：你的代码到底是怎么编译的？.md","filePath":"posts/frontEnd/前端高手进阶_文档/(3193) 第21讲：你的代码到底是怎么编译的？.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/前端高手进阶_文档/(3193) 第21讲：你的代码到底是怎么编译的？.md"},r=s(`<h1 id="第21讲-你的代码到底是怎么编译的" tabindex="-1">第21讲：你的代码到底是怎么编译的？ <a class="header-anchor" href="#第21讲-你的代码到底是怎么编译的" aria-label="Permalink to &quot;第21讲：你的代码到底是怎么编译的？&quot;">​</a></h1><p>Node.js 的出现，越来越多前端自动化工具涌现出来，包括早期的 Grunt、Gulp 以及现在流行的 webpack。随着这些工具的功能愈发强大，其重要性也在不断提升，成熟的框架都已经将这些工具封装成专用的命令行工具，比如 angular-cli 和 vue-cli。这一课时我们将继续承接前面课程的&quot;硬核&quot;风格，通过分析 webpack(5.0.0-beta.23) 的源码来深入理解其原理。</p><p>webpack 有两个执行入口，分别是通过命令行调用的 bin/webpack.js，以及直接在代码中引用的 lib/webpack.js。我们避开命令参数解析以及进程调用的过程来分析 lib/webpack.js，下面是部分源码（省去了数组型配置及 watch 功能）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (( </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;"> ) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">validateSchema</span><span style="color:#E1E4E8;">(webpackOptionsSchema, options); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> compiler; </span></span>
<span class="line"><span style="color:#E1E4E8;">  compiler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCompiler</span><span style="color:#E1E4E8;">(options); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (callback) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">stats</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      compiler.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> err2, stats); </span></span>
<span class="line"><span style="color:#E1E4E8;">      }); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> compiler; </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webpack</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (( </span><span style="color:#E36209;">options</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;"> ) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">validateSchema</span><span style="color:#24292E;">(webpackOptionsSchema, options); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> compiler; </span></span>
<span class="line"><span style="color:#24292E;">  compiler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCompiler</span><span style="color:#24292E;">(options); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (callback) { </span></span>
<span class="line"><span style="color:#24292E;">    compiler.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">stats</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      compiler.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> err2, stats); </span></span>
<span class="line"><span style="color:#24292E;">      }); </span></span>
<span class="line"><span style="color:#24292E;">    }); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> compiler; </span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>从源码中可以看到，webpack() 函数内部有 3 个重要的操作：<strong>校验配置项</strong> 、<strong>创建编译器</strong> 、<strong>执行编译</strong>。</p><h3 id="校验配置项" tabindex="-1">校验配置项 <a class="header-anchor" href="#校验配置项" aria-label="Permalink to &quot;校验配置项&quot;">​</a></h3><p>校验配置项是通过调用 validateSchema() 函数来实现的，这个函数的内部其实是调用的 <a href="https://www.npmjs.com/package/schema-utils" target="_blank" rel="noreferrer">schema-utils</a> 模块的 validate () 函数 ，validate() 函数支持通过 JSONSchema 规则来校验 json 对象。这些 JSONSchema 规则保存在 schemas/WebpackOptions.json 文件中，对应代码中的 webpackOptionsSchema 变量。</p><p>这里简单介绍一下 JSONSchema，它是通过 JSON 文件来描述 JSON 文件 ，可以用来校验 JSON 对象、生成 mock 数据及描述 JSON 对象结构。下面是一个对 output 参数的部分校验规则。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;Output&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Options affecting the output of the compilation. \`output\` options tell webpack how to write the compiled files to disk.&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     ... </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;$ref&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#/definitions/Path&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">... </span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;definitions&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Path&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;The output directory as **absolute path** (required).&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;Output&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Options affecting the output of the compilation. \`output\` options tell webpack how to write the compiled files to disk.&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     ... </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;$ref&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#/definitions/Path&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">... </span></span>
<span class="line"><span style="color:#032F62;">&quot;definitions&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Path&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;The output directory as **absolute path** (required).&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 &quot;type&quot;: &quot;object&quot; 可以看到 Output 是一个对象，它拥有属性 Path，而这个 P ath 类型定义在 definitions 对象的 Path 属性中，通过 &quot;type&quot;: &quot;string&quot; 可以看到，它是一个字符串类型。WebpackOptions.json 文件内容比较多，有 3000 多行，这里就不多介绍了，有兴趣的同学可以仔细研究。</p><p>一句话概括，validateSchema() 函数通过 JSONSchema 对 options 进行校验，如果不符合配置规则，则退出并在控制台输出格式化的错误信息。这样就能避免因为选项参数不正确而导致程序运行出错。</p><h3 id="创建编译器" tabindex="-1">创建编译器 <a class="header-anchor" href="#创建编译器" aria-label="Permalink to &quot;创建编译器&quot;">​</a></h3><p>创建编译器操作是在 compiler.compile() 函数中调用 createCompiler() 函数来实现的，该函数会返回一个 Compiler 实例。createCompiler() 函数源码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCompiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">rawOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNormalizedWebpackOptions</span><span style="color:#E1E4E8;">(rawOptions); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">applyWebpackOptionsBaseDefaults</span><span style="color:#E1E4E8;">(options); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;">(options.context); </span></span>
<span class="line"><span style="color:#E1E4E8;">  compiler.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeEnvironmentPlugin</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">    infrastructureLogging: options.infrastructureLogging </span></span>
<span class="line"><span style="color:#E1E4E8;">  }).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(options.plugins)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> options.plugins) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> plugin </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        plugin.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(compiler, compiler); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        plugin.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler); </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">applyWebpackOptionsDefaults</span><span style="color:#E1E4E8;">(options); </span></span>
<span class="line"><span style="color:#E1E4E8;">  compiler.hooks.environment.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  compiler.hooks.afterEnvironment.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebpackOptionsApply</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(options, compiler); </span></span>
<span class="line"><span style="color:#E1E4E8;">  compiler.hooks.initialize.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> compiler; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCompiler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rawOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNormalizedWebpackOptions</span><span style="color:#24292E;">(rawOptions); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">applyWebpackOptionsBaseDefaults</span><span style="color:#24292E;">(options); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compiler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Compiler</span><span style="color:#24292E;">(options.context); </span></span>
<span class="line"><span style="color:#24292E;">  compiler.options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeEnvironmentPlugin</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">    infrastructureLogging: options.infrastructureLogging </span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(options.plugins)) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">plugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> options.plugins) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> plugin </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        plugin.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(compiler, compiler); </span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        plugin.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler); </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">applyWebpackOptionsDefaults</span><span style="color:#24292E;">(options); </span></span>
<span class="line"><span style="color:#24292E;">  compiler.hooks.environment.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  compiler.hooks.afterEnvironment.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebpackOptionsApply</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(options, compiler); </span></span>
<span class="line"><span style="color:#24292E;">  compiler.hooks.initialize.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> compiler; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 createCompiler() 函数内部可以看到，首先会通过 getNormalizedWebpackOptions() 函数将默认的配置参数与自定义的配置参数 rawOptions 进行合成，赋值给变量 options。applyWebpackOptionsBaseDefaults() 函数则将程序当前执行路径赋值给 options.context 属性。</p><p>经过以上处理之后，变量 options 才会作为参数传递给类 Compiler 来生成实例。在构造函数中，实例的很多属性进行了初始化操作，其中比较重要的是 hooks 属性。下面是截取的部分源码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/Compiler.js </span></span>
<span class="line"><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">(context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">freeze</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">      initialize: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      shouldEmit: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      done: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;stats&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      afterDone: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;stats&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      additionalPass: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      beforeRun: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      run: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      emit: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      assetEmitted: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;file&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;info&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      afterEmit: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      thisCompilation: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      compilation: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      normalModuleFactory: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;normalModuleFactory&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      contextModuleFactory: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;contextModuleFactory&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      beforeCompile: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      compile: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      make: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncParallelHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      finishMake: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      afterCompile: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      watchRun: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      failed: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      invalid: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;filename&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;changeTime&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      watchClose: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      infrastructureLog: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;origin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;args&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      environment: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      afterEnvironment: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      afterPlugins: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      afterResolvers: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]), </span></span>
<span class="line"><span style="color:#E1E4E8;">      entryOption: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;context&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;entry&quot;</span><span style="color:#E1E4E8;">]) </span></span>
<span class="line"><span style="color:#E1E4E8;">    }); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/Compiler.js </span></span>
<span class="line"><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">(context) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">freeze</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">      initialize: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([]), </span></span>
<span class="line"><span style="color:#24292E;">      shouldEmit: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncBailHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      done: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;stats&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      afterDone: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;stats&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      additionalPass: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([]), </span></span>
<span class="line"><span style="color:#24292E;">      beforeRun: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compiler&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      run: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compiler&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      emit: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      assetEmitted: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;info&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      afterEmit: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      thisCompilation: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;params&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      compilation: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;params&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      normalModuleFactory: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;normalModuleFactory&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      contextModuleFactory: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;contextModuleFactory&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      beforeCompile: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;params&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      compile: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;params&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      make: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncParallelHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      finishMake: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      afterCompile: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compilation&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      watchRun: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compiler&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      failed: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      invalid: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;filename&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;changeTime&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      watchClose: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([]), </span></span>
<span class="line"><span style="color:#24292E;">      infrastructureLog: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncBailHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;origin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;args&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      environment: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([]), </span></span>
<span class="line"><span style="color:#24292E;">      afterEnvironment: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([]), </span></span>
<span class="line"><span style="color:#24292E;">      afterPlugins: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compiler&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      afterResolvers: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;compiler&quot;</span><span style="color:#24292E;">]), </span></span>
<span class="line"><span style="color:#24292E;">      entryOption: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncBailHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;context&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;entry&quot;</span><span style="color:#24292E;">]) </span></span>
<span class="line"><span style="color:#24292E;">    }); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了防止 hooks 属性被修改，这里使用 Object.freeze() 函数来创建对象。简单介绍一下 object.freeze() 函数，它可以冻结一个对象。一个被冻结的对象再也不能被修改了；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。</p><p>这里一共创建了 4 种类型的钩子（hook），它们的名称和作用如下：</p><ul><li><p><strong>SyncHook（同步钩子）</strong>，当钩子触发时，会依次调用钩子队列中的回调函数；</p></li><li><p><strong>SyncBailHook（同步钩子）</strong>，当钩子触发时，会依次调用钩子队列中的回调函数，如果遇到有返回值的函数则停止继续调用；</p></li><li><p><strong>AsyncSeriesHook（异步串行钩子）</strong>，如果钩子队列中有异步回调函数，则会等其执行完成后再执行剩余的回调函数；</p></li><li><p><strong>AsyncParallelHook（异步并行钩子）</strong>，可以异步执行钩子队列中的所有异步回调函数。</p></li></ul><p>下面一段代码是钩子函数的简单用法。通过 new 关键字创建钩子实例，然后调用 tap() 函数来监听钩子，向 hook 的钩子队列中添加一个回调函数 。 当执行 hook.call() 函数时，会依次调用队列中的回调函数，并将参数传递给这些回调函数 。 需要注意的是， 参数的数量必须与实例化的数组长度一致。在下面的例子中，只能传递 1 个参数。</p><p>tapable 模块提供了十多种钩子，这里就不一一详细介绍了，我们只要知道它实现了一些特殊的订阅机制即可，对钩子有兴趣的同学可以参看其 <a href="https://www.npmjs.com/package/tapable" target="_blank" rel="noreferrer">文档</a>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">SyncHook</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tapable&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;whatever&#39;</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">hook.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">arg1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arg1); </span></span>
<span class="line"><span style="color:#E1E4E8;">}); </span></span>
<span class="line"><span style="color:#E1E4E8;">hook.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lagou&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">SyncHook</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;tapable&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hook</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;whatever&#39;</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">hook.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arg1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arg1); </span></span>
<span class="line"><span style="color:#24292E;">}); </span></span>
<span class="line"><span style="color:#24292E;">hook.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lagou&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>接着继续往下看，会发现这样一行代码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeEnvironmentPlugin</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">  infrastructureLogging: options.infrastructureLogging </span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeEnvironmentPlugin</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">  infrastructureLogging: options.infrastructureLogging </span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler);</span></span></code></pre></div><p>这种调用插件（plugin）的 apply() 函数的写法在 webpack 中很常见，主要作用就是监听 compiler 钩子事件，或者说是向钩子队列中插入一个回调函数，当对应的钩子事件触发时调用。</p><p>钩子初始化完成后会调用 3 个钩子事件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#E1E4E8;">compiler.hooks.environment.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">compiler.hooks.afterEnvironment.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebpackOptionsApply</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(options, compiler); </span></span>
<span class="line"><span style="color:#E1E4E8;">compiler.hooks.initialize.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/webpack.js </span></span>
<span class="line"><span style="color:#24292E;">compiler.hooks.environment.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">compiler.hooks.afterEnvironment.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebpackOptionsApply</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(options, compiler); </span></span>
<span class="line"><span style="color:#24292E;">compiler.hooks.initialize.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">();</span></span></code></pre></div><p>其中，process() 函数会根据不同的执行环境引入一些默认的插件并调用它的 apply() 函数，比如 Node 环境下会引入下面的插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/WebpackOptionsApply.js </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NodeTemplatePlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/NodeTemplatePlugin&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ReadFileCompileWasmPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/ReadFileCompileWasmPlugin&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ReadFileCompileAsyncWasmPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/ReadFileCompileAsyncWasmPlugin&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NodeTargetPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/NodeTargetPlugin&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeTemplatePlugin</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">  asyncChunkLoading: options.target </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;async-node&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler); </span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReadFileCompileWasmPlugin</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">  mangleImports: options.optimization.mangleWasmImports </span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler); </span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReadFileCompileAsyncWasmPlugin</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler); </span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeTargetPlugin</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler); </span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoaderTargetPlugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/WebpackOptionsApply.js </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NodeTemplatePlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/NodeTemplatePlugin&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ReadFileCompileWasmPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/ReadFileCompileWasmPlugin&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ReadFileCompileAsyncWasmPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/ReadFileCompileAsyncWasmPlugin&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NodeTargetPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/NodeTargetPlugin&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeTemplatePlugin</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">  asyncChunkLoading: options.target </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;async-node&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler); </span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadFileCompileWasmPlugin</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">  mangleImports: options.optimization.mangleWasmImports </span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler); </span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadFileCompileAsyncWasmPlugin</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler); </span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeTargetPlugin</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler); </span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoaderTargetPlugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;node&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(compiler);</span></span></code></pre></div><p>至此，编译器已经创建完成。小结一下创建编译器步骤的主要逻辑，首先会将配置参数进行修改，比如加入一些默认配置项；然后创建一个编译器实例 compiler，这个实例的构造函数会初始化一些钩子；最后就是调用插件的 apply() 函数来监听钩子，同时也会主动触发一些钩子事件。</p><h3 id="执行编译" tabindex="-1">执行编译 <a class="header-anchor" href="#执行编译" aria-label="Permalink to &quot;执行编译&quot;">​</a></h3><p>调用 compiler.compile() 函数标志着进入编译阶段，该阶段非常依赖钩子， 代码跳跃比较大，理解起来会有一定难度 。下面是 compile() 函数的部分代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/Compiler.js </span></span>
<span class="line"><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(callback) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">newCompilationParams</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.beforeCompile.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(params, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.compile.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(params); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">newCompilation</span><span style="color:#E1E4E8;">(params); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.make.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(compilation, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    }) </span></span>
<span class="line"><span style="color:#E1E4E8;">  }) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/Compiler.js </span></span>
<span class="line"><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(callback) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">params</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">newCompilationParams</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.beforeCompile.</span><span style="color:#6F42C1;">callAsync</span><span style="color:#24292E;">(params, </span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.compile.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(params); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compilation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">newCompilation</span><span style="color:#24292E;">(params); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.make.</span><span style="color:#6F42C1;">callAsync</span><span style="color:#24292E;">(compilation, </span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    }) </span></span>
<span class="line"><span style="color:#24292E;">  }) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先是触发了 compiler.hooks.compile 钩子，触发后，一些插件将进行初始化操作，为编译做好准备，比如 LoaderTargetPlugin 插件将会加载需要的加载器。</p><p>调用 newCompilation() 函数则会创建了一个 Compilation 实例。注意，这里的 Compilation 和前面创建的 Compiler 是有区别的：Compiler 是全局唯一的，包含了配置参数、加载器、插件这些信息，它会一直存在 webpack 的生命周期中；而 Compilation 包含了当前模块的信息，只是代表一次编译过程。</p><p>在创建 compilation 完成后会触发 compiler.hooks.thisCompilation 钩子和 compiler.hooks.compilation，激活 JavaScriptModulesPlugin 插件的监听函数，从而加载 JavaScript 的解析模块 acorn 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/Compiler.j s </span></span>
<span class="line"><span style="color:#B392F0;">newCompilation</span><span style="color:#E1E4E8;">(params) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> compilation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createCompilation</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.fileTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fileTimestamps; </span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.contextTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contextTimestamps; </span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name; </span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records; </span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.compilationDependencies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> params.compilationDependencies; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.thisCompilation.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(compilation, params); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.compilation.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(compilation, params); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> compilation; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/Compiler.j s </span></span>
<span class="line"><span style="color:#6F42C1;">newCompilation</span><span style="color:#24292E;">(params) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> compilation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createCompilation</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  compilation.fileTimestamps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.fileTimestamps; </span></span>
<span class="line"><span style="color:#24292E;">  compilation.contextTimestamps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.contextTimestamps; </span></span>
<span class="line"><span style="color:#24292E;">  compilation.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name; </span></span>
<span class="line"><span style="color:#24292E;">  compilation.records </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.records; </span></span>
<span class="line"><span style="color:#24292E;">  compilation.compilationDependencies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> params.compilationDependencies; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.thisCompilation.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(compilation, params); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.compilation.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(compilation, params); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> compilation; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 compiler.compile() 函数中触发 compiler.hooks.make 钩子标志着编译操作正式开始。那么哪些函数监听了 make 钩子呢？通过搜索代码可以发现有 7 个插件监听了它。</p>`,39),E=s(`<p>监听了 make 钩子的插件</p><br><p>其中 EntryPlugin 插件负责分析入口文件，下面是截取的部分代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib/EntryPlugin.js </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntryPlugin</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.make.</span><span style="color:#B392F0;">tapAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;EntryPlugin&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">entry</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EntryPlugin.</span><span style="color:#B392F0;">createDependency</span><span style="color:#E1E4E8;">(entry, options); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 开始入口解析 </span></span>
<span class="line"><span style="color:#E1E4E8;">    	compilation.</span><span style="color:#B392F0;">addEntry</span><span style="color:#E1E4E8;">(context, dep, options, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    		</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err); </span></span>
<span class="line"><span style="color:#E1E4E8;">    	}); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib/EntryPlugin.js </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EntryPlugin</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">compiler</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    compiler.hooks.make.</span><span style="color:#6F42C1;">tapAsync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;EntryPlugin&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">compilation</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">entry</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">options</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">context</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dep</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EntryPlugin.</span><span style="color:#6F42C1;">createDependency</span><span style="color:#24292E;">(entry, options); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 开始入口解析 </span></span>
<span class="line"><span style="color:#24292E;">    	compilation.</span><span style="color:#6F42C1;">addEntry</span><span style="color:#24292E;">(context, dep, options, </span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    		</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err); </span></span>
<span class="line"><span style="color:#24292E;">    	}); </span></span>
<span class="line"><span style="color:#24292E;">    }); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>EntryPlugin 插件中调用了 compilation 对象的 addEntry() 函数，该函数中又调用了 _addEntryItem() 函数将入口模块添加到模块依赖列表中，部分源码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">_addEntryItem</span><span style="color:#E1E4E8;">(context, entry, target, options, callback) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addModuleChain</span><span style="color:#E1E4E8;">(context, entry, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.failedEntry.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(entry, options, err); </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.succeedEntry.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(entry, options, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">_addEntryItem</span><span style="color:#24292E;">(context, entry, target, options, callback) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">addModuleChain</span><span style="color:#24292E;">(context, entry, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.failedEntry.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(entry, options, err); </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hooks.succeedEntry.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(entry, options, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  }); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 addModuleChain() 函数中会调用 compilation 的 handleModuleCreation() 函数，该函数代码比较多，其中会调用 compilation 的 buildModule() 函数来构建模块。</p><p>模块构建完成过后，通过 acorn 生成模块代码的抽象语法树，根据抽象语法树分析这个模块是否还有依赖的模块，如果有则继续解析每个依赖的模块，直到所有依赖解析完成，最后合并生成输出文件。这个过程和前面几讲提到的编译器执行过程类似，就不再赘述了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一课时从源码层面分析了 webpack 的工作原理，webpack 的执行过程大体上可以分为 3 个步骤，包括：检验配置项、创建编译器、执行编译。</p><p>在 检验 配置项时使用了 JSONSchema 来校验配置参数。在创建编译器时，用到了 tapable 模块提供的钩子机制，通过触发适当的钩子事件来让对应的插件进行初始化。</p><p>在执行编译阶段，以 compiler.hooks.make 钩子事件为起始点，触发入口文件的解析工作，并调用加载器对资源进行处理，然后构建成抽象语法树，将最终的抽象语法树转换成目标文件并输出到配置项指定的目录。</p><p>最后布置一道思考题：尝试一下 tapable 模块的各种钩子事件，分析比较一下它们的使用区别。</p>`,13);function y(i,F,u,m,d,C){const n=p("Image");return l(),o("div",null,[r,e(n,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/3E/C3/CgqCHl8tItSAI1KMAABz6uawvig252.png"}),t(),E])}const k=a(c,[["render",y]]);export{g as __pageData,k as default};
