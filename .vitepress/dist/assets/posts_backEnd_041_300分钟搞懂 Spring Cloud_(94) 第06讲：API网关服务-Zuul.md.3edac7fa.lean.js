import{_ as o,j as i,o as r,g as s,k as a,h as t,s as e,Q as u}from"./chunks/framework.a0d18f64.js";const ce=JSON.parse('{"title":"第06讲：API网关服务-Zuul","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/041_300分钟搞懂 Spring Cloud/(94) 第06讲：API网关服务-Zuul.md","filePath":"posts/backEnd/041_300分钟搞懂 Spring Cloud/(94) 第06讲：API网关服务-Zuul.md","lastUpdated":1696682708000}'),n={name:"posts/backEnd/041_300分钟搞懂 Spring Cloud/(94) 第06讲：API网关服务-Zuul.md"},p=e("h1",{id:"第06讲-api网关服务-zuul",tabindex:"-1"},[t("第06讲：API网关服务-Zuul "),e("a",{class:"header-anchor",href:"#第06讲-api网关服务-zuul","aria-label":'Permalink to "第06讲：API网关服务-Zuul"'},"​")],-1),c=e("p",null,"本课时我们主要讲解：网关的必要性，Zuul 简介及如何自定义过滤器，Zuul 容错与回退，Zuul 使用经验分享，以及 Zuul 控制路由实例选择等内容。",-1),h=e("p",null,"首先，我们来了解网关是什么？其实，API 网关是对外提供服务的一个入口，并且隐藏了内部架构的实现，是微服务架构中必不可少的一个组件。API 网关可以为我们管理大量的 API 接口，负责对接客户、协议适配、安全认证、路由转发、流量限制、日志监控、防止爬虫、灰度发布等功能。",-1),d=e("p",null,"API 网关也是随着架构演进衍生出的一个框架，是最简单的单体应用架构，所有的逻辑都在一个应用中，应用本身就是请求的入口，根本不需要在应用前面再加一个网关来做转发。当架构从单体应用演进成微服务架构时，网关的重要性就体现出来了。如果没有网关统一请求入口，客户端的请求会直接落到后端的各个服务中，无法集中统一管理。",-1),_=e("h6",{id:"网关的必要性",tabindex:"-1"},[t("网关的必要性 "),e("a",{class:"header-anchor",href:"#网关的必要性","aria-label":'Permalink to "网关的必要性"'},"​")],-1),g=e("p",null,"网关是所有请求的入口，承载了所有的流量，始终战斗在最前线，高并发、高可用都是网关需要面对的难题，网关的重要性可想而知。使用网关，还可以扩展出很多实用高级的功能，我总结了几个比较常见的给大家分析下，主要有动态路由、请求监控、认证鉴权、压力测试、灰度发布。",-1),b=e("h6",{id:"动态路由",tabindex:"-1"},[t("动态路由 "),e("a",{class:"header-anchor",href:"#动态路由","aria-label":'Permalink to "动态路由"'},"​")],-1),A=e("p",null,"动态路由是动态的将客户端的请求路由到后端不同的服务上，如果没有网关去做统一的路由，那么客户端就需要关注后端 N 个服务。",-1),m=e("p",null,"左边的图没有使用网关，客户端调用服务时就需要访问服务各自的接口，如客户端调用 A 服务的接口就需要请求 a.com，而对需要访问服务的客户端来说访问流程越简单越好，现在需要关注多个 API 提供方，无疑提高了访问的复杂度。",-1),Z=e("p",null,"右边的图使用了网关，使用网关后，客户端只需要关注网关的地址，也就是 gateway.com。不再需要关注多个 API 提供方，由网关统一路由到后端的具体服务中，这其实跟我之前讲的集中式负载均衡的概念类似，这样的好处是对客户端来说访问服务的流程简单了，关注的点少了。",-1),P=e("p",null,"另外一个好处就是可以在后端做 API 聚合操作，比如客户端要展示一个商品详情，里面有商品基本信息、库存信息等，如果没有聚合，就需要调用基本信息的接口，然后再调用库存信息的接口，如果做了聚合，客户端只需要调用一个接口，这个接口中包含了所有需要的信息，减少了前后端交互的次数，提升了用户的体验。",-1),f=e("h6",{id:"请求监控",tabindex:"-1"},[t("请求监控 "),e("a",{class:"header-anchor",href:"#请求监控","aria-label":'Permalink to "请求监控"'},"​")],-1),x=e("p",null,"请求监控可以对整个系统的请求进行监控，详细地记录请求响应日志，可以实时统计当前系统的访问量及监控状态。",-1),k=e("p",null,"如果没有使用网关的话，记录请求信息需要在各个服务中去做。当网关出现在我们的架构中后，所有客户端的请求都会经过网关来做路由分发，入口统一了，很多事情也就好处理了，我们只需要在网关中统一进行请求信息的记录，就可以基于这些记录做实时的数据分析，比如并发调用量，根据数据分析决定是否要动态限流，分析是否有爬虫请求等多维数据结果。给业务方提供正确实时的决策信息，是非常有价值的。",-1),y=e("h6",{id:"认证鉴权",tabindex:"-1"},[t("认证鉴权 "),e("a",{class:"header-anchor",href:"#认证鉴权","aria-label":'Permalink to "认证鉴权"'},"​")],-1),C=e("p",null,"认证鉴权可以对每一个访问请求做认证，拒绝非法请求，保护后端的服务。微服务架构下，如果没有使用网关，那么客户端需要直接跟多个服务进行交互，当请求到达对应的服务时，就必须验证当前的请求有没有登录，有没有权限访问。访问 A 服务需要验证一次，访问 B 服务也需要验证一次，每个服务都要做重复的工作。",-1),z=e("p",null,"当我们使用网关后，就可以在网关中做统一的验证逻辑了，唯一要做的工作就是在网关验证完成后，需要将用户信息传递给后端服务，后端服务默认相信当前的请求已经在网关中通过验证，它不会再去做验证的逻辑，但是当前请求对应的用户信息要告诉后端服务，可以将用户信息通过 HTTP 请求头传递给路由的后端服务。",-1),R=e("h6",{id:"压力测试",tabindex:"-1"},[t("压力测试 "),e("a",{class:"header-anchor",href:"#压力测试","aria-label":'Permalink to "压力测试"'},"​")],-1),I=e("p",null,"压力测试是一项很重要的工作，像一些电商公司需要模拟更多真实的用户并发量来保证大促时系统的稳定，通过 Zuul 可以动态地将测试请求转发到后端服务的集群中，还可以识别测试流量和真实流量，用来做一些特殊处理。",-1),F=e("p",null,"对于测试请求，可以在请求头中添加标识，让网关能够识别这是一个测试请求，当识别到测试请求后，根据对应的规则进行路由，这里可以用配置中心存储规则，测试请求路由到测试服务，测试服务会有单独的测试数据库，这样测试的请求就不会影响到正式的服务和数据库了。",-1),q=e("h6",{id:"灰度发布",tabindex:"-1"},[t("灰度发布 "),e("a",{class:"header-anchor",href:"#灰度发布","aria-label":'Permalink to "灰度发布"'},"​")],-1),v=e("p",null,"灰度发布可以保障整体系统的稳定性，在初始灰度的时候就可以及时发现、调整问题，以降低影响范围。",-1),T=e("p",null,"当需要发布新版本的时候，不会立即将老的服务停止，去发布新的服务。而是先发布新版本的服务，比如之前的版本是 1.0，那么现在发布的版本就是 1.1，发布后，需要通过测试请求对 1.1 版本的服务进行测试，如果没发现什么问题，就可以将正常的请求转发过来了。如果测试中发现问题，可以直接停掉 1.1 版本的服务，就算不停掉也没关系，不会影响到正常用户的使用。",-1),E=e("h6",{id:"zuul",tabindex:"-1"},[t("Zuul "),e("a",{class:"header-anchor",href:"#zuul","aria-label":'Permalink to "Zuul"'},"​")],-1),S=e("p",null,"Zuul 也是 Netflix OSS 中的一员，是一个基于 JVM 路由和服务端的负载均衡器。提供了路由、监控、弹性、安全等服务。Zuul 能够与 Eureka、Ribbon、Hystrix 等组件配合使用。",-1),M=u("",7),V=e("p",null,"对应的源码在 ZuulServlet 中，我们可以打开 ZuulServlet 的源码，service 方法中就是执行过滤器的逻辑，首先是 preRoute 方法，也就是执行 pre 过滤器，如果异常了就会执行 error 过滤器和 post 过滤器，接着就是 routing 过滤器，这就是整个过滤器执行流程对应的源码部分。",-1),D=e("h6",{id:"zuul-的使用",tabindex:"-1"},[t("Zuul 的使用 "),e("a",{class:"header-anchor",href:"#zuul-的使用","aria-label":'Permalink to "Zuul 的使用"'},"​")],-1),G=u("",11),O=u("",25),B=e("p",null,"Zuul 中自带了一个 DebugFilter，会将执行过程中的一些信息记录起来，方便调试和问题排查，我们可以通过配置 zuul.include-debug-header=true 来开启这个 Debug 模式，然后在访问请求的时候，在后面追加一个 debug=true 的参数告诉 Zuul 当前请求的调试信息需要通过响应头进行输出，这样在这个请求的响应头中就有了 Debug 相关的信息。",-1),H=e("h6",{id:"跨域配置",tabindex:"-1"},[t("跨域配置 "),e("a",{class:"header-anchor",href:"#跨域配置","aria-label":'Permalink to "跨域配置"'},"​")],-1),L=u("",8),N=e("p",null,"要实现动态过滤器，首先需要在项目中增加 Groovy 的依赖，然后在项目启动后设置 Groovy 的动态加载任务，这样就会定时的动态加载指定目录的 Groovy 文件了。",-1),U=e("p",null,"然后编写一个简单的 Groovy Filter，在 run 中输出一句话即可，然后访问下网关的接口，可以看到这个动态的过滤器生效了。有了动态过滤器的功能，我们就可以在不用停止服务的情况下，去支持需求的变化。",-1),K=e("h6",{id:"zuul-控制路由实例选择",tabindex:"-1"},[t("Zuul 控制路由实例选择 "),e("a",{class:"header-anchor",href:"#zuul-控制路由实例选择","aria-label":'Permalink to "Zuul 控制路由实例选择"'},"​")],-1),J=e("p",null,"前面在讲到网关的必要性时，提到了基于网关去做灰度发布，去做压力测试等高级扩展功能，在后面的课时中我会单独介绍使用目前已经开源的组件来实现灰度发布的功能，在这里就不做过多的介绍，只是想让大家了解下如果要实现这些扩展能力，我们需要做哪些工作？最重要的是要了解核心原理，当你了解了核心原理后，也就相当于有了深厚的内力，怎么表现出来就只是表面上的招式而已。",-1),Q=e("p",null,"我们来看灰度发布，首先我们需要知道当前请求的目的地是什么。也就是当前请求是正常请求还是一个灰度请求，如果是灰度请求，那么这个请求想要访问的版本是什么？或者想要访问指定的哪个服务实例等。",-1),Y=e("p",null,"然后我们需要根据这个请求带来的信息，从 Eureka 中选择一个符合要求的实例信息给 Zuul 进行转发，总体需求就是这两点，那么我们该用什么技术呢？",-1),j=e("p",null,"Zuul 中也是集成了 Ribbon 来做负载均衡的，Ribbon 中又提供了自定义算法策略来让我们控制服务实例的选择，技术方案很明显我们需要自定义 Ribbon 的算法策略来实现这个需求。",-1),w=e("p",null,"创建一个自定义策略类，这边直接采用了 RoundRobinRule 类，目的是为了在选取不出对应的服务实例时，可以直接使用 RoundRobinRule 的策略作为默认值。在 choose 方法中就是我们的主要逻辑了，首先会通过 RequestContext 获取 request 并转换成 HttpServletRequest，因为这样才能拿到请求头的信息，或者可以在 Zuul 的过滤器中获取，然后设置到 RequestContext 中。",-1),$=e("p",null,"这边需要注意的是获取 request 只能在信号量隔离下使用，线程隔离下 ThreadLocal 无法使用，会触发空指针异常。解决方案大家可以参考我的这篇文章，在 Hystrix 课时中也讲到过这个问题。除了文章中介绍的解决方案，还有其他的方案也可以实现这个需求，这个在后面专门讲灰度发布的时候给大家分析如何跨线程池传递数据到 Hystrix 中。",-1),W=e("ul",null,[e("li",null,[e("a",{href:"http://cxytiandi.com/blog/detail/18782",target:"_blank",rel:"noreferrer"},"http://cxytiandi.com/blog/detail/18782")])],-1),X=e("p",null,"接着就是获取请求头 header 的值，获取到后就从 Eureka 中获取服务信息，然后对比 Metadata",-1),ee=e("p",null,"中的 version 是否一致，如果一致那就选取这个服务返回。Metadata 中的 version 需要我们在服务启动的时候指定，通过 eureka.instance.metadata-map.version=1 配置。",-1),te=e("p",null,"这里只是做了一个简单的示列，让大家明白如何去控制服务实例的选择，明白这个原理后，你就可以根据自己的需求去实现想要的效果了，比如传递进来的是 IP + 端口的参数进行选择，也可以基于配置中心做全局动态配置等。",-1),le=e("p",null,"好了，到这里课时 6 的内容就全部讲完啦，本课时主要学习网关的必要性，Zuul 简介及如何自定义过滤器，Zuul 容错与回退，Zuul 使用经验分享，以及 Zuul 控制路由实例选择等内容，希望你在课后能够熟练掌握源码及 Feign 的使用。",-1);function ae(ue,oe,ie,re,se,ne){const l=i("Image");return r(),s("div",null,[p,c,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzFGAEIQCAACesr5ZON8263.png"}),t(),h,d,_,g,b,A,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzFKAbTymAAE9eECzbLs575.png"}),t(),m,Z,P,f,x,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzFKAMhJuAADDrRk--Cs646.png"}),t(),k,y,C,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzFKAMhJuAADDrRk--Cs646.png"}),t(),z,R,I,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzFKAe9wtAAEaJgA80DA706.png"}),t(),F,q,v,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzFKAVLC_AAE1Ij_9Yow275.png"}),t(),T,E,S,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzFKAKGeOAAGndrQg2bE012.png"}),t(),M,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzFKALGjnAAEfSfAim3o535.png"}),t(),V,D,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzI6AJcs6AFm-WMdMAzE612.gif"}),t(),G,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzFKARVycAADyi7HDY0s663.png"}),t(),O,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzFKAA6-IAAJL-BGCWm4337.png"}),t(),B,H,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzFOAB1qqAAIJI02w_nQ520.png"}),t(),L,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzFOAAazFAAGQ15EC0VY427.png"}),t(),N,U,K,J,Q,Y,j,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzK2AcG7gAD4G9yHcYkM467.gif"}),t(),w,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/C6/CgotOV2yzLqAOifdADPJYsusPcA659.gif"}),t(),$,W,a(l,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/9F/A6/CgoB5l2yzMiAfNk4AFxTR3S4aO4848.gif"}),t(),X,ee,te,le])}const he=o(n,[["render",ae]]);export{ce as __pageData,he as default};
