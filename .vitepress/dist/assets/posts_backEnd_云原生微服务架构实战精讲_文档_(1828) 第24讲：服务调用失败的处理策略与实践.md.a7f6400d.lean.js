import{_ as o,j as e,o as t,g as r,k as l,h as s,Q as p,s as n}from"./chunks/framework.4e7d56ce.js";const C=JSON.parse('{"title":"第24讲：服务调用失败的处理策略与实践","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1828) 第24讲：服务调用失败的处理策略与实践.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1828) 第24讲：服务调用失败的处理策略与实践.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1828) 第24讲：服务调用失败的处理策略与实践.md"},E=p("",62),y=p("",6),i=n("h3",{id:"总结",tabindex:"-1"},[s("总结 "),n("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),d=n("p",null,"微服务之间可以通过同步 API 调用来进行交互。本课时以 REST API 为例，说明了服务调用失败时的处理策略，包括重试和使用断路器等，还介绍了 Hystrix 和 Sentinel 这两个开源库。通过本课时的学习，你可以掌握在 API 调用时如何对可能出现的错误情况进行处理，以及使用 Hystrix 或 Sentinel 来帮助你解决问题。",-1);function F(u,g,h,A,x,m){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"hystrix-dashboard.png",src:"https://s0.lgstatic.com/i/image/M00/19/09/Ciqc1F7Z6G6AKyimAAI8lkXCM94013.png"}),s(),y,l(a,{alt:"sentinel-dashboard.png",src:"https://s0.lgstatic.com/i/image/M00/19/09/Ciqc1F7Z6HuAXO9ZAAIXI0MwGo8355.png"}),s(),i,d])}const b=o(c,[["render",F]]);export{C as __pageData,b as default};
