import{_ as o,j as e,o as t,g as c,k as l,h as a,Q as p,s}from"./chunks/framework.4e7d56ce.js";const x=JSON.parse('{"title":"04代码规范：实践开发Flutter编程代码规范工具","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3521) 04  代码规范：实践开发 Flutter 编程代码规范工具.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3521) 04  代码规范：实践开发 Flutter 编程代码规范工具.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3521) 04  代码规范：实践开发 Flutter 编程代码规范工具.md"},y=p(`<h1 id="_04代码规范-实践开发flutter编程代码规范工具" tabindex="-1">04代码规范：实践开发Flutter编程代码规范工具 <a class="header-anchor" href="#_04代码规范-实践开发flutter编程代码规范工具" aria-label="Permalink to &quot;04代码规范：实践开发Flutter编程代码规范工具&quot;">​</a></h1><p>在实践编程之前，我们先来掌握代码规范，毕竟优秀的编程代码从规范开始。</p><h3 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h3><p>命名规范中包括了文件以及文件夹的命名规范，常量和变量的命名规范，类的命令规范。Dart 中只包含这三种命名标识。</p><ul><li><p>AaBb 类规范，首字母大写驼峰命名法，例如 IsClassName，常用于类的命名。</p></li><li><p>aaBb 类规范，首字母小写驼峰命名法，例如 isParameterName，常用于常量以及变量命名。</p></li><li><p>aa_bb 类规范，小写字母下划线连接法，例如 is_a_flutter_file_name，常用于文件及文件夹命名。</p></li></ul><h3 id="注释规范" tabindex="-1">注释规范 <a class="header-anchor" href="#注释规范" aria-label="Permalink to &quot;注释规范&quot;">​</a></h3><p>注释的目的是生成我们需要的文档，从而增强项目的可维护性。</p><h4 id="单行注释" tabindex="-1">单行注释 <a class="header-anchor" href="#单行注释" aria-label="Permalink to &quot;单行注释&quot;">​</a></h4><p>单行注释主要是&quot; // &quot;这类标示的注释方法，这类注释与其他各类语言使用的规范一致。单行注释主要对于单行代码逻辑进行解释，为了避免过多注释，主要是在一些理解较为复杂的代码逻辑上进行注释。</p><p>比如，下面这段代码没有注释，虽然你看上下文也会知道这里表示的是二元一次方程的 ∆ ，但是却不知道如果 ∆ 大于 0 ，为什么 x 会等于 2。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">  x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果加上注释则显得逻辑清晰容易理解，修改后如下所示。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当∆大于0则表示方程x个解，x则为2</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( b </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当∆大于0则表示方程x个解，x则为2</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( b </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">  x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>虽然单行注释大家都比较了解，但我这里还是多解释了下如何应用，主要是希望大家规范化使用，减少不必要的代码注释。</p><h4 id="多行注释" tabindex="-1">多行注释 <a class="header-anchor" href="#多行注释" aria-label="Permalink to &quot;多行注释&quot;">​</a></h4><p>在 Dart 中由于历史原因（前后对多行注释方式进行了修改）有两种注释方式，一种是 /// ，另外一种则是 / **......* / 或者 /*......*/ ，这两种都可以使用。/**......*/ 和 /*......*/ 这种块级注释方式在其他语言（比如 JavaScript ）中是比较常用的，但是在 Dart 中我们更倾向于使用 /// ，后续我们所有的代码都按照这个规范来注释。</p><p>多行注释涉及类的注释和函数的注释。两者在注释方法上一致。首先是用一句话来解释该类或者函数的作用，其次使用空行将注释和详细注释进行分离，在空行后进行详细的说明。如果是类，在详细注释中，补充该类作用，其次应该介绍返回出去的对象功能，或者该类的核心方法。如果是函数，则在详细注释中，补充函数中的参数以及返回的数据对象。</p><p>假设有一个 App 首页的库文件，其中包含类 HomePage ， HomePage 中包含两个方法，一个是 getCurrentTime ，另一个是 build 方法，代码注释如下（未实现其他部分代码）。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">/// </span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatefulWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#FFAB70;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentTime</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> prefix) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">/// </span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatefulWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#E36209;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentTime</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> prefix) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="注释文档生成" tabindex="-1">注释文档生成 <a class="header-anchor" href="#注释文档生成" aria-label="Permalink to &quot;注释文档生成&quot;">​</a></h4><p>根据上面的代码注释内容，我们利用一个官方工具来将当前项目中的注释转化为文档。该工具的执行命令在 Dart 执行命令的同一个目录下，如果你在课时 03 中已经添加了 dart 命令行工具，那么该工具就可以直接使用了，如果没有则需要按照 03 课时中的方法，重新配置 dart 的运行命令的环境变量，这里主要演示下通过规范化的代码注释生成的文档。</p><p>打开命令行工具进入当前项目，或者在 Android Studio 点击界面上的 Terminal 打开命令行窗口，运行如下命令。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dartdoc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dartdoc</span></span></code></pre></div><p>运行结束后，会在当前项目目录生成一个 doc 的文件夹。在生成文件夹中，可以直接打开 doc/api/index.html 文件，你就会看到如图 1 所示的文档界面。</p>`,24),E=s("p",null,"图 1 生成文档的整体界面结构",-1),i=s("p",null,"接下来我们打开 HomePageState 类，可以看到如图 2 中的效果。",-1),d=s("p",null,"图 2 HomePageState 的注释文档",-1),F=s("p",null,"其次再打开函数 getCurrentTime 可以看到图 3 的效果。从效果看，我们的文档已经生成了，而且效果很好。",-1),g=p(`<p>图 3 getCurrentTime 的注释文档</p><p>以上是使用标准的代码注释生成的文档，利用这种方式将大大提升项目的可维护性，希望大家在项目初期就要做好此类规范。</p><h3 id="库引入规范" tabindex="-1">库引入规范 <a class="header-anchor" href="#库引入规范" aria-label="Permalink to &quot;库引入规范&quot;">​</a></h3><p>Dart 为了保持代码的整洁，规范了 import 库的顺序。将 import 库分为了几个部分，每个部分使用空行分割。分为 dart 库、package 库和其他的未带协议头（例如下面中的 util.dart ）的库。其次相同部分按照模块的首字母的顺序来排列，例如下面的代码示例：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dart:developer&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/pages/home_page.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;util.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dart:developer&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/pages/home_page.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;util.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="代码美化" tabindex="-1">代码美化 <a class="header-anchor" href="#代码美化" aria-label="Permalink to &quot;代码美化&quot;">​</a></h3><p>在 Dart 中同样有和前端一样的工具 pritter ，在 Dart 中叫作 dartfmt ，该工具和 dartdoc 一样，已经包含在 Dart SDK 中，因此可以直接运行如下命令检查是否生效。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dartfmt </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dartfmt </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">h</span></span></code></pre></div><p>既然有此类工具，我们就来看下如何应用工具来规范和美化我们的代码结构。</p><h4 id="dartfmt" tabindex="-1">dartfmt <a class="header-anchor" href="#dartfmt" aria-label="Permalink to &quot;dartfmt&quot;">​</a></h4><p>dartfmt 工具的规范包括了以下几点：</p><ul><li><p>使用空格而不是 tab；</p></li><li><p>在一个完整的代码逻辑后面使用空行区分；</p></li><li><p>二元或者三元运算符之间使用空格；</p></li><li><p>在关键词 , 和 ; 之后使用空格；</p></li><li><p>一元运算符后请勿使用空格；</p></li><li><p>在流控制关键词，例如 for 和 while 后，使用空格区分；</p></li><li><p>在 ( [ { } ] ) 符号后请勿使用空格；</p></li><li><p>在 { 后前使用空格；</p></li><li><p>使用 . 操作符，从第二个 . 符号后每次都使用新的一行。</p></li></ul><p>其他规范可以参考 <a href="https://github.com/dart-lang/dart_style/wiki/Formatting-Rules" target="_blank" rel="noreferrer">dartfmt</a> 的官网。了解完以上规范后，我们现在将上面的 home_page.dart 进行修改，将部分代码修改为不按照上面规范的结构，代码修改如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatefulWidget</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#FFAB70;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentTime</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> prefix ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatefulWidget</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#E36209;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentTime</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> prefix ) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面 getCurrentTime 的参数和 { 没有按照 dartfmt 规范来处理，在当前目录下打开 Terminal，然后先运行以下命令来修复当前的代码规范：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> dartfmt </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">w </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">fix lib</span><span style="color:#F97583;">/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> dartfmt </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">w </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">fix lib</span><span style="color:#D73A49;">/</span></span></code></pre></div><p>运行成功后，你将看到当前 home_page.dart 修改为如下代码：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatefulWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#FFAB70;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentTime</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> prefix) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatefulWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#E36209;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentTime</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> prefix) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到两处不符合规范的被修复了，{ 前无空格问题，和 getCurrentTime 参数空格问题。</p><h3 id="工具化" tabindex="-1">工具化 <a class="header-anchor" href="#工具化" aria-label="Permalink to &quot;工具化&quot;">​</a></h3><p>上面介绍了这些规范，在 Dart 中同样存在和 eslint 一样的工具 dartanalyzer 来保证代码质量。</p><p>该工具（ dartanalyzer ）已经集成在 Dart SDK ，你只需要在 Dart 项目根目录下新增analysis_options.yaml 文件，然后在文件中按照规范填写你需要执行的规则检查即可，目前现有的检查规则可以参考 <a href="https://dart-lang.github.io/linter/lints/" target="_blank" rel="noreferrer">Dart linter rules</a> 规范。</p><p>为了方便，我们可以使用现成已经配置好的规范模版，这里有两个库 <a href="https://s0pub0dev.icopy.site/packages/pedantic" target="_blank" rel="noreferrer">pedantic</a> 和 <a href="https://s0dart0dev.icopy.site/guides/language/effective-dart" target="_blank" rel="noreferrer">effective_dart</a> 可以参照使用。如果我们需要在项目中，使用它们两者之一，可以在项目配置文件（ pubspec.yaml ）中新增如下两行配置：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dependencies</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  flutter</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    sdk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> flutter</span></span>
<span class="line"><span style="color:#E1E4E8;">  pedantic</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">1.8</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  # </span><span style="color:#79B8FF;">The</span><span style="color:#E1E4E8;"> following adds the </span><span style="color:#79B8FF;">Cupertino</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;"> font to your application.</span></span>
<span class="line"><span style="color:#E1E4E8;">  # </span><span style="color:#79B8FF;">Use</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> the </span><span style="color:#79B8FF;">CupertinoIcons</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> iOS style icons.</span></span>
<span class="line"><span style="color:#E1E4E8;">  cupertino_icons</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">dev_dependencies</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  flutter_test</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    sdk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> flutter</span></span>
<span class="line"><span style="color:#E1E4E8;">  pedantic</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">1.8</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dependencies</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  flutter</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    sdk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> flutter</span></span>
<span class="line"><span style="color:#24292E;">  pedantic</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">1.8</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  # </span><span style="color:#005CC5;">The</span><span style="color:#24292E;"> following adds the </span><span style="color:#005CC5;">Cupertino</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;"> font to your application.</span></span>
<span class="line"><span style="color:#24292E;">  # </span><span style="color:#005CC5;">Use</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> the </span><span style="color:#005CC5;">CupertinoIcons</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> iOS style icons.</span></span>
<span class="line"><span style="color:#24292E;">  cupertino_icons</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">dev_dependencies</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  flutter_test</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    sdk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> flutter</span></span>
<span class="line"><span style="color:#24292E;">  pedantic</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">1.8</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span></span></code></pre></div><p>配置完成以后，在当前项目路径下运行 flutter pub upgrade 。接下来在本地新增的 analysis_options.yaml 文件中新增如下配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">include</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">package</span><span style="color:#E1E4E8;">:pedantic/analysis_options.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">include</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">package</span><span style="color:#24292E;">:pedantic/analysis_options.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.yaml</span></span></code></pre></div><p>如果我们认为 pedantic 不满足我们的要求，我们再根据 <a href="https://dart-lang.github.io/linter/lints/" target="_blank" rel="noreferrer">Dart linter rules</a> 规范，前往选择自己需要的规范配置，修改下面的配置：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">include</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> package</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">pedantic</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">analysis_options.</span><span style="color:#79B8FF;">1.8</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">yaml</span></span>
<span class="line"><span style="color:#E1E4E8;">analyzer</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  strong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">mode</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    implicit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">casts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">linter</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    # </span><span style="color:#79B8FF;">STYLE</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> camel_case_types</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> camel_case_extensions</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> file_names</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> non_constant_identifier_names</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> constant_identifier_names # prefer</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> directives_ordering</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> lines_longer_than_80_chars # avoid</span></span>
<span class="line"><span style="color:#E1E4E8;">    # </span><span style="color:#79B8FF;">DOCUMENTATION</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> package_api_docs # prefer</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> public_member_api_docs # prefer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">include</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> package</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">pedantic</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">analysis_options.</span><span style="color:#005CC5;">1.8</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">yaml</span></span>
<span class="line"><span style="color:#24292E;">analyzer</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  strong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">mode</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    implicit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">casts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">linter</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  rules</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    # </span><span style="color:#005CC5;">STYLE</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> camel_case_types</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> camel_case_extensions</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> file_names</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> non_constant_identifier_names</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> constant_identifier_names # prefer</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> directives_ordering</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lines_longer_than_80_chars # avoid</span></span>
<span class="line"><span style="color:#24292E;">    # </span><span style="color:#005CC5;">DOCUMENTATION</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> package_api_docs # prefer</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> public_member_api_docs # prefer</span></span></code></pre></div><p>我在 pedantic 的基础上又增加了一些对于样式和文档的规范，增加完成以上配置后，运行如下命令可进行检查。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dartanalyzer lib</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dartanalyzer lib</span></span></code></pre></div><p>运行完成以后，你可以看到一些提示、警告或者报错信息，具体提示如图 4 的问题：</p>`,31),C=p(`<p>图 4 dartanalyzer 规则检查运行结果</p><p>图 4 中的一些问题已经非常详细，包括以下几点：</p><ul><li><p>没有为 main 类中的 public 方法增加文档说明；</p></li><li><p>在 main 类中 import 了developer 库，但是未使用；</p></li><li><p>在 main 类中 import 了 home_page.dart 库，但是未使用；</p></li><li><p>在 home_page.dart 中的 getCurrentTime 使用了 String 返回类型，但是未返回相应类型；</p></li><li><p>在 home_page.dart 中的 build 方法 使用了 Widaget 返回类型，但是未返回相应类型。</p></li></ul><p>这些问题非常清晰地说明了我们目前代码存在的问题，有了以上工具化的校验检查，我们在做团队代码规范的时候，就非常简单。</p><h3 id="综合实践" tabindex="-1">综合实践 <a class="header-anchor" href="#综合实践" aria-label="Permalink to &quot;综合实践&quot;">​</a></h3><p>学完本课时，我们按照以上的标准来实践一下。在上一课时中，我已经教大家怎么去实现一个比较简单的 Hello Flutter ，现在我希望实现一个显示当前时间的功能 APP 。</p><p>以下是我的开发步骤，这里就涉及了上面所有的命名规范：</p><ol><li><p>在 lib 下创建一个 pages 目录;</p></li><li><p>在 pages 下创建一个类为 home_page.dart 文件;</p></li><li><p>在 home_page.dart 文件中创建两个类，一个是 HomePage，另一个是 HomePageState；</p></li><li><p>在 HomePageState 类创建两个方法，一个是带返回 String 类型的 getCurrentTime 方法，另一个是带返回 Widget 类型的 build 方法（类似于 React 中的 render 方法）；</p></li><li><p>实现两个方法，具体可以查看以下代码；</p></li><li><p>在 main 函数中引入 home_page.dart 模块，并调用 HomePage 类。</p></li></ol><p>具体 main.dart 和 home_page.dart 代码分别如下：</p><ul><li>main.dart</li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/pages/home_page.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 核心入口文件</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runApp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MyApp</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">/// MyApp 核心入口界面</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MyApp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This widget is the root of your application.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MaterialApp</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Two You&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        theme</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ThemeData</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          primarySwatch</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.blue,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">        home</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Scaffold</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            appBar</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppBar</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Two You&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            ),</span></span>
<span class="line"><span style="color:#E1E4E8;">            body</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Center</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            )));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/pages/home_page.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// APP 核心入口文件</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runApp</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">MyApp</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">/// MyApp 核心入口界面</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MyApp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This widget is the root of your application.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MaterialApp</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Two You&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        theme</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ThemeData</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          primarySwatch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.blue,</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">        home</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Scaffold</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            appBar</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppBar</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Two You&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            ),</span></span>
<span class="line"><span style="color:#24292E;">            body</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Center</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">            )));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>home_page.dart</li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:intl/intl.dart&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 需要在pubspec.yaml增加该模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatefulWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HomePageState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">HomePage</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#FFAB70;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentTime</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> prefix) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;"> now </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> formatter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;yy-mm-dd H:m:s&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> nowTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> formatter.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(now);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$</span><span style="color:#79B8FF;">prefix</span><span style="color:#9ECBFF;"> $</span><span style="color:#79B8FF;">nowTime</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">getCurrentTime</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;当前时间&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:intl/intl.dart&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 需要在pubspec.yaml增加该模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// APP 首页入口</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 本模块函数，加载状态类组件HomePageState</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatefulWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/// 首页有状态组件类</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// 主要是获取当前时间，并动态展示当前时间</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HomePageState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">HomePage</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 获取当前时间戳</span></span>
<span class="line"><span style="color:#6A737D;">  ///</span></span>
<span class="line"><span style="color:#6A737D;">  /// </span><span style="color:#E36209;">[prefix]</span><span style="color:#6A737D;">需要传入一个前缀信息</span></span>
<span class="line"><span style="color:#6A737D;">  /// 返回一个字符串类型的前缀信息：时间戳</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentTime</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> prefix) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;"> now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> formatter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateFormat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;yy-mm-dd H:m:s&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> nowTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> formatter.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(now);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$</span><span style="color:#005CC5;">prefix</span><span style="color:#032F62;"> $</span><span style="color:#005CC5;">nowTime</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 有状态类返回组件信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">getCurrentTime</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;当前时间&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后我们再运行 dartfmt 来美化代码结构，其次运行 dartanalyzer 工具来校验是否按照规范进行开发。上面代码已经是标准规范，因此你不会发现任何问题，如果你自己开发过程中有问题，则按照提示进行修改即可。如果规范检查完成以后，都没有任何问题后，我们再运行当前程序，结果如图 5 所示的效果。</p>`,14),A=s("p",null,"图 5 home_page 页面效果",-1),m=s("h3",{id:"总结",tabindex:"-1"},[a("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),u=s("p",null,"本课时主要介绍了命名规范、注释规范以及文档生成、库引入规范、代码美化，最后利用 dartanalyzer 来进行工具化校验保证项目代码质量。学完本课时以后，你需要掌握这些基础规范，其次特别需要掌握 dartfmt 和 dartanalyzer 工具的使用。",-1),D=s("p",null,"为了上面演示效果更佳，我们可以将时间变成自动更新的方式，这里就会涉及 05 课时的生命周期内容。具体实现效果以及原理，我会在接下来的 05 课时生命周期以及 06 课时有/无状态组件中详细说明。",-1),h=s("p",null,[s("a",{href:"https://github.com/love-flutter/flutter-column",target:"_blank",rel:"noreferrer"},"点击此链接查看本课时源码")],-1);function _(f,B,b,v,k,S){const n=e("Image");return t(),c("div",null,[y,l(n,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/22/66/Ciqc1F7sNjeAE5ykAAFKDSwqzfU381.png"}),a(),E,i,l(n,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image/M00/22/72/CgqCHl7sNkGAMQRQAADbY3c-XN8695.png"}),a(),d,F,l(n,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/22/72/CgqCHl7sNkiAYZqRAAGMc2znMSs481.png"}),a(),g,l(n,{alt:"image (10).png",src:"https://s0.lgstatic.com/i/image/M00/22/72/CgqCHl7sNqmAMpqEAAESy_g_9Ag796.png"}),a(),C,l(n,{alt:"image (11).png",src:"https://s0.lgstatic.com/i/image/M00/22/67/Ciqc1F7sNr-AAZloAAFNQgKibbk184.png"}),a(),A,m,u,D,h])}const T=o(r,[["render",_]]);export{x as __pageData,T as default};
