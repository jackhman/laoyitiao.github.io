import{_ as l,j as p,o,g as e,k as a,Q as t,s,h as c}from"./chunks/framework.e0c66c3f.js";const f=JSON.parse('{"title":"Generator 基本介绍 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6188) 15  异步编程（下）：如何理解 Generator、Ayncawait 等异步编程的语法糖？.md","filePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6188) 15  异步编程（下）：如何理解 Generator、Ayncawait 等异步编程的语法糖？.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/JavaScript 核心原理精讲_文档/(6188) 15  异步编程（下）：如何理解 Generator、Ayncawait 等异步编程的语法糖？.md"},E=t("",57),y=s("h3",{id:"总结",tabindex:"-1"},[c("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),i=s("p",null,"这一讲，我带你把 Generator 以及 async/await 的异步编程方式学习了一遍，希望通过上面的介绍，你能够对 JS 异步编程理解更深一些。",-1),F=s("p",null,"最后，我整理了这几个异步编程的特点，你可以对比着来回顾，以加深记忆，请看下面的表格。",-1),d=s("p",null,"现在你可以回过头思考我在这一讲开头提出的两个问题了，是不是比较容易回答出来了呢？如果你对这部分内容还有不清楚的地方，可以有针对性地去学习。",-1),g=s("p",null,"后面，我会继续带着你对 JS 异步编程的知识点进行更深入的剖析，下一讲我们就进入 EventEmitter 的学习，它是结合着设计模式实现 JS 异步编程的一种思路，也是值得深入研究和学习的。",-1);function u(A,C,D,h,B,v){const n=p("Image");return o(),e("div",null,[E,a(n,{alt:"金句1.png",src:"https://s0.lgstatic.com/i/image6/M00/08/76/Cgp9HWA0wYmAKbOFAAVCoaU0ifI951.png"}),y,i,F,a(n,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M01/08/70/Cgp9HWA0vFyAfpfGAAGGpm0z-f8269.png"}),d,g])}const m=l(r,[["render",u]]);export{f as __pageData,m as default};
