import{_ as o,j as e,o as t,h as c,k as l,f as s,s as n,Q as p}from"./chunks/framework.d3daa342.js";const P=JSON.parse('{"title":"第09讲：SkyWalkingAgent启动流程剖析，领略微内核架构之美","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1729) 第09讲：SkyWalking Agent 启动流程剖析，领略微内核架构之美.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1729) 第09讲：SkyWalking Agent 启动流程剖析，领略微内核架构之美.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1729) 第09讲：SkyWalking Agent 启动流程剖析，领略微内核架构之美.md"},E=n("h1",{id:"第09讲-skywalkingagent启动流程剖析-领略微内核架构之美",tabindex:"-1"},[s("第09讲：SkyWalkingAgent启动流程剖析，领略微内核架构之美 "),n("a",{class:"header-anchor",href:"#第09讲-skywalkingagent启动流程剖析-领略微内核架构之美","aria-label":'Permalink to "第09讲：SkyWalkingAgent启动流程剖析，领略微内核架构之美"'},"​")],-1),y=n("p",null,"通过此前 8 个课时的学习，相信你已经了解了 SkyWalking Agent 是通过 Java Agent 的方式随应用程序一起启动，然后通过 Byte Buddy 库动态插入埋点收集 Trace 信息。从本课时开始，我会带你深入研究 SkyWalking Agent 的架构、原理以及具体实现，还将深入分析 Tomcat、Dubbo、MySQL 等常用的插件。",-1),i=n("h3",{id:"微内核架构",tabindex:"-1"},[s("微内核架构 "),n("a",{class:"header-anchor",href:"#微内核架构","aria-label":'Permalink to "微内核架构"'},"​")],-1),g=n("p",null,"SkyWalking Agent 采用了微内核架构（Microkernel Architecture），那什么是微内核架构呢？微内核架构也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展性架构。在基于产品的应用中通常会使用微内核架构，例如，IDEA、Eclipse 这类 IDE 开发工具，内核都是非常精简的，对 Maven、Gradle 等新功能的支持都是以插件的形式增加的。",-1),d=n("p",null,"如下图所示，微内核架构分为核心系统和插件模块两大部分。",-1),u=p(`<p>在上图展示的微内核架构中，内核功能是比较稳定的，只负责管理插件的生命周期，不会因为系统功能的扩展而不断进行修改。功能上的扩展全部封装到插件之中，插件模块是独立存在的模块，包含特定的功能，能拓展核心系统的功能。通常，不同的插件模块互相之间独立，当然，你可以设计成一个插件依赖于另外一个插件，但应尽量让插件之间的相互依赖关系降低到最小，避免繁杂的依赖带来扩展性问题。</p><p>最终所有插件会由内核系统统一接入和管理：</p><ul><li>首先，内核系统必须知道要加载哪些插件，一般会通过配置文件或是扫描 ClassPath 的方式（例如前文介绍的 SPI 技术）确定待加载的插件；</li><li>之后，内核系统还需要了解如何使用这些插件，微内核架构中需要定义一套插件的规范，内核系统会按照统一的方式初始化、启动这些插件；</li><li>最后，虽然插件之间完全解耦，但实际开发中总会有一些意想不到的需求会导致插件之间产生依赖或是某些底层插件被复用，此时内核需要提供一套规则，识别插件消息并能正确的在插件之间转发消息，成为插件消息的中转站。</li></ul><p>由此可见微内核架构的好处：</p><ul><li>测试成本下降。从软件工程的角度看，微内核架构将变化的部分和不变的部分拆分，降低了测试的成本，符合设计模式中的开放封闭原则。</li><li>稳定性。由于每个插件模块相对独立，即使其中一个插件有问题，也可以保证内核系统以及其他插件的稳定性。</li><li>可扩展性。在增加新功能或接入新业务的时候，只需要新增相应插件模块即可；在进行历史功能下线时，也只需删除相应插件模块即可。</li></ul><p>SkyWalking Agent 就是微内核架构的一种落地方式。在前面的课时中我已经介绍了 SkyWalking 中各个模块的功能，其中 apm-agent-core 模块对应微内核架构中的内核系统，apm-sdk-plugin 模块中的各个子模块都是微内核架构中的插件模块。</p><h3 id="skywalking-agent-启动流程概述" tabindex="-1">SkyWalking Agent 启动流程概述 <a class="header-anchor" href="#skywalking-agent-启动流程概述" aria-label="Permalink to &quot;SkyWalking Agent 启动流程概述&quot;">​</a></h3><p>此前，在搭建 SkyWalking 源码环境的最后，我们尝试 Debug 了一下 SkyWalking Agent 的源码，其入口是 apm-agent 模块中 SkyWalkingAgent 类的 premain() 方法，其中完成了 Agent 启动的流程：</p><ol><li>初始化配置信息。该步骤中会加载 agent.config 配置文件，其中会检测 Java Agent 参数以及环境变量是否覆盖了相应配置项。</li><li>查找并解析 skywalking-plugin.def 插件文件。</li><li>AgentClassLoader 加载插件。</li><li>PluginFinder 对插件进行分类管理。</li><li>使用 Byte Buddy 库创建 AgentBuilder。这里会根据已加载的插件动态增强目标类，插入埋点逻辑。</li><li>使用 JDK SPI 加载并启动 BootService 服务。BootService 接口的实现会在后面的课时中展开详细介绍。</li><li>添加一个 JVM 钩子，在 JVM 退出时关闭所有 BootService 服务。</li></ol><p>SkywalkingAgent.premain() 方法的具体实现如下，其中省略了 try/catch 代码块以及异常处理逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">premain</span><span style="color:#E1E4E8;">(String agentArgs, </span></span>
<span class="line"><span style="color:#E1E4E8;">       Instrumentation instrumentation) throws PluginException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤1、初始化配置信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    SnifferConfigInitializer.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(agentArgs); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤2~4、查找并解析skywalking-plugin.def插件文件；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// AgentClassLoader加载插件类并进行实例化；PluginFinder提供插件匹配的功能</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PluginFinder pluginFinder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PluginFinder</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PluginBootstrap</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">loadPlugins</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤5、使用 Byte Buddy 库创建 AgentBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ByteBuddy byteBuddy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ByteBuddy</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(TypeValidation.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(Config.Agent.IS_OPEN_DEBUGGING_CLASS));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AgentBuilder.</span><span style="color:#B392F0;">Default</span><span style="color:#E1E4E8;">(byteBuddy)...</span><span style="color:#B392F0;">installOn</span><span style="color:#E1E4E8;">(instrumentation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里省略创建 AgentBuilder的具体代码，后面展开详细说</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤6、使用 JDK SPI加载的方式并启动 BootService 服务。</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceManager.INSTANCE.</span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤7、添加一个JVM钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">    Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addShutdownHook</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() { ServiceManager.INSTANCE.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#9ECBFF;">&quot;skywalking service shutdown thread&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">premain</span><span style="color:#24292E;">(String agentArgs, </span></span>
<span class="line"><span style="color:#24292E;">       Instrumentation instrumentation) throws PluginException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤1、初始化配置信息</span></span>
<span class="line"><span style="color:#24292E;">    SnifferConfigInitializer.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(agentArgs); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤2~4、查找并解析skywalking-plugin.def插件文件；</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// AgentClassLoader加载插件类并进行实例化；PluginFinder提供插件匹配的功能</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PluginFinder pluginFinder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PluginFinder</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PluginBootstrap</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">loadPlugins</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤5、使用 Byte Buddy 库创建 AgentBuilder</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ByteBuddy byteBuddy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteBuddy</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(TypeValidation.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(Config.Agent.IS_OPEN_DEBUGGING_CLASS));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AgentBuilder.</span><span style="color:#6F42C1;">Default</span><span style="color:#24292E;">(byteBuddy)...</span><span style="color:#6F42C1;">installOn</span><span style="color:#24292E;">(instrumentation);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里省略创建 AgentBuilder的具体代码，后面展开详细说</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤6、使用 JDK SPI加载的方式并启动 BootService 服务。</span></span>
<span class="line"><span style="color:#24292E;">    ServiceManager.INSTANCE.</span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤7、添加一个JVM钩子</span></span>
<span class="line"><span style="color:#24292E;">    Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addShutdownHook</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() { ServiceManager.INSTANCE.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#032F62;">&quot;skywalking service shutdown thread&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>了解了 SkyWalking Agent 启动的核心步骤之后，本课时剩余部分将对每个步骤进行深入分析。</p><h3 id="初始化配置" tabindex="-1">初始化配置 <a class="header-anchor" href="#初始化配置" aria-label="Permalink to &quot;初始化配置&quot;">​</a></h3><p>在启动 demo-webapp 和 demo-provider 两个 demo 应用的时候，需要在 VM options 中指定 agent.confg 配置文件（skywalking_config 参数），agent.config 配置文件中的配置项如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 当前应用的服务名称，通过Skywalking Agent上报的Metrics、Trace数据都会</span></span>
<span class="line"><span style="color:#E1E4E8;"># 携带该信息进行标识</span></span>
<span class="line"><span style="color:#E1E4E8;">agent.service_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">\${SW_AGENT_NAME</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">Your_ApplicationName}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 当前应用的服务名称，通过Skywalking Agent上报的Metrics、Trace数据都会</span></span>
<span class="line"><span style="color:#24292E;"># 携带该信息进行标识</span></span>
<span class="line"><span style="color:#24292E;">agent.service_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">\${SW_AGENT_NAME</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">Your_ApplicationName}</span></span></code></pre></div><p>在 SnifferConfigInitializer.initialize() 方法中会将最终的配置信息填充到 Config 的静态字段中，填充过程如下：</p><ol><li>将 agent.config 文件中全部配置信息填充到 Config 中相应的静态字段中。</li><li>解析系统环境变量值，覆盖 Config 中相应的静态字段。</li><li>解析 Java Agent 的参数，覆盖 Config 中相应的静态字段。</li></ol><p>SnifferConfigInitializer.initialize() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(String agentOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤1、加载 agent.config配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    InputStreamReader configFileStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadConfig</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    properties.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(configFileStream);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">stringPropertyNames</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String)properties.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 按照\${配置项名称:默认值}的格式解析各个配置项</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, PropertyPlaceholderHelper.INSTANCE</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">replacePlaceholders</span><span style="color:#E1E4E8;">(value, properties));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 填充 Config中的静态字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigInitializer.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(properties, Config.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤2、解析环境变量，并覆盖 Config中相应的静态字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">overrideConfigBySystemProp</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 步骤3、解析 Java Agent参数，并覆盖 Config中相应的静态字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">overrideConfigByAgentOptions</span><span style="color:#E1E4E8;">(agentOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测SERVICE_NAME和BACKEND_SERVICE两个配置项，若为空则抛异常(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">    IS_INIT_COMPLETED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 更新初始化标记</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(String agentOptions) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤1、加载 agent.config配置文件</span></span>
<span class="line"><span style="color:#24292E;">    InputStreamReader configFileStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    properties.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(configFileStream);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">stringPropertyNames</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String)properties.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 按照\${配置项名称:默认值}的格式解析各个配置项</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, PropertyPlaceholderHelper.INSTANCE</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">replacePlaceholders</span><span style="color:#24292E;">(value, properties));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 填充 Config中的静态字段</span></span>
<span class="line"><span style="color:#24292E;">    ConfigInitializer.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(properties, Config.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤2、解析环境变量，并覆盖 Config中相应的静态字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">overrideConfigBySystemProp</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 步骤3、解析 Java Agent参数，并覆盖 Config中相应的静态字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">overrideConfigByAgentOptions</span><span style="color:#24292E;">(agentOptions);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测SERVICE_NAME和BACKEND_SERVICE两个配置项，若为空则抛异常(略)</span></span>
<span class="line"><span style="color:#24292E;">    IS_INIT_COMPLETED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 更新初始化标记</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>步骤 1 中的 loadConfig() 方法会优先根据环境变量（skywalking_config）指定的 agent.config 文件路径加载。若环境变量未指定 skywalking_ config 配置，则到 skywalking-agent.jar 同级的 config 目录下查找 agent.confg 配置文件。</p><p>将 agent.config 文件中的配置信息加载到 Properties 对象之后，将使用 PropertyPlaceholderHelper 对配置信息进行解析，将当前的&quot;\${配置项名称:默认值}&quot;格式的配置值，替换成其中的默认值，demo-provider 解析结果如下图所示：</p>`,21),F=n("p",null,"完成解析之后，会通过 ConfigInitializer 工具类，将配置信息填充到 Config 中的静态字段中，具体填充规则如下：",-1),A=p(`<p>在接下来的 overrideConfigBySystemProp() 方法中会遍历环境变量（即 System.getProperties() 集合），如果环境变 是以 &quot;skywalking.&quot; 开头的，则认为是 SkyWalking 的配置，同样会填充到 Config 类中，以覆盖 agent.config 中的默认值。</p><p>最后的 overrideConfigByAgentOptions() 方法解析的是 Java Agent 的参数，填充 Config 类的规则与前面两步相同，不再重复。</p><p>到此为止，SkyWalking Agent 启动所需的全部配置都已经填充到 Config 中，后续使用配置信息时直接访问 Config 中的相应静态字段即可。</p><h3 id="插件加载原理" tabindex="-1">插件加载原理 <a class="header-anchor" href="#插件加载原理" aria-label="Permalink to &quot;插件加载原理&quot;">​</a></h3><p>完成 Config 类的初始化之后，SkyWalking Agent 开始扫描指定目录下的 SkyWalking Agent 插件 jar 包并进行加载。</p><h4 id="agentclassloader" tabindex="-1">AgentClassLoader <a class="header-anchor" href="#agentclassloader" aria-label="Permalink to &quot;AgentClassLoader&quot;">​</a></h4><p>SkyWalking Agent 加载插件时使用到一个自定义的 ClassLoader ------ AgentClassLoader，之所以自定义类加载器，目的是不在应用的 Classpath 中引入 SkyWalking 的插件 jar 包，这样就可以让应用无依赖、无感知的插件。</p><h4 id="并行加载优化" tabindex="-1">并行加载优化 <a class="header-anchor" href="#并行加载优化" aria-label="Permalink to &quot;并行加载优化&quot;">​</a></h4><p>AgentClassLoader 的静态代码块中会调动 tryRegisterAsParallelCapable() 方法，其中会通过反射方式尝试开启 JDK 的并行加载功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryRegisterAsParallelCapable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">[] methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassLoader.class.</span><span style="color:#B392F0;">getDeclaredMethods</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> methods.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Method method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> methods[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">        String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查找 ClassLoader中的registerAsParallelCapable()静态方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;registerAsParallelCapable&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(methodName)) </span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            method.</span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 调用registerAsParallelCapable()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryRegisterAsParallelCapable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassLoader.class.</span><span style="color:#6F42C1;">getDeclaredMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> methods.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> methods[i];</span></span>
<span class="line"><span style="color:#24292E;">        String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查找 ClassLoader中的registerAsParallelCapable()静态方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;registerAsParallelCapable&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(methodName)) </span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            method.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 调用registerAsParallelCapable()方法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在使用 ClassLoader 加载一个类的时候，JVM 会进行加锁同步，这也是我们能够利用类加载机制实现单例的原因。在 Java 6 中，ClassLoader.loadClass() 方法是用 synchronized 加锁同步的，需要全局竞争一把锁，效率略低。</p><p>在 Java 7 之后提供了两种加锁模式：</p><ul><li>串行模式下，锁的对象是还是 ClassLoader 本身，和 Java 6 里面的行为一样；</li><li>另外一种就是调用 registerAsParallelCapable() 方法之后，开启的并行加载模式。在并行模式下加载类时，会按照 classname 去获取锁。ClassLoader.loadClass() 方法中相应的实现片段如下：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(String name, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws ClassNotFoundException{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// getClassLoadingLock() 方法会返回加锁的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getClassLoadingLock</span><span style="color:#E1E4E8;">(name)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">       ... ... </span><span style="color:#6A737D;">// 加载指定类，具体加载细节不展开介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getClassLoadingLock</span><span style="color:#E1E4E8;">(String className) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parallelLockMap </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 检测是否开启了并行加载功能</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object newLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 若开启了并行加载，则一个className对应一把锁；否则还是只</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 对当前ClassLoader进行加锁</span></span>
<span class="line"><span style="color:#E1E4E8;">        lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parallelLockMap.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(className, newLock);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lock </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newLock;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lock;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadClass</span><span style="color:#24292E;">(String name, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> resolve)</span></span>
<span class="line"><span style="color:#24292E;">    throws ClassNotFoundException{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// getClassLoadingLock() 方法会返回加锁的对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getClassLoadingLock</span><span style="color:#24292E;">(name)) { </span></span>
<span class="line"><span style="color:#24292E;">       ... ... </span><span style="color:#6A737D;">// 加载指定类，具体加载细节不展开介绍</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getClassLoadingLock</span><span style="color:#24292E;">(String className) {</span></span>
<span class="line"><span style="color:#24292E;">    Object lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parallelLockMap </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 检测是否开启了并行加载功能</span></span>
<span class="line"><span style="color:#24292E;">        Object newLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 若开启了并行加载，则一个className对应一把锁；否则还是只</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对当前ClassLoader进行加锁</span></span>
<span class="line"><span style="color:#24292E;">        lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parallelLockMap.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(className, newLock);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lock </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newLock;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lock;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="agentclassloader-核心实现" tabindex="-1">AgentClassLoader 核心实现 <a class="header-anchor" href="#agentclassloader-核心实现" aria-label="Permalink to &quot;AgentClassLoader 核心实现&quot;">​</a></h4><p>在 AgentClassLoader 的构造方法中会初始化其 classpath 字段，该字段指向了 AgentClassLoader 要扫描的目录（skywalking-agent.jar 包同级别的 plugins 目录和 activations 目录），如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">File</span><span style="color:#E1E4E8;">&gt; classpath; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AgentClassLoader</span><span style="color:#E1E4E8;">(ClassLoader parent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(parent); </span><span style="color:#6A737D;">// 双亲委派机制</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取 skywalking-agent.jar所在的目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    File agentDictionary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AgentPackagePath.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    classpath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;</span><span style="color:#F97583;">File</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化 classpath集合，指向了skywalking-agent.jar包同目录的两个目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    classpath.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(agentDictionary, </span><span style="color:#9ECBFF;">&quot;plugins&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    classpath.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(agentDictionary, </span><span style="color:#9ECBFF;">&quot;activations&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">File</span><span style="color:#24292E;">&gt; classpath; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AgentClassLoader</span><span style="color:#24292E;">(ClassLoader parent) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(parent); </span><span style="color:#6A737D;">// 双亲委派机制</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取 skywalking-agent.jar所在的目录</span></span>
<span class="line"><span style="color:#24292E;">    File agentDictionary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AgentPackagePath.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    classpath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">File</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化 classpath集合，指向了skywalking-agent.jar包同目录的两个目录</span></span>
<span class="line"><span style="color:#24292E;">    classpath.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(agentDictionary, </span><span style="color:#032F62;">&quot;plugins&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    classpath.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(agentDictionary, </span><span style="color:#032F62;">&quot;activations&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AgentClassLoader 作为一个类加载器，主要工作还是从其 Classpath 下加载类（或资源文件），对应的就是其 findClass() 方法和 findResource() 方法，这里简单看一下 findClass() 方法的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在下面的getAllJars()方法中会扫描全部jar文件，并缓存到</span></span>
<span class="line"><span style="color:#6A737D;">// allJars字段(List&lt;Jar&gt;类型)中，后续再次扫描时会重用该缓</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Jar</span><span style="color:#E1E4E8;">&gt; allJars;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findClass</span><span style="color:#E1E4E8;">(String name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Jar</span><span style="color:#E1E4E8;">&gt; allJars </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAllJars</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 扫描过程比较简单，不再展开介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">    String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Jar jar </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> allJars) { </span><span style="color:#6A737D;">// 扫描所有jar包，查找类文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        JarEntry entry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jar.jarFile.</span><span style="color:#B392F0;">getJarEntry</span><span style="color:#E1E4E8;">(path);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (entry </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            URL classFileUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jar:file:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                jar.sourceFile.</span><span style="color:#B392F0;">getAbsolutePath</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;!/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...;</span><span style="color:#6A737D;">// 省略读取&quot;.class&quot;文件的逻辑                          // 加载类文件内容，创建相应的Class对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineClass</span><span style="color:#E1E4E8;">(name, data, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, data.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#6A737D;">// 类查找失败，直接抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassNotFoundException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can&#39;t find &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在下面的getAllJars()方法中会扫描全部jar文件，并缓存到</span></span>
<span class="line"><span style="color:#6A737D;">// allJars字段(List&lt;Jar&gt;类型)中，后续再次扫描时会重用该缓</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Jar</span><span style="color:#24292E;">&gt; allJars;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findClass</span><span style="color:#24292E;">(String name) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Jar</span><span style="color:#24292E;">&gt; allJars </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAllJars</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 扫描过程比较简单，不再展开介绍</span></span>
<span class="line"><span style="color:#24292E;">    String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Jar jar </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> allJars) { </span><span style="color:#6A737D;">// 扫描所有jar包，查找类文件</span></span>
<span class="line"><span style="color:#24292E;">        JarEntry entry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jar.jarFile.</span><span style="color:#6F42C1;">getJarEntry</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (entry </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            URL classFileUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jar:file:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                jar.sourceFile.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;!/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...;</span><span style="color:#6A737D;">// 省略读取&quot;.class&quot;文件的逻辑                          // 加载类文件内容，创建相应的Class对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineClass</span><span style="color:#24292E;">(name, data, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, data.length);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#6A737D;">// 类查找失败，直接抛出异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassNotFoundException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Can&#39;t find &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>findResource() 方法会遍历 allJars 集合缓存的全部 jar 包，从中查找指定的资源文件并返回，遍历逻辑与 findClass() 方法类似，不再展开分析。</p><p>最后，AgentClassLoader 中有一个 DEFAULT_LOADER 静态字段，记录了 默认的 AgentClassLoader，如下所示，但是注意，AgentClassLoader 并不是单例，后面会看到其他创建 AgentClassLoader 的地方。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> AgentClassLoader DEFAULT_LOADER;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AgentClassLoader DEFAULT_LOADER;</span></span></code></pre></div><h3 id="解析插件定义" tabindex="-1">解析插件定义 <a class="header-anchor" href="#解析插件定义" aria-label="Permalink to &quot;解析插件定义&quot;">​</a></h3><p>每个 Agent 插件中都会定义一个 skywalking-plugin.def 文件，如下图 tomcat-7.x-8.x-plugin 插件所示：</p>`,24),h=p(`<p>tomcat-7.x-8.x-plugin 插件中 skywalking-plugin.def 文件的内容如下，其中每一行都是一个插件类的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tomcat</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7.x</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">8.x</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.skywalking.apm.plugin.tomcat78x.define </span></span>
<span class="line"><span style="color:#E1E4E8;">.TomcatInstrumentation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">tomcat</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7.x</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">8.x</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.skywalking.apm.plugin.tomcat78x.define</span></span>
<span class="line"><span style="color:#E1E4E8;">.ApplicationDispatcherInstrumentation</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tomcat</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7.x</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">8.x</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.skywalking.apm.plugin.tomcat78x.define </span></span>
<span class="line"><span style="color:#24292E;">.TomcatInstrumentation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">tomcat</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7.x</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">8.x</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.skywalking.apm.plugin.tomcat78x.define</span></span>
<span class="line"><span style="color:#24292E;">.ApplicationDispatcherInstrumentation</span></span></code></pre></div><p>PluginResourcesResolver 是 Agent 插件的资源解析器，会通过 AgentClassLoader 中的 findResource() 方法读取所有 Agent 插件中的 skywalking-plugin.def 文件。</p><h3 id="abstractclassenhanceplugindefine" tabindex="-1">AbstractClassEnhancePluginDefine <a class="header-anchor" href="#abstractclassenhanceplugindefine" aria-label="Permalink to &quot;AbstractClassEnhancePluginDefine&quot;">​</a></h3><p>拿到全部插件的 skywalking-plugin.def 文件之后，PluginCfg 会逐行进行解析，转换成 PluginDefine 对象。PluginDefine 中有两个字段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 插件名称，以 tomcat-7.x-8.x-plugin 插件第一行为例，就是tomcat-7.x/8.x</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name; </span></span>
<span class="line"><span style="color:#6A737D;">// 插件类，对应上例中的 org.apache.skywalking.apm.plugin.tomcat78x.define</span></span>
<span class="line"><span style="color:#6A737D;">// .TomcatInstrumentation</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String defineClass;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 插件名称，以 tomcat-7.x-8.x-plugin 插件第一行为例，就是tomcat-7.x/8.x</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name; </span></span>
<span class="line"><span style="color:#6A737D;">// 插件类，对应上例中的 org.apache.skywalking.apm.plugin.tomcat78x.define</span></span>
<span class="line"><span style="color:#6A737D;">// .TomcatInstrumentation</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String defineClass;</span></span></code></pre></div><p>PluginCfg 是通过枚举实现的、单例的工具类，逻辑非常简单，不再展开介绍。</p><p>接下来会遍历全部 PluginDefine 对象，通过反射将其中 defineClass 字段中记录的插件类实例化，核心逻辑如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (PluginDefine pluginDefine </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pluginClassList) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意，这里使用类加载器是默认的AgentClassLoader实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractClassEnhancePluginDefine plugin </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        (AbstractClassEnhancePluginDefine)</span></span>
<span class="line"><span style="color:#E1E4E8;">            Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(pluginDefine.</span><span style="color:#B392F0;">getDefineClass</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            AgentClassLoader.</span><span style="color:#B392F0;">getDefault</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(plugin); </span><span style="color:#6A737D;">// 记录AbstractClassEnhancePluginDefine 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (PluginDefine pluginDefine </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pluginClassList) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意，这里使用类加载器是默认的AgentClassLoader实例</span></span>
<span class="line"><span style="color:#24292E;">    AbstractClassEnhancePluginDefine plugin </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        (AbstractClassEnhancePluginDefine)</span></span>
<span class="line"><span style="color:#24292E;">            Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(pluginDefine.</span><span style="color:#6F42C1;">getDefineClass</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            AgentClassLoader.</span><span style="color:#6F42C1;">getDefault</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    plugins.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(plugin); </span><span style="color:#6A737D;">// 记录AbstractClassEnhancePluginDefine 对象</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AbstractClassEnhancePluginDefine 抽象类是所有 Agent 插件类的顶级父类，其中定义了四个核心方法，决定了一个插件类应该增强哪些目标类、应该如何增强、具体插入哪些逻辑，如下所示：</p>`,10),C=p('<ul><li><strong>enhanceClass() 方法</strong>：返回的 ClassMatch，用于匹配当前插件要增强的目标类。</li><li><strong>define() 方法</strong>：插件类增强逻辑的入口，底层会调用下面的 enhance() 方法和 witnessClass() 方法。</li><li><strong>enhance() 方法</strong>：真正执行增强逻辑的地方。</li><li><strong>witnessClass() 方法</strong>：一个开源组件可能有多个版本，插件会通过该方法识别组件的不同版本，防止对不兼容的版本进行增强。</li></ul><p>在后续的课时中会详细介绍每个方法的具体功能和实现，你先知道 AbstractClassEnhancePluginDefine 中大致有这四个方法即可。</p><h4 id="classmatch" tabindex="-1">ClassMatch <a class="header-anchor" href="#classmatch" aria-label="Permalink to &quot;ClassMatch&quot;">​</a></h4><p>enhanceClass() 方法决定了一个插件类要增强的目标类，返回值为 ClassMatch 类型对象。ClassMatch 类似于一个过滤器，可以通过多种方式匹配到目标类，ClassMatch 接口的实现如下：</p>',4),D=p(`<ul><li>**NameMatch：**根据其 className 字段（String 类型）匹配目标类的名称。</li><li>**IndirectMatch：**子接口中定义了两个方法。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Junction是Byte Buddy中的类，可以通过and、or等操作串联多个ElementMatcher</span></span>
<span class="line"><span style="color:#6A737D;">// 进行匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">ElementMatcher.Junction </span><span style="color:#B392F0;">buildJunction</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#6A737D;">// 用于检测传入的类型是否匹配该Match</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isMatch</span><span style="color:#E1E4E8;">(TypeDescription typeDescription);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Junction是Byte Buddy中的类，可以通过and、or等操作串联多个ElementMatcher</span></span>
<span class="line"><span style="color:#6A737D;">// 进行匹配</span></span>
<span class="line"><span style="color:#24292E;">ElementMatcher.Junction </span><span style="color:#6F42C1;">buildJunction</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#6A737D;">// 用于检测传入的类型是否匹配该Match</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isMatch</span><span style="color:#24292E;">(TypeDescription typeDescription);</span></span></code></pre></div><ul><li><strong>MultiClassNameMatch</strong>：其中会指定一个 matchClassNames 集合，该集合内的类即为目标类。</li><li><strong>ClassAnnotationMatch</strong>：根据标注在类上的注解匹配目标类。</li><li><strong>MethodAnnotationMatch</strong>：根据标注在方法上的注解匹配目标类。</li><li><strong>HierarchyMatch</strong>：根据父类或是接口匹配目标类。</li></ul><p>这里以 ClassAnnotationMatch 为例展开分析，其中的 annotations 字段（String[] 类型）指定了该 ClassAnnotationMatch 对象需要检查的注解。在 buildJunction() 方法中将为每一个注解创建相应的 Junction 并将它们以 and 形式连接起来并返回，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ElementMatcher.Junction </span><span style="color:#B392F0;">buildJunction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ElementMatcher.Junction junction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String annotation </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> annotations) { </span><span style="color:#6A737D;">// 遍历全部注解</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (junction </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 该Junction用于检测类是否标注了指定注解</span></span>
<span class="line"><span style="color:#E1E4E8;">            junction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildEachAnnotation</span><span style="color:#E1E4E8;">(annotation);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">// 使用 and 方式将所有Junction对象连接起来</span></span>
<span class="line"><span style="color:#E1E4E8;">            junction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> junction.</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">buildEachAnnotation</span><span style="color:#E1E4E8;">(annotation));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    junction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> junction.</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">not</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">())); </span><span style="color:#6A737D;">// 排除接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> junction;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ElementMatcher.Junction </span><span style="color:#6F42C1;">buildJunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    ElementMatcher.Junction junction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String annotation </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> annotations) { </span><span style="color:#6A737D;">// 遍历全部注解</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (junction </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 该Junction用于检测类是否标注了指定注解</span></span>
<span class="line"><span style="color:#24292E;">            junction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildEachAnnotation</span><span style="color:#24292E;">(annotation);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">// 使用 and 方式将所有Junction对象连接起来</span></span>
<span class="line"><span style="color:#24292E;">            junction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> junction.</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">buildEachAnnotation</span><span style="color:#24292E;">(annotation));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    junction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> junction.</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">not</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">())); </span><span style="color:#6A737D;">// 排除接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> junction;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>isMatch() 方法的实现类似，只有包含所有指定注解的类，才能匹配成功，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isMatch</span><span style="color:#E1E4E8;">(TypeDescription typeDescription) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; annotationList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(annotations));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取该类上的注解</span></span>
<span class="line"><span style="color:#E1E4E8;">    AnnotationList declaredAnnotations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          typeDescription.</span><span style="color:#B392F0;">getDeclaredAnnotations</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 匹配一个删除一个</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (AnnotationDescription annotation </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> declaredAnnotations) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        annotationList.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(annotation</span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">getAnnotationType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getActualName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (annotationList.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 删空了，就匹配成功了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isMatch</span><span style="color:#24292E;">(TypeDescription typeDescription) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; annotationList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(annotations));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取该类上的注解</span></span>
<span class="line"><span style="color:#24292E;">    AnnotationList declaredAnnotations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          typeDescription.</span><span style="color:#6F42C1;">getDeclaredAnnotations</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 匹配一个删除一个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (AnnotationDescription annotation </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> declaredAnnotations) {</span></span>
<span class="line"><span style="color:#24292E;">        annotationList.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(annotation</span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">getAnnotationType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getActualName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (annotationList.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 删空了，就匹配成功了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其他 ClassMatch 接口的实现原理类似，不再展开分析，如果你感兴趣可以看一下代码。</p><h3 id="pluginfinder" tabindex="-1">PluginFinder <a class="header-anchor" href="#pluginfinder" aria-label="Permalink to &quot;PluginFinder&quot;">​</a></h3><p>PluginFinder 是 AbstractClassEnhancePluginDefine 查找器，可以根据给定的类查找用于增强的 AbstractClassEnhancePluginDefine 集合。</p><p>在 PluginFinder 的构造函数中会遍历前面课程已经实例化的 AbstractClassEnhancePluginDefine ，并根据 enhanceClass() 方法返回的 ClassMatcher 类型进行分类，得到如下两个集合：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 如果返回值为NameMatch类型，则相应 AbstractClassEnhancePluginDefine </span></span>
<span class="line"><span style="color:#6A737D;">// 对象会记录到该集合</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, LinkedList&lt;</span><span style="color:#F97583;">AbstractClassEnhancePluginDefine</span><span style="color:#E1E4E8;">&gt;&gt; nameMatchDefine;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 如果是其他类型返回值，则相应 AbstractClassEnhancePluginDefine </span></span>
<span class="line"><span style="color:#6A737D;">// 对象会记录到该集合</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">AbstractClassEnhancePluginDefine</span><span style="color:#E1E4E8;">&gt; signatureMatchDefine;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 如果返回值为NameMatch类型，则相应 AbstractClassEnhancePluginDefine </span></span>
<span class="line"><span style="color:#6A737D;">// 对象会记录到该集合</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, LinkedList&lt;</span><span style="color:#D73A49;">AbstractClassEnhancePluginDefine</span><span style="color:#24292E;">&gt;&gt; nameMatchDefine;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 如果是其他类型返回值，则相应 AbstractClassEnhancePluginDefine </span></span>
<span class="line"><span style="color:#6A737D;">// 对象会记录到该集合</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">AbstractClassEnhancePluginDefine</span><span style="color:#24292E;">&gt; signatureMatchDefine;</span></span></code></pre></div><p>find() 方法是 PluginFinder 对外暴露的查询方法，其中会先后遍历 nameMatchDefine 集合和 signatureMatchDefine 集合，通过 ClassMatch.isMatch() 方法确定所有的匹配插件。find() 方法的实现并不复杂，不再展开介绍。</p><h3 id="agentbuilder" tabindex="-1">AgentBuilder <a class="header-anchor" href="#agentbuilder" aria-label="Permalink to &quot;AgentBuilder&quot;">​</a></h3><p>前面已经分析了 Skywalking Agent 启动过程中加载配置信息、初始化 Config 类、查找 skywalking-pluing.def 文件、初始化 AbstractClassEnhancePluginDefine 对象等步骤。现在开始介绍 Byte Buddy 如何使用加载到的插件类增强目标方法。</p><p>在 SkywalkingAgent.premain() 方法中的步骤 5 中，首先会创建 ByteBuddy 对象，正如前面 Byte Buddy 基础课时中提到的，它是 Byte Buddy 的基础对象之一：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 步骤5、通过Byte Buddy API创建Agent</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ByteBuddy byteBuddy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ByteBuddy</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(TypeValidation.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(Config.Agent.IS_OPEN_DEBUGGING_CLASS));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 步骤5、通过Byte Buddy API创建Agent</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ByteBuddy byteBuddy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteBuddy</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(TypeValidation.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(Config.Agent.IS_OPEN_DEBUGGING_CLASS));</span></span></code></pre></div><p>Config.Agent.IS_OPEN_DEBUGGING_CLASS 在 agent.config 文件中对应的配置项是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">agent.is_open_debugging_class</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">agent.is_open_debugging_class</span></span></code></pre></div><p>如果将其配置为 true，则会将动态生成的类输出到 debugging 目录中。</p><p>接下来创建 AgentBuilder 对象，AgentBuilder 是 Byte Buddy 库专门用来支持 Java Agent 的一个 API，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AgentBuilder.</span><span style="color:#B392F0;">Default</span><span style="color:#E1E4E8;">(byteBuddy) </span><span style="color:#6A737D;">// 设置使用的ByteBuddy对象</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ignore</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nameStartsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;net.bytebuddy.&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">// 不会拦截下列包中的类</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nameStartsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.slf4j.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nameStartsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.apache.logging.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nameStartsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.groovy.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nameContains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javassist&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nameContains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.asm.&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nameStartsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sun.reflect&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">allSkyWalkingAgentExcludeToolkit</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 处理 Skywalking 的类</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// synthetic类和方法是由编译器生成的，这种类也需要忽略</span></span>
<span class="line"><span style="color:#E1E4E8;">       .</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(ElementMatchers.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">TypeDescription</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">isSynthetic</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(pluginFinder.</span><span style="color:#B392F0;">buildMatch</span><span style="color:#E1E4E8;">())</span><span style="color:#6A737D;">// 拦截</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Transformer</span><span style="color:#E1E4E8;">(pluginFinder)) </span><span style="color:#6A737D;">// 设置Transform</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Listener</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 设置Listener</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">installOn</span><span style="color:#E1E4E8;">(instrumentation)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AgentBuilder.</span><span style="color:#6F42C1;">Default</span><span style="color:#24292E;">(byteBuddy) </span><span style="color:#6A737D;">// 设置使用的ByteBuddy对象</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ignore</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nameStartsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;net.bytebuddy.&quot;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// 不会拦截下列包中的类</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nameStartsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.slf4j.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nameStartsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.apache.logging.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nameStartsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.groovy.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nameContains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javassist&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nameContains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.asm.&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nameStartsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sun.reflect&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">allSkyWalkingAgentExcludeToolkit</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 处理 Skywalking 的类</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// synthetic类和方法是由编译器生成的，这种类也需要忽略</span></span>
<span class="line"><span style="color:#24292E;">       .</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(ElementMatchers.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">TypeDescription</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">isSynthetic</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(pluginFinder.</span><span style="color:#6F42C1;">buildMatch</span><span style="color:#24292E;">())</span><span style="color:#6A737D;">// 拦截</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Transformer</span><span style="color:#24292E;">(pluginFinder)) </span><span style="color:#6A737D;">// 设置Transform</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Listener</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 设置Listener</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">installOn</span><span style="color:#24292E;">(instrumentation)</span></span></code></pre></div><p>简单解释一下这里使用到的 AgentBuilder 的方法：</p><ul><li><strong>ignore() 方法</strong>：忽略指定包中的类，对这些类不会进行拦截增强。</li><li><strong>type() 方法</strong>：在类加载时根据传入的 ElementMatcher 进行拦截，拦截到的目标类将会被 transform() 方法中指定的 Transformer 进行增强。</li><li><strong>transform() 方法</strong>：这里指定的 Transformer 会对前面拦截到的类进行增强。</li><li><strong>with() 方法</strong>：添加一个 Listener 用来监听 AgentBuilder 触发的事件。</li></ul><p>首先， PluginFInder.buildMatch() 方法返回的 ElementMatcher 对象会将全部插件的匹配规则（即插件的 enhanceClass() 方法返回的 ClassMatch）用 OR 的方式连接起来，这样，所有插件能匹配到的所有类都会交给 Transformer 处理。</p><p>再来看 with() 方法中添加的监听器 ------ SkywalkingAgent.Listener，它继承了 AgentBuilder.Listener 接口，当监听到 Transformation 事件时，会根据 IS_OPEN_DEBUGGING_CLASS 配置决定是否将增强之后的类持久化成 class 文件保存到指定的 log 目录中。注意，该操作是需要加锁的，会影响系统的性能，一般只在测试环境中开启，在生产环境中不会开启。</p><p>最后来看 Skywalking.Transformer，它实现了 AgentBuilder.Transformer 接口，其 transform() 方法是插件增强目标类的入口。Skywalking.Transformer 会通过 PluginFinder 查找目标类匹配的插件（即 AbstractClassEnhancePluginDefine 对象），然后交由 AbstractClassEnhancePluginDefine 完成增强，核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">builder,</span></span>
<span class="line"><span style="color:#E1E4E8;">    TypeDescription typeDescription, </span><span style="color:#6A737D;">// 被拦截的目标类</span></span>
<span class="line"><span style="color:#E1E4E8;">    ClassLoader classLoader,  </span><span style="color:#6A737D;">// 加载目标类的ClassLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">    JavaModule module) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从PluginFinder中查找匹配该目标类的插件，PluginFinder的查找逻辑不再重复</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">AbstractClassEnhancePluginDefine</span><span style="color:#E1E4E8;">&gt; pluginDefines </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">           pluginFinder.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(typeDescription);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pluginDefines.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){ </span></span>
<span class="line"><span style="color:#E1E4E8;">        DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">newBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder;</span></span>
<span class="line"><span style="color:#E1E4E8;">        EnhanceContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnhanceContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (AbstractClassEnhancePluginDefinedefine </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pluginDefines) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// AbstractClassEnhancePluginDefine.define()方法是插件入口，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 在其中完成了对目标类的增强</span></span>
<span class="line"><span style="color:#E1E4E8;">            DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">possibleNewBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                 define.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(typeDescription, </span></span>
<span class="line"><span style="color:#E1E4E8;">                      newBuilder, classLoader,context);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (possibleNewBuilder </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 注意这里，如果匹配了多个插件，会被增强多次</span></span>
<span class="line"><span style="color:#E1E4E8;">                newBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> possibleNewBuilder;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> newBuilder;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">builder,</span></span>
<span class="line"><span style="color:#24292E;">    TypeDescription typeDescription, </span><span style="color:#6A737D;">// 被拦截的目标类</span></span>
<span class="line"><span style="color:#24292E;">    ClassLoader classLoader,  </span><span style="color:#6A737D;">// 加载目标类的ClassLoader</span></span>
<span class="line"><span style="color:#24292E;">    JavaModule module) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从PluginFinder中查找匹配该目标类的插件，PluginFinder的查找逻辑不再重复</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">AbstractClassEnhancePluginDefine</span><span style="color:#24292E;">&gt; pluginDefines </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">           pluginFinder.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(typeDescription);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pluginDefines.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#24292E;">        DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">newBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder;</span></span>
<span class="line"><span style="color:#24292E;">        EnhanceContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnhanceContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (AbstractClassEnhancePluginDefinedefine </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pluginDefines) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// AbstractClassEnhancePluginDefine.define()方法是插件入口，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 在其中完成了对目标类的增强</span></span>
<span class="line"><span style="color:#24292E;">            DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">possibleNewBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                 define.</span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">(typeDescription, </span></span>
<span class="line"><span style="color:#24292E;">                      newBuilder, classLoader,context);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (possibleNewBuilder </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 注意这里，如果匹配了多个插件，会被增强多次</span></span>
<span class="line"><span style="color:#24292E;">                newBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> possibleNewBuilder;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newBuilder;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要注意：如果一个类被多个插件匹配会被增强多次，当你打开 IS_OPEN_DEBUGGING_CLASS 配置项时，会看到对应的多个 class 文件。</p><h3 id="加载-bootservice" tabindex="-1">加载 BootService <a class="header-anchor" href="#加载-bootservice" aria-label="Permalink to &quot;加载 BootService&quot;">​</a></h3><p>SkyWalking Agent 启动的最后一步是使用前面介绍的 JDK SPI 技术加载 BootService 接口的所有实现类，BootService 接口中定义了 SkyWalking Agent 核心服务的行为，其定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BootService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onComplete</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BootService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onComplete</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ServiceManager 是 BootService 实例的管理器，主要负责管理 BootService 实例的生命周期。</p><p>ServiceManager 是个单例，底层维护了一个 bootedServices 集合（Map&lt;Class, BootService&gt; 类型），记录了每个 BootService 实现对应的实例。boot() 方法是 ServiceManager 的核心方法，它首先通过 load() 方法实例化全部 BootService 接口实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">BootService</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> allServices) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 很明显使用了 JDK SPI 技术加载并实例化 META-INF/services下的全部 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// BootService接口实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;</span><span style="color:#F97583;">BootService</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServiceLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        BootService.class,AgentClassLoader.</span><span style="color:#B392F0;">getDefault</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 记录到方法参数传入的 allServices集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        allServices.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">BootService</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> allServices) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 很明显使用了 JDK SPI 技术加载并实例化 META-INF/services下的全部 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// BootService接口实现</span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;</span><span style="color:#D73A49;">BootService</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        BootService.class,AgentClassLoader.</span><span style="color:#6F42C1;">getDefault</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 记录到方法参数传入的 allServices集合中</span></span>
<span class="line"><span style="color:#24292E;">        allServices.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 apm-agent-core 模块的 resource/META-INF.services/org.apache.skywalking.apm.agent.core.boot.BootService 文件中，记录了 ServiceManager 要加载的 BootService 接口实现类，如下所示，这些类在后面的课时中会逐个详细介绍其具体功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.apache.skywalking.apm.agent.core.remote.TraceSegmentServiceClient</span></span>
<span class="line"><span style="color:#E1E4E8;">org.apache.skywalking.apm.agent.core.context.ContextManager</span></span>
<span class="line"><span style="color:#E1E4E8;">org.apache.skywalking.apm.agent.core.sampling.SamplingService</span></span>
<span class="line"><span style="color:#E1E4E8;">org.apache.skywalking.apm.agent.core.remote.GRPCChannelManager</span></span>
<span class="line"><span style="color:#E1E4E8;">org.apache.skywalking.apm.agent.core.jvm.JVMService</span></span>
<span class="line"><span style="color:#E1E4E8;">org.apache.skywalking.apm.agent.core.remote.ServiceAndEndpointRegisterClient</span></span>
<span class="line"><span style="color:#E1E4E8;">org.apache.skywalking.apm.agent.core.context.ContextManagerExtendService</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.apache.skywalking.apm.agent.core.remote.TraceSegmentServiceClient</span></span>
<span class="line"><span style="color:#24292E;">org.apache.skywalking.apm.agent.core.context.ContextManager</span></span>
<span class="line"><span style="color:#24292E;">org.apache.skywalking.apm.agent.core.sampling.SamplingService</span></span>
<span class="line"><span style="color:#24292E;">org.apache.skywalking.apm.agent.core.remote.GRPCChannelManager</span></span>
<span class="line"><span style="color:#24292E;">org.apache.skywalking.apm.agent.core.jvm.JVMService</span></span>
<span class="line"><span style="color:#24292E;">org.apache.skywalking.apm.agent.core.remote.ServiceAndEndpointRegisterClient</span></span>
<span class="line"><span style="color:#24292E;">org.apache.skywalking.apm.agent.core.context.ContextManagerExtendService</span></span></code></pre></div><p>加载完上述 BootService 实现类型之后，ServiceManager 会针对 BootService 上的 @DefaultImplementor 和 @OverrideImplementor 注解进行处理：</p><ul><li>@DefaultImplementor 注解用于标识 BootService 接口的默认实现。</li><li>@OverrideImplementor 注解用于覆盖默认 BootService 实现，通过其 value 字段指定要覆盖的默认实现。</li></ul><p>BootService 的覆盖逻辑如下图所示：</p>`,40),v=p(`<p>确定完要使用的 BootService 实现之后，ServiceManager 将统一初始化 bootServices 集合中的 BootService 实现，同样是在 ServiceManager.boot() 方法中，会逐个调用 BootService 实现的 prepare()、startup()、onComplete() 方法，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    bootedServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadAllServices</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 调用全部BootService对象的prepare()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">startup</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 调用全部BootService对象的boot()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onComplete</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 调用全部BootService对象的onComplete()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    bootedServices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadAllServices</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用全部BootService对象的prepare()方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">startup</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用全部BootService对象的boot()方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onComplete</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用全部BootService对象的onComplete()方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Skywalking Agent 启动流程的最后，会添加一个 JVM 退出钩子，并通过 ServiceManager.shutdown() 方法，关闭前文启动的全部 BootService 服务。</p><p>SkywalkingAgent.premain() 方法中相关的代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addShutdownHook</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServiceManager.INSTANCE.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&quot;skywalking service shutdown thread&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addShutdownHook</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        ServiceManager.INSTANCE.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#032F62;">&quot;skywalking service shutdown thread&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>总结</p><p>本课时重点介绍了 SkyWalking Agent 启动核心流程的实现，深入分析了 Skywalking Agent 配置信息的初始化、插件加载原理、AgentBuilder 如何与插件类配合增强目标类、BootService 的加载流程。本课时是整个 Skywalking Agent 的框架性流程介绍，在后续的课时中将详细介绍 AbstractClassEnhancePluginDefine 以及 BootService 接口的实现。</p>`,7);function k(B,m,b,f,S,_){const a=e("Image");return t(),c("div",null,[E,y,i,g,d,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/53/Ciqah16FsIuAY29rAADXS1mP1qk235.png"}),s(),u,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIuAD9SEAAXN2BldzCw554.png"}),s(),F,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/53/Ciqah16FsIuAMuWAAAGqpFKOkno592.png"}),s(),A,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIyAD1i3AAAs9sJ1s2Y631.png"}),s(),h,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIyAT0wmAAIua7pnGBg062.png"}),s(),C,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIyAbzszAAFwI9x3bVc197.png"}),s(),D,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/53/Ciqah16FsIyAKF5JAAFCMa4LIHU953.png"}),s(),v])}const L=o(r,[["render",k]]);export{P as __pageData,L as default};
