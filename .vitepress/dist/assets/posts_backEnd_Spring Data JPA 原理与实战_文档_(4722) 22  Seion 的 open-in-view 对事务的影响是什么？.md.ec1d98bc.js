import{_ as l,j as e,o as t,h as r,k as p,f as n,s,Q as o}from"./chunks/framework.d3daa342.js";const z=JSON.parse('{"title":"22Seion的open-in-view对事务的影响是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4722) 22  Seion 的 open-in-view 对事务的影响是什么？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4722) 22  Seion 的 open-in-view 对事务的影响是什么？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4722) 22  Seion 的 open-in-view 对事务的影响是什么？.md"},i=s("h1",{id:"_22seion的open-in-view对事务的影响是什么",tabindex:"-1"},[n("22Seion的open-in-view对事务的影响是什么？ "),s("a",{class:"header-anchor",href:"#_22seion的open-in-view对事务的影响是什么","aria-label":'Permalink to "22Seion的open-in-view对事务的影响是什么？"'},"​")],-1),E=s("p",null,"你好，欢迎来到第 22 讲，今天我们来学习 Session 的相关内容。",-1),y=s("p",null,"当我们使用 Spring Boot 加 JPA 的时候，会发现 Spring 帮我们新增了一个 spring.jpa.open-in-view 的配置，但是 Hibernate 本身却没有这个配置，不过其又是和 Hibernate 中的 Session 相关的，因此还是很重要的内容，所以这一讲我们来学习一下。",-1),g=s("p",null,"由于 Session 不是 JPA 协议规定的，所以官方对于这方面的资料比较少，从业者只能根据个人经验和源码来分析它的本质，那么接下来我就以我个人的经验为你介绍这部分的概念。首先了解 Session 是什么。",-1),d=s("h3",{id:"session-是什么",tabindex:"-1"},[n("Session 是什么？ "),s("a",{class:"header-anchor",href:"#session-是什么","aria-label":'Permalink to "Session 是什么？"'},"​")],-1),u=s("p",null,"我们通过一个类的关系图来回顾一下，看看 Session 在什么样的位置上。",-1),A=s("p",null,"其中，SessionImpl 是 Hibernate 实现 JPA 协议的 EntityManager 的一种实现方式，即实现类；而 Session 是 Hibernate 中的概念，完全符合 EntityManager 的接口协议，同时又完成了 Hibernate 的特殊实现。",-1),F=s("p",null,"在 Spring Data JPA 的框架中，我们可以狭隘地把 Session 理解为 EntityManager，因为其对于 JPA 的任何操作都是通过 EntityManager 的接口进行的，我们可以把 Session 里面的复杂逻辑当成一个黑盒子。即使 SessionImpl 能够实现 Hibernate 的 Session 接口，但如果我们使用的是 Spring Data JPA，那么实现再多的接口也和我们没有任何关系。",-1),C=s("p",null,"除非你不用 JPA 的接口，直接用 Hibernate 的 Navite 来实现，但是我不建议你这么做，因为过程太复杂了。那么 SessionImpl 对使用 JPA 体系的人来说，它主要解决了什么问题呢？",-1),_=s("h3",{id:"sessionimpl-解决了什么问题",tabindex:"-1"},[n("SessionImpl 解决了什么问题？ "),s("a",{class:"header-anchor",href:"#sessionimpl-解决了什么问题","aria-label":'Permalink to "SessionImpl 解决了什么问题？"'},"​")],-1),h=s("p",null,"我们通过源码来看一下，请看下面这张图。",-1),D=o(`<p>通过 SessionImpl 的源码和 Structure 的视图，我们可以&quot;简单粗暴&quot;地得出如下结论。</p><ol><li><p>SessionImpl 是 EntityManager 的实现类，那么肯定实现了 JPA 协议规定的 EntityManager 的所有功能。比如我们上一课时讲解的 Persistence Context 里面 Entity 状态的所有操作，即管理了 Entity 的生命周期；EntityManager 暴露的 flushModel 的设置；EntityManager 对 Transaction 做了&quot;是否开启新事务&quot;&quot;是否关闭当前事务&quot;的逻辑。</p></li><li><p>如上图所示，实现 PersistenceContext 对象实例化的过程，使得 PersistenceContext 生命周期就是 Session 的生命周期。所以我们可以抽象地理解为，Sesession 是对一些数据库的操作，需要放在同一个上下文的集合中，就是我们常说的一级缓存。</p></li><li><p>Session 有 open 的话，那么肯定有 close。open 的时候做了&quot;是否开启事务&quot;&quot;是否获取连接&quot;等逻辑；close 的时候做了&quot;是否关闭事务&quot;&quot;释放连接&quot;等动作；</p></li><li><p>Session 的任何操作都离不开事务和连接，那么肯定用当前线程保存了这些资源。</p></li></ol><p>当我们清楚了 SessionImpl、EntityManager 的这些基础概念之后，那么接着来看看 open-in-view 是什么，它都做了什么事情呢？</p><h3 id="jpa-里面的-open-in-view-是做什么的" tabindex="-1">JPA 里面的 open-in-view 是做什么的？ <a class="header-anchor" href="#jpa-里面的-open-in-view-是做什么的" aria-label="Permalink to &quot;JPA 里面的 open-in-view 是做什么的？&quot;">​</a></h3><p>open-in-view 是 Spring Boot 自动加载 Spring Data JPA 提供的一个配置，全称为 spring.jpa.open-in-view=true，它只有 true 和 false 两个值，默认是 true。那么它到底有什么威力呢？</p><h4 id="open-in-view-的作用" tabindex="-1">open-in-view 的作用 <a class="header-anchor" href="#open-in-view-的作用" aria-label="Permalink to &quot;open-in-view 的作用&quot;">​</a></h4><p>我们可以在 JpaBaseConfiguration 中找到关键源码，通过源码来看一下 open-in-view 都做了哪些事情，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaBaseConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanFactoryAware</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnWebApplication</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Type.SERVLET)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">(WebMvcConfigurer.class)</span></span>
<span class="line"><span style="color:#6A737D;">//这个提供了一种自定义注册OpenEntityManagerInViewInterceptor或者OpenEntityManagerInViewFilter的可能，同时我们可以看到在Web的MVC层打开session的两种方式，一种是Interceptor，另外一种是Filter；这两个类任选其一即可，默认用的是OpenEntityManagerInViewInterceptor.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">({ OpenEntityManagerInViewInterceptor.class, OpenEntityManagerInViewFilter.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingFilterBean</span><span style="color:#E1E4E8;">(OpenEntityManagerInViewFilter.class)</span></span>
<span class="line"><span style="color:#6A737D;">//这里使用了spring.jpa.open-in-view的配置，只有为true的时候才会执行这个配置类，当什么都没配置的时候，默认就是true，也就是默认此配置文件就会自动加载；我们可以设置成false，关闭加载；</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.jpa&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;open-in-view&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">havingValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaWebConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Log logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LogFactory.</span><span style="color:#B392F0;">getLog</span><span style="color:#E1E4E8;">(JpaWebConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> JpaProperties jpaProperties;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaWebConfiguration</span><span style="color:#E1E4E8;">(JpaProperties </span><span style="color:#FFAB70;">jpaProperties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.jpaProperties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jpaProperties;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">//关键逻辑在OpenEntityManagerInViewInterceptor类里面；加载OpenEntityManagerInViewInterceptor用来在MVC的拦截器里面打开EntityManager，而当我们没有配置spring.jpa.open-in-view的时候，看下面代码spring容器会打印warn日志警告我们，默认开启了open-in-view，提醒我们需要注意影响面，具体有哪些影响面，希望你可以在此篇文章中找到答案，并欢迎留言；</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> OpenEntityManagerInViewInterceptor </span><span style="color:#B392F0;">openEntityManagerInViewInterceptor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.jpaProperties.</span><span style="color:#B392F0;">getOpenInView</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spring.jpa.open-in-view is enabled by default. &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Therefore, database queries may be performed during view &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rendering. Explicitly configure spring.jpa.open-in-view to disable this warning&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OpenEntityManagerInViewInterceptor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//利用WebMvcConfigurer加载上面的OpenEntityManagerInViewInterceptor拦截器进入到MVC里面；</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> WebMvcConfigurer </span><span style="color:#B392F0;">openEntityManagerInViewInterceptorConfigurer</span><span style="color:#E1E4E8;">(  OpenEntityManagerInViewInterceptor </span><span style="color:#FFAB70;">interceptor</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">         @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addInterceptors</span><span style="color:#E1E4E8;">(InterceptorRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            registry.</span><span style="color:#B392F0;">addWebRequestInterceptor</span><span style="color:#E1E4E8;">(interceptor);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">.....</span><span style="color:#6A737D;">//其他不重要的代码省略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaBaseConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanFactoryAware</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnWebApplication</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Type.SERVLET)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">(WebMvcConfigurer.class)</span></span>
<span class="line"><span style="color:#6A737D;">//这个提供了一种自定义注册OpenEntityManagerInViewInterceptor或者OpenEntityManagerInViewFilter的可能，同时我们可以看到在Web的MVC层打开session的两种方式，一种是Interceptor，另外一种是Filter；这两个类任选其一即可，默认用的是OpenEntityManagerInViewInterceptor.class;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">({ OpenEntityManagerInViewInterceptor.class, OpenEntityManagerInViewFilter.class })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingFilterBean</span><span style="color:#24292E;">(OpenEntityManagerInViewFilter.class)</span></span>
<span class="line"><span style="color:#6A737D;">//这里使用了spring.jpa.open-in-view的配置，只有为true的时候才会执行这个配置类，当什么都没配置的时候，默认就是true，也就是默认此配置文件就会自动加载；我们可以设置成false，关闭加载；</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.jpa&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;open-in-view&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">havingValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaWebConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Log logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogFactory.</span><span style="color:#6F42C1;">getLog</span><span style="color:#24292E;">(JpaWebConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> JpaProperties jpaProperties;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaWebConfiguration</span><span style="color:#24292E;">(JpaProperties </span><span style="color:#E36209;">jpaProperties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.jpaProperties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jpaProperties;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">//关键逻辑在OpenEntityManagerInViewInterceptor类里面；加载OpenEntityManagerInViewInterceptor用来在MVC的拦截器里面打开EntityManager，而当我们没有配置spring.jpa.open-in-view的时候，看下面代码spring容器会打印warn日志警告我们，默认开启了open-in-view，提醒我们需要注意影响面，具体有哪些影响面，希望你可以在此篇文章中找到答案，并欢迎留言；</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> OpenEntityManagerInViewInterceptor </span><span style="color:#6F42C1;">openEntityManagerInViewInterceptor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.jpaProperties.</span><span style="color:#6F42C1;">getOpenInView</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.jpa.open-in-view is enabled by default. &quot;</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Therefore, database queries may be performed during view &quot;</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rendering. Explicitly configure spring.jpa.open-in-view to disable this warning&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OpenEntityManagerInViewInterceptor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//利用WebMvcConfigurer加载上面的OpenEntityManagerInViewInterceptor拦截器进入到MVC里面；</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> WebMvcConfigurer </span><span style="color:#6F42C1;">openEntityManagerInViewInterceptorConfigurer</span><span style="color:#24292E;">(  OpenEntityManagerInViewInterceptor </span><span style="color:#E36209;">interceptor</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">         @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(InterceptorRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            registry.</span><span style="color:#6F42C1;">addWebRequestInterceptor</span><span style="color:#24292E;">(interceptor);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">.....</span><span style="color:#6A737D;">//其他不重要的代码省略</span></span></code></pre></div><p>通过上面的源码我们可以看到，spring.jpa.open-in-view 的主要作用就是帮我们加载 OpenEntityManagerInViewInterceptor 这个类，那么我们再打开这个类的源码，看看它帮我们实现的主要功能是什么？</p><h4 id="openentitymanagerinviewinterceptor-源码分析" tabindex="-1">OpenEntityManagerInViewInterceptor 源码分析 <a class="header-anchor" href="#openentitymanagerinviewinterceptor-源码分析" aria-label="Permalink to &quot;OpenEntityManagerInViewInterceptor 源码分析&quot;">​</a></h4><p>打开这一源码后，可以看到下图所示的界面。</p>`,11),I=s("p",null,"我们可以发现，OpenEntityManagerInViewInterceptor 实现了 WebRequestInterceptor 的接口中的两个方法：",-1),S=s("ol",null,[s("li",null,[s("p",null,"public void preHandle(WebRequest request) 方法，里面实现了在每次的 Web MVC 请求之前，通过 createEntityManager 方法创建 EntityManager 和 EntityManagerHolder 的逻辑；")]),s("li",null,[s("p",null,"public void afterCompletion(WebRequest request, @Nullable Exception ex) 方法，里面实现了在每次 Web MVC 的请求结束之后，关闭 EntityManager 的逻辑。")])],-1),v=s("p",null,"我们如果继续看 createEntityManager 方法的实现，还会找到如下关键代码。",-1),T=s("p",null,"上图可以看到，我们通过 SessionFactoryImpl 中的 createEntityManager() 方法，创建了一个 EntityManager 的实现 Session；通过拦截器创建了 EntityManager 事务处理逻辑，默认是 Join 类型（即有事务存在会加入）；而 builder.openSession() 逻辑就是 new SessionImpl(sessionFactory, this)。",-1),b=s("p",null,"所以这个时候可以知道，通过 open-in-view 配置的拦截器，会帮我们的每个请求都创建一个 SessionImpl 实例；而 SessionImpl 里面存储了整个 PersistenceContext 和各种事务连接状态，可以判断出来 Session 的实例对象比较大。",-1),M=s("p",null,"并且，我们打开 spring.jap.open-in-view=true 会发现，如果一个请求处理的逻辑比较耗时，牵涉到的对象比较多，这个时候就比较考验我们对 jvm 的内存配置策略了，如果配置不好就会经常出现内存溢出的现象。因此当处理比较耗时的请求和批量处理请求的时候，需要考虑到这一点。",-1),q=s("p",null,"到这里，经常看源码的同学就应该会好奇了，都有哪些时候需要调用 openSession 呢？那是不是也可以知道 EntityManager(Session) 的打开时机了？",-1),m=s("h4",{id:"entitymanager-session-的打开时机及扩展场景",tabindex:"-1"},[n("EntityManager(Session) 的打开时机及扩展场景 "),s("a",{class:"header-anchor",href:"#entitymanager-session-的打开时机及扩展场景","aria-label":'Permalink to "EntityManager(Session) 的打开时机及扩展场景"'},"​")],-1),O=s("p",null,"我们通过 IDEA 开发者工具，直接点击右键查 public Session createEntityManager() 此方法被使用到的地方即可，如下图所示。",-1),N=o(`<p>其中，EntityManagerFactoryAccessor 是 OpenEntityManagerInViewInterceptor 的父类，从图上我们可以看得出来，Session 的创建（也可以说是 EntityManager 的创建）对我们有用的时机，目前就有三种。</p><p>第一种：Web View Interceptor，通过 spring.jpa.open-in-view 控制。</p><p>第二种：Web Filter，这种方式是 Spring 给我们提供的另外一种应用场景，比如有些耗时的、批量处理的请求，我们不想在请求的时候开启 Session，而是想在处理简单逻辑后，需要用到延迟加载机制的请求时 Open Session。因为开启 Session 后，我们写框架代码的时候可以利用 lazy 机制。而这个时候我们就可以考虑使用 OpenEntityManagerInViewFilter，配置请求 filter 的过滤机制，实现不同的请求以及不同 Open Session 的逻辑了。</p><p>第三种：JPA Transaction，这种方式就是利用 JpaTransactionManager，实现在事务开启的时候打开 Session，在事务结束的时候关闭 Session。</p><p>所以默认情况下，Session 的开启时机有两个：每个请求之前、新的事务开启之前；而 Session 的关闭时机也是两个：每个请求结束之后、事务关闭之后。</p><p>此外，EntityManager(Session) 打开之后，资源存储在当前线程里面 （ThreadLoacal），所以一个 Session 中即使开启了多个事务，也不会创建多个 EntityManager 或者 Session。</p><p>而事务在关闭之前，也会检查一下此 EntityManager / Session 是不是我这个事务创建的，如果是就关闭，如果不是就不关闭，不过其不会关闭在事务范围之外创建的 EntityManager / Session。</p><p>这个机制其实还给我们一些额外思考：我们是不是可以自由选择开启 / 关闭 Session 呢？不一定是 view / filter / 事务，任何多事务组合的代码模块都可以。只要我们知道什么时间开启，保证一定能 close 就没有问题。</p><p>下面我们通过日志来看一下两种打开、关闭 EntityManager 的时机。</p><h4 id="验证-entitymanager-的创建和释放的日志" tabindex="-1">验证 EntityManager 的创建和释放的日志 <a class="header-anchor" href="#验证-entitymanager-的创建和释放的日志" aria-label="Permalink to &quot;验证 EntityManager 的创建和释放的日志&quot;">​</a></h4><p>第一步：我们新建一个 UserController 的方法，用来模拟请求两段事务的情况，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/info&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">saveUserInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   UserInfo u2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (u2</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      u2.</span><span style="color:#B392F0;">setLastName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">userInfo.</span><span style="color:#B392F0;">getLastModifiedTime</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//更新u2，新开启一个事务</span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(u2);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//更新userInfo，新开启一个事务</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">saveUserInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> UserInfo userInfo) {</span></span>
<span class="line"><span style="color:#24292E;">   UserInfo u2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (u2</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      u2.</span><span style="color:#6F42C1;">setLastName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">userInfo.</span><span style="color:#6F42C1;">getLastModifiedTime</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//更新u2，新开启一个事务</span></span>
<span class="line"><span style="color:#24292E;">      userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(u2);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//更新userInfo，新开启一个事务</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，里面调用了两个 save 操作，没有指定事务。但是我之前讲过，因为 userInfoRepository 的实现类 SimpleJpaRepository 的 save 方法上面有 @Transactional 注解，所以每个 userInfoRepository.save() 方法就会开启新的事务。我们利用这个机制在上面的 Controller 里面模拟了两个事务。</p><p>第二步：打开 open-in-view，同时修改一些日志级别，方便我们观察，配置如下述代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## 打开open</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">in</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.open</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">in</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">## 修改日志级别</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.springframework.orm.jpa.JpaTransactionManager</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.hibernate.internal</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.hibernate.engine.transaction.internal</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## 打开open</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">in</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.open</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">in</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">## 修改日志级别</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.springframework.orm.jpa.JpaTransactionManager</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.hibernate.internal</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.hibernate.engine.transaction.internal</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace</span></span></code></pre></div><p>第三步：启动项目，发送如下请求。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#### update</span></span>
<span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8087</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#### update</span></span>
<span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8087</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}</span></span></code></pre></div><p>然后我们查看一下日志，关键日志如下图所示。</p>`,18),f=o('<p>可以看到，我们请求了 user/info 之后就开启了 Session，然后在 Controller 方法执行的过程中开启了两段事务，每个事务结束之后都没有关闭 Session，而是等两个事务都结束之后，并且 Controller 方法执行完毕之后，才 Closing Session 的。中间过程只创建了一次 Session。</p><p>第四步：其他都不变的前提下，我们把 open-in-view 改成 false，如下面这行代码所示。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.jpa.open-in-view=false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.jpa.open-in-view=false</span></span></code></pre></div><p>我们再执行刚才的请求，会得到如下日志。</p>',4),B=o(`<p>通过日志可以看到，其中开启了两次事务，每个事务创建之后都会创建一个 Session，即开启了两个 Session，每个 Session 的 ID 是不一样的；在每个事务结束之后关闭了 Session，关闭了 EntityManager。</p><p>通过上面的事例和日志，我们可以看到 spring.jpa.open-in-view 对 session 和事务的影响，那么它对数据库的连接有什么影响呢？我们看一下 hibernate.connection.handling_mode 这个配置。</p><h3 id="hibernate-connection-handling-mode-详解" tabindex="-1">hibernate.connection.handling_mode 详解 <a class="header-anchor" href="#hibernate-connection-handling-mode-详解" aria-label="Permalink to &quot;hibernate.connection.handling_mode 详解&quot;">​</a></h3><p>通过之前讲解的类 AvailableSettings，可以找到如下三个关键配置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 指定获得db连接的方式，hibernate5.2之后已经不推荐使用，改用hibernate.connection.handling_mode配置形式</span></span>
<span class="line"><span style="color:#E1E4E8;">String ACQUIRE_CONNECTIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.acquisition_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 释放连接的模式有哪些？hibernate5.2之后也不推荐使用，改用hibernate.connection.handling_mode配置形式</span></span>
<span class="line"><span style="color:#E1E4E8;">String RELEASE_CONNECTIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.release_mode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//指定获取连接和释放连接的模式，hibernate5.2之后新增的配置项，代替上面两个旧的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">String CONNECTION_HANDLING </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hibernate.connection.handling_mode&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 指定获得db连接的方式，hibernate5.2之后已经不推荐使用，改用hibernate.connection.handling_mode配置形式</span></span>
<span class="line"><span style="color:#24292E;">String ACQUIRE_CONNECTIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.acquisition_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 释放连接的模式有哪些？hibernate5.2之后也不推荐使用，改用hibernate.connection.handling_mode配置形式</span></span>
<span class="line"><span style="color:#24292E;">String RELEASE_CONNECTIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.release_mode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//指定获取连接和释放连接的模式，hibernate5.2之后新增的配置项，代替上面两个旧的配置</span></span>
<span class="line"><span style="color:#24292E;">String CONNECTION_HANDLING </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hibernate.connection.handling_mode&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>那么 hibernate.connection.handling_mode 对应的配置有哪些呢？Hibernate 5 提供了五种模式，我们详细看一下。</p><h4 id="physicalconnectionhandlingmode-的五种模式" tabindex="-1">PhysicalConnectionHandlingMode 的五种模式 <a class="header-anchor" href="#physicalconnectionhandlingmode-的五种模式" aria-label="Permalink to &quot;PhysicalConnectionHandlingMode 的五种模式&quot;">​</a></h4><p>在 Hibernate 5.2 里面，hibernate.connection.handling_mode 这个 Key 对应的值在 PhysicalConnectionHandlingMode 枚举类里面有定义，核心代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PhysicalConnectionHandlingMode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">IMMEDIATE_ACQUISITION_AND_HOLD</span><span style="color:#E1E4E8;">( IMMEDIATELY, ON_CLOSE ),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">DELAYED_ACQUISITION_AND_HOLD</span><span style="color:#E1E4E8;">( AS_NEEDED, ON_CLOSE ),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT</span><span style="color:#E1E4E8;">( AS_NEEDED, AFTER_STATEMENT ),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">DELAYED_ACQUISITION_AND_RELEASE_BEFORE_TRANSACTION_COMPLETION</span><span style="color:#E1E4E8;">( AS_NEEDED, BEFORE_TRANSACTION_COMPLETION ),</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION</span><span style="color:#E1E4E8;">( AS_NEEDED, AFTER_TRANSACTION )</span></span>
<span class="line"><span style="color:#E1E4E8;">   ;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConnectionAcquisitionMode acquisitionMode;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConnectionReleaseMode releaseMode;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">PhysicalConnectionHandlingMode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      ConnectionAcquisitionMode </span><span style="color:#FFAB70;">acquisitionMode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ConnectionReleaseMode </span><span style="color:#FFAB70;">releaseMode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.acquisitionMode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> acquisitionMode;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.releaseMode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> releaseMode;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span><span style="color:#6A737D;">//不重要代码先省略}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PhysicalConnectionHandlingMode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">IMMEDIATE_ACQUISITION_AND_HOLD</span><span style="color:#24292E;">( IMMEDIATELY, ON_CLOSE ),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">DELAYED_ACQUISITION_AND_HOLD</span><span style="color:#24292E;">( AS_NEEDED, ON_CLOSE ),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT</span><span style="color:#24292E;">( AS_NEEDED, AFTER_STATEMENT ),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">DELAYED_ACQUISITION_AND_RELEASE_BEFORE_TRANSACTION_COMPLETION</span><span style="color:#24292E;">( AS_NEEDED, BEFORE_TRANSACTION_COMPLETION ),</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION</span><span style="color:#24292E;">( AS_NEEDED, AFTER_TRANSACTION )</span></span>
<span class="line"><span style="color:#24292E;">   ;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConnectionAcquisitionMode acquisitionMode;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConnectionReleaseMode releaseMode;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">PhysicalConnectionHandlingMode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      ConnectionAcquisitionMode </span><span style="color:#E36209;">acquisitionMode</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      ConnectionReleaseMode </span><span style="color:#E36209;">releaseMode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.acquisitionMode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> acquisitionMode;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.releaseMode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> releaseMode;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">......</span><span style="color:#6A737D;">//不重要代码先省略}</span></span></code></pre></div><p>我们可以看到一共有五组值，也就是把原来的 ConnectionAcquisitionMode 和 ConnectionReleaseMode 分开配置的模式进行了组合配置管理，我们分别了解一下。</p><p><strong>IMMEDIATE_ACQUISITION_AND_HOLD：立即获取，一直保持连接到 Session 关闭。</strong> 其可以代表如下几层含义：</p><ul><li><p>Session 一旦打开就会获取连接；</p></li><li><p>Session 关闭的时候释放连接；</p></li><li><p>如果 open-in-view=true 的时候，也就是说即使我们的请求里面没有做任何操作，或者有一些耗时操作，会导致数据库的连接释放不及时，从而导致 DB 连接不够用，如果请求频繁的话，会产生不必要的 DB 连接的上下文切换，浪费 CPU 性能；</p></li><li><p>容易产生 DB 连接获取时间过长的现象，从而导致请求响应时间变长。</p></li></ul><p><strong>DELAYED_ACQUISITION_AND_HOLD：延迟获取，一直保持连接到 Session 关闭。</strong> 其可以代表如下几层含义：</p><ul><li><p>表示需要的时候再获取连接，需要的时候是指进行 DB 操作的时候，这里主要是指事务打开的时候，就需要获取连接了（因为开启事务的时候要执行&quot;AUTOCOMMIT=0&quot;的操作，所以这里的按需就是指开启事务；我们也可以关闭事务开启的时候改变 AUTOCOMMIT 的行为，那么这个时候的按需就是指执行 DB 操作的时候，不一定开启事务就会获得 DB 的连接）；</p></li><li><p>关闭连接的时机是 Session Colse 的时候；</p></li><li><p>一个 Session 里面只有一个连接，而一个连接里面可以有多段事务；比较适合一个请求有多段事务的场景；</p></li><li><p>这个配置解决了，当没有 DB 操作的时候，即没有事务的时候不会获取数据库连接的问题；从而可以减少不必要的 DB 连接切换；</p></li><li><p>但是一旦一个 Session 在进行了 DB 操作之后，又做了一些耗时的操作才关闭，那么也会导致 DB 连接释放不及时，从而导致 DB 连接的利用率低、高并发的时候请求性能下降。</p></li></ul><p><strong>DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT：延迟获取，Statement 执行完释放。</strong> 其可以代表如下几层含义：</p><ul><li><p>表示等需要的时候再获取连接，不是 session 一打开就会获取连接；</p></li><li><p>在每个 Statement 的 SQL 执行完就释放连接，一旦有事务每个 SQL 执行完释放满足不了业务逻辑，我们常用的事务模式就不生效了；</p></li><li><p>这种方式适合没有事务的情景，工作中不常见，可能分布式事务中有场景需要。</p></li></ul><p><strong>DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION：延迟获取，事务执行之后释放。</strong> 其可以代表如下几层含义：</p><ul><li><p>表示等需要的时候再获取连接，不是 Session 一打开就会获取连接；</p></li><li><p>在事务执行完之后释放连接，同一个事务共享一个连接；</p></li><li><p>这种情况下 open-in-view 的模式对 DB 连接的持有和事务一样了，比较适合一个请求里面事务模块不多请求的情况；</p></li><li><p>如果事务都控制在 Service 层，这个配置就非常好用，其对 Connection 的利用率比较高，基本上可以做到不浪费；</p></li><li><p>这个配置不适合一个 Session 生命周期里面有很多独立事务的业务模块，因为这样就会使一个请求里面产生大量没必要的获取连接、释放连接的过程。</p></li></ul><p><strong>DELAYED_ACQUISITION_AND_RELEASE_BEFORE_TRANSACTION_COMPLETION：延迟获取，事务执行之前释放。</strong> 其可以代表如下几层含义：</p><ul><li><p>表示等需要的时候再获取连接，不是 Session 一打开就会获取连接；</p></li><li><p>在事务执行完之前释放连接，这种不保险，也比较少用。</p></li></ul><p>现在你知道了 handling_mode 的五种模式，那么通常会默认用哪一种呢？</p><h4 id="默认的模式是哪个-如何修改默认值" tabindex="-1">默认的模式是哪个？如何修改默认值？ <a class="header-anchor" href="#默认的模式是哪个-如何修改默认值" aria-label="Permalink to &quot;默认的模式是哪个？如何修改默认值？&quot;">​</a></h4><p>我们打开源码 HibernateJpaVendorAdapter 类里面可以看到如下加载方式。</p>`,23),w=o(`<p>Hibernate 5.2 以上使用的是 DELAYED_ACQUISITION_AND_HOLD 模式，即按需获取、Session 关闭释放，如下面这段代码。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">jpaProperties.put(&quot;hibernate.connection.handling_mode&quot;, &quot;DELAYED_ACQUISITION_AND_HOLD&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">jpaProperties.put(&quot;hibernate.connection.handling_mode&quot;, &quot;DELAYED_ACQUISITION_AND_HOLD&quot;);</span></span></code></pre></div><p>而 Hibernate 5.1 以前是通过设置 release_mode 等于 ON_CLOSE 的方式，也是 Session 关闭释放，如下面这段代码。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">jpaProperties.put(&quot;hibernate.connection.release_mode&quot;, &quot;ON_CLOSE&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">jpaProperties.put(&quot;hibernate.connection.release_mode&quot;, &quot;ON_CLOSE&quot;);</span></span></code></pre></div><p>那么，如何修改默认值呢？直接在 application.properties 文件里面做如下修改即可。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## 我们可以修改成按需获取连接，事务执行完之后释放连接</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.properties.hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## 我们可以修改成按需获取连接，事务执行完之后释放连接</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.properties.hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION</span></span></code></pre></div><p>说了这么多，我们通过日志来看一下常用的两个配置对数据库连接的影响是什么？</p><h4 id="handling-mode-的配置对连接的影响" tabindex="-1">handling_mode 的配置对连接的影响 <a class="header-anchor" href="#handling-mode-的配置对连接的影响" aria-label="Permalink to &quot;handling_mode 的配置对连接的影响&quot;">​</a></h4><p>第一步：验证一下 DELAYED_ACQUISITION_AND_HOLD，即默认情况下，连接池的情况是什么样的？</p><p>我们对配置文件做如下配置。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## 在拦截MVC层开启Session，模拟默认情况，这条可以不需要配置，我只是为了给你演示得清晰一点</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.open-in-view=true</span></span>
<span class="line"><span style="color:#E1E4E8;">## 采用默认情况DELAYED_ACQUISITION_AND_HOLD，这条也不需要配置，我只是为了演示得清晰一点</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.jpa.properties.hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD</span></span>
<span class="line"><span style="color:#E1E4E8;">## 开启hikair的数据库连接池的监控：</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.com.zaxxer.hikari=TRACE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## 在拦截MVC层开启Session，模拟默认情况，这条可以不需要配置，我只是为了给你演示得清晰一点</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.open-in-view=true</span></span>
<span class="line"><span style="color:#24292E;">## 采用默认情况DELAYED_ACQUISITION_AND_HOLD，这条也不需要配置，我只是为了演示得清晰一点</span></span>
<span class="line"><span style="color:#24292E;">spring.jpa.properties.hibernate.connection.handling_mode=DELAYED_ACQUISITION_AND_HOLD</span></span>
<span class="line"><span style="color:#24292E;">## 开启hikair的数据库连接池的监控：</span></span>
<span class="line"><span style="color:#24292E;">logging.level.com.zaxxer.hikari=TRACE</span></span></code></pre></div><p>在 UserInfoController 的如下方法里面，通过 Thread.sleep（2 分钟）模拟耗时操作，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/info&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">saveUserInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> UserInfo userInfo) throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">   UserInfo u2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (u2</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      u2.</span><span style="color:#B392F0;">setLastName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">userInfo.</span><span style="color:#B392F0;">getLastModifiedTime</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(u2);</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;模拟事务执行完之后耗时操作........&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">60</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">2L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;耗时操作执行完毕.......&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">saveUserInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> UserInfo userInfo) throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">   UserInfo u2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (u2</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      u2.</span><span style="color:#6F42C1;">setLastName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">userInfo.</span><span style="color:#6F42C1;">getLastModifiedTime</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(u2);</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;模拟事务执行完之后耗时操作........&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">60</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">2L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;耗时操作执行完毕.......&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>项目启动，我们做如下请求。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#### update</span></span>
<span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8087</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#### update</span></span>
<span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8087</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}</span></span></code></pre></div><p>这个时候打开日志控制台，可以看到如下日志。</p>`,16),L=o('<p>可以看到，我们在 save 之后，即事务提交之后，HikariPool 里面的数据库连接一直没有归还，而如果我们继续等待的话，在整个 Session 关闭之后，数据库连接才会归还到连接池里面。</p><p>试想一下，如果我们实际工作中有这样的耗时操作，是不是用不了几个这样的请求，连接池就不够用了？但其实数据库连接没做任何 DB 相关的操作，白白被浪费了。</p><p>第二步：验证一下 DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION 模式。</p><p>我们只需要对配置文件做如下修改。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.jpa.properties.hibernate.connection.handling_mode</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.jpa.properties.hibernate.connection.handling_mode</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION</span></span></code></pre></div><p>其他代码都不变，我们再请求刚才的 API 请求，这个时候可以得到如下日志。</p>',6),P=s("p",null,"从日志中可以看到，当我们执行完 save(u2)，事务提交之后，做一些耗时操作的时候，发现此时整个 Session 生命周期是没有持有数据库连接的，也就是事务结束之后就进行了释放，这样大大提高了数据库连接的利用率，即使大量请求也不会造成数据库连接不够用。",-1),R=s("p",null,"下面是我的一些 Hrkari 数据源连接池下， DB 连接获得的时间参考值。",-1),k=s("p",null,"其中，对连接的池的持有情况如下图所示，这是正常情况，几乎监控不到 DB 连接不够用的情况。",-1),j=s("p",null,"对 DB 连接利用率的监控，如下图所示，连接的 Creation、Acquire 基本上是正常的，但是连接的 Usage>500ms 就有些不正常了，说明里面有一些耗时操作。",-1),V=o('<p>所以，一般在实际工作中，我们会在 DELAYED_ACQUISITION_AND_HOLD 和 DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION 之间做选择；通过日志和监控，我们也可以看得出来 DELAYED_ACQUISITION_AND_HOLD 比较适合一个 Session 里面有大量事务的业务场景，这样不用频繁切换数据库连接。</p><p>而 DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION 比较适合日常的 API 业务请求，没有大量的事务，事务结束就释放连接的场景。</p><p>下面再结合我们前几讲的基础知识，总结一下 Session 需要关心的关键关系有哪些。</p><h3 id="session、entitymanager、connection-和-transaction-的关系" tabindex="-1">Session、EntityManager、Connection 和 Transaction 的关系 <a class="header-anchor" href="#session、entitymanager、connection-和-transaction-的关系" aria-label="Permalink to &quot;Session、EntityManager、Connection 和 Transaction 的关系&quot;">​</a></h3><h4 id="connection-和-transaction-的关系" tabindex="-1">Connection 和 Transaction 的关系 <a class="header-anchor" href="#connection-和-transaction-的关系" aria-label="Permalink to &quot;Connection 和 Transaction 的关系&quot;">​</a></h4><ol><li><p>事务是建立在 Connection 之上的，没有连接就没有事务。</p></li><li><p>以 MySQL InnoDB 为例，新开一个连接默认开启事务，默认每个 SQL 执行完之后自动提交事务。</p></li><li><p>一个连接里面可以有多次串行的事务段；一个事务只能属于一个 Connection。</p></li><li><p>事务与事务之间是相互隔离的，那么自然不同连接的不同事务也是隔离的。</p></li></ol><h4 id="entitymanager、connection-和-transaction-的关系" tabindex="-1">EntityManager、Connection 和 Transaction 的关系 <a class="header-anchor" href="#entitymanager、connection-和-transaction-的关系" aria-label="Permalink to &quot;EntityManager、Connection 和 Transaction 的关系&quot;">​</a></h4><ol><li><p>EntityManager 里面有 DataSource，当 EntityManager 里面开启事务的时候，先判断当前线程里面是否有数据库连接，如果有直接用。</p></li><li><p>开启事务之前先开启连接；关闭事务，不一定关闭连接。</p></li><li><p>开启 EntityManager，不一定立马获得连接；获得连接，不一定立马开启事务。</p></li><li><p>关闭 EntityManager，一定关闭事务，释放连接；反之不然。</p></li></ol><h4 id="session、entitymanager、connection-和-transaction-的关系-1" tabindex="-1">Session、EntityManager、Connection 和 Transaction 的关系 <a class="header-anchor" href="#session、entitymanager、connection-和-transaction-的关系-1" aria-label="Permalink to &quot;Session、EntityManager、Connection 和 Transaction 的关系&quot;">​</a></h4><ol><li><p>Session 是 EntityManager 的子类，SessionImpl 是 Session 和 EntityManager 的实现类。那么自然 EntityManager 和 Connection、Transaction 的关系同样适用 Session、EntityManager、Connection 和 Transaction 的关系。</p></li><li><p>Session 的生命周期决定了 EntityManager 的生命周期。</p></li></ol><h4 id="session-和-transaction-的关系" tabindex="-1">Session 和 Transaction 的关系 <a class="header-anchor" href="#session-和-transaction-的关系" aria-label="Permalink to &quot;Session 和 Transaction 的关系&quot;">​</a></h4><ol><li><p>在 Hibernate 的 JPA 实现里面，开启 Transaction 之前，必须要先开启 Session。</p></li><li><p>默认情况下，Session 的生命周期由 open-in-view 决定是请求之前开启，还是事务之前开启。</p></li><li><p>事务关闭了，Session 不一定关闭。</p></li><li><p>Session 关闭了，事务一定关闭。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>以上就是这一讲的内容了。本讲中我们通过源码分析了 spring.jpa.open-in-view 是什么、干什么用的，以及它对事务、连接池、EntityManager 和 Session 的影响。</p><p>到这一讲你应该已经掌握了 Spring Data JPA 的核心的原理里面最重要的五个时机，即 Session（Entity Manager）的 Open 和 Close 时机、数据库连接的获取和释放时机、事务的开启和关闭时机以及我们上一讲介绍的 Persistence Context 的创建和销毁时机、Flush 的触发时机。希望你可以好好掌握并牢记我在其中提到的要点。</p><p>那么 open-in-view 对 lazy 的影响是什么呢？我们将在第 24 讲详细介绍。而下一讲我会通过一个实际案例，和你一起通过原理分析一些疑难杂症。</p><p>关于每一讲的内容，希望你可以提出一些自己的看法，在下方留言，让志同道合之士一起讨论，共同成长。再见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>',18);function H(U,x,Q,J,Y,W){const a=e("Image");return t(),r("div",null,[i,E,y,g,d,u,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/71/66/Ciqc1F--J7aAPxYpAAApgD8vr5o823.png"}),n(),A,F,C,_,h,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/71/66/Ciqc1F--J7-AcywEAAYEtGdc-RE017.png"}),n(),D,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/71/71/CgqCHl--J86AIwh6AATgTHk0WxE893.png"}),n(),I,S,v,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/71/71/CgqCHl--J9yANzVgAAMLiLh9kQQ355.png"}),n(),T,b,M,q,m,O,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/71/71/CgqCHl--J-SAFH9yAAUc9mOMYYk555.png"}),n(),N,p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/71/71/CgqCHl--KAKAWO2aAAL2Xu59B5I687.png"}),n(),f,p(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/71/66/Ciqc1F--KAuAQPOwAATpoE3jbT0924.png"}),n(),B,p(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/71/71/CgqCHl--KCuAcIttAANGE2zTL8g522.png"}),n(),w,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/71/66/Ciqc1F--KEGAOpmsAAFjWvgQG2M712.png"}),n(),L,p(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/71/72/CgqCHl--KFqAEpxiAAGZnguqMBM395.png"}),n(),P,R,k,p(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/71/72/CgqCHl--KGKAUrM_AAGuA1rvXks679.png"}),n(),j,p(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/71/66/Ciqc1F--KGiAQnscAAFqjef-KBY275.png"}),n(),V])}const G=l(c,[["render",H]]);export{z as __pageData,G as default};
