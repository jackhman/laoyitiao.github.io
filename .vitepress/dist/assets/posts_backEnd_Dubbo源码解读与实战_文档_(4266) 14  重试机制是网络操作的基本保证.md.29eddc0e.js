import{_ as p,D as o,o as e,g as t,J as n,h as l,Q as s}from"./chunks/framework.f67d7268.js";const R=JSON.parse('{"title":"14重试机制是网络操作的基本保证","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4266) 14  重试机制是网络操作的基本保证.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4266) 14  重试机制是网络操作的基本保证.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4266) 14  重试机制是网络操作的基本保证.md"},c=s('<h1 id="_14重试机制是网络操作的基本保证" tabindex="-1">14重试机制是网络操作的基本保证 <a class="header-anchor" href="#_14重试机制是网络操作的基本保证" aria-label="Permalink to &quot;14重试机制是网络操作的基本保证&quot;">​</a></h1><p>在真实的微服务系统中， ZooKeeper、etcd 等服务发现组件一般会独立部署成一个集群，业务服务通过网络连接这些服务发现节点，完成注册和订阅操作。但即使是机房内部的稳定网络，也无法保证两个节点之间的请求一定成功，因此 Dubbo 这类 RPC 框架在稳定性和容错性方面，就受到了比较大的挑战。<strong>为了保证服务的可靠性，重试机制就变得必不可少了</strong>。</p><p>所谓的 <strong>&quot;重试机制&quot;就是在请求失败时，客户端重新发起一个一模一样的请求，尝试调用相同或不同的服务端，完成相应的业务操作</strong>。能够使用重试机制的业务接口得是&quot;幂等&quot;的，也就是无论请求发送多少次，得到的结果都是一样的，例如查询操作。</p><h3 id="核心设计" tabindex="-1">核心设计 <a class="header-anchor" href="#核心设计" aria-label="Permalink to &quot;核心设计&quot;">​</a></h3><p>在上一课时中，我们介绍了 AbstractRegistry 中的 register()/unregister()、subscribe()/unsubscribe() 以及 notify() 等核心操作，详细分析了通过<strong>本地缓存</strong> 实现的容错功能。其实，这几个核心方法同样也是<strong>重试机制</strong>的关注点。</p><p><strong>dubbo-registry 将重试机制的相关实现放到了 AbstractRegistry 的子类------ FailbackRegistry 中</strong>。如下图所示，接入 ZooKeeper、etcd 等开源服务发现组件的 Registry 实现，都继承了 FailbackRegistry，也就都拥有了失败重试的能力。</p>',6),E=s(`<p><strong>FailbackRegistry 设计核心是</strong>：覆盖了 AbstractRegistry 中 register()/unregister()、subscribe()/unsubscribe() 以及 notify() 这五个核心方法，结合前面介绍的时间轮，实现失败重试的能力；真正与服务发现组件的交互能力则是放到了 doRegister()/doUnregister()、doSubscribe()/doUnsubscribe() 以及 doNotify() 这五个抽象方法中，由具体子类实现。这是典型的模板方法模式的应用。</p><h3 id="核心字段介绍" tabindex="-1">核心字段介绍 <a class="header-anchor" href="#核心字段介绍" aria-label="Permalink to &quot;核心字段介绍&quot;">​</a></h3><p>分析一个实现类的第一步就是了解其核心字段，那 FailbackRegistry 的核心字段有哪些呢？</p><ul><li><p><strong>retryTimer（HashedWheelTimer 类型）</strong>：用于定时执行失败重试操作的时间轮。</p></li><li><p><strong>retryPeriod（int 类型）</strong>：重试操作的时间间隔。</p></li><li><p><strong>failedRegistered（ConcurrentMap&lt;URL, FailedRegisteredTask&gt;类型）</strong>：注册失败的 URL 集合，其中 Key 是注册失败的 URL，Value 是对应的重试任务。</p></li><li><p><strong>failedUnregistered（ConcurrentMap&lt;URL, FailedUnregisteredTask&gt;类型）</strong>：取消注册失败的 URL 集合，其中 Key 是取消注册失败的 URL，Value 是对应的重试任务。</p></li><li><p><strong>failedSubscribed（ConcurrentMap&lt;Holder, FailedSubscribedTask&gt;类型）</strong>：订阅失败 URL 集合，其中 Key 是订阅失败的 URL + Listener 集合，Value 是相应的重试任务。</p></li><li><p><strong>failedUnsubscribed（ConcurrentMap&lt;URL, Set &gt;类型）</strong>：取消订阅失败的 URL 集合，其中 Key 是取消订阅失败的 URL + Listener 集合，Value 是相应的重试任务。</p></li><li><p><strong>failedNotified（ConcurrentMap&lt;Holder, FailedNotifiedTask&gt;类型）</strong>：通知失败的 URL 集合，其中 Key 是通知失败的 URL + Listener 集合，Value 是相应的重试任务。</p></li></ul><p>在 FailbackRegistry 的构造方法中，首先会调用父类 AbstractRegistry 的构造方法完成本地缓存相关的初始化操作，然后从传入的 URL 参数中获取重试操作的时间间隔（即retry.period 参数）来初始化 retryPeriod 字段，最后初始化 retryTimer****时间轮。整个代码比较简单，这里就不展示了。</p><h3 id="核心方法实现分析" tabindex="-1">核心方法实现分析 <a class="header-anchor" href="#核心方法实现分析" aria-label="Permalink to &quot;核心方法实现分析&quot;">​</a></h3><p>FailbackRegistry 对 register()/unregister() 方法和 subscribe()/unsubscribe() 方法的具体实现非常类似，所以这里我们就只介绍其中<strong>register() 方法</strong>的具体实现流程。</p><ol><li><p>根据 registryUrl 中 accepts 参数指定的匹配模式，决定是否接受当前要注册的 Provider URL。</p></li><li><p>调用父类 AbstractRegistry 的 register() 方法，将 Provider URL 写入 registered 集合中。</p></li><li><p>调用 removeFailedRegistered() 方法和 removeFailedUnregistered() 方法，将该 Provider URL 从 failedRegistered 集合和 failedUnregistered 集合中删除，并停止相关的重试任务。</p></li><li><p>调用 doRegister() 方法，与服务发现组件进行交互。该方法由子类实现，每个子类只负责接入一个特定的服务发现组件。</p></li><li><p>在 doRegister() 方法出现异常的时候，会根据 URL 参数以及异常的类型，进行分类处理：待注册 URL 的 check 参数为 true（默认值为 true）；待注册的 URL 不是 consumer 协议；registryUrl 的 check 参数也为 true（默认值为 true）。若满足这三个条件或者抛出的异常为 SkipFailbackWrapperException，则直接抛出异常。否则，就会创建重试任务并添加到 failedRegistered 集合中。</p></li></ol><p>明确 register() 方法的核心流程之后，我们再来看 register() 方法的具体代码实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">acceptable</span><span style="color:#E1E4E8;">(url)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 打印相关的提示日志</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// 完成本地文件缓存的初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 清理failedRegistered集合和failedUnregistered集合，并取消相关任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeFailedRegistered</span><span style="color:#E1E4E8;">(url); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeFailedUnregistered</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doRegister</span><span style="color:#E1E4E8;">(url);  </span><span style="color:#6A737D;">// 与服务发现组件进行交互，具体由子类实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Throwable t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检测check参数，决定是否直接抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> check </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(Constants.CHECK_KEY,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(Constants.CHECK_KEY, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">CONSUMER_PROTOCOL.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> skipFailback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            SkipFailbackWrapperException;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (check </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> skipFailback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (skipFailback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">getCause</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to register&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果不抛出异常，则创建失败重试的任务，并添加到failedRegistered集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addFailedRegistered</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">acceptable</span><span style="color:#24292E;">(url)) { </span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 打印相关的提示日志</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// 完成本地文件缓存的初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 清理failedRegistered集合和failedUnregistered集合，并取消相关任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeFailedRegistered</span><span style="color:#24292E;">(url); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeFailedUnregistered</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doRegister</span><span style="color:#24292E;">(url);  </span><span style="color:#6A737D;">// 与服务发现组件进行交互，具体由子类实现</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Throwable t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检测check参数，决定是否直接抛出异常</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> check </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(Constants.CHECK_KEY,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(Constants.CHECK_KEY, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">CONSUMER_PROTOCOL.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> skipFailback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            SkipFailbackWrapperException;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (check </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> skipFailback) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (skipFailback) {</span></span>
<span class="line"><span style="color:#24292E;">                t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">getCause</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to register&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不抛出异常，则创建失败重试的任务，并添加到failedRegistered集合中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addFailedRegistered</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从以上代码可以看出，当 Provider 向 Registry 注册 URL 的时候，如果注册失败，且未设置 check 属性，则创建一个定时任务，添加到时间轮中。</p><p>下面我们再来看看创建并添加这个重试任务的相关方法------<strong>addFailedRegistered() 方法</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addFailedRegistered</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FailedRegisteredTask oldOne </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> failedRegistered.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldOne </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 已经存在重试任务，则无须创建，直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    FailedRegisteredTask newTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FailedRegisteredTask</span><span style="color:#E1E4E8;">(url, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    oldOne </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> failedRegistered.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(url, newTask); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldOne </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是新建的重试任务，则提交到时间轮中，等待retryPeriod毫秒后执行</span></span>
<span class="line"><span style="color:#E1E4E8;">        retryTimer.</span><span style="color:#B392F0;">newTimeout</span><span style="color:#E1E4E8;">(newTask, retryPeriod, </span></span>
<span class="line"><span style="color:#E1E4E8;">          TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFailedRegistered</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    FailedRegisteredTask oldOne </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> failedRegistered.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldOne </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 已经存在重试任务，则无须创建，直接返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    FailedRegisteredTask newTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FailedRegisteredTask</span><span style="color:#24292E;">(url, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    oldOne </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> failedRegistered.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(url, newTask); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldOne </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是新建的重试任务，则提交到时间轮中，等待retryPeriod毫秒后执行</span></span>
<span class="line"><span style="color:#24292E;">        retryTimer.</span><span style="color:#6F42C1;">newTimeout</span><span style="color:#24292E;">(newTask, retryPeriod, </span></span>
<span class="line"><span style="color:#24292E;">          TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="重试任务" tabindex="-1">重试任务 <a class="header-anchor" href="#重试任务" aria-label="Permalink to &quot;重试任务&quot;">​</a></h3><p>FailbackRegistry.addFailedRegistered() 方法中创建的 FailedRegisteredTask 任务以及其他的重试任务，<strong>都继承了 AbstractRetryTask 抽象类</strong>，如下图所示：</p>`,15),y=s(`<p>在 AbstractRetryTask 中维护了当前任务关联的 URL、当前重试的次数等信息，在其 run() 方法中，会根据重试 URL 中指定的重试次数（retry.times 参数，默认值为 3）、任务是否被取消以及时间轮的状态，决定此次任务的 doRetry() 方法是否正常执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Timeout timeout) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timeout.</span><span style="color:#B392F0;">isCancelled</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> timeout.</span><span style="color:#B392F0;">timer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isStop</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isCancel</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 检测定时任务状态和时间轮状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (times </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> retryTimes) { </span><span style="color:#6A737D;">// 检查重试次数</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doRetry</span><span style="color:#E1E4E8;">(url, registry, timeout); </span><span style="color:#6A737D;">// 执行重试</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">reput</span><span style="color:#E1E4E8;">(timeout, retryPeriod); </span><span style="color:#6A737D;">// 重新添加定时任务，等待重试</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Timeout timeout) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timeout.</span><span style="color:#6F42C1;">isCancelled</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> timeout.</span><span style="color:#6F42C1;">timer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isStop</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isCancel</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 检测定时任务状态和时间轮状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (times </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> retryTimes) { </span><span style="color:#6A737D;">// 检查重试次数</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doRetry</span><span style="color:#24292E;">(url, registry, timeout); </span><span style="color:#6A737D;">// 执行重试</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">reput</span><span style="color:#24292E;">(timeout, retryPeriod); </span><span style="color:#6A737D;">// 重新添加定时任务，等待重试</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果任务的 doRetry() 方法执行出现异常，AbstractRetryTask 会通过 reput() 方法将当前任务重新放入时间轮中，并递增当前任务的执行次数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reput</span><span style="color:#E1E4E8;">(Timeout timeout, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> tick) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timeout </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 边界检查</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Timer timer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeout.</span><span style="color:#B392F0;">timer</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 检查定时任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timer.</span><span style="color:#B392F0;">isStop</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> timeout.</span><span style="color:#B392F0;">isCancelled</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isCancel</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    times</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 递增times</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加定时任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    timer.</span><span style="color:#B392F0;">newTimeout</span><span style="color:#E1E4E8;">(timeout.</span><span style="color:#B392F0;">task</span><span style="color:#E1E4E8;">(), tick, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reput</span><span style="color:#24292E;">(Timeout timeout, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> tick) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timeout </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 边界检查</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Timer timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeout.</span><span style="color:#6F42C1;">timer</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 检查定时任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timer.</span><span style="color:#6F42C1;">isStop</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> timeout.</span><span style="color:#6F42C1;">isCancelled</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isCancel</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    times</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 递增times</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加定时任务</span></span>
<span class="line"><span style="color:#24292E;">    timer.</span><span style="color:#6F42C1;">newTimeout</span><span style="color:#24292E;">(timeout.</span><span style="color:#6F42C1;">task</span><span style="color:#24292E;">(), tick, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AbstractRetryTask 将 doRetry() 方法作为抽象方法，留给子类实现具体的重试逻辑，这也是模板方法的使用。</p><p>在子类 FailedRegisteredTask 的 doRetry() 方法实现中，会再次执行关联 Registry 的 doRegister() 方法，完成与服务发现组件交互。如果注册成功，则会调用 removeFailedRegisteredTask() 方法将当前关联的 URL 以及当前重试任务从 failedRegistered 集合中删除。如果注册失败，则会抛出异常，执行上文介绍的 reput ()方法重试。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRetry</span><span style="color:#E1E4E8;">(URL url, FailbackRegistry registry, Timeout timeout) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    registry.</span><span style="color:#B392F0;">doRegister</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// 重新注册</span></span>
<span class="line"><span style="color:#E1E4E8;">    registry.</span><span style="color:#B392F0;">removeFailedRegisteredTask</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// 删除重试任务</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeFailedRegisteredTask</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    failedRegistered.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRetry</span><span style="color:#24292E;">(URL url, FailbackRegistry registry, Timeout timeout) {</span></span>
<span class="line"><span style="color:#24292E;">    registry.</span><span style="color:#6F42C1;">doRegister</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// 重新注册</span></span>
<span class="line"><span style="color:#24292E;">    registry.</span><span style="color:#6F42C1;">removeFailedRegisteredTask</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// 删除重试任务</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeFailedRegisteredTask</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    failedRegistered.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外，在 register() 方法入口处，会主动调用 removeFailedRegistered() 方法和 removeFailedUnregistered() 方法来清理指定 URL 关联的定时任务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeFailedRegistered</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// 清理FailedRegisteredTask定时任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeFailedUnregistered</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// 清理FailedUnregisteredTask定时任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doRegister</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addFailedRegistered</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeFailedRegistered</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// 清理FailedRegisteredTask定时任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeFailedUnregistered</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// 清理FailedUnregisteredTask定时任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doRegister</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addFailedRegistered</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="其他核心方法" tabindex="-1">其他核心方法 <a class="header-anchor" href="#其他核心方法" aria-label="Permalink to &quot;其他核心方法&quot;">​</a></h3><p>unregister() 方法以及 unsubscribe() 方法的实现方式与 register() 方法类似，只是调用的 do*() 抽象方法、依赖的 AbstractRetryTask 有所不同而已，这里就不再展开细讲。</p><p>你还记得上一课时我们介绍的 AbstractRegistry 通过本地文件缓存实现的容错机制吗？FailbackRegistry.subscribe() 方法在处理异常的时候，会先获取缓存的订阅数据并调用 notify() 方法，如果没有缓存相应的订阅数据，才会检查 check 参数决定是否抛出异常。</p><p>通过上一课时对 AbstractRegistry.notify() 方法的介绍，我们知道其核心逻辑之一就是回调 NotifyListener。下面我们就来看一下 FailbackRegistry 对 notify() 方法的覆盖：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(URL url, NotifyListener listener, </span></span>
<span class="line"><span style="color:#E1E4E8;">        List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">URL</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> urls) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 检查url和listener不为空(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// FailbackRegistry.doNotify()方法实际上就是调用父类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// AbstractRegistry.notify()方法，没有其他逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doNotify</span><span style="color:#E1E4E8;">(url, listener, urls); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// doNotify()方法出现异常，则会添加一个定时任务</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addFailedNotified</span><span style="color:#E1E4E8;">(url, listener, urls);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(URL url, NotifyListener listener, </span></span>
<span class="line"><span style="color:#24292E;">        List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">URL</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> urls) {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 检查url和listener不为空(略)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// FailbackRegistry.doNotify()方法实际上就是调用父类</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// AbstractRegistry.notify()方法，没有其他逻辑</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doNotify</span><span style="color:#24292E;">(url, listener, urls); </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// doNotify()方法出现异常，则会添加一个定时任务</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addFailedNotified</span><span style="color:#24292E;">(url, listener, urls);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>addFailedNotified() 方法会创建相应的 FailedNotifiedTask 任务，添加到 failedNotified 集合中，同时也会添加到时间轮中等待执行。如果已存在相应的 FailedNotifiedTask 重试任务，则会更新任务需要处理的 URL 集合。</p><p>在 FailedNotifiedTask 中维护了一个 URL 集合，用来记录当前任务一次运行需要通知的 URL，每执行完一次任务，就会清空该集合，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doRetry</span><span style="color:#E1E4E8;">(URL url, FailbackRegistry registry, </span></span>
<span class="line"><span style="color:#E1E4E8;">        Timeout timeout) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果urls集合为空，则会通知所有Listener，该任务也就啥都不做了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(urls)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        listener.</span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(urls);</span></span>
<span class="line"><span style="color:#E1E4E8;">        urls.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">reput</span><span style="color:#E1E4E8;">(timeout, retryPeriod); </span><span style="color:#6A737D;">// 将任务重新添加到时间轮中等待执行</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doRetry</span><span style="color:#24292E;">(URL url, FailbackRegistry registry, </span></span>
<span class="line"><span style="color:#24292E;">        Timeout timeout) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果urls集合为空，则会通知所有Listener，该任务也就啥都不做了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(urls)) { </span></span>
<span class="line"><span style="color:#24292E;">        listener.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(urls);</span></span>
<span class="line"><span style="color:#24292E;">        urls.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">reput</span><span style="color:#24292E;">(timeout, retryPeriod); </span><span style="color:#6A737D;">// 将任务重新添加到时间轮中等待执行</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面的代码可以看出，FailedNotifiedTask 重试任务一旦被添加，就会一直运行下去，但真的是这样吗？在 FailbackRegistry 的 subscribe()、unsubscribe() 方法中，可以看到 removeFailedNotified() 方法的调用，这里就是清理 FailedNotifiedTask 任务的地方。我们以 FailbackRegistry.subscribe() 方法为例进行介绍：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(URL url, NotifyListener listener) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(url, listener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeFailedSubscribed</span><span style="color:#E1E4E8;">(url, listener); </span><span style="color:#6A737D;">// 关注这个方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doSubscribe</span><span style="color:#E1E4E8;">(url, listener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addFailedSubscribed</span><span style="color:#E1E4E8;">(url, listener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// removeFailedSubscribed()方法中会清理FailedSubscribedTask、FailedUnsubscribedTask、FailedNotifiedTask三类定时任务</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeFailedSubscribed</span><span style="color:#E1E4E8;">(URL url, NotifyListener listener) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Holder h </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Holder</span><span style="color:#E1E4E8;">(url, listener); </span><span style="color:#6A737D;">// 清理FailedSubscribedTask</span></span>
<span class="line"><span style="color:#E1E4E8;">    FailedSubscribedTask f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> failedSubscribed.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(h);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (f </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeFailedUnsubscribed</span><span style="color:#E1E4E8;">(url, listener);</span><span style="color:#6A737D;">// 清理FailedUnsubscribedTask</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeFailedNotified</span><span style="color:#E1E4E8;">(url, listener); </span><span style="color:#6A737D;">// 清理FailedNotifiedTask</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(URL url, NotifyListener listener) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(url, listener);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeFailedSubscribed</span><span style="color:#24292E;">(url, listener); </span><span style="color:#6A737D;">// 关注这个方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doSubscribe</span><span style="color:#24292E;">(url, listener);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addFailedSubscribed</span><span style="color:#24292E;">(url, listener);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// removeFailedSubscribed()方法中会清理FailedSubscribedTask、FailedUnsubscribedTask、FailedNotifiedTask三类定时任务</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeFailedSubscribed</span><span style="color:#24292E;">(URL url, NotifyListener listener) {</span></span>
<span class="line"><span style="color:#24292E;">    Holder h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Holder</span><span style="color:#24292E;">(url, listener); </span><span style="color:#6A737D;">// 清理FailedSubscribedTask</span></span>
<span class="line"><span style="color:#24292E;">    FailedSubscribedTask f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> failedSubscribed.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(h);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeFailedUnsubscribed</span><span style="color:#24292E;">(url, listener);</span><span style="color:#6A737D;">// 清理FailedUnsubscribedTask</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">removeFailedNotified</span><span style="color:#24292E;">(url, listener); </span><span style="color:#6A737D;">// 清理FailedNotifiedTask</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>介绍完 FailbackRegistry 中最核心的注册/订阅实现之后，我们再来关注其实现的恢复功能，也就是 recover() 方法。该方法会直接通过 FailedRegisteredTask 任务处理 registered 集合中的全部 URL，通过 FailedSubscribedTask 任务处理 subscribed 集合中的 URL 以及关联的 NotifyListener。</p><p>FailbackRegistry 在生命周期结束时，会调用自身的 destroy() 方法，其中除了调用父类的 destroy() 方法之外，还会调用时间轮（即 retryTimer 字段）的 stop() 方法，释放时间轮相关的资源。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时重点介绍了 AbstractRegistry 的实现类------FailbackRegistry 的核心实现，它主要是在 AbstractRegistry 的基础上，提供了重试机制。具体方法就是通过之前课时介绍的时间轮，在 register()/ unregister()、subscribe()/ unsubscribe() 等核心方法失败时，添加重试定时任务，实现重试机制，同时也添加了相应的定时任务清理逻辑。</p>`,23);function i(d,F,u,g,b,A){const a=o("Image");return e(),t("div",null,[c,n(a,{alt:"Registry继承关系.png",src:"https://s0.lgstatic.com/i/image/M00/4D/B9/Ciqc1F9bIqGAH2BVAAHKapYWDoE565.png"}),l(),E,n(a,{alt:"重试任务.png",src:"https://s0.lgstatic.com/i/image/M00/4D/C5/CgqCHl9bIseASX_6AAEchEJzpew190.png"}),l(),y])}const C=p(r,[["render",i]]);export{R as __pageData,C as default};
