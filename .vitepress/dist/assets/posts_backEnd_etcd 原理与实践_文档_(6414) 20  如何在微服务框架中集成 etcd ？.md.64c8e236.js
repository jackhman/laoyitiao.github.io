import{_ as p,j as o,o as e,g as t,k as n,h as r,Q as a,s as l}from"./chunks/framework.b3d8e22e.js";const h=JSON.parse('{"title":"go-micro 集成 etcd ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6414) 20  如何在微服务框架中集成 etcd ？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6414) 20  如何在微服务框架中集成 etcd ？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/etcd 原理与实践_文档/(6414) 20  如何在微服务框架中集成 etcd ？.md"},E=a(`<p>上一讲我们介绍了基于 etcd 实现微服务注册与发现的案例。由于服务实例是动态部署的，每个服务实例的地址和服务信息都可能动态变化，势必需要一个中心化的组件对各个服务实例的信息进行管理。该组件管理了各个部署好的服务实例元数据，包括但不限于服务名、IP 地址、端口号、服务描述和服务状态等。</p><p>现有的主流微服务框架大都集成了服务注册与发现的功能，这一讲我们就来介绍并实践如何集成 etcd 到主流的 Go 微服务框架中。</p><h3 id="go-micro-集成-etcd" tabindex="-1">go-micro 集成 etcd <a class="header-anchor" href="#go-micro-集成-etcd" aria-label="Permalink to &quot;go-micro 集成 etcd&quot;">​</a></h3><p>在构建微服务时，使用服务发现可以减少配置的复杂性，go-micro 也是 Go 语言中常用的微服务框架。go-micro 的发现机制是可插拔的，支持多种组件，如 etcd 和 ZooKeeper 等，具体详见<a href="https://github.com/micro/go-plugins?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">micro/go-plugins</a>。</p><h4 id="go-micro-介绍" tabindex="-1">go-micro 介绍 <a class="header-anchor" href="#go-micro-介绍" aria-label="Permalink to &quot;go-micro 介绍&quot;">​</a></h4><p>首先介绍一下 go-micro 微服务框架。go-micro 是一个<strong>可插拔的 RPC 框架</strong>，用于分布式系统的开发，具有以下特性。</p><ul><li><p><strong>服务发现</strong>（Service Discovery）：自动服务注册与名称解析。</p></li><li><p><strong>负载均衡</strong>（Load Balancing）：在服务发现之上构建了智能的负载均衡机制。</p></li><li><p><strong>同步通信</strong>（Synchronous Comms）：基于 RPC 的通信，支持双向流。</p></li><li><p><strong>异步通信</strong>（Asynchronous Comms）：内置发布/订阅的事件驱动架构。</p></li><li><p><strong>消息编码</strong>（Message Encoding）：基于 Content-Type 的动态编码，支持 ProtoBuf、JSON，开箱即用。</p></li><li><p><strong>服务接口</strong>（Service Interface）：所有特性都被打包在简单且高级的接口中，方便开发微服务。</p></li></ul><p>go-micro 旨在利用接口使微服务架构抽象化，并且提供了一系列默认且完整的开箱即用的插件。</p><h4 id="定义消息格式" tabindex="-1">定义消息格式 <a class="header-anchor" href="#定义消息格式" aria-label="Permalink to &quot;定义消息格式&quot;">​</a></h4><p>go-micro 使用 ProtoBuf 定义消息格式。我们创建一个类型为 proto 的文件 hi.proto，其中定义了调用接口的参数以及返回的对象：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">service Greeter {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">(HelloRequest) returns (HelloResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">message HelloRequest {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">message HelloResponse {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">service Greeter {</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">(HelloRequest) returns (HelloResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">message HelloRequest {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">message HelloResponse {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上的代码定义了 Greeter 的接口，Hello 方法的参数为 HelloRequest ，结果返回了 HelloResponse 对象。</p><p>接着生成 API 接口。我们需要使用 protoc 来生成 protobuf 代码文件，以此生成对应的 Go 语言代码。包括如下的三个插件：</p><ul><li><p>protoc</p></li><li><p>protoc-gen-go</p></li><li><p>protoc-gen-micro</p></li></ul><p>使用如下命令分别安装这几个插件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">go get github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">golang</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">protobuf</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">{proto,protoc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">gen</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">go}</span></span>
<span class="line"><span style="color:#E1E4E8;">go get github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">protoc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">gen</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">micro</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">go get github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">golang</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">protobuf</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">{proto,protoc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">gen</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">go}</span></span>
<span class="line"><span style="color:#24292E;">go get github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">protoc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">gen</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">micro</span></span></code></pre></div><p>接着在当前目录下运行如下的命令，生成两个模板文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> $ protoc  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">micro_out</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">. </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">go_out</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">. greeter.proto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> $ protoc  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">micro_out</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">. </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">go_out</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">. greeter.proto</span></span></code></pre></div><p>运行之后，当前目录的结构如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ tree     </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── hello.pb.go</span></span>
<span class="line"><span style="color:#E1E4E8;">├── hello.pb.micro.go</span></span>
<span class="line"><span style="color:#E1E4E8;">└── hello.proto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ tree     </span></span>
<span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── hello.pb.go</span></span>
<span class="line"><span style="color:#24292E;">├── hello.pb.micro.go</span></span>
<span class="line"><span style="color:#24292E;">└── hello.proto</span></span></code></pre></div><p>可以看到，我们通过工具生成了两个文件，一个是 Go 结构文件，另一个属于 go-micro RPC 的接口文件。基于生成的两个文件，我们可以创建&quot;打招呼&quot;的请求。下面是部分生成的代码：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Greeter service 客户端的 API</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GreeterService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">(ctx context.Context, in </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloRequest, opts </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">client.CallOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloResponse, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">greeterService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	c    client.Client</span></span>
<span class="line"><span style="color:#E1E4E8;">	name </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewGreeterService</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, c client.Client) GreeterService {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(name) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">greeterService{</span></span>
<span class="line"><span style="color:#E1E4E8;">		c:    c,</span></span>
<span class="line"><span style="color:#E1E4E8;">		name: name,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">greeterService) </span><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;">(ctx context.Context, in </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloRequest, opts </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">client.CallOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloResponse, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	req </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.c.</span><span style="color:#79B8FF;">NewRequest</span><span style="color:#E1E4E8;">(c.name, </span><span style="color:#9ECBFF;">&quot;Greeter.Hello&quot;</span><span style="color:#E1E4E8;">, in)</span></span>
<span class="line"><span style="color:#E1E4E8;">	out </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(HelloResponse)</span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.c.</span><span style="color:#79B8FF;">Call</span><span style="color:#E1E4E8;">(ctx, req, out, opts</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> out, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Greeter service 服务端</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GreeterHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">(context.Context, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloRequest, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloResponse) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegisterGreeterHandler</span><span style="color:#E1E4E8;">(s server.Server, hdlr GreeterHandler, opts </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">server.HandlerOption) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">greeter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">(ctx context.Context, in </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloRequest, out </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloResponse) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Greeter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		greeter</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	h </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">greeterHandler{hdlr}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.</span><span style="color:#79B8FF;">Handle</span><span style="color:#E1E4E8;">(s.</span><span style="color:#79B8FF;">NewHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Greeter{h}, opts</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">greeterHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	GreeterHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (h </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">greeterHandler) </span><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;">(ctx context.Context, in </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloRequest, out </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HelloResponse) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> h.GreeterHandler.</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">(ctx, in, out)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Greeter service 客户端的 API</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GreeterService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">(ctx context.Context, in </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloRequest, opts </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">client.CallOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloResponse, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greeterService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	c    client.Client</span></span>
<span class="line"><span style="color:#24292E;">	name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewGreeterService</span><span style="color:#24292E;">(name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, c client.Client) GreeterService {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(name) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">greeterService{</span></span>
<span class="line"><span style="color:#24292E;">		c:    c,</span></span>
<span class="line"><span style="color:#24292E;">		name: name,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">greeterService) </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;">(ctx context.Context, in </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloRequest, opts </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">client.CallOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloResponse, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	req </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.c.</span><span style="color:#005CC5;">NewRequest</span><span style="color:#24292E;">(c.name, </span><span style="color:#032F62;">&quot;Greeter.Hello&quot;</span><span style="color:#24292E;">, in)</span></span>
<span class="line"><span style="color:#24292E;">	out </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(HelloResponse)</span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.c.</span><span style="color:#005CC5;">Call</span><span style="color:#24292E;">(ctx, req, out, opts</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> out, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Greeter service 服务端</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GreeterHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">(context.Context, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloRequest, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloResponse) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegisterGreeterHandler</span><span style="color:#24292E;">(s server.Server, hdlr GreeterHandler, opts </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">server.HandlerOption) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greeter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">(ctx context.Context, in </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloRequest, out </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloResponse) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		greeter</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	h </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">greeterHandler{hdlr}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.</span><span style="color:#005CC5;">Handle</span><span style="color:#24292E;">(s.</span><span style="color:#005CC5;">NewHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Greeter{h}, opts</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greeterHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	GreeterHandler</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (h </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">greeterHandler) </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;">(ctx context.Context, in </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloRequest, out </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HelloResponse) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> h.GreeterHandler.</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">(ctx, in, out)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>gRPC 的调用方法装在生成的 go-micro RPC 的接口文件中。为了演示，我们只定义了一个<code>Hello</code>接口，可以看到上面的代码实现还是比较简单的。</p><h4 id="server-服务端" tabindex="-1">server 服务端 <a class="header-anchor" href="#server-服务端" aria-label="Permalink to &quot;server 服务端&quot;">​</a></h4><p>下面我们开始实现服务端，服务端需要<strong>注册 handlers 处理器</strong>，用以对外提供服务并接收请求。服务端的具体实现代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/keets2012/etcd-book-code/ch10/micro/srv/proto</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/micro/go-micro</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/micro/go-micro/registry</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/micro/go-plugins/registry/etcdv3</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Greet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Greet) </span><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;">(ctx context.Context, req </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">hello.HelloRequest, rsp </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">hello.HelloResponse) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;received req </span><span style="color:#79B8FF;">%#v</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, req)</span></span>
<span class="line"><span style="color:#E1E4E8;">	rsp.From </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;server&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	rsp.To </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;client&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	rsp.Msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ok&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	reg </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.</span><span style="color:#79B8FF;">NewRegistry</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">registry.Options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		op.Addrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;127.0.0.1:2379&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	service </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> micro.</span><span style="color:#79B8FF;">NewService</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		micro.</span><span style="color:#79B8FF;">Name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello.srv.say&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">		micro.</span><span style="color:#79B8FF;">Registry</span><span style="color:#E1E4E8;">(reg),</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">	service.</span><span style="color:#79B8FF;">Init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 注册 GreeterHandler，传入服务和处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">	hello.</span><span style="color:#79B8FF;">RegisterGreeterHandler</span><span style="color:#E1E4E8;">(service.</span><span style="color:#79B8FF;">Server</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(Greet))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 运行服务</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> service.</span><span style="color:#79B8FF;">Run</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/keets2012/etcd-book-code/ch10/micro/srv/proto</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/micro/go-micro</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/micro/go-micro/registry</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/micro/go-plugins/registry/etcdv3</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greet</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Greet) </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;">(ctx context.Context, req </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">hello.HelloRequest, rsp </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">hello.HelloResponse) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;received req </span><span style="color:#005CC5;">%#v</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, req)</span></span>
<span class="line"><span style="color:#24292E;">	rsp.From </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;server&quot;</span></span>
<span class="line"><span style="color:#24292E;">	rsp.To </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;client&quot;</span></span>
<span class="line"><span style="color:#24292E;">	rsp.Msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ok&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	reg </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.</span><span style="color:#005CC5;">NewRegistry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">registry.Options) {</span></span>
<span class="line"><span style="color:#24292E;">		op.Addrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;127.0.0.1:2379&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	service </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> micro.</span><span style="color:#005CC5;">NewService</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		micro.</span><span style="color:#005CC5;">Name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello.srv.say&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">		micro.</span><span style="color:#005CC5;">Registry</span><span style="color:#24292E;">(reg),</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">	service.</span><span style="color:#005CC5;">Init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 注册 GreeterHandler，传入服务和处理器</span></span>
<span class="line"><span style="color:#24292E;">	hello.</span><span style="color:#005CC5;">RegisterGreeterHandler</span><span style="color:#24292E;">(service.</span><span style="color:#005CC5;">Server</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(Greet))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 运行服务</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> service.</span><span style="color:#005CC5;">Run</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>micro.NewService 用于初始化服务，然后返回一个 Service 接口的实例。</p><p>上述实现中，使用 etcd 替换了默认的 Consul 作为服务注册与发现组件。处理器会与服务一起被注册，就像 HTTP 处理器一样，通过调用 server.Run 服务启动，同时绑定代码配置中的地址作为接收请求的地址。服务启动时向注册中心注册自身服务的相关信息，并在接收到关闭信号时注销。</p><h4 id="client-调用" tabindex="-1">client 调用 <a class="header-anchor" href="#client-调用" aria-label="Permalink to &quot;client 调用&quot;">​</a></h4><p>下面我们来看客户端如何调用。客户端应用发起到服务端的远程调用请求，实现客户端与服务端&quot;打招呼&quot;的功能，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/keets2012/etcd-book-code/ch10/micro/srv/proto</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/micro/go-micro</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/micro/go-micro/registry</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/micro/go-plugins/registry/etcdv3</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	reg </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.</span><span style="color:#79B8FF;">NewRegistry</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">registry.Options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		op.Addrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;127.0.0.1:2379&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//创建 service</span></span>
<span class="line"><span style="color:#E1E4E8;">	service </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> micro.</span><span style="color:#79B8FF;">NewService</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		micro.</span><span style="color:#79B8FF;">Registry</span><span style="color:#E1E4E8;">(reg),</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">	service.</span><span style="color:#79B8FF;">Init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span><span style="color:#6A737D;">// 创建 greet 客户端，需要传入服务名与服务客户端方法构建的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	greetClient </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> hello.</span><span style="color:#79B8FF;">NewGreeterService</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello.srv.say&quot;</span><span style="color:#E1E4E8;">, service.</span><span style="color:#79B8FF;">Client</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	param </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">hello.HelloRequest{</span></span>
<span class="line"><span style="color:#E1E4E8;">		From: </span><span style="color:#9ECBFF;">&quot;client&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		To:   </span><span style="color:#9ECBFF;">&quot;server&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		Msg:  </span><span style="color:#9ECBFF;">&quot;hello aoho&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	rsp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> greetClient.</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), param)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(rsp)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/keets2012/etcd-book-code/ch10/micro/srv/proto</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/micro/go-micro</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/micro/go-micro/registry</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/micro/go-plugins/registry/etcdv3</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	reg </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.</span><span style="color:#005CC5;">NewRegistry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">registry.Options) {</span></span>
<span class="line"><span style="color:#24292E;">		op.Addrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;127.0.0.1:2379&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//创建 service</span></span>
<span class="line"><span style="color:#24292E;">	service </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> micro.</span><span style="color:#005CC5;">NewService</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		micro.</span><span style="color:#005CC5;">Registry</span><span style="color:#24292E;">(reg),</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">	service.</span><span style="color:#005CC5;">Init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	 </span><span style="color:#6A737D;">// 创建 greet 客户端，需要传入服务名与服务客户端方法构建的对象</span></span>
<span class="line"><span style="color:#24292E;">	greetClient </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> hello.</span><span style="color:#005CC5;">NewGreeterService</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello.srv.say&quot;</span><span style="color:#24292E;">, service.</span><span style="color:#005CC5;">Client</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	param </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">hello.HelloRequest{</span></span>
<span class="line"><span style="color:#24292E;">		From: </span><span style="color:#032F62;">&quot;client&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		To:   </span><span style="color:#032F62;">&quot;server&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		Msg:  </span><span style="color:#032F62;">&quot;hello aoho&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	rsp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> greetClient.</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), param)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(rsp)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>proto 生成的 RPC 接口已经将调用方法的流程封装好。<code>hello.NewGreeterService</code>需要使用服务名与客户端对象来请求指定的接口，即<code>hello.srv.say</code>，然后调用 Hello 方法。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">sayService) </span><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;">(ctx context.Context, in </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">SayParam, opts </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">client.CallOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">SayResponse, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    req </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.c.</span><span style="color:#79B8FF;">NewRequest</span><span style="color:#E1E4E8;">(c.name, </span><span style="color:#9ECBFF;">&quot;Say.Hello&quot;</span><span style="color:#E1E4E8;">, in)</span></span>
<span class="line"><span style="color:#E1E4E8;">    out </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(SayResponse)</span></span>
<span class="line"><span style="color:#E1E4E8;">    err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.c.</span><span style="color:#79B8FF;">Call</span><span style="color:#E1E4E8;">(ctx, req, out, opts</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> out, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">sayService) </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;">(ctx context.Context, in </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">SayParam, opts </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">client.CallOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">SayResponse, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    req </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.c.</span><span style="color:#005CC5;">NewRequest</span><span style="color:#24292E;">(c.name, </span><span style="color:#032F62;">&quot;Say.Hello&quot;</span><span style="color:#24292E;">, in)</span></span>
<span class="line"><span style="color:#24292E;">    out </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(SayResponse)</span></span>
<span class="line"><span style="color:#24292E;">    err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.c.</span><span style="color:#005CC5;">Call</span><span style="color:#24292E;">(ctx, req, out, opts</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> out, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>主要的流程都在 c.c.Call 方法里。我们简单梳理一下整个流程，首先得到服务节点的地址，根据该地址查询连接池里是否有连接，如果有则取出来，如果没有则创建。然后进行数据传输，传输完成后把 client 连接放回到连接池内。</p><h4 id="运行结果" tabindex="-1">运行结果 <a class="header-anchor" href="#运行结果" aria-label="Permalink to &quot;运行结果&quot;">​</a></h4><p>上述操作实现了客户端与服务端的&quot;打招呼&quot;功能，下面我们分别运行服务端和客户端的应用程序，注意执行的先后顺序，得到的结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 服务端的控制台输出</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">23.365137</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Transport</span><span style="color:#E1E4E8;"> [http] Listening on [</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">65331</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">23.365230</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Broker</span><span style="color:#E1E4E8;"> [http] Connected to [</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">65332</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">23.365474</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Registry</span><span style="color:#E1E4E8;"> [etcd] Registering node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hello.srv.say</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">6407b896</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">66d4</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4cb1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">81fd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d743ff6a97ec</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16.946948</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> received req </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">hello.SayRequest{From</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;client&quot;</span><span style="color:#E1E4E8;">, To</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;server&quot;</span><span style="color:#E1E4E8;">, Msg</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;hello aoho&quot;</span><span style="color:#E1E4E8;">, XXX_NoUnkeyedLiteral</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">struct {}{}, XXX_unrecognized</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">[]</span><span style="color:#B392F0;">uint8</span><span style="color:#E1E4E8;">(nil), XXX_sizecache</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//客户端的控制台输出</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">16.947531</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> from</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;server&quot;</span><span style="color:#E1E4E8;"> to</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;client&quot;</span><span style="color:#E1E4E8;"> msg</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;ok&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 服务端的控制台输出</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">23.365137</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Transport</span><span style="color:#24292E;"> [http] Listening on [</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">65331</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">23.365230</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Broker</span><span style="color:#24292E;"> [http] Connected to [</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">65332</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">23.365474</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Registry</span><span style="color:#24292E;"> [etcd] Registering node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hello.srv.say</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">6407b896</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">66d4</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4cb1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">81fd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d743ff6a97ec</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16.946948</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> received req </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">hello.SayRequest{From</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;client&quot;</span><span style="color:#24292E;">, To</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;server&quot;</span><span style="color:#24292E;">, Msg</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;hello aoho&quot;</span><span style="color:#24292E;">, XXX_NoUnkeyedLiteral</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">struct {}{}, XXX_unrecognized</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">[]</span><span style="color:#6F42C1;">uint8</span><span style="color:#24292E;">(nil), XXX_sizecache</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//客户端的控制台输出</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16.947531</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> from</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;server&quot;</span><span style="color:#24292E;"> to</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;client&quot;</span><span style="color:#24292E;"> msg</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;ok&quot;</span></span></code></pre></div><p>依次启动服务端、客户端，客户端发起一个打招呼的请求给服务端，可以看到服务端的控制台输出了收到的请求，并返回了 ok 响应给到客户端，符合我们的实现预期。</p><p>至此，我们成功在 go-micro 框架中集成了 etcd 作为服务注册与发现组件。</p><h3 id="go-kit-集成-etcd" tabindex="-1">Go-kit 集成 etcd <a class="header-anchor" href="#go-kit-集成-etcd" aria-label="Permalink to &quot;Go-kit 集成 etcd&quot;">​</a></h3><p>介绍完 go-micro 集成 etcd，我们来看另一个流行的 Go 微服务框架 Go-kit 如何集成 etcd。</p><h4 id="go-kit-介绍" tabindex="-1">Go-kit 介绍 <a class="header-anchor" href="#go-kit-介绍" aria-label="Permalink to &quot;Go-kit 介绍&quot;">​</a></h4><p>Go-kit 提供了用于实现<strong>系统监控和弹性模式组件</strong>的库，例如日志记录、跟踪、限流和熔断等，这些库协助工程师提高微服务架构的性能和稳定性。Go-kit 框架分层如下图所示。</p>`,43),y=a(`<p>Go-kit 框架分层图</p><p>除了用于构建微服务的工具包，Go-kit 还为工程师提供了良好的架构设计原则示范。Go-kit 提倡工程师使用 Alistair Cockburn 提出的 SOLID 设计原则、领域驱动设计（DDD）。所以 Go-kit 不仅仅是微服务工具包，它也非常适合构建优雅的整体结构。</p><p>Go-kit 提供了三层模型来解耦业务，这也是我们使用它的主要目的，模型由上到下分别是<code>transport -&gt; endpoint -&gt; service</code>。</p><ul><li><p>传输层用于网络通信，服务通常使用 HTTP、gRPC 等网络传输方式，或使用 NATS 等发布订阅系统相互通信。除此之外，Go-kit 还支持使用 AMQP 和 Thrift 等多种网络通信模式。</p></li><li><p>接口层是服务器和客户端的基本构建模块。在 Go-kit 中，每个对外提供的服务接口方法都会定义为一个端点（Endpoint），以便在服务器和客户端之间进行网络通信。每个端点利用传输层通过使用 HTTP 或 gRPC 等具体通信模式对外提供服务。</p></li><li><p>服务层是具体的业务逻辑实现。服务层的业务逻辑包含核心业务逻辑，即你要实现的主要功能。它不会也不应该进行 HTTP 或 gRPC 等具体网络传输，或者请求和响应消息类型的编码和解码。</p></li></ul><p>Go-kit 在性能和扩展性等方面表现优异。下面我们就来介绍如何在 Go-kit 中集成 etcd 作为服务注册与发现组件，以及构建用户登录的场景、用户登录系统之后获取认证的令牌，接着实现 Go-kit 的 gRPC 调用。</p><h4 id="定义消息格式-1" tabindex="-1">定义消息格式 <a class="header-anchor" href="#定义消息格式-1" aria-label="Permalink to &quot;定义消息格式&quot;">​</a></h4><p>Go-kit 的消息通信也是基于 protobuf 格式。这里我们定义了两个 proto，其中一个定义了登录的 RPC 请求和响应的结构体，另一个则定义了 RPC 请求的方法。分别如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// user.proto</span></span>
<span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> pb;</span></span>
<span class="line"><span style="color:#E1E4E8;">message Login {</span></span>
<span class="line"><span style="color:#E1E4E8;">    string Account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    string Password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">message LoginAck {</span></span>
<span class="line"><span style="color:#E1E4E8;">    string Token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">user.proto 定义了 Login 请求和 LoginAck 应答的结构体</span></span>
<span class="line"><span style="color:#6A737D;">// service.proto</span></span>
<span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> pb;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> &quot;user.proto&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">service User {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">RpcUserLogin</span><span style="color:#E1E4E8;"> (Login) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (LoginAck) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// user.proto</span></span>
<span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> pb;</span></span>
<span class="line"><span style="color:#24292E;">message Login {</span></span>
<span class="line"><span style="color:#24292E;">    string Account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    string Password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">message LoginAck {</span></span>
<span class="line"><span style="color:#24292E;">    string Token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">user.proto 定义了 Login 请求和 LoginAck 应答的结构体</span></span>
<span class="line"><span style="color:#6A737D;">// service.proto</span></span>
<span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> pb;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> &quot;user.proto&quot;;</span></span>
<span class="line"><span style="color:#24292E;">service User {</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">RpcUserLogin</span><span style="color:#24292E;"> (Login) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (LoginAck) {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>service.proto 引用了 user.proto 中定义的结构体，定义了一个方法 RpcUserLogin，请求参数为 Login 对象，响应结果为 LoginAck。</p><p>生成对应的 gRPC pb 文件，执行如下的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ protoc </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">go_out</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">grpc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">. </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.proto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ protoc </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">go_out</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">grpc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">. </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">.proto</span></span></code></pre></div><p>生成 pb 文件后，目录中增加了两个文件，文件结构如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ tree</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── make.sh</span></span>
<span class="line"><span style="color:#E1E4E8;">├── service.pb.go</span></span>
<span class="line"><span style="color:#E1E4E8;">├── service.proto</span></span>
<span class="line"><span style="color:#E1E4E8;">├── user.pb.go</span></span>
<span class="line"><span style="color:#E1E4E8;">└── user.proto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ tree</span></span>
<span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── make.sh</span></span>
<span class="line"><span style="color:#24292E;">├── service.pb.go</span></span>
<span class="line"><span style="color:#24292E;">├── service.proto</span></span>
<span class="line"><span style="color:#24292E;">├── user.pb.go</span></span>
<span class="line"><span style="color:#24292E;">└── user.proto</span></span></code></pre></div><p>生成的文件基于 gRPC 调用的标准格式生成，这里就不具体列出了。我们接着看 user 服务的实现。</p><h4 id="user-服务" tabindex="-1">user 服务 <a class="header-anchor" href="#user-服务" aria-label="Permalink to &quot;user 服务&quot;">​</a></h4><p>由于 user 服务的实现代码比较多，这里我侧重讲解 Go-kit 集成使用 etcd 部分。我们先来看 user 服务的入口主函数：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> grpcAddr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flag.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;g&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;127.0.0.1:8881&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;grpcAddr&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> quitChan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	flag.</span><span style="color:#79B8FF;">Parse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">		etcdAddrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;127.0.0.1:2379&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">		serName   </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;svc.user.agent&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">		grpcAddr  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">grpcAddr</span></span>
<span class="line"><span style="color:#E1E4E8;">		ttl       </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">	utils.</span><span style="color:#79B8FF;">NewLoggerServer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 初始化 etcd 客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">	options </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.ClientOptions{</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialTimeout:   ttl,</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialKeepAlive: ttl,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	etcdClient, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), etcdAddrs, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		utils.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[user_agent]  NewClient&quot;</span><span style="color:#E1E4E8;">, zap.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err))</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 基于 etcdClient 初始化 Registar</span></span>
<span class="line"><span style="color:#E1E4E8;">	Registar </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.</span><span style="color:#79B8FF;">NewRegistrar</span><span style="color:#E1E4E8;">(etcdClient, etcdv3.Service{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Key:   fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, serName, grpcAddr),</span></span>
<span class="line"><span style="color:#E1E4E8;">		Value: grpcAddr,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, log.</span><span style="color:#79B8FF;">NewNopLogger</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		golangLimit </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rate.</span><span style="color:#79B8FF;">NewLimiter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		server </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> src.</span><span style="color:#79B8FF;">NewService</span><span style="color:#E1E4E8;">(utils.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">		endpoints </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> src.</span><span style="color:#79B8FF;">NewEndPointServer</span><span style="color:#E1E4E8;">(server, golangLimit)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 构造 EndPointServer</span></span>
<span class="line"><span style="color:#E1E4E8;">		grpcServer </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> src.</span><span style="color:#79B8FF;">NewGRPCServer</span><span style="color:#E1E4E8;">(endpoints, utils.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 监听 tcp 地址和端口</span></span>
<span class="line"><span style="color:#E1E4E8;">		grpcListener, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#79B8FF;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, grpcAddr)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			utils.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[user_agent] Listen&quot;</span><span style="color:#E1E4E8;">, zap.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err))</span></span>
<span class="line"><span style="color:#E1E4E8;">			quitChan </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		Registar.</span><span style="color:#79B8FF;">Register</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		baseServer </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#79B8FF;">NewServer</span><span style="color:#E1E4E8;">(grpc.</span><span style="color:#79B8FF;">UnaryInterceptor</span><span style="color:#E1E4E8;">(grpctransport.Interceptor))</span></span>
<span class="line"><span style="color:#E1E4E8;">		pb.</span><span style="color:#79B8FF;">RegisterUserServer</span><span style="color:#E1E4E8;">(baseServer, grpcServer)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> baseServer.</span><span style="color:#79B8FF;">Serve</span><span style="color:#E1E4E8;">(grpcListener); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			utils.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[user_agent] Serve&quot;</span><span style="color:#E1E4E8;">, zap.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err))</span></span>
<span class="line"><span style="color:#E1E4E8;">			quitChan </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		c </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> os.Signal, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		signal.</span><span style="color:#79B8FF;">Notify</span><span style="color:#E1E4E8;">(c, syscall.SIGINT, syscall.SIGTERM)</span></span>
<span class="line"><span style="color:#E1E4E8;">		quitChan </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">c)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	utils.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[user_agent] run &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> grpcAddr)</span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">quitChan</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注销连接</span></span>
<span class="line"><span style="color:#E1E4E8;">	Registar.</span><span style="color:#79B8FF;">Deregister</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	utils.</span><span style="color:#79B8FF;">GetLogger</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[user_agent] quit err&quot;</span><span style="color:#E1E4E8;">, zap.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> grpcAddr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> flag.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;g&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;127.0.0.1:8881&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;grpcAddr&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> quitChan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	flag.</span><span style="color:#005CC5;">Parse</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">		etcdAddrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;127.0.0.1:2379&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">		serName   </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;svc.user.agent&quot;</span></span>
<span class="line"><span style="color:#24292E;">		grpcAddr  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">grpcAddr</span></span>
<span class="line"><span style="color:#24292E;">		ttl       </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">	utils.</span><span style="color:#005CC5;">NewLoggerServer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 初始化 etcd 客户端</span></span>
<span class="line"><span style="color:#24292E;">	options </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.ClientOptions{</span></span>
<span class="line"><span style="color:#24292E;">		DialTimeout:   ttl,</span></span>
<span class="line"><span style="color:#24292E;">		DialKeepAlive: ttl,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	etcdClient, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), etcdAddrs, options)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		utils.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[user_agent]  NewClient&quot;</span><span style="color:#24292E;">, zap.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err))</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 基于 etcdClient 初始化 Registar</span></span>
<span class="line"><span style="color:#24292E;">	Registar </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.</span><span style="color:#005CC5;">NewRegistrar</span><span style="color:#24292E;">(etcdClient, etcdv3.Service{</span></span>
<span class="line"><span style="color:#24292E;">		Key:   fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, serName, grpcAddr),</span></span>
<span class="line"><span style="color:#24292E;">		Value: grpcAddr,</span></span>
<span class="line"><span style="color:#24292E;">	}, log.</span><span style="color:#005CC5;">NewNopLogger</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		golangLimit </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rate.</span><span style="color:#005CC5;">NewLimiter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		server </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> src.</span><span style="color:#005CC5;">NewService</span><span style="color:#24292E;">(utils.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">		endpoints </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> src.</span><span style="color:#005CC5;">NewEndPointServer</span><span style="color:#24292E;">(server, golangLimit)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 构造 EndPointServer</span></span>
<span class="line"><span style="color:#24292E;">		grpcServer </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> src.</span><span style="color:#005CC5;">NewGRPCServer</span><span style="color:#24292E;">(endpoints, utils.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 监听 tcp 地址和端口</span></span>
<span class="line"><span style="color:#24292E;">		grpcListener, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#005CC5;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, grpcAddr)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			utils.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[user_agent] Listen&quot;</span><span style="color:#24292E;">, zap.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err))</span></span>
<span class="line"><span style="color:#24292E;">			quitChan </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Registar.</span><span style="color:#005CC5;">Register</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		baseServer </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> grpc.</span><span style="color:#005CC5;">NewServer</span><span style="color:#24292E;">(grpc.</span><span style="color:#005CC5;">UnaryInterceptor</span><span style="color:#24292E;">(grpctransport.Interceptor))</span></span>
<span class="line"><span style="color:#24292E;">		pb.</span><span style="color:#005CC5;">RegisterUserServer</span><span style="color:#24292E;">(baseServer, grpcServer)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> baseServer.</span><span style="color:#005CC5;">Serve</span><span style="color:#24292E;">(grpcListener); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			utils.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[user_agent] Serve&quot;</span><span style="color:#24292E;">, zap.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err))</span></span>
<span class="line"><span style="color:#24292E;">			quitChan </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		c </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> os.Signal, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		signal.</span><span style="color:#005CC5;">Notify</span><span style="color:#24292E;">(c, syscall.SIGINT, syscall.SIGTERM)</span></span>
<span class="line"><span style="color:#24292E;">		quitChan </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">c)</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#24292E;">	utils.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[user_agent] run &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> grpcAddr)</span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">quitChan</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注销连接</span></span>
<span class="line"><span style="color:#24292E;">	Registar.</span><span style="color:#005CC5;">Deregister</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	utils.</span><span style="color:#005CC5;">GetLogger</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[user_agent] quit err&quot;</span><span style="color:#24292E;">, zap.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>user 服务集成 etcd 的主要步骤如下：</p><ul><li><p>初始化 etcd 客户端；</p></li><li><p>基于 etcdClient 初始化 Registar；</p></li><li><p>Registar.Register() 注册 user 服务到 etcd，RegisterService 将服务及其实现注册到 gRPC 服务器，必须在调用服务之前调用 RegisterService；</p></li><li><p>服务关闭时，注销 etcd 连接。</p></li></ul><h4 id="客户端调用" tabindex="-1">客户端调用 <a class="header-anchor" href="#客户端调用" aria-label="Permalink to &quot;客户端调用&quot;">​</a></h4><p>在微服务架构中，用户登录的操作，一般由 user 服务校验其身份信息的合法性，如果合法则为该用法返回认证的令牌。我们的测试客户端就是模拟 auth 认证服务的实现。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestNewUserAgentClient</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化 UserAgent，返回的是一个 UserAgent</span></span>
<span class="line"><span style="color:#E1E4E8;">	client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NewUserAgentClient</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;127.0.0.1:2379&quot;</span><span style="color:#E1E4E8;">}, logger)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 循环调用，为了测试 user 多实例注册到 etcd，客户端调用的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">		userAgent, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">UserAgentClient</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		ack, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> userAgent.</span><span style="color:#79B8FF;">Login</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pb.Login{</span></span>
<span class="line"><span style="color:#E1E4E8;">			Account:  </span><span style="color:#9ECBFF;">&quot;aoho&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			Password: </span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		})</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(ack.Token)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestNewUserAgentClient</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化 UserAgent，返回的是一个 UserAgent</span></span>
<span class="line"><span style="color:#24292E;">	client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NewUserAgentClient</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;127.0.0.1:2379&quot;</span><span style="color:#24292E;">}, logger)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 循环调用，为了测试 user 多实例注册到 etcd，客户端调用的情况</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Second)</span></span>
<span class="line"><span style="color:#24292E;">		userAgent, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">UserAgentClient</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		ack, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> userAgent.</span><span style="color:#005CC5;">Login</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pb.Login{</span></span>
<span class="line"><span style="color:#24292E;">			Account:  </span><span style="color:#032F62;">&quot;aoho&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			Password: </span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		})</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(ack.Token)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码示例是测试的主要代码，首先读取配置，初始化 UserAgent，其实就是得到指定服务的一个 etcdv3 客户端实例。这里获取了 etcd 中键为<code>svc.user.agent</code>的值。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewUserAgentClient</span><span style="color:#E1E4E8;">(addr []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, logger log.Logger) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UserAgent, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">		etcdAddrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addr</span></span>
<span class="line"><span style="color:#E1E4E8;">		serName   </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;svc.user.agent&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">		ttl       </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">	options </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.ClientOptions{</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialTimeout:   ttl,</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialKeepAlive: ttl,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	etcdClient, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), etcdAddrs, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	instancerm, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcdv3.</span><span style="color:#79B8FF;">NewInstancer</span><span style="color:#E1E4E8;">(etcdClient, serName, logger)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">UserAgent{</span></span>
<span class="line"><span style="color:#E1E4E8;">		instancerm: instancerm,</span></span>
<span class="line"><span style="color:#E1E4E8;">		logger:     logger,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewUserAgentClient</span><span style="color:#24292E;">(addr []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, logger log.Logger) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UserAgent, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">		etcdAddrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addr</span></span>
<span class="line"><span style="color:#24292E;">		serName   </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;svc.user.agent&quot;</span></span>
<span class="line"><span style="color:#24292E;">		ttl       </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">	options </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.ClientOptions{</span></span>
<span class="line"><span style="color:#24292E;">		DialTimeout:   ttl,</span></span>
<span class="line"><span style="color:#24292E;">		DialKeepAlive: ttl,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	etcdClient, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), etcdAddrs, options)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	instancerm, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcdv3.</span><span style="color:#005CC5;">NewInstancer</span><span style="color:#24292E;">(etcdClient, serName, logger)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">UserAgent{</span></span>
<span class="line"><span style="color:#24292E;">		instancerm: instancerm,</span></span>
<span class="line"><span style="color:#24292E;">		logger:     logger,</span></span>
<span class="line"><span style="color:#24292E;">	}, err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 NewUserAgentClient 的实现中，根据传入的 etcdAddrs 构建 etcdClient，并通过 etcdClient 和 serName 构建 instancerm，指向的类型为 Instancer。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instancer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	cache  </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">instance.Cache</span></span>
<span class="line"><span style="color:#E1E4E8;">	client Client</span></span>
<span class="line"><span style="color:#E1E4E8;">	prefix </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	logger log.Logger</span></span>
<span class="line"><span style="color:#E1E4E8;">	quitc  </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instancer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	cache  </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">instance.Cache</span></span>
<span class="line"><span style="color:#24292E;">	client Client</span></span>
<span class="line"><span style="color:#24292E;">	prefix </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	logger log.Logger</span></span>
<span class="line"><span style="color:#24292E;">	quitc  </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Instancer 选出存储在 etcd 键空间中的实例。同时将 watch 该键空间中的任何事件类型的更改，这些更改将更新实例器的实例信息。</p><p>至此，我们实现了 user 服务和调用 user 服务的客户端测试方法。</p><h4 id="运行结果-1" tabindex="-1">运行结果 <a class="header-anchor" href="#运行结果-1" aria-label="Permalink to &quot;运行结果&quot;">​</a></h4><p>我们启动 3 个服务地址，分别为：127.0.0.1:8881、127.0.0.1:8882、127.0.0.1:8883。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./user_agent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#9ECBFF;">.0.1:8881</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:15</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">utils/log_util.go:89</span><span style="color:#E1E4E8;">    [NewLogger] success</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:15</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">user_agent/main.go:75</span><span style="color:#E1E4E8;">   [user_agent] run 127.0.0.1:8881</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./user_agent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#9ECBFF;">.0.1:8882</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:12</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">utils/log_util.go:89</span><span style="color:#E1E4E8;">    [NewLogger] success</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:12</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">user_agent/main.go:75</span><span style="color:#E1E4E8;">   [user_agent] run 127.0.0.1:8882</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./user_agent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#9ECBFF;">.0.1:8883</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:08</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">utils/log_util.go:89</span><span style="color:#E1E4E8;">    [NewLogger] success</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:08</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">INFO</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">user_agent/main.go:75</span><span style="color:#E1E4E8;">   [user_agent] run 127.0.0.1:8883</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./user_agent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#032F62;">.0.1:8881</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:15</span><span style="color:#24292E;">     </span><span style="color:#032F62;">INFO</span><span style="color:#24292E;">    </span><span style="color:#032F62;">utils/log_util.go:89</span><span style="color:#24292E;">    [NewLogger] success</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:15</span><span style="color:#24292E;">     </span><span style="color:#032F62;">INFO</span><span style="color:#24292E;">    </span><span style="color:#032F62;">user_agent/main.go:75</span><span style="color:#24292E;">   [user_agent] run 127.0.0.1:8881</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./user_agent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#032F62;">.0.1:8882</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:12</span><span style="color:#24292E;">     </span><span style="color:#032F62;">INFO</span><span style="color:#24292E;">    </span><span style="color:#032F62;">utils/log_util.go:89</span><span style="color:#24292E;">    [NewLogger] success</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:12</span><span style="color:#24292E;">     </span><span style="color:#032F62;">INFO</span><span style="color:#24292E;">    </span><span style="color:#032F62;">user_agent/main.go:75</span><span style="color:#24292E;">   [user_agent] run 127.0.0.1:8882</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./user_agent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#032F62;">.0.1:8883</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:08</span><span style="color:#24292E;">     </span><span style="color:#032F62;">INFO</span><span style="color:#24292E;">    </span><span style="color:#032F62;">utils/log_util.go:89</span><span style="color:#24292E;">    [NewLogger] success</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:08</span><span style="color:#24292E;">     </span><span style="color:#032F62;">INFO</span><span style="color:#24292E;">    </span><span style="color:#032F62;">user_agent/main.go:75</span><span style="color:#24292E;">   [user_agent] run 127.0.0.1:8883</span></span></code></pre></div><p>依次运行服务端和测试函数，可以得到如下的结果：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">=== </span><span style="color:#9ECBFF;">RUN</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">TestNewUserAgentClient</span></span>
<span class="line"><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2021</span><span style="color:#9ECBFF;">-03-17T05:31:22.605559Z</span><span style="color:#E1E4E8;"> caller</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">instancer.go:32</span><span style="color:#E1E4E8;"> prefix</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">svc.user.agent</span><span style="color:#E1E4E8;"> instances</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">TestNewUserAgentClient:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user_agent_test.go:44:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxMywiaWF0IjoxNjAwMzIwNjgzLCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODMsInN1YiI6ImxvZ2luIn0.Eo-uytDEuAJyPGooXB2mC6uga-C-krVdthEQSYkqG-k</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">---</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASS:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TestNewUserAgentClient</span><span style="color:#E1E4E8;"> (6.11s)</span></span>
<span class="line"><span style="color:#B392F0;">PASS</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">=== </span><span style="color:#032F62;">RUN</span><span style="color:#24292E;">   </span><span style="color:#032F62;">TestNewUserAgentClient</span></span>
<span class="line"><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2021</span><span style="color:#032F62;">-03-17T05:31:22.605559Z</span><span style="color:#24292E;"> caller</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">instancer.go:32</span><span style="color:#24292E;"> prefix</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">svc.user.agent</span><span style="color:#24292E;"> instances</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">TestNewUserAgentClient:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user_agent_test.go:44:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxMywiaWF0IjoxNjAwMzIwNjgzLCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODMsInN1YiI6ImxvZ2luIn0.Eo-uytDEuAJyPGooXB2mC6uga-C-krVdthEQSYkqG-k</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">---</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASS:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TestNewUserAgentClient</span><span style="color:#24292E;"> (6.11s)</span></span>
<span class="line"><span style="color:#6F42C1;">PASS</span></span></code></pre></div><p>根据测试函数的运行结果，svc.user.agent 有三个服务实例。客户端 6 次调用 user 服务的登录结果都是成功的，TestNewUserAgentClient 输出了获取到的 JWT Token。同时在启动的三个 user 服务端控制台输出了如下的日志信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8883</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:24</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">DEBUG</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">src/middleware_server.go:31</span><span style="color:#E1E4E8;">     [9f4221fd-ec8c-53f2-b2ac-26e9cb4501ba]  {</span><span style="color:#B392F0;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Login&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;req&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Account:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">aoho</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">assword:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">123456</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;res&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Token:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNCwiaWF0IjoxNjAwMzIwNjg0LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODQsInN1YiI6ImxvZ2luIn0.atzewyzrwRtBVCCg_4eZo7iiJKXGV6nJs-_BA9JDSLQ</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;time&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;188.861 µ s&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;err&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null}</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8882</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:26</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">DEBUG</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">src/middleware_server.go:31</span><span style="color:#E1E4E8;">     [9ece68d5-9e56-515c-a417-77f371b04910]  {</span><span style="color:#B392F0;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Login&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;req&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Account:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">aoho</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">assword:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">123456</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;res&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Token:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNiwiaWF0IjoxNjAwMzIwNjg2LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODYsInN1YiI6ImxvZ2luIn0.KLjK_mf11C_ssO_X5sKyzr55ftUEh2D5mfxS5xTKbP4</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;time&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;195.477 µ s&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;err&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null}</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:27</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">DEBUG</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">src/middleware_server.go:31</span><span style="color:#E1E4E8;">     [de1d3e65-d389-5232-9254-33e4cb6c9060]  {</span><span style="color:#B392F0;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Login&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;req&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Account:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">aoho</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">assword:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">123456</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;res&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Token:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNywiaWF0IjoxNjAwMzIwNjg3LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODcsInN1YiI6ImxvZ2luIn0.2jkryvYTJVnsrXuNWB_SyYqKxQB-l5dos7bGUP2aLyo</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;time&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;104.817 µ s&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;err&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null}</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8881</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:23</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">DEBUG</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">src/middleware_server.go:31</span><span style="color:#E1E4E8;">     [c521bfb2-5a48-58c8-aa74-fdf78adc443f]  {</span><span style="color:#B392F0;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Login&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;req&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Account:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">aoho</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">assword:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">123456</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;res&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Token:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxMywiaWF0IjoxNjAwMzIwNjgzLCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODMsInN1YiI6ImxvZ2luIn0.Eo-uytDEuAJyPGooXB2mC6uga-C-krVdthEQSYkqG-k</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;time&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;173.146 µ s&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;err&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null}</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:25</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">DEBUG</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">src/middleware_server.go:31</span><span style="color:#E1E4E8;">     [9ffc9f63-d925-5999-9b9b-2bf544654010]  {</span><span style="color:#B392F0;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Login&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;req&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Account:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">aoho</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">assword:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">123456</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;res&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Token:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNSwiaWF0IjoxNjAwMzIwNjg1LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODUsInN1YiI6ImxvZ2luIn0.OwMi33WbWz4SuIIRsTO0uOzg2d7qx5CDyISetnsbiiE</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;time&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;174.443 µ s&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;err&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null}</span></span>
<span class="line"><span style="color:#B392F0;">2021-03-17</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">:31:28</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">DEBUG</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">src/middleware_server.go:31</span><span style="color:#E1E4E8;">     [c5459a23-0999-5861-80d2-fea508815ac5]  {</span><span style="color:#B392F0;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Login&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;req&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Account:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">aoho</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">assword:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">123456</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;res&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Token:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxOCwiaWF0IjoxNjAwMzIwNjg4LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODgsInN1YiI6ImxvZ2luIn0.TR6gcjlZ7rb2PXQg5XJz1AX0cGJc706UAuT9VyWR1Wg</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;time&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;68.345 µ s&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;err&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8883</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:24</span><span style="color:#24292E;">     </span><span style="color:#032F62;">DEBUG</span><span style="color:#24292E;">   </span><span style="color:#032F62;">src/middleware_server.go:31</span><span style="color:#24292E;">     [9f4221fd-ec8c-53f2-b2ac-26e9cb4501ba]  {</span><span style="color:#6F42C1;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Login&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;req&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Account:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">aoho</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">assword:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">123456</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;res&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Token:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNCwiaWF0IjoxNjAwMzIwNjg0LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODQsInN1YiI6ImxvZ2luIn0.atzewyzrwRtBVCCg_4eZo7iiJKXGV6nJs-_BA9JDSLQ</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;time&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;188.861 µ s&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;err&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null}</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8882</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:26</span><span style="color:#24292E;">     </span><span style="color:#032F62;">DEBUG</span><span style="color:#24292E;">   </span><span style="color:#032F62;">src/middleware_server.go:31</span><span style="color:#24292E;">     [9ece68d5-9e56-515c-a417-77f371b04910]  {</span><span style="color:#6F42C1;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Login&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;req&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Account:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">aoho</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">assword:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">123456</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;res&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Token:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNiwiaWF0IjoxNjAwMzIwNjg2LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODYsInN1YiI6ImxvZ2luIn0.KLjK_mf11C_ssO_X5sKyzr55ftUEh2D5mfxS5xTKbP4</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;time&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;195.477 µ s&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;err&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null}</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:27</span><span style="color:#24292E;">     </span><span style="color:#032F62;">DEBUG</span><span style="color:#24292E;">   </span><span style="color:#032F62;">src/middleware_server.go:31</span><span style="color:#24292E;">     [de1d3e65-d389-5232-9254-33e4cb6c9060]  {</span><span style="color:#6F42C1;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Login&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;req&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Account:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">aoho</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">assword:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">123456</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;res&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Token:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNywiaWF0IjoxNjAwMzIwNjg3LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODcsInN1YiI6ImxvZ2luIn0.2jkryvYTJVnsrXuNWB_SyYqKxQB-l5dos7bGUP2aLyo</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;time&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;104.817 µ s&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;err&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null}</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8881</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:23</span><span style="color:#24292E;">     </span><span style="color:#032F62;">DEBUG</span><span style="color:#24292E;">   </span><span style="color:#032F62;">src/middleware_server.go:31</span><span style="color:#24292E;">     [c521bfb2-5a48-58c8-aa74-fdf78adc443f]  {</span><span style="color:#6F42C1;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Login&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;req&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Account:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">aoho</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">assword:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">123456</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;res&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Token:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxMywiaWF0IjoxNjAwMzIwNjgzLCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODMsInN1YiI6ImxvZ2luIn0.Eo-uytDEuAJyPGooXB2mC6uga-C-krVdthEQSYkqG-k</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;time&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;173.146 µ s&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;err&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null}</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:25</span><span style="color:#24292E;">     </span><span style="color:#032F62;">DEBUG</span><span style="color:#24292E;">   </span><span style="color:#032F62;">src/middleware_server.go:31</span><span style="color:#24292E;">     [9ffc9f63-d925-5999-9b9b-2bf544654010]  {</span><span style="color:#6F42C1;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Login&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;req&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Account:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">aoho</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">assword:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">123456</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;res&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Token:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxNSwiaWF0IjoxNjAwMzIwNjg1LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODUsInN1YiI6ImxvZ2luIn0.OwMi33WbWz4SuIIRsTO0uOzg2d7qx5CDyISetnsbiiE</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;time&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;174.443 µ s&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;err&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null}</span></span>
<span class="line"><span style="color:#6F42C1;">2021-03-17</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">:31:28</span><span style="color:#24292E;">     </span><span style="color:#032F62;">DEBUG</span><span style="color:#24292E;">   </span><span style="color:#032F62;">src/middleware_server.go:31</span><span style="color:#24292E;">     [c5459a23-0999-5861-80d2-fea508815ac5]  {</span><span style="color:#6F42C1;">&quot;调用 Login logMiddlewareServer&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Login&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;req&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Account:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">aoho</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">assword:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">123456</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;res&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Token:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiYW9obyIsIkRjSWQiOjEsImV4cCI6MTYwMDMyMDcxOCwiaWF0IjoxNjAwMzIwNjg4LCJpc3MiOiJraXRfdjQiLCJuYmYiOjE2MDAzMjA2ODgsInN1YiI6ImxvZ2luIn0.TR6gcjlZ7rb2PXQg5XJz1AX0cGJc706UAuT9VyWR1Wg</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> &quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;time&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;68.345 µ s&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;err&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null}</span></span></code></pre></div><p>从上面的日志信息可以知道，客户端根据 etcd 中存储的实例信息发起调用，成功实现了负载均衡。如果我们关闭某一个实例，客户端会监测到服务实例的变更，本地的服务实例列表会踢掉该实例，这种机制使得 Go-kit 的负载均衡依然奏效。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了在常见的两种微服务框架 go-micro 和 Go-kit 中集成 etcd 作为服务注册与发现组件。go-micro 把分布式系统的各种细节抽象出来，方便我们进行组件切换。go-micro 的新版本工具集弃用了 Consul，建议使用 etcd。Go-kit 是 Go 语言工具包的集合，可以帮助你构建强大、可靠和可维护的微服务，不过 Go 目前还不支持泛型，interface 的定义相对来说也比较烦琐。</p><p>本讲内容总结如下：</p>`,39),i=l("p",null,"总的来说，两个微服务框架都支持方便地集成 etcd，但是微服务框架本身也有优缺点。通过两个常用的微服务框架集成 etcd 的案例学习，可以帮助你对 etcd 的使用有一个更深的理解，在此基础上自行封装适合业务场景的框架。",-1),F=l("p",null,"最后，我们来做一个互动：你在项目中使用的是哪种服务发现与注册组件，又使用什么样的微服务框架呢？欢迎你在留言区和我分享。下一讲我们将介绍 etcd 在 Kubernetes 中如何保证容器的调度。",-1);function u(C,g,d,q,B,A){const s=o("Image");return e(),t("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/97/CioPOWBlXcKAU3tWAAC2wBgqaYw872.png"}),r(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/97/CioPOWBlXdmAR6ozAAD6gNf9pMQ337.png"}),i,F])}const m=p(c,[["render",u]]);export{h as __pageData,m as default};
