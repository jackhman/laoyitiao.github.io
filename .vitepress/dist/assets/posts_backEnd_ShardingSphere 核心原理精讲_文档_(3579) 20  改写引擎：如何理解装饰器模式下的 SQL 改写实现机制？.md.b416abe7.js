import{_ as l,j as p,o as e,g as o,k as a,Q as s}from"./chunks/framework.e0c66c3f.js";const A=JSON.parse('{"title":"ShardingSphere 改写引擎基本结构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3579) 20  改写引擎：如何理解装饰器模式下的 SQL 改写实现机制？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3579) 20  改写引擎：如何理解装饰器模式下的 SQL 改写实现机制？.md","lastUpdated":1696338709000}'),t={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3579) 20  改写引擎：如何理解装饰器模式下的 SQL 改写实现机制？.md"},r=s(`<p>回想在&quot;17 | 路由引擎：如何理解分片路由核心类 ShardingRouter 的运作机制？&quot;课时中，我们在 BaseShardingEngine 的 Shard 方法中看到了 ShardingSphere 中另一个重要的概念，即 SQL 改写（Rewrite）。</p><p><strong>SQL 改写</strong>在分库分表框架中通常位于路由之后，也是整个 SQL 执行流程中的重要环节，因为开发人员是面向逻辑库与逻辑表所书写的 SQL，并不能够直接在真实的数据库中执行，SQL 改写，用于将逻辑 SQL 改写为在真实数据库中可以正确执行的 SQL。</p><p>事实上，我们已经在前面的案例中看到了 SQL 改写的应用场景，这个场景就是分布式主键的自动生成过程。在关系型数据库中，<strong>自增主键</strong>是常见的功能特性，而对于 ShardingSphere 而言，这也是 SQL 改写的典型应用场景。</p><p>今天，我们就将基于自增主键这一场景来探讨 <strong>ShardingSphere 中 SQL 改写的实现过程</strong>。</p><h3 id="shardingsphere-改写引擎基本结构" tabindex="-1">ShardingSphere 改写引擎基本结构 <a class="header-anchor" href="#shardingsphere-改写引擎基本结构" aria-label="Permalink to &quot;ShardingSphere 改写引擎基本结构&quot;">​</a></h3><p>让我们先来看一下 BaseShardingEngine 中，用于执行改写逻辑的 rewriteAndConvert 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">RouteUnit</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rewriteAndConvert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLRouteResult sqlRouteResult) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//构建 SQLRewriteContext </span></span>
<span class="line"><span style="color:#E1E4E8;">   SQLRewriteContext sqlRewriteContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">SQLRewriteContext</span><span style="color:#E1E4E8;">(metaData.</span><span style="color:#B392F0;">getRelationMetas</span><span style="color:#E1E4E8;">(), sqlRouteResult.</span><span style="color:#B392F0;">getSqlStatementContext</span><span style="color:#E1E4E8;">(), sql, parameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//构建 ShardingSQLRewriteContextDecorator 对 SQLRewriteContext 进行装饰 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingSQLRewriteContextDecorator</span><span style="color:#E1E4E8;">(shardingRule, sqlRouteResult).</span><span style="color:#B392F0;">decorate</span><span style="color:#E1E4E8;">(sqlRewriteContext); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//判断是否根据数据脱敏列进行查询 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isQueryWithCipherColumn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingProperties.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(ShardingPropertiesConstant.QUERY_WITH_CIPHER_COLUMN); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//构建 EncryptSQLRewriteContextDecorator 对 SQLRewriteContext 进行装饰 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptSQLRewriteContextDecorator</span><span style="color:#E1E4E8;">(shardingRule.</span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">(), isQueryWithCipherColumn).</span><span style="color:#B392F0;">decorate</span><span style="color:#E1E4E8;">(sqlRewriteContext); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//生成 SQLTokens </span></span>
<span class="line"><span style="color:#E1E4E8;"> sqlRewriteContext.</span><span style="color:#B392F0;">generateSQLTokens</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">RouteUnit</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (RoutingUnit each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sqlRouteResult.</span><span style="color:#B392F0;">getRoutingResult</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//构建 ShardingSQLRewriteEngine </span></span>
<span class="line"><span style="color:#E1E4E8;">        ShardingSQLRewriteEngine sqlRewriteEngine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingSQLRewriteEngine</span><span style="color:#E1E4E8;">(shardingRule, sqlRouteResult.</span><span style="color:#B392F0;">getShardingConditions</span><span style="color:#E1E4E8;">(), each); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//执行改写 </span></span>
<span class="line"><span style="color:#E1E4E8;">        SQLRewriteResult sqlRewriteResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlRewriteEngine.</span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(sqlRewriteContext); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//保存改写结果 </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RouteUnit</span><span style="color:#E1E4E8;">(each.</span><span style="color:#B392F0;">getDataSourceName</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLUnit</span><span style="color:#E1E4E8;">(sqlRewriteResult.</span><span style="color:#B392F0;">getSql</span><span style="color:#E1E4E8;">(), sqlRewriteResult.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">()))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">RouteUnit</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rewriteAndConvert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLRouteResult sqlRouteResult) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//构建 SQLRewriteContext </span></span>
<span class="line"><span style="color:#24292E;">   SQLRewriteContext sqlRewriteContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">     </span><span style="color:#6F42C1;">SQLRewriteContext</span><span style="color:#24292E;">(metaData.</span><span style="color:#6F42C1;">getRelationMetas</span><span style="color:#24292E;">(), sqlRouteResult.</span><span style="color:#6F42C1;">getSqlStatementContext</span><span style="color:#24292E;">(), sql, parameters); </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//构建 ShardingSQLRewriteContextDecorator 对 SQLRewriteContext 进行装饰 </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingSQLRewriteContextDecorator</span><span style="color:#24292E;">(shardingRule, sqlRouteResult).</span><span style="color:#6F42C1;">decorate</span><span style="color:#24292E;">(sqlRewriteContext); </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//判断是否根据数据脱敏列进行查询 </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isQueryWithCipherColumn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingProperties.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(ShardingPropertiesConstant.QUERY_WITH_CIPHER_COLUMN); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//构建 EncryptSQLRewriteContextDecorator 对 SQLRewriteContext 进行装饰 </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptSQLRewriteContextDecorator</span><span style="color:#24292E;">(shardingRule.</span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">(), isQueryWithCipherColumn).</span><span style="color:#6F42C1;">decorate</span><span style="color:#24292E;">(sqlRewriteContext); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//生成 SQLTokens </span></span>
<span class="line"><span style="color:#24292E;"> sqlRewriteContext.</span><span style="color:#6F42C1;">generateSQLTokens</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">RouteUnit</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (RoutingUnit each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sqlRouteResult.</span><span style="color:#6F42C1;">getRoutingResult</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//构建 ShardingSQLRewriteEngine </span></span>
<span class="line"><span style="color:#24292E;">        ShardingSQLRewriteEngine sqlRewriteEngine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingSQLRewriteEngine</span><span style="color:#24292E;">(shardingRule, sqlRouteResult.</span><span style="color:#6F42C1;">getShardingConditions</span><span style="color:#24292E;">(), each); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//执行改写 </span></span>
<span class="line"><span style="color:#24292E;">        SQLRewriteResult sqlRewriteResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlRewriteEngine.</span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(sqlRewriteContext); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//保存改写结果 </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RouteUnit</span><span style="color:#24292E;">(each.</span><span style="color:#6F42C1;">getDataSourceName</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLUnit</span><span style="color:#24292E;">(sqlRewriteResult.</span><span style="color:#6F42C1;">getSql</span><span style="color:#24292E;">(), sqlRewriteResult.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">()))); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码虽然内容不多，但却完整描述了实现 SQL 改写的整体流程，我们对核心代码都添加了注释，这里面涉及的<strong>核心类</strong>也很多，值得我们进行深入分析，相关核心类的整体结构如下：</p>`,8),c=s(`<p>可以看到在整个类图中，SQLRewriteContext 处于中间位置，改写引擎 SQLRewriteEngine 和装饰器 SQLRewriteContextDecorator 都依赖于它。</p><p>所以接下来，让我们先来看一下这个 SQLRewriteContext，并基于自增主键功能引出 SQL 改写引擎的基础组件 SQLToken。</p><h3 id="从自增主键功能看改写引擎中的核心类" tabindex="-1">从自增主键功能看改写引擎中的核心类 <a class="header-anchor" href="#从自增主键功能看改写引擎中的核心类" aria-label="Permalink to &quot;从自增主键功能看改写引擎中的核心类&quot;">​</a></h3><h4 id="_1-sqlrewritecontext" tabindex="-1">1. SQLRewriteContext <a class="header-anchor" href="#_1-sqlrewritecontext" aria-label="Permalink to &quot;1. SQLRewriteContext&quot;">​</a></h4><p>从命名上讲，与 SQLStatementContext 类似，SQLRewriteContext 也是一个上下文对象，让我们来看 SQLRewriteContext 中的变量定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//数据表和列的关系元数据 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RelationMetas relationMetas; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLStatement 上下文 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext; </span></span>
<span class="line"><span style="color:#6A737D;">//原始SQL </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql; </span></span>
<span class="line"><span style="color:#6A737D;">//参数列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; parameters; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLToken 列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">SQLToken</span><span style="color:#E1E4E8;">&gt; sqlTokens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#6A737D;">//参数构建器 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParameterBuilder parameterBuilder; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLToken 生成器 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLTokenGenerators sqlTokenGenerators </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLTokenGenerators</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//数据表和列的关系元数据 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RelationMetas relationMetas; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLStatement 上下文 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext; </span></span>
<span class="line"><span style="color:#6A737D;">//原始SQL </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql; </span></span>
<span class="line"><span style="color:#6A737D;">//参数列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; parameters; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLToken 列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">SQLToken</span><span style="color:#24292E;">&gt; sqlTokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#6A737D;">//参数构建器 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParameterBuilder parameterBuilder; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLToken 生成器 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLTokenGenerators sqlTokenGenerators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLTokenGenerators</span><span style="color:#24292E;">();</span></span></code></pre></div><p>在这里，我们看到了前面已经介绍的 SQLStatementContext，也看到了新的 SQLToken 和 SQLTokenGenerators。随着今天内容的演进，这些对象都会逐一进行介绍，这里我们先明确 SQLRewriteContext 中保存着用于 SQL 改写的各种相关信息。</p><h4 id="_2-sqltoken" tabindex="-1">2. SQLToken <a class="header-anchor" href="#_2-sqltoken" aria-label="Permalink to &quot;2. SQLToken&quot;">​</a></h4><p>接下来，我们来看一下 SQLToken 对象，该对象在改写引擎中重要性很高，<strong>SQLRewriteEngine 正是基于 SQLToken 实现了 SQL 改写</strong>，SQLToken 类的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequiredArgsConstructor</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLToken</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Comparable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">SQLToken</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> startIndex; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLToken </span><span style="color:#FFAB70;">sqlToken</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> startIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> sqlToken.</span><span style="color:#B392F0;">getStartIndex</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequiredArgsConstructor</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLToken</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">SQLToken</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> startIndex; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLToken </span><span style="color:#E36209;">sqlToken</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> startIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> sqlToken.</span><span style="color:#6F42C1;">getStartIndex</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SQLToken 实际上是一个抽象类，在 ShardingSphere 中，存在了一大批 SQLToken 的子类。这些 SQLToken 多数跟 SQL 改写相关（这部分类的包名中包含 rewrite）；而有些在改写的基础上还与后面要讲到的数据脱敏功能相关（这部分类包名中还包含着 encrypt）。</p><blockquote><p>数据脱敏也是 ShardingSphere 提供的一项非常实用的功能，我们在讲到&quot;模块六：ShardingSphere 源码解析之治理与集成&quot;时会有专题对其进行介绍。</p></blockquote><p>同时，部分 SQLToken 位于 shardingsphere-rewrite-engine 工程中，而有些则位于 sharding-core-rewrite 工程中，这点也需要注意。</p><p>结合 SQL 改写的常见场景，很多 SQLToken 的含义可以从字面意思上直接理解。例如，对 INSERT 语句而言，如果使用数据库自增主键，是不需要写入主键字段的，但数据库的自增主键无法满足分布式场景下的主键唯一性，因此 ShardingSphere 提供了分布式自增主键的生成策略，能够自动地替换数据库现有的自增主键。</p><p>举例说明，我们案例中 health_record 表的主键是 record_id，假定原始的 SQL 为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">INSERT INTO </span><span style="color:#B392F0;">health_record</span><span style="color:#E1E4E8;"> (user_id, level_id, remark) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;remark1&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">INSERT INTO </span><span style="color:#6F42C1;">health_record</span><span style="color:#24292E;"> (user_id, level_id, remark) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;remark1&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>可以看到，上述 SQL 中并未包含自增主键，需要数据库自行填充，在 ShardingSphere 中配置了自增主键后，SQL 将被自动改写为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">INSERT INTO </span><span style="color:#B392F0;">health_record</span><span style="color:#E1E4E8;"> (record_id, user_id, level_id, remark) </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;471698773731577856&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Remark1&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">INSERT INTO </span><span style="color:#6F42C1;">health_record</span><span style="color:#24292E;"> (record_id, user_id, level_id, remark) </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;471698773731577856&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Remark1&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>显然，改写后的 SQL 将在 INSERT 语句中增加主键列名称，以及自动生成的自增主键值。</p><p>从命名上看，GeneratedKeyInsertColumnToken 对应上述的自动主键填充的场景，这实际上属于常见的一种 SQL 改写策略，也就是补列，GeneratedKeyInsertColumnToken 的实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKeyInsertColumnToken</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLToken</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Attachable</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String column; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKeyInsertColumnToken</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">startIndex</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">column</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(startIndex); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.column </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> column; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;, %s&quot;</span><span style="color:#E1E4E8;">, column); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKeyInsertColumnToken</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLToken</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Attachable</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String column; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKeyInsertColumnToken</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">startIndex</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">column</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(startIndex); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.column </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> column; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;, %s&quot;</span><span style="color:#24292E;">, column); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意到这里多了一个 column 变量用于指定主键的所在列。我们再来跟踪 GeneratedKeyInsertColumnToken 的构造函数调用情况，发现这个类是通过 GeneratedKeyInsertColumnTokenGenerator 创建出来的。</p><p>接下来，让我们一起看看 TokenGenerator。</p><h4 id="_3-tokengenerator" tabindex="-1">3. TokenGenerator <a class="header-anchor" href="#_3-tokengenerator" aria-label="Permalink to &quot;3. TokenGenerator&quot;">​</a></h4><p>顾名思义，TokenGenerator 的作用是专门负责生成具体的 Token，该接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLTokenGenerator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断是否要生成 SQLToken </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isGenerateSQLToken</span><span style="color:#E1E4E8;">(SQLStatementContext </span><span style="color:#FFAB70;">sqlStatementContext</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLTokenGenerator</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//判断是否要生成 SQLToken </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isGenerateSQLToken</span><span style="color:#24292E;">(SQLStatementContext </span><span style="color:#E36209;">sqlStatementContext</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该接口还有两个子接口，分别是负责生成单个 SQLToken 的 OptionalSQLTokenGenerator 和负责生成批量 SQLToken 的 CollectionSQLTokenGenerator：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionalSQLTokenGenerator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLTokenGenerator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//生成单个 SQLToken </span></span>
<span class="line"><span style="color:#E1E4E8;">    SQLToken </span><span style="color:#B392F0;">generateSQLToken</span><span style="color:#E1E4E8;">(SQLStatementContext </span><span style="color:#FFAB70;">sqlStatementContext</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CollectionSQLTokenGenerator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLTokenGenerator</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//生成批量 SQLToken </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLToken</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">generateSQLTokens</span><span style="color:#E1E4E8;">(SQLStatementContext </span><span style="color:#FFAB70;">sqlStatementContext</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionalSQLTokenGenerator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLTokenGenerator</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//生成单个 SQLToken </span></span>
<span class="line"><span style="color:#24292E;">    SQLToken </span><span style="color:#6F42C1;">generateSQLToken</span><span style="color:#24292E;">(SQLStatementContext </span><span style="color:#E36209;">sqlStatementContext</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CollectionSQLTokenGenerator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLTokenGenerator</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//生成批量 SQLToken </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLToken</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">generateSQLTokens</span><span style="color:#24292E;">(SQLStatementContext </span><span style="color:#E36209;">sqlStatementContext</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ShardingSphere，和 SQLToken 一样，TokenGenerator 的类层结构也比较复杂。对于 GeneratedKeyInsertColumnTokenGenerator 而言，它还有一个抽象的基类，即如下所示的 BaseGeneratedKeyTokenGenerator：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseGeneratedKeyTokenGenerator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionalSQLTokenGenerator</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">SQLRouteResultAware</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否生成 SQLToken </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isGenerateSQLToken</span><span style="color:#E1E4E8;">(InsertStatement </span><span style="color:#FFAB70;">insertStatement</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//生成 SQLToken </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> SQLToken </span><span style="color:#B392F0;">generateSQLToken</span><span style="color:#E1E4E8;">(SQLStatementContext </span><span style="color:#FFAB70;">sqlStatementContext</span><span style="color:#E1E4E8;">, GeneratedKey </span><span style="color:#FFAB70;">generatedKey</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	... </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseGeneratedKeyTokenGenerator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionalSQLTokenGenerator</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">SQLRouteResultAware</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否生成 SQLToken </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isGenerateSQLToken</span><span style="color:#24292E;">(InsertStatement </span><span style="color:#E36209;">insertStatement</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//生成 SQLToken </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> SQLToken </span><span style="color:#6F42C1;">generateSQLToken</span><span style="color:#24292E;">(SQLStatementContext </span><span style="color:#E36209;">sqlStatementContext</span><span style="color:#24292E;">, GeneratedKey </span><span style="color:#E36209;">generatedKey</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	... </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个抽象类留下了两个模板方法 isGenerateSQLToken 和 generateSQLToken，交由子类进行实现，在 GeneratedKeyInsertColumnTokenGenerator 中提供了这两个方法的实现过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKeyInsertColumnTokenGenerator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseGeneratedKeyTokenGenerator</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isGenerateSQLToken</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InsertStatement </span><span style="color:#FFAB70;">insertStatement</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">InsertColumnsSegment</span><span style="color:#E1E4E8;">&gt; sqlSegment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> insertStatement.</span><span style="color:#B392F0;">findSQLSegment</span><span style="color:#E1E4E8;">(InsertColumnsSegment.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sqlSegment.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">sqlSegment.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getColumns</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> GeneratedKeyInsertColumnToken </span><span style="color:#B392F0;">generateSQLToken</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext </span><span style="color:#FFAB70;">sqlStatementContext</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> GeneratedKey </span><span style="color:#FFAB70;">generatedKey</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">InsertColumnsSegment</span><span style="color:#E1E4E8;">&gt; sqlSegment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findSQLSegment</span><span style="color:#E1E4E8;">(InsertColumnsSegment.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkState</span><span style="color:#E1E4E8;">(sqlSegment.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//构建 GeneratedKeyInsertColumnToken </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKeyInsertColumnToken</span><span style="color:#E1E4E8;">(sqlSegment.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStopIndex</span><span style="color:#E1E4E8;">(), generatedKey.</span><span style="color:#B392F0;">getColumnName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKeyInsertColumnTokenGenerator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseGeneratedKeyTokenGenerator</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isGenerateSQLToken</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InsertStatement </span><span style="color:#E36209;">insertStatement</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">InsertColumnsSegment</span><span style="color:#24292E;">&gt; sqlSegment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> insertStatement.</span><span style="color:#6F42C1;">findSQLSegment</span><span style="color:#24292E;">(InsertColumnsSegment.class); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlSegment.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">sqlSegment.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getColumns</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> GeneratedKeyInsertColumnToken </span><span style="color:#6F42C1;">generateSQLToken</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext </span><span style="color:#E36209;">sqlStatementContext</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> GeneratedKey </span><span style="color:#E36209;">generatedKey</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">InsertColumnsSegment</span><span style="color:#24292E;">&gt; sqlSegment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findSQLSegment</span><span style="color:#24292E;">(InsertColumnsSegment.class); </span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkState</span><span style="color:#24292E;">(sqlSegment.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//构建 GeneratedKeyInsertColumnToken </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKeyInsertColumnToken</span><span style="color:#24292E;">(sqlSegment.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStopIndex</span><span style="color:#24292E;">(), generatedKey.</span><span style="color:#6F42C1;">getColumnName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到在上述 generateSQLToken 方法中，通过利用在 SQL 解析引擎中获取的 InsertColumnsSegment 以及从用于生成分布式主键的 GeneratedKey 中获取对应的主键列，我们就可以构建一个 GeneratedKeyInsertColumnToken。</p><h3 id="装饰器-sqlrewritecontextdecorator" tabindex="-1">装饰器 SQLRewriteContextDecorator <a class="header-anchor" href="#装饰器-sqlrewritecontextdecorator" aria-label="Permalink to &quot;装饰器 SQLRewriteContextDecorator&quot;">​</a></h3><p>现在，既然已经获取了 SQLToken，让我们再次回到前面提到的 SQLRewriteContext。我们知道 SQLRewriteContext 是一个上下文对象，保存着与 SQL 改写相关的很多数据信息，同时对于这些信息，其构建过程会根据不同的应用场景而有所不同。基于这些应用场景，ShardingSphere 的改写引擎提供了 SQLRewriteContextDecorator 接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRewriteContextDecorator</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//对SQLRewriteContext 执行装饰 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorate</span><span style="color:#E1E4E8;">(SQLRewriteContext </span><span style="color:#FFAB70;">sqlRewriteContext</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRewriteContextDecorator</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//对SQLRewriteContext 执行装饰 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorate</span><span style="color:#24292E;">(SQLRewriteContext </span><span style="color:#E36209;">sqlRewriteContext</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>顾名思义，SQLRewriteContextDecorator 是一种装饰器模式的具体应用，在 ShardingSphere 中只存在两种具体的 SQLRewriteContextDecorator：一种是用于分片处理的 ShardingSQLRewriteContextDecorator，一种是用于数据脱敏的 EncryptSQLRewriteContextDecorator，我们将在&quot;30 | 数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？&quot;中进行详细介绍。今天，我们关注的是前一种 ShardingSQLRewriteContextDecorator 的实现过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingSQLRewriteContextDecorator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRewriteContextDecorator</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLRouteResult sqlRouteResult; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLRewriteContext </span><span style="color:#FFAB70;">sqlRewriteContext</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//参数改写 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ParameterRewriter each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingParameterRewriterBuilder</span><span style="color:#E1E4E8;">(shardingRule, sqlRouteResult).</span><span style="color:#B392F0;">getParameterRewriters</span><span style="color:#E1E4E8;">(sqlRewriteContext.</span><span style="color:#B392F0;">getRelationMetas</span><span style="color:#E1E4E8;">())) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">sqlRewriteContext.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> each.</span><span style="color:#B392F0;">isNeedRewrite</span><span style="color:#E1E4E8;">(sqlRewriteContext.</span><span style="color:#B392F0;">getSqlStatementContext</span><span style="color:#E1E4E8;">())) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                each.</span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(sqlRewriteContext.</span><span style="color:#B392F0;">getParameterBuilder</span><span style="color:#E1E4E8;">(), sqlRewriteContext.</span><span style="color:#B392F0;">getSqlStatementContext</span><span style="color:#E1E4E8;">(), sqlRewriteContext.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//SQLTokenGenerators 初始化 </span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlRewriteContext.</span><span style="color:#B392F0;">addSQLTokenGenerators</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingTokenGenerateBuilder</span><span style="color:#E1E4E8;">(shardingRule, sqlRouteResult).</span><span style="color:#B392F0;">getSQLTokenGenerators</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingSQLRewriteContextDecorator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRewriteContextDecorator</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLRouteResult sqlRouteResult; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLRewriteContext </span><span style="color:#E36209;">sqlRewriteContext</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//参数改写 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ParameterRewriter each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingParameterRewriterBuilder</span><span style="color:#24292E;">(shardingRule, sqlRouteResult).</span><span style="color:#6F42C1;">getParameterRewriters</span><span style="color:#24292E;">(sqlRewriteContext.</span><span style="color:#6F42C1;">getRelationMetas</span><span style="color:#24292E;">())) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">sqlRewriteContext.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> each.</span><span style="color:#6F42C1;">isNeedRewrite</span><span style="color:#24292E;">(sqlRewriteContext.</span><span style="color:#6F42C1;">getSqlStatementContext</span><span style="color:#24292E;">())) { </span></span>
<span class="line"><span style="color:#24292E;">                each.</span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(sqlRewriteContext.</span><span style="color:#6F42C1;">getParameterBuilder</span><span style="color:#24292E;">(), sqlRewriteContext.</span><span style="color:#6F42C1;">getSqlStatementContext</span><span style="color:#24292E;">(), sqlRewriteContext.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//SQLTokenGenerators 初始化 </span></span>
<span class="line"><span style="color:#24292E;">        sqlRewriteContext.</span><span style="color:#6F42C1;">addSQLTokenGenerators</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingTokenGenerateBuilder</span><span style="color:#24292E;">(shardingRule, sqlRouteResult).</span><span style="color:#6F42C1;">getSQLTokenGenerators</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码不长，包含了两部分内容：一个是参数改写，另一个是 SQLTokenGenerators 初始化，下面我将分别讲解：</p><h4 id="_1-参数改写" tabindex="-1">1. 参数改写 <a class="header-anchor" href="#_1-参数改写" aria-label="Permalink to &quot;1. 参数改写&quot;">​</a></h4><p>参数改写部分又引入了几个新类。首当其冲的是 ParameterRewriter 以及构建它的 ParameterRewriterBuilder。</p><p><strong>（1）ParameterRewriter</strong></p><p>我们先来看 ParameterRewriter 的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParameterRewriter</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断是否需要改写 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNeedRewrite</span><span style="color:#E1E4E8;">(SQLStatementContext </span><span style="color:#FFAB70;">sqlStatementContext</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行参数改写 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(ParameterBuilder </span><span style="color:#FFAB70;">parameterBuilder</span><span style="color:#E1E4E8;">, SQLStatementContext </span><span style="color:#FFAB70;">sqlStatementContext</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameters</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParameterRewriter</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//判断是否需要改写 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNeedRewrite</span><span style="color:#24292E;">(SQLStatementContext </span><span style="color:#E36209;">sqlStatementContext</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行参数改写 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(ParameterBuilder </span><span style="color:#E36209;">parameterBuilder</span><span style="color:#24292E;">, SQLStatementContext </span><span style="color:#E36209;">sqlStatementContext</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameters</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>基于自增主键功能，这里以 ShardingGeneratedKeyInsertValueParameterRewriter 为例看一下 ParameterRewriter 的实现方式，它的 isNeedRewrite 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNeedRewrite</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sqlStatementContext </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InsertSQLStatementContext </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> sqlRouteResult.</span><span style="color:#B392F0;">getGeneratedKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> sqlRouteResult.</span><span style="color:#B392F0;">getGeneratedKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isGenerated</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNeedRewrite</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlStatementContext </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InsertSQLStatementContext </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> sqlRouteResult.</span><span style="color:#6F42C1;">getGeneratedKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> sqlRouteResult.</span><span style="color:#6F42C1;">getGeneratedKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isGenerated</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，输入的 SQL 应该是一种 InsertSQLStatement，并且只有在路由结果已经包含了 GeneratedKey 的情况下才执行这种改写。</p><p><strong>（2）ParameterRewriterBuilder</strong></p><p>在介绍 rewrite 方法之前，我们先来理解 <strong>ParameterBuilder</strong> 的概念，ParameterBuilder 是一种参数构建器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParameterBuilder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParameterBuilder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ParameterBuilder 有两个实现类：分别是 StandardParameterBuilder 和 GroupedParameterBuilder。其中，GroupedParameterBuilder 保存着 StandardParameterBuilder 的一个集合，只适用于 InsertSQLStatement。</p><p>了解了这层关系之后，我们再来看 ShardingGeneratedKeyInsertValueParameterRewriter 的 rewrite 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParameterBuilder parameterBuilder, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkState</span><span style="color:#E1E4E8;">(sqlRouteResult.</span><span style="color:#B392F0;">getGeneratedKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    ((GroupedParameterBuilder) parameterBuilder).</span><span style="color:#B392F0;">setDerivedColumnName</span><span style="color:#E1E4E8;">(sqlRouteResult.</span><span style="color:#B392F0;">getGeneratedKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getColumnName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; generatedValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlRouteResult.</span><span style="color:#B392F0;">getGeneratedKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getGeneratedValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">descendingIterator</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> parametersCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ((InsertSQLStatementContext) sqlStatementContext).</span><span style="color:#B392F0;">getGroupedParameters</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        parametersCount </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> ((InsertSQLStatementContext) sqlStatementContext).</span><span style="color:#B392F0;">getInsertValueContexts</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(count).</span><span style="color:#B392F0;">getParametersCount</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; generatedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generatedValues.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">each.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//使用 GroupedParameterBuilder 进行补列和设置参数 </span></span>
<span class="line"><span style="color:#E1E4E8;">            ((GroupedParameterBuilder) parameterBuilder).</span><span style="color:#B392F0;">getParameterBuilders</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(count).</span><span style="color:#B392F0;">addAddedParameters</span><span style="color:#E1E4E8;">(parametersCount, Lists.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(generatedValue)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParameterBuilder parameterBuilder, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters) { </span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkState</span><span style="color:#24292E;">(sqlRouteResult.</span><span style="color:#6F42C1;">getGeneratedKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    ((GroupedParameterBuilder) parameterBuilder).</span><span style="color:#6F42C1;">setDerivedColumnName</span><span style="color:#24292E;">(sqlRouteResult.</span><span style="color:#6F42C1;">getGeneratedKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getColumnName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; generatedValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlRouteResult.</span><span style="color:#6F42C1;">getGeneratedKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getGeneratedValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">descendingIterator</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> parametersCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ((InsertSQLStatementContext) sqlStatementContext).</span><span style="color:#6F42C1;">getGroupedParameters</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        parametersCount </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> ((InsertSQLStatementContext) sqlStatementContext).</span><span style="color:#6F42C1;">getInsertValueContexts</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(count).</span><span style="color:#6F42C1;">getParametersCount</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; generatedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> generatedValues.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">each.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//使用 GroupedParameterBuilder 进行补列和设置参数 </span></span>
<span class="line"><span style="color:#24292E;">            ((GroupedParameterBuilder) parameterBuilder).</span><span style="color:#6F42C1;">getParameterBuilders</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(count).</span><span style="color:#6F42C1;">addAddedParameters</span><span style="color:#24292E;">(parametersCount, Lists.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(generatedValue)); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为这个 ParameterRewriter 面向 InsertSQLStatement，所以这里用到了 GroupedParameterBuilder，并通过 SQLRouteResult 获取 GeneratedKey。我们设置了 GroupedParameterBuilder 中的 DerivedColumnName 为 GeneratedKey 的主键 Column，并通过一个循环添加了对应的 Index 和 Parameter，也就是完成了所需的补列操作。</p><p>这部分的操作实际上可以与 GeneratedKey 的生成过程结合起来一起看以便加深理解，在 <a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">&quot;14 | 分布式主键：ShardingSphere 中有哪些分布式主键实现方式？&quot;</a>课时中提到的 createGeneratedKey 方法也是通过一个循环对 GeneratedKey 进行赋值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> GeneratedKey </span><span style="color:#B392F0;">createGeneratedKey</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InsertStatement insertStatement, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String generateKeyColumnName) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    GeneratedKey result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKey</span><span style="color:#E1E4E8;">(generateKeyColumnName, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> insertStatement.</span><span style="color:#B392F0;">getValueListCount</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">getGeneratedValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(shardingRule.</span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">(insertStatement.</span><span style="color:#B392F0;">getTable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> GeneratedKey </span><span style="color:#6F42C1;">createGeneratedKey</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InsertStatement insertStatement, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String generateKeyColumnName) { </span></span>
<span class="line"><span style="color:#24292E;">    GeneratedKey result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKey</span><span style="color:#24292E;">(generateKeyColumnName, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> insertStatement.</span><span style="color:#6F42C1;">getValueListCount</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">getGeneratedValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(shardingRule.</span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">(insertStatement.</span><span style="color:#6F42C1;">getTable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-sqltokengenerator-初始化" tabindex="-1">2. SQLTokenGenerator 初始化 <a class="header-anchor" href="#_2-sqltokengenerator-初始化" aria-label="Permalink to &quot;2. SQLTokenGenerator 初始化&quot;">​</a></h4><p>上文内容我们关注 ShardingSQLRewriteContextDecorator 中使用 ParameterRewriter 进行<strong>参数改写</strong>的过程，这是 decorate 方法中的第一部分内容。</p><p>接下来我们继续讲解该方法的第二部分内容，即 <strong>为 SQLRewriteContext 添加 SQLTokenGenerator</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//SQLTokenGenerators 初始化 </span></span>
<span class="line"><span style="color:#E1E4E8;">sqlRewriteContext.</span><span style="color:#B392F0;">addSQLTokenGenerators</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingTokenGenerateBuilder</span><span style="color:#E1E4E8;">(shardingRule, sqlRouteResult).</span><span style="color:#B392F0;">getSQLTokenGenerators</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//SQLTokenGenerators 初始化 </span></span>
<span class="line"><span style="color:#24292E;">sqlRewriteContext.</span><span style="color:#6F42C1;">addSQLTokenGenerators</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingTokenGenerateBuilder</span><span style="color:#24292E;">(shardingRule, sqlRouteResult).</span><span style="color:#6F42C1;">getSQLTokenGenerators</span><span style="color:#24292E;">());</span></span></code></pre></div><p>这句代码关注于 SQLTokenGenerator 的创建，所以出现了一个ShardingTokenGenerateBuilder：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLTokenGeneratorBuilder</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取 SQLTokenGenerator 列表 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">SQLTokenGenerator</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSQLTokenGenerators</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLTokenGeneratorBuilder</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取 SQLTokenGenerator 列表 </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">SQLTokenGenerator</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSQLTokenGenerators</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 SQLTokenGeneratorBuilder 的实现类 ShardingTokenGenerateBuilder 中，可以看到内置了很多 TokenGenerator，包含我们在前面提到过的 GeneratedKeyInsertColumnTokenGenerator：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">SQLTokenGenerator</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildSQLTokenGenerators</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">SQLTokenGenerator</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSQLTokenGenerator</span><span style="color:#E1E4E8;">(result, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableTokenGenerator</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSQLTokenGenerator</span><span style="color:#E1E4E8;">(result, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OffsetTokenGenerator</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSQLTokenGenerator</span><span style="color:#E1E4E8;">(result, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RowCountTokenGenerator</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addSQLTokenGenerator</span><span style="color:#E1E4E8;">(result, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKeyInsertColumnTokenGenerator</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">SQLTokenGenerator</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildSQLTokenGenerators</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">SQLTokenGenerator</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSQLTokenGenerator</span><span style="color:#24292E;">(result, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableTokenGenerator</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        ... </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSQLTokenGenerator</span><span style="color:#24292E;">(result, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OffsetTokenGenerator</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSQLTokenGenerator</span><span style="color:#24292E;">(result, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RowCountTokenGenerator</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSQLTokenGenerator</span><span style="color:#24292E;">(result, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKeyInsertColumnTokenGenerator</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        ... </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="改写引擎-sqlrewriteengine" tabindex="-1">改写引擎 SQLRewriteEngine <a class="header-anchor" href="#改写引擎-sqlrewriteengine" aria-label="Permalink to &quot;改写引擎 SQLRewriteEngine&quot;">​</a></h3><p>在 ShardingSphere 中，SQLRewriteEngine 接口代表了改写引擎的入口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRewriteEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//基于 SQLRewriteContext 执行 SQL 改写 </span></span>
<span class="line"><span style="color:#E1E4E8;">    SQLRewriteResult </span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(SQLRewriteContext </span><span style="color:#FFAB70;">sqlRewriteContext</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRewriteEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//基于 SQLRewriteContext 执行 SQL 改写 </span></span>
<span class="line"><span style="color:#24292E;">    SQLRewriteResult </span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(SQLRewriteContext </span><span style="color:#E36209;">sqlRewriteContext</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SQLRewriteEngine 接口只有一个方法，即根据输入的 SQLRewriteContext 返回一个 SQLRewriteResult 对象。我们通过前面的介绍已经了解到，可以通过装饰器类对 SQLRewriteContext 进行装饰，从而满足不同场景的需要。</p><p>注意到 SQLRewriteEngine 接口只有两个实现类：分别是 DefaultSQLRewriteEngine 和 ShardingSQLRewriteEngine。我们重点关注 ShardingSQLRewriteEngine，但在介绍这个改写引擎类之前，我们先要介绍一下 <strong>SQLBuilder 接口</strong>，从定义上可以看出 SQLBuilder 的目的就是构建最终可以执行的 SQL 语句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLBuilder</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//生成 SQL </span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">toSQL</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLBuilder</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//生成 SQL </span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">toSQL</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SQLBuilder 接口有一个抽象的实现类 AbstractSQLBuilder，它的 toSQL 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toSQL</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context.</span><span style="color:#B392F0;">getSqlTokens</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getSql</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collections.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">getSqlTokens</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    StringBuilder result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">getSql</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, context.</span><span style="color:#B392F0;">getSqlTokens</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getStartIndex</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据 SQLToken 拼装目标 SQL </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SQLToken each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getSqlTokens</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getSQLTokenText</span><span style="color:#E1E4E8;">(each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getConjunctionText</span><span style="color:#E1E4E8;">(each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toSQL</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context.</span><span style="color:#6F42C1;">getSqlTokens</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getSql</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">getSqlTokens</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    StringBuilder result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">getSql</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, context.</span><span style="color:#6F42C1;">getSqlTokens</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getStartIndex</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据 SQLToken 拼装目标 SQL </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SQLToken each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getSqlTokens</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getSQLTokenText</span><span style="color:#24292E;">(each)); </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getConjunctionText</span><span style="color:#24292E;">(each)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，如果 SQLRewriteContext 的 sqlTokens 为空，就直接返回保存在 SQLRewriteContext 中的最终 SQL；反之，会构建一个保存 SQL的StringBuilder，然后依次添加每个 SQLTokenText 以及连接词 ConjunctionText，从而拼装成一个完整的 SQL 语句。<strong>注意到，这里获取 SQLTokenText 的方法是一个模板方法，需要 AbstractSQLBuilder 的子类进行实现：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//获取 SQLToken 文本 </span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getSQLTokenText</span><span style="color:#E1E4E8;">(SQLToken sqlToken);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//获取 SQLToken 文本 </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getSQLTokenText</span><span style="color:#24292E;">(SQLToken sqlToken);</span></span></code></pre></div><p>作为 AbstractSQLBuilder的一个实现类，ShardingSQLBuilder 的 getSQLTokenText 方法就包含了 SQL 改写的一些场景：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getSQLTokenText</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLToken sqlToken) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlToken </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> RoutingUnitAware) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ((RoutingUnitAware) sqlToken).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(routingUnit); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlToken </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> LogicAndActualTablesAware) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ((LogicAndActualTablesAware) sqlToken).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getLogicAndActualTables</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sqlToken.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getSQLTokenText</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLToken sqlToken) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlToken </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> RoutingUnitAware) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((RoutingUnitAware) sqlToken).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(routingUnit); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlToken </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> LogicAndActualTablesAware) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((LogicAndActualTablesAware) sqlToken).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getLogicAndActualTables</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlToken.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于输入的 SQLToken，这里有两个特殊的处理，即判断是否实现了 RoutingUnitAware 接口或 LogicAndActualTablesAware 接口。我们发现实现 RoutingUnitAware 接口的只有 ShardingInsertValuesToken；而实现 LogicAndActualTablesAware 的则有 IndexToken 和 TableToken 两个 SQLToken。</p><p>这里以实现了 LogicAndActualTablesAware 的 TableToken 为例展开讨论。<strong>表名改写</strong>就是将逻辑表名改写为真实表名的过程，是一个典型的需要对 SQL 进行改写的场景。我们考虑最简单表名改写场景，如果逻辑 SQL 为：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT user_name FROM user WHERE user_id = 1;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT user_name FROM user WHERE user_id = 1;</span></span></code></pre></div><p>那么，这里的逻辑表名为 user。假设我们配置了分片键 user_id，并且 user_id = 1 的情况，将路由至分片表 user_1，那么改写之后的 SQL 应该为：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT user_name FROM user_1 WHERE user_id = 1;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT user_name FROM user_1 WHERE user_id = 1;</span></span></code></pre></div><p>可以看到这里的真实表名应该是 user_1 而不是 user，在用于改写表名的 TableToken 中，它的 toString 如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> logicAndActualTables) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    String actualTableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> logicAndActualTables.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(tableName.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    actualTableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> actualTableName </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> tableName.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> actualTableName; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Joiner.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(quoteCharacter.</span><span style="color:#B392F0;">getStartDelimiter</span><span style="color:#E1E4E8;">(), actualTableName, quoteCharacter.</span><span style="color:#B392F0;">getEndDelimiter</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> logicAndActualTables) { </span></span>
<span class="line"><span style="color:#24292E;">    String actualTableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> logicAndActualTables.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(tableName.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    actualTableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> actualTableName </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> tableName.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> actualTableName; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Joiner.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(quoteCharacter.</span><span style="color:#6F42C1;">getStartDelimiter</span><span style="color:#24292E;">(), actualTableName, quoteCharacter.</span><span style="color:#6F42C1;">getEndDelimiter</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的逻辑并不复杂，只是根据逻辑表名从 logicAndActualTables 中获取真实表名 actualTableName，然后进行字符串拼装而已。那么这个 logicAndActualTables 是从何而来呢？logicAndActualTables 的构建过程是在 ShardingSQLBuilder 中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLogicAndActualTables</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; tableNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSqlStatementContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTablesContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTableNames</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (TableUnit each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> routingUnit.</span><span style="color:#B392F0;">getTableUnits</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        String logicTableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> each.</span><span style="color:#B392F0;">getLogicTableName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(logicTableName, each.</span><span style="color:#B392F0;">getActualTableName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getLogicAndActualTablesFromBindingTable</span><span style="color:#E1E4E8;">(routingUnit.</span><span style="color:#B392F0;">getMasterSlaveLogicDataSourceName</span><span style="color:#E1E4E8;">(), each, tableNames)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLogicAndActualTables</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; tableNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSqlStatementContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTablesContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTableNames</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (TableUnit each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> routingUnit.</span><span style="color:#6F42C1;">getTableUnits</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        String logicTableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> each.</span><span style="color:#6F42C1;">getLogicTableName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(logicTableName, each.</span><span style="color:#6F42C1;">getActualTableName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getLogicAndActualTablesFromBindingTable</span><span style="color:#24292E;">(routingUnit.</span><span style="color:#6F42C1;">getMasterSlaveLogicDataSourceName</span><span style="color:#24292E;">(), each, tableNames)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码实际上也只是做了数据结构的拼装，我们沿着这里的 getLogicAndActualTablesFromBindingTable 方法继续往下看，会发现根据 logicTable 获取 actualTable 的过程实际上是发生在 BindingTableRule 中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getBindingActualTable</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String dataSource, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicTable, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String otherActualTable) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (TableRule each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tableRules) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> each.</span><span style="color:#B392F0;">findActualTableIndex</span><span style="color:#E1E4E8;">(dataSource, otherActualTable); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> index) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> index) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingConfigurationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Actual table [%s].[%s] is not in table config&quot;</span><span style="color:#E1E4E8;">, dataSource, otherActualTable); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (TableRule each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tableRules) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each.</span><span style="color:#B392F0;">getLogicTable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(logicTable.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">())) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> each.</span><span style="color:#B392F0;">getActualDataNodes</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(index).</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingConfigurationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot find binding actual table, data source: %s, logic table: %s, other actual table: %s&quot;</span><span style="color:#E1E4E8;">, dataSource, logicTable, otherActualTable); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getBindingActualTable</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String dataSource, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicTable, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String otherActualTable) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (TableRule each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tableRules) { </span></span>
<span class="line"><span style="color:#24292E;">            index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> each.</span><span style="color:#6F42C1;">findActualTableIndex</span><span style="color:#24292E;">(dataSource, otherActualTable); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> index) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> index) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingConfigurationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Actual table [%s].[%s] is not in table config&quot;</span><span style="color:#24292E;">, dataSource, otherActualTable); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (TableRule each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tableRules) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each.</span><span style="color:#6F42C1;">getLogicTable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(logicTable.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">())) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> each.</span><span style="color:#6F42C1;">getActualDataNodes</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(index).</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingConfigurationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot find binding actual table, data source: %s, logic table: %s, other actual table: %s&quot;</span><span style="color:#24292E;">, dataSource, logicTable, otherActualTable); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而 BindingTableRule 又依赖于 TableRule 中保存的 ActualDataNodes 来完成 ActualTableIndex和ActualTable 的计算。回想起我们在案例中配置的分库分表规则，这里再次感受到了以 TableRule 和 BindingTableRule为 代表的各种 Rule 对象在 ShardingSphere 的串联作用：</p>`,88),E=s(`<p>当 ShardingSQLBuilder 完成 SQL 的构建之后，我们再回到 ShardingSQLRewriteEngine，这个时候我们对它的 rewrite 方法就比较明确了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLRewriteResult </span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLRewriteContext sqlRewriteContext) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRewriteResult</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingSQLBuilder</span><span style="color:#E1E4E8;">(sqlRewriteContext, shardingRule, routingUnit).</span><span style="color:#B392F0;">toSQL</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">(sqlRewriteContext.</span><span style="color:#B392F0;">getParameterBuilder</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLRewriteResult </span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLRewriteContext sqlRewriteContext) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRewriteResult</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingSQLBuilder</span><span style="color:#24292E;">(sqlRewriteContext, shardingRule, routingUnit).</span><span style="color:#6F42C1;">toSQL</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">(sqlRewriteContext.</span><span style="color:#6F42C1;">getParameterBuilder</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>改写引擎的输出 SQLRewriteResult 对象就包含了最终的 SQL 以及配套的参数列表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRewriteResult</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; parameters; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRewriteResult</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; parameters; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>讲完 ShardingSQLRewriteEngine 之后，我们最后回到 BaseShardingEngine 的 rewriteAndConvert 方法。现在，该方法中除了 EncryptSQLRewriteContextDecorator 部分的内容涉及数据脱敏功能，其他的部分我们应该都能明白整体的执行流程。该方法最终返回的是一个 RouteUnit 列表，RouteUnit 中又包含了 SQLUnit：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RouteUnit</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//目标数据源名 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String dataSourceName; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//SQL 单元 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLUnit sqlUnit; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLUnit</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//目标 SQL </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//参数列表 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; parameters; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RouteUnit</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//目标数据源名 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String dataSourceName; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//SQL 单元 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLUnit sqlUnit; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLUnit</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//目标 SQL </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//参数列表 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; parameters; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到最终的结果实际上就是目标数据库、目标 SQL 以及相关参数，一旦我们获取了这些信息之后，我们就可以执行一条 SQL 语句。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>在今天的内容中，我们可以明显感受到<strong>装饰器模式</strong>的强大作用。装饰器模式允许向一个现有的对象添加新的功能，同时又不改变其结构，这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>同时，我们注意到在 ShardingSphere 中，装饰器模式的作用对象是一个 <strong>SQLRewriteContext</strong> 上下文对象，这是一种值得学习的做法。在日常开发过程中，我们可以把需要根据不同场景进行不同处理的信息存储在一个上下文对象中，然后基于装饰器模式对这些信息进行装饰。两者的无缝集成，可以在很多应用场景下，完成基于子类实现方式所不能完成的功能，从而为对象动态添加一些额外的职责。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>今天，我们花了一个课时的时间完整介绍了 ShardingSphere 中改写引擎的基本结构和各个核心类。<strong>改写引擎</strong> 在设计上使用了装饰器模式，完成了从逻辑 SQL 到目标 SQL 的改写过程，我们也针对<strong>自增主键</strong> 和<strong>表名改写</strong>这两个典型的应用场景，给出了对应的实现原理和源码分析。</p><p>请注意，改写引擎在 ShardingSphere 中不仅仅只用于这些场景，在后面的课程&quot;30 | 数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？&quot;中，我们还会看到它在数据脱敏等场景下的应用。</p><p>最后给你留一道思考题：ShardingSphere 中，如何通过装饰器模式对 SQL 改写的上下文进行装饰？欢迎你在留言区与大家讨论，我将逐一点评解答。</p><p>现在，我们已经针对输入的逻辑 SQL 通过改写引擎获取了目标 SQL，有了目标 SQL 接下来就可以执行 SQL 了，这就是下一课时中要开始介绍的 ShardingSphere 执行引擎要做的事情。</p>`,15);function y(i,d,g,u,F,S){const n=p("Image");return e(),o("div",null,[r,a(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/44/6D/CgqCHl8-KY-AfKIDAACvtfju_F4857.png"}),c,a(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/44/62/Ciqc1F8-KfuASC1zAAB-5yBwv_o382.png"}),E])}const h=l(t,[["render",y]]);export{A as __pageData,h as default};
