import{_ as s,o as a,g as n,Q as p}from"./chunks/framework.a0d18f64.js";const d=JSON.parse('{"title":"10命令行监控Linux服务器的要点","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/047_说透性能测试/(6161) 10  命令行监控 Linux 服务器的要点.md","filePath":"posts/devops/047_说透性能测试/(6161) 10  命令行监控 Linux 服务器的要点.md","lastUpdated":1696682708000}'),l={name:"posts/devops/047_说透性能测试/(6161) 10  命令行监控 Linux 服务器的要点.md"},o=p(`<h1 id="_10命令行监控linux服务器的要点" tabindex="-1">10命令行监控Linux服务器的要点 <a class="header-anchor" href="#_10命令行监控linux服务器的要点" aria-label="Permalink to &quot;10命令行监控Linux服务器的要点&quot;">​</a></h1><p>前面两个模块带你学习了如何使用 JMeter 工具，如何做好一份性能测试方案，第三模块我将带你进行监控的学习。在你执行性能测试的过程中，监控服务端的资源消耗等也是必备内容，监控的结果是帮助你发现问题的眼睛。然而在实操过程中发现很多同学喜欢用JMeter 工具提供的插件进行监控，但是我并<strong>不推荐</strong>你使用这种方式，原因如下：</p><ul><li><p>指标相对简单且固定，结果数据粗糙且界面显示并不是很友好；</p></li><li><p>较大地增加了客户端压测机的资源开销，影响性能测试结果；</p></li><li><p>特定环境下，在服务器上安装插件是不被允许的，会很不方便。</p></li></ul><p>所以这一讲我想带你了解下监控的内容有哪些？既然不推荐使用 JMeter 自带的监控方式，那我是如何做监控的呢？</p><p>本讲作为监控模块的第一篇，我想先聊一聊如何能够把监控这件事情做好，正所谓&quot;<strong>磨刀不误砍柴工</strong> &quot;，监控绝不是简单地敲几个命令，做几个图表就可以的，你需要从多角度来理解这件事情。首先我认为把监控做好需要有以下三个关键词：<strong>层次清晰、全面覆盖、定向深入</strong>。我来解释下这三个关键词代表的含义。</p><h3 id="层次清晰" tabindex="-1">层次清晰 <a class="header-anchor" href="#层次清晰" aria-label="Permalink to &quot;层次清晰&quot;">​</a></h3><p>从执行一次性能测试来看，你需要监控的内容有很多，重点是要能理清楚不同的监控类型，以及分别能够解决什么问题？我从下面几个层次做下介绍，从而让你对各层面的监控做一个初步了解，也为后面的章节做一些铺垫。</p><h4 id="_1-硬件层" tabindex="-1">1.硬件层 <a class="header-anchor" href="#_1-硬件层" aria-label="Permalink to &quot;1.硬件层&quot;">​</a></h4><p>硬件层是最容易想到的一个层面，一般包含了 CPU 的使用率、内存使用率、磁盘和网络读写速度等，通过这些指标能够反馈出系统运行的基本情况，以及不同的 TPS 量级会消耗多少硬件资源。</p><h4 id="_2-系统层" tabindex="-1">2.系统层 <a class="header-anchor" href="#_2-系统层" aria-label="Permalink to &quot;2.系统层&quot;">​</a></h4><p>系统层监控包括连接请求数、拒绝数、丢包率、请求超时等，相对于基础的硬件监控而言，这些指标更能够反映出目前系统存在的瓶颈，从而为根因问题的定位提供有力的线索。</p><h4 id="_3-链路层" tabindex="-1">3.链路层 <a class="header-anchor" href="#_3-链路层" aria-label="Permalink to &quot;3.链路层&quot;">​</a></h4><p>在我看来，链路层是直接面向架构和代码的，它的监控能够帮助你更加准确地看到代码执行了哪些函数，涉及哪些服务，并且能够较为清晰地看到函数之间的调用耗时，还可以帮助你定位代码存在的问题。</p><h4 id="_4-业务层" tabindex="-1">4.业务层 <a class="header-anchor" href="#_4-业务层" aria-label="Permalink to &quot;4.业务层&quot;">​</a></h4><p>业务层监控本意是帮助你判断用户输入是否合规，代码逻辑是否健壮。对于性能测试而言，业务层的监控可以帮助你发现脚本参数问题以及高并发下业务逻辑运行是否正常等，比如随着测试的进行，可能会存在商品库存不足的情况。如果有业务层面的监控，当库存低于某阈值时，可以进行一定的提示以规避此类问题。</p><h3 id="全面覆盖" tabindex="-1">全面覆盖 <a class="header-anchor" href="#全面覆盖" aria-label="Permalink to &quot;全面覆盖&quot;">​</a></h3><p>如果你能够完整地画出应用的部署架构图（参考第 09 讲的部署架构图），并且能够按照我说的几个层次将其完整地部署落地，我想监控这件事情至少可以给你打到 85 分，剩下来的 15 分在哪里呢？我认为除了应用层的监控，你还需要考虑<strong>底层链路的监控</strong>，比如防火墙、F5 负载均衡等，这些往往是一下子考虑不到的事情。</p><p>在我的实际工作中，尤其是新项目监控部署经常存在&quot;缺斤少两&quot;的情况。虽然在测试之前做了系统监控，但出现问题后仔细分析时，经常发现某一些机器并没有被监控到，或者监控了 CPU 又发现磁盘没有被监控上。这些问题主要是考验你的组织能力，也反映了团队是否能在性能测试上更细致更深入，毕竟性能的分析是不能放过任何&quot;蛛丝马迹&quot;的。</p><h3 id="定向深入" tabindex="-1">定向深入 <a class="header-anchor" href="#定向深入" aria-label="Permalink to &quot;定向深入&quot;">​</a></h3><p>首先通过基本的监控可以获得一些异常点，比如 CPU 高了、磁盘在等待，这些说白了是表象问题。就比如说某位同学今天发烧了，通过发烧这个现象并不能直接下定论说他感冒了，医生也需要做进一步的化验分析才可以下结论。对于监控也是这样，是否有定位根因问题的手段，CPU 高了，需不需要进行线程分析，需要哪些权限和定位工具，这些在监控部署时都需要考虑到。</p><p>下面我从监控硬件资源开始，通过使用 Linux 命令行对服务器进行监控，为什么我要讲解 Linux 命令的监控呢？我认为它具有灵活迅速的特点，通过命令可以最快地输出对应结果。接下来我会分别从 CPU、内存、磁盘、网络维度既快又能直击要害地帮你分析硬件瓶颈。</p><h3 id="cpu" tabindex="-1">CPU <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;CPU&quot;">​</a></h3><p>top 是我们查看各个进程的资源占用状况最常用的命令，如下代码所示，这个命令简单却包含很大的信息量，接下来我选一些常用的内容给你重点解释。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">top </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;"> up </span><span style="color:#79B8FF;">158</span><span style="color:#E1E4E8;"> days,  </span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> users,</span></span>
<span class="line"><span style="color:#E1E4E8;">load average</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.07</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.21</span></span>
<span class="line"><span style="color:#E1E4E8;">Tasks</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">154</span><span style="color:#E1E4E8;"> total,   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> running, </span><span style="color:#79B8FF;">152</span><span style="color:#E1E4E8;"> sleeping,   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> stopped,   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> zombie</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#B392F0;">Cpu</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">3.9</span><span style="color:#E1E4E8;"> us,  </span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;"> sy,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> ni, </span><span style="color:#79B8FF;">94.6</span><span style="color:#E1E4E8;"> id,  </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;"> wa,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> hi,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> si,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> st</span></span>
<span class="line"><span style="color:#E1E4E8;">KiB Mem </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">8010676</span><span style="color:#E1E4E8;"> total,   </span><span style="color:#79B8FF;">337308</span><span style="color:#E1E4E8;"> free,  </span><span style="color:#79B8FF;">6036100</span><span style="color:#E1E4E8;"> used,  </span><span style="color:#79B8FF;">1637268</span><span style="color:#E1E4E8;"> buff</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">KiB Swap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> total,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> free,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> used.  </span><span style="color:#FDAEB7;font-style:italic;">1223072</span><span style="color:#E1E4E8;"> avail Mem</span></span>
<span class="line"><span style="color:#E1E4E8;">以下省略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">top </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">47</span><span style="color:#24292E;"> up </span><span style="color:#005CC5;">158</span><span style="color:#24292E;"> days,  </span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> users,</span></span>
<span class="line"><span style="color:#24292E;">load average</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.07</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.21</span></span>
<span class="line"><span style="color:#24292E;">Tasks</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">154</span><span style="color:#24292E;"> total,   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> running, </span><span style="color:#005CC5;">152</span><span style="color:#24292E;"> sleeping,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> stopped,   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> zombie</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">Cpu</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">3.9</span><span style="color:#24292E;"> us,  </span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;"> sy,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> ni, </span><span style="color:#005CC5;">94.6</span><span style="color:#24292E;"> id,  </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;"> wa,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> hi,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> si,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> st</span></span>
<span class="line"><span style="color:#24292E;">KiB Mem </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">8010676</span><span style="color:#24292E;"> total,   </span><span style="color:#005CC5;">337308</span><span style="color:#24292E;"> free,  </span><span style="color:#005CC5;">6036100</span><span style="color:#24292E;"> used,  </span><span style="color:#005CC5;">1637268</span><span style="color:#24292E;"> buff</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">KiB Swap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> total,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> free,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> used.  </span><span style="color:#B31D28;font-style:italic;">1223072</span><span style="color:#24292E;"> avail Mem</span></span>
<span class="line"><span style="color:#24292E;">以下省略</span></span></code></pre></div><h4 id="_1-load-average" tabindex="-1">1. load average <a class="header-anchor" href="#_1-load-average" aria-label="Permalink to &quot;1. load average&quot;">​</a></h4><p>关于这一内容的代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">load average</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.07</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.21</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">load average</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.07</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.21</span></span></code></pre></div><p>三个数字都是代表进程队列的长度，从左到右分别表示一分钟、 五分钟和十五分钟的数据，数字越小压力值就越低，数字越大则压力越高，然而这个数值多小算小呢？多大算大呢？</p><p>以<strong>单核处理器</strong>为例，打个比方就像收费站的一个 ETC 通道一样：</p><ul><li><p>0 表示没有任何车辆需要通过；</p></li><li><p>从 0 到 1 可以认为很流畅，车辆不需要任何等待就可以通过；</p></li><li><p>1 表示正好在这个通道可接受范围之内；</p></li><li><p>超过 1 就已经有车辆在后面排队了。</p></li></ul><p>所以理想情况下，希望平均负载值在 1 以下。如果是 1 就代表目前没有可用资源了。在实际情况中，很多运维同学会把理想负载设置在 0.7 以下，这也是业内的一个&quot;<strong>经验值</strong>&quot;。</p><p>刚刚说的是一个单核处理器的情况，多核 CPU 的话，负载数值 / CPU 核数在 0.00~1.00 之间表示正常，理想值也是在 0.7 以内。</p><h4 id="_2-cpu-状态" tabindex="-1">2. CPU 状态 <a class="header-anchor" href="#_2-cpu-状态" aria-label="Permalink to &quot;2. CPU 状态&quot;">​</a></h4><p>从 top 中你也可以看到每种类型进程消耗的 CPU 时间百分比，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#B392F0;">Cpu</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">3.9</span><span style="color:#E1E4E8;"> us,  </span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;"> sy,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> ni, </span><span style="color:#79B8FF;">94.6</span><span style="color:#E1E4E8;"> id,  </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;"> wa,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> hi,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> si,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> st</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">Cpu</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">3.9</span><span style="color:#24292E;"> us,  </span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;"> sy,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> ni, </span><span style="color:#005CC5;">94.6</span><span style="color:#24292E;"> id,  </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;"> wa,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> hi,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> si,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> st</span></span></code></pre></div><p>首先来看代码中的一些重要信息。</p><ul><li><p>us 列显示了用户进程所花费 CPU 时间的百分比。这个数值越高，说明用户进程消耗的 CPU 时间越多，可以用来分析代码中的 CPU 消耗热点。</p></li><li><p>sy 列表示系统进程消耗的 CPU 时间百分比。</p></li><li><p>ni 列表示改变优先级的进程占用 CPU 的百分比。</p></li><li><p>id 列表示 CPU 处于空闲状态的时间百分比。</p></li><li><p>wa 列显示了 I/O 等待所占用的 CPU 时间的百分比，这里 wa 的参考值为 0.5，如果长期高于这个参考值，需要注意是否存在磁盘瓶颈。</p></li><li><p>hi 列表示硬件中断占用 CPU 时间百分比。</p></li><li><p>si 列表示软件中断占用 CPU 时间百分比。</p></li><li><p>st 列表示当系统运行在虚拟机中时，当前虚拟机在等待 CPU 为它服务的时间。</p></li></ul><p>在已经输入 top 的情况下再输入数字 1，可以查看 CPU 的核数和每个核的运行状态。</p><p>如下图是两核 CPU 的运行状态。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">Cpu0  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;"> us,  </span><span style="color:#79B8FF;">1.7</span><span style="color:#E1E4E8;"> sy,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> ni, </span><span style="color:#79B8FF;">95.3</span><span style="color:#E1E4E8;"> id,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> wa,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> hi,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> si,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> st</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">Cpu1  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2.4</span><span style="color:#E1E4E8;"> us,  </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> sy,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> ni, </span><span style="color:#79B8FF;">96.6</span><span style="color:#E1E4E8;"> id,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> wa,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> hi,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> si,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> st</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">Cpu0  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;"> us,  </span><span style="color:#005CC5;">1.7</span><span style="color:#24292E;"> sy,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> ni, </span><span style="color:#005CC5;">95.3</span><span style="color:#24292E;"> id,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> wa,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> hi,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> si,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> st</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">Cpu1  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2.4</span><span style="color:#24292E;"> us,  </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> sy,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> ni, </span><span style="color:#005CC5;">96.6</span><span style="color:#24292E;"> id,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> wa,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> hi,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> si,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> st</span></span></code></pre></div><p>值得注意的是，很多同学看 CPU 的使用率时，只看 us 这个数值，通过上面的讲解，可以看出这是不准确的。除了用户进程，还有其他系统进程会占用 CPU，所以实际 CPU 的使用率可以用 100 减去空闲值（id）去计算。</p><h3 id="如何统计内存使用情况" tabindex="-1">如何统计内存使用情况 <a class="header-anchor" href="#如何统计内存使用情况" aria-label="Permalink to &quot;如何统计内存使用情况&quot;">​</a></h3><p>最常见的是通过 free 来查看 Linux 内存使用情况。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# free </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m</span></span>
<span class="line"><span style="color:#E1E4E8;">              total        used        free      shared  buff</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cache   available</span></span>
<span class="line"><span style="color:#E1E4E8;">Mem</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">7822</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">5917</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">302</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">373</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">1602</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">1195</span></span>
<span class="line"><span style="color:#E1E4E8;">Swap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# free </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m</span></span>
<span class="line"><span style="color:#24292E;">              total        used        free      shared  buff</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cache   available</span></span>
<span class="line"><span style="color:#24292E;">Mem</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">           </span><span style="color:#005CC5;">7822</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">5917</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">302</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">373</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">1602</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">1195</span></span>
<span class="line"><span style="color:#24292E;">Swap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">           </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">           </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>相信通过单词的意思我们也能大概看出来 total、used、free 表示什么，它们分别是<strong>总的</strong> 物理内存大小、<strong>已经被使用的</strong> 物理内存和<strong>空闲的</strong>物理内存值是多少。</p><p>曾经有同学问我，为什么 free 值很低却未必代表内存达到瓶颈呢？</p><p>这和 Linux 内核机制有关系，简单来说，内存空间会开辟 buffer 和 cache 缓冲区，对于物理内存来说，这都属于被使用过的内存。而应用需要内存时，如果没有可用的 free 内存，内核就会从缓冲区回收内存以满足要求，当 free 值很低的时候，如上代码中的 available 就能体现出缓冲区可用内存的大小，这个指标可以比较真实地反映出内存是否达到使用上限。</p><h3 id="磁盘查看" tabindex="-1">磁盘查看 <a class="header-anchor" href="#磁盘查看" aria-label="Permalink to &quot;磁盘查看&quot;">​</a></h3><p>这一部分我们来讲两个重要的命令。</p><h4 id="_1-iostat" tabindex="-1">1.iostat <a class="header-anchor" href="#_1-iostat" aria-label="Permalink to &quot;1.iostat&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> [root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# iostat </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">x</span></span>
<span class="line"><span style="color:#E1E4E8;">Linux </span><span style="color:#79B8FF;">3.10</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">514.el7.</span><span style="color:#B392F0;">x86_64</span><span style="color:#E1E4E8;"> (JD)        </span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2021</span><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">_x86_64_</span><span style="color:#E1E4E8;">        (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> CPU)</span></span>
<span class="line"><span style="color:#E1E4E8;">avg</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cpu</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">user   </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">nice </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">system </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">iowait  </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">steal   </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">idle</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">5.24</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">1.57</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">0.07</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">93.12</span></span>
<span class="line"><span style="color:#E1E4E8;">Device</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">         rrqm</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s   wrqm</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s     r</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s     w</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s    rkB</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s    wkB</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s avgrq</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sz avgqu</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sz   await r_await w_await  svctm  </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">util</span></span>
<span class="line"><span style="color:#E1E4E8;">vda               </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">0.29</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">0.57</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">5.30</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">20.50</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">630.14</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">221.82</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">0.07</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">11.53</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">59.83</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">6.36</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1.18</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0.69</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> [root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# iostat </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">x</span></span>
<span class="line"><span style="color:#24292E;">Linux </span><span style="color:#005CC5;">3.10</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">514.el7.</span><span style="color:#6F42C1;">x86_64</span><span style="color:#24292E;"> (JD)        </span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2021</span><span style="color:#24292E;">      </span><span style="color:#6F42C1;">_x86_64_</span><span style="color:#24292E;">        (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> CPU)</span></span>
<span class="line"><span style="color:#24292E;">avg</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cpu</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">user   </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">nice </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">system </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">iowait  </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">steal   </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">idle</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#005CC5;">5.24</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">1.57</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">0.07</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">93.12</span></span>
<span class="line"><span style="color:#24292E;">Device</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">         rrqm</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s   wrqm</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s     r</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s     w</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s    rkB</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s    wkB</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s avgrq</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sz avgqu</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sz   await r_await w_await  svctm  </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">util</span></span>
<span class="line"><span style="color:#24292E;">vda               </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">0.29</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">0.57</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">5.30</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">20.50</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">630.14</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">221.82</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">0.07</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">11.53</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">59.83</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">6.36</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1.18</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0.69</span></span></code></pre></div><p>通过这个命令你能看到磁盘实时运行的情况，一般可以优先看 idle、util 和 svctm 这几列的数值：</p><ul><li><p>idle 代表磁盘空闲百分比；</p></li><li><p>util 接近 100%，表示磁盘产生的 I/O 请求太多，I/O 系统已经满负荷在工作，该磁盘可能存在瓶颈；</p></li><li><p>svctm 代表平均每次设备 I/O 操作的服务时间 (毫秒)。</p></li></ul><p>在我的经验中，会组合看这些指标，如果 idle 长期在 50% 以下，util 值在 50% 以上以及 svctm 高于 10ms，说明磁盘可能存在一定的问题。接着我会定位到具体是哪个进程造成的磁盘瓶颈，下面我就为你介绍一个关于定位的命令。</p><h4 id="_2-iotop" tabindex="-1">2.iotop <a class="header-anchor" href="#_2-iotop" aria-label="Permalink to &quot;2.iotop&quot;">​</a></h4><p>iotop 这个命令并不是 linux 原生的，需要安装，以 CentOS 7.0 为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# yum </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">y install iotop</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# yum </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">y install iotop</span></span></code></pre></div><p>安装完成之后，直接输入 iotop，示意如下，你就能清楚地看到哪些进程在消耗磁盘资源。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">6448</span><span style="color:#E1E4E8;"> be</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> root        </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;"> B</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s    </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;"> B</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s  </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> ifrit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent</span></span>
<span class="line"><span style="color:#79B8FF;">14647</span><span style="color:#E1E4E8;"> be</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> root        </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;"> B</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s    </span><span style="color:#79B8FF;">7.70</span><span style="color:#E1E4E8;"> K</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">s  </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> java </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dserver.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9080</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">6448</span><span style="color:#24292E;"> be</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> root        </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;"> B</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s    </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;"> B</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s  </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> ifrit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent</span></span>
<span class="line"><span style="color:#005CC5;">14647</span><span style="color:#24292E;"> be</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> root        </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;"> B</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s    </span><span style="color:#005CC5;">7.70</span><span style="color:#24292E;"> K</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">s  </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> java </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dserver.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9080</span></span></code></pre></div><h3 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h3><h4 id="netstat" tabindex="-1">netstat <a class="header-anchor" href="#netstat" aria-label="Permalink to &quot;netstat&quot;">​</a></h4><p>netstat 能提供 TCP 和 UDP 的连接状态等统计信息，可以简单判断网络是否存在堵塞。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# netstat</span></span>
<span class="line"><span style="color:#E1E4E8;">Active Internet </span><span style="color:#B392F0;">connections</span><span style="color:#E1E4E8;"> (w</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">o servers)</span></span>
<span class="line"><span style="color:#E1E4E8;">Proto Recv</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Q Send</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Q Local Address           Foreign Address         State</span></span>
<span class="line"><span style="color:#E1E4E8;">tcp        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> JD</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">49190</span><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">169.254</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">169</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">250</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">http    FIN_WAIT1</span></span>
<span class="line"><span style="color:#E1E4E8;">tcp        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> JD</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">39444</span><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">169.254</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">169</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">254</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">http    TIME_WAIT</span></span>
<span class="line"><span style="color:#E1E4E8;">tcp        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> JD</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">us</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">srv               worker</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">18.</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">sentinel</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ent ESTABLISHED</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# netstat</span></span>
<span class="line"><span style="color:#24292E;">Active Internet </span><span style="color:#6F42C1;">connections</span><span style="color:#24292E;"> (w</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">o servers)</span></span>
<span class="line"><span style="color:#24292E;">Proto Recv</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Q Send</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Q Local Address           Foreign Address         State</span></span>
<span class="line"><span style="color:#24292E;">tcp        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> JD</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49190</span><span style="color:#24292E;">                </span><span style="color:#005CC5;">169.254</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">169</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">250</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">http    FIN_WAIT1</span></span>
<span class="line"><span style="color:#24292E;">tcp        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> JD</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">39444</span><span style="color:#24292E;">                </span><span style="color:#005CC5;">169.254</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">169</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">254</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">http    TIME_WAIT</span></span>
<span class="line"><span style="color:#24292E;">tcp        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> JD</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">us</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">srv               worker</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">18.</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">sentinel</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ent ESTABLISHED</span></span></code></pre></div><p>**Proto：**协议名（可以 TCP 协议或者 UDP 协议）。</p><p><strong>recv-Q</strong>：网络接收队列还有多少请求在排队。</p><p><strong>send-Q</strong>：网络发送队列有多少请求在排队。</p><p><strong>recv-Q</strong> 和 <strong>send-Q</strong> 如果长期不为 0，很可能存在网络拥堵，这个是判断网络瓶颈的重要依据。</p><p><strong>Foreign Address</strong>：与本机端口通信的外部 socket。</p><p><strong>State</strong>：TCP 的连接状态。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过本讲的学习，你已经知道了如何通过命令行监控 Linux 资源，包括 CPU、磁盘、内存、网络，也知道了判断硬件瓶颈的一些策略。</p><p>这里抛出一个思考题，在工作过程中如果发现硬件资源异常，你会怎么做呢？欢迎在评论区给出你的思考或者实践。</p><p>下一讲将带你学习如何进行链路监控以及常见的报警机制。</p>`,73),e=[o];function t(r,c,y,E,i,F){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{d as __pageData,h as default};
