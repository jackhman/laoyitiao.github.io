import{_ as o,j as e,o as t,g as r,k as p,h as n,s,Q as l}from"./chunks/framework.4e7d56ce.js";const T=JSON.parse('{"title":"第12讲：如何基于JUnit5的服务实现单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1816) 第12讲：如何基于 JUnit 5 的服务实现单元测试.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1816) 第12讲：如何基于 JUnit 5 的服务实现单元测试.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1816) 第12讲：如何基于 JUnit 5 的服务实现单元测试.md"},E=s("h1",{id:"第12讲-如何基于junit5的服务实现单元测试",tabindex:"-1"},[n("第12讲：如何基于JUnit5的服务实现单元测试 "),s("a",{class:"header-anchor",href:"#第12讲-如何基于junit5的服务实现单元测试","aria-label":'Permalink to "第12讲：如何基于JUnit5的服务实现单元测试"'},"​")],-1),y=s("p",null,'本课时将介绍"如何使用 JUnit 5 实现服务的单元测试"。',-1),i=s("p",null,'第 11 课时对"数据库驱动的微服务实现"做了简要的介绍，本课时将介绍如何使用 JUnit 5 进行单元测试。你可能会好奇，实现相关的内容比较多却用一个课时来讲解，而内容相对较少的单元测试部分也同样用一个课时？',-1),d=s("p",null,"这是因为市面上与实现相关的参考资料已经非常多了，而单元测试的介绍则相对较少，甚至被忽略了。单元测试的重要性怎么强调都不过分。没有覆盖率足够高的自动化单元测试，就无法安全的更新代码和进行重构。单元测试是开发人员所依赖的安全网。基于这些原因，本课时将对单元测试进行具体的介绍。",-1),F=s("h4",{id:"junit-5-介绍",tabindex:"-1"},[n("JUnit 5 介绍 "),s("a",{class:"header-anchor",href:"#junit-5-介绍","aria-label":'Permalink to "JUnit 5 介绍"'},"​")],-1),u=s("p",null,"JUnit 是 Java 单元测试领域中的事实标准，最新版本是 JUnit 5，该版本由 JUnit Platform、JUnit Jupiter 和 JUnit Vintage 组成，这 3 个组件的说明如下表所示：",-1),g=s("p",null,"JUnit Jupiter 的编程模型相比于 JUnit 4 有了很大的改进，推荐在新的项目中使用。下面是一些重要的注解：",-1),C=l(`<p>下面代码中的 JUnit5Sample 类展示了 @ParameterizedTest、@RepeatedTest 和 @TestFactory 的用法。stringLength方法用来验证字符串的长度，@ValueSource 注解用来提供参数化的测试方法的实际参数。repeatedTest 方法会被重复执行 3 次。dynamicTests 方法返回了一个 DynamicTest 数组作为动态创建的测试。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JUnit 5 sample&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JUnit5Sample</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">ParameterizedTest</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">ValueSource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strings</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;String length&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stringLength</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(value).</span><span style="color:#B392F0;">hasSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">RepeatedTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">repeatedTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">dynamicTests</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">[]{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Dynamic test 1&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">isGreaterThan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Dynamic test 2&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">hasSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JUnit 5 sample&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JUnit5Sample</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">ParameterizedTest</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">ValueSource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strings</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;String length&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stringLength</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(value).</span><span style="color:#6F42C1;">hasSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">RepeatedTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">repeatedTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">dynamicTests</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">[]{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Dynamic test 1&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">isGreaterThan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Dynamic test 2&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">hasSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面给出了 JUnit5Sample 测试的运行结果。</p>`,3),A=l(`<p>Spring Boot 已经提供了对 JUnit 5 的集成，在项目中可以直接使用。关于 JUnit 5 的更多内容，请参考其他相关资料。</p><h4 id="领域对象测试" tabindex="-1">领域对象测试 <a class="header-anchor" href="#领域对象测试" aria-label="Permalink to &quot;领域对象测试&quot;">​</a></h4><p>领域对象类中包含了相关的业务逻辑，我们需要添加相应的单元测试，由于领域对象类通常没有其他依赖，这使得测试起来很方便。</p><p>下面代码中的 PassengerTest 是领域对象类 Passenger 的单元测试用例。PassengerTest 中的测试方法都很直接，只需要创建 Passenger 对象，调用其中的方法，再进行验证即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Passenger test&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassengerTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Faker faker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Faker</span><span style="color:#E1E4E8;">(Locale.CHINA);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Add user address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAddUserAddress</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Passenger passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPassenger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger.</span><span style="color:#B392F0;">addUserAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createUserAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">hasSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Remove user address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testRemoveUserAddress</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Passenger passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPassenger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String addressId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger.</span><span style="color:#B392F0;">removeUserAddress</span><span style="color:#E1E4E8;">(addressId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">hasSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Get user address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testGetUserAddress</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Passenger passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPassenger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String addressId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getUserAddress</span><span style="color:#E1E4E8;">(addressId)).</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getUserAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;invalid&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Passenger </span><span style="color:#B392F0;">createPassenger</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">numberOfAddresses</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Passenger passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Passenger</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger.</span><span style="color:#B392F0;">generateId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(faker.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">fullName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger.</span><span style="color:#B392F0;">setEmail</span><span style="color:#E1E4E8;">(faker.</span><span style="color:#B392F0;">internet</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">emailAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger.</span><span style="color:#B392F0;">setMobilePhoneNumber</span><span style="color:#E1E4E8;">(faker.</span><span style="color:#B392F0;">phoneNumber</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">phoneNumber</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, numberOfAddresses);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; addresses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(count);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> count; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      addresses.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createUserAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger.</span><span style="color:#B392F0;">setUserAddresses</span><span style="color:#E1E4E8;">(addresses);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> passenger;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserAddress </span><span style="color:#B392F0;">createUserAddress</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserAddress userAddress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddress</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    userAddress.</span><span style="color:#B392F0;">generateId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    userAddress.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(faker.</span><span style="color:#B392F0;">pokemon</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    userAddress.</span><span style="color:#B392F0;">setAddressId</span><span style="color:#E1E4E8;">(UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    userAddress.</span><span style="color:#B392F0;">setAddressName</span><span style="color:#E1E4E8;">(faker.</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">fullAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userAddress;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Passenger test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassengerTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Faker faker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Faker</span><span style="color:#24292E;">(Locale.CHINA);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Add user address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAddUserAddress</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Passenger passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPassenger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    passenger.</span><span style="color:#6F42C1;">addUserAddress</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createUserAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">hasSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Remove user address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testRemoveUserAddress</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Passenger passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPassenger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String addressId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    passenger.</span><span style="color:#6F42C1;">removeUserAddress</span><span style="color:#24292E;">(addressId);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">hasSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Get user address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetUserAddress</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Passenger passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPassenger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String addressId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getUserAddress</span><span style="color:#24292E;">(addressId)).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getUserAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;invalid&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Passenger </span><span style="color:#6F42C1;">createPassenger</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">numberOfAddresses</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Passenger passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Passenger</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    passenger.</span><span style="color:#6F42C1;">generateId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    passenger.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(faker.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">fullName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    passenger.</span><span style="color:#6F42C1;">setEmail</span><span style="color:#24292E;">(faker.</span><span style="color:#6F42C1;">internet</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">emailAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    passenger.</span><span style="color:#6F42C1;">setMobilePhoneNumber</span><span style="color:#24292E;">(faker.</span><span style="color:#6F42C1;">phoneNumber</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">phoneNumber</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, numberOfAddresses);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; addresses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(count);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> count; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      addresses.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createUserAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    passenger.</span><span style="color:#6F42C1;">setUserAddresses</span><span style="color:#24292E;">(addresses);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> passenger;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserAddress </span><span style="color:#6F42C1;">createUserAddress</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    UserAddress userAddress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    userAddress.</span><span style="color:#6F42C1;">generateId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    userAddress.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(faker.</span><span style="color:#6F42C1;">pokemon</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    userAddress.</span><span style="color:#6F42C1;">setAddressId</span><span style="color:#24292E;">(UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    userAddress.</span><span style="color:#6F42C1;">setAddressName</span><span style="color:#24292E;">(faker.</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">fullAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userAddress;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="数据库测试" tabindex="-1">数据库测试 <a class="header-anchor" href="#数据库测试" aria-label="Permalink to &quot;数据库测试&quot;">​</a></h4><p>对于数据库驱动的微服务来说，数据库相关的测试是重点，一种常见的做法是在测试时使用专门的数据库来实现，比如 H2 和 HSQLDB，这两个数据库都是纯 Java 语言实现的，支持内存数据库或使用文件存储。从测试的角度来说，这两个数据库可以通过嵌入式的方式在当前 Java 进程中启动，这就降低了测试数据库服务器的管理复杂度。测试中使用的数据本来就是临时性的，只是在测试运行时有用，内存数据库的使用，则进一步省去了管理测试数据库的工作。</p><p>Spring Boot 提供了对嵌入式数据库的支持，我们只需要添加 H2 或 HSQLDB 的运行时依赖，Spring Boot 则会在测试时自动配置相应的数据源。</p><p>这种做法有一个很大的问题，那就是在运行单元测试时使用的数据库和生产环境的数据库是不一致的。H2 和 HSQLDB 这样的数据库并不适用于生产环境，生产环境中需要使用 PostgreSQL、MySQL 和 SQL Server 这样的数据库。虽然都是使用 JDBC 来访问数据库，我们并不能因此就忽略这些数据库实现之间的区别。这就意味着，通过单元测试的代码，在运行时有可能会由于数据库实现的差异而产生问题。如果发生了这样的情况，则会降低开发人员对单元测试的信任度。</p><p>在第 11 课时，我提到了推荐使用数据库迁移工具和手动管理数据库的表模式。如果在单元测试和生产环境中使用不同的数据库实现，则需要维护两套不同的 SQL 脚本，这无疑增加了维护成本。更好的做法是在运行单元测试时，使用与生产环境一样的数据库实现，这看起来很复杂，所幸的是，Docker 可以帮助我们简化很多工作。另外一个附加的好处是，单元测试时 Docker 的使用也与生产环境中的 Kubernetes 中 Docker 的使用保持一致。</p><p>在单元测试中使用 Docker 时，我们需要用到 <a href="https://www.testcontainers.org/" target="_blank" rel="noreferrer">Testcontainers</a> 这个第三方库，以及它提供的 Spring Boot 集成。在进行单元测试时，会启动一个 PostgreSQL 的 Docker 容器，并创建一个数据源来指向这个容器中的 PostgreSQL 服务器，其中的具体工作由 Testcontainers 来完成，我们只需要进行配置即可。</p><p>下面的代码是乘客管理服务中 PassengerService 的单元测试用例，其中比较重要的是几个注解的使用。</p><p>@DataJpaTest 注解由 Spring Boot 提供，其作用是限制 Spring 在扫描 bean 时的范围，只会选择与 Spring Data JPA 相关的 bean。</p><p>@AutoConfigureTestDatabase(replace = Replace.NONE) 的作用是禁止 Spring Boot 用嵌入式数据库替换掉当前的数据源。默认情况下，在运行单元测试时，Spring Boot 会配置一个使用嵌入式数据库的数据源，并替换掉应用中声明的数据源。由于我们使用的是 Docker 容器中的数据库，那么需要禁用这个默认行为。Replace.NONE 的作用是要求 Spring Boot 不进行替换，而是继续使用代码中声明的数据源。</p><p>@ContextConfiguration 注解声明了使用的配置类 EmbeddedPostgresConfiguration。</p><p>@ImportAutoConfiguration 注解导入了由 Testcontainers 提供的 Spring Boot 自动配置类，用来启动 Docker 容器并提供与数据库连接相关的配置属性。</p><p>@TestPropertySource 注解添加了额外的配置属性 embedded.postgresql.docker-image 来设置使用的 PostgreSQL 镜像。</p><p>在 PassengerServiceTest 类中，通过 @Autowired 注解注入了 PassengerService 类的实例。PassengerServiceTest 类中的测试用例，可使用 PassengerService 类的方法来完成不同的操作，并验证结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureTestDatabase</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">replace</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Replace.NONE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ComponentScan</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ContextConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">classes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    EmbeddedPostgresConfiguration.class</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ImportAutoConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">classes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    EmbeddedPostgreSQLDependenciesAutoConfiguration.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">    EmbeddedPostgreSQLBootstrapConfiguration.class</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestPropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">properties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;embedded.postgresql.docker-image=postgres:12-alpine&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Passenger service test&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassengerServiceTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  PassengerService passengerService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Create a new passenger&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCreatePassenger</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    CreatePassengerRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PassengerUtils.</span><span style="color:#B392F0;">buildCreatePassengerRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    PassengerVO passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passengerService.</span><span style="color:#B392F0;">createPassenger</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isNotNull</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">hasSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Add a user address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAddAddress</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    CreatePassengerRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PassengerUtils.</span><span style="color:#B392F0;">buildCreatePassengerRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    PassengerVO passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passengerService.</span><span style="color:#B392F0;">createPassenger</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passengerService</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">addAddress</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), PassengerUtils.</span><span style="color:#B392F0;">buildCreateUserAddressRequest</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">hasSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Delete a user address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testDeleteAddress</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    CreatePassengerRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PassengerUtils.</span><span style="color:#B392F0;">buildCreatePassengerRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    PassengerVO passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passengerService.</span><span style="color:#B392F0;">createPassenger</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String addressId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    passenger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passengerService.</span><span style="color:#B392F0;">deleteAddress</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), addressId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">hasSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureTestDatabase</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">replace</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Replace.NONE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ContextConfiguration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">classes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    EmbeddedPostgresConfiguration.class</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ImportAutoConfiguration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">classes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    EmbeddedPostgreSQLDependenciesAutoConfiguration.class,</span></span>
<span class="line"><span style="color:#24292E;">    EmbeddedPostgreSQLBootstrapConfiguration.class</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestPropertySource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">properties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;embedded.postgresql.docker-image=postgres:12-alpine&quot;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Passenger service test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassengerServiceTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  PassengerService passengerService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Create a new passenger&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCreatePassenger</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    CreatePassengerRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PassengerUtils.</span><span style="color:#6F42C1;">buildCreatePassengerRequest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    PassengerVO passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passengerService.</span><span style="color:#6F42C1;">createPassenger</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isNotNull</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">hasSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Add a user address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAddAddress</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    CreatePassengerRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PassengerUtils.</span><span style="color:#6F42C1;">buildCreatePassengerRequest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    PassengerVO passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passengerService.</span><span style="color:#6F42C1;">createPassenger</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passengerService</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">addAddress</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), PassengerUtils.</span><span style="color:#6F42C1;">buildCreateUserAddressRequest</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">hasSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Delete a user address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testDeleteAddress</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    CreatePassengerRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PassengerUtils.</span><span style="color:#6F42C1;">buildCreatePassengerRequest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    PassengerVO passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passengerService.</span><span style="color:#6F42C1;">createPassenger</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    String addressId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    passenger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passengerService.</span><span style="color:#6F42C1;">deleteAddress</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), addressId);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">hasSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面代码中的 EmbeddedPostgresConfiguration 类用来配置运行单元测试时的数据源。以 embedded.postgresql 开头的属性值由 Testcontainers 生成，包含运行的 PostgreSQL 容器的连接信息。通过这些属性，我创建了一个 HikariDataSource 数据源，在运行单元测试时使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EmbeddedPostgresConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  ConfigurableEnvironment environment;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">destroyMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">testDataSource</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String jdbcUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jdbc:postgresql://\${embedded.postgresql.host}:\${embedded.postgresql.port}/\${embedded.postgresql.schema}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    HikariConfig hikariConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HikariConfig</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    hikariConfig.</span><span style="color:#B392F0;">setDriverClassName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.postgresql.Driver&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    hikariConfig.</span><span style="color:#B392F0;">setJdbcUrl</span><span style="color:#E1E4E8;">(environment.</span><span style="color:#B392F0;">resolvePlaceholders</span><span style="color:#E1E4E8;">(jdbcUrl));</span></span>
<span class="line"><span style="color:#E1E4E8;">    hikariConfig.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(environment.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;embedded.postgresql.user&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    hikariConfig.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(environment.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;embedded.postgresql.password&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HikariDataSource</span><span style="color:#E1E4E8;">(hikariConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EmbeddedPostgresConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  ConfigurableEnvironment environment;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">destroyMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">testDataSource</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    String jdbcUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jdbc:postgresql://\${embedded.postgresql.host}:\${embedded.postgresql.port}/\${embedded.postgresql.schema}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    HikariConfig hikariConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HikariConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    hikariConfig.</span><span style="color:#6F42C1;">setDriverClassName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.postgresql.Driver&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    hikariConfig.</span><span style="color:#6F42C1;">setJdbcUrl</span><span style="color:#24292E;">(environment.</span><span style="color:#6F42C1;">resolvePlaceholders</span><span style="color:#24292E;">(jdbcUrl));</span></span>
<span class="line"><span style="color:#24292E;">    hikariConfig.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(environment.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;embedded.postgresql.user&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    hikariConfig.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(environment.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;embedded.postgresql.password&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HikariDataSource</span><span style="color:#24292E;">(hikariConfig);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="使用-mock-对象" tabindex="-1">使用 mock 对象 <a class="header-anchor" href="#使用-mock-对象" aria-label="Permalink to &quot;使用 mock 对象&quot;">​</a></h4><p>一个对象通常有很多依赖的对象，这些被依赖的对象又有各自的依赖对象。在对当前对象进行单元测试时，我们希望仅测试当前对象的行为，比如，对象 A 依赖对象 B、C，而对象 B、C 则分别依赖对象 D、E，如下图所示。在编写对象 A 的单元测试用例时，我们希望可以模拟对象 B、C 的行为，从而测试对象 A 在不同情况下的行为，这就需要用到 mock 对象。</p>`,23),B=l(`<p>mock 对象可以模拟一个对象的行为。举例来说，对象 A 的方法 methodA 调用了对象 B 中的方法 methodB，并根据 methodB 的返回值进行不同的操作。在编写对象 A 的 methodA 方法的测试用例时，则需要覆盖不同的代码路径。对象 B 的 mock 可以很好的解决这个问题。在创建了对象 B 的 mock 之后，就可以直接指定 methodB 的返回值了，从而验证 methodA 在不同情况下的行为。</p><p>行程派发服务的 TripServiceTest 类用到了 mock 对象。不过 TripServiceTest 类的逻辑比较复杂，因此我选择另外一个更简单的例子来说明 mock 对象的用法，你也可以直接参考示例应用中的 TripServiceTest 类。</p><p>下面代码中的 ActionService 类依赖 ValueUpdater 和 EventPublisher 两个对象，其中 ValueUpdater 的 updateValue 方法用来更新值。如果 updateValue 方法的返回值是 true，则 EventPublisher 的 publishEvent 方法会被调用来发布一个 ValueUpdatedEvent 事件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActionService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  ValueUpdater valueUpdater;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  EventPublisher eventPublisher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">performAction</span><span style="color:#E1E4E8;">(Integer </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer oldValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> valueUpdater.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valueUpdater.</span><span style="color:#B392F0;">updateValue</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ValueUpdatedEvent event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ValueUpdatedEvent</span><span style="color:#E1E4E8;">(oldValue, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">      eventPublisher.</span><span style="color:#B392F0;">publishEvent</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActionService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  ValueUpdater valueUpdater;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  EventPublisher eventPublisher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">performAction</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Integer oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> valueUpdater.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (valueUpdater.</span><span style="color:#6F42C1;">updateValue</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">      ValueUpdatedEvent event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ValueUpdatedEvent</span><span style="color:#24292E;">(oldValue, value);</span></span>
<span class="line"><span style="color:#24292E;">      eventPublisher.</span><span style="color:#6F42C1;">publishEvent</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在对 ActionService 类进行单元测试时，我们需要创建 ValueUpdater 和 EventPublisher 的 mock 对象。在下面的代码中，我使用 @MockBean 注解把 ValueUpdater 和 EventPublisher 都声明为 mock 对象。使用 @Captor 注解声明的 eventCaptor 对象用来捕获 EventPublisher 的 publishEvent 方法被调用时的实际参数值。</p><p>在 testValueUpdated 方法中，given(valueUpdater.updateValue(value)).willReturn(true) 的作用是指定 ValueUpdater 的 mock 对象的 updateValue 方法在参数为 value 时，其返回值是 true；接着验证 EventPublisher 的 publishEvent 方法被调用一次，并捕获实际的参数值；最后验证 eventCaptor 中捕获的 ValueUpdatedEvent 参数值的内容。</p><p>在 testValueNotUpdated 方法中，ValueUpdater 的 mock 对象的 updateValue 方法其返回值被指定为 false，然后验证 EventPublisher 的 publishEvent 方法没有被调用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@SpringBootTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">ContextConfiguration</span><span style="color:#E1E4E8;">(classes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TestConfiguration.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Action service test&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActionServiceTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  ActionService </span><span style="color:#FFAB70;">actionService</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @MockBean</span></span>
<span class="line"><span style="color:#E1E4E8;">  ValueUpdater </span><span style="color:#FFAB70;">valueUpdater</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @MockBean</span></span>
<span class="line"><span style="color:#E1E4E8;">  EventPublisher </span><span style="color:#FFAB70;">eventPublisher</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @Captor</span></span>
<span class="line"><span style="color:#E1E4E8;">  ArgumentCaptor</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ValueUpdatedEvent</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">eventCaptor</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Value updated&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testValueUpdated</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    int value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">(valueUpdater.</span><span style="color:#B392F0;">updateValue</span><span style="color:#E1E4E8;">(value)).</span><span style="color:#B392F0;">willReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(actionService.</span><span style="color:#B392F0;">performAction</span><span style="color:#E1E4E8;">(value)).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(eventPublisher, </span><span style="color:#B392F0;">times</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">publishEvent</span><span style="color:#E1E4E8;">(eventCaptor.</span><span style="color:#B392F0;">capture</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(eventCaptor.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">extracting</span><span style="color:#E1E4E8;">(ValueUpdatedEvent::getCurrentValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @Test</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Value not updated&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testValueNotUpdated</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    int value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">(valueUpdater.</span><span style="color:#B392F0;">updateValue</span><span style="color:#E1E4E8;">(value)).</span><span style="color:#B392F0;">willReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(actionService.</span><span style="color:#B392F0;">performAction</span><span style="color:#E1E4E8;">(value)).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(eventPublisher, </span><span style="color:#B392F0;">never</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">publishEvent</span><span style="color:#E1E4E8;">(eventCaptor.</span><span style="color:#B392F0;">capture</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@SpringBootTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">ContextConfiguration</span><span style="color:#24292E;">(classes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TestConfiguration.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Action service test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActionServiceTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @Autowired</span></span>
<span class="line"><span style="color:#24292E;">  ActionService </span><span style="color:#E36209;">actionService</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @MockBean</span></span>
<span class="line"><span style="color:#24292E;">  ValueUpdater </span><span style="color:#E36209;">valueUpdater</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @MockBean</span></span>
<span class="line"><span style="color:#24292E;">  EventPublisher </span><span style="color:#E36209;">eventPublisher</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @Captor</span></span>
<span class="line"><span style="color:#24292E;">  ArgumentCaptor</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ValueUpdatedEvent</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">eventCaptor</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Value updated&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testValueUpdated</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    int value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">(valueUpdater.</span><span style="color:#6F42C1;">updateValue</span><span style="color:#24292E;">(value)).</span><span style="color:#6F42C1;">willReturn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(actionService.</span><span style="color:#6F42C1;">performAction</span><span style="color:#24292E;">(value)).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(eventPublisher, </span><span style="color:#6F42C1;">times</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">publishEvent</span><span style="color:#24292E;">(eventCaptor.</span><span style="color:#6F42C1;">capture</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(eventCaptor.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">extracting</span><span style="color:#24292E;">(ValueUpdatedEvent::getCurrentValue)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @Test</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Value not updated&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testValueNotUpdated</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    int value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">(valueUpdater.</span><span style="color:#6F42C1;">updateValue</span><span style="color:#24292E;">(value)).</span><span style="color:#6F42C1;">willReturn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(actionService.</span><span style="color:#6F42C1;">performAction</span><span style="color:#24292E;">(value)).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(eventPublisher, </span><span style="color:#6F42C1;">never</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">publishEvent</span><span style="color:#24292E;">(eventCaptor.</span><span style="color:#6F42C1;">capture</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>单元测试在微服务开发中起着重要的作用。本课时对单元测试进行了详细的介绍，包括 JUnit 5 介绍，如何测试领域对象，如何使用 Docker 来使用与生产环境相同的数据库进行测试，以及如何在单元测试中使用 mock 对象。</p>`,10);function v(D,h,m,b,q,P){const a=e("Image");return t(),r("div",null,[E,y,i,d,F,u,p(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image3/M01/07/AF/CgoCgV6iXLqAfqVwAABV7M2QOBM600.png"}),n(),g,p(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image3/M01/14/DF/Ciqah16iXMmAEiJ7AACRoHzs3ew474.png"}),n(),C,p(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image3/M01/07/B0/CgoCgV6iXOuAZf2mAABIdHZQLEg187.png"}),n(),A,p(a,{alt:"4.png",src:"https://s0.lgstatic.com/i/image3/M01/07/B0/CgoCgV6iXWyAEWGPAAArkcc--wE091.png"}),n(),B])}const S=o(c,[["render",v]]);export{T as __pageData,S as default};
