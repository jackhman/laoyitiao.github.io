import{_ as o,j as e,o as t,g as c,k as a,h as s,s as p,Q as l}from"./chunks/framework.cfb14fe0.js";const I=JSON.parse('{"title":"32UI替换：如何使用SwiftUI快速替换原有UI？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6687) 32  UI 替换：如何使用 SwiftUI 快速替换原有 UI？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6687) 32  UI 替换：如何使用 SwiftUI 快速替换原有 UI？.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6687) 32  UI 替换：如何使用 SwiftUI 快速替换原有 UI？.md"},E=p("h1",{id:"_32ui替换-如何使用swiftui快速替换原有ui",tabindex:"-1"},[s("32UI替换：如何使用SwiftUI快速替换原有UI？ "),p("a",{class:"header-anchor",href:"#_32ui替换-如何使用swiftui快速替换原有ui","aria-label":'Permalink to "32UI替换：如何使用SwiftUI快速替换原有UI？"'},"​")],-1),y=p("p",null,"如今苹果公司力推的 SwiftUI 越来越流行，例如 Widget 等一些新功能只能使用 SwiftUI 进行开发，再加上 SwiftUI 又变得越来越稳定，可以说现在是学习和使用 SwiftUI 的良好时机。但并不是每个 App 都可以很方便地升级技术栈，幸运的是，Moments App 使用了 MVVM 的架构，该架构为我们提供了良好的灵活性和可扩展性，下面我们一起看看如何把 Moments App 的 UI 层从 UIKit 替换成 SwiftUI。",-1),i=p("p",null,[s("在前面"),p("a",{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657&sid=20-h5Url-0&buyFrom=2&pageId=1pz4#/detail/pc?id=6669&fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"第 16 讲"),s("里，我们讲了如何使用 MVVM 模式来架构 Moments App。在这一讲中，我准备把 UIViewController 和 UIView 从 View 层移除，替换成 SwiftUI 的实现，如下图所示：")],-1),d=l(`<p>可以看到，除了 View 层以外，其他模块（包括 ViewModel 和 Model 层等）都没有做任何的改动。下面我们就来剖析下这个实现原理和步骤。</p><h3 id="swiftui-的状态管理" tabindex="-1">SwiftUI 的状态管理 <a class="header-anchor" href="#swiftui-的状态管理" aria-label="Permalink to &quot;SwiftUI 的状态管理&quot;">​</a></h3><p>SwiftUI 是一个由状态驱动的 UI 框架，为了更好地理解 SwiftUI 的使用，我们就先来看看 SwiftUI 是如何管理状态的。</p><p><strong>状态管理最简单的方式是使用 @State 属性包装器（Property Wrapper）</strong>，下面是使用 @State 的示例代码：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContentView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@State</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;生日啦，现在几岁: </span><span style="color:#9ECBFF;">\\(age)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            age </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContentView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@State</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;生日啦，现在几岁: </span><span style="color:#032F62;">\\(age)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            age </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们在<code>ContentView</code>里面创建了一个名叫<code>age</code>的属性，由于使用了 @State 属性包装器，所以 SwiftUI 会帮我们自动管理这个属性的内存并监听其状态更新的情况。在上述的例子中，当用户点击&quot;生日啦&quot;按钮时，就会把<code>age</code>属性的值增加一，这一更改会促使 SwiftUI 自动刷新<code>ContentView</code>。</p><p>@State 适合为某个特定的 View 管理类型为值（Value）的属性，而且我们通常把 @State 的属性都定义为<code>private</code>（私有的）以禁止外部的访问。但如何实现多个对象间（例如，父子视图间）的状态共享呢？那就需要使用到 @StateObject 和 @ObservedObject 属性包装器了。这两个属性包装器所定义的属性都必须遵循<code>ObservableObject</code>协议。</p><p>那接下来我们就再看一下为什么使用<code>ObservableObject</code>协议吧。</p><p><strong>为了让 SwiftUI 能访问来自 Model 的状态更新，我们必须让 Model 遵循 ObservableObject 协议</strong>。那 Model 怎样才能发送状态通知呢？可以结合下面的例子来理解。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserObservableObject</span><span style="color:#E1E4E8;">: ObservableObject {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Jake&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">willSet</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            objectWillChange.</span><span style="color:#79B8FF;">send</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserObservableObject</span><span style="color:#24292E;">: ObservableObject {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Jake&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">willSet</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            objectWillChange.</span><span style="color:#005CC5;">send</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>UserObservableObject</code>是一个遵循了<code>ObservableObject</code>协议的类。因为所有遵循<code>ObservableObject</code>协议的子类型都必须是引用类型，所以我们只能使用类而不是结构体（Struct）。<code>UserObservableObject</code>定义了两个属性：<code>age</code>属性的<code>willSet</code>里面调用了<code>objectWillChange.send()</code>方法，当我们修改<code>age</code>属性时，就会发送状态更新通知；而<code>name</code>属性没有调用<code>objectWillChange.send()</code>方法，因此我们修改它的时候并不会发送更新通知。</p><p>你可以看到，所有需要发送更新通知的属性都必须编写重复的<code>willSet</code>代码，幸运的是苹果为我们提供了 <code>@Published</code>属性包装器来简化编写更新通知的工作。有了<code>@Published</code>，上述的代码就可以简化为如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserObservableObject</span><span style="color:#E1E4E8;">: ObservableObject {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Jake&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@Published</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserObservableObject</span><span style="color:#24292E;">: ObservableObject {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Jake&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@Published</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们只需要在发送状态更新的属性定义前加上<code>@Published</code>即可。</p><p>介绍完<code>ObservableObject</code>协议以后，我们就可以通过下面的例子看看如何使用 @StateObject 和 @ObservedObject 属性包装器了。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChildView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@ObservedObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> user: UserObservableObject</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;生日啦，现在几岁: </span><span style="color:#9ECBFF;">\\(user.</span><span style="color:#E1E4E8;">age</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            user.age </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParentView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@StateObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> user: UserObservableObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        VStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你的名字：</span><span style="color:#9ECBFF;">\\(user.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">ChildView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;">: user)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChildView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@ObservedObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user: UserObservableObject</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;生日啦，现在几岁: </span><span style="color:#032F62;">\\(user.</span><span style="color:#24292E;">age</span><span style="color:#032F62;">)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            user.age </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParentView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@StateObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user: UserObservableObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        VStack {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你的名字：</span><span style="color:#032F62;">\\(user.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">ChildView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">user</span><span style="color:#24292E;">: user)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>@StateObject 和 @ObservedObject 都可以定义用于状态共享的属性，而且这些属性的类型都必须遵循</strong> <code>ObservableObject</code>协议。不同的地方是 @StateObject 用于生成和管理状态属性的生命周期，而 @ObservedObject 只能把共享状态从外部传递进来。例如，在上面的示例代码中，我们在<code>ParentView</code>里使用 @StateObject 来定义并初始化<code>user</code>属性，然后传递给<code>ChildView</code>的<code>user</code>属性。由于<code>ChildView</code>的<code>user</code>属性来自外部的<code>ParentView</code>，因此定义为 @ObservedObject。</p><p>当我们需要共享状态的时候，通常在父对象里定义和初始化一个 @StateObject 属性，然后传递给子对象里的 @ObservedObject 属性。如果只有两层关系还是很方便的，但假如有好几层的父子关系，逐层传递会变得非常麻烦，那有没有好办法解决这个问题呢？</p><p>@EnvironmentObject 就是用于解决这个问题的。@EnvironmentObject 能帮我们把状态共享到整个 App 里面，下面还是通过一个例子来看看。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@main</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentsApp</span><span style="color:#E1E4E8;">: App {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@StateObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> user: UserObservableObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="color:#E1E4E8;">        WindowGroup {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">ParentView</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">environmentObject</span><span style="color:#E1E4E8;">(user)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChildView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@EnvironmentObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> user: UserObservableObject</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;生日啦，现在几岁: </span><span style="color:#9ECBFF;">\\(user.</span><span style="color:#E1E4E8;">age</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            user.age </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParentView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        VStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">ChildView</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@main</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentsApp</span><span style="color:#24292E;">: App {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@StateObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user: UserObservableObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> Scene {</span></span>
<span class="line"><span style="color:#24292E;">        WindowGroup {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">ParentView</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">environmentObject</span><span style="color:#24292E;">(user)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChildView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@EnvironmentObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user: UserObservableObject</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;生日啦，现在几岁: </span><span style="color:#032F62;">\\(user.</span><span style="color:#24292E;">age</span><span style="color:#032F62;">)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            user.age </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParentView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        VStack {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">ChildView</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们在<code>MomentsApp</code>里面通过 @StateObject 定义并初始化<code>user</code>属性，然后调用<code>environmentObject()</code>方法把该属性注册成环境对象。<code>MomentsApp</code>内嵌了<code>ParentView</code>，而<code>ParentView</code>并没有使用<code>user</code>属性。<code>ParentView</code>内嵌了<code>ChildView</code>，<code>ChildView</code>则通过 @EnvironmentObject 来定义<code>user</code>属性，这样<code>ChildView</code>就能从环境对象中取出<code>MomentsApp</code>注册的值了。</p><p><strong>@EnvironmentObject 能帮我们把对象传递到 App 任何的地方，特别适合共享公共的状态</strong>，例如用户登录的信息等。但是 @EnvironmentObject 有点像 Singleton，我们不能过度使用它，否则会增加模块间的耦合度。</p><p>@ObservedObject 与 @EnvironmentObject 都能帮助我们共享引用类型的属性，但如何共享值类型的属性呢？<strong>@Binding 属性包装器就能帮我们定义共享值类型的属性。</strong> 下面我们还是通过示例代码来看看如何使用 @Binding。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChildView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@Binding</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isPresented: </span><span style="color:#79B8FF;">Bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;关闭&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            isPresented </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParentView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@State</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> showingChildView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        VStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;父 View&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#79B8FF;">sheet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isPresented</span><span style="color:#E1E4E8;">: $showingChildView) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">ChildView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isPresented</span><span style="color:#E1E4E8;">: $showingChildView)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChildView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@Binding</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isPresented: </span><span style="color:#005CC5;">Bool</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;关闭&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            isPresented </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParentView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@State</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> showingChildView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        VStack {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;父 View&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#005CC5;">sheet</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isPresented</span><span style="color:#24292E;">: $showingChildView) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">ChildView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isPresented</span><span style="color:#24292E;">: $showingChildView)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>ChildView</code>通过 @Binding 定义了<code>isPresented</code>属性，表示该视图是否可见。该属性的值与<code>ParentView</code>的<code>showingChildView</code>属性同步。通过 @Binding，我们就可以把值类型的属性进行共享了。</p><p>至此，我们就介绍完 SwiftUI 的状态管理了。</p><h3 id="swiftui-的架构与实现" tabindex="-1">SwiftUI 的架构与实现 <a class="header-anchor" href="#swiftui-的架构与实现" aria-label="Permalink to &quot;SwiftUI 的架构与实现&quot;">​</a></h3><p>下面一起来看看使用 SwiftUI 开发 View 层的系统架构图。</p>`,28),F=l(`<p>该架构图由两部分组成，分别是左边的 View 模块和右边的 ViewModel 模块。由于 View 模块依赖了 ViewModel 模块，所以这里我们就先看右边的 ViewModel 模块。该模块包含了<code>MomentsTimelineViewModel</code>、<code>ListItemViewModel</code>、<code>MomentListItemViewModel</code>和<code>UserProfileListItemViewModel</code>四个原有的 ViewModel，因为它们具有良好的可扩展性，所以我们无须对它们进行任何的改动。</p><h4 id="_1-桥接-rxswift-与-swiftui" tabindex="-1">1. 桥接 RxSwift 与 SwiftUI <a class="header-anchor" href="#_1-桥接-rxswift-与-swiftui" aria-label="Permalink to &quot;1. 桥接 RxSwift 与 SwiftUI&quot;">​</a></h4><p>为了把这些 ViewModel 类型桥接到 SwiftUI 版本的 View 模块，我们增加了两个类型：<code>MomentsListObservableObject</code>和<code>IdentifiableListItemViewModel</code>。<code>MomentsListObservableObject</code>负责给 SwiftUI 组件发送更新消息，下面是它的具体实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentsListObservableObject</span><span style="color:#E1E4E8;">: ObservableObject {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> viewModel: MomentsTimelineViewModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> disposeBag: DisposeBag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@Published</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> listItems: [IdentifiableListItemViewModel] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">momentsRepo</span><span style="color:#E1E4E8;">: MomentsRepoType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        viewModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MomentsTimelineViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: userID, </span><span style="color:#79B8FF;">momentsRepo</span><span style="color:#E1E4E8;">: momentsRepo)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">setupBindings</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadItems</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        viewModel.</span><span style="color:#79B8FF;">loadItems</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupBindings</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        viewModel.listItems</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">observeOn</span><span style="color:#E1E4E8;">(MainScheduler.instance)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: { [</span><span style="color:#F97583;">weak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">] items </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.listItems.</span><span style="color:#79B8FF;">removeAll</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.listItems.</span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">contentsOf</span><span style="color:#E1E4E8;">: items.</span><span style="color:#79B8FF;">flatMap</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.items }.</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">IdentifiableListItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">viewModel</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) })</span></span>
<span class="line"><span style="color:#E1E4E8;">            })</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentsListObservableObject</span><span style="color:#24292E;">: ObservableObject {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewModel: MomentsTimelineViewModel</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> disposeBag: DisposeBag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@Published</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> listItems: [IdentifiableListItemViewModel] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">momentsRepo</span><span style="color:#24292E;">: MomentsRepoType) {</span></span>
<span class="line"><span style="color:#24292E;">        viewModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MomentsTimelineViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: userID, </span><span style="color:#005CC5;">momentsRepo</span><span style="color:#24292E;">: momentsRepo)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">setupBindings</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadItems</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        viewModel.</span><span style="color:#005CC5;">loadItems</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupBindings</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        viewModel.listItems</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">observeOn</span><span style="color:#24292E;">(MainScheduler.instance)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: { [</span><span style="color:#D73A49;">weak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">] items </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.listItems.</span><span style="color:#005CC5;">removeAll</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.listItems.</span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">contentsOf</span><span style="color:#24292E;">: items.</span><span style="color:#005CC5;">flatMap</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.items }.</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">IdentifiableListItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">viewModel</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) })</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>MomentsListObservableObject</code>遵循了<code>ObservableObject</code>协议，并使用了 @Published 来定义<code>listItems</code>属性，这样使得<code>listItems</code>的状态更新会自动往外发送。<br><code>listItems</code>属性的类型是<code>IdentifiableListItemViewModel</code>的数组，下面是<code>IdentifiableListItemViewModel</code>的具体实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IdentifiableListItemViewModel</span><span style="color:#E1E4E8;">: Identifiable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id: UUID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> viewModel: ListItemViewModel</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IdentifiableListItemViewModel</span><span style="color:#24292E;">: Identifiable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id: UUID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewModel: ListItemViewModel</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>IdentifiableListItemViewModel</code>其实是<code>ListItemViewModel</code>的一个包装类型，因为我们要在 SwiftUI 上重复显示<code>ListItemViewModel</code>的数据，所以就要用到<code>ForEach</code>语句来执行循环操作。而<code>ForEach</code>语句要求所有 Model 类型都遵循<code>Identifiable</code>协议，因此，我们定义了<code>IdentifiableListItemViewModel</code>来遵循<code>Identifiable</code>协议，并把<code>ListItemViewModel</code>包装在里面，同时还通过<code>id</code>属性来返回一个 UUID 的实例。</p><p>在<code>init()</code>初始化函数里，我们订阅了<code>MomentsTimelineViewModel</code>的<code>listItems</code>Subject 属性的更新，而且把接收到的数据转换成<code>IdentifiableListItemViewModel</code>类型并赋值给<code>listItems</code>属性，这样就能把 RxSwift 的事件消息桥接给 SwiftUI 进行自动更新了。</p><p>接着再来看看 View 模块，该模块由<code>SwiftUIMomentsTimelineView</code>、<code>SwiftUIMomentsListItemView</code>、<code>SwiftUIMomentListItemView</code>和<code>SwiftUIUserProfileListItemView</code>所组成，你可以结合下图了解它们之间的嵌套关系。</p>`,9),C=l(`<p><code>SwiftUIMomentsTimelineView</code>是一个容器视图，包含了多个<code>SwiftUIMomentsListItemView</code>。<code>SwiftUIMomentsListItemView</code>会根据 ViewModel 的具体类型来显示<code>SwiftUIUserProfileListItemView</code>或者<code>SwiftUIMomentListItemView</code>。</p><h4 id="_2-朋友圈时间轴视图" tabindex="-1">2. 朋友圈时间轴视图 <a class="header-anchor" href="#_2-朋友圈时间轴视图" aria-label="Permalink to &quot;2. 朋友圈时间轴视图&quot;">​</a></h4><p>下面我们分别看看它们的实现吧，首先看容器视图<code>SwiftUIMomentsTimelineView</code>的代码实现。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SwiftUIMomentsTimelineView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@StateObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> userDataStore: UserDataStoreObservableObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@StateObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> momentsList: MomentsListObservableObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: UserDataStore.current.userID, </span><span style="color:#79B8FF;">momentsRepo</span><span style="color:#E1E4E8;">: MomentsRepo.shared)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@State</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isDragging: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">ScrollView</span><span style="color:#E1E4E8;">(axes, </span><span style="color:#79B8FF;">showsIndicators</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            LazyVStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">ForEach</span><span style="color:#E1E4E8;"> (momentsList.listItems) { item </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">SwiftUIMomentsListItemView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">viewModel</span><span style="color:#E1E4E8;">: item.viewModel, </span><span style="color:#79B8FF;">isDragging</span><span style="color:#E1E4E8;">: $isDragging).</span><span style="color:#79B8FF;">ignoresSafeArea</span><span style="color:#E1E4E8;">(.all)</span></span>
<span class="line"><span style="color:#E1E4E8;">                }.</span><span style="color:#79B8FF;">onAppear</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">perform</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    momentsList.</span><span style="color:#79B8FF;">loadItems</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                })</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">minWidth</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">maxWidth</span><span style="color:#E1E4E8;">: .</span><span style="color:#79B8FF;">infinity</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">minHeight</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">maxHeight</span><span style="color:#E1E4E8;">: .</span><span style="color:#79B8FF;">infinity</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">background</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;background&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">ignoresSafeArea</span><span style="color:#E1E4E8;">(.all)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">environmentObject</span><span style="color:#E1E4E8;">(userDataStore)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SwiftUIMomentsTimelineView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@StateObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> userDataStore: UserDataStoreObservableObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@StateObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> momentsList: MomentsListObservableObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: UserDataStore.current.userID, </span><span style="color:#005CC5;">momentsRepo</span><span style="color:#24292E;">: MomentsRepo.shared)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@State</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isDragging: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">ScrollView</span><span style="color:#24292E;">(axes, </span><span style="color:#005CC5;">showsIndicators</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            LazyVStack {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">ForEach</span><span style="color:#24292E;"> (momentsList.listItems) { item </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">SwiftUIMomentsListItemView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">viewModel</span><span style="color:#24292E;">: item.viewModel, </span><span style="color:#005CC5;">isDragging</span><span style="color:#24292E;">: $isDragging).</span><span style="color:#005CC5;">ignoresSafeArea</span><span style="color:#24292E;">(.all)</span></span>
<span class="line"><span style="color:#24292E;">                }.</span><span style="color:#005CC5;">onAppear</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">perform</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">                    momentsList.</span><span style="color:#005CC5;">loadItems</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                })</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">minWidth</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">maxWidth</span><span style="color:#24292E;">: .</span><span style="color:#005CC5;">infinity</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">minHeight</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">maxHeight</span><span style="color:#24292E;">: .</span><span style="color:#005CC5;">infinity</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">background</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;background&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">ignoresSafeArea</span><span style="color:#24292E;">(.all)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">environmentObject</span><span style="color:#24292E;">(userDataStore)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们使用 @StateObject 定义了<code>userDataStore</code>属性，并通过<code>environmentObject()</code>方法把它注册到环境对象中，这样就使得所有的子视图都能通过 @EnvironmentObject 来访问<code>userDataStore</code>属性的值了。</p><p><code>SwiftUIMomentsTimelineView</code>的布局比较简单，是一个<code>ScrollView</code>，在<code>ScrollView</code>里通过<code>LazyVStack</code>和<code>ForEach</code>把<code>momentsList.listItems</code>的每一条数据通过<code>SwiftUIMomentsListItemView</code>分别显示出来，而且在初始化<code>SwiftUIMomentsListItemView</code>的时候把具体的 ViewModel 以及<code>isDragging</code>属性传递进去。</p><h4 id="_3-中介视图" tabindex="-1">3. 中介视图 <a class="header-anchor" href="#_3-中介视图" aria-label="Permalink to &quot;3. 中介视图&quot;">​</a></h4><p><code>SwiftUIMomentsListItemView</code>担任中介的角色，其具体代码实现如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SwiftUIMomentsListItemView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> viewModel: ListItemViewModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@Binding</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isDragging: </span><span style="color:#79B8FF;">Bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> viewModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> UserProfileListItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">SwiftUIUserProfileListItemView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">viewModel</span><span style="color:#E1E4E8;">: viewModel, </span><span style="color:#79B8FF;">isDragging</span><span style="color:#E1E4E8;">: $isDragging)</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> viewModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> MomentListItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">SwiftUIMomentListItemView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">viewModel</span><span style="color:#E1E4E8;">: viewModel)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SwiftUIMomentsListItemView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewModel: ListItemViewModel</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@Binding</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isDragging: </span><span style="color:#005CC5;">Bool</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> UserProfileListItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">SwiftUIUserProfileListItemView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">viewModel</span><span style="color:#24292E;">: viewModel, </span><span style="color:#005CC5;">isDragging</span><span style="color:#24292E;">: $isDragging)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> MomentListItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">SwiftUIMomentListItemView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">viewModel</span><span style="color:#24292E;">: viewModel)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们使用了 @Binding 来定义<code>isDragging</code>属性，这样就能与父视图<code>SwiftUIMomentsTimelineView</code>共享用户的拖动状态了。<code>SwiftUIMomentsListItemView</code>本身不做任何的显示操作，而是在<code>body</code>属性里根据<code>viewModel</code>的类型来分别通过<code>SwiftUIUserProfileListItemView</code>或者<code>SwiftUIMomentListItemView</code>进行显示。为什么需要这样做呢？因为 SwiftUI 里所有的组件都是值类型，例如 View 就不支持继承关系，我们无法使用多态（Polymorphism）的方式来动态显示的子 View，只能通过条件判断语句来选择性显示不同的 View。</p><h4 id="_4-用户属性视图" tabindex="-1">4. 用户属性视图 <a class="header-anchor" href="#_4-用户属性视图" aria-label="Permalink to &quot;4. 用户属性视图&quot;">​</a></h4><p>朋友圈功能最上面的部分是用户属性视图，下面我们看一下它的具体实现。由于<code>SwiftUIUserProfileListItemView</code>的具体实现代码有点长，所以这里我把它拆成几部分来分别解释。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SwiftUIUserProfileListItemView</span><span style="color:#E1E4E8;">: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> viewModel: UserProfileListItemViewModel</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@Binding</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isDragging: </span><span style="color:#79B8FF;">Bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@State</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> viewSize: CGSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .zero</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SwiftUIUserProfileListItemView</span><span style="color:#24292E;">: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> viewModel: UserProfileListItemViewModel</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@Binding</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isDragging: </span><span style="color:#005CC5;">Bool</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@State</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> viewSize: CGSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .zero</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先看一下属性的定义，我们定义了<code>viewModel</code>属性来保存从父视图传进来的<code>UserProfileListItemViewModel</code>对象，这样我们就能使用该<code>viewModel</code>里的属性来进行显示了。</p><p>同时我们还使用了 @Binding 来定义<code>isDragging</code>属性，该属性与父视图<code>SwiftUIMomentsTimelineView</code>共享用户拖动的状态。有了这个属性，我们在启动触摸动画时就可以停止父视图的拖动事件，从而避免奇怪的拖动效果。</p><p>另外，我们还使用 @State 来定义一个私有的属性<code>viewSize</code>，该属性用于控制拖拉动画的视图大小。</p><p>为了更好地理解布局的代码实现，我们可以结合下面的图来看看各个组件之间的嵌套关系。</p>`,17),g=l(`<p>因为我们要把名字和头像放在底部，所以使用了用于垂直布局的<code>VStack</code>。在该<code>VStack</code>里先放一个<code>Spacer</code>，这样能把下面的<code>HStack</code>压到底部。<code>HStack</code>用于水平布局，我们可以通过<code>Spacer</code>把其他视图推到右边，右边是用于显示名字的<code>Text</code>和显示头像的<code>KFImage</code>控件。这所有的布局代码都存放在<code>body</code>属性里，如下所示：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    VStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Spacer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        HStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Spacer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(viewModel.name)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">font</span><span style="color:#E1E4E8;">(.title2)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">foregroundColor</span><span style="color:#E1E4E8;">(.white)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(.trailing, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">KFImage</span><span style="color:#E1E4E8;">(viewModel.avatarURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">resizable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">aspectRatio</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">contentMode</span><span style="color:#E1E4E8;">: .fill)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">alignment</span><span style="color:#E1E4E8;">: .center)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">clipShape</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Circle</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(.trailing, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(.bottom, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">350</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">maxWidth</span><span style="color:#E1E4E8;">: .</span><span style="color:#79B8FF;">infinity</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">    VStack {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Spacer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        HStack {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">Spacer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(viewModel.name)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">font</span><span style="color:#24292E;">(.title2)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">foregroundColor</span><span style="color:#24292E;">(.white)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(.trailing, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">KFImage</span><span style="color:#24292E;">(viewModel.avatarURL)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">resizable</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">aspectRatio</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">contentMode</span><span style="color:#24292E;">: .fill)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">alignment</span><span style="color:#24292E;">: .center)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">clipShape</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Circle</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(.trailing, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(.bottom, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">350</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">maxWidth</span><span style="color:#24292E;">: .</span><span style="color:#005CC5;">infinity</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于<code>Spacer</code>不能提供高度和宽度，所以除了布局代码以外，我们还需要调用<code>frame(height: 350)</code>方法来配置视图的高度，然后使用<code>frame(maxWidth: .infinity)</code>方法使得视图占据设备的全部宽度。</p><p>你可能会问，后面两个深蓝色的圆圈和背景图在哪里配置呢？其实它们都放在<code>background</code>方法里面，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">background</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    ZStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Image</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uiImage</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#imageLiteral</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">resourceName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Blob&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-200</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">rotationEffect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Angle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">degrees</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">450</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">blendMode</span><span style="color:#E1E4E8;">(.plusDarker)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Image</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uiImage</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#imageLiteral</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">resourceName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Blob&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-250</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">rotationEffect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Angle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">degrees</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">360</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">anchor</span><span style="color:#E1E4E8;">: .leading)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">blendMode</span><span style="color:#E1E4E8;">(.overlay)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">background</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">KFImage</span><span style="color:#E1E4E8;">(viewModel.backgroundImageURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">resizable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: viewSize.width </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: viewSize.height </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">clipShape</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">RoundedRectangle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cornerRadius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">style</span><span style="color:#E1E4E8;">: .continuous))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">background</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    ZStack {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Image</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uiImage</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#imageLiteral</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">resourceName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Blob&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-200</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">rotationEffect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Angle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">degrees</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">450</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">blendMode</span><span style="color:#24292E;">(.plusDarker)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Image</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uiImage</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#imageLiteral</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">resourceName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Blob&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-250</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">rotationEffect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Angle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">degrees</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">360</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">anchor</span><span style="color:#24292E;">: .leading)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">blendMode</span><span style="color:#24292E;">(.overlay)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">background</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">KFImage</span><span style="color:#24292E;">(viewModel.backgroundImageURL)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">resizable</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: viewSize.width </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: viewSize.height </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">clipShape</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">RoundedRectangle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cornerRadius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">style</span><span style="color:#24292E;">: .continuous))</span></span></code></pre></div><p>这里调用了两次<code>background</code>方法。在第一个<code>background</code>方法里，我们使用了<code>ZStack</code>来进行布局，<code>ZStack</code>能帮助我们布局彼此覆盖的视图。在<code>ZStack</code>里，我们存放了两个名叫 Blob 的<code>Image</code>组件，由于它们使用了不一样的<code>blendMode</code>，所以显示的效果有所不同。</p><p>在第二个<code>background</code>方法里，我们使用了<code>KFImage</code>来加载背景图片，同时把<code>viewSize</code>传递给<code>offset()</code>方法来实现非常微妙的视差（parallax）效果。</p><p>最后我们调用了<code>clipShape()</code>方法来配置大圆角的效果，这是近期一种流行的设计风格。</p><p>以上都是配置静态 UI 风格的代码，下面我们再来看看如何为<code>SwiftUIUserProfileListItemView</code>呈现浮动的动画效果，如下实现代码：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">scaleEffect</span><span style="color:#E1E4E8;">(isDragging </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.9</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">animation</span><span style="color:#E1E4E8;">(.</span><span style="color:#79B8FF;">timingCurve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duration</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">rotation3DEffect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Angle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">degrees</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">axis</span><span style="color:#E1E4E8;">: (</span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: viewSize.width, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: viewSize.height, </span><span style="color:#79B8FF;">z</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">gesture</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DragGesture</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">onChanged</span><span style="color:#E1E4E8;">({ value </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.isDragging </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.viewSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.translation</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#79B8FF;">onEnded</span><span style="color:#E1E4E8;">({ </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.isDragging </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.viewSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .zero</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">scaleEffect</span><span style="color:#24292E;">(isDragging </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">animation</span><span style="color:#24292E;">(.</span><span style="color:#005CC5;">timingCurve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duration</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">rotation3DEffect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Angle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">degrees</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">axis</span><span style="color:#24292E;">: (</span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: viewSize.width, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: viewSize.height, </span><span style="color:#005CC5;">z</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">gesture</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DragGesture</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">onChanged</span><span style="color:#24292E;">({ value </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.isDragging </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.viewSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.translation</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#005CC5;">onEnded</span><span style="color:#24292E;">({ </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.isDragging </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.viewSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .zero</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>当调用<code>scaleEffect()</code>方法时，我们根据<code>isDragging</code>属性的状态来配置不同的缩放系数，这样能使得当用户拖拉视图时，视图会变小一点点。然后调用<code>animation()</code>方法使得视图改变大小时会有平滑的转换动画效果，<code>rotation3DEffect()</code>方法会使得拖拉视图时有浮动效果，<code>gesture()</code>方法让我们可以根据用户的触摸状态来改变<code>isDragging</code>和<code>viewSize</code>的状态，从而影响动画的运行状态。</p><h4 id="_5-朋友圈信息视图" tabindex="-1">5. 朋友圈信息视图 <a class="header-anchor" href="#_5-朋友圈信息视图" aria-label="Permalink to &quot;5. 朋友圈信息视图&quot;">​</a></h4><p>看完用户属性视图的实现后，下面我们一起看看一条朋友圈信息是如何显示的，首先看一下它的布局图。</p>`,13),u=l(`<p>外层是一个<code>ZStack</code>，这样能保证<code>Toggle</code>可以一直浮动在右下角。<code>ZStack</code>还包含一个<code>HStack</code>，在<code>HStack</code>的左边是一张用于显示朋友头像的图片，右边是一个<code>VStack</code>。<code>VStack</code>里依次放了显示朋友名字的<code>Text</code>、显示标题的<code>Text</code>、显示图片的<code>KFImage</code>、显示时间的<code>Text</code>，以及最底层的<code>HStack</code>，这个<code>HStack</code>放置了一个心形图片和多个点赞人的头像。其布局代码如下所示， 你可以结合上面的图来理解。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ZStack</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">alignment</span><span style="color:#E1E4E8;">: .bottomTrailing) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">HStack</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">alignment</span><span style="color:#E1E4E8;">: .top, </span><span style="color:#79B8FF;">spacing</span><span style="color:#E1E4E8;">: Spacing.medium) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">KFImage</span><span style="color:#E1E4E8;">(viewModel.userAvatarURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">resizable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">clipShape</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Circle</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">shadow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: Color.primary.</span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.15</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">radius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(.leading, Spacing.medium)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">VStack</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">alignment</span><span style="color:#E1E4E8;">: .leading) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(viewModel.userName)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">font</span><span style="color:#E1E4E8;">(.subheadline)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">foregroundColor</span><span style="color:#E1E4E8;">(.primary)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel.title {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(title)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">font</span><span style="color:#E1E4E8;">(.body)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">foregroundColor</span><span style="color:#E1E4E8;">(Color.secondary)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> photoURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel.photoURL {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">KFImage</span><span style="color:#E1E4E8;">(photoURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">resizable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">240</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> postDateDescription </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel.postDateDescription {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(postDateDescription)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">font</span><span style="color:#E1E4E8;">(.footnote)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">foregroundColor</span><span style="color:#E1E4E8;">(Color.secondary)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> likes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> viewModel.likes, </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">likes.</span><span style="color:#79B8FF;">isEmpty</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                HStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">Image</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">systemName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;heart&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#79B8FF;">foregroundColor</span><span style="color:#E1E4E8;">(.secondary)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">ForEach</span><span style="color:#E1E4E8;">(likes.</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">IdentifiableURL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">KFImage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#79B8FF;">resizable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#79B8FF;">clipShape</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Circle</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#79B8FF;">shadow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: Color.primary.</span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.15</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">radius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Spacer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Toggle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isOn</span><span style="color:#E1E4E8;">: $isLiked) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ZStack</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">alignment</span><span style="color:#24292E;">: .bottomTrailing) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">HStack</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">alignment</span><span style="color:#24292E;">: .top, </span><span style="color:#005CC5;">spacing</span><span style="color:#24292E;">: Spacing.medium) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">KFImage</span><span style="color:#24292E;">(viewModel.userAvatarURL)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">resizable</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">clipShape</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Circle</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">44</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">44</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">shadow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: Color.primary.</span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.15</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(.leading, Spacing.medium)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">VStack</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">alignment</span><span style="color:#24292E;">: .leading) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(viewModel.userName)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">font</span><span style="color:#24292E;">(.subheadline)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">foregroundColor</span><span style="color:#24292E;">(.primary)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel.title {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(title)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">font</span><span style="color:#24292E;">(.body)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">foregroundColor</span><span style="color:#24292E;">(Color.secondary)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> photoURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel.photoURL {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">KFImage</span><span style="color:#24292E;">(photoURL)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">resizable</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">240</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> postDateDescription </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel.postDateDescription {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(postDateDescription)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">font</span><span style="color:#24292E;">(.footnote)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">foregroundColor</span><span style="color:#24292E;">(Color.secondary)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> likes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> viewModel.likes, </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">likes.</span><span style="color:#005CC5;">isEmpty</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                HStack {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">Image</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">systemName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;heart&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#005CC5;">foregroundColor</span><span style="color:#24292E;">(.secondary)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">ForEach</span><span style="color:#24292E;">(likes.</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">IdentifiableURL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">url</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) }) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">KFImage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">url</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#005CC5;">resizable</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#005CC5;">clipShape</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Circle</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#005CC5;">shadow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: Color.primary.</span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.15</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Spacer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Toggle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isOn</span><span style="color:#24292E;">: $isLiked) {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，<code>Toggle</code>使用了当前流行的新拟物化设计（Neumorphism），其具有光影效果，同时在点击时会有丝绸物料凸凹变化的效果。那是怎样做到的呢？下面一起看看<code>Toggle</code>组件的代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Toggle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isOn</span><span style="color:#E1E4E8;">: $isLiked) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Image</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">systemName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;heart.fill&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">foregroundColor</span><span style="color:#E1E4E8;">(isLiked </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonSelected&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonNotSelected&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">animation</span><span style="color:#E1E4E8;">(.easeIn)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">toggleStyle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">LikeToggleStyle</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(.trailing, Spacing.medium)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">onChange</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">: isLiked, </span><span style="color:#79B8FF;">perform</span><span style="color:#E1E4E8;">: { isOn </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> isLiked </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> isOn </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> isOn {</span></span>
<span class="line"><span style="color:#E1E4E8;">        viewModel.</span><span style="color:#79B8FF;">like</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: userDataStore.currentUser.userID).</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        viewModel.</span><span style="color:#79B8FF;">unlike</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: userDataStore.currentUser.userID).</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Toggle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isOn</span><span style="color:#24292E;">: $isLiked) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Image</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">systemName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;heart.fill&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">foregroundColor</span><span style="color:#24292E;">(isLiked </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonSelected&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonNotSelected&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">animation</span><span style="color:#24292E;">(.easeIn)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">toggleStyle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">LikeToggleStyle</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(.trailing, Spacing.medium)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">onChange</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">: isLiked, </span><span style="color:#005CC5;">perform</span><span style="color:#24292E;">: { isOn </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> isLiked </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> isOn </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> isOn {</span></span>
<span class="line"><span style="color:#24292E;">        viewModel.</span><span style="color:#005CC5;">like</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: userDataStore.currentUser.userID).</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        viewModel.</span><span style="color:#005CC5;">unlike</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: userDataStore.currentUser.userID).</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>我们在<code>Toggle</code>里面放了一个心形的<code>Image</code>，并根据选中状态来填充不同的颜色。当我们点击<code>Toggle</code>时，会根据选中状态来调用<code>viewModel</code>的<code>like()</code>或者<code>unlike()</code>方法，这样就能把选中状态更新到后台去了。</p><p>下面看一下如何配置<code>Toggle</code>的显示风格。这里我们定义了一个名叫<code>LikeToggleStyle</code>的结构体，该结构体遵循了<code>ToggleStyle</code>协议。我们可以在<code>LikeToggleStyle</code>里面配置<code>Toggle</code>的显示风格，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LikeToggleStyle</span><span style="color:#E1E4E8;">: ToggleStyle {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeBody</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">configuration</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Self</span><span style="color:#E1E4E8;">.Configuration) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Button</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">action</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            configuration.isOn.</span><span style="color:#79B8FF;">toggle</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#79B8FF;">label</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            configuration.label</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(Spacing.extraSmall)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#79B8FF;">contentShape</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Circle</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">background</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">LikeToggleBackground</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isHighlighted</span><span style="color:#E1E4E8;">: configuration.isOn, </span><span style="color:#79B8FF;">shape</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Circle</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LikeToggleStyle</span><span style="color:#24292E;">: ToggleStyle {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeBody</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">configuration</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Self</span><span style="color:#24292E;">.Configuration) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Button</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">action</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            configuration.isOn.</span><span style="color:#005CC5;">toggle</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">label</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            configuration.label</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(Spacing.extraSmall)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#005CC5;">contentShape</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Circle</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">background</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">LikeToggleBackground</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isHighlighted</span><span style="color:#24292E;">: configuration.isOn, </span><span style="color:#005CC5;">shape</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Circle</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>要配置<code>Toggle</code>的显示风格，我们需要实现<code>makeBody(configuration:)</code>方法来返回一个<code>View</code>。在这个<code>View</code>里面包含了一个<code>Button</code>组件来处理用户的点击事件，当用户点击的时候，我们会改变了<code>isOn</code>属性的值。除了按钮以外，我们还使用了<code>label</code>参数把<code>Toggle</code>配置成圆形，并通过<code>background()</code>方法来进行绘制，绘制 UI 的代码都封装在<code>LikeToggleBackground</code>里面。下面一起看看它的实现代码：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LikeToggleBackground</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">Shape</span><span style="color:#E1E4E8;">&gt;: View {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isHighlighted: </span><span style="color:#79B8FF;">Bool</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> shape: S</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body: </span><span style="color:#F97583;">some</span><span style="color:#E1E4E8;"> View {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ZStack {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> isHighlighted {</span></span>
<span class="line"><span style="color:#E1E4E8;">                shape</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">LinearGradient</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillEnd&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillStart&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">overlay</span><span style="color:#E1E4E8;">(shape.</span><span style="color:#79B8FF;">stroke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">LinearGradient</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillStart&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillEnd&quot;</span><span style="color:#E1E4E8;">)), </span><span style="color:#79B8FF;">lineWidth</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">shadow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonStart&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">radius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">shadow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonEnd&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">radius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                shape</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">LinearGradient</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillStart&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillEnd&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">overlay</span><span style="color:#E1E4E8;">(shape.</span><span style="color:#79B8FF;">stroke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">LinearGradient</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillStart&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonFillEnd&quot;</span><span style="color:#E1E4E8;">)), </span><span style="color:#79B8FF;">lineWidth</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">shadow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonStart&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">radius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#79B8FF;">shadow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;likeButtonEnd&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">radius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LikeToggleBackground</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">Shape</span><span style="color:#24292E;">&gt;: View {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isHighlighted: </span><span style="color:#005CC5;">Bool</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> shape: S</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body: </span><span style="color:#D73A49;">some</span><span style="color:#24292E;"> View {</span></span>
<span class="line"><span style="color:#24292E;">        ZStack {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> isHighlighted {</span></span>
<span class="line"><span style="color:#24292E;">                shape</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">LinearGradient</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillEnd&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillStart&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">overlay</span><span style="color:#24292E;">(shape.</span><span style="color:#005CC5;">stroke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">LinearGradient</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillStart&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillEnd&quot;</span><span style="color:#24292E;">)), </span><span style="color:#005CC5;">lineWidth</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">shadow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonStart&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">shadow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonEnd&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                shape</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">LinearGradient</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillStart&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillEnd&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">overlay</span><span style="color:#24292E;">(shape.</span><span style="color:#005CC5;">stroke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">LinearGradient</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillStart&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonFillEnd&quot;</span><span style="color:#24292E;">)), </span><span style="color:#005CC5;">lineWidth</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">shadow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonStart&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#005CC5;">shadow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;likeButtonEnd&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在<code>LikeToggleBackground</code>里面，我们根据<code>isHighlighted</code>属性的选中状态，为图形填充不同的颜色和阴影效果，从而做出丝绸材质的效果。</p><p>最后看看朋友圈信息视图的外层显示风格，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">frame</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">maxWidth</span><span style="color:#E1E4E8;">:.</span><span style="color:#79B8FF;">infinity</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">EdgeInsets</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">top</span><span style="color:#E1E4E8;">: Spacing.medium, </span><span style="color:#79B8FF;">leading</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">bottom</span><span style="color:#E1E4E8;">: Spacing.medium, </span><span style="color:#79B8FF;">trailing</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">background</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BlurView</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">style</span><span style="color:#E1E4E8;">: .systemMaterial))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">clipShape</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">RoundedRectangle</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cornerRadius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">style</span><span style="color:#E1E4E8;">: .continuous))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">shadow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: Color.black.</span><span style="color:#79B8FF;">opacity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.15</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">radius</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">(.horizontal)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">frame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">maxWidth</span><span style="color:#24292E;">:.</span><span style="color:#005CC5;">infinity</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">EdgeInsets</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">top</span><span style="color:#24292E;">: Spacing.medium, </span><span style="color:#005CC5;">leading</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bottom</span><span style="color:#24292E;">: Spacing.medium, </span><span style="color:#005CC5;">trailing</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">background</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BlurView</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">style</span><span style="color:#24292E;">: .systemMaterial))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">clipShape</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">RoundedRectangle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cornerRadius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">style</span><span style="color:#24292E;">: .continuous))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">shadow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: Color.black.</span><span style="color:#005CC5;">opacity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.15</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">radius</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">x</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">y</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">(.horizontal)</span></span></code></pre></div><p>我们调用<code>frame(maxWidth:.infinity)</code>和<code>padding(.horizontal)</code>方法把<code>SwiftUIMomentListItemView</code>的宽度设为设备大小并减去左右两边的留白间距。<code>padding(EdgeInsets())</code>方法用于添加上下的间距。通过把自定义的<code>BlurView</code>传递给<code>background()</code>方法，我们就能实现毛玻璃的显示效果；调用<code>clipShape()</code>方法可以来设置大圆角的效果；而调用<code>shadow()</code>方法就能完成配置阴影的效果，从而使得朋友圈信息视图有浮动起来的特效。</p><p>到此为止，我们已经使用 SwiftUI 实现了整个 View 层了，最后看一下实现的效果，如下动图：</p>`,14),B=l('<h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲，我们介绍了 SwiftUI 管理状态的几种方法，它们之间有些细微的区别，搞清楚它们的工作原理能帮助我们在实践中选择出合适的方法。</p><p>另外，我们还讲述了如何使用 SwiftUI 重新实现 Moments App 的 UI 层。你可能已经发现了，在实现的过程中，我们完全没有改动原有的代码，只是在原有代码的基础上进行扩展。一套灵活的框架能帮助我们不断扩展新功能，并无缝引入新技术。</p><p>作为开发者，学习新东西已经成为我们生活的一部分。我建议你多花点时间学习一下 SwiftUI，因为现在很多新功能（例如 Widget）只能使用 SwiftUI 进行开发了。后续随着 SwiftUI 的不断成熟，再加上用户设备上 iOS 版本的更新，SwiftUI 慢慢会成为 iOS 乃至苹果所有操作系统开发的主流。</p><p><strong>思考题</strong></p><blockquote><p>请问你在实际工作中使用过 SwiftUI 吗？能分享一下你的使用经验吗？</p></blockquote><p>可以把你心得体会写到留言区哦。到此为止，整个课程就学习完毕了，下一讲是结束语，我会把整个课程做一个简单的梳理和串讲，也相当于我们课程的一个小结吧，记住按时来听课哦。</p><p><strong>源码地址</strong></p><blockquote><p>SwiftUI 实现的 PR：<a href="https://github.com/lagoueduCol/iOS-linyongjian/pull/13?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/pull/13</a></p></blockquote>',9);function m(w,h,b,v,f,S){const n=e("Image");return t(),c("div",null,[E,y,i,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1B/Cgp9HWC90WWALsfHAAMRfIFPUjA184.png"}),s(),d,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/44/23/CioPOWC90amACsvfAAHhOfaicTI452.png"}),s(),F,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1B/Cgp9HWC90b-AAGkCAAdM0BD6GgE546.png"}),s(),C,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1B/Cgp9HWC90d-AH97-AAYCP8Dw-HE675.png"}),s(),g,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1C/Cgp9HWC90huAF_a6AAIy6uuggTs430.png"}),s(),u,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M00/44/24/CioPOWC90g2ANeBIAAWrFoNi17Q433.png"}),s(),B])}const A=o(r,[["render",m]]);export{I as __pageData,A as default};
