import{_ as l,j as p,o as r,g as t,k as n,h as a,Q as o,s}from"./chunks/framework.a0d18f64.js";const v=JSON.parse('{"title":"第14讲：Leader选举：如何保证分布式数据的一致性？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3144) 第14讲：Leader 选举：如何保证分布式数据的一致性？.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3144) 第14讲：Leader 选举：如何保证分布式数据的一致性？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3144) 第14讲：Leader 选举：如何保证分布式数据的一致性？.md"},E=o("",7),y=s("p",null,"在集群初始化启动的时候，首先要同步集群中各个服务器上的数据。而在集群中 Leader 服务器崩溃时，需要选举出新的 Leader 而在这一过程中会导致各个服务器上数据的不一致，所以当选举出新的 Leader 服务器后需要进行数据的同步操作。",-1),i=s("h3",{id:"底层实现",tabindex:"-1"},[a("底层实现 "),s("a",{class:"header-anchor",href:"#底层实现","aria-label":'Permalink to "底层实现"'},"​")],-1),d=s("p",null,[a("与上面介绍的一样，我们的底层实现讲解主要围绕 ZooKeeper 集群中数据一致性的底层实现。ZooKeeper 在集群中采用的是多数原则方式，即"),s("strong",null,"当一个事务性的请求导致服务器上的数据发生改变时，ZooKeeper 只要保证集群上的多数机器的数据都正确变更了，就可以保证系统数据的一致性。"),a(" 这是因为在一个 ZooKeeper 集群中，每一个 Follower 服务器都可以看作是 Leader 服务器的数据副本，需要保证集群中大多数机器数据是一致的，这样在集群中出现个别机器故障的时候，ZooKeeper 集群依然能够保证稳定运行。")],-1),F=s("p",null,"在 ZooKeeper 集群服务的运行过程中，数据同步的过程如下图所示。当执行完数据变更的会话请求时，需要对集群中的服务器进行数据同步。",-1),u=o("",25);function g(h,_,L,w,Z,b){const e=p("Image");return r(),t("div",null,[E,n(e,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/22/F4/CgqCHl7siPqAEgUiAAAsZnldQKA321.png"}),a(),y,i,d,F,n(e,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/22/F4/CgqCHl7siSSAGaKOAABaTR2X0Wo408.png"}),a(),u])}const f=l(c,[["render",g]]);export{v as __pageData,f as default};
