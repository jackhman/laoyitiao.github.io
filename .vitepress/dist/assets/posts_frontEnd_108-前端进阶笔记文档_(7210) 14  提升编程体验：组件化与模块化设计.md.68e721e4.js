import{_ as o,j as e,o as t,g as c,k as p,h as a,Q as l,s}from"./chunks/framework.cfb14fe0.js";const B=JSON.parse('{"title":"14提升编程体验：组件化与模块化设计","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/108-前端进阶笔记文档/(7210) 14  提升编程体验：组件化与模块化设计.md","filePath":"posts/frontEnd/108-前端进阶笔记文档/(7210) 14  提升编程体验：组件化与模块化设计.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/108-前端进阶笔记文档/(7210) 14  提升编程体验：组件化与模块化设计.md"},y=l('<h1 id="_14提升编程体验-组件化与模块化设计" tabindex="-1">14提升编程体验：组件化与模块化设计 <a class="header-anchor" href="#_14提升编程体验-组件化与模块化设计" aria-label="Permalink to &quot;14提升编程体验：组件化与模块化设计&quot;">​</a></h1><p>对于写业务代码，很多前端开发都觉得枯燥无趣，且认为容易达到技术瓶颈。其实并不是这样的，几乎所有被我们称之为&quot;技术需求&quot;&quot;技术工具&quot;的开发，它都来自业务的需要，Angular、React、Vue 这类框架也是。</p><p>在前端领域，业务开发就真的只是调整样式、拼接模板、绑定事件、接口请求、更新页面这些内容吗？其实我们可以通过更好的代码设计，来提升写业务代码过程中的编程体验。</p><p>今天我就介绍一下如何对应用进行模块化和组件化的设计。</p><p>其实，在我们开始写重复的代码或是进行较多的复制粘贴时，我们大概就需要考虑对应用进行适当的抽象了，下面我们一起来看一下。</p><h3 id="如何进行应用的模块化设计" tabindex="-1">如何进行应用的模块化设计 <a class="header-anchor" href="#如何进行应用的模块化设计" aria-label="Permalink to &quot;如何进行应用的模块化设计&quot;">​</a></h3><p>当拿到一个设计好的应用之后，为避免出现文件内容过多、功能之间耦合严重等问题，提升项目代码的可用性和可维护性，我们需要对它进行模块拆分。</p><h4 id="应用的模块与层级划分" tabindex="-1">应用的模块与层级划分 <a class="header-anchor" href="#应用的模块与层级划分" aria-label="Permalink to &quot;应用的模块与层级划分&quot;">​</a></h4><p>每个人对于模块的理解都有所区别，因此模块的拆分有很多的方式。</p><ol><li><p>对于简单的管理端应用，可以采用类似 MVC 这样的结构进行模块拆分，比如拆分成视图模块、数据模块、逻辑控制模块等。</p></li><li><p>对于页面内容较丰富的应用，可以结合业务进行更加细致的模块和组件拆分，比如拆分成核心模块、功能模块、公共组件模块等。</p></li><li><p>对于交互和逻辑复杂的应用，可以根据系统架构将应用进行模块和层级的划分，比如拆分成渲染层、数据层、网络层等。</p></li></ol><p>举个例子，常见的客户端和服务端的通信过程可以根据功能模块进行分层，如图：</p>',11),E=l(`<p>对于大型应用的模块划分，很多时候我们还需要结合模块粒度进行由上至下的多次划分，划分的规则可能是上述的规则，也可能跟应用的业务场景相关。</p><p>举个例子，像在线文档这样交互复杂的在线协作应用，可能将模块拆分成核心模块、功能模块、公共组件模块之后，还需要将各个模块进行分层或是二次模块划分处理。比如核心模块可分成渲染层、数据层、网络层，功能模块可分成函数计算模块、复制粘贴模块，等等。公共组件模块可拆分成头像模块、工具栏模块，等等。</p><h4 id="模块划分与设计原则" tabindex="-1">模块划分与设计原则 <a class="header-anchor" href="#模块划分与设计原则" aria-label="Permalink to &quot;模块划分与设计原则&quot;">​</a></h4><p>在通用编程设计领域，架构设计也有很多的设计理念和原则，在这里，我介绍两种。</p><ol><li><p>领域驱动设计（Domain-Driven Design，简称 DDD）：从业务领域的角度来对系统进行领域划分和建模。</p></li><li><p>职责驱动设计（Responsibility-Driven Design，简称 RDD）：从系统内部的角度来进行职责划分、模块拆分以及协作方式。</p></li></ol><p>其中，领域驱动设计（DDD）用于业务领域的划分，在业务复杂的系统架构设计中比较实用。比如电商领域的商品、买家/卖家、订单、优惠券、风控等各个领域的划分。</p><p>但在前端领域中，不同的业务领域通常会通过不同的页面、组件等方式出现，比如商品页面、订单页面、优惠券页面等。因此领域驱动设计（DDD）很少在前端开发中使用，或者可以说在前端领域的应用与前端组件化思想比较相似。</p><p>至于职责驱动设计（RDD），它更倾向从角色和职责的角度来定义和划分模块，与前端的公共组件、工具库、MCV/MVVM 设计、功能模块划分等类似。职责驱动设计（RDD）在功能复杂的系统架构设计中可带来不少的帮助，比如上面提到的在线文档中的各个功能模块的设计中，可以通过对系统进行职责划分以及定义模块之间的边界和协作方式，从而清晰地模块的功能。</p><p>这两种设计模式并不是互斥的，我们可以配合一起使用，比如：</p><ol><li><p>我们可以将与业务逻辑关系密切的功能按照业务领域进行划分和建模，比如电商网站中的购物车组件、商品组件等；</p></li><li><p>对于与前端实现（视图渲染逻辑、与服务端交互逻辑、与用户交互逻辑）相关的功能，我们可以在具体的系统搭建过程中对这些功能进行职责分配和模块划分。</p></li></ol><p>当我们对模块进行划分之后，还需要考虑模块的设计、模块间的依赖关系和通信等问题。其中，最常见的便是如何解决模块间的依赖耦合的问题。</p><h4 id="如何进行模块间依赖的解耦" tabindex="-1">如何进行模块间依赖的解耦 <a class="header-anchor" href="#如何进行模块间依赖的解耦" aria-label="Permalink to &quot;如何进行模块间依赖的解耦&quot;">​</a></h4><p>相信你都听过低耦合、高内聚这样的说法，它们常常被用来描述系统设计中的模块依赖关系，其中：</p><ul><li><p>低耦合基于抽象，使我们的系统更具模块化，不相关的事物不应相互依赖；</p></li><li><p>高内聚则意味着对象专注于单一职责。</p></li></ul><p>低耦合和高内聚是每个设计良好的系统目标，关于具体的设计模式其实也有很多的书籍和课程专门讲述，这里我主要介绍在复杂前端领域中比较常用的依赖解耦方式。</p><p>首先，可以使用依赖倒置进行依赖解耦。依赖倒置原则有两个，包括：</p><ol><li><p>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口；</p></li><li><p>抽象接口不应该依赖于具体实现，而具体实现则应该依赖于抽象接口。</p></li></ol><p>举个例子，数据层模块（<code>DataManager</code>）依赖了网络层模块（<code>NetworkManager</code>）中的发送数据接口（<code>sendData()</code>），还依赖了渲染层模块（<code>RenderManager</code>）的更新界面接口（<code>updateView</code>）。</p><p>我们可以通过 Typescript 定义接口，则我们可以表达为：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">INetworkManagerDependency</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sendData</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IRenderManagerDependency</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">updateView</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataManager</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">networkManagerDependency</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">INetworkManagerDependency</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">renderManagerDependency</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IRenderManagerDependency</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 相关依赖可以保存起来，在需要的时候使用</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">INetworkManagerDependency</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sendData</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IRenderManagerDependency</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">updateView</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">void</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataManager</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">networkManagerDependency</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">INetworkManagerDependency</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">renderManagerDependency</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IRenderManagerDependency</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 相关依赖可以保存起来，在需要的时候使用</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样，我们只按照约定依赖抽象的接口来实现功能调用，就不会依赖具体的模块和细节。</p><p>如果项目中有完善的依赖注入框架，就可以使用项目中的依赖注入体系，像 Angular 框架便自带依赖注入体系。依赖注入在大型项目中比较常见，对于各个模块间的依赖关系管理很实用，比如 VsCode 中就有使用到依赖注入。</p><p>除了使用依赖注入框架，在前端中更常见的依赖解耦方式还包括使用事件进行通信。</p><p>事件驱动其实常常在各种系统设计中会用到，可以解耦目标对象和它的依赖对象。目标只需要通知它的依赖对象，具体怎么处理，由依赖对象自己决定。</p><p>使用事件驱动的方式，可以快速又简单地实现模块间的解耦，但它常常又带来了更多问题，比如：</p><ul><li><p>全局事件满天飞，不知道某个事件来自哪里，被多少地方监听了；</p></li><li><p>无法进行事件订阅的销毁管理，容易存在内存泄漏的问题；</p></li><li><p>事件维护困难，增加和调整参数影响面广，容易触发 Bug。</p></li></ul><p>当然，这些问题也有解决方法，我会在第 18 讲介绍状态管理的时候进行更加详细地介绍。</p><p>除了上面介绍的方式，在进行代码编程过程中，有许多设计模式和理念可以参考，其中有不少的内容对于解耦模块间的依赖很有帮助，比如接口隔离原则、最少的知识原则、迪米特原则等。</p><p>到这里，我介绍了前端应用中模块的划分、设计和解耦，这些架构和系统的设计在大型和复杂项目中更为常见。而在前端日常开发过程中，更多会涉及业务逻辑和界面开发的内容，因此我们常常说要进行组件化设计。</p><h3 id="如何进行应用的组件化设计" tabindex="-1">如何进行应用的组件化设计 <a class="header-anchor" href="#如何进行应用的组件化设计" aria-label="Permalink to &quot;如何进行应用的组件化设计&quot;">​</a></h3><p>首先，我们来定义一下什么是组件。</p><h4 id="组件是怎样划分的" tabindex="-1">组件是怎样划分的 <a class="header-anchor" href="#组件是怎样划分的" aria-label="Permalink to &quot;组件是怎样划分的&quot;">​</a></h4><p>简单来说，组件可以扩展 HTML 元素、封装可重用的代码，比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;">封装后的一个组件可能长这样</span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">component</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">component</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;">封装后的一个组件可能长这样</span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">component</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">component</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>看起来这个组件什么都没有，这是因为我们将逻辑都封装在组件里面了。组件有自身的呈现形式、状态数据和功能逻辑，一只猫也可以是一个组件，如图：</p>`,35),i=l('<p>这只猫虽然是个 Gif 图片，但它可以拖动，也可以鼠标悬浮弹出一个提示框，还可以双击或长按让它消失。这些逻辑我们都可以封装在组件里，通过这样的方式对外屏蔽了实现细节，外部使用的时候只需要引入组件，然后在页面里插入<code>&lt;Kitty&gt;&lt;/Kitty&gt;</code>这样一个组件就可以了。</p><p>一般来说，组件的划分可以通过两个角度来进行。</p><ol><li><p><strong>通过代码复用划分</strong>。我们在写代码的时候，会观察到一些代码在结构和功能上其实是可复用的，这时我们可以把它们封装，以减少重复的代码。</p></li><li><p><strong>通过视觉和交互划分</strong>。通常来说，组件的划分与视觉、交互等密切相关，我们可通过功能、独立性来判断是否适合作为一个组件。</p></li></ol><p>当我们确定要将哪些功能划分成组件之后，就需要定义组件的职责，然后进行组件封装。</p><h4 id="组件是怎样进行封装的" tabindex="-1">组件是怎样进行封装的 <a class="header-anchor" href="#组件是怎样进行封装的" aria-label="Permalink to &quot;组件是怎样进行封装的&quot;">​</a></h4><p>其实组件封装过程和模块的职责定义有些相似，我们首先需要定义这个组件的职责。</p><p>一个称职的组件，它提供了这些能力：</p><ul><li><p>组件内维护自身的数据和状态；</p></li><li><p>组件内维护自身的事件（方法）；</p></li><li><p>对外提供配置接口，来控制展示以及具体功能；</p></li><li><p>通过对外提供查询接口，可获取组件状态和数据。</p></li></ul><p>下面以视频网站为例来简单说明下：</p>',9),d=s("p",null,[s("strong",null,"1"),a(". 组件内维护自身的数据和状态，以图中的小卡片为例子：")],-1),g=s("p",null,"这个小卡片，它维护着自己的数据：封面图、描述、头像、作者，还有一个初始的状态，就是目前我们看到的样子。这些内容保存在组件自己的作用域中，每个卡片组件都拥有自己的数据和状态。",-1),D=s("p",null,[s("strong",null,"2"),a(". 组件内维护自身的事件。")],-1),h=s("p",null,"我们在把鼠标放在卡片上，随着鼠标的位置，顶部会有个小小的进度条，同时封面图会随着进度条的变化而改变，如图：",-1),A=s("p",null,[a("可见，小卡片组件封装有自己的"),s("code",null,"mousemove"),a("事件，以及对应的处理逻辑方法。")],-1),_=s("p",null,[s("strong",null,"3"),a(". 对外提供配置项，来控制展示以及具体功能。我们看另外一个小卡片：")],-1),F=s("p",null,"这个卡片和前面的卡片有些不一样，左下角展示的是视频时长，而不是头像和名字，我们可以通过传入配置项的方式来控制。",-1),u=s("p",null,[s("strong",null,"4"),a(". 通过对外提供查询接口，可获取组件状态。")],-1),m=s("p",null,"大多数时候，组件独立维护着自身的数据和状态。但在一些特殊场景下，父组件或者应用需要知道组件当前的状态，比如在页面中要浮动展示最近聚焦的卡片视频内容，这时候外层需要知道卡片中的具体进度并在浮窗中播放。在这种情况下，我们需要对外提供接口，以供查询。",-1),C=s("p",null,"组件封装也可以包含一定的层级关系，比如卡片组件里也可以包括视频组件，提供点击播放的功能。在第 1 讲的时候我们就说过，现在很多前端应用最终会以组件树的方式呈现，这是因为 DOM 元素本身就是树状结构。",-1),b=s("h3",{id:"应用中的组件树",tabindex:"-1"},[a("应用中的组件树 "),s("a",{class:"header-anchor",href:"#应用中的组件树","aria-label":'Permalink to "应用中的组件树"'},"​")],-1),v=s("p",null,"几乎任意类型的应用界面都可以抽象为一个组件树，例如 Github 上 Vue 主页，我们能看到页面能划分成一块块的内容块，其中有些也可以看作组件。",-1),k=s("p",null,"一般来说，这样的一个管理页面，我们可以抽象成这样的组件树：",-1),M=l(`<p>以代码的方式来表达这样的组件树，会是这个样子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">search</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">search</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nav</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nav</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">aside</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">aside</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">info</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">info</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tab</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tab</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tab</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">container</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">project</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">card</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">project</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">card</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">card</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">list</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">card</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">list</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tab</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">container</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">search</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">search</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nav</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nav</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">aside</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">aside</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">info</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">info</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tab</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tab</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tab</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">container</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">project</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">card</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">project</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">card</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">card</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">card</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tab</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">container</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>在这段代码中，我们不再使用一个个的<code>&lt;div&gt;</code>来拼装成页面，在前端框架中我们会使用自定义组件名字，比如<code>&lt;my-component&gt;</code>，使用自定义组件可快速高效地复用代码，也可以降低维护成本。</p><p>为了让组件与外界环境隔离（样式不会相互影响），像 Vue 这样的框架会通过在 DOM 节点上使用唯一的 ID 标记 DOM 元素，通过节点属性等方式匹配对应的元素并添加样式。</p><p>2011 年推出 Web Components，允许仅使用 HTML、CSS 和 JavaScript 创建可重用的组件，其中包括了自定义元素、Shadow DOM、HTML templates，这三项技术的结合。通过 Web Components，我们可以不依赖前端框架，只使用 HTML/CSS/JavaScript 也能创建在任何现代浏览器中运行的可重用组件。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>到此，相信你认识了前端应用中模块化和组件化的设计过程。实际上，组件也可以看作是带有视图功能的特殊模块，它在前端开发过程中更为常见。</p><p>不管是组件封装还是模块划分，过度的抽象都会导致代码难维护，代码可读性也差。当我们的应用很小，只有简单的功能的时候，我们甚至不需要对这些状态、数据等进行特殊管理，可能几个简单的变量就可以搞定了。</p><p>但随着应用组件数量变多，我们开始有了组件的作用域。当组件需要通信，我们可以通过简单的事件机制、或共享对象的方式来进行交互。</p><p>当我们的项目越做越大，要在上百个状态、上万条数据里要按照想要的方式去展示我们的应用，这时候需要一个合适的状态管理工具，我会在第 18 讲进行介绍。</p><p>这些知识都会比较抽象，需要反复思考和研究才可以掌握。如果在工作中只关注功能的实现和堆叠，很少关注如何通过合理的设计去减少不必要的代码、避免重复性的工作，那么这样的工作只会变得越来越枯燥和烦琐。</p><p>你觉得 Github 网站里，可以划分为多少个模块、怎样进行分层设计呢？欢迎在留言区进行交流。</p>`,12);function f(T,P,q,S,w,I){const n=e("Image");return t(),c("div",null,[y,p(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image6/M01/40/47/Cgp9HWCkdPaAOYUpAAHSIksS1u4374.png"}),a(),E,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/40/34/CioPOWCjiUyANd8cAAAaFJyJEE4529.png"}),a(),i,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/40/34/CioPOWCjiWOAckW_ABmLl6_tZb4891.png"}),a(),d,p(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M01/40/47/Cgp9HWCkdMSAU8e6AAXwnibFNds834.png"}),a(),g,D,h,p(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/40/50/CioPOWCkdJiAZzBQAAUAzCLgdHA630.png"}),a(),A,_,p(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M00/40/50/CioPOWCkdR-Ab8ajAAUXTK1ImMw192.png"}),a(),F,u,m,C,b,v,p(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/40/2C/Cgp9HWCjiYuASInfAAEwgwfk_cU341.png"}),a(),k,p(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/40/4F/CioPOWCkdG6AcX5oAAHegwI1f5M192.png"}),a(),M])}const N=o(r,[["render",f]]);export{B as __pageData,N as default};
