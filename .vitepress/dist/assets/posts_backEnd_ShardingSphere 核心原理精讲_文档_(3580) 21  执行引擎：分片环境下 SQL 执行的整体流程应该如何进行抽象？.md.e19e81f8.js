import{_ as n,D as l,o as p,g as o,J as e,h as t,Q as s}from"./chunks/framework.f67d7268.js";const D=JSON.parse('{"title":"21执行引擎：分片环境下SQL执行的整体流程应该如何进行抽象？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3580) 21  执行引擎：分片环境下 SQL 执行的整体流程应该如何进行抽象？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3580) 21  执行引擎：分片环境下 SQL 执行的整体流程应该如何进行抽象？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3580) 21  执行引擎：分片环境下 SQL 执行的整体流程应该如何进行抽象？.md"},r=s(`<h1 id="_21执行引擎-分片环境下sql执行的整体流程应该如何进行抽象" tabindex="-1">21执行引擎：分片环境下SQL执行的整体流程应该如何进行抽象？ <a class="header-anchor" href="#_21执行引擎-分片环境下sql执行的整体流程应该如何进行抽象" aria-label="Permalink to &quot;21执行引擎：分片环境下SQL执行的整体流程应该如何进行抽象？&quot;">​</a></h1><p>从今天开始，我们将开始一个全新的主题，即 ShardingSphere 的执行引擎（ExecuteEngine）。<strong>一旦我们获取了</strong> 从路由引擎和改写引擎中所生成的 SQL，<strong>执行引擎</strong>就会完成这些SQL在具体数据库中的执行。</p><p>执行引擎是 ShardingSphere 的核心模块，接下来我们将通过三个课时来对其进行全面介绍。今天，我们先讨论在分片环境下，ShardingSphere 对 SQL 执行的整体流程的抽象过程，后两个课时会向你讲解&quot;如何把握 ShardingSphere 中的 Executor 执行模型&quot;。</p><h3 id="shardingsphere-执行引擎总体结构" tabindex="-1">ShardingSphere 执行引擎总体结构 <a class="header-anchor" href="#shardingsphere-执行引擎总体结构" aria-label="Permalink to &quot;ShardingSphere 执行引擎总体结构&quot;">​</a></h3><p>在讲解具体的源代码之前，我们从《17 | 路由引擎：如何理解分片路由核心类 ShardingRouter 的运作机制？》中的 PreparedQueryShardingEngine 和 SimpleQueryShardingEngine 这两个类出发，<strong>看看在 ShardingSphere 中使用它们的入口</strong>。</p><p>我们在<strong>ShardingStatement</strong>类中找到了如下所示的一个 shard 方法，这里用到了 SimpleQueryShardingEngine：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shard</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//从 Connection 中获取 ShardingRuntimeContext 上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">    ShardingRuntimeContext runtimeContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建 SimpleQueryShardingEngine</span></span>
<span class="line"><span style="color:#E1E4E8;">    SimpleQueryShardingEngine shardingEngine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleQueryShardingEngine</span><span style="color:#E1E4E8;">(runtimeContext.</span><span style="color:#B392F0;">getRule</span><span style="color:#E1E4E8;">(), runtimeContext.</span><span style="color:#B392F0;">getProps</span><span style="color:#E1E4E8;">(), runtimeContext.</span><span style="color:#B392F0;">getMetaData</span><span style="color:#E1E4E8;">(), runtimeContext.</span><span style="color:#B392F0;">getParseEngine</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行分片路由并获取路由结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    sqlRouteResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingEngine.</span><span style="color:#B392F0;">shard</span><span style="color:#E1E4E8;">(sql, Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shard</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//从 Connection 中获取 ShardingRuntimeContext 上下文</span></span>
<span class="line"><span style="color:#24292E;">    ShardingRuntimeContext runtimeContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建 SimpleQueryShardingEngine</span></span>
<span class="line"><span style="color:#24292E;">    SimpleQueryShardingEngine shardingEngine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleQueryShardingEngine</span><span style="color:#24292E;">(runtimeContext.</span><span style="color:#6F42C1;">getRule</span><span style="color:#24292E;">(), runtimeContext.</span><span style="color:#6F42C1;">getProps</span><span style="color:#24292E;">(), runtimeContext.</span><span style="color:#6F42C1;">getMetaData</span><span style="color:#24292E;">(), runtimeContext.</span><span style="color:#6F42C1;">getParseEngine</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行分片路由并获取路由结果</span></span>
<span class="line"><span style="color:#24292E;">    sqlRouteResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingEngine.</span><span style="color:#6F42C1;">shard</span><span style="color:#24292E;">(sql, Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而在<strong>ShardingPreparedStatement</strong>中也存在一个类似的 shard 方法。</p><p>从设计模式上讲，ShardingStatement 和 ShardingPreparedStatement 实际上就是很典型的<strong>外观类</strong>，它们把与 SQL 路由和执行的入口类都整合在一起。</p><p>通过阅读<a href="https://github.com/tianyilan12/shardingsphere-demo" target="_blank" rel="noreferrer">源码</a>，我们不难发现在 ShardingStatement 中存在一个 StatementExecutor；而在 ShardingPreparedStatement 中也存在 PreparedStatementExecutor 和 BatchPreparedStatementExecutor，这些类都以 Executor 结尾，<strong>显然这就是我们要找的 SQL 执行引擎的入口类。</strong></p><p>我们发现上述三个 Executor 都位于 sharding-jdbc-core 工程中。</p><p>此外，还有一个与 sharding-core-route 和 sharding-core-rewrite 并列的<strong>sharding-core-execute 工程</strong> ，从命名上看，这个工程应该也与执行引擎相关。果然，我们在这个工程中找到了<strong>ShardingExecuteEngine 类，这是分片执行引擎的入口类</strong>。</p><p>然后，我们又分别找到了 SQLExecuteTemplate 和 SQLExecutePrepareTemplate 类，这两个是典型的<strong>SQL 执行模板类</strong>。</p><p>根据到目前为止对 ShardingSphere 组件设计和代码分层风格的了解，可以想象，在层次关系上，ShardingExecuteEngine 是底层对象，SQLExecuteTemplate 应该依赖于 ShardingExecuteEngine；而 StatementExecutor、PreparedStatementExecutor 和 BatchPreparedStatementExecutor 属于上层对象，应该依赖于 SQLExecuteTemplate。我们通过简单阅读这些核心类之前的引用关系，印证了这种猜想。</p><p>基于以上分析，我们可以给出 SQL 执行引擎的整体结构图（如下图），其中横线以上部分位于 sharding-core-execute 工程，属于底层组件；而直线以下部分位于 sharding-jdbc-core 中，属于上层组件。这种分析源码的能力也是《12 | 从应用到原理：如何高效阅读 ShardingSphere 源码？》中提到的&quot;基于分包设计原则阅读源码&quot;的一种具体表现：</p>`,15),E=s(`<p>ShardingSphere 执行引擎核心类的分层结构图</p><p>另一方面，我们在上图中还看到 SQLExecuteCallback 和 SQLExecutePrepareCallback，显然，它们的作用是完成 SQL 执行过程中的回调处理，这也是一种非常典型的扩展性处理方式。</p><h3 id="shardingexecuteengine" tabindex="-1">ShardingExecuteEngine <a class="header-anchor" href="#shardingexecuteengine" aria-label="Permalink to &quot;ShardingExecuteEngine&quot;">​</a></h3><p>按照惯例，我们还是从位于底层的 ShardingExecuteEngine 开始切入。与路由和改写引擎不同，ShardingExecuteEngine 是 ShardingSphere 中唯一的一个执行引擎，所以直接设计为一个类而非接口，这个类包含了如下的变量和构造函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingExecutorService shardingExecutorService;    </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ListeningExecutorService executorService;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingExecuteEngine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> executorSize) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    shardingExecutorService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingExecutorService</span><span style="color:#E1E4E8;">(executorSize);</span></span>
<span class="line"><span style="color:#E1E4E8;">    executorService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingExecutorService.</span><span style="color:#B392F0;">getExecutorService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingExecutorService shardingExecutorService;    </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ListeningExecutorService executorService;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingExecuteEngine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> executorSize) {</span></span>
<span class="line"><span style="color:#24292E;">    shardingExecutorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingExecutorService</span><span style="color:#24292E;">(executorSize);</span></span>
<span class="line"><span style="color:#24292E;">    executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingExecutorService.</span><span style="color:#6F42C1;">getExecutorService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_1-executorservice" tabindex="-1">1.ExecutorService <a class="header-anchor" href="#_1-executorservice" aria-label="Permalink to &quot;1.ExecutorService&quot;">​</a></h4><p>如上所示，我们可以看出，这里有两个以 ExecutorService 结尾的变量，显然从命名上不难看出它们都是执行器服务，与 JDK 中的 java.util.concurrent.ExecutorService 类似。其中<strong>ListeningExecutorService</strong> 来自 Google 的工具包 Guava；而<strong>ShardingExecutorService</strong>是 ShardingSphere 中的自定义类，包含了 ListeningExecutorService 的构建过程。接下来我们对两者分别展开讲述。</p><ul><li><strong>ShardingExecutorService</strong></li></ul><p>我们发现 ShardingExecutorService 包含了一个 JDK 的 ExecutorService，它的创建过程如下，这里用到的 newCachedThreadPool 和 newFixedThreadPool 都是 JDK 提供的常见方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ExecutorService </span><span style="color:#B392F0;">getExecutorService</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> executorSize, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String nameFormat) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ThreadFactory shardingThreadFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ShardingThreadFactoryBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(nameFormat);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> executorSize </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newCachedThreadPool</span><span style="color:#E1E4E8;">(shardingThreadFactory) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newFixedThreadPool</span><span style="color:#E1E4E8;">(executorSize, shardingThreadFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ExecutorService </span><span style="color:#6F42C1;">getExecutorService</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> executorSize, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String nameFormat) {</span></span>
<span class="line"><span style="color:#24292E;">    ThreadFactory shardingThreadFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ShardingThreadFactoryBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(nameFormat);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> executorSize </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newCachedThreadPool</span><span style="color:#24292E;">(shardingThreadFactory) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(executorSize, shardingThreadFactory);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>ListeningExecutorService</strong></li></ul><p>由于 JDK 中普通线程池返回的 Future 功能比较单一，所以 Guava 提供了 ListeningExecutorService 对其进行装饰。我们可以通过 ListeningExecutorService 对 ExecutorService 做一层包装，返回一个 ListenableFuture 实例，而 ListenableFuture 又是继承自 Future，扩展了一个 addListener 监听方法，这样当任务执行完成就会主动回调该方法。ListeningExecutorService 的构建过程如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">executorService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MoreExecutors.</span><span style="color:#B392F0;">listeningDecorator</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getExecutorService</span><span style="color:#E1E4E8;">(executorSize, nameFormat));</span></span>
<span class="line"><span style="color:#E1E4E8;">oreExecutors.</span><span style="color:#B392F0;">addDelayedShutdownHook</span><span style="color:#E1E4E8;">(executorService, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MoreExecutors.</span><span style="color:#6F42C1;">listeningDecorator</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getExecutorService</span><span style="color:#24292E;">(executorSize, nameFormat));</span></span>
<span class="line"><span style="color:#24292E;">oreExecutors.</span><span style="color:#6F42C1;">addDelayedShutdownHook</span><span style="color:#24292E;">(executorService, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span></span></code></pre></div><p>明确了执行器 ExecutorService 之后，我们<strong>回到 ShardingExecuteEngine 类</strong>，该类以 groupExecute 方法为入口，这个方法参数比较多，也单独都列了一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">inputGroups：输入组</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">firstCallback：第一次分片执行回调</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">callback：分片执行回调</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">serial：是否使用多线程进行执行</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;I&gt;：输入值类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;O&gt;：返回值类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> 执行结果</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">SQLException：抛出异常</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">groupExecute</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingExecuteGroup</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> inputGroups, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> firstCallback, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> callback, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> serial)</span></span>
<span class="line"><span style="color:#E1E4E8;">    throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inputGroups.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> serial </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serialExecute</span><span style="color:#E1E4E8;">(inputGroups, firstCallback, callback) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parallelExecute</span><span style="color:#E1E4E8;">(inputGroups, firstCallback, callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">inputGroups：输入组</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">firstCallback：第一次分片执行回调</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">callback：分片执行回调</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">serial：是否使用多线程进行执行</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;I&gt;：输入值类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;O&gt;：返回值类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 执行结果</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">SQLException：抛出异常</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">groupExecute</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingExecuteGroup</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> inputGroups, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> firstCallback, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> callback, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> serial)</span></span>
<span class="line"><span style="color:#24292E;">    throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inputGroups.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> serial </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serialExecute</span><span style="color:#24292E;">(inputGroups, firstCallback, callback) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parallelExecute</span><span style="color:#24292E;">(inputGroups, firstCallback, callback);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的分片执行组 ShardingExecuteGroup 对象实际上就是一个包含输入信息的列表，而上述 groupExecute 方法的输入是一个 ShardingExecuteGroup 的集合。通过判断输入参数 serial 是否为 true，上述代码流程分别转向了<strong>serialExecute 和 parallelExecute 这两个代码分支</strong>，接下来我来分别讲解一下这两个代码分支。</p><h4 id="_2-serialexecute" tabindex="-1">2.SerialExecute <a class="header-anchor" href="#_2-serialexecute" aria-label="Permalink to &quot;2.SerialExecute&quot;">​</a></h4><p>我们先来看 serialExecute 方法，顾名思义，该方法用于串行执行的场景：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serialExecute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingExecuteGroup</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> inputGroups, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> firstCallback,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;ShardingExecuteGroup&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt;&gt; inputGroupsIterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputGroups.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取第一个输入的ShardingExecuteGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">    ShardingExecuteGroup&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt; firstInputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputGroupsIterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//通过第一个回调 firstCallback 完成同步执行的 syncGroupExecute</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(</span><span style="color:#B392F0;">syncGroupExecute</span><span style="color:#E1E4E8;">(firstInputs, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> firstCallback </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> callback </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> firstCallback));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//对剩下的 ShardingExecuteGroup，通过回调 callback 逐个同步执行 syncGroupExecute</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ShardingExecuteGroup&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt; each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(inputGroupsIterator)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">syncGroupExecute</span><span style="color:#E1E4E8;">(each, callback));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serialExecute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingExecuteGroup</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> inputGroups, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> firstCallback,</span></span>
<span class="line"><span style="color:#24292E;">                                     </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;ShardingExecuteGroup&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt;&gt; inputGroupsIterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputGroups.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取第一个输入的ShardingExecuteGroup</span></span>
<span class="line"><span style="color:#24292E;">    ShardingExecuteGroup&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt; firstInputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputGroupsIterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//通过第一个回调 firstCallback 完成同步执行的 syncGroupExecute</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(</span><span style="color:#6F42C1;">syncGroupExecute</span><span style="color:#24292E;">(firstInputs, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> firstCallback </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> callback </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> firstCallback));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//对剩下的 ShardingExecuteGroup，通过回调 callback 逐个同步执行 syncGroupExecute</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ShardingExecuteGroup&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt; each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(inputGroupsIterator)) {</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">syncGroupExecute</span><span style="color:#24292E;">(each, callback));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码的基本流程是获取第一个输入的 ShardingExecuteGroup，通过第一个回调 firstCallback 完成同步执行的 syncGroupExecute 方法。然后对剩下的 ShardingExecuteGroup，通过回调 callback 逐个执行 syncGroupExecute 方法。这里的 syncGroupExecute 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">syncGroupExecute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingExecuteGroup</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> executeGroup, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> callback.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(executeGroup.</span><span style="color:#B392F0;">getInputs</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, ShardingExecuteDataMap.</span><span style="color:#B392F0;">getDataMap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">syncGroupExecute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingExecuteGroup</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> executeGroup, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> callback.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(executeGroup.</span><span style="color:#6F42C1;">getInputs</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, ShardingExecuteDataMap.</span><span style="color:#6F42C1;">getDataMap</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到同步执行的过程实际上是交给了 ShardingGroupExecuteCallback 回调接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingGroupExecuteCallback</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(Collection&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">inputs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isTrunkThread</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingExecuteDataMap</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingGroupExecuteCallback</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(Collection&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">inputs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isTrunkThread</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingExecuteDataMap</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 ShardingExecuteDataMap 相当于一个用于 SQL 执行的数据字典，这些数据字典保存在 ThreadLocal 中，从而确保了线程安全。我们可以根据当前的执行线程获取对应的 DataMap 对象。</p><h4 id="_3-parallelexecute" tabindex="-1">3.ParallelExecute <a class="header-anchor" href="#_3-parallelexecute" aria-label="Permalink to &quot;3.ParallelExecute&quot;">​</a></h4><p>这样，关于串行执行的流程就介绍完了，接下来我们来看并行执行的 parallelExecute 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parallelExecute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingExecuteGroup</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> inputGroups, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> firstCallback,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                       </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;ShardingExecuteGroup&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt;&gt; inputGroupsIterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputGroups.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取第一个输入的 ShardingExecuteGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">    ShardingExecuteGroup&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt; firstInputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputGroupsIterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//通过 asyncGroupExecute 执行异步回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;ListenableFuture&lt;Collection&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt;&gt;&gt; restResultFutures </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">asyncGroupExecute</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(inputGroupsIterator), callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取执行结果并组装返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getGroupResults</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">syncGroupExecute</span><span style="color:#E1E4E8;">(firstInputs, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> firstCallback </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> callback </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> firstCallback), restResultFutures);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parallelExecute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingExecuteGroup</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> inputGroups, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> firstCallback,</span></span>
<span class="line"><span style="color:#24292E;">                                       </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;ShardingExecuteGroup&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt;&gt; inputGroupsIterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputGroups.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取第一个输入的 ShardingExecuteGroup</span></span>
<span class="line"><span style="color:#24292E;">    ShardingExecuteGroup&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt; firstInputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputGroupsIterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//通过 asyncGroupExecute 执行异步回调</span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;ListenableFuture&lt;Collection&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt;&gt;&gt; restResultFutures </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">asyncGroupExecute</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(inputGroupsIterator), callback);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取执行结果并组装返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getGroupResults</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">syncGroupExecute</span><span style="color:#24292E;">(firstInputs, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> firstCallback </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> callback </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> firstCallback), restResultFutures);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意到这里有一个异步执行方法 asyncGroupExecute，传入参数是一个 ShardingExecuteGroup 列表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ListenableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">asyncGroupExecute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingExecuteGroup</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> inputGroups, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;ListenableFuture&lt;Collection&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt;&gt;&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ShardingExecuteGroup&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt; each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> inputGroups) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">asyncGroupExecute</span><span style="color:#E1E4E8;">(each, callback));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ListenableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">asyncGroupExecute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingExecuteGroup</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> inputGroups, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> callback) {</span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;ListenableFuture&lt;Collection&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt;&gt;&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ShardingExecuteGroup&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt; each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> inputGroups) {</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">asyncGroupExecute</span><span style="color:#24292E;">(each, callback));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个方法中针对每个传入的 ShardingExecuteGroup，再次调用一个重载的异步 asyncGroupExecute 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ListenableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">asyncGroupExecute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingExecuteGroup</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> inputGroup, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingGroupExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">I, O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; dataMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ShardingExecuteDataMap.</span><span style="color:#B392F0;">getDataMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> executorService.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Callable&lt;Collection&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt;&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> callback.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(inputGroup.</span><span style="color:#B392F0;">getInputs</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, dataMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ListenableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">asyncGroupExecute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingExecuteGroup</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> inputGroup, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingGroupExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">I, O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> callback) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; dataMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ShardingExecuteDataMap.</span><span style="color:#6F42C1;">getDataMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> executorService.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Callable&lt;Collection&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt;&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> callback.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(inputGroup.</span><span style="color:#6F42C1;">getInputs</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, dataMap);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，作为异步执行方法，这里就会使用 Guava 的 ListeningExecutorService 来提交一个异步执行的任务并返回一个 ListenableFuture，而这个异步执行的任务就是具体的回调。</p><p>最后，我们来看 parallelExecute 方法的最后一句，即调用 getGroupResults 方法获取执行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getGroupResults</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> firstResults, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ListenableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">O</span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> restFutures) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(firstResults);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ListenableFuture&lt;Collection&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt;&gt; each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> restFutures) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(each.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InterruptedException | ExecutionException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throwException</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getGroupResults</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> firstResults, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ListenableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">O</span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> restFutures) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(firstResults);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ListenableFuture&lt;Collection&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt;&gt; each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> restFutures) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(each.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InterruptedException | ExecutionException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throwException</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>熟悉 Future 用法的同学对上述代码应该不会陌生，我们遍历 ListenableFuture，然后调动它的 get 方法同步等待返回结果，最后当所有的结果都获取到之后组装成一个结果列表并返回，这种写法在使用 Future 时非常常见。</p><p>我们回过头来看，无论是 serialExecute 方法还是 parallelExecute 方法，都会从 ShardingExecuteGroup 中获取第一个 firstInputs 元素并进行执行，然后剩下的再进行同步或异步执行。ShardingSphere 这样使用线程的背后有其独特的设计思路。考虑到当前线程同样也是一种可用资源，<strong>让第一个任务由当前线程进行执行就可以充分利用当前线程，从而最大化线程的利用率。</strong></p><p>至此，关于 ShardingExecuteEngine 类的介绍就告一段落。作为执行引擎，ShardingExecuteEngine 所做的事情就是提供一个多线程的执行环境。<strong>在系统设计上，这也是在日常开发过程中可以参考的一个技巧。我们可以设计并实现一个多线程执行环境，这个环境不需要完成具体的业务操作，而只需要负责执行传入的回调函数。ShardingSphere 中的ShardingExecuteEngine 就是提供了这样一种环境</strong>，同样的实现方式在其他诸如 Spring 等开源框架中也都可以看到。</p><p>接下来，就让我们来看一下 ShardingSphere 如何通过回调完成 SQL 的真正执行。</p><h3 id="回调接口-shardinggroupexecutecallback" tabindex="-1">回调接口 ShardingGroupExecuteCallback <a class="header-anchor" href="#回调接口-shardinggroupexecutecallback" aria-label="Permalink to &quot;回调接口 ShardingGroupExecuteCallback&quot;">​</a></h3><p>回调接口 ShardingGroupExecuteCallback 的定义非常简单：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingGroupExecuteCallback</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(Collection&lt;</span><span style="color:#F97583;">I</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">inputs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isTrunkThread</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingExecuteDataMap</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingGroupExecuteCallback</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">O</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(Collection&lt;</span><span style="color:#D73A49;">I</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">inputs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isTrunkThread</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingExecuteDataMap</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该接口根据传入的泛型 inputs 集合和 shardingExecuteDataMap 完成真正的 SQL 执行操作。在 ShardingSphere 中，使用匿名方法实现 ShardingGroupExecuteCallback 接口的地方有很多，但显式实现这一接口的只有一个类，即 SQLExecuteCallback 类，这是一个<strong>抽象类</strong>，它的 execute 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">StatementExecuteUnit</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> statementExecuteUnits, </span></span>
<span class="line"><span style="color:#E1E4E8;">                                   </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isTrunkThread, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> shardingExecuteDataMap) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (StatementExecuteUnit each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> statementExecuteUnits) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">execute0</span><span style="color:#E1E4E8;">(each, isTrunkThread, shardingExecuteDataMap));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">StatementExecuteUnit</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> statementExecuteUnits, </span></span>
<span class="line"><span style="color:#24292E;">                                   </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isTrunkThread, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> shardingExecuteDataMap) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (StatementExecuteUnit each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> statementExecuteUnits) {</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">execute0</span><span style="color:#24292E;">(each, isTrunkThread, shardingExecuteDataMap));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于每个输入的 StatementExecuteUnit 数据结构，上述 execute 方法会进一步执行一个 execute0 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">execute0</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> StatementExecuteUnit statementExecuteUnit, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isTrunkThread, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> shardingExecuteDataMap) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//设置 ExecutorExceptionHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">     ExecutorExceptionHandler.</span><span style="color:#B392F0;">setExceptionThrown</span><span style="color:#E1E4E8;">(isExceptionThrown);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取 DataSourceMetaData，这里用到了缓存机制</span></span>
<span class="line"><span style="color:#E1E4E8;">     DataSourceMetaData dataSourceMetaData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDataSourceMetaData</span><span style="color:#E1E4E8;">(statementExecuteUnit.</span><span style="color:#B392F0;">getStatement</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMetaData</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//初始化 SQLExecutionHook</span></span>
<span class="line"><span style="color:#E1E4E8;">     SQLExecutionHook sqlExecutionHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SPISQLExecutionHook</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            RouteUnit routeUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statementExecuteUnit.</span><span style="color:#B392F0;">getRouteUnit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//启动执行钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">            sqlExecutionHook.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(routeUnit.</span><span style="color:#B392F0;">getDataSourceName</span><span style="color:#E1E4E8;">(), routeUnit.</span><span style="color:#B392F0;">getSqlUnit</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSql</span><span style="color:#E1E4E8;">(), routeUnit.</span><span style="color:#B392F0;">getSqlUnit</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">(), dataSourceMetaData, isTrunkThread, shardingExecuteDataMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//执行 SQL</span></span>
<span class="line"><span style="color:#E1E4E8;">            T result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeSQL</span><span style="color:#E1E4E8;">(routeUnit.</span><span style="color:#B392F0;">getSqlUnit</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSql</span><span style="color:#E1E4E8;">(), statementExecuteUnit.</span><span style="color:#B392F0;">getStatement</span><span style="color:#E1E4E8;">(), statementExecuteUnit.</span><span style="color:#B392F0;">getConnectionMode</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//成功钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">            sqlExecutionHook.</span><span style="color:#B392F0;">finishSuccess</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//失败钩子</span></span>
<span class="line"><span style="color:#E1E4E8;">            sqlExecutionHook.</span><span style="color:#B392F0;">finishFailure</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//异常处理</span></span>
<span class="line"><span style="color:#E1E4E8;">            ExecutorExceptionHandler.</span><span style="color:#B392F0;">handleException</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">execute0</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StatementExecuteUnit statementExecuteUnit, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isTrunkThread, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> shardingExecuteDataMap) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//设置 ExecutorExceptionHandler</span></span>
<span class="line"><span style="color:#24292E;">     ExecutorExceptionHandler.</span><span style="color:#6F42C1;">setExceptionThrown</span><span style="color:#24292E;">(isExceptionThrown);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取 DataSourceMetaData，这里用到了缓存机制</span></span>
<span class="line"><span style="color:#24292E;">     DataSourceMetaData dataSourceMetaData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDataSourceMetaData</span><span style="color:#24292E;">(statementExecuteUnit.</span><span style="color:#6F42C1;">getStatement</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMetaData</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//初始化 SQLExecutionHook</span></span>
<span class="line"><span style="color:#24292E;">     SQLExecutionHook sqlExecutionHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SPISQLExecutionHook</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            RouteUnit routeUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statementExecuteUnit.</span><span style="color:#6F42C1;">getRouteUnit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//启动执行钩子</span></span>
<span class="line"><span style="color:#24292E;">            sqlExecutionHook.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(routeUnit.</span><span style="color:#6F42C1;">getDataSourceName</span><span style="color:#24292E;">(), routeUnit.</span><span style="color:#6F42C1;">getSqlUnit</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSql</span><span style="color:#24292E;">(), routeUnit.</span><span style="color:#6F42C1;">getSqlUnit</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">(), dataSourceMetaData, isTrunkThread, shardingExecuteDataMap);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//执行 SQL</span></span>
<span class="line"><span style="color:#24292E;">            T result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeSQL</span><span style="color:#24292E;">(routeUnit.</span><span style="color:#6F42C1;">getSqlUnit</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSql</span><span style="color:#24292E;">(), statementExecuteUnit.</span><span style="color:#6F42C1;">getStatement</span><span style="color:#24292E;">(), statementExecuteUnit.</span><span style="color:#6F42C1;">getConnectionMode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//成功钩子</span></span>
<span class="line"><span style="color:#24292E;">            sqlExecutionHook.</span><span style="color:#6F42C1;">finishSuccess</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//失败钩子</span></span>
<span class="line"><span style="color:#24292E;">            sqlExecutionHook.</span><span style="color:#6F42C1;">finishFailure</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//异常处理</span></span>
<span class="line"><span style="color:#24292E;">            ExecutorExceptionHandler.</span><span style="color:#6F42C1;">handleException</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>这段代码每一句的含义都比较明确，这里引入了一个 ExecutorExceptionHandler 用于异常处理，同时也引入了一个 SPISQLExecutionHook 对执行过程嵌入钩子。关于基于 SPI 机制的 Hook 实现机制，我们在前面的 SQL 解析和路由引擎中已经看到过很多次，这里不再赘述。我们看到，真正执行 SQL 的过程是交给 executeSQL 模板方法进行完成，需要 SQLExecuteCallback 的各个子类实现这一模板方法。</p><p>在 ShardingSphere 中，没有提供任何的 SQLExecuteCallback 实现类，但大量采用匿名方法来完成 executeSQL 模板方法的实现。例如，在下一课时《22 | 执行引擎：如何把握 ShardingSphere 中的 Executor 执行模型？（上）》的 StatementExecutor 类中，executeQuery 方法就创建了一个 SQLExecuteCallback 匿名实现方法，用来完成查询操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">QueryResult</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isExceptionThrown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExecutorExceptionHandler.</span><span style="color:#B392F0;">isExceptionThrown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//创建 SQLExecuteCallback 并执行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">SQLExecuteCallback&lt;</span><span style="color:#F97583;">QueryResult</span><span style="color:#E1E4E8;">&gt; executeCallback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> SQLExecuteCallback&lt;</span><span style="color:#F97583;">QueryResult</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#B392F0;">getDatabaseType</span><span style="color:#E1E4E8;">(), isExceptionThrown) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> QueryResult </span><span style="color:#B392F0;">executeSQL</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Statement </span><span style="color:#FFAB70;">statement</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConnectionMode </span><span style="color:#FFAB70;">connectionMode</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getQueryResult</span><span style="color:#E1E4E8;">(sql, statement, connectionMode);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//执行 SQLExecuteCallback 并返回结果</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeCallback</span><span style="color:#E1E4E8;">(executeCallback);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">QueryResult</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isExceptionThrown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExecutorExceptionHandler.</span><span style="color:#6F42C1;">isExceptionThrown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//创建 SQLExecuteCallback 并执行查询</span></span>
<span class="line"><span style="color:#24292E;">SQLExecuteCallback&lt;</span><span style="color:#D73A49;">QueryResult</span><span style="color:#24292E;">&gt; executeCallback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> SQLExecuteCallback&lt;</span><span style="color:#D73A49;">QueryResult</span><span style="color:#24292E;">&gt;(</span><span style="color:#6F42C1;">getDatabaseType</span><span style="color:#24292E;">(), isExceptionThrown) {</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> QueryResult </span><span style="color:#6F42C1;">executeSQL</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Statement </span><span style="color:#E36209;">statement</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConnectionMode </span><span style="color:#E36209;">connectionMode</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getQueryResult</span><span style="color:#24292E;">(sql, statement, connectionMode);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//执行 SQLExecuteCallback 并返回结果</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeCallback</span><span style="color:#24292E;">(executeCallback);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="模板类-sqlexecutetemplate" tabindex="-1">模板类 SQLExecuteTemplate <a class="header-anchor" href="#模板类-sqlexecutetemplate" aria-label="Permalink to &quot;模板类 SQLExecuteTemplate&quot;">​</a></h3><p>在 ShardingSphere 执行引擎的底层组件中，还有一个类需要展开，这就是<strong>模板类 SQLExecuteTemplate</strong>，它是 ShardingExecuteEngine 的直接使用者。从命名上看，这是一个典型的模板工具类，定位上就像 Spring 中的 JdbcTemplate 一样。但凡这种模板工具类，其实现一般都比较简单，基本就是对底层对象的简单封装。</p><p>SQLExecuteTemplate 也不例外，它要做的就是对 ShardingExecuteEngine 中的入口方法进行封装和处理。ShardingExecuteEngine 的核心方法就只有一个，即 executeGroup 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeGroup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingExecuteGroup</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends StatementExecuteUnit</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> sqlExecuteGroups, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> firstCallback, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLExecuteCallback</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> executeEngine.</span><span style="color:#B392F0;">groupExecute</span><span style="color:#E1E4E8;">((Collection) sqlExecuteGroups, firstCallback, callback, serial);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ExecutorExceptionHandler.</span><span style="color:#B392F0;">handleException</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeGroup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingExecuteGroup</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends StatementExecuteUnit</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> sqlExecuteGroups, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> firstCallback, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLExecuteCallback</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> callback) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> executeEngine.</span><span style="color:#6F42C1;">groupExecute</span><span style="color:#24292E;">((Collection) sqlExecuteGroups, firstCallback, callback, serial);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorExceptionHandler.</span><span style="color:#6F42C1;">handleException</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这个方法所做的事情就是直接调用 ShardingExecuteEngine 的 groupExecute 方法完成具体的执行工作，并添加了异常处理机制而已。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>我们可以从今天的内容中，提炼出来许多技巧，并应用于日常开发过程中。<strong>比较实用的一个技巧是：我们可以使用 Guava 提供的 ListeningExecutorService 来强化 JDK 中基于普通 Future 的执行器服务 ExecutorService</strong>。同时，我们也看到了基于 Callback 的系统扩展机制，我们可以基于这种扩展机制，构建一个独立的运行环境，从而把与业务相关的所有操作通过回调得以实现。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本课时是介绍 ShardingSphere 执行引擎的第一部分内容，介绍了分片环境下 SQL 执行流程的抽象过程。我们先引出了<strong>执行引擎</strong> 这个核心类，然后分别从<strong>执行器服务</strong> 、<strong>执行回调</strong> 以及<strong>执行模板</strong>类等维度对整个执行流程展开了详细讲述。</p><p>最后这里给你留一道思考题：在基于多线程技术实现 Executor 时，ShardingSphere 应用了哪些技巧？欢迎你在留言区与大家讨论，我将 一 一 点评解答。</p><p>下一课时，我们继续介绍 ShardingSphere 的执行引擎，我们将重点关注 SQL 的执行器 StatementExecutor。</p>`,59);function y(i,u,g,F,d,h){const a=l("Image");return p(),o("div",null,[r,e(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/45/D4/CgqCHl9Dei6AMqoCAACpyMuj2MI683.png"}),t(),E])}const S=n(c,[["render",y]]);export{D as __pageData,S as default};
