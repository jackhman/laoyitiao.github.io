import{_ as o,j as e,o as t,g as c,k as l,h as n,Q as p,s}from"./chunks/framework.cfb14fe0.js";const O=JSON.parse('{"title":"35Linux的IO模式：electpollepoll有什么区别？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/重学操作系统_文档/(4646) 35  Linux 的 IO 模式：electpollepoll 有什么区别？.md","filePath":"posts/backEnd/重学操作系统_文档/(4646) 35  Linux 的 IO 模式：electpollepoll 有什么区别？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/重学操作系统_文档/(4646) 35  Linux 的 IO 模式：electpollepoll 有什么区别？.md"},E=p('<h1 id="_35linux的io模式-electpollepoll有什么区别" tabindex="-1">35Linux的IO模式：electpollepoll有什么区别？ <a class="header-anchor" href="#_35linux的io模式-electpollepoll有什么区别" aria-label="Permalink to &quot;35Linux的IO模式：electpollepoll有什么区别？&quot;">​</a></h1><p>我们总是想方设法地提升系统的性能。操作系统层面不能给予处理业务逻辑太多帮助，但对于 I/O 性能，操作系统可以通过底层的优化，帮助应用做到极致。</p><p>这一讲我将和你一起讨论 I/O 模型。为了引发你更多的思考，我将同步/异步、阻塞/非阻塞等概念滞后讲解。<strong>我们先回到一个最基本的问题：如果有一台服务器，需要响应大量的请求，操作系统如何去架构以适应这样高并发的诉求</strong>。</p><p>说到架构，就离不开操作系统提供给应用程序的系统调用。我们今天要介绍的 select/poll/epoll 刚好是操作系统提供给应用的三类处理 I/O 的系统调用。这三类系统调用有非常强的代表性，这一讲我会围绕它们，以及处理并发和 I/O 多路复用，为你讲解操作系统的 I/O 模型。</p><h3 id="从网卡到操作系统" tabindex="-1">从网卡到操作系统 <a class="header-anchor" href="#从网卡到操作系统" aria-label="Permalink to &quot;从网卡到操作系统&quot;">​</a></h3><p>为了弄清楚高并发网络场景是如何处理的，我们先来看一个最基本的内容：<strong>当数据到达网卡之后，操作系统会做哪些事情</strong>？</p><p>网络数据到达网卡之后，首先需要把数据拷贝到内存。拷贝到内存的工作往往不需要消耗 CPU 资源，而是通过 DMA 模块直接进行内存映射。之所以这样做，是因为网卡没有大量的内存空间，只能做简单的缓冲，所以必须赶紧将它们保存下来。</p><p>Linux 中用一个双向链表作为缓冲区，你可以观察下图中的 Buffer，看上去像一个有很多个凹槽的线性结构，每个凹槽（节点）可以存储一个封包，这个封包可以从网络层看（IP 封包），也可以从传输层看（TCP 封包）。操作系统不断地从 Buffer 中取出数据，数据通过一个协议栈，你可以把它理解成很多个协议的集合。协议栈中数据封包找到对应的协议程序处理完之后，就会形成 Socket 文件。</p>',8),y=p('<p>!</p><p>如果高并发的请求量级实在太大，有可能把 Buffer 占满，此时，操作系统就会拒绝服务。网络上有一种著名的攻击叫作<strong>拒绝服务攻击</strong> ，就是利用的这个原理。<strong>操作系统拒绝服务，实际上是一种保护策略。通过拒绝服务，避免系统内部应用因为并发量太大而雪崩</strong>。</p><p>如上图所示，传入网卡的数据被我称为 Frames。一个 Frame 是数据链路层的传输单位（或封包）。现代的网卡通常使用 DMA 技术，将 Frame 写入缓冲区（Buffer），然后在触发 CPU 中断交给操作系统处理。操作系统从缓冲区中不断取出 Frame，通过协进栈（具体的协议）进行还原。</p><p>在 UNIX 系的操作系统中，一个 Socket 文件内部类似一个双向的管道。因此，非常适用于进程间通信。在网络当中，本质上并没有发生变化。网络中的 Socket 一端连接 Buffer， 一端连接应用------也就是进程。网卡的数据会进入 Buffer，Buffer 经过协议栈的处理形成 Socket 结构。通过这样的设计，进程读取 Socket 文件，可以从 Buffer 中对应节点读走数据。</p><p>对于 TCP 协议，Socket 文件可以用源端口、目标端口、源 IP、目标 IP 进行区别。不同的 Socket 文件，对应着 Buffer 中的不同节点。进程们读取数据的时候从 Buffer 中读取，写入数据的时候向 Buffer 中写入。通过这样一种结构，无论是读和写，进程都可以快速定位到自己对应的节点。</p><p>以上就是我们对操作系统和网络接口交互的一个基本讨论。接下来，我们讨论一下作为一个编程模型的 Socket。</p><h3 id="socket-编程模型" tabindex="-1">Socket 编程模型 <a class="header-anchor" href="#socket-编程模型" aria-label="Permalink to &quot;Socket 编程模型&quot;">​</a></h3><p>通过前面讲述，我们知道 Socket 在操作系统中，有一个非常具体的从 Buffer 到文件的实现。但是对于进程而言，Socket 更多是一种编程的模型。接下来我们讨论作为编程模型的 Socket。</p>',8),i=s("p",null,[n("如上图所示，Socket 连接了应用和协议，如果应用层的程序想要传输数据，就创建一个 Socket。应用向 Socket 中写入数据，相当于将数据发送给了另一个应用。应用从 Socket 中读取数据，相当于接收另一个应用发送的数据。而具体的操作就是由 Socket 进行封装。具体来说，"),s("strong",null,"对于 UNIX 系的操作系统，是利用 Socket 文件系统，Socket 是一种特殊的文件------每个都是一个双向的管道。一端是应用，一端是缓冲"),n("区。")],-1),F=s("p",null,"那么作为一个服务端的应用，如何知道有哪些 Socket 呢？也就是，哪些客户端连接过来了呢？这是就需要一种特殊类型的 Socket，也就是服务端 Socket 文件。",-1),d=s("p",null,"如上图所示，当有客户端连接服务端时，服务端 Socket 文件中会写入这个客户端 Socket 的文件描述符。进程可以通过 accept() 方法，从服务端 Socket 文件中读出客户端的 Socket 文件描述符，从而拿到客户端的 Socket 文件。",-1),_=s("p",null,"程序员实现一个网络服务器的时候，会先手动去创建一个服务端 Socket 文件。服务端的 Socket 文件依然会存在操作系统内核之中，并且会绑定到某个 IP 地址和端口上。以后凡是发送到这台机器、目标 IP 地址和端口号的连接请求，在形成了客户端 Socket 文件之后，文件的文件描述符都会被写入到服务端的 Socket 文件中。应用只要调用 accept 方法，就可以拿到这些客户端的 Socket 文件描述符，这样服务端的应用就可以方便地知道有哪些客户端连接了进来。",-1),A=s("p",null,"而每个客户端对这个应用而言，都是一个文件描述符。如果需要读取某个客户端的数据，就读取这个客户端对应的 Socket 文件。如果要向某个特定的客户端发送数据，就写入这个客户端的 Socket 文件。",-1),D=s("p",null,"以上就是 Socket 的编程模型。",-1),f=s("h3",{id:"i-o-多路复用",tabindex:"-1"},[n("I/O 多路复用 "),s("a",{class:"header-anchor",href:"#i-o-多路复用","aria-label":'Permalink to "I/O 多路复用"'},"​")],-1),u=s("p",null,[n("在上面的讨论当中，进程拿到了它关注的所有 Socket，也称作关注的集合（Intersting Set）。如下图所示，这种过程相当于进程从所有的 Socket 中，筛选出了自己关注的一个子集，但是这时还有一个问题没有解决："),s("strong",null,"进程如何监听关注集合的状态变化，比如说在有数据进来，如何通知到这个进程"),n("？")],-1),C=s("p",null,[n("其实更准确地说，一个线程需要处理所有关注的 Socket 产生的变化，或者说消息。实际上一个线程要处理很多个文件的 I/O。"),s("strong",null,"所有关注的 Socket 状态发生了变化，都由一个线程去处理，构成了 I/O 的多路复用问题"),n("。如下图所示：")],-1),g=s("p",null,"处理 I/O 多路复用的问题，需要操作系统提供内核级别的支持。Linux 下有三种提供 I/O 多路复用的 API，分别是：",-1),B=s("ul",null,[s("li",null,[s("p",null,"select")]),s("li",null,[s("p",null,"poll")]),s("li",null,[s("p",null,"epoll")])],-1),h=s("p",null,"如下图所示，内核了解网络的状态。因此不难知道具体发生了什么消息，比如内核知道某个 Socket 文件状态发生了变化。但是内核如何知道该把哪个消息给哪个进程呢？",-1),k=p(`<p><strong>一个 Socket 文件，可以由多个进程使用；而一个进程，也可以使用多个 Socket 文件</strong> 。进程和 Socket 之间是多对多的关系。<strong>另一方面，一个 Socket 也会有不同的事件类型</strong>。因此操作系统很难判断，将哪样的事件给哪个进程。</p><p>这样<strong>在进程内部就需要一个数据结构来描述自己会关注哪些 Socket 文件的哪些事件（读、写、异常等</strong> ）。通常有两种考虑方向，<strong>一种是利用线性结构</strong> ，比如说数组、链表等，这类结构的查询需要遍历。每次内核产生一种消息，就遍历这个线性结构。看看这个消息是不是进程关注的？<strong>另一种是索引结构</strong>，内核发生了消息可以通过索引结构马上知道这个消息进程关不关注。</p><h4 id="select" tabindex="-1">select() <a class="header-anchor" href="#select" aria-label="Permalink to &quot;select()&quot;">​</a></h4><p>select 和 poll 都采用线性结构，select 允许用户传入 3 个集合。如下面这段程序所示：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fd_set read_fd_set, write_fd_set, error_fd_set;</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(..., </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">read_fd_set, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">write_fd_set, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">error_fd_set); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fd_set read_fd_set, write_fd_set, error_fd_set;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(..., </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">read_fd_set, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">write_fd_set, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">error_fd_set); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>每次 select 操作会阻塞当前线程，在阻塞期间所有操作系统产生的每个消息，都会通过遍历的手段查看是否在 3 个集合当中</strong> 。上面程序<code>read_fd_set</code>中放入的是当数据可以读取时进程关心的 Socket；<code>write_fd_set</code>是当数据可以写入时进程关心的 Socket；<code>error_fd_set</code>是当发生异常时进程关心的 Socket。</p><p>**用户程序可以根据不同集合中是否有某个 Socket 判断发生的消息类型，**程序如下所示：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fd_set read_fd_set, write_fd_set, error_fd_set;</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(..., </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">read_fd_set, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">write_fd_set, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">error_fd_set); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> FD_SETSIZE; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">FD_ISSET</span><span style="color:#E1E4E8;"> (i, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">read_fd_set)){</span></span>
<span class="line"><span style="color:#6A737D;">          // Socket可以读取</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">FD_ISSET</span><span style="color:#E1E4E8;">(i, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">write_fd_set)) {</span></span>
<span class="line"><span style="color:#6A737D;">          // Socket可以写入</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">FD_ISSET</span><span style="color:#E1E4E8;">(i, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">error_fd_set)) {</span></span>
<span class="line"><span style="color:#6A737D;">          // Socket发生错误</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fd_set read_fd_set, write_fd_set, error_fd_set;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(..., </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">read_fd_set, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">write_fd_set, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">error_fd_set); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> FD_SETSIZE; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">FD_ISSET</span><span style="color:#24292E;"> (i, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">read_fd_set)){</span></span>
<span class="line"><span style="color:#6A737D;">          // Socket可以读取</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">FD_ISSET</span><span style="color:#24292E;">(i, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">write_fd_set)) {</span></span>
<span class="line"><span style="color:#6A737D;">          // Socket可以写入</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">FD_ISSET</span><span style="color:#24292E;">(i, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">error_fd_set)) {</span></span>
<span class="line"><span style="color:#6A737D;">          // Socket发生错误</span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面程序中的 FD_SETSIZE 是一个系统的默认设置，通常是 1024。可以看出，select 模式能够一次处理的文件描述符是有上限的，也就是 FD_SETSIZE。当并发请求过多的时候， select 就无能为力了。但是对单台机器而言，1024 个并发已经是一个非常大的流量了。</p><p>接下来我给出一个完整的、用 select 实现的服务端程序供你参考，如下所示：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;errno.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/Socket.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;netinet/in.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;netdb.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PORT</span><span style="color:#E1E4E8;">    5555</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MAXMSG</span><span style="color:#E1E4E8;">  512</span></span>
<span class="line"><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#B392F0;">read_from_client</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> filedes)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> buffer[MAXMSG];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nbytes;</span></span>
<span class="line"><span style="color:#E1E4E8;">  nbytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;"> (filedes, buffer, MAXMSG);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nbytes </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">      /* Read error. */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">perror</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;read&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nbytes </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">    /* End-of-file. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">      /* Data read. */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fprintf</span><span style="color:#E1E4E8;"> (stderr, </span><span style="color:#9ECBFF;">&quot;Server: got message: \`</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make_Socket</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">uint16_t</span><span style="color:#E1E4E8;"> port);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sock;</span></span>
<span class="line"><span style="color:#E1E4E8;">  fd_set active_fd_set, read_fd_set;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sockaddr_in</span><span style="color:#E1E4E8;"> clientname;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> size;</span></span>
<span class="line"><span style="color:#6A737D;">  /* Create the Socket and set it up to accept connections. */</span></span>
<span class="line"><span style="color:#E1E4E8;">  sock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make_Socket</span><span style="color:#E1E4E8;"> (PORT);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;"> (sock, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">perror</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;listen&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">  /* Initialize the set of active Sockets. */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">FD_ZERO</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">active_fd_set);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">FD_SET</span><span style="color:#E1E4E8;"> (sock, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">active_fd_set);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">      /* Block until input arrives on one or more active Sockets. */</span></span>
<span class="line"><span style="color:#E1E4E8;">      read_fd_set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> active_fd_set;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;"> (FD_SETSIZE, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">read_fd_set, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">perror</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;select&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">      /* Service all the Sockets with input pending. */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> FD_SETSIZE; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">FD_ISSET</span><span style="color:#E1E4E8;"> (i, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">read_fd_set))</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> sock)</span></span>
<span class="line"><span style="color:#E1E4E8;">              {</span></span>
<span class="line"><span style="color:#6A737D;">                /* Connection request on original Socket. */</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;"> (clientname);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;"> (sock,</span></span>
<span class="line"><span style="color:#E1E4E8;">                              (</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sockaddr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">clientname,</span></span>
<span class="line"><span style="color:#E1E4E8;">                              </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">size);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">perror</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;accept&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">fprintf</span><span style="color:#E1E4E8;"> (stderr,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#9ECBFF;">&quot;Server: connect from host </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">, port </span><span style="color:#79B8FF;">%hd</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#B392F0;">inet_ntoa</span><span style="color:#E1E4E8;"> (clientname.sin_addr),</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#B392F0;">ntohs</span><span style="color:#E1E4E8;"> (clientname.sin_port));</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">FD_SET</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">active_fd_set);</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">              {</span></span>
<span class="line"><span style="color:#6A737D;">                /* Data arriving on an already-connected Socket. */</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">read_from_client</span><span style="color:#E1E4E8;"> (i) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;"> (i);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">FD_CLR</span><span style="color:#E1E4E8;"> (i, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">active_fd_set);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;errno.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/Socket.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;netinet/in.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;netdb.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PORT</span><span style="color:#24292E;">    5555</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MAXMSG</span><span style="color:#24292E;">  512</span></span>
<span class="line"><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#6F42C1;">read_from_client</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> filedes)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> buffer[MAXMSG];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nbytes;</span></span>
<span class="line"><span style="color:#24292E;">  nbytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;"> (filedes, buffer, MAXMSG);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nbytes </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">      /* Read error. */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;read&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nbytes </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">    /* End-of-file. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">      /* Data read. */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fprintf</span><span style="color:#24292E;"> (stderr, </span><span style="color:#032F62;">&quot;Server: got message: \`</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, buffer);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make_Socket</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">uint16_t</span><span style="color:#24292E;"> port);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sock;</span></span>
<span class="line"><span style="color:#24292E;">  fd_set active_fd_set, read_fd_set;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sockaddr_in</span><span style="color:#24292E;"> clientname;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> size;</span></span>
<span class="line"><span style="color:#6A737D;">  /* Create the Socket and set it up to accept connections. */</span></span>
<span class="line"><span style="color:#24292E;">  sock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make_Socket</span><span style="color:#24292E;"> (PORT);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;"> (sock, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;listen&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">  /* Initialize the set of active Sockets. */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">FD_ZERO</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">active_fd_set);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">FD_SET</span><span style="color:#24292E;"> (sock, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">active_fd_set);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">      /* Block until input arrives on one or more active Sockets. */</span></span>
<span class="line"><span style="color:#24292E;">      read_fd_set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> active_fd_set;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;"> (FD_SETSIZE, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">read_fd_set, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;select&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">      /* Service all the Sockets with input pending. */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> FD_SETSIZE; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">FD_ISSET</span><span style="color:#24292E;"> (i, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">read_fd_set))</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> sock)</span></span>
<span class="line"><span style="color:#24292E;">              {</span></span>
<span class="line"><span style="color:#6A737D;">                /* Connection request on original Socket. */</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;"> (clientname);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;"> (sock,</span></span>
<span class="line"><span style="color:#24292E;">                              (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sockaddr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">clientname,</span></span>
<span class="line"><span style="color:#24292E;">                              </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">size);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                  {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;accept&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;"> (EXIT_FAILURE);</span></span>
<span class="line"><span style="color:#24292E;">                  }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">fprintf</span><span style="color:#24292E;"> (stderr,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#032F62;">&quot;Server: connect from host </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">, port </span><span style="color:#005CC5;">%hd</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6F42C1;">inet_ntoa</span><span style="color:#24292E;"> (clientname.sin_addr),</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6F42C1;">ntohs</span><span style="color:#24292E;"> (clientname.sin_port));</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">FD_SET</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">new</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">active_fd_set);</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">              {</span></span>
<span class="line"><span style="color:#6A737D;">                /* Data arriving on an already-connected Socket. */</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">read_from_client</span><span style="color:#24292E;"> (i) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                  {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;"> (i);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">FD_CLR</span><span style="color:#24292E;"> (i, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">active_fd_set);</span></span>
<span class="line"><span style="color:#24292E;">                  }</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="poll" tabindex="-1">poll() <a class="header-anchor" href="#poll" aria-label="Permalink to &quot;poll()&quot;">​</a></h4><p>从写程序的角度来看，select 并不是一个很好的编程模型。一个好的编程模型应该直达本质，当网络请求发生状态变化的时候，核心是会发生事件。<strong>一个好的编程模型应该是直接抽象成消息：用户不需要用 select 来设置自己的集合，而是可以通过系统的 API 直接拿到对应的消息，从而处理对应的文件描述符</strong>。</p><p>比如下面这段伪代码就是一个更好的编程模型，具体的分析如下：</p><ul><li><p>poll 是一个阻塞调用，它将某段时间内操作系统内发生的且进程关注的消息告知用户程序；</p></li><li><p>用户程序通过直接调用 poll 函数拿到消息；</p></li><li><p>poll 函数的第一个参数告知内核 poll 关注哪些 Socket 及消息类型；</p></li><li><p>poll 调用后，经过一段时间的等待（阻塞），就拿到了是一个消息的数组；</p></li><li><p>通过遍历这个数组中的消息，能够知道关联的文件描述符和消息的类型；</p></li><li><p>通过消息类型判断接下来该进行读取还是写入操作；</p></li><li><p>通过文件描述符，可以进行实际地读、写、错误处理。</p></li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  events </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">(fds, ...)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(evt in events) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> evt.fd;</span></span>
<span class="line"><span style="color:#E1E4E8;">    type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> evt.revents;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(type </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> POLLIN ) {</span></span>
<span class="line"><span style="color:#6A737D;">       // 有数据需要读，读取fd中的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(type </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> POLLOUT) {</span></span>
<span class="line"><span style="color:#6A737D;">       // 可以写入数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  events </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(fds, ...)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(evt in events) {</span></span>
<span class="line"><span style="color:#24292E;">    fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> evt.fd;</span></span>
<span class="line"><span style="color:#24292E;">    type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> evt.revents;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(type </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> POLLIN ) {</span></span>
<span class="line"><span style="color:#6A737D;">       // 有数据需要读，读取fd中的数据</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(type </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> POLLOUT) {</span></span>
<span class="line"><span style="color:#6A737D;">       // 可以写入数据</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>poll 虽然优化了编程模型，但是从性能角度分析，它和 select 差距不大。因为内核在产生一个消息之后，依然需要遍历 poll 关注的所有文件描述符来确定这条消息是否跟用户程序相关。</p><h4 id="epoll" tabindex="-1">epoll <a class="header-anchor" href="#epoll" aria-label="Permalink to &quot;epoll&quot;">​</a></h4><p>为了解决上述问题，<strong>epoll 通过更好的方案实现了从操作系统订阅消息。epoll 将进程关注的文件描述符存入一棵二叉搜索树，通常是红黑树的实现</strong>。在这棵红黑树当中，Key 是 Socket 的编号，值是这个 Socket 关注的消息。因此，当内核发生了一个事件：比如 Socket 编号 1000 可以读取。这个时候，可以马上从红黑树中找到进程是否关注这个事件。</p><p><strong>另外当有关注的事件发生时，epoll 会先放到一个队列当中。当用户调用</strong> <code>epoll_wait</code>时候，就会从队列中返回一个消息。epoll 函数本身是一个构造函数，只用来创建红黑树和队列结构。<code>epoll_wait</code>调用后，如果队列中没有消息，也可以马上返回。因此<code>epoll</code>是一个非阻塞模型。</p><p><strong>总结一下，select/poll 是阻塞模型，epoll 是非阻塞模型</strong> 。<strong>当然，并不是说非阻塞模型性能就更好。在多数情况下，epoll 性能更好是因为内部有红黑树的实现</strong>。</p><p>最后我再贴一段用 epoll 实现的 Socket 服务给你做参考，这段程序的作者将这段代码放到了 Public Domain，你以后看到公有领域的代码可以放心地使用。</p><p>下面这段程序跟之前 select 的原理一致，对于每一个新的客户端连接，都使用 accept 拿到这个连接的文件描述符，并且创建一个客户端的 Socket。然后通过<code>epoll_ctl</code>将客户端的文件描述符和关注的消息类型放入 epoll 的红黑树。操作系统每次监测到一个新的消息产生，就会通过红黑树对比这个消息是不是进程关注的（当然这段代码你看不到，因为它在内核程序中）。</p><p><strong>非阻塞模型的核心价值，并不是性能更好。当真的高并发来临的时候，所有的 CPU 资源，所有的网络资源可能都会被用完。这个时候无论是阻塞还是非阻塞，结果都不会相差太大</strong>。（前提是程序没有写错）。</p><p><code>epoll</code>有 2 个最大的优势：</p><ol><li><p>内部使用红黑树减少了内核的比较操作；</p></li><li><p>对于程序员而言，非阻塞的模型更容易处理各种各样的情况。程序员习惯了写出每一条语句就可以马上得到结果，这样不容易出 Bug。</p></li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Asynchronous Socket server - accepting multiple clients concurrently,</span></span>
<span class="line"><span style="color:#6A737D;">	// multiplexing the connections with epoll.</span></span>
<span class="line"><span style="color:#6A737D;">	//</span></span>
<span class="line"><span style="color:#6A737D;">	// Eli Bendersky [http://eli.thegreenplace.net]</span></span>
<span class="line"><span style="color:#6A737D;">	// This code is in the public domain.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;assert.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;errno.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdbool.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdint.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/epoll.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/Socket.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;utils.h&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MAXFDS</span><span style="color:#E1E4E8;"> 16 * 1024</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">INITIAL_ACK</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">WAIT_FOR_MSG</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">IN_MSG</span><span style="color:#E1E4E8;"> } ProcessingState;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SENDBUF_SIZE</span><span style="color:#E1E4E8;"> 1024</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  ProcessingState state;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;"> sendbuf[SENDBUF_SIZE];</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sendbuf_end;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sendptr;</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#79B8FF;">peer_state_t</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#6A737D;">	// Each peer is globally identified by the file descriptor (fd) it&#39;s connected</span></span>
<span class="line"><span style="color:#6A737D;">	// on. As long as the peer is connected, the fd is unique to it. When a peer</span></span>
<span class="line"><span style="color:#6A737D;">	// disconnects, a new peer may connect and get the same fd. on_peer_connected</span></span>
<span class="line"><span style="color:#6A737D;">	// should initialize the state properly to remove any trace of the old peer on</span></span>
<span class="line"><span style="color:#6A737D;">	// the same fd.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">peer_state_t</span><span style="color:#E1E4E8;"> global_state[MAXFDS];</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#6A737D;">	// Callbacks (on_XXX functions) return this status to the main loop; the status</span></span>
<span class="line"><span style="color:#6A737D;">	// instructs the loop about the next steps for the fd for which the callback was</span></span>
<span class="line"><span style="color:#6A737D;">	// invoked.</span></span>
<span class="line"><span style="color:#6A737D;">	// want_read=true means we want to keep monitoring this fd for reading.</span></span>
<span class="line"><span style="color:#6A737D;">	// want_write=true means we want to keep monitoring this fd for writing.</span></span>
<span class="line"><span style="color:#6A737D;">	// When both are false it means the fd is no longer needed and can be closed.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> want_read;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> want_write;</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#6A737D;">	// These constants make creating fd_status_t values less verbose.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> fd_status_R </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {.want_read </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, .want_write </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> fd_status_W </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {.want_read </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, .want_write </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> fd_status_RW </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {.want_read </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, .want_write </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> fd_status_NORW </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {.want_read </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, .want_write </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on_peer_connected</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sockaddr_in</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">peer_addr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                              </span><span style="color:#79B8FF;">socklen_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">peer_addr_len</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(sockfd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> MAXFDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">report_peer_connected</span><span style="color:#E1E4E8;">(peer_addr, peer_addr_len);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#6A737D;">	  // Initialize state to send back a &#39;*&#39; to the peer immediately.</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#79B8FF;">peer_state_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> peerstate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">global_state[sockfd];</span></span>
<span class="line"><span style="color:#E1E4E8;">	  peerstate-&gt;state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> INITIAL_ACK;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  peerstate-&gt;sendbuf[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  peerstate-&gt;sendptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  peerstate-&gt;sendbuf_end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#6A737D;">	  // Signal that this Socket is ready for writing now.</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_W;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on_peer_ready_recv</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(sockfd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> MAXFDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#79B8FF;">peer_state_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> peerstate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">global_state[sockfd];</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (peerstate-&gt;state </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> INITIAL_ACK </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">	      peerstate-&gt;sendptr </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> peerstate-&gt;sendbuf_end) {</span></span>
<span class="line"><span style="color:#6A737D;">	    // Until the initial ACK has been sent to the peer, there&#39;s nothing we</span></span>
<span class="line"><span style="color:#6A737D;">	    // want to receive. Also, wait until all data staged for sending is sent to</span></span>
<span class="line"><span style="color:#6A737D;">	    // receive more data.</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_W;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;"> buf[</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nbytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recv</span><span style="color:#E1E4E8;">(sockfd, buf, sizeof buf, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nbytes </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">	    // The peer disconnected.</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_NORW;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nbytes </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (errno </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> EAGAIN </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> errno </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> EWOULDBLOCK) {</span></span>
<span class="line"><span style="color:#6A737D;">	      // The Socket is not *really* ready for recv; wait until it is.</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_R;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;recv&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> ready_to_send </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nbytes; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (peerstate-&gt;state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> INITIAL_ACK:</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;can&#39;t reach here&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> WAIT_FOR_MSG:</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (buf[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;^&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        peerstate-&gt;state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IN_MSG;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> IN_MSG:</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (buf[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;$&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        peerstate-&gt;state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WAIT_FOR_MSG;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(peerstate-&gt;sendbuf_end </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> SENDBUF_SIZE);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        peerstate-&gt;sendbuf[peerstate-&gt;sendbuf_end</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buf[i] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        ready_to_send </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#6A737D;">	  // Report reading readiness iff there&#39;s nothing to send to the peer as a</span></span>
<span class="line"><span style="color:#6A737D;">	  // result of the latest recv.</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;">){.want_read </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ready_to_send,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                       .want_write </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ready_to_send};</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on_peer_ready_send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(sockfd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> MAXFDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#79B8FF;">peer_state_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> peerstate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">global_state[sockfd];</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (peerstate-&gt;sendptr </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> peerstate-&gt;sendbuf_end) {</span></span>
<span class="line"><span style="color:#6A737D;">	    // Nothing to send.</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_RW;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sendlen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> peerstate-&gt;sendbuf_end </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> peerstate-&gt;sendptr;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nsent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(sockfd, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">peerstate-&gt;sendbuf[peerstate-&gt;sendptr], sendlen, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nsent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (errno </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> EAGAIN </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> errno </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> EWOULDBLOCK) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_W;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;send&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nsent </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> sendlen) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    peerstate-&gt;sendptr </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> nsent;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_W;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	    // Everything was sent successfully; reset the send queue.</span></span>
<span class="line"><span style="color:#E1E4E8;">	    peerstate-&gt;sendptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    peerstate-&gt;sendbuf_end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#6A737D;">	    // Special-case state transition in if we were in INITIAL_ACK until now.</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (peerstate-&gt;state </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> INITIAL_ACK) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      peerstate-&gt;state </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WAIT_FOR_MSG;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fd_status_R;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char**</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">setvbuf</span><span style="color:#E1E4E8;">(stdout, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, _IONBF, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> portnum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9090</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (argc </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    portnum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">atoi</span><span style="color:#E1E4E8;">(argv[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Serving on port </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, portnum);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> listener_sockfd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listen_inet_Socket</span><span style="color:#E1E4E8;">(portnum);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">make_Socket_non_blocking</span><span style="color:#E1E4E8;">(listener_sockfd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> epollfd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_create1</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (epollfd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_create1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_event</span><span style="color:#E1E4E8;"> accept_event;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  accept_event.data.fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> listener_sockfd;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  accept_event.events </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">(epollfd, EPOLL_CTL_ADD, listener_sockfd, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">accept_event) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_ctl EPOLL_CTL_ADD&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_event</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> events </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calloc</span><span style="color:#E1E4E8;">(MAXFDS, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(struct epoll_event));</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (events </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#B392F0;">die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unable to allocate memory for epoll_events&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nready </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_wait</span><span style="color:#E1E4E8;">(epollfd, events, MAXFDS, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nready; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (events[i].events </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> EPOLLERR) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_wait returned EPOLLERR&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (events[i].data.fd </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> listener_sockfd) {</span></span>
<span class="line"><span style="color:#6A737D;">	        // The listening Socket is ready; this means a new peer is connecting.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sockaddr_in</span><span style="color:#E1E4E8;"> peer_addr;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#79B8FF;">socklen_t</span><span style="color:#E1E4E8;"> peer_addr_len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(peer_addr);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> newsockfd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(listener_sockfd, (</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sockaddr</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">peer_addr,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                               </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">peer_addr_len);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newsockfd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (errno </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> EAGAIN </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> errno </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> EWOULDBLOCK) {</span></span>
<span class="line"><span style="color:#6A737D;">	            // This can happen due to the nonblocking Socket mode; in this</span></span>
<span class="line"><span style="color:#6A737D;">	            // case don&#39;t do anything, but print a notice (since these events</span></span>
<span class="line"><span style="color:#6A737D;">	            // are extremely rare and interesting to observe...)</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accept returned EAGAIN or EWOULDBLOCK</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accept&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#B392F0;">make_Socket_non_blocking</span><span style="color:#E1E4E8;">(newsockfd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newsockfd </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> MAXFDS) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Socket fd (</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">) &gt;= MAXFDS (</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">)&quot;</span><span style="color:#E1E4E8;">, newsockfd, MAXFDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">	              </span><span style="color:#B392F0;">on_peer_connected</span><span style="color:#E1E4E8;">(newsockfd, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">peer_addr, peer_addr_len);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_event</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	          event.data.fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newsockfd;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.want_read) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            event.events </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.want_write) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            event.events </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">(epollfd, EPOLL_CTL_ADD, newsockfd, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">event) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_ctl EPOLL_CTL_ADD&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	        // A peer Socket is ready.</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (events[i].events </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> EPOLLIN) {</span></span>
<span class="line"><span style="color:#6A737D;">	          // Ready for reading.</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> events[i].data.fd;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on_peer_ready_recv</span><span style="color:#E1E4E8;">(fd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_event</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	          event.data.fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fd;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.want_read) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            event.events </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.want_write) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            event.events </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.events </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Socket </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> closing</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, fd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">(epollfd, EPOLL_CTL_DEL, fd, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	              </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_ctl EPOLL_CTL_DEL&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	            }</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(fd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">(epollfd, EPOLL_CTL_MOD, fd, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">event) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_ctl EPOLL_CTL_MOD&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (events[i].events </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> EPOLLOUT) {</span></span>
<span class="line"><span style="color:#6A737D;">	          // Ready for writing.</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> events[i].data.fd;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#79B8FF;">fd_status_t</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on_peer_ready_send</span><span style="color:#E1E4E8;">(fd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">epoll_event</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">	          event.data.fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fd;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.want_read) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            event.events </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status.want_write) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            event.events </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.events </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Socket </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> closing</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, fd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">(epollfd, EPOLL_CTL_DEL, fd, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	              </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_ctl EPOLL_CTL_DEL&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	            }</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(fd);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">epoll_ctl</span><span style="color:#E1E4E8;">(epollfd, EPOLL_CTL_MOD, fd, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">event) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#B392F0;">perror_die</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;epoll_ctl EPOLL_CTL_MOD&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Asynchronous Socket server - accepting multiple clients concurrently,</span></span>
<span class="line"><span style="color:#6A737D;">	// multiplexing the connections with epoll.</span></span>
<span class="line"><span style="color:#6A737D;">	//</span></span>
<span class="line"><span style="color:#6A737D;">	// Eli Bendersky [http://eli.thegreenplace.net]</span></span>
<span class="line"><span style="color:#6A737D;">	// This code is in the public domain.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;assert.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;errno.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdbool.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdint.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/epoll.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/Socket.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;utils.h&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MAXFDS</span><span style="color:#24292E;"> 16 * 1024</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">INITIAL_ACK</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">WAIT_FOR_MSG</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">IN_MSG</span><span style="color:#24292E;"> } ProcessingState;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SENDBUF_SIZE</span><span style="color:#24292E;"> 1024</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	  ProcessingState state;</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;"> sendbuf[SENDBUF_SIZE];</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sendbuf_end;</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sendptr;</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#005CC5;">peer_state_t</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6A737D;">	// Each peer is globally identified by the file descriptor (fd) it&#39;s connected</span></span>
<span class="line"><span style="color:#6A737D;">	// on. As long as the peer is connected, the fd is unique to it. When a peer</span></span>
<span class="line"><span style="color:#6A737D;">	// disconnects, a new peer may connect and get the same fd. on_peer_connected</span></span>
<span class="line"><span style="color:#6A737D;">	// should initialize the state properly to remove any trace of the old peer on</span></span>
<span class="line"><span style="color:#6A737D;">	// the same fd.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">peer_state_t</span><span style="color:#24292E;"> global_state[MAXFDS];</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6A737D;">	// Callbacks (on_XXX functions) return this status to the main loop; the status</span></span>
<span class="line"><span style="color:#6A737D;">	// instructs the loop about the next steps for the fd for which the callback was</span></span>
<span class="line"><span style="color:#6A737D;">	// invoked.</span></span>
<span class="line"><span style="color:#6A737D;">	// want_read=true means we want to keep monitoring this fd for reading.</span></span>
<span class="line"><span style="color:#6A737D;">	// want_write=true means we want to keep monitoring this fd for writing.</span></span>
<span class="line"><span style="color:#6A737D;">	// When both are false it means the fd is no longer needed and can be closed.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> want_read;</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> want_write;</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6A737D;">	// These constants make creating fd_status_t values less verbose.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> fd_status_R </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {.want_read </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, .want_write </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> fd_status_W </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {.want_read </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, .want_write </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> fd_status_RW </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {.want_read </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, .want_write </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> fd_status_NORW </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {.want_read </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, .want_write </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_peer_connected</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sockaddr_in</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">peer_addr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	                              </span><span style="color:#005CC5;">socklen_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">peer_addr_len</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(sockfd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAXFDS);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">report_peer_connected</span><span style="color:#24292E;">(peer_addr, peer_addr_len);</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6A737D;">	  // Initialize state to send back a &#39;*&#39; to the peer immediately.</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#005CC5;">peer_state_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> peerstate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">global_state[sockfd];</span></span>
<span class="line"><span style="color:#24292E;">	  peerstate-&gt;state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> INITIAL_ACK;</span></span>
<span class="line"><span style="color:#24292E;">	  peerstate-&gt;sendbuf[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	  peerstate-&gt;sendptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	  peerstate-&gt;sendbuf_end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6A737D;">	  // Signal that this Socket is ready for writing now.</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_W;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_peer_ready_recv</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(sockfd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAXFDS);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#005CC5;">peer_state_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> peerstate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">global_state[sockfd];</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (peerstate-&gt;state </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> INITIAL_ACK </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">	      peerstate-&gt;sendptr </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> peerstate-&gt;sendbuf_end) {</span></span>
<span class="line"><span style="color:#6A737D;">	    // Until the initial ACK has been sent to the peer, there&#39;s nothing we</span></span>
<span class="line"><span style="color:#6A737D;">	    // want to receive. Also, wait until all data staged for sending is sent to</span></span>
<span class="line"><span style="color:#6A737D;">	    // receive more data.</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_W;</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;"> buf[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nbytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recv</span><span style="color:#24292E;">(sockfd, buf, sizeof buf, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nbytes </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">	    // The peer disconnected.</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_NORW;</span></span>
<span class="line"><span style="color:#24292E;">	  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nbytes </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (errno </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> EAGAIN </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> errno </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> EWOULDBLOCK) {</span></span>
<span class="line"><span style="color:#6A737D;">	      // The Socket is not *really* ready for recv; wait until it is.</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_R;</span></span>
<span class="line"><span style="color:#24292E;">	    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;recv&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> ready_to_send </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nbytes; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (peerstate-&gt;state) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> INITIAL_ACK:</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;can&#39;t reach here&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> WAIT_FOR_MSG:</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (buf[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;^&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        peerstate-&gt;state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IN_MSG;</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> IN_MSG:</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (buf[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;$&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        peerstate-&gt;state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WAIT_FOR_MSG;</span></span>
<span class="line"><span style="color:#24292E;">	      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(peerstate-&gt;sendbuf_end </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> SENDBUF_SIZE);</span></span>
<span class="line"><span style="color:#24292E;">	        peerstate-&gt;sendbuf[peerstate-&gt;sendbuf_end</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buf[i] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	        ready_to_send </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#6A737D;">	  // Report reading readiness iff there&#39;s nothing to send to the peer as a</span></span>
<span class="line"><span style="color:#6A737D;">	  // result of the latest recv.</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;">){.want_read </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ready_to_send,</span></span>
<span class="line"><span style="color:#24292E;">	                       .want_write </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ready_to_send};</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_peer_ready_send</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(sockfd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAXFDS);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#005CC5;">peer_state_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> peerstate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">global_state[sockfd];</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (peerstate-&gt;sendptr </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> peerstate-&gt;sendbuf_end) {</span></span>
<span class="line"><span style="color:#6A737D;">	    // Nothing to send.</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_RW;</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sendlen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> peerstate-&gt;sendbuf_end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> peerstate-&gt;sendptr;</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nsent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(sockfd, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">peerstate-&gt;sendbuf[peerstate-&gt;sendptr], sendlen, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nsent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (errno </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> EAGAIN </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> errno </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> EWOULDBLOCK) {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_W;</span></span>
<span class="line"><span style="color:#24292E;">	    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;send&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nsent </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> sendlen) {</span></span>
<span class="line"><span style="color:#24292E;">	    peerstate-&gt;sendptr </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> nsent;</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_W;</span></span>
<span class="line"><span style="color:#24292E;">	  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	    // Everything was sent successfully; reset the send queue.</span></span>
<span class="line"><span style="color:#24292E;">	    peerstate-&gt;sendptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	    peerstate-&gt;sendbuf_end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6A737D;">	    // Special-case state transition in if we were in INITIAL_ACK until now.</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (peerstate-&gt;state </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> INITIAL_ACK) {</span></span>
<span class="line"><span style="color:#24292E;">	      peerstate-&gt;state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WAIT_FOR_MSG;</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd_status_R;</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char**</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argv</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">setvbuf</span><span style="color:#24292E;">(stdout, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, _IONBF, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> portnum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9090</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (argc </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    portnum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">atoi</span><span style="color:#24292E;">(argv[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Serving on port </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, portnum);</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> listener_sockfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listen_inet_Socket</span><span style="color:#24292E;">(portnum);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">make_Socket_non_blocking</span><span style="color:#24292E;">(listener_sockfd);</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> epollfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_create1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (epollfd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_create1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_event</span><span style="color:#24292E;"> accept_event;</span></span>
<span class="line"><span style="color:#24292E;">	  accept_event.data.fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> listener_sockfd;</span></span>
<span class="line"><span style="color:#24292E;">	  accept_event.events </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">(epollfd, EPOLL_CTL_ADD, listener_sockfd, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">accept_event) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_ctl EPOLL_CTL_ADD&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_event</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> events </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(MAXFDS, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(struct epoll_event));</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (events </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6F42C1;">die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unable to allocate memory for epoll_events&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nready </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_wait</span><span style="color:#24292E;">(epollfd, events, MAXFDS, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nready; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (events[i].events </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> EPOLLERR) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_wait returned EPOLLERR&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (events[i].data.fd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> listener_sockfd) {</span></span>
<span class="line"><span style="color:#6A737D;">	        // The listening Socket is ready; this means a new peer is connecting.</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sockaddr_in</span><span style="color:#24292E;"> peer_addr;</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#005CC5;">socklen_t</span><span style="color:#24292E;"> peer_addr_len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(peer_addr);</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> newsockfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(listener_sockfd, (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sockaddr</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">peer_addr,</span></span>
<span class="line"><span style="color:#24292E;">	                               </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">peer_addr_len);</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newsockfd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (errno </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> EAGAIN </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> errno </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> EWOULDBLOCK) {</span></span>
<span class="line"><span style="color:#6A737D;">	            // This can happen due to the nonblocking Socket mode; in this</span></span>
<span class="line"><span style="color:#6A737D;">	            // case don&#39;t do anything, but print a notice (since these events</span></span>
<span class="line"><span style="color:#6A737D;">	            // are extremely rare and interesting to observe...)</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accept returned EAGAIN or EWOULDBLOCK</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accept&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#6F42C1;">make_Socket_non_blocking</span><span style="color:#24292E;">(newsockfd);</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newsockfd </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> MAXFDS) {</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Socket fd (</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">) &gt;= MAXFDS (</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">)&quot;</span><span style="color:#24292E;">, newsockfd, MAXFDS);</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> status </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">	              </span><span style="color:#6F42C1;">on_peer_connected</span><span style="color:#24292E;">(newsockfd, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">peer_addr, peer_addr_len);</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_event</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	          event.data.fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newsockfd;</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.want_read) {</span></span>
<span class="line"><span style="color:#24292E;">	            event.events </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.want_write) {</span></span>
<span class="line"><span style="color:#24292E;">	            event.events </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">(epollfd, EPOLL_CTL_ADD, newsockfd, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">event) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_ctl EPOLL_CTL_ADD&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	        }</span></span>
<span class="line"><span style="color:#24292E;">	      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	        // A peer Socket is ready.</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (events[i].events </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> EPOLLIN) {</span></span>
<span class="line"><span style="color:#6A737D;">	          // Ready for reading.</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> events[i].data.fd;</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_peer_ready_recv</span><span style="color:#24292E;">(fd);</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_event</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	          event.data.fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fd;</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.want_read) {</span></span>
<span class="line"><span style="color:#24292E;">	            event.events </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.want_write) {</span></span>
<span class="line"><span style="color:#24292E;">	            event.events </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.events </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Socket </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> closing</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, fd);</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">(epollfd, EPOLL_CTL_DEL, fd, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	              </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_ctl EPOLL_CTL_DEL&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	            }</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd);</span></span>
<span class="line"><span style="color:#24292E;">	          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">(epollfd, EPOLL_CTL_MOD, fd, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">event) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_ctl EPOLL_CTL_MOD&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (events[i].events </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> EPOLLOUT) {</span></span>
<span class="line"><span style="color:#6A737D;">	          // Ready for writing.</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> events[i].data.fd;</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#005CC5;">fd_status_t</span><span style="color:#24292E;"> status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_peer_ready_send</span><span style="color:#24292E;">(fd);</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">epoll_event</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">	          event.data.fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fd;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.want_read) {</span></span>
<span class="line"><span style="color:#24292E;">	            event.events </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> EPOLLIN;</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status.want_write) {</span></span>
<span class="line"><span style="color:#24292E;">	            event.events </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> EPOLLOUT;</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.events </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Socket </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> closing</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, fd);</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">(epollfd, EPOLL_CTL_DEL, fd, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	              </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_ctl EPOLL_CTL_DEL&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	            }</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd);</span></span>
<span class="line"><span style="color:#24292E;">	          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">epoll_ctl</span><span style="color:#24292E;">(epollfd, EPOLL_CTL_MOD, fd, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">event) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#6F42C1;">perror_die</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;epoll_ctl EPOLL_CTL_MOD&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	        }</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="重新思考-i-o-模型" tabindex="-1">重新思考：I/O 模型 <a class="header-anchor" href="#重新思考-i-o-模型" aria-label="Permalink to &quot;重新思考：I/O 模型&quot;">​</a></h3><p>在上面的模型当中，select/poll 是阻塞（Blocking）模型，epoll 是非阻塞（Non-Blocking）模型。<strong>阻塞和非阻塞强调的是线程的状态</strong>，所以阻塞就是触发了线程的阻塞状态，线程阻塞了就停止执行，并且切换到其他线程去执行，直到触发中断再回来。</p><p>还有一组概念是同步（Synchrounous）和异步（Asynchrounous），select/poll/epoll 三者都是同步调用。</p><p>**同步强调的是顺序，**所谓同步调用，就是可以确定程序执行的顺序的调用。比如说执行一个调用，知道调用返回之前下一行代码不会执行。这种顺序是确定的情况，就是同步。</p><p>而异步调用则恰恰相反，<strong>异步调用不明确执行顺序</strong>。比如说一个回调函数，不知道何时会回来。异步调用会加大程序员的负担，因为我们习惯顺序地思考程序。因此，我们还会发明像协程的 yield 、迭代器等将异步程序转为同步程序。</p><p>由此可见，<strong>非阻塞不一定是异步，阻塞也未必就是同步</strong>。比如一个带有回调函数的方法，阻塞了线程 100 毫秒，又提供了回调函数，那这个方法是异步阻塞。例如下面的伪代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">asleep</span><span style="color:#E1E4E8;">(100ms, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 100ms 或更多后到这里</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...do some thing</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 100 ms 后到这里</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">asleep</span><span style="color:#24292E;">(100ms, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 100ms 或更多后到这里</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...do some thing</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 100 ms 后到这里</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>总结下，操作系统给大家提供各种各样的 API，是希望满足各种各样程序架构的诉求。但总体诉求其实是一致的：希望程序员写的单机代码，能够在多线程甚至分布式的环境下执行。这样你就不需要再去学习复杂的并发控制算法。从这个角度去看，非阻塞加上同步的编程模型确实省去了我们编程过程当中的很多思考。</p><p>但可惜的是，至少在今天这个时代，<strong>多线程、并发编程依然是程序员们的必修课</strong> 。因此你在思考 I/O 模型的时候，还是需要结合自己的业务特性及系统自身的架构特点，进行选择。<strong>I/O 模型并不是选择效率，而是选择编程的手段</strong>。试想一个所有资源都跑满了的服务器，并不会因为是异步或者非阻塞模型就获得更高的吞吐量。</p><p><strong>那么通过以上的学习，你现在可以尝试来回答本讲关联的面试题目：select/poll/epoll 有什么区别</strong>？</p><p>【<strong>解析</strong>】这三者都是处理 I/O 多路复用的编程手段。select/poll 模型是一种阻塞模型，epoll 是非阻塞模型。select/poll 内部使用线性结构存储进程关注的 Socket 集合，因此每次内核要判断某个消息是否发送给 select/poll 需要遍历进程关注的 Socket 集合。</p><p>而 epoll 不同，epoll 内部使用二叉搜索树（红黑树），用 Socket 编号作为索引，用关注的事件类型作为值，这样内核可以在非常快的速度下就判断某个消息是否需要发送给使用 epoll 的线程。</p><h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><p><strong>最后我再给你出一道需要查资料的思考题：如果用 epoll 架构一个Web 服务器应该是一个怎样的架构</strong>？</p><p>你可以把你的答案、思路或者课后总结写在留言区，这样可以帮助你产生更多的思考，这也是构建知识体系的一部分。经过长期的积累，相信你会得到意想不到的收获。如果你觉得今天的内容对你有所启发，欢迎分享给身边的朋友。期待看到你的思考！</p><p>这一讲就到这里，发现求知的乐趣，我是林䭽。感谢你学习本次课程，下一讲我们将学习 36 | 公私钥体系和网络安全：什么是中间人攻击？再见！</p>`,44);function S(v,L,m,b,I,w){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"1111.png",src:"https://s0.lgstatic.com/i/image2/M01/05/F3/Cip5yGABb8uAECMGAAERrnFoSrI090.png"}),n(),y,l(a,{alt:"Lark20210115-150702.png",src:"https://s0.lgstatic.com/i/image/M00/8D/F3/Ciqc1GABP3OAHezqAABndlGAu9c457.png"}),n(),i,F,l(a,{alt:"Lark20210115-150706.png",src:"https://s0.lgstatic.com/i/image/M00/8D/F3/Ciqc1GABP3qADKbBAAB564sk120429.png"}),n(),d,_,A,D,f,u,l(a,{alt:"Lark20210115-150708.png",src:"https://s0.lgstatic.com/i/image/M00/8D/F3/Ciqc1GABP4OAdKBcAACAbVkbI0g191.png"}),n(),C,l(a,{alt:"Lark20210115-150711.png",src:"https://s0.lgstatic.com/i/image/M00/8D/F3/Ciqc1GABP4uAW8-dAAB_SubmZ4Q301.png"}),n(),g,B,h,l(a,{alt:"Lark20210115-150654.png",src:"https://s0.lgstatic.com/i/image/M00/8D/F3/Ciqc1GABP5KAVSWVAAFSurtl2bU931.png"}),n(),k])}const T=o(r,[["render",S]]);export{O as __pageData,T as default};
