import{_ as l,j as o,o as e,g as r,k as a,h as p,Q as s}from"./chunks/framework.4e7d56ce.js";const h=JSON.parse('{"title":"Go-kit 和 gRPC 结合的原理 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3816) 18  案例：Go-kit 如何集成 gRPC？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3816) 18  案例：Go-kit 如何集成 gRPC？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3816) 18  案例：Go-kit 如何集成 gRPC？.md"},c=s('<p>在上一课时中，我们对比分析了 gRPC 和 Thrift ，发现二者都缺少了大量的功能，比如：连接池、服务框架、服务发现、服务治理、分布式链路追踪、埋点和上下文日志等，这些功能才是日常开发和运维最常使用的。而 Go-kit 提供了上述的功能，并且还可以和 gRPC 进行结合，所以今天我们就来详细讲解一下 Go-kit 和 gRPC 结合的基本原理和实战案例。</p><p>Go-kit 框架可以和 gRPC 结合使用，将 RPC 作为传输层的组件，而自身则提供诸如服务注册和发现、断路器等微服务远程交互的通用功能组件。比如，gRPC 缺乏服务治理的功能，我们就可以通过 Go-kit 结合 gRPC 来弥补这一缺陷。Go-kit 框架抽象的 Endpoint 层设计让开发者可以很容易地封装使用其他微服务组件，比如说服务注册与发现、断路器和负载均衡策略等。</p><p>在前面 08 课时中我们已经详细介绍了如何使用 Go-kit 构建简单的 Web 系统，那本课时我们就只对 Go-kit 涉及网络通信相关的模块和功能进行更加深入的介绍：① Go-kit 和 gRPC结合的具体原理；②Go-kit 集成 gRPC 的项目实践。</p><h3 id="go-kit-和-grpc-结合的原理" tabindex="-1">Go-kit 和 gRPC 结合的原理 <a class="header-anchor" href="#go-kit-和-grpc-结合的原理" aria-label="Permalink to &quot;Go-kit 和 gRPC 结合的原理&quot;">​</a></h3><p>在前面的课时中，我们介绍过 Go-kit 是一套强大的微服务开发工具集，用于指导开发人员解决分布式系统开发过程中所遇到的问题，帮助开发人员更专注于业务开发。Go-kit 推荐使用 Transport、Endpoint 和 Service 这 3 层结构来组织项目。若是你对这三者的具体概念还不熟悉的话，可以去复习一下前边的课时。</p><p>由于本课时主要涉及 Transport 层和 Endpoint 层，所以这里我们就再重申一下这二者的概念。</p><ul><li><p>Transport 层，主要负责网络传输，例如处理HTTP、gRPC、Thrift等相关的逻辑。</p></li><li><p>Endpoint 层，主要负责 request/response 格式的转换，以及公用拦截器相关的逻辑。作为 Go-kit 的核心，Endpoint 层采用类似洋葱的模型，提供了对日志、限流、熔断、链路追踪和服务监控等方面的扩展能力。</p></li></ul><p><strong>Go-kit 和 gRPC 结合的关键在于需要将 gRPC 集成到 Go-kit 的 Transport 层</strong>。Go-kit 的 Transport 层用于接收用户网络请求并将其转为 Endpoint 可以处理的对象，然后交由 Endpoint 层执行，最后再将处理结果转为响应对象返回给客户端。为了完成这项工作，Transport 层需要具备两个工具方法：</p><ul><li><p><strong>解码器</strong>，把用户的请求内容转换为请求对象；</p></li><li><p><strong>编码器</strong>，把处理结果转换为响应对象。</p></li></ul><p>gRPC 请求的处理过程如下图所示，服务端接收到一个客户端请求后，交由 grpc_transport.Handler 处理，它会调用 DecodeRequestFunc 进行解码，然后交给其 Endpoint 层转换为 Service 层能处理的对象，将返回值通过 EncodeResponseFunc 编码，最后返回给客户端。</p>',10),E=s(`<p>Go-kit 过程调用示意图</p><p>接下来，我们就按照上述的流程，实现通过 Go-kit 进行 gRPC 调用。</p><h3 id="go-kit-集成-grpc-案例实战" tabindex="-1">Go-kit 集成 gRPC 案例实战 <a class="header-anchor" href="#go-kit-集成-grpc-案例实战" aria-label="Permalink to &quot;Go-kit 集成 gRPC 案例实战&quot;">​</a></h3><p>本课时中，我们的案例使用的是上一课时案例中所定义的 proto 文件并生成相应的代码，这里不再赘述。下面我们主要分五个步骤来构建基于 gRPC 的 Go-kit 项目，分别为：定义并构建Service、Endpoint、Middleware、Transport 和组装服务端。</p><h4 id="_1-定义-service-提供业务实现" tabindex="-1">1. 定义 Service，提供业务实现 <a class="header-anchor" href="#_1-定义-service-提供业务实现" aria-label="Permalink to &quot;1. 定义 Service，提供业务实现&quot;">​</a></h4><p>首先定义了 UserService 结构，它有一个名为 CheckPassword 的 grpc_transport.Handler 的方法。这个方法会调用 grpc_transport.Handler 的 ServeGRPC 方法来将请求交由 Go-kit 处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义接口</span></span>
<span class="line"><span style="color:#E1E4E8;">type UserService interface {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(ctx context.Context, username string, password string) (bool, error);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">type UserServiceImpl struct {}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (s UserServiceImpl) </span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(ctx context.Context, username string, password string) (bool, error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> password </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义接口</span></span>
<span class="line"><span style="color:#24292E;">type UserService interface {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(ctx context.Context, username string, password string) (bool, error);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">type UserServiceImpl struct {}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (s UserServiceImpl) </span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(ctx context.Context, username string, password string) (bool, error) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> password </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, nil</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>和上一课时中 UserService 的实现对比，我们会发现 UserService 不再以 LoginRequest 和 LoginResponse 作为输入参数和输出对象，这是因为 Go-kit 的分层理念，认为 Request 和 Response 代表请求和响应，应该是 Transport 层和 Endpoint 层处理的概念，而 Service 层只需要处理最为纯粹的业务逻辑即可，不需要感知或了解请求和响应这些概念。</p><h4 id="_2-定义-endpoint-提供参数转换能力" tabindex="-1">2. 定义 Endpoint，提供参数转换能力 <a class="header-anchor" href="#_2-定义-endpoint-提供参数转换能力" aria-label="Permalink to &quot;2. 定义 Endpoint，提供参数转换能力&quot;">​</a></h4><p>接下来我们需要建立对应的 Endpoint。它应该是将请求转发给上述的 UserService 处理，然后定义编解码函数 DecodeRequest 和 EncodeResponse，具体代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">MakeUserEndpoint</span><span style="color:#E1E4E8;">(svc UserService) endpoint.Endpoint {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(ctx context.Context, form interface{}) (result interface{}, err error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    req </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> form.(LoginForm)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ret, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> svc.</span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(ctx,req.Username, req.Password)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LoginResult{Ret</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ret, Err</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> err}, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">type LoginForm struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Username           string \`json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  Password           string \`json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">type LoginResult struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Ret bool \`json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;ret&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  Err  error  \`json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;err&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">MakeUserEndpoint</span><span style="color:#24292E;">(svc UserService) endpoint.Endpoint {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(ctx context.Context, form interface{}) (result interface{}, err error) {</span></span>
<span class="line"><span style="color:#24292E;">    req </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> form.(LoginForm)</span></span>
<span class="line"><span style="color:#24292E;">    ret, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> svc.</span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(ctx,req.Username, req.Password)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LoginResult{Ret</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ret, Err</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> err}, nil</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">type LoginForm struct {</span></span>
<span class="line"><span style="color:#24292E;">  Username           string \`json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">  Password           string \`json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">type LoginResult struct {</span></span>
<span class="line"><span style="color:#24292E;">  Ret bool \`json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;ret&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">  Err  error  \`json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;err&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span></code></pre></div><p>同样的，Endpoint 层也未直接处理 LoginRequest 和 LoginResponse，而是直接处理 LoginForm 和 LoginResult，使用 DecodeLoginRequest 函数将 LoginRequest 转换成 LoginForm，然后使用 EncodeLoginResponse 将 LoginResult 转换为 LoginResponse。转换函数的具体定义如下所示（这两个函数实际也可以在 Transport 层，为了讲解思路流畅，才放在本处）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">DecodeLoginRequest</span><span style="color:#E1E4E8;">(ctx context.Context, r interface{}) (interface{}, error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  req </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> r.(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pb.LoginRequest)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> LoginForm{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Username</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">      req.Username,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Password</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">      req.Password,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">EncodeLoginResponse</span><span style="color:#E1E4E8;">(_ context.Context, r interface{}) (interface{}, error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  resp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> r.(LoginResult)</span></span>
<span class="line"><span style="color:#E1E4E8;">  retStr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;fail&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp.Ret {</span></span>
<span class="line"><span style="color:#E1E4E8;">    retStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;success&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  errStr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp.Err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">    errStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resp.Err.</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pb.LoginResponse{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ret</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> retStr,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Err</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> errStr,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">DecodeLoginRequest</span><span style="color:#24292E;">(ctx context.Context, r interface{}) (interface{}, error) {</span></span>
<span class="line"><span style="color:#24292E;">  req </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> r.(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pb.LoginRequest)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> LoginForm{</span></span>
<span class="line"><span style="color:#24292E;">    Username</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">      req.Username,</span></span>
<span class="line"><span style="color:#24292E;">    Password</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">      req.Password,</span></span>
<span class="line"><span style="color:#24292E;">  }, nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">EncodeLoginResponse</span><span style="color:#24292E;">(_ context.Context, r interface{}) (interface{}, error) {</span></span>
<span class="line"><span style="color:#24292E;">  resp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> r.(LoginResult)</span></span>
<span class="line"><span style="color:#24292E;">  retStr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fail&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp.Ret {</span></span>
<span class="line"><span style="color:#24292E;">    retStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;success&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  errStr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp.Err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">    errStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resp.Err.</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pb.LoginResponse{</span></span>
<span class="line"><span style="color:#24292E;">    Ret</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> retStr,</span></span>
<span class="line"><span style="color:#24292E;">    Err</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> errStr,</span></span>
<span class="line"><span style="color:#24292E;">  }, nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样做的好处有两点：一是 LoginRequest 和 LoginResponse 是通过 gRPC 生成的，属于 Transport 层，Endpoint 层不需要感知，后续如果技术选型变化了，需要将 gRPC 替换成 Thrift 时就可以只处理 Transport 层的变化，让变更最小化（如下图）；二是后端业务处理时的属性类型和返回给前端的数据属性类型不一定完全一样，比如上述代码中 LoginResult 中的 Ret 是 bool 类型，而返回给前端的 LoginResponse 中 Ret 是 string 类型，从而实现兼容性。</p>`,14),y=s(`<p>Go-kit 分层示意图</p><br><p>如上图所示，Service 在最内层，Endpoint 在中间，Transport在最外侧，所以 Transport 是最容易进行变更的一层，越往内层逻辑应该越贴近领域逻辑。</p><h4 id="_3-定义-middleware-提供限流和日志中间件" tabindex="-1">3. 定义 Middleware，提供限流和日志中间件 <a class="header-anchor" href="#_3-定义-middleware-提供限流和日志中间件" aria-label="Permalink to &quot;3. 定义 Middleware，提供限流和日志中间件&quot;">​</a></h4><p>如上文所说，Endpoint 层可以添加诸如日志、限流、熔断、链路追踪和服务监控等能力，这里我们就以限流为例，讲述如何为 Endpoint 添加额外能力。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ErrLimitExceed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Rate limit exceed!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#6A737D;">// 使用x/time/rate创建限流中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">NewTokenBucketLimitterWithBuildIn</span><span style="color:#E1E4E8;">(bkt </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rate.Limiter) endpoint.Middleware {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(ctx context.Context, request interface{}) (response interface{}, err error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果超过流量，就直接返回限流异常</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">bkt.</span><span style="color:#B392F0;">Allow</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil, ErrLimitExceed</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(ctx, request)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#6A737D;">// 使用时的代码实例</span></span>
<span class="line"><span style="color:#E1E4E8;">ratebucket </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rate.</span><span style="color:#B392F0;">NewLimiter</span><span style="color:#E1E4E8;">(rate.</span><span style="color:#B392F0;">Every</span><span style="color:#E1E4E8;">(time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">endpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">NewTokenBucketLimitterWithBuildIn</span><span style="color:#E1E4E8;">(ratebucket)(endpoint)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ErrLimitExceed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errors.</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Rate limit exceed!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#6A737D;">// 使用x/time/rate创建限流中间件</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">NewTokenBucketLimitterWithBuildIn</span><span style="color:#24292E;">(bkt </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rate.Limiter) endpoint.Middleware {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(ctx context.Context, request interface{}) (response interface{}, err error) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果超过流量，就直接返回限流异常</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">bkt.</span><span style="color:#6F42C1;">Allow</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil, ErrLimitExceed</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(ctx, request)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#6A737D;">// 使用时的代码实例</span></span>
<span class="line"><span style="color:#24292E;">ratebucket </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rate.</span><span style="color:#6F42C1;">NewLimiter</span><span style="color:#24292E;">(rate.</span><span style="color:#6F42C1;">Every</span><span style="color:#24292E;">(time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">endpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">NewTokenBucketLimitterWithBuildIn</span><span style="color:#24292E;">(ratebucket)(endpoint)</span></span></code></pre></div><p>上述代码使用了 x/time/rate 来进行限流，具体则使用了<strong>令牌桶限流策略</strong>，其中 NewLimiter 函数会生成 Limiter 限流器，有两个参数，一个表示每秒生成多少令牌，另一个表示允许缓存多少令牌。</p><p>当请求通过 Endpoint 时，就会被该 Middleware 拦截，然后调用 Limiter 的 Allow 函数，如果当前还存有令牌，则消耗一枚令牌，放行请求，返回 true；如果不存在，则阻拦请求，返回 false。有关令牌桶的限流策略，如果你感兴趣的话，可以自行搜索学习。</p><p>除了限流外，Endpoint 的 Middleware 还可以和 Hystrix 结合提供熔断能力，和 ZipkinTracer 结合提供服务链路追踪能力、自定义接口调用统计指标或打印日志。</p><p>由此可以看出 Endpoint 的 Middleware 确实是 Go-kit 的核心，众多服务治理相关中间件的集成都使用该层进行封装，提供统一的类似于切面的能力供开发者使用，免去了开发者处理架构集成的烦恼。</p><h4 id="_4-定义-transport-提供网络传输能力" tabindex="-1">4. 定义 Transport，提供网络传输能力 <a class="header-anchor" href="#_4-定义-transport-提供网络传输能力" aria-label="Permalink to &quot;4. 定义 Transport，提供网络传输能力&quot;">​</a></h4><p>下面，我们来具体看一下 Transport 层的实现。我们要给出 proto 文件中 UserServiceServer 的具体实现，也就是下述代码中的 grpcServer 结构体，它实现了 CheckPassword 方法，其中调用了其成员变量 checkPassword 的 ServeGRPC 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">type grpcServer struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">  checkPassword grpc.Handler</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">grpcServer) </span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(ctx context.Context, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pb.LoginRequest) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pb.LoginResponse, error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _, resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.checkPassword.</span><span style="color:#B392F0;">ServeGRPC</span><span style="color:#E1E4E8;">(ctx, r)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil, err</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resp.(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pb.LoginResponse), nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">NewUserServer</span><span style="color:#E1E4E8;">(ctx context.Context, endpoints Endpoints) pb.UserServiceServer {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">grpcServer{</span></span>
<span class="line"><span style="color:#E1E4E8;">    checkPassword</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      endpoints.UserEndpoint,</span></span>
<span class="line"><span style="color:#E1E4E8;">      DecodeLoginRequest,</span></span>
<span class="line"><span style="color:#E1E4E8;">      EncodeLoginResponse,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">type grpcServer struct {</span></span>
<span class="line"><span style="color:#24292E;">  checkPassword grpc.Handler</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">grpcServer) </span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(ctx context.Context, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pb.LoginRequest) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pb.LoginResponse, error) {</span></span>
<span class="line"><span style="color:#24292E;">  _, resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.checkPassword.</span><span style="color:#6F42C1;">ServeGRPC</span><span style="color:#24292E;">(ctx, r)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil, err</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resp.(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pb.LoginResponse), nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">NewUserServer</span><span style="color:#24292E;">(ctx context.Context, endpoints Endpoints) pb.UserServiceServer {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">grpcServer{</span></span>
<span class="line"><span style="color:#24292E;">    checkPassword</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      endpoints.UserEndpoint,</span></span>
<span class="line"><span style="color:#24292E;">      DecodeLoginRequest,</span></span>
<span class="line"><span style="color:#24292E;">      EncodeLoginResponse,</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>checkPassword 的类型是 grpc.Handler，在 NewUserServer 方法中我们可以看到调用 grpc.NewServer 将其创建出来，需要传入 Endpoint 和编解码函数。这也正对应上文原理解析中 Go-kit 过程调用示意图的内容。</p><h4 id="_5-启动服务端-注册rpc服务" tabindex="-1">5. 启动服务端，注册RPC服务 <a class="header-anchor" href="#_5-启动服务端-注册rpc服务" aria-label="Permalink to &quot;5. 启动服务端，注册RPC服务&quot;">​</a></h4><p>我们来将上述部分组合起来，建立真正的网络服务端，并注册对应的 RPC 服务。具体代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  flag.</span><span style="color:#B392F0;">Parse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">Background</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 建立 service</span></span>
<span class="line"><span style="color:#E1E4E8;">  var svc user.UserService</span></span>
<span class="line"><span style="color:#E1E4E8;">  svc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.UserServiceImpl{}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 建立 endpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">  endpoint </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">MakeUserEndpoint</span><span style="color:#E1E4E8;">(svc)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 构造限流中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">  ratebucket </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> rate.</span><span style="color:#B392F0;">NewLimiter</span><span style="color:#E1E4E8;">(rate.</span><span style="color:#B392F0;">Every</span><span style="color:#E1E4E8;">(time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  endpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">NewTokenBucketLimitterWithBuildIn</span><span style="color:#E1E4E8;">(ratebucket)(endpoint)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  endpts </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> user.Endpoints{</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserEndpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">      endpoint,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 transport 构造 UserServiceServer</span></span>
<span class="line"><span style="color:#E1E4E8;">  handler </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">NewUserServer</span><span style="color:#E1E4E8;">(ctx, endpts)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 监听端口，建立 gRPC 网络服务器，注册 RPC 服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  ls, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#B392F0;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;127.0.0.1:8080&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  gRPCServer </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  pb.</span><span style="color:#B392F0;">RegisterUserServiceServer</span><span style="color:#E1E4E8;">(gRPCServer, handler)</span></span>
<span class="line"><span style="color:#E1E4E8;">  gRPCServer.</span><span style="color:#B392F0;">Serve</span><span style="color:#E1E4E8;">(ls)</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  flag.</span><span style="color:#6F42C1;">Parse</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">  ctx </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">Background</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 建立 service</span></span>
<span class="line"><span style="color:#24292E;">  var svc user.UserService</span></span>
<span class="line"><span style="color:#24292E;">  svc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.UserServiceImpl{}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 建立 endpoint</span></span>
<span class="line"><span style="color:#24292E;">  endpoint </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">MakeUserEndpoint</span><span style="color:#24292E;">(svc)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 构造限流中间件</span></span>
<span class="line"><span style="color:#24292E;">  ratebucket </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> rate.</span><span style="color:#6F42C1;">NewLimiter</span><span style="color:#24292E;">(rate.</span><span style="color:#6F42C1;">Every</span><span style="color:#24292E;">(time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  endpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">NewTokenBucketLimitterWithBuildIn</span><span style="color:#24292E;">(ratebucket)(endpoint)</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  endpts </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> user.Endpoints{</span></span>
<span class="line"><span style="color:#24292E;">    UserEndpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">      endpoint,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 transport 构造 UserServiceServer</span></span>
<span class="line"><span style="color:#24292E;">  handler </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">NewUserServer</span><span style="color:#24292E;">(ctx, endpts)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 监听端口，建立 gRPC 网络服务器，注册 RPC 服务</span></span>
<span class="line"><span style="color:#24292E;">  ls, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#6F42C1;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;127.0.0.1:8080&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  gRPCServer </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  pb.</span><span style="color:#6F42C1;">RegisterUserServiceServer</span><span style="color:#24292E;">(gRPCServer, handler)</span></span>
<span class="line"><span style="color:#24292E;">  gRPCServer.</span><span style="color:#6F42C1;">Serve</span><span style="color:#24292E;">(ls)</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span></code></pre></div><p>在 main 函数中，首先创建 UserService；然后调用 MakeUserEndpoint 函数创建 Endpoint，并使用限流中间件封装；接着调用 user 的 NewUserServer 方法，传入对应的 Endpoint，得到对应的 gRPC 处理器（Handler）；最后监听网络端口，创建 gRPC 服务端，并注册对应的处理器，即可启动 gRPC 服务端。</p><p>至此，我们就构造了一个基于 gRPC 来提供 RPC 通信能力的 Go-kit 项目。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>相信你学完本课时后，会发现 Go-kit 可以和 gRPC 框架完美无缝结合，不仅能获得 gRPC 的高性能，还可以获得 Go-kit 作为微服务框架提供的构建微服务项目实例的便捷性，比如使用 Endpoint 的 Middleware 层来获得日志、限流、熔断、链路追踪和服务监控等方面的扩展能力，可以说是一举两得。</p><p>最后给你留个思考题：如果要将 gRPC 替换为 Thrift，需要对上述代码做哪些改动呢？欢迎你在留言区积极发言和讨论。</p>`,22);function i(d,u,F,g,C,v){const n=o("Image");return e(),r("div",null,[c,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/47/A5/CgqCHl9InuGAYQa8AABJDed6WN0517.png"}),p(),E,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/47/9A/Ciqc1F9InySAYF-DAAAPcyoNePo946.png"}),p(),y])}const R=l(t,[["render",i]]);export{h as __pageData,R as default};
