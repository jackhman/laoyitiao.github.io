import{_ as p,j as o,o as e,g as t,k as n,h as l,Q as s}from"./chunks/framework.4e7d56ce.js";const A=JSON.parse('{"title":"16案例分析：常见Java代码优化法则","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4193) 16  案例分析：常见 Java 代码优化法则.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4193) 16  案例分析：常见 Java 代码优化法则.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4193) 16  案例分析：常见 Java 代码优化法则.md"},r=s(`<h1 id="_16案例分析-常见java代码优化法则" tabindex="-1">16案例分析：常见Java代码优化法则 <a class="header-anchor" href="#_16案例分析-常见java代码优化法则" aria-label="Permalink to &quot;16案例分析：常见Java代码优化法则&quot;">​</a></h1><p>回顾一下 06 课时到 15 课时，我们分别了解缓冲、缓存、池化对象、大对象复用、并行计算、锁优化、NIO 等优化方法，它们对性能的提升往往是质的飞跃。</p><p>但语言本身对性能也是有影响的，比如就有很多公司就因为语言的特性由 Java 切换到 Golang。对于 Java 语言来说，也有它的一套优化法则，这些细微的性能差异，经过多次调用和迭代，会产生越来越大的影响。</p><p>本课时将集中讲解一些常用的代码优化法则，从而在编码中保持好的习惯，让代码保持最优状态。</p><h3 id="代码优化法则" tabindex="-1">代码优化法则 <a class="header-anchor" href="#代码优化法则" aria-label="Permalink to &quot;代码优化法则&quot;">​</a></h3><h4 id="_1-使用局部变量可避免在堆上分配" tabindex="-1">1.使用局部变量可避免在堆上分配 <a class="header-anchor" href="#_1-使用局部变量可避免在堆上分配" aria-label="Permalink to &quot;1.使用局部变量可避免在堆上分配&quot;">​</a></h4><p>由于堆资源是多线程共享的，是垃圾回收器工作的主要区域，过多的对象会造成 GC 压力。可以通过局部变量的方式，将变量在栈上分配。这种方式变量会随着方法执行的完毕而销毁，能够减轻 GC 的压力。</p><h4 id="_2-减少变量的作用范围" tabindex="-1">2.减少变量的作用范围 <a class="header-anchor" href="#_2-减少变量的作用范围" aria-label="Permalink to &quot;2.减少变量的作用范围&quot;">​</a></h4><p>注意变量的作用范围，尽量减少对象的创建。如下面的代码，变量 a 每次进入方法都会创建，可以将它移动到 if 语句内部。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">(String str) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(str)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(String str) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(str)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-访问静态变量直接使用类名" tabindex="-1">3.访问静态变量直接使用类名 <a class="header-anchor" href="#_3-访问静态变量直接使用类名" aria-label="Permalink to &quot;3.访问静态变量直接使用类名&quot;">​</a></h4><p>有的同学习惯使用对象访问静态变量，这种方式多了一步寻址操作，需要先找到变量对应的类，再找到类对应的变量，如下面的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticCall</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.A);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(StaticCall.A);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticCall</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.A);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(StaticCall.A);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对应的字节码为：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    descriptor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ()</span><span style="color:#79B8FF;">V</span></span>
<span class="line"><span style="color:#E1E4E8;">    flags</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      stack</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, locals</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, args_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getstatic     #</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pop</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> iconst_1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getstatic     #</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> iconst_1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">LineNumberTable</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        line </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">        line </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span></span>
<span class="line"><span style="color:#E1E4E8;">        line </span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    descriptor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ()</span><span style="color:#005CC5;">V</span></span>
<span class="line"><span style="color:#24292E;">    flags</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      stack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, locals</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, args_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getstatic     #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_0</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pop</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iconst_1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getstatic     #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iconst_1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">LineNumberTable</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        line </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">        line </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#24292E;">        line </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span></span></code></pre></div><p>可以看到使用 this 的方式多了一个步骤。</p><h4 id="_4-字符串拼接使用-stringbuilder" tabindex="-1">4.字符串拼接使用 StringBuilder <a class="header-anchor" href="#_4-字符串拼接使用-stringbuilder" aria-label="Permalink to &quot;4.字符串拼接使用 StringBuilder&quot;">​</a></h4><p>字符串拼接，使用 StringBuilder 或者 StringBuffer，不要使用 + 号。比如下面这段代码，在循环中拼接了字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-1&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-1&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从下面对应的字节码内容可以看出，它在每个循环里都创建了一个 StringBuilder 对象。所以，我们在平常的编码中，显式地创建一次即可。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> iload_2</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> bipush        </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> if_icmpge     </span><span style="color:#79B8FF;">36</span></span>
<span class="line"><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">           #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dup</span></span>
<span class="line"><span style="color:#79B8FF;">15</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokespecial #</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_1</span></span>
<span class="line"><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> iload_2</span></span>
<span class="line"><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#79B8FF;">26</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#79B8FF;">29</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> astore_1</span></span>
<span class="line"><span style="color:#79B8FF;">30</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> iinc          </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#79B8FF;">33</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> goto          </span><span style="color:#79B8FF;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iload_2</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> bipush        </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> if_icmpge     </span><span style="color:#005CC5;">36</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">           #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dup</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokespecial #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_1</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iload_2</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_1</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iinc          </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> goto          </span><span style="color:#005CC5;">5</span></span></code></pre></div><h4 id="_5-重写对象的-hashcode-不要简单地返回固定值" tabindex="-1">5.重写对象的 HashCode，不要简单地返回固定值 <a class="header-anchor" href="#_5-重写对象的-hashcode-不要简单地返回固定值" aria-label="Permalink to &quot;5.重写对象的 HashCode，不要简单地返回固定值&quot;">​</a></h4><p>在代码 review 的时候，我发现有开发重写 HashCode 和 Equals 方法时，会把 HashCode 的值返回固定的 0，而这样做是不恰当的。</p><p>当这些对象存入 HashMap 时，性能就会非常低，因为 HashMap 是通过 HashCode 定位到 Hash 槽，有冲突的时候，才会使用链表或者红黑树组织节点。固定地返回 0，相当于把 Hash 寻址功能给废除了。</p><h4 id="_6-hashmap-等集合初始化的时候-指定初始值大小" tabindex="-1">6.HashMap 等集合初始化的时候，指定初始值大小 <a class="header-anchor" href="#_6-hashmap-等集合初始化的时候-指定初始值大小" aria-label="Permalink to &quot;6.HashMap 等集合初始化的时候，指定初始值大小&quot;">​</a></h4><p>这个原则参见 <strong>&quot;10 | 案例分析：大对象复用的目标和注意点&quot;</strong>，这样的对象有很多，比如 ArrayList，StringBuilder 等，通过指定初始值大小可减少扩容造成的性能损耗。</p><h4 id="_7-遍历-map-的时候-使用-entryset-方法" tabindex="-1">7.遍历 Map 的时候，使用 EntrySet 方法 <a class="header-anchor" href="#_7-遍历-map-的时候-使用-entryset-方法" aria-label="Permalink to &quot;7.遍历 Map 的时候，使用 EntrySet 方法&quot;">​</a></h4><p>使用 EntrySet 方法，可以直接返回 set 对象，直接拿来用即可；而使用 KeySet 方法，获得的是key 的集合，需要再进行一次 get 操作，多了一个操作步骤。所以更推荐使用 EntrySet 方式遍历 Map。</p><h4 id="_8-不要在多线程下使用同一个-random" tabindex="-1">8.不要在多线程下使用同一个 Random <a class="header-anchor" href="#_8-不要在多线程下使用同一个-random" aria-label="Permalink to &quot;8.不要在多线程下使用同一个 Random&quot;">​</a></h4><p>Random 类的 seed 会在并发访问的情况下发生竞争，造成性能降低，建议在多线程环境下使用 ThreadLocalRandom 类。</p><p>在 Linux 上，通过加入 JVM 配置 <strong>-Djava.security.egd=file:/dev/./urandom</strong>，使用 urandom 随机生成器，在进行随机数获取时，速度会更快。</p><h4 id="_9-自增推荐使用-longaddr" tabindex="-1">9.自增推荐使用 LongAddr <a class="header-anchor" href="#_9-自增推荐使用-longaddr" aria-label="Permalink to &quot;9.自增推荐使用 LongAddr&quot;">​</a></h4><p>自增运算可以通过 synchronized 和 volatile 的组合，或者也可以使用原子类（比如 AtomicLong）。</p><p>后者的速度比前者要高一些，AtomicLong 使用 CAS 进行比较替换，在线程多的情况下会造成过多无效自旋，所以可以使用 LongAdder 替换 AtomicLong 进行进一步的性能提升。</p><h4 id="_10-不要使用异常控制程序流程" tabindex="-1">10.不要使用异常控制程序流程 <a class="header-anchor" href="#_10-不要使用异常控制程序流程" aria-label="Permalink to &quot;10.不要使用异常控制程序流程&quot;">​</a></h4><p>异常，是用来了解并解决程序中遇到的各种不正常的情况，它的实现方式比较昂贵，比平常的条件判断语句效率要低很多。</p><p>这是因为异常在字节码层面，需要生成一个如下所示的异常表（Exception table），多了很多判断步骤。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Exception table</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    from    to  target type</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   any</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   any</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Exception table</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    from    to  target type</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   any</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   any</span></span></code></pre></div><p>所以，尽量不要使用异常控制程序流程。</p><h4 id="_11-不要在循环中使用-try-catch" tabindex="-1">11.不要在循环中使用 try catch <a class="header-anchor" href="#_11-不要在循环中使用-try-catch" aria-label="Permalink to &quot;11.不要在循环中使用 try catch&quot;">​</a></h4><p>道理与上面类似，很多文章介绍，不要把异常处理放在循环里，而应该把它放在最外层，但实际测试情况表明这两种方式性能相差并不大。</p><p>既然性能没什么差别，那么就推荐根据业务的需求进行编码。比如，循环遇到异常时，不允许中断，也就是允许在发生异常的时候能够继续运行下去，那么异常就只能在 for 循环里进行处理。</p><h4 id="_12-不要捕捉-runtimeexception" tabindex="-1">12.不要捕捉 RuntimeException <a class="header-anchor" href="#_12-不要捕捉-runtimeexception" aria-label="Permalink to &quot;12.不要捕捉 RuntimeException&quot;">​</a></h4><p>Java 异常分为两种，一种是可以通过预检查机制避免的 RuntimeException；另外一种就是普通异常。</p><p>其中，RuntimeException 不应该通过 catch 语句去捕捉，而应该使用编码手段进行规避。</p><p>如下面的代码，list 可能会出现数组越界异常。是否越界是可以通过代码提前判断的，而不是等到发生异常时去捕捉。提前判断这种方式，代码会更优雅，效率也更高。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//BAD</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> list, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IndexOutOfBoundsException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#6A737D;">//GOOD</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">test2</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> list, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(index);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//BAD</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> list, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IndexOutOfBoundsException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#6A737D;">//GOOD</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> list, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_13-合理使用-preparedstatement" tabindex="-1">13.合理使用 PreparedStatement <a class="header-anchor" href="#_13-合理使用-preparedstatement" aria-label="Permalink to &quot;13.合理使用 PreparedStatement&quot;">​</a></h4><p>PreparedStatement 使用预编译对 SQL 的执行进行提速，大多数数据库都会努力对这些能够复用的查询语句进行预编译优化，并能够将这些编译结果缓存起来。</p><p>这样等到下次用到的时候，就可以很快进行执行，也就少了一步对 SQL 的解析动作。</p><p>PreparedStatement 还能提高程序的安全性，能够有效防止 SQL 注入。</p><p>但如果你的程序每次 SQL 都会变化，不得不手工拼接一些数据，那么 PreparedStatement 就失去了它的作用，反而使用普通的 Statement 速度会更快一些。</p><h4 id="_14-日志打印的注意事项" tabindex="-1">14.日志打印的注意事项 <a class="header-anchor" href="#_14-日志打印的注意事项" aria-label="Permalink to &quot;14.日志打印的注意事项&quot;">​</a></h4><p>我们在&quot;06 | 案例分析：缓冲区如何让代码加速&quot;中了解了 logback 的异步日志，日志打印还有一些其他要注意的事情。</p><p>我们平常会使用 debug 输出一些调试信息，然后在线上关掉它。如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;xjjdog:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> topic </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;  is  awesome&quot;</span><span style="color:#E1E4E8;">  );</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xjjdog:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> topic </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;  is  awesome&quot;</span><span style="color:#24292E;">  );</span></span></code></pre></div><p>程序每次运行到这里，都会构造一个字符串，不管你是否把日志级别调试到 INFO 还是 WARN，这样效率就会很低。</p><p>可以在每次打印之前都使用 isDebugEnabled 方法判断一下日志级别，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(logger.</span><span style="color:#B392F0;">isDebugEnabled</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;xjjdog:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> topic </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;  is  awesome&quot;</span><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(logger.</span><span style="color:#6F42C1;">isDebugEnabled</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">    logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xjjdog:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> topic </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;  is  awesome&quot;</span><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用占位符的方式，也可以达到相同的效果，就不用手动添加 isDebugEnabled 方法了，代码也优雅得多。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;xjjdog:{}  is  awesome&quot;</span><span style="color:#E1E4E8;">  ,topic);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xjjdog:{}  is  awesome&quot;</span><span style="color:#24292E;">  ,topic);</span></span></code></pre></div><p>对于业务系统来说，日志对系统的性能影响非常大，不需要的日志，尽量不要打印，避免占用 I/O 资源。</p><h4 id="_15-减少事务的作用范围" tabindex="-1">15.减少事务的作用范围 <a class="header-anchor" href="#_15-减少事务的作用范围" aria-label="Permalink to &quot;15.减少事务的作用范围&quot;">​</a></h4><p>如果的程序使用了事务，那一定要注意事务的作用范围，尽量以最快的速度完成事务操作。这是因为，事务的隔离性是使用锁实现的，可以类比使用 <strong>&quot;13 | 案例分析：多线程锁的优化&quot;</strong> 中的多线程锁进行优化。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(String id){</span></span>
<span class="line"><span style="color:#E1E4E8;">    String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rpc.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(id); </span><span style="color:#6A737D;">//高耗时</span></span>
<span class="line"><span style="color:#E1E4E8;">    testDao.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(sql,value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(String id){</span></span>
<span class="line"><span style="color:#24292E;">    String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rpc.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(id); </span><span style="color:#6A737D;">//高耗时</span></span>
<span class="line"><span style="color:#24292E;">    testDao.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(sql,value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上面的代码，由于 rpc 服务耗时高且不稳定，就应该把它移出到事务之外，改造如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(String id){</span></span>
<span class="line"><span style="color:#E1E4E8;">    String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rpc.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(id); </span><span style="color:#6A737D;">//高耗时</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">testDao</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testDao</span><span style="color:#E1E4E8;">(String value){</span></span>
<span class="line"><span style="color:#E1E4E8;">    testDao.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(String id){</span></span>
<span class="line"><span style="color:#24292E;">    String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rpc.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(id); </span><span style="color:#6A737D;">//高耗时</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">testDao</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testDao</span><span style="color:#24292E;">(String value){</span></span>
<span class="line"><span style="color:#24292E;">    testDao.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>这里有一点需要注意的地方，由于 SpringAOP 的原因，@Transactional 注解只能用到 public 方法上，如果用到 private 方法上，将会被忽略，这也是面试经常问的考点之一。</strong></p><h4 id="_16-使用位移操作替代乘除法" tabindex="-1">16.使用位移操作替代乘除法 <a class="header-anchor" href="#_16-使用位移操作替代乘除法" aria-label="Permalink to &quot;16.使用位移操作替代乘除法&quot;">​</a></h4><p>计算机是使用二进制表示的，位移操作会极大地提高性能。</p><ul><li><p>&lt;&lt; 左移相当于乘以 2；</p></li><li><p>&gt;&gt; 右移相当于除以 2；</p></li><li><p>&gt;&gt;&gt; 无符号右移相当于除以 2，但它会忽略符号位，空位都以 0 补齐。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (a</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">a) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">a);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(b);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (a</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">a) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">a);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(b);</span></span></code></pre></div><p>注意：位移操作的优先级非常低，所以上面的代码，输出是 1024。</p><h4 id="_17-不要打印大集合或者使用大集合的-tostring-方法" tabindex="-1">17.不要打印大集合或者使用大集合的 toString 方法 <a class="header-anchor" href="#_17-不要打印大集合或者使用大集合的-tostring-方法" aria-label="Permalink to &quot;17.不要打印大集合或者使用大集合的 toString 方法&quot;">​</a></h4><p>有的开发喜欢将集合作为字符串输出到日志文件中，这个习惯是非常不好的。</p><p>拿 ArrayList 来说，它需要遍历所有的元素来迭代生成字符串。在集合中元素非常多的情况下，这不仅会占用大量的内存空间，执行效率也非常慢。我曾经就遇到过这种批量打印方式造成系统性能直线下降的实际案例。</p><p>下面这段代码，就是 ArrayList 的 toString 方法。它需要生成一个迭代器，然后把所有的元素内容拼接成一个字符串，非常浪费空间。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt; it </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[]&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">    StringBuilder sb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    sb.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;[&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        E e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        sb.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(this Collection)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sb.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;]&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        sb.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; it </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[]&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">    StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">        E e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(this Collection)&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> e);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> it.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;]&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_18-程序中少用反射" tabindex="-1">18.程序中少用反射 <a class="header-anchor" href="#_18-程序中少用反射" aria-label="Permalink to &quot;18.程序中少用反射&quot;">​</a></h4><p>反射的功能很强大，但它是通过解析字节码实现的，性能就不是很理想。</p><p>现实中有很多对反射的优化方法，比如把反射执行的过程（比如 Method）缓存起来，使用复用来加快反射速度。</p><p>Java 7.0 之后，加入了新的包 java.lang.invoke，同时加入了新的 JVM 字节码指令 invokedynamic，用来支持从 JVM 层面，直接通过字符串对目标方法进行调用。</p><p>如果你对性能有非常苛刻的要求，则使用 invoke 包下的 MethodHandle 对代码进行着重优化,但它的编程不如反射方便，在平常的编码中，反射依然是首选。</p><p>下面是一个使用 MethodHandle 编写的代码实现类。它可以完成一些动态语言的特性，通过方法名称和传入的对象主体，进行不同的调用，而 Bike 和 Man 类，可以是没有任何关系的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.invoke.MethodHandle;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.invoke.MethodHandles;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.invoke.MethodType;</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodHandleDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bike</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String </span><span style="color:#B392F0;">sound</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ding ding&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String </span><span style="color:#B392F0;">sound</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wow wow&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Man</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        String </span><span style="color:#B392F0;">sound</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hou hou&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">sound</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        MethodHandles.Lookup lookup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MethodHandles.</span><span style="color:#B392F0;">lookup</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        MethodType methodType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MethodType.</span><span style="color:#B392F0;">methodType</span><span style="color:#E1E4E8;">(String.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        MethodHandle methodHandle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lookup.</span><span style="color:#B392F0;">findVirtual</span><span style="color:#E1E4E8;">(o.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;sound&quot;</span><span style="color:#E1E4E8;">, methodType);</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">        String obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String) methodHandle.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(o);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">​</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodHandleDemo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sound</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bike</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">        str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodHandleDemo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sound</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animal</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">        str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodHandleDemo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sound</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Man</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.invoke.MethodHandle;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.invoke.MethodHandles;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.invoke.MethodType;</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodHandleDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bike</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        String </span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ding ding&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        String </span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wow wow&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Man</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        String </span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hou hou&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        MethodHandles.Lookup lookup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MethodHandles.</span><span style="color:#6F42C1;">lookup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        MethodType methodType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MethodType.</span><span style="color:#6F42C1;">methodType</span><span style="color:#24292E;">(String.class);</span></span>
<span class="line"><span style="color:#24292E;">        MethodHandle methodHandle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lookup.</span><span style="color:#6F42C1;">findVirtual</span><span style="color:#24292E;">(o.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;sound&quot;</span><span style="color:#24292E;">, methodType);</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">        String obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String) methodHandle.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(o);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodHandleDemo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bike</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">        str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodHandleDemo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">        str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodHandleDemo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sound</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Man</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_19-正则表达式可以预先编译-加快速度" tabindex="-1">19.正则表达式可以预先编译，加快速度 <a class="header-anchor" href="#_19-正则表达式可以预先编译-加快速度" aria-label="Permalink to &quot;19.正则表达式可以预先编译，加快速度&quot;">​</a></h4><p>Java 的正则表达式需要先编译再使用。</p><p>典型代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Pattern</span><span style="color:#E1E4E8;"> pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Pattern</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">({pattern});</span></span>
<span class="line"><span style="color:#79B8FF;">Matcher</span><span style="color:#E1E4E8;"> pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">({content});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Pattern</span><span style="color:#24292E;"> pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Pattern</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">({pattern});</span></span>
<span class="line"><span style="color:#005CC5;">Matcher</span><span style="color:#24292E;"> pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">({content});</span></span></code></pre></div><p>Pattern 编译非常耗时，它的 Matcher 方法是线程安全的，每次调用方法这个方法都会生成一个新的 Matcher 对象。所以，一般 Pattern 初始化一次即可，可以作为类的静态成员变量。</p><h3 id="案例分析" tabindex="-1">案例分析 <a class="header-anchor" href="#案例分析" aria-label="Permalink to &quot;案例分析&quot;">​</a></h3><h4 id="案例-1-正则表达式和状态机" tabindex="-1">案例 1：正则表达式和状态机 <a class="header-anchor" href="#案例-1-正则表达式和状态机" aria-label="Permalink to &quot;案例 1：正则表达式和状态机&quot;">​</a></h4><p>正则表达式的执行效率是非常慢的，尤其是贪婪模式。</p><p>下面介绍一个我在实际工作中对正则的一个优化，使用状态机完成字符串匹配。</p><p>考虑到下面的一个 SQL 语句，它的语法类似于 NamedParameterJdbcTemplate，但我们对它做了增强。SQL 接收两个参数：smallId 和 firstName，当 firstName 为空的时候，处在 ##{} 之间的语句将被抹去。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">select </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> from </span><span style="color:#79B8FF;">USERS</span></span>
<span class="line"><span style="color:#E1E4E8;">where id</span><span style="color:#F97583;">&gt;:</span><span style="color:#E1E4E8;">smallId</span></span>
<span class="line"><span style="color:#E1E4E8;">##{</span></span>
<span class="line"><span style="color:#E1E4E8;"> and </span><span style="color:#79B8FF;">FIRST_NAME</span><span style="color:#E1E4E8;"> like </span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">firstName,</span><span style="color:#9ECBFF;">&#39;%&#39;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from </span><span style="color:#005CC5;">USERS</span></span>
<span class="line"><span style="color:#24292E;">where id</span><span style="color:#D73A49;">&gt;:</span><span style="color:#24292E;">smallId</span></span>
<span class="line"><span style="color:#24292E;">##{</span></span>
<span class="line"><span style="color:#24292E;"> and </span><span style="color:#005CC5;">FIRST_NAME</span><span style="color:#24292E;"> like </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%&#39;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">firstName,</span><span style="color:#032F62;">&#39;%&#39;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>可以看到，使用正则表达式可以很容易地实现这个功能。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#\\{(.</span><span style="color:#F97583;">*?:</span><span style="color:#E1E4E8;">([a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zA</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Z0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">9_]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">).</span><span style="color:#F97583;">*?</span><span style="color:#E1E4E8;">)\\}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#\\{(.</span><span style="color:#D73A49;">*?:</span><span style="color:#24292E;">([a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zA</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Z0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">9_]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">).</span><span style="color:#D73A49;">*?</span><span style="color:#24292E;">)\\}</span></span></code></pre></div><p>通过定义上面这样一个正则匹配，使用 Pattern 的 group 功能便能提取到相应的字符串。我们把匹配到的字符串保存下来，最后使用 replace 函数，将它替换成空字符串即可。</p><p>结果在实际使用的时候，发现正则的解析速度特别慢，尤其是在 SQL 非常大的时候，这种情况下，可以使用状态机去优化。我这里选用的是 ragel，你也可以使用类似 javacc 或者 antlr 之类的工具。它通过语法解析和简单的正则表达式，最终可以生成 Java 语法的代码。</p><p>生成的代码一般是不可读的，我们只关注定义文件即可。如下定义文件代码所示，通过定义一批描述符和处理程序，使用一些中间数据结构对结果进行缓存，只需要对 SQL 扫描一遍，即可获取相应的结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pairStart </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#{&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">pairEnd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;}&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">namedQueryStringFull </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ( </span><span style="color:#9ECBFF;">&#39;:&#39;</span><span style="color:#E1E4E8;">alnum</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">namedQueryStringFull</span></span>
<span class="line"><span style="color:#E1E4E8;">            ;</span></span>
<span class="line"><span style="color:#E1E4E8;">pairBlock </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        (pairStart</span></span>
<span class="line"><span style="color:#E1E4E8;">            any</span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">            namedQueryStringFull</span></span>
<span class="line"><span style="color:#E1E4E8;">            any</span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">            pairEnd)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">pairBlockBegin </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">pairBlockEnd</span></span>
<span class="line"><span style="color:#E1E4E8;">        ;</span></span>
<span class="line"><span style="color:#E1E4E8;">main </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> any</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> pairBlock any</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pairStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#{&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">pairEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">namedQueryStringFull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ( </span><span style="color:#032F62;">&#39;:&#39;</span><span style="color:#24292E;">alnum</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">buffer</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">namedQueryStringFull</span></span>
<span class="line"><span style="color:#24292E;">            ;</span></span>
<span class="line"><span style="color:#24292E;">pairBlock </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        (pairStart</span></span>
<span class="line"><span style="color:#24292E;">            any</span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">            namedQueryStringFull</span></span>
<span class="line"><span style="color:#24292E;">            any</span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">            pairEnd)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">pairBlockBegin </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">pairBlockEnd</span></span>
<span class="line"><span style="color:#24292E;">        ;</span></span>
<span class="line"><span style="color:#24292E;">main </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> any</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> pairBlock any</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">;</span></span></code></pre></div><p>把文件定义好之后，即可通过 ragel 命令生成 Java 语法的最终文件。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">ragel -G2 -J -o P.java P.rl</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">ragel -G2 -J -o P.java P.rl</span></span></code></pre></div><p>完整的代码有点复杂，我已经放到了<a href="https://gitee.com/xjjdog/tuning-lagou-res/tree/master/tuning-016/java/src/main/java/com/github/xjjdog/java/dsl" target="_blank" rel="noreferrer">仓库</a>中，你可以实际分析一下。</p><p>我们来看一下它的性能。从测试结果可以看到，ragel 模式的性能是 regex 模式的 3 倍还多，SQL 越长，效果越明显。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Benchmark                     Mode  Cnt    Score     Error   Units</span></span>
<span class="line"><span style="color:#E1E4E8;">RegexVsRagelBenchmark.ragel  thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">691.224</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">446.217</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span>
<span class="line"><span style="color:#E1E4E8;">RegexVsRagelBenchmark.regex  thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">201.322</span><span style="color:#E1E4E8;"> ±  </span><span style="color:#79B8FF;">47.056</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Benchmark                     Mode  Cnt    Score     Error   Units</span></span>
<span class="line"><span style="color:#24292E;">RegexVsRagelBenchmark.ragel  thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">691.224</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">446.217</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span>
<span class="line"><span style="color:#24292E;">RegexVsRagelBenchmark.regex  thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">201.322</span><span style="color:#24292E;"> ±  </span><span style="color:#005CC5;">47.056</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span></code></pre></div><h4 id="案例-2-hikaricp-的字节码修改" tabindex="-1">案例 2：HikariCP 的字节码修改 <a class="header-anchor" href="#案例-2-hikaricp-的字节码修改" aria-label="Permalink to &quot;案例 2：HikariCP 的字节码修改&quot;">​</a></h4><p>在 <strong>&quot;09 | 案例分析：池化对象的应用场景&quot;</strong> 中，我们提到了 HikariCP 对字节码的修改，这个职责是由 JavassistProxyFactory 类来管理的。Javassist 是一个字节码类库，HikariCP 就是用它对字节码进行修改。</p><p>如下图所示，这是工厂类的主要方法。</p>`,110),E=s(`<p>它通过 generateProxyClass 生成代理类，主要是针对 Connection、Statement、ResultSet、DatabaseMetaData 等 jdbc 的核心接口。</p><p>右键运行这个类，可以看到代码生成了一堆 Class 文件。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Generating</span><span style="color:#E1E4E8;"> com.zaxxer.hikari.pool.</span><span style="color:#79B8FF;">HikariProxyConnection</span></span>
<span class="line"><span style="color:#79B8FF;">Generating</span><span style="color:#E1E4E8;"> com.zaxxer.hikari.pool.</span><span style="color:#79B8FF;">HikariProxyStatement</span></span>
<span class="line"><span style="color:#79B8FF;">Generating</span><span style="color:#E1E4E8;"> com.zaxxer.hikari.pool.</span><span style="color:#79B8FF;">HikariProxyResultSet</span></span>
<span class="line"><span style="color:#79B8FF;">Generating</span><span style="color:#E1E4E8;"> com.zaxxer.hikari.pool.</span><span style="color:#79B8FF;">HikariProxyDatabaseMetaData</span></span>
<span class="line"><span style="color:#79B8FF;">Generating</span><span style="color:#E1E4E8;"> com.zaxxer.hikari.pool.</span><span style="color:#79B8FF;">HikariProxyPreparedStatement</span></span>
<span class="line"><span style="color:#79B8FF;">Generating</span><span style="color:#E1E4E8;"> com.zaxxer.hikari.pool.</span><span style="color:#79B8FF;">HikariProxyCallableStatement</span></span>
<span class="line"><span style="color:#79B8FF;">Generating</span><span style="color:#E1E4E8;"> method bodies </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> com.zaxxer.hikari.proxy.</span><span style="color:#79B8FF;">ProxyFactory</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Generating</span><span style="color:#24292E;"> com.zaxxer.hikari.pool.</span><span style="color:#005CC5;">HikariProxyConnection</span></span>
<span class="line"><span style="color:#005CC5;">Generating</span><span style="color:#24292E;"> com.zaxxer.hikari.pool.</span><span style="color:#005CC5;">HikariProxyStatement</span></span>
<span class="line"><span style="color:#005CC5;">Generating</span><span style="color:#24292E;"> com.zaxxer.hikari.pool.</span><span style="color:#005CC5;">HikariProxyResultSet</span></span>
<span class="line"><span style="color:#005CC5;">Generating</span><span style="color:#24292E;"> com.zaxxer.hikari.pool.</span><span style="color:#005CC5;">HikariProxyDatabaseMetaData</span></span>
<span class="line"><span style="color:#005CC5;">Generating</span><span style="color:#24292E;"> com.zaxxer.hikari.pool.</span><span style="color:#005CC5;">HikariProxyPreparedStatement</span></span>
<span class="line"><span style="color:#005CC5;">Generating</span><span style="color:#24292E;"> com.zaxxer.hikari.pool.</span><span style="color:#005CC5;">HikariProxyCallableStatement</span></span>
<span class="line"><span style="color:#005CC5;">Generating</span><span style="color:#24292E;"> method bodies </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> com.zaxxer.hikari.proxy.</span><span style="color:#005CC5;">ProxyFactory</span></span></code></pre></div><p>对于这一部分的代码组织，使用了设计模式中的委托模式。我们发现 HikariCP 源码中的代理类，比如 ProxyConnection，都是 abstract 的，它的具体实例就是使用 javassist 生成的 class 文件。反编译这些生成的 class 文件，可以看到它实际上是通过调用父类中的委托对象进行处理的。</p>`,4),y=s(`<p>这么做有两个好处：</p><ul><li><p>第一，在代码中只需要实现需要修改的 JDBC 接口方法，其他的交给代理类自动生成的代码，极大地减少了编码数量。</p></li><li><p>第二，出现问题时，可以通过 checkException 函数对错误进行统一处理。</p></li></ul><p>另外，我们注意到 ProxyFactory 类中的方法，都是静态方法，而不是通过单例实现的。为什么这么做呢？这就涉及 JVM 底层的两个字节码指令：invokestatic 和 invokevirtual。</p><p>下面是两种不同类型调用的字节码。</p><ul><li><strong>invokevirtual</strong></li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> java.sql.</span><span style="color:#79B8FF;">PreparedStatement</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(java.lang.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, java.lang.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">[]) throws java.sql.</span><span style="color:#79B8FF;">SQLException</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    flags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ACC_PRIVATE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ACC_FINAL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      stack</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, locals</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, args_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getstatic     #</span><span style="color:#79B8FF;">59</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;">// Field PROXY_FACTORY:Lcom/zaxxer/hikari/proxy/ProxyFactory;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getfield      #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Field delegate:Ljava/sql/Connection;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_2</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokeinterface #</span><span style="color:#79B8FF;">74</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">15</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">69</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;">// Method com/zaxxer/hikari/proxy/ProxyFactory.getProxyPreparedStatement:(Lcom/zaxxer/hikari/proxy/ConnectionProxy;Ljava/sql/PreparedStatement;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> java.sql.</span><span style="color:#005CC5;">PreparedStatement</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(java.lang.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, java.lang.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">[]) throws java.sql.</span><span style="color:#005CC5;">SQLException</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    flags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ACC_PRIVATE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ACC_FINAL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      stack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, locals</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, args_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getstatic     #</span><span style="color:#005CC5;">59</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;">// Field PROXY_FACTORY:Lcom/zaxxer/hikari/proxy/ProxyFactory;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_0</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_0</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getfield      #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field delegate:Ljava/sql/Connection;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokeinterface #</span><span style="color:#005CC5;">74</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">           </span><span style="color:#6A737D;">// InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">15</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">69</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;">// Method com/zaxxer/hikari/proxy/ProxyFactory.getProxyPreparedStatement:(Lcom/zaxxer/hikari/proxy/ConnectionProxy;Ljava/sql/PreparedStatement;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span></code></pre></div><ul><li><strong>invokestatic</strong></li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">private </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> java.sql.</span><span style="color:#79B8FF;">PreparedStatement</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(java.lang.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, java.lang.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">[]) throws java.sql.</span><span style="color:#79B8FF;">SQLException</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    flags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ACC_PRIVATE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ACC_FINAL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      stack</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, locals</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, args_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getfield      #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Field delegate:Ljava/sql/Connection;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_2</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokeinterface #</span><span style="color:#79B8FF;">72</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokestatic  #</span><span style="color:#79B8FF;">67</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;">// Method com/zaxxer/hikari/proxy/ProxyFactory.getProxyPreparedStatement:(Lcom/zaxxer/hikari/proxy/ConnectionProxy;Ljava/sql/PreparedStatement;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">15</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> areturn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">private </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> java.sql.</span><span style="color:#005CC5;">PreparedStatement</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(java.lang.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, java.lang.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">[]) throws java.sql.</span><span style="color:#005CC5;">SQLException</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    flags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ACC_PRIVATE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ACC_FINAL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      stack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, locals</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, args_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_0</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_0</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getfield      #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field delegate:Ljava/sql/Connection;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_2</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokeinterface #</span><span style="color:#005CC5;">72</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">           </span><span style="color:#6A737D;">// InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokestatic  #</span><span style="color:#005CC5;">67</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;">// Method com/zaxxer/hikari/proxy/ProxyFactory.getProxyPreparedStatement:(Lcom/zaxxer/hikari/proxy/ConnectionProxy;Ljava/sql/PreparedStatement;)Ljava/sql/PreparedStatement;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">15</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> areturn</span></span></code></pre></div><p>大多数普通方法调用，使用的是<strong>invokevirtual</strong>指令，属于虚方法调用。</p><p>很多时候，JVM 需要根据调用者的动态类型，来确定调用的目标方法，这就是动态绑定的过程；相对比，<strong>invokestatic</strong>指令，就属于静态绑定过程，能够直接识别目标方法，效率会高那么一点点。</p><p>虽然 HikariCP 的这些优化有点吹毛求疵，但我们能够从中看到 HikariCP 这些追求性能极致的编码技巧。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>此外，学习 Java 规范，你还可以细读<a href="https://github.com/alibaba/p3c/blob/master/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E5%B5%A9%E5%B1%B1%E7%89%88%EF%BC%89.pdf" target="_blank" rel="noreferrer">《阿里巴巴 Java 开发规范》</a>，里面也有很多有意义的建议。</p><p>其实语言层面的性能优化，都是在各个资源之间的权衡（比如开发时间、代码复杂度、扩展性等）。这些法则也不是一成不变的教条，这就要求我们在编码中选择合适的工具，根据实际的工作场景进行灵活变动。</p><p>接下来，我们将进入&quot;模块四：JVM 优化&quot;，下一课时我将讲解 <strong>&quot;17 | 高级进阶：JVM 如何完成垃圾回收？&quot;</strong> ，带你向高级进阶。</p>`,15);function i(d,F,g,C,u,h){const a=o("Image");return e(),t("div",null,[r,n(a,{alt:"15970255895249.jpg",src:"https://s0.lgstatic.com/i/image/M00/49/5B/CgqCHl9PEBqAUmucAABlRi1dKhM359.jpg"}),l(),E,n(a,{alt:"15970285875030.jpg",src:"https://s0.lgstatic.com/i/image/M00/49/5B/CgqCHl9PECuAFz5zAAB0EwpHKE0091.jpg"}),l(),y])}const B=p(c,[["render",i]]);export{A as __pageData,B as default};
