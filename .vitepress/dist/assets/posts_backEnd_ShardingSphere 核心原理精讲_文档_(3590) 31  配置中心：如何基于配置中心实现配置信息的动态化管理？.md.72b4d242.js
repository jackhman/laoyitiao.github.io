import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.4e7d56ce.js";const d=JSON.parse('{"title":"31配置中心：如何基于配置中心实现配置信息的动态化管理？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3590) 31  配置中心：如何基于配置中心实现配置信息的动态化管理？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3590) 31  配置中心：如何基于配置中心实现配置信息的动态化管理？.md","lastUpdated":1696338709000}'),l={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3590) 31  配置中心：如何基于配置中心实现配置信息的动态化管理？.md"},o=p(`<h1 id="_31配置中心-如何基于配置中心实现配置信息的动态化管理" tabindex="-1">31配置中心：如何基于配置中心实现配置信息的动态化管理？ <a class="header-anchor" href="#_31配置中心-如何基于配置中心实现配置信息的动态化管理" aria-label="Permalink to &quot;31配置中心：如何基于配置中心实现配置信息的动态化管理？&quot;">​</a></h1><p>ShardingSphere 在编排治理方面包括配置动态化、注册中心、数据库熔断禁用、调用链路等治理能力。</p><p>今天我们先来介绍最简单的配置中心，即如何基于配置中心从而实现配置信息的动态化管理。</p><h3 id="shardingsphere-中对配置中心的抽象过程" tabindex="-1">ShardingSphere 中对配置中心的抽象过程 <a class="header-anchor" href="#shardingsphere-中对配置中心的抽象过程" aria-label="Permalink to &quot;ShardingSphere 中对配置中心的抽象过程&quot;">​</a></h3><p>配置中心的核心接口 ConfigCenter 位于 sharding-orchestration-config-api 工程中，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigCenter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeBasedSPI</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//初始化配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(ConfigCenterConfiguration </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取配置项数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//直接获取配置项数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getDirectly</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否存在配置项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isExisted</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取子配置项列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getChildrenKeys</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//持久化配置项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">persist</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//更新配置项</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//持久化临时数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">persistEphemeral</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//对配置项或路径进行监听</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, DataChangedEventListener </span><span style="color:#FFAB70;">dataChangedEventListener</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//关闭配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigCenter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeBasedSPI</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//初始化配置中心</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(ConfigCenterConfiguration </span><span style="color:#E36209;">config</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取配置项数据</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//直接获取配置项数据</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getDirectly</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否存在配置项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isExisted</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取子配置项列表</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getChildrenKeys</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//持久化配置项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">persist</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//更新配置项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//持久化临时数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">persistEphemeral</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//对配置项或路径进行监听</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, DataChangedEventListener </span><span style="color:#E36209;">dataChangedEventListener</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//关闭配置中心</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述方法中，唯一值得展开的就是 watch 方法，该方法传入了一个代表事件监听器的 DataChangedEventListener 接口，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataChangedEventListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//当数据变动时进行触发</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onChange</span><span style="color:#E1E4E8;">(DataChangedEvent </span><span style="color:#FFAB70;">dataChangedEvent</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataChangedEventListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//当数据变动时进行触发</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(DataChangedEvent </span><span style="color:#E36209;">dataChangedEvent</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用到的 DataChangedEvent 类定义如下，可以看到事件的类型有三种，分别是 UPDATED、DELETED 和 IGNORED：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataChangedEvent</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ChangedType changedType;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChangedType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">UPDATED</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">DELETED</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">IGNORED</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataChangedEvent</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String value;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ChangedType changedType;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChangedType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">UPDATED</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">DELETED</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">IGNORED</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们同样注意到 ConfigCenter 接口继承了 TypeBasedSPI 接口，所以集成了 SPI 机制。在 ShardingSphere 中，ConfigCenter 接口有两个实现类，分别基于 Apollo 的 ApolloConfigCenter 和基于 Zookeeper 的 CuratorZookeeperConfigCenter。</p><p>我们分别展开讲解一下。</p><h3 id="apolloconfigcenter" tabindex="-1">ApolloConfigCenter <a class="header-anchor" href="#apolloconfigcenter" aria-label="Permalink to &quot;ApolloConfigCenter&quot;">​</a></h3><h4 id="_1-apolloconfigcenter-的实现过程" tabindex="-1">1.ApolloConfigCenter 的实现过程 <a class="header-anchor" href="#_1-apolloconfigcenter-的实现过程" aria-label="Permalink to &quot;1.ApolloConfigCenter 的实现过程&quot;">​</a></h4><p>我们先来看基于 Apollo 的 ApolloConfigCenter，它的 init 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConfigCenterConfiguration config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//从配置对象中获取配置信息并设置系统属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;app.id&quot;</span><span style="color:#E1E4E8;">, properties.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;appId&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;APOLLO_SHARDING_SPHERE&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;env&quot;</span><span style="color:#E1E4E8;">, properties.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;env&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;DEV&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(ConfigConsts.APOLLO_CLUSTER_KEY, properties.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;clusterName&quot;</span><span style="color:#E1E4E8;">, ConfigConsts.CLUSTER_NAME_DEFAULT));</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(ConfigConsts.APOLLO_META_KEY, config.</span><span style="color:#B392F0;">getServerLists</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过配置对象构建 ApolloConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">        apolloConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConfigService.</span><span style="color:#B392F0;">getConfig</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getNamespace</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConfigCenterConfiguration config) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//从配置对象中获取配置信息并设置系统属性</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;app.id&quot;</span><span style="color:#24292E;">, properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;appId&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;APOLLO_SHARDING_SPHERE&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;env&quot;</span><span style="color:#24292E;">, properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;env&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;DEV&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(ConfigConsts.APOLLO_CLUSTER_KEY, properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;clusterName&quot;</span><span style="color:#24292E;">, ConfigConsts.CLUSTER_NAME_DEFAULT));</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(ConfigConsts.APOLLO_META_KEY, config.</span><span style="color:#6F42C1;">getServerLists</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过配置对象构建 ApolloConfig</span></span>
<span class="line"><span style="color:#24292E;">        apolloConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConfigService.</span><span style="color:#6F42C1;">getConfig</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getNamespace</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述 init 方法的作用是在设置系统属性的同时，构建一个 Config 对象。在 Apollo 中，基于这个 Config 对象就可以实现对配置项的操作，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> apolloConfig.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(key.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDirectly</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isExisted</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> apolloConfig.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDirectly</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isExisted</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意这里的 getDirectly 方法和 get 方法的处理方式实际上是一致的。而对于 Apollo 而言，getChildrenKeys、persist、update 和 persistEphemeral 等方法都是无效的，因为不支持这样的操作。但是对于常见的监听机制，Apollo 也提供了它的实现方案，可以通过对 Config 对象添加 ChangeListener 来实现监听效果，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataChangedEventListener dataChangedEventListener) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//添加 Apollo 中的监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">     apolloConfig.</span><span style="color:#B392F0;">addChangeListener</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigChangeListener</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onChange</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConfigChangeEvent </span><span style="color:#FFAB70;">changeEvent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> changeEvent.</span><span style="color:#B392F0;">changedKeys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">//获取 Apollo 监听事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ConfigChange change </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> changeEvent.</span><span style="color:#B392F0;">getChange</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    DataChangedEvent.ChangedType changedType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getChangedType</span><span style="color:#E1E4E8;">(change.</span><span style="color:#B392F0;">getChangeType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (DataChangedEvent.ChangedType.IGNORED </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> changedType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;">//将 Apollo 中的监听事件转化为 ShardingSphere 中的监听事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;">//通过 EventListener 触发事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                        dataChangedEventListener.</span><span style="color:#B392F0;">onChange</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataChangedEvent</span><span style="color:#E1E4E8;">(key, change.</span><span style="color:#B392F0;">getNewValue</span><span style="color:#E1E4E8;">(), changedType));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, Sets.</span><span style="color:#B392F0;">newHashSet</span><span style="color:#E1E4E8;">(key));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataChangedEventListener dataChangedEventListener) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//添加 Apollo 中的监听器</span></span>
<span class="line"><span style="color:#24292E;">     apolloConfig.</span><span style="color:#6F42C1;">addChangeListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigChangeListener</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConfigChangeEvent </span><span style="color:#E36209;">changeEvent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> changeEvent.</span><span style="color:#6F42C1;">changedKeys</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">//获取 Apollo 监听事件</span></span>
<span class="line"><span style="color:#24292E;">                    ConfigChange change </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> changeEvent.</span><span style="color:#6F42C1;">getChange</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                    DataChangedEvent.ChangedType changedType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getChangedType</span><span style="color:#24292E;">(change.</span><span style="color:#6F42C1;">getChangeType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (DataChangedEvent.ChangedType.IGNORED </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> changedType) {</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#6A737D;">//将 Apollo 中的监听事件转化为 ShardingSphere 中的监听事件</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#6A737D;">//通过 EventListener 触发事件</span></span>
<span class="line"><span style="color:#24292E;">                        dataChangedEventListener.</span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataChangedEvent</span><span style="color:#24292E;">(key, change.</span><span style="color:#6F42C1;">getNewValue</span><span style="color:#24292E;">(), changedType));</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, Sets.</span><span style="color:#6F42C1;">newHashSet</span><span style="color:#24292E;">(key));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码的逻辑在于当事件被 Apollo 监听，并触发上述 watch 方法时，我们会将 Apollo 中的事件类型转化为 ShardingSphere 中自身的事件类型，并通过 DataChangedEventListener 进行传播和处理。</p><h4 id="_2-shardingsphere-中的事件驱动架构" tabindex="-1">2.ShardingSphere 中的事件驱动架构 <a class="header-anchor" href="#_2-shardingsphere-中的事件驱动架构" aria-label="Permalink to &quot;2.ShardingSphere 中的事件驱动架构&quot;">​</a></h4><p>讲到 DataChangedEventListener，我们不得不对 ShardingSphere 中的事件驱动框架做一些展开。</p><p>显然，从命名上看，DataChangedEventListener 是一种事件监听器，用于监听各种 DataChangedEvent。</p><p>注意到 ShardingSphere 并没有提供 DataChangedEventListener 接口的任何实现类，而是大量采用了匿名方法进行事件的监听，一种典型的实现方式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataChangedEventListener</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onChange</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataChangedEvent </span><span style="color:#FFAB70;">dataChangedEvent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	     ...</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//通过 EventBus 发布事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                    eventBus.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createXXXEvent</span><span style="color:#E1E4E8;">(dataChangedEvent));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataChangedEventListener</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataChangedEvent </span><span style="color:#E36209;">dataChangedEvent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	     ...</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//通过 EventBus 发布事件</span></span>
<span class="line"><span style="color:#24292E;">                    eventBus.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createXXXEvent</span><span style="color:#24292E;">(dataChangedEvent));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>在通过 DataChangedEventListener 监听到某一个 DataChangedEvent 并进行传播时，ShardingSphere 的处理过程就是通过 EventBus 类的 post 方法将事件进行进一步转发。这里使用的 EventBus 同样来自 Google 的 Guava 框架，代表了一种事件总线的实现方式。</p><p>现在，事件已经可以通过 EventBus 进行发送了，那么这些被发送的事件是怎么被消费的呢？在 ShardingSphere 中，存在一个 ShardingOrchestrationEventBus 包装类，包装了对 EventBus 的使用过程。</p><p>这个包装过程非常简单，只是使用单例模式构建了一个 EventBus 对象而已，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingOrchestrationEventBus</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventBus INSTANCE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventBus</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//使用单例模式构建单例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> EventBus </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> INSTANCE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingOrchestrationEventBus</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventBus INSTANCE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventBus</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//使用单例模式构建单例对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> EventBus </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> INSTANCE;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果我们想要订阅通过 EventBus 发送的事件，只要把自身注册到 EventBus 上即可，可以直接通过 EventBus 提供的 register 方法实现这一目标，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ShardingOrchestrationEventBus.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ShardingOrchestrationEventBus.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span></code></pre></div><p>另一方面，在 Guava 的 EventBus 机制中，提供了 @Subscribe 注解用来标识对具体某一种事件的处理方法。一旦在某个方法上添加了 @Subscribe 注解，这个方法就可以自动用来处理所传入的事件。</p><p>所以，我们进一步总结事件订阅者的代码结构，可以得到如下所示的伪代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Subscriber</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Subscriber</span><span style="color:#E1E4E8;">(...) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//将自己注册到 EventBus 中</span></span>
<span class="line"><span style="color:#E1E4E8;">        ShardingOrchestrationEventBus.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Subscribe</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renew</span><span style="color:#E1E4E8;">(DataSourceChangedEvent </span><span style="color:#FFAB70;">dataSourceChangedEvent</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#6A737D;">//消费事件</span></span>
<span class="line"><span style="color:#E1E4E8;">	    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Subscriber</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Subscriber</span><span style="color:#24292E;">(...) {</span></span>
<span class="line"><span style="color:#24292E;">	    ...</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//将自己注册到 EventBus 中</span></span>
<span class="line"><span style="color:#24292E;">        ShardingOrchestrationEventBus.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Subscribe</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renew</span><span style="color:#24292E;">(DataSourceChangedEvent </span><span style="color:#E36209;">dataSourceChangedEvent</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#6A737D;">//消费事件</span></span>
<span class="line"><span style="color:#24292E;">	    ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以想象，ShardingSphere 中势必存在一批符合上述代码结构的实现类，用于监听配置中心所产生的配置信息变更事件。以如下所示的 LogicSchema 类为例，我们可以看到它的实现过程就是很典型的一种事件订阅者：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LogicSchema</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LogicSchema</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">YamlDataSourceParameter</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">dataSources</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">	    ShardingOrchestrationEventBus.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Subscribe</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renew</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataSourceChangedEvent </span><span style="color:#FFAB70;">dataSourceChangedEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">name.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(dataSourceChangedEvent.</span><span style="color:#B392F0;">getShardingSchemaName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据 DataSourceChangedEvent 更新 DataSource 的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        backendDataSource.</span><span style="color:#B392F0;">renew</span><span style="color:#E1E4E8;">(DataSourceConverter.</span><span style="color:#B392F0;">getDataSourceParameterMap</span><span style="color:#E1E4E8;">(dataSourceChangedEvent.</span><span style="color:#B392F0;">getDataSourceConfigurations</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogicSchema</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogicSchema</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">YamlDataSourceParameter</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">dataSources</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    ...</span></span>
<span class="line"><span style="color:#24292E;">	    ShardingOrchestrationEventBus.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Subscribe</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renew</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataSourceChangedEvent </span><span style="color:#E36209;">dataSourceChangedEvent</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">name.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(dataSourceChangedEvent.</span><span style="color:#6F42C1;">getShardingSchemaName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据 DataSourceChangedEvent 更新 DataSource 的配置</span></span>
<span class="line"><span style="color:#24292E;">        backendDataSource.</span><span style="color:#6F42C1;">renew</span><span style="color:#24292E;">(DataSourceConverter.</span><span style="color:#6F42C1;">getDataSourceParameterMap</span><span style="color:#24292E;">(dataSourceChangedEvent.</span><span style="color:#6F42C1;">getDataSourceConfigurations</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述 LogicSchema 类会根据 DataSourceChangedEvent 中携带的配置信息来更新DataSource的配置，从而实现配置信息的动态化管理。</p><p>在介绍完 ApolloConfigCenter 之后，我们再来看一下 ShardingSphere 中另一种配置中心的实现方式，即 CuratorZookeeperConfigCenter。</p><h3 id="curatorzookeeperconfigcenter" tabindex="-1">CuratorZookeeperConfigCenter <a class="header-anchor" href="#curatorzookeeperconfigcenter" aria-label="Permalink to &quot;CuratorZookeeperConfigCenter&quot;">​</a></h3><h4 id="_1-zookeeper-和-curator-简介" tabindex="-1">1.Zookeeper 和 Curator 简介 <a class="header-anchor" href="#_1-zookeeper-和-curator-简介" aria-label="Permalink to &quot;1.Zookeeper 和 Curator 简介&quot;">​</a></h4><p>CuratorZookeeperConfigCenter 使用 Zookeeper 作为配置中心的服务组件。针对如何使用 Zookeeper，业界也存在一些开源的客户端，而在ShardingSphere 采用的是 Curator。</p><p>在介绍 CuratorZookeeperConfigCenter 之前，我们先来对 Zookeeper 和 Curator 做简要介绍。</p><ul><li><strong>Zookeeper</strong></li></ul><p>对于 Zookeeper 而言，我们知道它有两个特性与分布式协调直接相关，一个是会话机制，一个是Watcher机制。</p><p>会话是客户端和服务器端的 TCP 连接，能够发送请求并接收监听器 Watcher 事件，而Watcher 机制本质上就是分布式的回调。就类型而言，会话又可以分为<strong>短暂性会话</strong> 和<strong>持久性会话</strong>两种，前者在会话断开的同时会自动删除会话对应的 ZNode，而后者则不会。ZNode 的客户端关注 ZNode 发生的变化，一旦发生变化则回传消息到客户端，然后客户端的消息处理函数得到调用。在 Zookeeper 中，任何读操作都能够设置 Watcher。</p><ul><li><strong>Curator</strong></li></ul><p>在我们使用 Zookeeper 时，一般不使用它原生的 API，而是倾向于采用客户端集成框架，这其中最具代表性的就是 Curator。Curator 解决了很多 Zookeeper 客户端非常底层的细节开发工作，包括连接重试、反复注册 Watcher 和 NodeExistsException 异常等。</p><p>Curator 包含了几个包：其中 curator-framework 包提供了对 Zookeeper 底层 API 的一层封装；curator-client 包则提供一些客户端的操作，例如重试策略等；而 curator-recipes 包封装了一些高级特性，如选举、分布式锁、分布式计数器等。</p><p>在使用 Curator 时，首先需要创建一个 CuratorFramework 客户端对象，这一过程可以使用 CuratorFrameworkFactory 工厂类进行完成。对于 CuratorFrameworkFactory 而言，我们一方面需要指定与 Zookeeper 的链接 URL connectString、会话超时时间 sessionTimeoutMs、连接创建超时时间 connectionTimeoutMs，以及重试策略 retryPolicy；另一方面也可以根据需要设置安全认证信息。</p><p>一旦我们获取了 CuratorFramework 对象，就可以调用它的 start 方法启动客户端，然后通过 create/delete 来创建和删除节点，通过 getData/setData 方法获取，以及设置对应节点中的数据。当然，最为重要的是我们可以在节点上添加监听器。</p><p>接下来就让我们一起看一下 ShardingSphere 中如何使用 Curator 完成与 Zookeeper 的集成方法。</p><h4 id="_2-curatorzookeeperconfigcenter-的实现过程" tabindex="-1">2.CuratorZookeeperConfigCenter 的实现过程 <a class="header-anchor" href="#_2-curatorzookeeperconfigcenter-的实现过程" aria-label="Permalink to &quot;2.CuratorZookeeperConfigCenter 的实现过程&quot;">​</a></h4><p>在 ShardingSphere 中，使用 CuratorFrameworkFactory 创建 CuratorFramework 客户端对象的过程如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CuratorFramework </span><span style="color:#B392F0;">buildCuratorClient</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConfigCenterConfiguration config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//构建 CuratorFrameworkFactory 并设置连接属性</span></span>
<span class="line"><span style="color:#E1E4E8;">     CuratorFrameworkFactory.Builder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">connectString</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getServerLists</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">retryPolicy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getRetryIntervalMilliseconds</span><span style="color:#E1E4E8;">(), config.</span><span style="color:#B392F0;">getMaxRetries</span><span style="color:#E1E4E8;">(), config.</span><span style="color:#B392F0;">getRetryIntervalMilliseconds</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getMaxRetries</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">namespace</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getNamespace</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getTimeToLiveSeconds</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            builder.</span><span style="color:#B392F0;">sessionTimeoutMs</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getTimeToLiveSeconds</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getOperationTimeoutMilliseconds</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            builder.</span><span style="color:#B392F0;">connectionTimeoutMs</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getOperationTimeoutMilliseconds</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//设置安全摘要信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getDigest</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            builder.</span><span style="color:#B392F0;">authorization</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;digest&quot;</span><span style="color:#E1E4E8;">, config.</span><span style="color:#B392F0;">getDigest</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(Charsets.UTF_8))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">aclProvider</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ACLProvider</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ACL</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getDefaultAcl</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ZooDefs.Ids.CREATOR_ALL_ACL;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ACL</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAclForPath</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ZooDefs.Ids.CREATOR_ALL_ACL;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CuratorFramework </span><span style="color:#6F42C1;">buildCuratorClient</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConfigCenterConfiguration config) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//构建 CuratorFrameworkFactory 并设置连接属性</span></span>
<span class="line"><span style="color:#24292E;">     CuratorFrameworkFactory.Builder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">connectString</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getServerLists</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">retryPolicy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getRetryIntervalMilliseconds</span><span style="color:#24292E;">(), config.</span><span style="color:#6F42C1;">getMaxRetries</span><span style="color:#24292E;">(), config.</span><span style="color:#6F42C1;">getRetryIntervalMilliseconds</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getMaxRetries</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">namespace</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getNamespace</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getTimeToLiveSeconds</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            builder.</span><span style="color:#6F42C1;">sessionTimeoutMs</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getTimeToLiveSeconds</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getOperationTimeoutMilliseconds</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            builder.</span><span style="color:#6F42C1;">connectionTimeoutMs</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getOperationTimeoutMilliseconds</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//设置安全摘要信息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getDigest</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            builder.</span><span style="color:#6F42C1;">authorization</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;digest&quot;</span><span style="color:#24292E;">, config.</span><span style="color:#6F42C1;">getDigest</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(Charsets.UTF_8))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">aclProvider</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ACLProvider</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ACL</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getDefaultAcl</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ZooDefs.Ids.CREATOR_ALL_ACL;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ACL</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAclForPath</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">path</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ZooDefs.Ids.CREATOR_ALL_ACL;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码相对比较固化，我们可以直接在自己的应用程序中进行借鉴和参考。</p><p>然后我们来看它的 persist 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">persist</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isExisted</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//创建持久化节点</span></span>
<span class="line"><span style="color:#E1E4E8;">                client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">creatingParentsIfNeeded</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.PERSISTENT).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(key, value.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(Charsets.UTF_8));</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(key, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            CuratorZookeeperExceptionHandler.</span><span style="color:#B392F0;">handleException</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">persist</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isExisted</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//创建持久化节点</span></span>
<span class="line"><span style="color:#24292E;">                client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">creatingParentsIfNeeded</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.PERSISTENT).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(key, value.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(Charsets.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(key, value);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            CuratorZookeeperExceptionHandler.</span><span style="color:#6F42C1;">handleException</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里使用了 CreateMode.PERSISTENT 模式来创建接口，也就是说创建的是一种持久化节点。而另一个 persistEphemeral 方法中，则通过设置 CreateMode.EPHEMERAL 来创建临时节点。</p><p>如下所示的 update 方法也值得一看，我们看到了如何基于 Curator 实现在事务中更新数据的具体实现方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//在事务中更新数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            client.</span><span style="color:#B392F0;">inTransaction</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(key).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(key, value.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(Charsets.UTF_8)).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            CuratorZookeeperExceptionHandler.</span><span style="color:#B392F0;">handleException</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//在事务中更新数据</span></span>
<span class="line"><span style="color:#24292E;">            client.</span><span style="color:#6F42C1;">inTransaction</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(key).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(key, value.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(Charsets.UTF_8)).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            CuratorZookeeperExceptionHandler.</span><span style="color:#6F42C1;">handleException</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们来到获取数据的 get 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//先通过缓存获取数据，如果没有则通过 getDirectly 直接获取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        TreeCache cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findTreeCache</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> cache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDirectly</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ChildData resultInCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">getCurrentData</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> resultInCache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> resultInCache.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(resultInCache.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(), Charsets.UTF_8);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDirectly</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//先通过缓存获取数据，如果没有则通过 getDirectly 直接获取数据</span></span>
<span class="line"><span style="color:#24292E;">        TreeCache cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findTreeCache</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> cache) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDirectly</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ChildData resultInCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">getCurrentData</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> resultInCache) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> resultInCache.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(resultInCache.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(), Charsets.UTF_8);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDirectly</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意到在这个 get 方法中，ShardingSphere 使用了缓存机制来提升数据获取的效率。如果缓存没有命中，才会调用 getDirectly 方法来直接从 Zookeeper 中获取数据。</p><p>最后，让我们来到最为关键的 watch 方法，该方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataChangedEventListener dataChangedEventListener) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">caches.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(path)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">addCacheData</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        TreeCache cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> caches.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(path);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//添加 Zookeeper 监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache.</span><span style="color:#B392F0;">getListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeCacheListener</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">childEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CuratorFramework </span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TreeCacheEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> UnsupportedEncodingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//获取 Zookeeper 监听事件</span></span>
<span class="line"><span style="color:#E1E4E8;">              ChildData data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//将 Zookeeper 中的监听事件转化为 ShardingSphere 中的监听事件</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//通过 EventListener 触发事件</span></span>
<span class="line"><span style="color:#E1E4E8;">                DataChangedEvent.ChangedType changedType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getChangedType</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (DataChangedEvent.ChangedType.IGNORED </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> changedType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    dataChangedEventListener.</span><span style="color:#B392F0;">onChange</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataChangedEvent</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">), changedType));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataChangedEventListener dataChangedEventListener) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">caches.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(path)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">addCacheData</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        TreeCache cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> caches.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//添加 Zookeeper 监听器</span></span>
<span class="line"><span style="color:#24292E;">        cache.</span><span style="color:#6F42C1;">getListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeCacheListener</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">childEvent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CuratorFramework </span><span style="color:#E36209;">client</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TreeCacheEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> UnsupportedEncodingException {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//获取 Zookeeper 监听事件</span></span>
<span class="line"><span style="color:#24292E;">              ChildData data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//将 Zookeeper 中的监听事件转化为 ShardingSphere 中的监听事件</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//通过 EventListener 触发事件</span></span>
<span class="line"><span style="color:#24292E;">                DataChangedEvent.ChangedType changedType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getChangedType</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (DataChangedEvent.ChangedType.IGNORED </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> changedType) {</span></span>
<span class="line"><span style="color:#24292E;">                    dataChangedEventListener.</span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataChangedEvent</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">), changedType));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，watch 方法的最终处理结果也是将 Zookeeper 中的监听事件转化为 ShardingSphere 中的监听事件，并通过 EventListener 触发事件。这个过程我们已经在介绍 ApolloConfigCenter 时做了展开。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>今天我们介绍的很多内容实际上也可以应用到日常开发过程中，包括如何基于 Apollo 以及 Zookeeper 这两款典型的配置中心实现工具，来进行配置信息的存储和监听。我们完全可以根据自身的需求，将应用场景和范围从配置中心扩大到各种需要进行动态化管理的业务数据，而基于这两款工具实现这一目标的实现细节，我们都可以直接进行参考和借鉴。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本课时关注于 ShardingSphere 中对配置中心的抽象和实现过程。配置中心的核心机制是需要实现配置信息的动态化加载，而 Apollo 和 Zookeeper 都提供了监听机制来实现这一目标。ShardingSphere 通过集成这两款主流的开源工具，以及 Guava 框架中的 EventBus 工具类实现了从事件监听到订阅消费的整个事件驱动架构。</p><p>这里给你留一道思考题：ShardingSphere 是如何将 Apollo 以及 Zookeeper 中的事件生成和监听机制抽象成一套统一的事件驱动架构的？欢迎你在留言区与大家讨论，我将逐一点评解答。</p><p>配置中心和注册中心在实现上存在一定的相似性，但又面向不同的应用场景。下一课时，我们将介绍 ShardingSphere 中的注册中心的实现机制和应用场景。</p><p><a href="https://wj.qq.com/s2/7238084/d702/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品~</a></p>`,74),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const C=s(l,[["render",t]]);export{d as __pageData,C as default};
