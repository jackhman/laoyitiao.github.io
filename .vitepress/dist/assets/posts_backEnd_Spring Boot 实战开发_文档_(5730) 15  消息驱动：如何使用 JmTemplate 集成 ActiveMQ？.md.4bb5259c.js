import{_ as e,j as o,o as t,g as c,k as p,h as a,s,Q as l}from"./chunks/framework.b3d8e22e.js";const S=JSON.parse('{"title":"JMS 规范与 ActiveMQ ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Boot 实战开发_文档/(5730) 15  消息驱动：如何使用 JmTemplate 集成 ActiveMQ？.md","filePath":"posts/backEnd/Spring Boot 实战开发_文档/(5730) 15  消息驱动：如何使用 JmTemplate 集成 ActiveMQ？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Spring Boot 实战开发_文档/(5730) 15  消息驱动：如何使用 JmTemplate 集成 ActiveMQ？.md"},E=s("p",null,"14 讲我们介绍了基于 Kafka 和 KafkaTemplate 实现消息发送和消费，并重构了 SpringCSS 案例系统中的 account-service 和 customer-service 服务。今天，我们继续介绍 ActiveMQ，并基于 JmsTemplate 模板工具类为 SpringCSS 案例添加对应的消息通信机制。",-1),i=s("h3",{id:"jms-规范与-activemq",tabindex:"-1"},[a("JMS 规范与 ActiveMQ "),s("a",{class:"header-anchor",href:"#jms-规范与-activemq","aria-label":'Permalink to "JMS 规范与 ActiveMQ"'},"​")],-1),y=s("p",null,"JMS（Java Messaging Service）是一种 Java 消息服务，它基于消息传递语义，提供了一整套经过抽象的公共 API。目前，业界也存在一批 JMS 规范的实现框架，其中具备代表性的是 ActiveMQ。",-1),d=s("h4",{id:"jms-规范",tabindex:"-1"},[a("JMS 规范 "),s("a",{class:"header-anchor",href:"#jms-规范","aria-label":'Permalink to "JMS 规范"'},"​")],-1),g=s("p",null,"JMS 规范提供了一批核心接口供开发人员使用，而这些接口构成了客户端的 API 体系，如下图所示：",-1),v=l(`<p>JMS 规范中的核心 API</p><p>上图中可以看到，我们可以通过 ConnectionFactory 创建 Connection，作为客户端的 MessageProducer 和 MessageConsumer 通过 Connection 提供的会话（Session）与服务器进行交互，而交互的媒介就是各种经过封装、包含目标地址（Destination）的消息。</p><p><strong>JMS 的消息由两大部分组成，即消息头（Header）和消息体（Payload）。</strong></p><p><strong>消息体</strong> 只包含具体的业务数据，而<strong>消息头</strong>包含了 JMS 规范定义的通用属性，比如消息的唯一标识 MessageId、目标地址 Destination、接收消息的时间 Timestamp、有效期 Expiration、优先级 Priority、持久化模式 DeliveryMode 等都是常见的通用属性，这些通用属性构成了消息通信的基础元数据（Meta Data），由消息通信系统默认设置。</p><p>JMS 规范中的点对点模型表现为队列（Queue），队列为消息通信提供了一对一顺序发送和消费的机制。点对点模型 API 在通用 API 基础上，专门区分生产者 QueueSender 和消费者 QueueReceiver。</p><p>而 Topic 是 JMS 规范中对发布-订阅模型的抽象，JMS 同样提供了专门的 TopicPublisher 和 TopicSubscriber。</p><p>对于 Topic 而言，因多个消费者存在同时消费一条消息的情况，所以消息有副本的概念。相较点对点模型，发布-订阅模型通常用于更新、事件、通知等非响应式请求场景。在这些场景中，消费者和生产者之间是透明的，消费者可以通过配置文件进行静态管理，也可以在运行过程中动态被创建，同时还支持取消订阅操作。</p><h4 id="activemq" tabindex="-1">ActiveMQ <a class="header-anchor" href="#activemq" aria-label="Permalink to &quot;ActiveMQ&quot;">​</a></h4><p><strong>JMS 规范存在 ActiveMQ、WMQ、TIBCO 等多种第三方实现方式，其中较主流的是 ActiveMQ。</strong></p><p>针对 ActiveMQ，目前有两个实现项目可供选择，一个是经典的 5.x 版本，另一个是下一代的 Artemis，关于这两者之间的关系，我们可以简单地认为 Artemis 是 ActiveMQ 的未来版本，代表 ActiveMQ 的发展趋势。因此，本课程我们将使用 Artemis 演示消息通信机制。</p><p>如果我们想启动 Artemis 服务，首先需要通过如下所示的命名创建一个服务实例。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">artemis.cmd create D:\\artemis --user springcss --password springcss_password</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">artemis.cmd create D:\\artemis --user springcss --password springcss_password</span></span></code></pre></div><p>然后，执行如下命令，我们就可以正常启动这个 Artemis 服务实例了。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\artemis \\bin\\artemis run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\artemis \\bin\\artemis run</span></span></code></pre></div><p>Spring 提供了对 JMS 规范及各种实现的友好集成，通过直接配置 Queue 或 Topic，我们就可以使用 JmsTemplate 提供的各种方法简化对 Artemis 的操作了。</p><h3 id="使用-jmstemplate-集成-activemq" tabindex="-1">使用 JmsTemplate 集成 ActiveMQ <a class="header-anchor" href="#使用-jmstemplate-集成-activemq" aria-label="Permalink to &quot;使用 JmsTemplate 集成 ActiveMQ&quot;">​</a></h3><p>如果我们想基于 Artemis 使用 JmsTemplate，首先需要在 Spring Boot 应用程序中添加对 spring-boot-starter-artemis 的依赖，如下代码所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-artemis&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-artemis&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在讨论如何使用 JmsTemplate 实现消息发送和消费之前，我们先来分析消息生产者和消费者的工作模式。</p><p>通常，生产者行为模式单一，而消费者根据消费方式的不同有一些特定的分类，比如常见的有推送型消费者（Push Consumer）和拉取型消费者（Pull Consumer）。</p><p><strong>推送型方式指的是应用系统向消费者对象注册一个 Listener 接口并通过回调 Listener 接口方法实现消息消费，而在拉取方式下应用系统通常主动调用消费者的拉取消息方法消费消息，主动权由应用系统控制。</strong></p><p>在消息通信的两种基本模型中，发布-订阅模型支持生产者/消费者之间的一对多关系，属于一种典型的推送消费者实现机制；而点对点模型中有且仅有一个消费者，他们主要通过基于间隔性拉取的轮询（Polling）方式进行消息消费。</p><p>14 讲我们提到 Kafka 中消费消息的方式是一种典型的推送型消费者，所以 KafkaTemplate 只提供了发送消息的方法而没有提供实现消费消息的方法。而 JmsTemplate 则不同，它同时支持推送型消费和拉取型消费，接下来我们一起看下如何使用JmsTemplate 发送消息。</p><h4 id="使用-jmstemplate-发送消息" tabindex="-1">使用 JmsTemplate 发送消息 <a class="header-anchor" href="#使用-jmstemplate-发送消息" aria-label="Permalink to &quot;使用 JmsTemplate 发送消息&quot;">​</a></h4><p>JmsTemplate 中存在一批 send 方法用来实现消息发送，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(MessageCreator messageCreator) throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Destination destination, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MessageCreator messageCreator) throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String destinationName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MessageCreator messageCreator) throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(MessageCreator messageCreator) throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Destination destination, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MessageCreator messageCreator) throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String destinationName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MessageCreator messageCreator) throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这些方法一方面指定了目标 Destination，另一方面提供了一个用于创建消息对象的 MessageCreator 接口，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageCreator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Message </span><span style="color:#B392F0;">createMessage</span><span style="color:#E1E4E8;">(Session </span><span style="color:#FFAB70;">session</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JMSException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageCreator</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Message </span><span style="color:#6F42C1;">createMessage</span><span style="color:#24292E;">(Session </span><span style="color:#E36209;">session</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JMSException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过 send 方法发送消息的典型实现方式如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendDemoObject</span><span style="color:#E1E4E8;">(DemoObject demoObject) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    jmsTemplate.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo.queue&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageCreator</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Message </span><span style="color:#B392F0;">createMessage</span><span style="color:#E1E4E8;">(Session </span><span style="color:#FFAB70;">session</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JMSException { </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> session.</span><span style="color:#B392F0;">createObjectMessage</span><span style="color:#E1E4E8;">(demoObject); </span></span>
<span class="line"><span style="color:#E1E4E8;">	    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendDemoObject</span><span style="color:#24292E;">(DemoObject demoObject) { </span></span>
<span class="line"><span style="color:#24292E;">    jmsTemplate.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo.queue&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageCreator</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Message </span><span style="color:#6F42C1;">createMessage</span><span style="color:#24292E;">(Session </span><span style="color:#E36209;">session</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JMSException { </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">createObjectMessage</span><span style="color:#24292E;">(demoObject); </span></span>
<span class="line"><span style="color:#24292E;">	    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与 KakfaTemplate 不同，JmsTemplate 还提供了一组更为简便的方法实现消息发送，即 convertAndSend 方法，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">convertAndSend</span><span style="color:#E1E4E8;">(Destination destination, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object message) throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convertAndSend</span><span style="color:#24292E;">(Destination destination, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object message) throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过 convertAndSend 方法，我们可以直接传入任意业务对象，且该方法能自动将业务对象转换为消息对象并进行消息发送，具体的示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendDemoObject</span><span style="color:#E1E4E8;">(DemoObject demoObject) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	jmsTemplate.</span><span style="color:#B392F0;">convertAndSend</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo.queue&quot;</span><span style="color:#E1E4E8;">, demoObject); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendDemoObject</span><span style="color:#24292E;">(DemoObject demoObject) { </span></span>
<span class="line"><span style="color:#24292E;">	jmsTemplate.</span><span style="color:#6F42C1;">convertAndSend</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo.queue&quot;</span><span style="color:#24292E;">, demoObject); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在以上代码中，我们注意到 convertAndSend 方法还存在一批重载方法，它包含了消息后处理功能，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">convertAndSend</span><span style="color:#E1E4E8;">( Destination destination, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object message, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MessagePostProcessor postProcessor)throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convertAndSend</span><span style="color:#24292E;">( Destination destination, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object message, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MessagePostProcessor postProcessor)throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述方法中的 MessagePostProcessor 就是一种消息后处理器，它用来在构建消息过程中添加自定义的消息属性，它的一种典型的使用方法如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendDemoObject</span><span style="color:#E1E4E8;">(DemoObject demoObject) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	jmsTemplate.</span><span style="color:#B392F0;">convertAndSend</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo.queue&quot;</span><span style="color:#E1E4E8;">, demoObject, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">                 </span><span style="color:#B392F0;">MessagePostProcessor</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Message </span><span style="color:#B392F0;">postProcessMessage</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;">       JMSException { </span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#6A737D;">//针对 Message 的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    } </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendDemoObject</span><span style="color:#24292E;">(DemoObject demoObject) { </span></span>
<span class="line"><span style="color:#24292E;">	jmsTemplate.</span><span style="color:#6F42C1;">convertAndSend</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo.queue&quot;</span><span style="color:#24292E;">, demoObject, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">                 </span><span style="color:#6F42C1;">MessagePostProcessor</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Message </span><span style="color:#6F42C1;">postProcessMessage</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;">       JMSException { </span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#6A737D;">//针对 Message 的处理</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">	    } </span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>使用 JmsTemplate 的最后一步就是在配置文件中添加配置项，如下代码所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  artemis:</span></span>
<span class="line"><span style="color:#E1E4E8;">    host: localhost</span></span>
<span class="line"><span style="color:#E1E4E8;">    port: 61616</span></span>
<span class="line"><span style="color:#E1E4E8;">    user: springcss</span></span>
<span class="line"><span style="color:#E1E4E8;">    password: springcss_password</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  artemis:</span></span>
<span class="line"><span style="color:#24292E;">    host: localhost</span></span>
<span class="line"><span style="color:#24292E;">    port: 61616</span></span>
<span class="line"><span style="color:#24292E;">    user: springcss</span></span>
<span class="line"><span style="color:#24292E;">    password: springcss_password</span></span></code></pre></div><hr><p>这里我们指定了 artemis 服务器的地址、端口、用户名和密码等信息。同时，我们也可以在配置文件中指定 Destination 信息，具体配置方式如下代码所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  jms:</span></span>
<span class="line"><span style="color:#E1E4E8;">    template:</span></span>
<span class="line"><span style="color:#E1E4E8;">      default-destination: springcss.account.queue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  jms:</span></span>
<span class="line"><span style="color:#24292E;">    template:</span></span>
<span class="line"><span style="color:#24292E;">      default-destination: springcss.account.queue</span></span></code></pre></div><h4 id="使用-jmstemplate-消费消息" tabindex="-1">使用 JmsTemplate 消费消息 <a class="header-anchor" href="#使用-jmstemplate-消费消息" aria-label="Permalink to &quot;使用 JmsTemplate 消费消息&quot;">​</a></h4><p>基于前面的讨论，我们知道 JmsTemplate 同时支持推送型消费和拉取型消费两种消费类型。我们先来看一下如何实现拉取型消费模式。</p><p>在 JmsTemplate 中提供了一批 receive 方法供我们从 artemis 中拉取消息，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Message </span><span style="color:#B392F0;">receive</span><span style="color:#E1E4E8;">() throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Message </span><span style="color:#B392F0;">receive</span><span style="color:#E1E4E8;">(Destination destination) throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Message </span><span style="color:#B392F0;">receive</span><span style="color:#E1E4E8;">(String destinationName) throws JmsException {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Message </span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">() throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Message </span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(Destination destination) throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Message </span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(String destinationName) throws JmsException {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这一步我们需要注意一点：调用上述方法时，当前线程会发生阻塞，直到一条新消息的到来。针对阻塞场景，这时 receive 方法的使用方式如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DemoEvent </span><span style="color:#B392F0;">receiveEvent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Message message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jmsTemplate.</span><span style="color:#B392F0;">receive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo.queue&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (DemoEvent) messageConverter.</span><span style="color:#B392F0;">fromMessage</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DemoEvent </span><span style="color:#6F42C1;">receiveEvent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	Message message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jmsTemplate.</span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo.queue&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (DemoEvent) messageConverter.</span><span style="color:#6F42C1;">fromMessage</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们使用了一个 messageConverter 对象将消息转化为领域对象。</p><p>在使用 JmsTemplate 时，我们可以使用 Spring 提供的 MappingJackson2MessageConverter、MarshallingMessageConverter、MessagingMessageConverter，以及 SimpleMessageConverter 实现消息转换，一般系统默认使用 SimpleMessageConverter。而在日常开发过程中，我们通常会使用 MappingJackson2MessageConverter 来完成 JSON 字符串与对象之间的转换。</p><p>同时，JmsTemplate 还提供了一组更为高阶的 receiveAndConvert 方法完成消息的接收和转换，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">receiveAndConvert</span><span style="color:#E1E4E8;">(Destination destination) throws JmsException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">receiveAndConvert</span><span style="color:#24292E;">(Destination destination) throws JmsException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>顾名思义，receiveAndConvert 方法能在接收消息后完成对消息对象的自动转换，使得接收消息的代码更为简单，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DemoEvent </span><span style="color:#B392F0;">receiveEvent</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (DemoEvent)jmsTemplate.</span><span style="color:#B392F0;">receiveAndConvert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo.queue&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DemoEvent </span><span style="color:#6F42C1;">receiveEvent</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (DemoEvent)jmsTemplate.</span><span style="color:#6F42C1;">receiveAndConvert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo.queue&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然，在消费者端，我们同样需要指定与发送者端完全一致的 MessageConverter 和 Destination 来分别实现消息转换和设置消息目的地。</p><p>介绍完拉模式，接下来我们介绍推模式下的消息消费方法，实现方法也很简单，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">JmsListener</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">queues</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;demo.queue&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handlerEvent</span><span style="color:#E1E4E8;">(DemoEvent event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//TODO：添加消息处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">JmsListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">queues</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;demo.queue&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handlerEvent</span><span style="color:#24292E;">(DemoEvent event) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//TODO：添加消息处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在推模式下，开发人员只需要在 @JmsListener 注解中指定目标队列，就能自动接收来自该队列的消息。</p><h3 id="在-springcss-案例中集成-activemq" tabindex="-1">在 SpringCSS 案例中集成 ActiveMQ <a class="header-anchor" href="#在-springcss-案例中集成-activemq" aria-label="Permalink to &quot;在 SpringCSS 案例中集成 ActiveMQ&quot;">​</a></h3><p>ActiveMQ 是本专栏中使用到的第二款消息中间件，因为每款消息中间件都需要设置一些配置信息，所以我们有必要回到 SpringCSS 案例系统，先对配置信息的管理做一些优化。</p><h4 id="实现-account-service-消息生产者" tabindex="-1">实现 account-service 消息生产者 <a class="header-anchor" href="#实现-account-service-消息生产者" aria-label="Permalink to &quot;实现 account-service 消息生产者&quot;">​</a></h4><p>首先，我们来回顾下《多维配置：如何使用 Spring Boot 中的配置体系？》的内容介绍，在 Spring Boot 中，我们可以通过 Profile 有效管理针对不同场景和环境的配置信息。</p><p>而在 SpringCSS 案例中，Kafka、ActiveMQ 及 16 讲将要介绍的 RabbitMQ 都是消息中间件，在案例系统运行过程中，我们需要选择其中一种中间件演示消息发送和接收到过程，这样我们就需要针对不同的中间件设置不同的 Profile 了。</p><p>在 account-service 中，我们可以根据 Profile 构建如下所示的配置文件体系。</p>`,65),u=l(`<p>account-service 中的配置文件</p><p>从以上图中可以看到：根据三种不同的中间件，我们分别提供了三个配置文件。以其中的 application-activemq.yml 为例，其包含的配置项如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  jms</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    template</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default-</span><span style="color:#E1E4E8;">destination</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> springcss.account.queue</span></span>
<span class="line"><span style="color:#E1E4E8;">  artemis</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> localhost</span></span>
<span class="line"><span style="color:#E1E4E8;">    port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">61616</span></span>
<span class="line"><span style="color:#E1E4E8;">    user</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> springcss</span></span>
<span class="line"><span style="color:#E1E4E8;">    password</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> springcss_password</span></span>
<span class="line"><span style="color:#E1E4E8;">    embedded</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	      enabled</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  jms</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    template</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default-</span><span style="color:#24292E;">destination</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> springcss.account.queue</span></span>
<span class="line"><span style="color:#24292E;">  artemis</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> localhost</span></span>
<span class="line"><span style="color:#24292E;">    port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">61616</span></span>
<span class="line"><span style="color:#24292E;">    user</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> springcss</span></span>
<span class="line"><span style="color:#24292E;">    password</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> springcss_password</span></span>
<span class="line"><span style="color:#24292E;">    embedded</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	      enabled</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>在主配置文件 application.yml 中，我们可以将当前可用的 Profile 设置为 activemq，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  profiles</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    active</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> activemq</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  profiles</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    active</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> activemq</span></span></code></pre></div><p>介绍完配置信息的优化管理方案，我们再来看看实现消息发送的 ActiveMQAccountChangedPublisher 类，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;activeMQAccountChangedPublisher&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActiveMQAccountChangedPublisher</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> JmsTemplate jmsTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishEvent</span><span style="color:#E1E4E8;">(AccountChangedEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        jmsTemplate.</span><span style="color:#B392F0;">convertAndSend</span><span style="color:#E1E4E8;">(AccountChannels.SPRINGCSS_ACCOUNT_QUEUE, event, </span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">addEventSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Message </span><span style="color:#B392F0;">addEventSource</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JMSException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        message.</span><span style="color:#B392F0;">setStringProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;EVENT_SYSTEM&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;SpringCSS&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;activeMQAccountChangedPublisher&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActiveMQAccountChangedPublisher</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> JmsTemplate jmsTemplate;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishEvent</span><span style="color:#24292E;">(AccountChangedEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        jmsTemplate.</span><span style="color:#6F42C1;">convertAndSend</span><span style="color:#24292E;">(AccountChannels.SPRINGCSS_ACCOUNT_QUEUE, event, </span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">addEventSource);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Message </span><span style="color:#6F42C1;">addEventSource</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JMSException {</span></span>
<span class="line"><span style="color:#24292E;">        message.</span><span style="color:#6F42C1;">setStringProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;EVENT_SYSTEM&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;SpringCSS&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中，我们基于 JmsTemplate 的 convertAndSend 方法完成了消息的发送。同时，我们注意到：这里也使用了另一种实现 MessagePostProcessor 的方法，即 lambda 语法，你可以参考这种语法简化代码的组织方式。</p><p>另一方面，在案例中，我们希望使用 MappingJackson2MessageConverter 完成对消息的转换。因此，我们可以在 account-service 中添加一个 ActiveMQMessagingConfig 初始化具体的 MappingJackson2MessageConverter 对象，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActiveMQMessagingConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MappingJackson2MessageConverter </span><span style="color:#B392F0;">activeMQMessageConverter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        MappingJackson2MessageConverter messageConverter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MappingJackson2MessageConverter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        messageConverter.</span><span style="color:#B392F0;">setTypeIdPropertyName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;_typeId&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; typeIdMappings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        typeIdMappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accountChangedEvent&quot;</span><span style="color:#E1E4E8;">, AccountChangedEvent.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        messageConverter.</span><span style="color:#B392F0;">setTypeIdMappings</span><span style="color:#E1E4E8;">(typeIdMappings);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> messageConverter;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActiveMQMessagingConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MappingJackson2MessageConverter </span><span style="color:#6F42C1;">activeMQMessageConverter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        MappingJackson2MessageConverter messageConverter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MappingJackson2MessageConverter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        messageConverter.</span><span style="color:#6F42C1;">setTypeIdPropertyName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_typeId&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; typeIdMappings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        typeIdMappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accountChangedEvent&quot;</span><span style="color:#24292E;">, AccountChangedEvent.class);</span></span>
<span class="line"><span style="color:#24292E;">        messageConverter.</span><span style="color:#6F42C1;">setTypeIdMappings</span><span style="color:#24292E;">(typeIdMappings);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> messageConverter;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码的核心作用是定义了 typeId 到 Class 的 Map，这样做的目的在于为消息的转换提供了灵活性。比如我们可以在 account-service 中发送了一个 Id 为&quot;accountChangedEvent&quot;且类型为 AccountChangedEvent 的业务对象，而在消费该消息的场景中，我们只需要指定同一个 Id，对应的消息就可以自动转化为另一种业务对象（不一定是这里使用到的 AccountChangedEvent）。</p><h4 id="实现-customer-service-消息消费者" tabindex="-1">实现 customer-service 消息消费者 <a class="header-anchor" href="#实现-customer-service-消息消费者" aria-label="Permalink to &quot;实现 customer-service 消息消费者&quot;">​</a></h4><p>我们先回到 customer-service 服务，看看如何消费来自 account-service 的消息，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;activeMQAccountChangedReceiver&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActiveMQAccountChangedReceiver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> JmsTemplate jmsTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> AccountChangedEvent </span><span style="color:#B392F0;">receiveEvent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (AccountChangedEvent) jmsTemplate.</span><span style="color:#B392F0;">receiveAndConvert</span><span style="color:#E1E4E8;">(AccountChannels.SPRINGCSS_ACCOUNT_QUEUE);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;activeMQAccountChangedReceiver&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActiveMQAccountChangedReceiver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> JmsTemplate jmsTemplate;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> AccountChangedEvent </span><span style="color:#6F42C1;">receiveEvent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (AccountChangedEvent) jmsTemplate.</span><span style="color:#6F42C1;">receiveAndConvert</span><span style="color:#24292E;">(AccountChannels.SPRINGCSS_ACCOUNT_QUEUE);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，我们只是简单通过 JmsTemplate 的 receiveAndConvert 方法拉取来自 ActiveMQ 的消息。</p><p><strong>请注意，因为 receiveAndConvert 方法的执行过程是阻塞性的拉取行为，所以我们可以实现一个新的 Controller 专门测试该方法的有效性，如下代码所示：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;messagereceive&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageReceiveController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ActiveMQAccountChangedReceiver accountChangedReceiver; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">receiveAccountChangedEvent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        accountChangedReceiver.</span><span style="color:#B392F0;">receiveAccountChangedEvent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;messagereceive&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageReceiveController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ActiveMQAccountChangedReceiver accountChangedReceiver; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">receiveAccountChangedEvent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        accountChangedReceiver.</span><span style="color:#6F42C1;">receiveAccountChangedEvent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一旦我们访问了这个端点，系统就会拉取 ActiveMQ 中目前尚未消费的消息。如果 ActiveMQ 没有待消费的消息，这个方法就会阻塞，且一直处于等待状态，直到新消息的到来。</p><p>如果你想使用消息推送的方式来消费消息，实现过程更加简单，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">JmsListener</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">destination</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AccountChannels.SPRINGCSS_ACCOUNT_QUEUE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handlerAccountChangedEvent</span><span style="color:#E1E4E8;">(AccountChangedEvent event) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    AccountMessage account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getAccountMessage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String operation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getOperation</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(accountMessage.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> accountMessage.</span><span style="color:#B392F0;">getAccountCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> accountMessage.</span><span style="color:#B392F0;">getAccountName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">JmsListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">destination</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AccountChannels.SPRINGCSS_ACCOUNT_QUEUE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handlerAccountChangedEvent</span><span style="color:#24292E;">(AccountChangedEvent event) { </span></span>
<span class="line"><span style="color:#24292E;">    AccountMessage account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getAccountMessage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String operation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getOperation</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(accountMessage.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> accountMessage.</span><span style="color:#6F42C1;">getAccountCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> accountMessage.</span><span style="color:#6F42C1;">getAccountName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从以上代码中可以看到，我们可以直接通过 @JmsListener 注解消费从 ActiveMQ 推送过来的消息。这里我们只是把消息打印了出来，你可以根据实际需要对消息进行任何形式的处理。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本节课我们继续介绍基于 JMS 规范的 ActiveMQ 消息中间件，并使用 Spring Boot 提供的 JmsTemplate 完成了消息的发送和消费。同样，我们也将 ActiveMQ 的使用过程集成到 SpringCSS 案例中，并基于 Spring Boot 的配置体系对配置信息的管理过程做了优化。16 讲我们将继续介绍本课程中最后一款要引入的消息中间件 RabbitMQ 及 Spring Boot 中提供的模板工具类 RabbitTemplate。</p><p>这里给你留一道思考题：使用 JmsTemplate 时，如何分别实现基于推模式和拉模式的消息消费？</p><p>学完本节课后，你有什么问题欢迎在留言区与我互动、交流。另外，如果你觉得本专栏有价值，欢迎转发给有需要的朋友哦~</p>`,25);function m(h,F,C,A,b,M){const n=o("Image");return t(),c("div",null,[E,i,y,d,g,p(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image2/M01/04/A0/CgpVE1_0G4iAFaHdAADIv5Y696k445.png"}),a(),v,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/03/CB/Cip5yF_ivRuAdYV0AAANYpYvrk4834.png"}),a(),u])}const k=e(r,[["render",m]]);export{S as __pageData,k as default};
