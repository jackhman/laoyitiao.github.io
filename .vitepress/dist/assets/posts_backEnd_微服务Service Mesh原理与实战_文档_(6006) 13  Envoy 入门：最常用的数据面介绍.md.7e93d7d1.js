import{_ as l,j as p,o as e,g as t,k as n,Q as o,s as a}from"./chunks/framework.b3d8e22e.js";const P=JSON.parse('{"title":"核心功能 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6006) 13  Envoy 入门：最常用的数据面介绍.md","filePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6006) 13  Envoy 入门：最常用的数据面介绍.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/微服务Service Mesh原理与实战_文档/(6006) 13  Envoy 入门：最常用的数据面介绍.md"},c=o('<p>今天我要跟你分享的内容是 Service Mesh 开源产品中最常用的数据面------Envoy 的知识。在上一讲中我们已经了解了各种 Service Mesh 的解决方案，也了解到了最流行的 Service Mesh 解决方案 Istio+Envoy，这一讲我们先来学习一下数据面------Envoy。</p><p>Envoy 是专为大型现代 SOA（面向服务架构）架构设计的 L7 代理和通信总线，它既可以作为 Service Mesh 中的<strong>数据面</strong> 使用，也可以作为<strong>入口网关层</strong>使用，可以通过 xDS API 控制 Envoy 的监听、路由、负载均衡等行为。</p><p>下面我们先看一下 Envoy 有哪些核心功能。</p><h3 id="核心功能" tabindex="-1">核心功能 <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能&quot;">​</a></h3><p><strong>高性能设计</strong>：采用 C++ 编写，拥有良好的四层、七层代理性能，在 8 核的机器上，HTTP 代理可以达到 10w 的 QPS，gRPC 可以达到 15w QPS，完全满足了 Service Mesh 中 Sidecar 的应用场景。</p><p><strong>Filter 架构</strong> ：可以在四、七层编写 Filter 以扩展 Envoy 的功能，比如监听过滤器、四层网络过滤器，以及七层过滤器。不过 Envoy 支持最完善的还是<strong>HTTP 过滤器</strong>，支持了限流、路由转发、故障注入等多种服务治理功能，</p><p><strong>良好的 HTTP/2 支持</strong> ：随着 gRPC 框架的流行以及边缘层网络性能的要求提升，HTTP/2 越来越被重视。Envoy 原生支持 HTTP/2，可以在 HTTP 和 HTTP/2 之间做转换。比如<strong>在 Sidecar 模式中</strong> ，无论应用协议是 HTTP 还是 HTTP/2，<strong>Envoy 之间默认使用 HTTP/2 通信</strong>，这样极大提升了服务性能和稳定性，避免了 HTTP 频繁建立连接带来的消耗和不稳定性。</p><p><strong>多种协议支持</strong>：不仅支持 HTTP 和 HTTP/2，随着社区的发展，Thrift、gRPC、MongoDB、Redis、MySQL 等多种网络协议都被支持，甚至可以使用 Envoy 做 Redis 的 Mesh 方案，用来代替流行的 Redis 中间件。</p><p><strong>可观测性</strong>：支持强大的统计系统。日志、Metrics、链路追踪都有良好的支持。</p><p><strong>边缘网关</strong> ：Envoy 本身就是一个高性能的网络代理组件，完全可以作为<strong>入口网关层</strong>使用，在 Kubernetes 中，也可以作为 Egress 和 Ingress 使用。</p><p><strong>服务发现</strong> ：和其他常见的网络代理软件不同，Envoy 默认支持服务发现组件。Envoy 使用了一套<strong>xDS 的动态 API</strong>，获取服务的后端节点并实时更新，结合 Envoy 强大的负载均衡器，可以做到最终一致性。</p><p><strong>Wasm 扩展</strong>：Envoy 在最近的 1.17 版本增加了对 Wasm 的支持。Wasm 全称为 WebAssembly，最早用在浏览器端用来解决 JavaScript 性能问题和大型项目团队协作问题。近些年，它开始在一些后端技术上使用，用来代替 Lua，作为核心系统的扩展方式。因为 Wasm 可以使用多种语言进行开发，所以方便对核心系统进行扩展，不用担心语言问题。当然相对于原生的 C++ 扩展方式，它大概有 3 成的性能损耗。</p><p>了解完 Envoy 的核心特性，让我们来结合一张架构图具体看一下 Envoy 的代码架构。</p><h3 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h3><p>下图是 Envoy 架构的设计图，从图中我们可以看到入流量经过 Iptables 劫持被转发到了 Envoy 的端口，Envoy 通过监听端口创建连接，提供七层代理服务。下面我们具体看看每部分内容都做了什么工作。</p>',15),E=o("<p><strong>Iptable</strong>：通过 Iptable 劫持，将入口和出口流量都转发到 Envoy 上，达到劫持流量的目的。</p><p><strong>Listener</strong> ：Envoy 通过<strong>建立多个监听器</strong>提供不同的服务。比如通过监听的两个端口分别负责 Sidecar 模式的出流量和入流量，Sidecar 多使用这种设计，这样可以简化编程逻辑，也可以增强 Filter 的通用性。如果提供不同协议，Envoy 也会建立不同的端口来提供服务。</p><p><strong>Worker</strong> ：每个 Listener 维护一个对应的 Worker Pool，Envoy 为每个逻辑处理器创建一个 Worker 线程，当我们在一个新的端口启动一个新的 server 时，Envoy 也会根据 -concurrency 创建对应的 Worker 线程，要注意<strong>启动太多的 worker 线程并不一定是好事</strong>，特别是在 Sidecar 模式，我们并不会分配过多的逻辑核心给到 Sidecar，创建过多的 Worker 线程可能导致每个 Worker 线程维护的连接变多，Upstream 压力过大。</p><p><strong>Filters</strong> ：可以理解为<strong>中间件</strong>，通过 Filter，可以做到四层和七层的流量过滤，支持服务治理需要的限流、熔断等功能。</p><p><strong>Cluster Manager</strong>：流量经过 Router，识别出需要转发的 Cluster，通过 Cluster Manager 进行服务发现和负载均衡等功能。</p><p><strong>Upstream</strong>：Upstream 维护了 EndPoint 的连接池，通过负载具衡器，将流量转发到合适的 EndPoint 上面。</p><p>聊完了 Envoy 的架构，我们一起看一下 Envoy 作为 Service Mesh 中的数据面，也就是 Sidecar 模式下，整个的数据流转过程。</p>",7),y=a("p",null,"如上图所示，Envoy 作为 Sidecar 使用时，需要和服务部署在同一台机器或者 Pod 中，用户访问其他服务时，流量会被自动劫持到 Envoy 中。",-1),i=a("p",null,"下面我们结合一个具体的例子来讲解。下图是 Productpage 服务通过 HTTP 协议，调用 review 服务的过程。",-1),g=o(`<ul><li><p>通过 Iptables 对流量进行劫持，将 Productpage 访问 Reviews 的流量转发到 Envoy 的出流量 15001 端口上。</p></li><li><p>Envoy 先根据 virtual_hosts 进行匹配，再通过路由匹配，发现路由对应的 Cluster，通过服务发现找到 Cluster 对应的 EndPoint，将流量转发到 10.40.0.15:9080 的 Pod 上。</p></li><li><p>Reviews 的 Pod 通过 Iptables 对流量进行劫持，将流量劫持到 Envoy 的入流量端口 15006 上。</p></li><li><p>Envoy 将本地流量转发到对应的本地地址 127.0.0.1:9080，这里不需要对流量进行识别，因为流量被转发到入流量端口 15006 上，这个端口的配置用于本地流量的转发。</p></li><li><p>到这里整个 Sidecar 的流量出入过程就结束了。出入流量都经由 Envoy，最终被正确的转发到了 Reviews 的 Pod 上面。</p></li></ul><p>看到这里，想必你已经理解了 Envoy 的架构设计，下面我们结合一些具体的配置来了解 Envoy 的数据结构。</p><h3 id="静态配置" tabindex="-1">静态配置 <a class="header-anchor" href="#静态配置" aria-label="Permalink to &quot;静态配置&quot;">​</a></h3><p>Envoy 的配置分为<strong>静态配置和动态配置</strong>，静态配置就是手动填写的配置，动态配置是指由 xDS API 获取的配置，在这一讲我们只对静态配置做讲解，在 15 讲我们会详细讲解 xDS 协议。</p><p>如下代码，这里定义了 Listener 监听器，监听端口为 10000。virtual_hosts 匹配所有域名，Routes 的匹配规则为所有 Path，也就是所有访问 10000 端口的请求都会被转发到 service_google 服务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">listeners</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> listener_0</span></span>
<span class="line"><span style="color:#E1E4E8;">  address</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    socket_address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">, port_value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  filter_chains</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> filters</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> envoy.http_connection_manager</span></span>
<span class="line"><span style="color:#E1E4E8;">      config</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        stat_prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ingress_http</span></span>
<span class="line"><span style="color:#E1E4E8;">        codec_type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> AUTO</span></span>
<span class="line"><span style="color:#E1E4E8;">        route_config</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> local_route</span></span>
<span class="line"><span style="color:#E1E4E8;">          virtual_hosts</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> local_service</span></span>
<span class="line"><span style="color:#E1E4E8;">            domains</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 匹配所有域名</span></span>
<span class="line"><span style="color:#E1E4E8;">            routes</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> match</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> }</span><span style="color:#6A737D;">// 匹配所有 path</span></span>
<span class="line"><span style="color:#E1E4E8;">              route</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { host_rewrite</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> www.google.com, cluster</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> service_google } </span><span style="color:#6A737D;">// 将流量转发到 service_google 服务</span></span>
<span class="line"><span style="color:#E1E4E8;">        http_filters</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> envoy.router</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">listeners</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> listener_0</span></span>
<span class="line"><span style="color:#24292E;">  address</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    socket_address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">, port_value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  filter_chains</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> filters</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> envoy.http_connection_manager</span></span>
<span class="line"><span style="color:#24292E;">      config</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        stat_prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ingress_http</span></span>
<span class="line"><span style="color:#24292E;">        codec_type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> AUTO</span></span>
<span class="line"><span style="color:#24292E;">        route_config</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> local_route</span></span>
<span class="line"><span style="color:#24292E;">          virtual_hosts</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> local_service</span></span>
<span class="line"><span style="color:#24292E;">            domains</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// 匹配所有域名</span></span>
<span class="line"><span style="color:#24292E;">            routes</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> match</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> }</span><span style="color:#6A737D;">// 匹配所有 path</span></span>
<span class="line"><span style="color:#24292E;">              route</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { host_rewrite</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> www.google.com, cluster</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> service_google } </span><span style="color:#6A737D;">// 将流量转发到 service_google 服务</span></span>
<span class="line"><span style="color:#24292E;">        http_filters</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> envoy.router</span></span></code></pre></div><p>下面的配置是 service_google 服务的负载均衡器，连接超时时间，以及要转发的地址。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">clusters</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> service_google</span></span>
<span class="line"><span style="color:#E1E4E8;">  connect_timeout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 0.</span><span style="color:#FDAEB7;font-style:italic;">25s</span></span>
<span class="line"><span style="color:#E1E4E8;">  type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> LOGICAL_DNS</span></span>
<span class="line"><span style="color:#E1E4E8;">  # Comment out the following line to test on v6 networks</span></span>
<span class="line"><span style="color:#E1E4E8;">  dns_lookup_family</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> V4_ONLY</span></span>
<span class="line"><span style="color:#E1E4E8;">  lb_policy</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ROUND_ROBIN</span></span>
<span class="line"><span style="color:#E1E4E8;">  hosts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{ socket_address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> google.com, port_value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">443</span><span style="color:#E1E4E8;"> }}]</span></span>
<span class="line"><span style="color:#E1E4E8;">  tls_context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { sni</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> www.google.com }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">clusters</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> service_google</span></span>
<span class="line"><span style="color:#24292E;">  connect_timeout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 0.</span><span style="color:#B31D28;font-style:italic;">25s</span></span>
<span class="line"><span style="color:#24292E;">  type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> LOGICAL_DNS</span></span>
<span class="line"><span style="color:#24292E;">  # Comment out the following line to test on v6 networks</span></span>
<span class="line"><span style="color:#24292E;">  dns_lookup_family</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> V4_ONLY</span></span>
<span class="line"><span style="color:#24292E;">  lb_policy</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ROUND_ROBIN</span></span>
<span class="line"><span style="color:#24292E;">  hosts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{ socket_address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> google.com, port_value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">443</span><span style="color:#24292E;"> }}]</span></span>
<span class="line"><span style="color:#24292E;">  tls_context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { sni</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> www.google.com }</span></span></code></pre></div><h3 id="边缘代理模式" tabindex="-1">边缘代理模式 <a class="header-anchor" href="#边缘代理模式" aria-label="Permalink to &quot;边缘代理模式&quot;">​</a></h3><p>Envoy 不仅可以用于 Sidecar 模式，也可以用作边缘网关，但是用作边缘网关层我们有一些注意事项，这些问题不仅在 Envoy 中存在，在其他的边缘网关中也应该处理。</p><h4 id="http-标头清理" tabindex="-1">HTTP 标头清理 <a class="header-anchor" href="#http-标头清理" aria-label="Permalink to &quot;HTTP 标头清理&quot;">​</a></h4><p>一些外部传入的 header 可能会影响内部行为，应该统一做出清理操作，比如我们经常会用到的 x-forward-for，在反向代理中，未经过一层代理，都应该将代理的 IP 追加在 x-forward-for 中，以保证通过 x-forward-for 可以获取最原始的 IP，<strong>如果有客户端恶意传输 x-forward-for，不做清除操作可能会导致拿到错误的客户端 IP</strong>。在 Envoy 中可以通过 use_remote_address 设置为 true 来清理 HTTP 标头。</p><h4 id="超时控制" tabindex="-1">超时控制 <a class="header-anchor" href="#超时控制" aria-label="Permalink to &quot;超时控制&quot;">​</a></h4><p>超时控制分为<strong>连接超时、流超时和路由超时</strong>。这些超时控制不仅在边缘网关模式中需要注意，在 Sidecar 模式也需要注意，一些不合理的超时可能会引起服务的雪崩。虽然在内网服务调用时一般都会设置默认超时，但 Sidecar 应该设置一个默认的超时时间，避免服务没有设置有效超时的情况引起的问题。</p><p><strong>连接超时</strong></p><p>Envoy 为 HTTP 服务提供了<strong>空闲连接超时时间</strong>的设置，空闲超时是指一个连接在接收到请求后，会设置 TCP 的 idle Timeout 的参数，一段时间内没有收到代理服务的响应请求，则会断开连接。Envoy 默认的空闲超时是 1 小时。连接超时对所有流生效，连接一旦断开，所有流处理也会中断。</p><p><strong>流超时</strong></p><p>流是 HTTP/2 中的概念，在 HTTP/1 中没有流的概念，Envoy 通过将 HTTP 连接对应到流模式，统一进行处理。</p><p>HTTP 连接管理器 stream_idle_timeout 默认超时时间为 5 分钟，推荐对所有流设置合理的超时时间，这个时间就是<strong>接收请求到返回数据的处理时间</strong> ，<strong>如果没有特殊需求，建议设置为 10s，默认超时时间偏长</strong>。如果触发此超时时间，则会出发 504 Gateway Timeout 的错误码。</p><p><strong>路由超时</strong></p><p>除了设置全局的流超时外，还可以设置路由层面的超时，为某些请求设置特殊的配置，一些请求可能需要更快的响应速度，所以要设置较短的超时时间，这个时候只要在路由层面设置即可，比如针对某些 Path 设置更短的超时时间。</p><h4 id="连接限制" tabindex="-1">连接限制 <a class="header-anchor" href="#连接限制" aria-label="Permalink to &quot;连接限制&quot;">​</a></h4><p>Envoy 可以针对全局或者监听器设置连接限制。一般单一服务器可承载的并发连接数有限，根据线上的峰值连接运行情况，设置合理的连接设置，可以<strong>避免因服务出问题时响应过慢，大量新建 HTTP 连接击垮 Envoy 的情况</strong>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我主要介绍了 Service Mesh 中最流行的解决方案------Istio中的数据面 Envoy，通过今天的内容，相信你已经了解了 Envoy 的基本知识，以及 Envoy 具体的功能。</p><p>Envoy 不仅可以作为 Service Mesh 中的 Sidecar 使用，也可以作为边缘网关使用，它的本质就是一个反向代理服务器，Nginx、HAProxy 能做的事情 Envoy 也可以做得很好。</p><p>本讲主要内容如下：</p>`,27),_=a("p",null,"本讲内容到这里就结束了，下一讲我会讲解最常用的 Service Mesh 解决方案------Istio 的基本知识，以及 Istio 的部署实战。",-1),d=a("p",null,"通过今天讲解的内容，如果让你设计一个 Sidecar，对于出入流量你会采用双端口还是单端口方案呢？如果要支持不同协议，你会在单端口上支持，还是在多端口上分别支持不同的协议呢? 欢迎在留言区和我分享你的观点，我们下一讲再见！",-1);function v(h,u,A,m,T,D){const s=p("Image");return e(),t("div",null,[c,n(s,{alt:"1白底.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/01/CgpVE2AXJaCAFUsQAAFL99sKyE0926.png"}),E,n(s,{alt:"3.png",src:"https://s0.lgstatic.com/i/image2/M01/0B/FE/Cip5yGAXJcGAZ6mdAAMoOTjKasg148.png"}),y,i,n(s,{alt:"2白底.png",src:"https://s0.lgstatic.com/i/image2/M01/0B/FE/Cip5yGAXJd2ATQjPAAD_zYyDRqQ802.png"}),g,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/93/11/Ciqc1GATuziAP5fFAAH-wz7cloQ948.png"}),_,d])}const f=l(r,[["render",v]]);export{P as __pageData,f as default};
