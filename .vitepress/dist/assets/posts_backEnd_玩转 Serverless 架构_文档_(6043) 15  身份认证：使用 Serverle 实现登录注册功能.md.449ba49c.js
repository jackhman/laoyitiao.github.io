import{_ as o,j as e,o as c,h as t,k as p,f as n,Q as l,s}from"./chunks/framework.d3daa342.js";const f=JSON.parse('{"title":"15身份认证：使用Serverle实现登录注册功能","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/玩转 Serverless 架构_文档/(6043) 15  身份认证：使用 Serverle 实现登录注册功能.md","filePath":"posts/backEnd/玩转 Serverless 架构_文档/(6043) 15  身份认证：使用 Serverle 实现登录注册功能.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/玩转 Serverless 架构_文档/(6043) 15  身份认证：使用 Serverle 实现登录注册功能.md"},E=l('<h1 id="_15身份认证-使用serverle实现登录注册功能" tabindex="-1">15身份认证：使用Serverle实现登录注册功能 <a class="header-anchor" href="#_15身份认证-使用serverle实现登录注册功能" aria-label="Permalink to &quot;15身份认证：使用Serverle实现登录注册功能&quot;">​</a></h1><p>从今天开始，我们将进入 Serverless 应用的场景案例篇。这一讲我将带你实现 Serverless 中的身份认证。</p><p>我们平时用过那么多的网站和 App，很多都需要登录，登录的过程就是身份认证的过程。以电商网站为例，如果你想下单，先要注册账号，然后输入用户名（可能手机号或邮箱）、密码登录。之后你在一段时间内再访问该电商网站，都不用再登录，只有在连续长时间不登录的情况下（比如一个月），才用登录。这样一来，当你长时间不输入密码，很可能换了电脑或手机后，就忘记密码了。</p><p>身份认证几乎是每个系统必备能力，所以很多同学开发应用时，实现的第一功能就是登录注册。然而当把应用迁移到 Serverless 架构时，很多同学就犯难了，基于 Serverless 的身份认证功能应该怎么实现呢？</p><p>为了让你深入理解 Serverless 架构中的身份认证实现原理，我准备了今天的内容，这一讲我会先带你了解一些身份认证技术方案，然后带你从零到一实现一个 Serverless 的登录注册应用。</p><p>话不多说，我们进入今天的学习。</p><h3 id="身份认证的技术方案" tabindex="-1">身份认证的技术方案 <a class="header-anchor" href="#身份认证的技术方案" aria-label="Permalink to &quot;身份认证的技术方案&quot;">​</a></h3><p>要实现应用中的身份认证，你首先要详细了解身份认证的技术方案，以及该方案怎么在 Serverless 架构中使用，因为有的技术方案可能不适合 Serverless。</p><h4 id="cookie-session" tabindex="-1">Cookie-Session <a class="header-anchor" href="#cookie-session" aria-label="Permalink to &quot;Cookie-Session&quot;">​</a></h4><p>早期互联网主要以 Web 为主，客户端是浏览器，所以 Cookie-Session 方式是早期最常用的身份认证方式，直到现在很多 Web 网站依然使用这种方式。其认证流程是：</p><ul><li><p>用户在浏览器中输入账号密码登录；</p></li><li><p>服务端验证通过后，将用户信息保存在 Session 中并生成一个 Session ID；</p></li><li><p>然后服务端将 Session ID 放在 HTTP 响应头的 cookie 字段中；</p></li><li><p>浏览器收到 HTTP 响应后，将 cookie 保存在浏览器中，cookie 内容就是之前登录时生成的 Session ID；</p></li><li><p>用户再访问网站时，浏览器请求头就会自动带上 cookie 信息；</p></li><li><p>服务端接收到请求后，从 cookie 获取到 Session ID，然后根据 Session ID 解析出用户信息。</p></li></ul>',11),y=s("p",null,"Cookie-Session 身份认证流程",-1),i=s("p",null,"这种方案存在两个主要问题：",-1),F=s("ul",null,[s("li",null,[s("p",null,"服务端的 Session ID 是直接存储在内存中的，在分布式系统中无法共享登录状态；")]),s("li",null,[s("p",null,"cookie 是浏览器的功能，手机 App 等客户端并不支持 cookie，所以该方案不适用于非浏览器的应用。")])],-1),u=s("p",null,[n("第一个问题也是 Cookie-Session 方案应用于 Serverless 架构的主要问题，因为 Serverless 应用是无状态的，内存中的数据用完即销毁，多个请求间无法共享 Session。"),s("strong",null,"解决该问题也比较容易，"),n(" 就是用一个共享存储来保存 Session 信息，最常见的就是 Redis，因为 Redis 是一个内存数据库，读写速度很快。")],-1),d=s("p",null,"于是 Cookie-Session 的身份认证方案就发生了变化：",-1),h=l('<p>基于共享存储的 Cookie-Session 身份认证流程</p><p>与早期方案不同，用户登录时，该方案会把用户信息保存在 Redis 中，而不是内存中，然后服务端依然会将 Session ID 返回给浏览器，浏览器将其保存在 cookie 中。而之后非登录的请求，浏览器依然会将包含 Session ID 的 cookie 放在请求头中发送给服务端，服务端拿到 Session ID 后，从 Redis 中查询出用户信息。这样就可以解决分布式、无状态的系统中用户登录状态共享问题。</p><p>不过这个方案依旧无法解决非浏览器场景的身份认证问题，所以 JWT 方案诞生了。</p><h4 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h4><p>JWT 是（JSON Web Token）的简称，其原理是：</p><ul><li><p>服务端认证通过后，根据用户信息生成一个 token 返回给客户端；</p></li><li><p>客户端将 token 存储在 cookie 或 localStorage 中；</p></li><li><p>之后客户端每次请求都需要带上 token，通常是将 token 放在 HTTP 请求头的 Authorization 字段中；</p></li><li><p>服务端接收到 token 后，验证 token 的合法性，并从 token 中解析出用户信息。</p></li></ul>',6),C=l(`<p>JWT 身份认证流程</p><p>token 是个比较长字符串，格式为<code>Header.Payload.Signature</code>，由<code>.</code>分隔为三部分。下面是一个实际的 token 示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJqYWNrIiwiaWF0IjoxNjEwODg1MTcxfQ.KIduc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">undaZ0z</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Bt4wjGZIK5fMlx1auVHl_G1DvGDCw</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJqYWNrIiwiaWF0IjoxNjEwODg1MTcxfQ.KIduc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">undaZ0z</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Bt4wjGZIK5fMlx1auVHl_G1DvGDCw</span></span></code></pre></div><p><strong>可能有同学会担忧：</strong> token 是根据用户信息生成的，这样会不会泄露用户信息呢？其实不用担心，因为生成 token 的加密算法是不可逆的，并且 token 也可以设置过期时间，所以 token 字符串本身不会泄露用户信息。</p><p>基于 JWT ，客户端可以使用自己特有的存储来保存 token，不依赖 cookie，所以 JWT 可以适用于任意客户端。并且使用 JWT 进行身份认证，服务端就不用存储用户信息了，这样服务端就是无状态的。<strong>因此 JWT 这种身份认证方案，也非常适合 Serverless 应用。</strong></p><p>接下来，我就基于 JWT ，带你从 0 到 1实现一个登录注册应用。</p><h3 id="从-0-到-1-实现一个登录注册应用" tabindex="-1">从 0 到 1 实现一个登录注册应用 <a class="header-anchor" href="#从-0-到-1-实现一个登录注册应用" aria-label="Permalink to &quot;从 0 到 1 实现一个登录注册应用&quot;">​</a></h3><p>为了方便，我们将基于 Express.js 框架进行开发。关于该应用的所有代码你可以在 Github 上查看：<a href="https://github.com/nodejh/serverless-class/tree/master/15/auth-app" target="_blank" rel="noreferrer">Serverless Authorization</a>。</p><h4 id="应用初始化" tabindex="-1">应用初始化 <a class="header-anchor" href="#应用初始化" aria-label="Permalink to &quot;应用初始化&quot;">​</a></h4><p>首先安装 express、body-parser 和 @webserverless/fc-express 等依赖：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm i express body</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">parser @</span><span style="color:#F97583;">webserverless/</span><span style="color:#E1E4E8;">fc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">express </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">S</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm i express body</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">parser @</span><span style="color:#D73A49;">webserverless/</span><span style="color:#24292E;">fc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">express </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">S</span></span></code></pre></div><p>@webserverless/fc-express 的作用是将函数计算的 HTTP 或 API 网关触发器参数转换为 Express.js 框架的参数，这样你就可以很方便在函数计算中使用 Express.js 了。</p><p>然后我们初始化一个 template.yaml 模板，该模板定义了 auth-app 这个函数，函数触发器为 HTTP 触发器，支持 GET 和 POST 请求：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">ROSTemplateFormatVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Transform</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">serverless</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Serverless Authorization App&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">auth-app</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">index.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Events</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">httpTrigger</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">HTTP</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">AuthType</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ANONYMOUS</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">Methods</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">ROSTemplateFormatVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#22863A;">Transform</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#22863A;">Resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">serverless</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Serverless Authorization App&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">auth-app</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">index.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Events</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">httpTrigger</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">HTTP</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">AuthType</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ANONYMOUS</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">Methods</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>接下来在 index.js 中编写初始化代码，如下所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@webserverless/fc-express&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bodyParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;body-parser&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(bodyParser.</span><span style="color:#B392F0;">urlencoded</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  extended: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义 / 路由，返回 Hello Serverless!</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        data: </span><span style="color:#9ECBFF;">&#39;Hello Serverless!&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> proxy.</span><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">(app);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 @webserverless/fc-express 来将函数计算的请求转发给 Express.js 应用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// @webserverless/fc-express 可以将函数参数转换为 Express.js 的路由参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    server.</span><span style="color:#B392F0;">httpProxy</span><span style="color:#E1E4E8;">(req, res, context);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proxy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@webserverless/fc-express&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">express</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bodyParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;body-parser&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(bodyParser.</span><span style="color:#6F42C1;">urlencoded</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  extended: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义 / 路由，返回 Hello Serverless!</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        data: </span><span style="color:#032F62;">&#39;Hello Serverless!&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> proxy.</span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;">(app);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 @webserverless/fc-express 来将函数计算的请求转发给 Express.js 应用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// @webserverless/fc-express 可以将函数参数转换为 Express.js 的路由参数</span></span>
<span class="line"><span style="color:#24292E;">    server.</span><span style="color:#6F42C1;">httpProxy</span><span style="color:#24292E;">(req, res, context);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><strong>这段代码主要实现两个功能：</strong></p><ul><li><p>定义了 <code>/</code> 路由，该路由返回了 <code>Hello Serverless!</code> 字符串，我们之后可以用它来测试代码是否正常运行；</p></li><li><p>使用 @webserverless/fc-express 将函数计算的请求转发给 Express.js 应用，@webserverless/fc-express 可以将函数参数转换为 Express.js 的路由参数。</p></li></ul><p>然后通过 <code>fun deploy</code>部署应用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 部署应用</span></span>
<span class="line"><span style="color:#E1E4E8;">$ fun deploy </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">y</span></span>
<span class="line"><span style="color:#E1E4E8;">Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> service serverless to be deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">        Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> function auth</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app to be deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">                Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> packaging function auth</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app code...</span></span>
<span class="line"><span style="color:#E1E4E8;">                The function auth</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app has been packaged. A total of </span><span style="color:#79B8FF;">419</span><span style="color:#E1E4E8;"> files were compressed and the </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> size was </span><span style="color:#79B8FF;">724.49</span><span style="color:#E1E4E8;"> KB</span></span>
<span class="line"><span style="color:#E1E4E8;">                Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> HTTP trigger httpTrigger to be deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">                triggerName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> httpTrigger</span></span>
<span class="line"><span style="color:#E1E4E8;">                methods</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">                url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/</span></span>
<span class="line"><span style="color:#E1E4E8;">                trigger httpTrigger deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">        function auth</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">service serverless deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">$ curl https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Hello Serverless!&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 部署应用</span></span>
<span class="line"><span style="color:#24292E;">$ fun deploy </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">y</span></span>
<span class="line"><span style="color:#24292E;">Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> service serverless to be deployed...</span></span>
<span class="line"><span style="color:#24292E;">        Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> function auth</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app to be deployed...</span></span>
<span class="line"><span style="color:#24292E;">                Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> packaging function auth</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app code...</span></span>
<span class="line"><span style="color:#24292E;">                The function auth</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app has been packaged. A total of </span><span style="color:#005CC5;">419</span><span style="color:#24292E;"> files were compressed and the </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> size was </span><span style="color:#005CC5;">724.49</span><span style="color:#24292E;"> KB</span></span>
<span class="line"><span style="color:#24292E;">                Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> HTTP trigger httpTrigger to be deployed...</span></span>
<span class="line"><span style="color:#24292E;">                triggerName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> httpTrigger</span></span>
<span class="line"><span style="color:#24292E;">                methods</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">                url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/</span></span>
<span class="line"><span style="color:#24292E;">                trigger httpTrigger deploy success</span></span>
<span class="line"><span style="color:#24292E;">        function auth</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app deploy success</span></span>
<span class="line"><span style="color:#24292E;">service serverless deploy success</span></span>
<span class="line"><span style="color:#24292E;">$ curl https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Hello Serverless!&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>部署成功后，我们就可以获取到函数计算提供的测试 HTTP Endpoint，然后就可以通过 curl 命令进行测试应用是否正常运行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Hello Serverless!&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Hello Serverless!&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>如果你和我一样返回了上述 JSON 字符串，就说明应用正常运行了，接下来我们就可以继续实现注册功能了。</p><h4 id="实现注册功能" tabindex="-1">实现注册功能 <a class="header-anchor" href="#实现注册功能" aria-label="Permalink to &quot;实现注册功能&quot;">​</a></h4><p>注册的逻辑是：先获取用户输入的用户名和密码，然后判断用户是否存在，如果不存在就将其存入表格存储数据库。</p><p><strong>这里我们使用的数据库是表格存储。</strong> 可能你使用的比较多的是 MySQL，之所以选用表格存储而不是 MySQL，是因为表格存储可以直接通过 Restful API 进行读写，并且弹性可扩展，更适合 Serverless 应用。使用表格存储时，你要先创建一个表格存储实例，然后创建一个 user 表。为了方便，我也给你提供了一个创建 user 表的脚本：<a href="https://github.com/nodejh/serverless-class/tree/master/15/create-table" target="_blank" rel="noreferrer">create-table</a>。</p><p>接下来继续编写代码。由于要使用表格存储，所以首先需要安装 tablestore 依赖，然后在 index.js 中初始化表格存储 client：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 安装 tablestore 依赖</span></span>
<span class="line"><span style="color:#E1E4E8;"># tablestore 封装了表格存储的 API</span></span>
<span class="line"><span style="color:#E1E4E8;">$ npm i tablestore </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">S</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 安装 tablestore 依赖</span></span>
<span class="line"><span style="color:#24292E;"># tablestore 封装了表格存储的 API</span></span>
<span class="line"><span style="color:#24292E;">$ npm i tablestore </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">S</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TableStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tablestore&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 初始化 TableStore client</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TableStore.</span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  accessKeyId: </span><span style="color:#9ECBFF;">&#39;&lt;your access key&gt;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  accessKeySecret: </span><span style="color:#9ECBFF;">&#39;your access secret&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  endpoint: </span><span style="color:#9ECBFF;">&#39;https://serverless-app.cn-shanghai.ots.aliyuncs.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  instancename: </span><span style="color:#9ECBFF;">&#39;serverless-app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TableStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;tablestore&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 初始化 TableStore client</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TableStore.</span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  accessKeyId: </span><span style="color:#032F62;">&#39;&lt;your access key&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  accessKeySecret: </span><span style="color:#032F62;">&#39;your access secret&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  endpoint: </span><span style="color:#032F62;">&#39;https://serverless-app.cn-shanghai.ots.aliyuncs.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  instancename: </span><span style="color:#032F62;">&#39;serverless-app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>现在我们就可以定义一个路由来处理用户的注册请求了。代码如下所示，首先我们根据 name 从表格存储中查询用户信息，如果用户已存在，则直接返回；如果用户不存在，则将用户信息写入表格存储。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义 /register 路由，处理注册请求</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/register&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从请求体中获取用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body.name;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body.password;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">age</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body.age;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断用户是否已经存在</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">row</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getRow</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableName: </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    primaryKey: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">      name</span></span>
<span class="line"><span style="color:#E1E4E8;">    }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (row.primaryKey) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果用户已存在，则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#9ECBFF;">&#39;用户已存在&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建用户，将用户信息写入到表格存储中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">putRow</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableName: </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    condition: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TableStore.</span><span style="color:#B392F0;">Condition</span><span style="color:#E1E4E8;">(TableStore.RowExistenceExpectation.</span><span style="color:#79B8FF;">EXPECT_NOT_EXIST</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    primaryKey: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">      name</span></span>
<span class="line"><span style="color:#E1E4E8;">    }],</span></span>
<span class="line"><span style="color:#E1E4E8;">    attributeColumns: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">      password</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      age</span></span>
<span class="line"><span style="color:#E1E4E8;">    }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回创建成功</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义 /register 路由，处理注册请求</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/register&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从请求体中获取用户信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body.name;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body.password;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">age</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body.age;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断用户是否已经存在</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">row</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getRow</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    tableName: </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    primaryKey: [{</span></span>
<span class="line"><span style="color:#24292E;">      name</span></span>
<span class="line"><span style="color:#24292E;">    }]</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (row.primaryKey) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果用户已存在，则直接返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      message: </span><span style="color:#032F62;">&#39;用户已存在&#39;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建用户，将用户信息写入到表格存储中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">putRow</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    tableName: </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    condition: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TableStore.</span><span style="color:#6F42C1;">Condition</span><span style="color:#24292E;">(TableStore.RowExistenceExpectation.</span><span style="color:#005CC5;">EXPECT_NOT_EXIST</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    primaryKey: [{</span></span>
<span class="line"><span style="color:#24292E;">      name</span></span>
<span class="line"><span style="color:#24292E;">    }],</span></span>
<span class="line"><span style="color:#24292E;">    attributeColumns: [{</span></span>
<span class="line"><span style="color:#24292E;">      password</span></span>
<span class="line"><span style="color:#24292E;">    }, {</span></span>
<span class="line"><span style="color:#24292E;">      age</span></span>
<span class="line"><span style="color:#24292E;">    }]</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回创建成功</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>至此注册功能就完成了，你可以将代码部署到函数计算上，像下面这样通过 curl 命令来模拟用户请求，验证功能是否正常：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth/login \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;name=jack&amp;password=123456&amp;age=18&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$ curl </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth/login \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;name=jack&amp;password=123456&amp;age=18&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;用户已存在&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth/login \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;name=jack&amp;password=123456&amp;age=18&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$ curl </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth/login \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;name=jack&amp;password=123456&amp;age=18&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;用户已存在&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>注册功能完成后，就可以继续实现登录功能了。</p><h4 id="实现登录功能" tabindex="-1">实现登录功能 <a class="header-anchor" href="#实现登录功能" aria-label="Permalink to &quot;实现登录功能&quot;">​</a></h4><p>登录就是验证用户输入的用户名密码是否正确。</p><p>首先根据用户输入的 name 从表格存储中查询出用户信息，然后对比用户密码与数据库中的用户密码是否一致，如果一致，则登录成功；否则登录失败。登录成功后，还需要根据用户信息生成一个 token 返回给用户。<strong>具体怎么实现呢？</strong></p><p>前面我们提到，Serverless 中最通用的身份认证方案是 JWT，所以我们首先需要安装 Node.js 中的 JWT 依赖包 jsonwebtoken：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm install jsonwebtoken </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">S</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm install jsonwebtoken </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">S</span></span></code></pre></div><p>然后在代码中引入 jsonwebtoken ，并定义 SECRET。SECRET 是用来加密和解密 token 的密钥，非常重要，且不能泄露。</p><p>接下来在代码中定义 <code>/login</code> 路由来处理用户请求。这段代码中，我们首先验证了用户密码是否正确，密码正确后，再使用 jwt.sign() 方法，根据用户信息生成了 token，最后将 token 返回给客户端，客户端需要将 token 保存下来。之后客户端每次请求，都需要带上 token 进行身份认证。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jwt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jsonwebtoken&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 设置密钥，非常重要，不能泄露</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SECRET</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;token_secret_xd2dasf19df=&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// 定义 /login 路由，用来实现登录功能</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/login&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从请求体中获取用户名和密码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body.name;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body.password;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据用户名查询用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">row</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getRow</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableName: </span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    primaryKey: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">      name</span></span>
<span class="line"><span style="color:#E1E4E8;">    }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果查询结果为空，则直接返回用户不存在</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">row.primaryKey) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#9ECBFF;">&#39;用户不存在&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从查询结果中构造用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  row.attributes.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> user[item.columnName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.columnValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断密码是否正确</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (password </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> user.password) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#9ECBFF;">&#39;密码错误&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  user.password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;******&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 生成 token</span></span>
<span class="line"><span style="color:#6A737D;">   * jwt.sign() 接受两个参数，一个是传入的对象，一个是自定义的密钥</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(user, </span><span style="color:#79B8FF;">SECRET</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: { token }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jwt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jsonwebtoken&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 设置密钥，非常重要，不能泄露</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SECRET</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;token_secret_xd2dasf19df=&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// 定义 /login 路由，用来实现登录功能</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/login&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从请求体中获取用户名和密码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body.name;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body.password;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 根据用户名查询用户信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">row</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getRow</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    tableName: </span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    primaryKey: [{</span></span>
<span class="line"><span style="color:#24292E;">      name</span></span>
<span class="line"><span style="color:#24292E;">    }]</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果查询结果为空，则直接返回用户不存在</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">row.primaryKey) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      message: </span><span style="color:#032F62;">&#39;用户不存在&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从查询结果中构造用户信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  row.attributes.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> user[item.columnName] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item.columnValue);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断密码是否正确</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (password </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> user.password) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      message: </span><span style="color:#032F62;">&#39;密码错误&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  user.password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;******&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 生成 token</span></span>
<span class="line"><span style="color:#6A737D;">   * jwt.sign() 接受两个参数，一个是传入的对象，一个是自定义的密钥</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwt.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(user, </span><span style="color:#005CC5;">SECRET</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    data: { token }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>代码编写完成后，部署到函数计算并进行测试，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/login \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;name=jack&amp;password=123456&quot;</span><span style="color:#E1E4E8;"> \\ </span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;token&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamFjayIsImFnZSI6IjE4IiwicGFzc3dvcmQiOiIqKioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7MkU&quot;</span><span style="color:#E1E4E8;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 使用错误的密码登录</span></span>
<span class="line"><span style="color:#E1E4E8;">$ curl https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/login \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;name=jack&amp;password=1234561&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;密码错误&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/login \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;name=jack&amp;password=123456&quot;</span><span style="color:#24292E;"> \\ </span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamFjayIsImFnZSI6IjE4IiwicGFzc3dvcmQiOiIqKioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7MkU&quot;</span><span style="color:#24292E;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 使用错误的密码登录</span></span>
<span class="line"><span style="color:#24292E;">$ curl https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/login \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;name=jack&amp;password=1234561&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;密码错误&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>那么问题来了：对于需要登录后才能访问的接口，应该怎么根据 token 验证用户身份呢？别急，我们继续下面的学习。</p><h4 id="验证用户身份" tabindex="-1">验证用户身份 <a class="header-anchor" href="#验证用户身份" aria-label="Permalink to &quot;验证用户身份&quot;">​</a></h4><p>前面提到，登录成功后，客户端需要将 token 保存下来，然后在接下来的请求中，都需要带上 token。通常会将 token 放在 HTTP 请求头中，格式通常为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Authorization</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Bearer token</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Authorization</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Bearer token</span></span></code></pre></div><p>这时假设我们要实现一个新的接口，获取当前登录用户信息，该接口也只能登录后才能使用。那么代码实现就是下面这样：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义 /user 路由，获取当前登录的用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/user&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 HTTP 请求头中获取 token 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req</span></span>
<span class="line"><span style="color:#E1E4E8;">    .headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    .authorization</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 验证 token 并解析出用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(token, </span><span style="color:#79B8FF;">SECRET</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      data: user</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      data: </span><span style="color:#9ECBFF;">&#39;身份认证失败&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义 /user 路由，获取当前登录的用户信息</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/user&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 HTTP 请求头中获取 token 信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req</span></span>
<span class="line"><span style="color:#24292E;">    .headers</span></span>
<span class="line"><span style="color:#24292E;">    .authorization</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 验证 token 并解析出用户信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwt.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(token, </span><span style="color:#005CC5;">SECRET</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      data: user</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      data: </span><span style="color:#032F62;">&#39;身份认证失败&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>首先我们定义了 <code>/user</code> 路由，然后通过请求头拿到 token 信息，最后使用 <code>jwt.verify()</code> 对 token 进行解密，并从中得到用户信息，如果用户传入的 token 无法解析，则说明用户身份异常。</p><p>同样，我们可以将代码部署到函数计算并进行测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/user \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamFjayIsImFnZSI6IjE4IiwicGFzc3dvcmQiOiIqKioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7MkU&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;18&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;******&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;iat&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1610905944</span><span style="color:#E1E4E8;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 使用错误的 token 进行身份认证</span></span>
<span class="line"><span style="color:#E1E4E8;">$ curl https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/user -H &quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamFjayIsImFnZSI6IjE4IiwicGFzc3dvcmQiOiIqKioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7Mk&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;身份认证失败&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/user \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamFjayIsImFnZSI6IjE4IiwicGFzc3dvcmQiOiIqKioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7MkU&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;18&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;******&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;iat&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1610905944</span><span style="color:#24292E;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 使用错误的 token 进行身份认证</span></span>
<span class="line"><span style="color:#24292E;">$ curl https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/user -H &quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiamFjayIsImFnZSI6IjE4IiwicGFzc3dvcmQiOiIqKioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7Mk&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;身份认证失败&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>到此为止，一个 Serverless 架构的登录注册功能就完成了，我们也基于 JWT 实现了 Serverless 中的身份认证。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲，我首先为你介绍了常用的身份认证方案，并分析了这些方案的特点，以及如何在 Serverless 架构中使用这些方案。然后我带你从0到1实现了一个 Serverless 的登录注册应用，通过该场景实践，让你深入理解 Serverless 中的身份认证。</p><p>Serverless 应用的身份认证，本质上是要将有状态的认证方案改为无状态的。如何改为无状态呢？</p><ul><li><p>使用共享存储来保存登录状态，比如将 Session 信息存储到 Reids，这样应用就不用存储状态了；</p></li><li><p>使用无状态的身份认证方案，比如 JWT。</p></li></ul>`,58),A=s("p",null,"当然了，除了自己实现应用的身份认证，你也可以使用第三方的身份认证服务，比如 AWS Cognito、Google Firebase 等，基于它们，你就不用自己开发用户管理及身份认证功能了。",-1),g=s("p",null,"关于这一讲，我想强调这样几点：",-1),D=s("ul",null,[s("li",null,[s("p",null,"Cookie-Session 的身份认证方式，是在服务端存储 Session 信息，客户端（浏览器）通过 cookie 存储 Session ID；")]),s("li",null,[s("p",null,"JWT 的身份认证方式，是在服务端根据用户信息生成 token，客户端保存 token；")]),s("li",null,[s("p",null,"Cookie-Session 的认证方案通常是有状态的，对于分布式、无状态的应用，需要将 Session 保存在共享存储中；")]),s("li",null,[s("p",null,"JWT 的认证方式通常是无状态的，所以比较适合 Serverless 应用。")])],-1),v=s("p",null,"最后，希望通过今天的学习，你能深入了解 Serverless 应用的身份认证，今天留给你的作业就是：亲自动手实现一个 Serverless 的登录注册应用，我们下一讲见。",-1);function q(m,k,b,B,S,T){const a=e("Image");return c(),t("div",null,[E,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXxNGAVJ2eAAHjY3afYhk253.png"}),n(),y,i,F,u,d,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXxOKAJBiFAALzfxQb7r8244.png"}),n(),h,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/94/46/CgqCHmAXxOyAImLQAAHmAyEZuFk591.png"}),n(),C,p(a,{alt:"玩转 Serverless 架构15金句.png",src:"https://s0.lgstatic.com/i/image6/M01/04/32/CioPOWAj2_2AUoDKAAEU4YVNqFA780.png"}),n(),A,g,D,v])}const j=o(r,[["render",q]]);export{f as __pageData,j as default};
