import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.4e7d56ce.js";const F=JSON.parse('{"title":"13熔断之器：如何使用SpringCloudCircuitBreaker实现服务容错？（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4758) 13  熔断之器：如何使用 Spring Cloud Circuit Breaker 实现服务容错？（上）.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4758) 13  熔断之器：如何使用 Spring Cloud Circuit Breaker 实现服务容错？（上）.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4758) 13  熔断之器：如何使用 Spring Cloud Circuit Breaker 实现服务容错？（上）.md"},o=l(`<h1 id="_13熔断之器-如何使用springcloudcircuitbreaker实现服务容错-上" tabindex="-1">13熔断之器：如何使用SpringCloudCircuitBreaker实现服务容错？（上） <a class="header-anchor" href="#_13熔断之器-如何使用springcloudcircuitbreaker实现服务容错-上" aria-label="Permalink to &quot;13熔断之器：如何使用SpringCloudCircuitBreaker实现服务容错？（上）&quot;">​</a></h1><p>在上一课时中，我们全面梳理了在微服务架构中实现服务容错的设计思想和实现方案，也引出了 Spring Cloud 中专门用于实现服务容错的 Spring Cloud Circuit Breaker 框架。我们知道 Spring Cloud Circuit Breaker 是一个集成性的框架，内部整合了 Netflix Hystrix、Resilience4j、Sentinel 和 Spring Retry 这四款独立的熔断器组件。由于课时有限，我们无意对这四款组件都进行详细的展开，而是更多关注于 Netflix 旗下的 Hystrix，以及受 Hystrix 启发而诞生的 Resilience4j。在今天的课时中，我们先来讨论 Netflix Hystrix。</p><h3 id="引入-hystrix" tabindex="-1">引入 Hystrix <a class="header-anchor" href="#引入-hystrix" aria-label="Permalink to &quot;引入 Hystrix&quot;">​</a></h3><p>要想在微服务中添加对 Netflix Hystrix 的支持，我们首先需要在 Maven 中添加对 spring-cloud-starter-netflix-hystrix 的依赖。过程如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-netflix-hystrix&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-netflix-hystrix&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>另一方面，通过上一课时的介绍，我们也明确了在微服务架构中，服务调用之间势必需要<strong>引入熔断器机制</strong> ，<strong>确保服务容错</strong>。所以，Spring Cloud 推出了一个全新的注解，@SpringCloudApplication 注解。该注解用来集成服务治理和服务熔断方面的核心功能。@SpringCloudApplication 注解定义如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableDiscoveryClient</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableCircuitBreaker</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SpringCloudApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableDiscoveryClient</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableCircuitBreaker</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SpringCloudApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 @SpringCloudApplication 是一个组合注解，整合了 @SpringBootApplication、@EnableDiscoveryClient 和 @EnableCircuitBreaker 这三个微服务所需的核心注解。我们可以直接使用该注解来简化代码。因此，从今天开始，在所有的业务服务中，我们都将使用这个新的 @SpringCloudApplication 注解。以 intervention-service 为例，现在的 Bootstrap 类的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterventionApplication</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterventionApplication</span></span></code></pre></div><p>在 Hystrix 中，最核心的莫过于<strong>HystrixCommand 类</strong>。HystrixCommand 是一个抽象类，只包含了一个抽象方法，即如下所示的 run 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> R </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() throws Exception;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> R </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() throws Exception;</span></span></code></pre></div><p>显然，这个方法是让开发人员实现服务容错所需要处理的业务逻辑。在微服务架构中，我们通常在这个 run 方法中添加对远程服务的访问代码。</p><p>同时我们在 HystrixCommand 类中还发现了另一个很有用的方法 getFallback。这个方法用于在 HystrixCommand 子类中设置服务回退函数的具体实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> R </span><span style="color:#B392F0;">getFallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No fallback available.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> R </span><span style="color:#6F42C1;">getFallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No fallback available.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Hystrix 是一个非常经典而完善的服务容错开发框架，同时支持了上一课时中所提到的服务隔离、服务熔断和服务回退机制。下面的内容，就让我们逐一了解一下这些功能吧。</p><h3 id="使用-hystrix-实现服务隔离" tabindex="-1">使用 Hystrix 实现服务隔离 <a class="header-anchor" href="#使用-hystrix-实现服务隔离" aria-label="Permalink to &quot;使用 Hystrix 实现服务隔离&quot;">​</a></h3><p>基于前面对 HystrixCommand 抽象类的理解，我们就可以提供一个该类的子类来实现服务隔离。针对服务隔离，Hystrix 组件在提供了线程池隔离机制的同时，还实现了<strong>信号量隔离</strong>。这里，我们基于最常用的线程池隔离来进行介绍。典型的 HystrixCommand 子类代码风格如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetUserCommand</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixCommand</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserMapper</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//远程调用 user-service 的客户端工具类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserServiceClient userServiceClient;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetUserCommand</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(Setter.</span><span style="color:#B392F0;">withGroupKey</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//设置命令组</span></span>
<span class="line"><span style="color:#E1E4E8;">            HystrixCommandGroupKey.Factory.</span><span style="color:#B392F0;">asKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;springHealthGroup&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//设置命令键</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">andCommandKey</span><span style="color:#E1E4E8;">(HystrixCommandKey.Factory.</span><span style="color:#B392F0;">asKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;interventionKey&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//设置线程池键</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">andThreadPoolKey</span><span style="color:#E1E4E8;">(HystrixThreadPoolKey.Factory.</span><span style="color:#B392F0;">asKey</span><span style="color:#E1E4E8;">(name))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//设置命令属性</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">andCommandPropertiesDefaults</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    HystrixCommandProperties.</span><span style="color:#B392F0;">Setter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">withExecutionTimeoutInMilliseconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//设置线程池属性</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">andThreadPoolPropertiesDefaults</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    HystrixThreadPoolProperties.</span><span style="color:#B392F0;">Setter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">withMaxQueueSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">withCoreSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userServiceClient.</span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;springhealth_user1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getFallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserMapper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;user1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;springhealth_user1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetUserCommand</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixCommand</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserMapper</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//远程调用 user-service 的客户端工具类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserServiceClient userServiceClient;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetUserCommand</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(Setter.</span><span style="color:#6F42C1;">withGroupKey</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//设置命令组</span></span>
<span class="line"><span style="color:#24292E;">            HystrixCommandGroupKey.Factory.</span><span style="color:#6F42C1;">asKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;springHealthGroup&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置命令键</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">andCommandKey</span><span style="color:#24292E;">(HystrixCommandKey.Factory.</span><span style="color:#6F42C1;">asKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;interventionKey&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置线程池键</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">andThreadPoolKey</span><span style="color:#24292E;">(HystrixThreadPoolKey.Factory.</span><span style="color:#6F42C1;">asKey</span><span style="color:#24292E;">(name))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置命令属性</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">andCommandPropertiesDefaults</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    HystrixCommandProperties.</span><span style="color:#6F42C1;">Setter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">withExecutionTimeoutInMilliseconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置线程池属性</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">andThreadPoolPropertiesDefaults</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    HystrixThreadPoolProperties.</span><span style="color:#6F42C1;">Setter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">withMaxQueueSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">withCoreSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userServiceClient.</span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;springhealth_user1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getFallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserMapper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;user1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;springhealth_user1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中使用了 Hystrix 中的很多常见的配置项，这些配置项大多数也涉及线程池隔离的相关概念。在 Hystrix 中，从控制粒度上讲，开发人员可以从服务分组和服务本身这两个维度出发，对线程隔离机制进行配置。也就是说我们既可以把一批服务都划分到一个线程池中，也可以把单个服务划分到一个线程池中。上述代码中的 HystrixCommandGroupKey 和 HystrixCommandKey 分别用来配置<strong>服务分组名称</strong> 和<strong>服务名称</strong> ，然后 HystrixThreadPoolKey 用来配置<strong>线程池</strong>的名称。</p><p>当我们根据需要设置 <s>了</s>分组、服务以及线程池名称后，接下来就需要指定与线程池相关的各个属性。这些属性都包含在 HystrixThreadPoolProperties 中。例如，在上述代码中，我们使用 maxQueueSize 配置线程池队列的最大值，使用 coreSize 配置核心线程池的最大值等。同时，我们也注意到可以使用 withExecutionTimeoutInMilliseconds 配置项来指定请求的超时时间。</p><p>虽然，上述代码有助于我们更好的理解 Hystrix 中线程池隔离实现机制，但在日常开发过程中，一般不建议你通过创建一个 HystrixCommand 子类的方式来实现服务隔离，而是推荐你使用更为简单的 @HystrixCommand 注解。@HystrixCommand 是 Hystrix 为简化开发过程而专门提供的一个注解，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">groupKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">commandKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">threadPoolKey</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">fallbackMethod</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">commandProperties</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">threadPoolProperties</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">ignoreExceptions</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    ObservableExecutionMode </span><span style="color:#B392F0;">observableExecutionMode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> ObservableExecutionMode.EAGER;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">HystrixException</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">raiseHystrixExceptions</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">defaultFallback</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">groupKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">commandKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">threadPoolKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">fallbackMethod</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">commandProperties</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">threadPoolProperties</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    Class</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">ignoreExceptions</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    ObservableExecutionMode </span><span style="color:#6F42C1;">observableExecutionMode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> ObservableExecutionMode.EAGER;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">HystrixException</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">raiseHystrixExceptions</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">defaultFallback</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述定义中，我们看到了用于设置分组、服务与线程池名称相关的 groupKey、commandKey 和 threadPoolKey方法，以及与线程池属性相关的 threadPoolProperties 对象。让我们回到案例，并使用 @HystrixCommand 注解进行重构，效果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(String userName) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userClient.</span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(String userName) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userClient.</span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里只使用了 @HystrixCommand 这个注解就完成 HystrixCommand 的创建。当然，我们也可以进一步使用 @HystrixProperty 注解来设置所需的各项属性，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">threadPoolKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;springHealthGroup&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">threadPoolProperties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">     {</span></span>
<span class="line"><span style="color:#E1E4E8;">         @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;coreSize&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">         @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;maxQueueSize&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(String userName) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userClient.</span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">threadPoolKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;springHealthGroup&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">threadPoolProperties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">     {</span></span>
<span class="line"><span style="color:#24292E;">         @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;coreSize&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">         @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;maxQueueSize&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(String userName) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userClient.</span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样可以看到，我们为该 HystrixCommand 设置了 threadPoolKey，也提供了 threadPoolProperties 来设置 coreSize 和 maxQueueSize。</p><h3 id="使用-hystrix-实现服务熔断" tabindex="-1">使用 Hystrix 实现服务熔断 <a class="header-anchor" href="#使用-hystrix-实现服务熔断" aria-label="Permalink to &quot;使用 Hystrix 实现服务熔断&quot;">​</a></h3><p>在上一课时中，我们知道熔断器有三个状态，其中<strong>打开</strong> 和<strong>半打开状态</strong> 会导致<strong>触发熔断机制</strong>。针对服务熔断，我们同样来考虑案例系统中一个服务依赖调用的具体场景，这个场景是对前面介绍的服务隔离的衍生。在 SpringHealth 案例中，我们知道 intervention-service 需要调用 user-service 和 device-service 来生成健康干预记录，该操作的代码流程如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Intervention </span><span style="color:#B392F0;">generateIntervention</span><span style="color:#E1E4E8;">(String userName, String deviceCode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Generate intervention record with user: {} from device: {}&quot;</span><span style="color:#E1E4E8;">, userName, deviceCode);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Intervention intervention </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Intervention</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取远程 User 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserMapper user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (user </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> intervention;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Get remote user: {} is successful&quot;</span><span style="color:#E1E4E8;">, userName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取远程 Device 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        DeviceMapper device </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDevice</span><span style="color:#E1E4E8;">(deviceCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (device </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> intervention;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Get remote device: {} is successful&quot;</span><span style="color:#E1E4E8;">, deviceCode);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建并保存 Intervention 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        intervention.</span><span style="color:#B392F0;">setUserId</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        intervention.</span><span style="color:#B392F0;">setDeviceId</span><span style="color:#E1E4E8;">(device.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        intervention.</span><span style="color:#B392F0;">setHealthData</span><span style="color:#E1E4E8;">(device.</span><span style="color:#B392F0;">getHealthData</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        intervention.</span><span style="color:#B392F0;">setIntervention</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;InterventionForDemo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        intervention.</span><span style="color:#B392F0;">setCreateTime</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        interventionRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(intervention);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> intervention;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Intervention </span><span style="color:#6F42C1;">generateIntervention</span><span style="color:#24292E;">(String userName, String deviceCode) {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Generate intervention record with user: {} from device: {}&quot;</span><span style="color:#24292E;">, userName, deviceCode);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Intervention intervention </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Intervention</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取远程 User 信息</span></span>
<span class="line"><span style="color:#24292E;">        UserMapper user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (user </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> intervention;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Get remote user: {} is successful&quot;</span><span style="color:#24292E;">, userName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取远程 Device 信息</span></span>
<span class="line"><span style="color:#24292E;">        DeviceMapper device </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDevice</span><span style="color:#24292E;">(deviceCode);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (device </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> intervention;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Get remote device: {} is successful&quot;</span><span style="color:#24292E;">, deviceCode);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建并保存 Intervention 信息</span></span>
<span class="line"><span style="color:#24292E;">        intervention.</span><span style="color:#6F42C1;">setUserId</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        intervention.</span><span style="color:#6F42C1;">setDeviceId</span><span style="color:#24292E;">(device.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        intervention.</span><span style="color:#6F42C1;">setHealthData</span><span style="color:#24292E;">(device.</span><span style="color:#6F42C1;">getHealthData</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        intervention.</span><span style="color:#6F42C1;">setIntervention</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;InterventionForDemo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        intervention.</span><span style="color:#6F42C1;">setCreateTime</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        interventionRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(intervention);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> intervention;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，上述代码中 getUser() 方法和 getDevice() 方法都会涉及微服务之间的相互依赖和调用，示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserServiceClient userClient;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DeviceServiceClient deviceClient;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(String userName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userClient.</span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DeviceMapper </span><span style="color:#B392F0;">getDevice</span><span style="color:#E1E4E8;">(String deviceCode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> deviceClient.</span><span style="color:#B392F0;">getDevice</span><span style="color:#E1E4E8;">(deviceCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserServiceClient userClient;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DeviceServiceClient deviceClient;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(String userName) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userClient.</span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DeviceMapper </span><span style="color:#6F42C1;">getDevice</span><span style="color:#24292E;">(String deviceCode) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> deviceClient.</span><span style="color:#6F42C1;">getDevice</span><span style="color:#24292E;">(deviceCode);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里通过注入 UserServiceClient 和 DeviceServiceClient 两个工具类来实现远程调用，这两个工具类都使用了 Ribbon 和 RestTemplate 来实现调用过程的客户端负载均衡，关于客户端负载均衡相关内容我们在《负载均衡：如何使用 Ribbon 实现客户端负载均衡？》中已经进行了介绍。</p><p>在微服务环境下，使用 UserServiceClient 和 DeviceServiceClient 的调用过程可能会出现响应超时等问题，这个时候 intervention-service 作为服务消费者需要做到服务容错。要嵌入 Hystrix 提供的熔断机制，我们只需要在这两个方法上添加 @HystrixCommand 注解即可。在前面的代码我已经做了相应的示例。</p><p>现在我们来模拟一下远程调用超时的场景，调整 getDevice() 方法的代码，通过 Thread.sleep(2000) 来模拟响应时间过长的场景，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DeviceMapper </span><span style="color:#B392F0;">getDevice</span><span style="color:#E1E4E8;">(String deviceCode) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> deviceClient.</span><span style="color:#B392F0;">getDevice</span><span style="color:#E1E4E8;">(deviceCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DeviceMapper </span><span style="color:#6F42C1;">getDevice</span><span style="color:#24292E;">(String deviceCode) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> deviceClient.</span><span style="color:#6F42C1;">getDevice</span><span style="color:#24292E;">(deviceCode);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在我们创建一个端点，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;interventions&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterventionController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> InterventionService interventionService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/{userName}/{deviceCode}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Intervention </span><span style="color:#B392F0;">generateIntervention</span><span style="color:#E1E4E8;">( @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userName&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">userName</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;deviceCode&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">deviceCode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Intervention intervention </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> interventionService.</span><span style="color:#B392F0;">generateIntervention</span><span style="color:#E1E4E8;">(userName, deviceCode);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> intervention;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;interventions&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterventionController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> InterventionService interventionService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/{userName}/{deviceCode}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Intervention </span><span style="color:#6F42C1;">generateIntervention</span><span style="color:#24292E;">( @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userName&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">userName</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;deviceCode&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">deviceCode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Intervention intervention </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> interventionService.</span><span style="color:#6F42C1;">generateIntervention</span><span style="color:#24292E;">(userName, deviceCode);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> intervention;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这个端点是用来访问 InterventionService 并生成 Intervention 记录的。现在，让我们访问这个端点：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http://localhost:8083/interventionss/springhealth_user1/device_blood</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http://localhost:8083/interventionss/springhealth_user1/device_blood</span></span></code></pre></div><p>首先，我们在 intervention-service 的控制台中会看到&quot;java.lang.InterruptedException: sleep interrupted&quot;异常地抛出，而抛出该异常的来源正是 Hystrix。</p><p>然后，我们来查看端点调用的返回值，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;timestamp&quot;:&quot;1601881721343&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;status&quot;:500,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;error&quot;:&quot;Internal Server Error&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;exception&quot;:&quot;com.netflix.hystrix.exception.HystrixRuntimeException&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;message&quot;:&quot;generate Intervention time-out and fallback failed.&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">     &quot;path&quot;:&quot;/interventions/springhealth_user1/device_blood&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     &quot;timestamp&quot;:&quot;1601881721343&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;status&quot;:500,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;error&quot;:&quot;Internal Server Error&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;exception&quot;:&quot;com.netflix.hystrix.exception.HystrixRuntimeException&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;message&quot;:&quot;generate Intervention time-out and fallback failed.&quot;,</span></span>
<span class="line"><span style="color:#24292E;">     &quot;path&quot;:&quot;/interventions/springhealth_user1/device_blood&quot;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>在这里，我们发现 HTTP 响应状态为 500，而抛出的异常为 HystrixRuntimeException，从异常信息上可以看出引起该异常的原因是超时。事实上，默认情况下，添加了 @HystrixCommand 注解的方法调用超过了 1000 毫秒就会触发超时异常，显然上例中设置的 2000 毫秒满足触发条件。</p><p>和设置线程池属性一样，在 HystrixCommand 中我们也可以对熔断的超时时间、失败率等各项阈值进行设置。例如我们可以在 getDevice() 方法上添加如下配置项以改变 Hystrix 的默认行为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">commandProperties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3000&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DeviceMapper </span><span style="color:#B392F0;">getDevice</span><span style="color:#E1E4E8;">(String deviceCode)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">commandProperties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3000&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DeviceMapper </span><span style="color:#6F42C1;">getDevice</span><span style="color:#24292E;">(String deviceCode)</span></span></code></pre></div><p>上面示例中的 execution.isolation.thread.timeoutInMilliseconds 配置项就是用来设置 Hystrix 的超时时间，现在我们把它设置成 3000 毫秒。这时，我们再次访问 <a href="http://localhost:8083/interventionsorders/springhealth_user1/device_blood" target="_blank" rel="noreferrer">http://localhost:8083/interventions/springhealth_user1/device_blood</a>端点，就会发现请求会正常返回。当然，Hystrix 还提供了一系列的配置项来细化对熔断器的控制。常见的配置项如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">commandProperties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;12000&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//一个滑动窗口内最小的请求数</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;circuitBreaker.requestVolumeThreshold&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//错误比率阈值</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;circuitBreaker.errorThresholdPercentage&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;75&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//触发熔断的时间值</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;circuitBreaker.sleepWindowInMilliseconds&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;7000&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//一个滑动窗口的时间长度</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;metrics.rollingStats.timeInMilliseconds&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;15000&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//一个滑动窗口被划分的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;metrics.rollingStats.numBuckets&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;5&quot;</span><span style="color:#E1E4E8;">) })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">commandProperties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;12000&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//一个滑动窗口内最小的请求数</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;circuitBreaker.requestVolumeThreshold&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//错误比率阈值</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;circuitBreaker.errorThresholdPercentage&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;75&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//触发熔断的时间值</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;circuitBreaker.sleepWindowInMilliseconds&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;7000&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//一个滑动窗口的时间长度</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;metrics.rollingStats.timeInMilliseconds&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;15000&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//一个滑动窗口被划分的数量</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;metrics.rollingStats.numBuckets&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;">) })</span></span></code></pre></div><p>我们在后续介绍 Hystrix 熔断器实现原理和滑动窗口机制时会对这些配置项的作用做进一步展开。</p><h3 id="使用-hystrix-实现服务回退" tabindex="-1">使用 Hystrix 实现服务回退 <a class="header-anchor" href="#使用-hystrix-实现服务回退" aria-label="Permalink to &quot;使用 Hystrix 实现服务回退&quot;">​</a></h3><p>Hystrix 在服务调用失败时都可以执行服务回退逻辑。在开发过程上，我们只需要提供一个 Fallback 方法实现并进行配置即可。例如，在 SpringHealth 案例系统中，对于 intervention-service 中访问 user-service 和 device-service 这两个远程调用场景，我们都可以实现 Fallback 方法。回退方法的实现也非常方便，唯一需要注意的就是 Fallback 方法的参数和返回值必须与真实的方法完全一致。如下所示的就是 Fallback 方法的一个示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getUserFallback</span><span style="color:#E1E4E8;">(String userName) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        UserMapper fallbackUser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserMapper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;no_user&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;not_existed_user&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fallbackUser;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getUserFallback</span><span style="color:#24292E;">(String userName) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        UserMapper fallbackUser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserMapper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;no_user&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;not_existed_user&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fallbackUser;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过构建一个不存在的 User 信息来返回 Fallback 结果。有了这个 Fallback 方法，剩下来要做的就是在 @HystrixCommand 注解中设置&quot;fallbackMethod&quot;配置项。重构后的 getUser 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">threadPoolKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;springHealthGroup&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">threadPoolProperties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">         {</span></span>
<span class="line"><span style="color:#E1E4E8;">             @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;coreSize&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             @</span><span style="color:#F97583;">HystrixProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;maxQueueSize&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         },</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">fallbackMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;getUserFallback&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(String userName) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userClient.</span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">threadPoolKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;springHealthGroup&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">threadPoolProperties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">         {</span></span>
<span class="line"><span style="color:#24292E;">             @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;coreSize&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             @</span><span style="color:#D73A49;">HystrixProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;maxQueueSize&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         },</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">fallbackMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;getUserFallback&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(String userName) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userClient.</span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在你可以模拟远程方法调用的各种异常情况，并观察这个 Fallback 是否已经生效了。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本课时对 Hystrix 这款服务容错实现框架进行了详细了讨论，并结合 SpringHealth 案例系统给出了使用该框架的示例代码。Hystrix 是服务容错领域的代表性框架，包含了服务隔离、服务容错和服务回退功能，值得你进行深入的理解并掌握运用。为了帮助你更好的学习 Hystrix 框架，我们在后续课时中还会专门从源码级别分析他的实现原理。</p><p>这里给你留一道思考题：你能说出 Hystrix 中有哪些常见的配置项吗？</p><p>讲完 Hystrix，我们将进一步讲解 Spring Cloud Circuit Breaker 框架。我们知道 Spring Cloud Circuit Breaker 中集成了多种服务容错框架，其中包括 Hystrix 却也不仅包括 Hystrix。下一课时，我们将首先探讨 Spring Cloud Circuit Breaker 中对服务容错的抽象机制，并完成对 Hystrix 使用方式的重构，以及介绍另一款主流的服务熔断工具 Resilience4j。</p>`,59),e=[o];function t(r,c,E,y,i,u){return n(),a("div",null,e)}const v=s(p,[["render",t]]);export{F as __pageData,v as default};
