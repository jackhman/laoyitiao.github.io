import{_ as n,j as p,o,g as l,k as e,h as r,Q as s}from"./chunks/framework.4e7d56ce.js";const m=JSON.parse('{"title":"34系统集成：如何完成ShardingSphere内核与Spring+SpringBoot的无缝整合？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3593) 34  系统集成：如何完成 ShardingSphere 内核与 Spring+SpringBoot 的无缝整合？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3593) 34  系统集成：如何完成 ShardingSphere 内核与 Spring+SpringBoot 的无缝整合？.md","lastUpdated":1696682708000}'),t={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3593) 34  系统集成：如何完成 ShardingSphere 内核与 Spring+SpringBoot 的无缝整合？.md"},c=s('<h1 id="_34系统集成-如何完成shardingsphere内核与spring-springboot的无缝整合" tabindex="-1">34系统集成：如何完成ShardingSphere内核与Spring+SpringBoot的无缝整合？ <a class="header-anchor" href="#_34系统集成-如何完成shardingsphere内核与spring-springboot的无缝整合" aria-label="Permalink to &quot;34系统集成：如何完成ShardingSphere内核与Spring+SpringBoot的无缝整合？&quot;">​</a></h1><p>今天，我们将进入整个课程中最后一个模块------系统集成模块的介绍。这里所谓的系统集成，指的就是 ShardingSphere 和 Spring 框架的集成。</p><p>到目前为止，ShardingSphere 实现了<strong>两种系统集成机制</strong>：一种是命名空间（namespace）机制，即通过扩展 Spring Schema 来实现与 Spring 框架的集成；而另一种则是通过编写自定义的 starter 组件来完成与 Spring Boot 的集成。本课时我将分别讲解这两种系统集成机制。</p><p>基于系统集成模块，无论开发人员采用哪一种 Spring 框架，对于使用 ShardingSphere 而言都是零学习成本。</p><h3 id="基于命名空间集成-spring" tabindex="-1">基于命名空间集成 Spring <a class="header-anchor" href="#基于命名空间集成-spring" aria-label="Permalink to &quot;基于命名空间集成 Spring&quot;">​</a></h3><p>从扩展性的角度讲，基于 XML Schema 的扩展机制也是非常常见和实用的一种方法。在 Spring 中，允许我们自己定义 XML 的结构，并且可以用自己的 Bean 解析器进行解析。通过对 Spring Schema 的扩展，ShardingSphere 可以完成与 Spring 框架的有效集成。</p><h4 id="_1-基于命名空间集成-spring-的通用开发流程" tabindex="-1">1.基于命名空间集成 Spring 的通用开发流程 <a class="header-anchor" href="#_1-基于命名空间集成-spring-的通用开发流程" aria-label="Permalink to &quot;1.基于命名空间集成 Spring 的通用开发流程&quot;">​</a></h4><p>基于命名空间机制实现与 Spring 的整合，开发上通常采用的是固定的一个流程，包括如下所示的五大步骤：</p>',8),i=s(`<p>这些步骤包括：编写业务对象、编写 XSD 文件、编写 BeanDefinitionParser 实现类、编写 NamespaceHandler 实现类，以及编写 spring.handlers 和 spring.schemas 配置文件，我们来看看 ShardingSphere 中实现这些步骤的具体做法。</p><h4 id="_2-shardingsphere-集成-spring" tabindex="-1">2.ShardingSphere 集成 Spring <a class="header-anchor" href="#_2-shardingsphere-集成-spring" aria-label="Permalink to &quot;2.ShardingSphere 集成 Spring&quot;">​</a></h4><p>ShardingSphere 中存在两个以&quot;spring-namespace&quot;结尾的代码工程，即 sharding-jdbc-spring-namespace 和 sharding-jdbc-orchestration-spring-namespace，显然后者关注的是编排治理相关功能的集成，相对比较简单。再因为命名空间机制的实现过程也基本一致，因此，我们以 sharding-jdbc-spring-namespace 工程为例展开讨论。</p><p>而在 sharding-jdbc-spring-namespace 工程中，又包含了对普通分片、读写分离和数据脱敏这三块核心功能的集成内容，它们的实现也都是采用了类似的方式，因此我们也不会重复进行说明，这里就以普通分片为例进行介绍。</p><p>首先，我们发现了一个专门用于与 Spring 进行集成的 SpringShardingDataSource 类，这个类就是业务对象类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringShardingDataSource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingDataSource</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringShardingDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DataSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">dataSourceMap</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRuleConfiguration </span><span style="color:#FFAB70;">shardingRuleConfiguration</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(dataSourceMap, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingRule</span><span style="color:#E1E4E8;">(shardingRuleConfiguration, dataSourceMap.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">()), props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringShardingDataSource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingDataSource</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringShardingDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DataSource</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">dataSourceMap</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRuleConfiguration </span><span style="color:#E36209;">shardingRuleConfiguration</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties </span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(dataSourceMap, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingRule</span><span style="color:#24292E;">(shardingRuleConfiguration, dataSourceMap.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()), props);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这个 SpringShardingDataSource 类实际上只是对 ShardingDataSource 的一种简单封装，没有包含任何实际操作。</p><p>然后，我们来看配置项标签的定义类，这种类是一种简单的工具类，其作用就是定义标签的名称。在命名上，ShardingSphere 中的这些类都以&quot;BeanDefinitionParserTag&quot;结尾，例如如下所示的 ShardingDataSourceBeanDefinitionParserTag：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">public final class ShardingDataSourceBeanDefinitionParserTag {</span></span>
<span class="line"><span style="color:#E1E4E8;">    public static final String ROOT_TAG = &quot;data-source&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">    public static final String SHARDING_RULE_CONFIG_TAG = sharding-rule&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">    public static final String PROPS_TAG = &quot;props&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">	public static final String DATA_SOURCE_NAMES_TAG = &quot;data-source-names&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">	public static final String DEFAULT_DATA_SOURCE_NAME_TAG = &quot;default-data-source-name&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">    public static final String TABLE_RULES_TAG = &quot;table-rules&quot;; </span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">public final class ShardingDataSourceBeanDefinitionParserTag {</span></span>
<span class="line"><span style="color:#24292E;">    public static final String ROOT_TAG = &quot;data-source&quot;;</span></span>
<span class="line"><span style="color:#24292E;">    public static final String SHARDING_RULE_CONFIG_TAG = sharding-rule&quot;;</span></span>
<span class="line"><span style="color:#24292E;">    public static final String PROPS_TAG = &quot;props&quot;;</span></span>
<span class="line"><span style="color:#24292E;">	public static final String DATA_SOURCE_NAMES_TAG = &quot;data-source-names&quot;;</span></span>
<span class="line"><span style="color:#24292E;">	public static final String DEFAULT_DATA_SOURCE_NAME_TAG = &quot;default-data-source-name&quot;;</span></span>
<span class="line"><span style="color:#24292E;">    public static final String TABLE_RULES_TAG = &quot;table-rules&quot;; </span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里定义了一批 Tag 和一批 Attribute，我们不做 一 一 展开。可以对照如下所示的基于 XML 的配置示例来对这些定义的配置项进行理解：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">sharding:data-source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;shardingDataSource&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">sharding:sharding-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-source-names</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ds0,ds1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">sharding:table-rules</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">sharding:table-rule</span><span style="color:#E1E4E8;"> .../&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	            &lt;</span><span style="color:#85E89D;">sharding:table-rule</span><span style="color:#E1E4E8;"> .../&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	            ...</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">sharding:table-rules</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">sharding:sharding-rule</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">sharding:data-source</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">sharding:data-source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;shardingDataSource&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">sharding:sharding-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-source-names</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ds0,ds1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">sharding:table-rules</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">sharding:table-rule</span><span style="color:#24292E;"> .../&gt;</span></span>
<span class="line"><span style="color:#24292E;">	            &lt;</span><span style="color:#22863A;">sharding:table-rule</span><span style="color:#24292E;"> .../&gt;</span></span>
<span class="line"><span style="color:#24292E;">	            ...</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">sharding:table-rules</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            ...</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">sharding:sharding-rule</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">sharding:data-source</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后，我们在 sharding-jdbc-spring-namespace 代码工程的 META-INF/namespace 文件夹下找到了对应的 sharding.xsd 文件，其基本结构如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">xsd:schema</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/sharding&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">xmlns:xsd</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">xmlns:beans</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">xmlns:encrypt</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">targetNamespace</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/sharding&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">elementFormDefault</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;qualified&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns:xsi</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">xsi:schemaLocation</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">xsd:import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namespace</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">schemaLocation</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">xsd:import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namespace</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">schemaLocation</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">xsd:element</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;data-source&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">xsd:complexType</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">xsd:all</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">xsd:element</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sharding-rule&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">xsd:element</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;props&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minOccurs</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">xsd:all</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">xsd:attribute</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xsd:string&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;required&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">xsd:complexType</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">xsd:element</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">xsd:schema</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">xsd:schema</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/sharding&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">xmlns:xsd</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">xmlns:beans</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">xmlns:encrypt</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">targetNamespace</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/sharding&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">elementFormDefault</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;qualified&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns:xsi</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">xsi:schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">xsd:import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">xsd:import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">xsd:element</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;data-source&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">xsd:complexType</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">xsd:all</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">xsd:element</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;sharding-rule&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">xsd:element</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;props&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minOccurs</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">xsd:all</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">xsd:attribute</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xsd:string&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;required&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">xsd:complexType</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">xsd:element</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">xsd:schema</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>可以看到对于&quot;data-source&quot;这个 element 而言，包含了&quot;sharding-rule&quot;和&quot;props&quot;这两个子 element，其中&quot;props&quot;不是必需的。同时，&quot;data-source&quot;还可以包含一个&quot;id&quot;属性，而这个属性则是必填的，我们在前面的配置示例中已经看到了这一点。而对于&quot;sharding-rule&quot;而言，则可以有很多内嵌的属性，sharding.xsd 文件中对这些属性都做了定义。</p><p>同时，我们应该注意到的是，sharding.xsd 中通过使用 xsd:import 标签还引入了两个 namespace，一个是 Spring 中的<a href="http://www.springframework.org/schema/beans" target="_blank" rel="noreferrer">http://www.springframework.org/schema/beans</a>，另一个则是 ShardingSphere 自身的<a href="http://shardingsphere.apache.org/schema/shardingsphere/encrypt%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BD%8D%E4%BA%8E%E4%B8%8E" target="_blank" rel="noreferrer">http://shardingsphere.apache.org/schema/shardingsphere/encrypt，这个命名空间的定义位于与</a> <a href="http://shardingsphere.apache.org/schema/shardingsphere/encrypt" target="_blank" rel="noreferrer">sharding.xsd 同目录下的 encrypt.xsd</a><a href="http://shardingsphere.apache.org/schema/shardingsphere/encrypt" target="_blank" rel="noreferrer">文件中</a>。</p><p>有了业务对象类，以及 XSD 文件的定义，接下来我们就来看看 NamespaceHandler 实现类 ShardingNamespaceHandler，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingNamespaceHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamespaceHandlerSupport</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">registerBeanDefinitionParser</span><span style="color:#E1E4E8;">(ShardingDataSourceBeanDefinitionParserTag.ROOT_TAG, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingDataSourceBeanDefinitionParser</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">registerBeanDefinitionParser</span><span style="color:#E1E4E8;">(ShardingStrategyBeanDefinitionParserTag.STANDARD_STRATEGY_ROOT_TAG, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStrategyBeanDefinitionParser</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingNamespaceHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamespaceHandlerSupport</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">registerBeanDefinitionParser</span><span style="color:#24292E;">(ShardingDataSourceBeanDefinitionParserTag.ROOT_TAG, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingDataSourceBeanDefinitionParser</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">registerBeanDefinitionParser</span><span style="color:#24292E;">(ShardingStrategyBeanDefinitionParserTag.STANDARD_STRATEGY_ROOT_TAG, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStrategyBeanDefinitionParser</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里也是直接使用了 registerBeanDefinitionParser 方法来完成标签项与具体的 BeanDefinitionParser 类之间的对应关系。我们来看这里的 ShardingDataSourceBeanDefinitionParser，其核心的 parseInternal 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> AbstractBeanDefinition </span><span style="color:#B392F0;">parseInternal</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Element element, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParserContext parserContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//构建针对 SpringShardingDataSource 的 BeanDefinitionBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">        BeanDefinitionBuilder factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BeanDefinitionBuilder.</span><span style="color:#B392F0;">rootBeanDefinition</span><span style="color:#E1E4E8;">(SpringShardingDataSource.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//解析构造函数中的 DataSource 参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        factory.</span><span style="color:#B392F0;">addConstructorArgValue</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseDataSources</span><span style="color:#E1E4E8;">(element));</span></span>
<span class="line"><span style="color:#6A737D;">//解析构造函数中 ShardingRuleConfiguration 参数        factory.addConstructorArgValue(parseShardingRuleConfiguration(element));</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//解析构造函数中 Properties 参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        factory.</span><span style="color:#B392F0;">addConstructorArgValue</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseProperties</span><span style="color:#E1E4E8;">(element, parserContext));</span></span>
<span class="line"><span style="color:#E1E4E8;">        factory.</span><span style="color:#B392F0;">setDestroyMethodName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">getBeanDefinition</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> AbstractBeanDefinition </span><span style="color:#6F42C1;">parseInternal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Element element, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParserContext parserContext) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//构建针对 SpringShardingDataSource 的 BeanDefinitionBuilder</span></span>
<span class="line"><span style="color:#24292E;">        BeanDefinitionBuilder factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BeanDefinitionBuilder.</span><span style="color:#6F42C1;">rootBeanDefinition</span><span style="color:#24292E;">(SpringShardingDataSource.class);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//解析构造函数中的 DataSource 参数</span></span>
<span class="line"><span style="color:#24292E;">        factory.</span><span style="color:#6F42C1;">addConstructorArgValue</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseDataSources</span><span style="color:#24292E;">(element));</span></span>
<span class="line"><span style="color:#6A737D;">//解析构造函数中 ShardingRuleConfiguration 参数        factory.addConstructorArgValue(parseShardingRuleConfiguration(element));</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//解析构造函数中 Properties 参数</span></span>
<span class="line"><span style="color:#24292E;">        factory.</span><span style="color:#6F42C1;">addConstructorArgValue</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseProperties</span><span style="color:#24292E;">(element, parserContext));</span></span>
<span class="line"><span style="color:#24292E;">        factory.</span><span style="color:#6F42C1;">setDestroyMethodName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">getBeanDefinition</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，我们自己定义了一个 BeanDefinitionBuilder 并将其绑定到前面定义的业务对象类 SpringShardingDataSource。然后，我们通过三个 addConstructorArgValue 方法的调用，分别为 SpringShardingDataSource 构造函数中所需的 dataSourceMap、shardingRuleConfiguration 以及 props 参数进行赋值。</p><p>我们再来进一步看一下上述方法中的 parseDataSources 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, RuntimeBeanReference</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseDataSources</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Element element) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Element shardingRuleElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DomUtils.</span><span style="color:#B392F0;">getChildElementByTagName</span><span style="color:#E1E4E8;">(element, ShardingDataSourceBeanDefinitionParserTag.SHARDING_RULE_CONFIG_TAG);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; dataSources </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Splitter.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">trimResults</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">splitToList</span><span style="color:#E1E4E8;">(shardingRuleElement.</span><span style="color:#B392F0;">getAttribute</span><span style="color:#E1E4E8;">(ShardingDataSourceBeanDefinitionParserTag.DATA_SOURCE_NAMES_TAG));</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">RuntimeBeanReference</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ManagedMap&lt;&gt;(dataSources.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dataSources) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(each, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeBeanReference</span><span style="color:#E1E4E8;">(each));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, RuntimeBeanReference</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseDataSources</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Element element) {</span></span>
<span class="line"><span style="color:#24292E;">        Element shardingRuleElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DomUtils.</span><span style="color:#6F42C1;">getChildElementByTagName</span><span style="color:#24292E;">(element, ShardingDataSourceBeanDefinitionParserTag.SHARDING_RULE_CONFIG_TAG);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; dataSources </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Splitter.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">trimResults</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">splitToList</span><span style="color:#24292E;">(shardingRuleElement.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(ShardingDataSourceBeanDefinitionParserTag.DATA_SOURCE_NAMES_TAG));</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">RuntimeBeanReference</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ManagedMap&lt;&gt;(dataSources.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dataSources) {</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(each, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeBeanReference</span><span style="color:#24292E;">(each));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>基于前面介绍的配置示例，我们理解这段代码的作用是获取所配置的&quot;ds0,ds1&quot;字符串，并对其进行拆分，然后基于每个代表具体 DataSource 的名称构建 RuntimeBeanReference 对象并进行返回，这样就可以把在 Spring 容器中定义的其他 Bean 加载到 BeanDefinitionBuilder 中。</p><p>关于 ShardingDataSourceBeanDefinitionParser 中其他 parse 方法的使用，大家可以通过阅读对应的代码进行理解，处理方式都是非常类似的，就不再重复展开。</p><p>最后，我们需要在 META-INF 目录下提供spring.schemas 文件，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http\\://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd=META-INF/namespace/sharding.xsd</span></span>
<span class="line"><span style="color:#E1E4E8;">http\\://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd=META-INF/namespace/master-slave.xsd</span></span>
<span class="line"><span style="color:#E1E4E8;">http\\://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd=META-INF/namespace/encrypt.xsd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http\\://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd=META-INF/namespace/sharding.xsd</span></span>
<span class="line"><span style="color:#24292E;">http\\://shardingsphere.apache.org/schema/shardingsphere/masterslave/master-slave.xsd=META-INF/namespace/master-slave.xsd</span></span>
<span class="line"><span style="color:#24292E;">http\\://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd=META-INF/namespace/encrypt.xsd</span></span></code></pre></div><p>同样，spring.handlers 的内容如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http\\://shardingsphere.apache.org/schema/shardingsphere/sharding=org.apache.shardingsphere.shardingjdbc.spring.namespace.handler.ShardingNamespaceHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">http\\://shardingsphere.apache.org/schema/shardingsphere/masterslave=org.apache.shardingsphere.shardingjdbc.spring.namespace.handler.MasterSlaveNamespaceHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">http\\://shardingsphere.apache.org/schema/shardingsphere/encrypt=org.apache.shardingsphere.shardingjdbc.spring.namespace.handler.EncryptNamespaceHandler</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http\\://shardingsphere.apache.org/schema/shardingsphere/sharding=org.apache.shardingsphere.shardingjdbc.spring.namespace.handler.ShardingNamespaceHandler</span></span>
<span class="line"><span style="color:#24292E;">http\\://shardingsphere.apache.org/schema/shardingsphere/masterslave=org.apache.shardingsphere.shardingjdbc.spring.namespace.handler.MasterSlaveNamespaceHandler</span></span>
<span class="line"><span style="color:#24292E;">http\\://shardingsphere.apache.org/schema/shardingsphere/encrypt=org.apache.shardingsphere.shardingjdbc.spring.namespace.handler.EncryptNamespaceHandler</span></span></code></pre></div><p>至此，我们对 ShardingSphere 中基于命名空间机制与 Spring 进行系统集成的实现过程介绍完毕。</p><p>接下来，我们来看 ShardingSphere 中实现一个自定义 spring-boot-starter 的过程。</p><h3 id="基于自定义-starter-集成-spring-boot" tabindex="-1">基于自定义 starter 集成 Spring Boot <a class="header-anchor" href="#基于自定义-starter-集成-spring-boot" aria-label="Permalink to &quot;基于自定义 starter 集成 Spring Boot&quot;">​</a></h3><p>与基于命名空间的实现方式一样，ShardingSphere 提供了 sharding-jdbc-spring-boot-starter 和 sharding-jdbc-orchestration-spring-boot-starter 这两个 starter 工程。篇幅关系，我们同样只关注于 sharding-jdbc-spring-boot-starter 工程。</p><p>对于 Spring Boot 工程，我们首先来关注 META-INF 文件夹下的 spring.factories 文件。Spring Boot 中提供了一个 SpringFactoriesLoader 类，该类的运行机制类似于 <strong>&quot;13 | 微内核架构：ShardingSphere如何实现系统的扩展性？&quot;</strong> 中所介绍的 SPI 机制，只不过以服务接口命名的文件是放在 META-INF/spring.factories 文件夹下，对应的 Key 为 EnableAutoConfiguration。SpringFactoriesLoader 会查找所有 META-INF/spring.factories 目录下的配置文件，并把 Key 为 EnableAutoConfiguration 所对应的配置项通过反射实例化为配置类并加载到容器。在 sharding-jdbc-spring-boot-starter 工程中，该文件内容如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span></span>
<span class="line"><span style="color:#24292E;">org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration</span></span></code></pre></div><p>现在这里的 EnableAutoConfiguration 配置项指向了 SpringBootConfiguration 类。也就是说，这个类在 Spring Boot 启动过程中都能够通过 SpringFactoriesLoader 被加载到运行时环境中。</p><h4 id="_1-springbootconfiguration-中的注解" tabindex="-1">1.SpringBootConfiguration 中的注解 <a class="header-anchor" href="#_1-springbootconfiguration-中的注解" aria-label="Permalink to &quot;1.SpringBootConfiguration 中的注解&quot;">​</a></h4><p>接下来，我们就来到这个 SpringBootConfiguration，首先关注于加在该类上的各种注解，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ComponentScan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.apache.shardingsphere.spring.boot.converter&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringBootShardingRuleConfigurationProperties.class, </span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringBootMasterSlaveRuleConfigurationProperties.class, SpringBootEncryptRuleConfigurationProperties.class, SpringBootPropertiesConfigurationProperties.class})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.shardingsphere&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;enabled&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">havingValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureBefore</span><span style="color:#E1E4E8;">(DataSourceAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringBootConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnvironmentAware</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.apache.shardingsphere.spring.boot.converter&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        SpringBootShardingRuleConfigurationProperties.class, </span></span>
<span class="line"><span style="color:#24292E;">        SpringBootMasterSlaveRuleConfigurationProperties.class, SpringBootEncryptRuleConfigurationProperties.class, SpringBootPropertiesConfigurationProperties.class})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.shardingsphere&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;enabled&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">havingValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureBefore</span><span style="color:#24292E;">(DataSourceAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringBootConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnvironmentAware</span></span></code></pre></div><p>首先，我们看到了一个 @Configuration 注解。这个注解不是 Spring Boot 引入的新注解，而是属于 Spring 容器管理的内容。该注解表明这个类是一个配置类，可以启动组件扫描，用来将带有 @Bean 注解的实体进行实例化 bean。</p><p>然后，我们又看到了一个同样属于 Spring 容器管理范畴的老注解，即 @ComponentScan 注解。@ComponentScan 注解就是扫描基于 @Component 等注解所标注的类所在包下的所有需要注入的类，并把相关 Bean 定义批量加载到IoC容器中。</p><p>显然，Spring Boot 应用程序中同样需要这个功能。注意到，这里需要进行扫描的包路径位于另一个代码工程 sharding-spring-boot-util 的 org.apache.shardingsphere.spring.boot.converter 包中。</p><p>然后，我们看到了一个 @EnableConfigurationProperties 注解，该注解的作用就是使添加了 @ConfigurationProperties 注解的类生效。在 Spring Boot 中，如果一个类只使用了 @ConfigurationProperties 注解，然后该类没有在扫描路径下或者没有使用 @Component 等注解，就会导致无法被扫描为 bean，那么就必须在配置类上使用 @EnableConfigurationProperties 注解去指定这个类，才能使 @ConfigurationProperties 生效，并作为一个 bean 添加进 spring 容器中。这里的 @EnableConfigurationProperties 注解包含了四个具体的 ConfigurationProperties。以 SpringBootShardingRuleConfigurationProperties 为例，该类的定义如下所示，可以看到，这里直接继承了 sharding-core-common 代码工程中的 YamlShardingRuleConfiguration：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.shardingsphere.sharding&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringBootShardingRuleConfigurationProperties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YamlShardingRuleConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.shardingsphere.sharding&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringBootShardingRuleConfigurationProperties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YamlShardingRuleConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SpringBootConfiguration 上的下一个注解是 @ConditionalOnProperty，该注解的作用在于只有当所提供的属性属于 true 时才会实例化 Bean。</p><p>最后一个与自动加载相关的注解是 @AutoConfigureBefore，如果该注解用在类名上，其作用是标识在加载当前类之前需要加载注解中所设置的配置类。基于这一点，我们明确在加载 SpringBootConfiguration 类之前，Spring Boot 会先加载 DataSourceAutoConfiguration。这一步的作用与我们后面要看到的创建各种 DataSource 相关。</p><h4 id="_2-springbootconfiguration-中的功能" tabindex="-1">2.SpringBootConfiguration 中的功能 <a class="header-anchor" href="#_2-springbootconfiguration-中的功能" aria-label="Permalink to &quot;2.SpringBootConfiguration 中的功能&quot;">​</a></h4><p>介绍完这些注解之后，我们来看一下 SpringBootConfiguration 类所提供的功能。</p><p>我们知道对于 ShardingSphere 而言，其对外的入口实际上就是各种 DataSource，因此 SpringBootConfiguration 中提供了一批创建不同 DataSource 的入口方法，例如如下所示的 shardingDataSource 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Conditional</span><span style="color:#E1E4E8;">(ShardingRuleCondition.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">shardingDataSource</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ShardingDataSourceFactory.</span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(dataSourceMap, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingRuleConfigurationYamlSwapper</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(shardingRule), props.</span><span style="color:#B392F0;">getProps</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Conditional</span><span style="color:#24292E;">(ShardingRuleCondition.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">shardingDataSource</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ShardingDataSourceFactory.</span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(dataSourceMap, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingRuleConfigurationYamlSwapper</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(shardingRule), props.</span><span style="color:#6F42C1;">getProps</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法上添加了两个注解，一个是常见的 @Bean，另一个则是 @Conditional 注解，该注解的作用是只有满足指定条件的情况下才能加载这个 Bean。我们看到 @Conditional 注解中设置了一个 ShardingRuleCondition，该类如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingRuleCondition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringBootCondition</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ConditionOutcome </span><span style="color:#B392F0;">getMatchOutcome</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConditionContext </span><span style="color:#FFAB70;">conditionContext</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AnnotatedTypeMetadata </span><span style="color:#FFAB70;">annotatedTypeMetadata</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isMasterSlaveRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveRuleCondition</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMatchOutcome</span><span style="color:#E1E4E8;">(conditionContext, annotatedTypeMetadata).</span><span style="color:#B392F0;">isMatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isEncryptRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptRuleCondition</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMatchOutcome</span><span style="color:#E1E4E8;">(conditionContext, annotatedTypeMetadata).</span><span style="color:#B392F0;">isMatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> isMasterSlaveRule </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> isEncryptRule </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> ConditionOutcome.</span><span style="color:#B392F0;">noMatch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Have found master-slave or encrypt rule in environment&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ConditionOutcome.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingRuleCondition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringBootCondition</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConditionOutcome </span><span style="color:#6F42C1;">getMatchOutcome</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConditionContext </span><span style="color:#E36209;">conditionContext</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AnnotatedTypeMetadata </span><span style="color:#E36209;">annotatedTypeMetadata</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isMasterSlaveRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveRuleCondition</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMatchOutcome</span><span style="color:#24292E;">(conditionContext, annotatedTypeMetadata).</span><span style="color:#6F42C1;">isMatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isEncryptRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptRuleCondition</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMatchOutcome</span><span style="color:#24292E;">(conditionContext, annotatedTypeMetadata).</span><span style="color:#6F42C1;">isMatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> isMasterSlaveRule </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> isEncryptRule </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ConditionOutcome.</span><span style="color:#6F42C1;">noMatch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Have found master-slave or encrypt rule in environment&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ConditionOutcome.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 ShardingRuleCondition 是一个标准的 SpringBootCondition，实现了 getMatchOutcome 抽象方法。我们知道 SpringBootCondition 的作用就是代表一种用于注册类或加载 Bean 的条件。ShardingRuleCondition 类的实现上分别调用了 MasterSlaveRuleCondition 和 EncryptRuleCondition 来判断是否满足这两个 SpringBootCondition。显然，对于 ShardingRuleCondition 而言，只有在两个条件都不满足的情况下才应该被加载。对于 masterSlaveDataSource 和 encryptDataSource 这两个方法而言，处理逻辑也类似，不做赘述。</p><p>最后，我们注意到 SpringBootConfiguration 还实现了 Spring 的 EnvironmentAware 接口。在 Spring Boot 中，当一个类实现了 EnvironmentAware 接口并重写了其中的 setEnvironment 方法之后，在代码工程启动时就可以获得 application.properties 配置文件中各个配置项的属性值。SpringBootConfiguration 中所重写的 setEnvironment 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setEnvironment</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Environment environment) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String prefix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.shardingsphere.datasource.&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDataSourceNames</span><span style="color:#E1E4E8;">(environment, prefix)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                dataSourceMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(each, </span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">(environment, prefix, each));</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ReflectiveOperationException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can&#39;t find datasource type!&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> NamingException </span><span style="color:#FFAB70;">namingEx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can&#39;t find JNDI datasource!&quot;</span><span style="color:#E1E4E8;">, namingEx);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setEnvironment</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Environment environment) {</span></span>
<span class="line"><span style="color:#24292E;">        String prefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.shardingsphere.datasource.&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDataSourceNames</span><span style="color:#24292E;">(environment, prefix)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                dataSourceMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(each, </span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(environment, prefix, each));</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ReflectiveOperationException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Can&#39;t find datasource type!&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> NamingException </span><span style="color:#E36209;">namingEx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Can&#39;t find JNDI datasource!&quot;</span><span style="color:#24292E;">, namingEx);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的代码逻辑是获取&quot;spring.shardingsphere.datasource.name&quot;或&quot;spring.shardingsphere.datasource.names&quot;配置项，然后根据该配置项中所指定的 DataSource 信息构建新的 DataSource 并加载到 dataSourceMap 这个 LinkedHashMap。这点我们可以结合课程案例中的配置项来加深理解：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds0,ds1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost/ds0</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost/ds1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds0,ds1</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost/ds0</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost/ds1</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span></code></pre></div><p>至此，整个 SpringBootConfiguration 的实现过程介绍完毕。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>今天所介绍的关于 ShardingSphere 集成 Spring 的实现方法可以直接导入到日常开发过程中。如果我们需要实现一个自定义的框架或工具类，从面向开发人员的角度讲，最好能与 Spring 等主流的开发框架进行集成，以便提供最低的学习和维护成本。与 Spring 框架的集成过程都有固定的开发步骤，我们按照今天课时中所介绍的内容，就可以模仿 ShardingSphere 中的做法自己实现这些步骤。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本课时是 ShardingSphere 源码解析的最后一部分内容，我们围绕如何集成 Spring 框架这一主题对 ShardingSphere 的具体实现方法做了展开。ShardingSphere 在这方面提供了一种可以直接进行参考的模版式的实现方法，包括基于命名空间的 Spring 集成以及基于 starter的Spring Boot 集成方法。</p><p>这里给你留一道思考题：在 ShardingSphere 集成 Spring Boot 时，SpringBootConfiguration 类上的注解有哪些，分别起到了什么作用？</p><p>讲完 ShardingSphere 源码解析部分内容之后，下一课时是整个课程的最后一讲，我们将对 ShardingSphere 进行总结，并对它的后续发展进行展望。</p><p><a href="https://wj.qq.com/s2/7238084/d702/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品~</a></p>`,64);function E(y,g,d,h,u,F){const a=p("Image");return o(),l("div",null,[c,e(a,{alt:"image (10).png",src:"https://s0.lgstatic.com/i/image/M00/5A/27/Ciqc1F90KhSANChgAACMwNPdi-8838.png"}),r(),i])}const C=n(t,[["render",E]]);export{m as __pageData,C as default};
