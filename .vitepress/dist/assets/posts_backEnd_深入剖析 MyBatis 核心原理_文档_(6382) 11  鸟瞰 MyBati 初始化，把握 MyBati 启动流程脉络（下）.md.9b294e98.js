import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const g=JSON.parse('{"title":"Mapper.xml 映射文件解析全流程 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6382) 11  鸟瞰 MyBati 初始化，把握 MyBati 启动流程脉络（下）.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6382) 11  鸟瞰 MyBati 初始化，把握 MyBati 启动流程脉络（下）.md","lastUpdated":null}'),p={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6382) 11  鸟瞰 MyBati 初始化，把握 MyBati 启动流程脉络（下）.md"},e=l(`<p>在上一讲，我们深入分析了MyBatis 初始化过程中对 mybatis-config.xml 全局配置文件的解析，详细介绍了其中每个标签的解析流程以及涉及的经典设计模式------构造者模式。这一讲我们就紧接着上一讲的内容，继续介绍 MyBatis 初始化流程，重点介绍Mapper.xml 配置文件的解析以及 SQL 语句的处理逻辑。</p><h3 id="mapper-xml-映射文件解析全流程" tabindex="-1">Mapper.xml 映射文件解析全流程 <a class="header-anchor" href="#mapper-xml-映射文件解析全流程" aria-label="Permalink to &quot;Mapper.xml 映射文件解析全流程&quot;">​</a></h3><p>在上一讲分析 mybatis-config.xml 配置文件解析流程的时候我们看到，在 mybatis-config.xml 配置文件中可以定义多个 <code>&lt;mapper&gt;</code> 标签指定 Mapper 配置文件的地址，<strong>MyBatis 会为每个 Mapper.xml 映射文件创建一个 XMLMapperBuilder 实例完成解析</strong>。</p><p>与 XMLConfigBuilder 类似，XMLMapperBuilder也是具体构造者的角色，继承了 BaseBuilder 这个抽象类，解析 Mapper.xml 映射文件的入口是 XMLMapperBuilder.parse() 方法，其核心步骤如下：</p><ul><li><p>执行 configurationElement() 方法解析整个Mapper.xml 映射文件的内容；</p></li><li><p>获取当前 Mapper.xml 映射文件指定的 Mapper 接口，并进行注册；</p></li><li><p>处理 configurationElement() 方法中解析失败的 <code>&lt;resultMap&gt;</code> 标签；</p></li><li><p>处理 configurationElement() 方法中解析失败的 <code>&lt;cache-ref&gt;</code> 标签；</p></li><li><p>处理 configurationElement() 方法中解析失败的SQL 语句标签。</p></li></ul><p>可以清晰地看到，<strong>configurationElement() 方法才是真正解析 Mapper.xml 映射文件的地方</strong>，其中定义了处理 Mapper.xml 映射文件的核心流程：</p><ul><li><p>获取 <code>&lt;mapper&gt;</code> 标签中的 namespace 属性，同时会进行多种边界检查；</p></li><li><p>解析 <code>&lt;cache&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;cache-ref&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;resultMap&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;sql&gt;</code> 标签；</p></li><li><p>解析 <code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code> 等 SQL 标签。</p></li></ul><p>下面我们就按照顺序逐一介绍这些方法的核心实现。</p><h4 id="_1-处理-cache-标签" tabindex="-1">1. 处理 <code>&lt;cache&gt;</code> 标签 <a class="header-anchor" href="#_1-处理-cache-标签" aria-label="Permalink to &quot;1. 处理 \`&lt;cache&gt;\` 标签&quot;">​</a></h4><p>我们知道 Cache 接口及其实现是MyBatis 一级缓存和二级缓存的基础，其中，一级缓存是默认开启的，而二级缓存默认情况下并没有开启，如有需要，<strong>可以通过<code>&lt;cache&gt;</code>标签为指定的namespace 开启二级缓存</strong>。</p><p>XMLMapperBuilder 中解析 <code>&lt;cache&gt;</code> 标签的<strong>核心逻辑位于 cacheElement() 方法</strong>之中，其具体步骤如下：</p><ul><li><p>获取 <code>&lt;cache&gt;</code> 标签中的各项属性（type、flushInterval、size 等属性）；</p></li><li><p>读取 <code>&lt;cache&gt;</code> 标签下的子标签信息，这些信息将用于初始化二级缓存；</p></li><li><p>MapperBuilderAssistant 会根据上述配置信息，创建一个全新的Cache 对象并添加到 Configuration.caches 集合中保存。</p></li></ul><p>也就是说，解析 <code>&lt;cache&gt;</code> 标签得到的所有信息将会传给 MapperBuilderAssistant 完成 Cache 对象的创建，创建好的Cache 对象会添加到 Configuration.caches 集合中，<strong>这个 caches 字段是一个StrictMap<code>&lt;Cache&gt;</code> 类型的集合</strong>，其中的 Key是Cache 对象的唯一标识，默认值是Mapper.xml 映射文件的namespace，Value 才是真正的二级缓存对应的 Cache 对象。</p><p>这里我们简单介绍一下 StrictMap的特性。</p><p>StrictMap 继承了 HashMap，并且覆盖了 HashMap 的一些行为，例如，相较于 HashMap 的 put() 方法，StrictMap 的 put() 方法有如下几点不同：</p><ul><li><p>如果检测到重复 Key 的写入，会直接抛出异常；</p></li><li><p>在没有重复 Key的情况下，会正常写入 KV 数据，与此同时，还会根据 Key产生一个 shortKey，shortKey 与完整 Key 指向同一个 Value 值；</p></li><li><p>如果 shortKey 已经存在，则将 value 修改成 Ambiguity 对象，Ambiguity 对象表示这个 shortKey 存在二义性，后续通过 StrictMap的get() 方法获取该 shortKey 的时候，会抛出异常。</p></li></ul><p>了解了 StrictMap 这个集合类的特性之后，我们回到MapperBuilderAssistant 这个类继续分析，在它的 useNewCache() 方法中，会根据前面解析得到的配置信息，通过 CacheBuilder 创建 Cache 对象。</p><p>通过名字你就能猜测到 CacheBuilder 是 Cache 的构造者，<strong>CacheBuilder 中最核心的方法是build() 方法，其中会根据传入的配置信息创建底层存储数据的 Cache 对象以及相关的 Cache 装饰器</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Cache </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将implementation默认值设置为PerpetualCache，在decorators集合中默认添加LruCache装饰器，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 都是在setDefaultImplementations()方法中完成的</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setDefaultImplementations</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过反射，初始化implementation指定类型的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Cache cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newBaseCacheInstance</span><span style="color:#E1E4E8;">(implementation, id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建Cache关联的MetaObject对象，并根据properties设置Cache中的各个字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setCacheProperties</span><span style="color:#E1E4E8;">(cache);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据上面创建的Cache对象类型，决定是否添加装饰器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (PerpetualCache.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(cache.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是PerpetualCache类型，则为其添加decorators集合中指定的装饰器</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Cache</span><span style="color:#E1E4E8;">&gt; decorator </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> decorators) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 通过反射创建Cache装饰器</span></span>
<span class="line"><span style="color:#E1E4E8;">            cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newCacheDecoratorInstance</span><span style="color:#E1E4E8;">(decorator, cache);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 依赖MetaObject将properties中配置信息设置到Cache的各个属性中，同时调用Cache的initialize()方法完成初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">setCacheProperties</span><span style="color:#E1E4E8;">(cache);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据readWrite、blocking、clearInterval等配置，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加SerializedCache、ScheduledCache等装饰器</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setStandardDecorators</span><span style="color:#E1E4E8;">(cache);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">LoggingCache.class.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(cache.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果不是PerpetualCache类型，就是其他自定义类型的Cache，则添加一个LoggingCache装饰器</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoggingCache</span><span style="color:#E1E4E8;">(cache);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cache;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Cache </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将implementation默认值设置为PerpetualCache，在decorators集合中默认添加LruCache装饰器，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 都是在setDefaultImplementations()方法中完成的</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setDefaultImplementations</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过反射，初始化implementation指定类型的对象</span></span>
<span class="line"><span style="color:#24292E;">    Cache cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newBaseCacheInstance</span><span style="color:#24292E;">(implementation, id);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建Cache关联的MetaObject对象，并根据properties设置Cache中的各个字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setCacheProperties</span><span style="color:#24292E;">(cache);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据上面创建的Cache对象类型，决定是否添加装饰器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (PerpetualCache.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(cache.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是PerpetualCache类型，则为其添加decorators集合中指定的装饰器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Cache</span><span style="color:#24292E;">&gt; decorator </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> decorators) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 通过反射创建Cache装饰器</span></span>
<span class="line"><span style="color:#24292E;">            cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newCacheDecoratorInstance</span><span style="color:#24292E;">(decorator, cache);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 依赖MetaObject将properties中配置信息设置到Cache的各个属性中，同时调用Cache的initialize()方法完成初始化</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">setCacheProperties</span><span style="color:#24292E;">(cache);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据readWrite、blocking、clearInterval等配置，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加SerializedCache、ScheduledCache等装饰器</span></span>
<span class="line"><span style="color:#24292E;">        cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setStandardDecorators</span><span style="color:#24292E;">(cache);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">LoggingCache.class.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(cache.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不是PerpetualCache类型，就是其他自定义类型的Cache，则添加一个LoggingCache装饰器</span></span>
<span class="line"><span style="color:#24292E;">        cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoggingCache</span><span style="color:#24292E;">(cache);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cache;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_2-处理-cache-ref-标签" tabindex="-1">2. 处理<code>&lt;cache-ref&gt;</code>标签 <a class="header-anchor" href="#_2-处理-cache-ref-标签" aria-label="Permalink to &quot;2. 处理\`&lt;cache-ref&gt;\`标签&quot;">​</a></h4><p>通过上述介绍我们知道，可以通过 <code>&lt;cache&gt;</code> 标签为每个 namespace 开启二级缓存，同时还会将 namespace 与关联的二级缓存 Cache对象记录到 Configuration.caches 集合中，也就是说二级缓存是 namespace 级别的。但是，在有的场景中，我们会需要在多个 namespace 共享同一个二级缓存，也就是<strong>共享同一个 Cache 对象</strong>。</p><p>为了解决这个需求，MyBatis提供了 <code>&lt;cache-ref&gt; </code> 标签来引用另一个 namespace 的二级缓存。cacheRefElement() 方法是处理 <code>&lt;cache-ref&gt;</code> 标签的核心逻辑所在，在 Configuration 中维护了一个 cacheRefMap 字段（HashMap&lt;String,String&gt; 类型），其中的 Key 是 <code>&lt;cache-ref&gt;</code> 标签所属的namespace 标识，Value 值是 <code>&lt;cache-ref&gt;</code> 标签引用的 namespace 值，这样的话，就可以将两个namespace 关联起来了，即这两个 namespace 共用一个 Cache对象。</p><p>这里会使用到一个叫 CacheRefResolver 的 Cache 引用解析器。<strong>CacheRefResolver 中记录了被引用的 namespace以及当前 namespace 关联的MapperBuilderAssistant 对象</strong> 。前面在解析 <code>&lt;cache&gt;</code>标签的时候我们介绍过，MapperBuilderAssistant 会在 useNewCache() 方法中通过 CacheBuilder 创建新的 Cache 对象，并记录到 currentCache 字段。而这里解析 <code>&lt;cache-ref&gt;</code> 标签的时候，MapperBuilderAssistant 会通过 useCacheRef() 方法从 Configuration.caches 集合中，根据被引用的namespace 查找共享的 Cache 对象来初始化 currentCache，而不再创建新的Cache 对象，从而实现二级缓存的共享。</p><h4 id="_3-处理-resultmap-标签" tabindex="-1">3. 处理<code>&lt;resultMap&gt;</code>标签 <a class="header-anchor" href="#_3-处理-resultmap-标签" aria-label="Permalink to &quot;3. 处理\`&lt;resultMap&gt;\`标签&quot;">​</a></h4><p>有关系型数据库使用经验的同学应该知道，select 语句执行得到的结果集实际上是一张二维表，而 Java 是一门面向对象的程序设计语言，在使用 JDBC 的时候，我们需要手动写代码将select 语句的结果集转换成 Java 对象，这是一项重复性很大的操作。</p><p><strong>为了将 Java 开发者从这种重复性的工作中解脱出来，MyBatis 提供了 <code>&lt;resultMap&gt;</code> 标签来定义结果集与 Java 对象之间的映射规则。</strong></p><p>首先，<code>&lt;resultMap&gt;</code> 标签下的每一个子标签，例如，<code>&lt;column&gt;</code>、<code>&lt;id&gt;</code> 等，都被解析一个 ResultMapping 对象，其中维护了数据库表中一个列与对应 Java 类中一个属性之间的映射关系。</p><p>下面是 ResultMapping 中核心字段的含义。</p><ul><li><p>column（String 类型）：当前标签中指定的 column 属性值，指向的是数据库表中的一个列名（或是别名）。</p></li><li><p>property（String 类型）：当前标签中指定的 property 属性值，指向的是与 column 列对应的属性名称。</p></li><li><p>javaType（Class&lt;?&gt; 类型）、jdbcType（JdbcType 类型）：当前标签指定的 javaType 属性值和 jdbcType 属性值，指定了 property 字段的 Java 类型以及对应列的 JDBC 类型。</p></li><li><p>typeHandler（TypeHandler&lt;?&gt; 类型）：当前标签的 typeHandler 属性值，这里指定的 TypeHandler 会覆盖默认的类型处理器。</p></li><li><p>nestedResultMapId（String类型）：当前标签的 resultMap 属性值，通过该属性我们可以引用另一个 <code>&lt;resultMap&gt;</code> 标签的id，然后由这个被引用的<code>&lt;resultMap&gt;</code> 标签映射结果集中的一部分列。这样，我们就可以将一个查询结果集映射成多个对象，同时确定这些对象之间的关联关系。</p></li><li><p>nestedQueryId（String 类型）：当前标签的select 属性，我们可以通过该属性引用另一个 <code>&lt;select&gt;</code> 标签中的select 语句定义，它会将当前列的值作为参数传入这个 select 语句。由于当前结果集可能查询出多行数据，那么可能就会导致 select 属性指定的 SQL 语句会执行多次，也就是著名的 N+1 问题。</p></li><li><p>columnPrefix（String 类型）：当前标签的 columnPrefix 属性值，记录了表中列名的公共前缀。</p></li><li><p>resultSet（String 类型）：当前标签的 resultSet 属性值。</p></li><li><p>lazy（boolean 类型）：当前标签的fetchType 属性，表示是否延迟加载当前标签对应的列。</p></li></ul><p>介绍完 ResultMapping 对象（即<code>&lt;resultMap&gt;</code> 标签下各个子标签的解析结果）之后，我们再来看<code>&lt;resultMap&gt;</code> 标签如何被解析。整个 <code>&lt;resultMap&gt;</code> 标签最终会被解析成 ResultMap 对象，它与 ResultMapping 之间的映射关系如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M00/0D/AC/CioPOWA7kqSASvnUAAPk5cQ7q3c025.png" alt="图片1.png"><br> ResultMap 结构图</p><p>通过上图我们可以看出，ResultMap 中有四个集合与 ResultMapping 紧密相连。</p><ul><li><p>resultMappings 集合，维护了整个<code>&lt;resultMap&gt;</code> 标签解析之后得到的全部映射关系，也就是全部 ResultMapping 对象。</p></li><li><p>idResultMappings 集合，维护了与唯一标识相关的映射，例如，<code>&lt;id&gt;</code> 标签、<code>&lt;constructor&gt;</code> 标签下的 <code>&lt;idArg&gt;</code> 子标签解析得到的 ResultMapping 对象。如果没有定义 <code>&lt;id&gt;</code> 等唯一性标签，则由 resultMappings 集合中全部映射关系来确定一条记录的唯一性，即 idResultMappings 集合与 resulMappings 集合相同。</p></li><li><p>constructorResultMappings 集合，维护了 <code>&lt;constructor&gt;</code> 标签下全部子标签定义的映射关系。</p></li><li><p>propertyResultMappings 集合，维护了不带 Constructor 标志的映射关系。</p></li></ul><p>除了上述四个 ResultMapping 集合，ResultMap 中还维护了下列核心字段。</p><ul><li><p>id（String 类型）：当前 <code>&lt;resultMap&gt;</code> 标签的 id 属性值。</p></li><li><p>type（Class 类型）：当前 <code>&lt;resultMap&gt;</code> 的 type 属性值。</p></li><li><p>mappedColumns（Set<code>&lt;String&gt;</code> 类型）：维护了所有映射关系中涉及的 column 属性值，也就是所有的列名（或别名）。</p></li><li><p>hasNestedResultMaps（boolean 类型）：当前 <code>&lt;resultMap&gt;</code> 标签是否嵌套了其他 <code>&lt;resultMap&gt;</code> 标签，即这个映射关系中指定了 resultMap属性，且未指定 resultSet 属性。</p></li><li><p>hasNestedQueries（boolean 类型）：当前 <code>&lt;resultMap&gt;</code> 标签是否含有嵌套查询。也就是说，这个映射关系中是否指定了 select 属性。</p></li><li><p>autoMapping（Boolean 类型）：当前 ResultMap 是否开启自动映射的功能。</p></li><li><p>discriminator（Discriminator 类型）：对应 <code>&lt;discriminator&gt;</code> 标签。</p></li></ul><p>接下来我们开始深入分析 <code>&lt;resultMap&gt;</code> 标签解析的流程。XMLMapperBuilder的resultMapElements() 方法负责解析 Mapper 配置文件中的全部 <code>&lt;resultMap&gt;</code> 标签，其中会通过 resultMapElement() 方法解析单个 <code>&lt;resultMap&gt;</code> 标签。</p><p>下面是 resultMapElement() 方法解析 <code>&lt;resultMap&gt; </code> 标签的核心流程。</p><ul><li><p>获取 <code>&lt;resultMap&gt;</code> 标签的type 属性值，这个值表示结果集将被映射成 type 指定类型的对象。如果没有指定 type 属性的话，会找其他属性值，优先级依次是：type、ofType、resultType、javaType。在这一步中会确定映射得到的对象类型，这里支持别名转换。</p></li><li><p>解析<code>&lt;resultMap&gt;</code>标签下的各个子标签，每个子标签都会生成一个ResultMapping 对象，这个 ResultMapping 对象会被添加到resultMappings 集合（List<code>&lt;ResultMapping&gt;</code> 类型）中暂存。这里会涉及 <code>&lt;id&gt;</code>、<code>&lt;result&gt;</code>、<code>&lt;association&gt;</code>、<code>&lt;collection&gt;</code>、<code>&lt;discriminator&gt;</code> 等子标签的解析。</p></li><li><p>获取 <code>&lt;resultMap&gt;</code> 标签的id 属性，默认值会拼装所有父标签的id、value 或 property 属性值。</p></li><li><p>获取 <code>&lt;resultMap&gt;</code> 标签的extends、autoMapping 等属性。</p></li><li><p>创建 ResultMapResolver 对象，ResultMapResolver 会根据上面解析到的ResultMappings 集合以及 <code>&lt;resultMap&gt;</code> 标签的属性构造 ResultMap 对象，并将其添加到 Configuration.resultMaps 集合（StrictMap 类型）中。</p></li></ul><h5 id="_1-解析-id-、-result-、-constructor-标签" tabindex="-1">（1）解析 <code>&lt;id&gt;</code>、<code>&lt;result&gt;</code>、<code>&lt;constructor&gt;</code>标签 <a class="header-anchor" href="#_1-解析-id-、-result-、-constructor-标签" aria-label="Permalink to &quot;（1）解析 \`&lt;id&gt;\`、\`&lt;result&gt;\`、\`&lt;constructor&gt;\`标签&quot;">​</a></h5><p>在 resultMapElement() 方法中获取到 id 属性和 type 属性值之后，会调用 buildResultMappingFromContext() 方法解析上述标签得到 ResultMapping 对象，其核心逻辑如下：</p><ul><li><p>获取当前标签的property的属性值作为目标属性名称（如果 <code>&lt;constructor&gt;</code> 标签使用的是 name 属性）；</p></li><li><p>获取 column、javaType、typeHandler、jdbcType、select 等一系列属性，与获取 property 属性的方式类似；</p></li><li><p>根据上面解析到的信息，调用 MapperBuilderAssistant.buildResultMapping() 方法创建 ResultMapping 对象。</p></li></ul><p>正如 resultMapElement() 方法核心步骤描述的那样，经过解析得到 ResultMapping 对象集合之后，会记录到resultMappings 这个临时集合中，然后由 ResultMapResolver 调用 MapperBuilderAssistant.addResultMap() 方法创建 ResultMap 对象，将resultMappings 集合中的全部 ResultMapping 对象添加到其中，然后将ResultMap 对象记录到 Configuration.resultMaps 集合中。</p><p>下面是 MapperBuilderAssistant.addResultMap() 的具体实现：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResultMap </span><span style="color:#B392F0;">addResultMap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        String id,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> type,</span></span>
<span class="line"><span style="color:#E1E4E8;">        String extend,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Discriminator discriminator,</span></span>
<span class="line"><span style="color:#E1E4E8;">        List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ResultMapping</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> resultMappings,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Boolean autoMapping) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ResultMap的完整id是&quot;namespace.id&quot;的格式</span></span>
<span class="line"><span style="color:#E1E4E8;">    id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyCurrentNamespace</span><span style="color:#E1E4E8;">(id, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取被继承的ResultMap的完整id，也就是父ResultMap对象的完整id</span></span>
<span class="line"><span style="color:#E1E4E8;">    extend </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyCurrentNamespace</span><span style="color:#E1E4E8;">(extend, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (extend </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {  </span><span style="color:#6A737D;">// 针对extend属性的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检测Configuration.resultMaps集合中是否存在被继承的ResultMap对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">configuration.</span><span style="color:#B392F0;">hasResultMap</span><span style="color:#E1E4E8;">(extend)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IncompleteElementException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Could not find a parent resultmap with id &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> extend </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取需要被继承的ResultMap对象，也就是父ResultMap对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        ResultMap resultMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getResultMap</span><span style="color:#E1E4E8;">(extend);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取父ResultMap对象中记录的ResultMapping集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ResultMapping</span><span style="color:#E1E4E8;">&gt; extendedResultMappings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(resultMap.</span><span style="color:#B392F0;">getResultMappings</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 删除需要覆盖的ResultMapping集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        extendedResultMappings.</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(resultMappings);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果当前&lt;resultMap&gt;标签中定义了&lt;constructor&gt;标签，则不需要使用父ResultMap中记录</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 的相应&lt;constructor&gt;标签，这里会将其对应的ResultMapping对象删除</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> declaresConstructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ResultMapping resultMapping </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> resultMappings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resultMapping.</span><span style="color:#B392F0;">getFlags</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(ResultFlag.CONSTRUCTOR)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                declaresConstructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (declaresConstructor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            extendedResultMappings.</span><span style="color:#B392F0;">removeIf</span><span style="color:#E1E4E8;">(resultMapping </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> resultMapping.</span><span style="color:#B392F0;">getFlags</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(ResultFlag.CONSTRUCTOR));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加需要被继承下来的ResultMapping对象记录到resultMappings集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        resultMappings.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(extendedResultMappings);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建ResultMap对象，并添加到Configuration.resultMaps集合中保存</span></span>
<span class="line"><span style="color:#E1E4E8;">    ResultMap resultMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ResultMap.</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">(configuration, id, type, resultMappings, autoMapping)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">discriminator</span><span style="color:#E1E4E8;">(discriminator)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    configuration.</span><span style="color:#B392F0;">addResultMap</span><span style="color:#E1E4E8;">(resultMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resultMap;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultMap </span><span style="color:#6F42C1;">addResultMap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        String id,</span></span>
<span class="line"><span style="color:#24292E;">        Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> type,</span></span>
<span class="line"><span style="color:#24292E;">        String extend,</span></span>
<span class="line"><span style="color:#24292E;">        Discriminator discriminator,</span></span>
<span class="line"><span style="color:#24292E;">        List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ResultMapping</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> resultMappings,</span></span>
<span class="line"><span style="color:#24292E;">        Boolean autoMapping) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ResultMap的完整id是&quot;namespace.id&quot;的格式</span></span>
<span class="line"><span style="color:#24292E;">    id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyCurrentNamespace</span><span style="color:#24292E;">(id, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取被继承的ResultMap的完整id，也就是父ResultMap对象的完整id</span></span>
<span class="line"><span style="color:#24292E;">    extend </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyCurrentNamespace</span><span style="color:#24292E;">(extend, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (extend </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {  </span><span style="color:#6A737D;">// 针对extend属性的处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检测Configuration.resultMaps集合中是否存在被继承的ResultMap对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">configuration.</span><span style="color:#6F42C1;">hasResultMap</span><span style="color:#24292E;">(extend)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IncompleteElementException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Could not find a parent resultmap with id &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> extend </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取需要被继承的ResultMap对象，也就是父ResultMap对象</span></span>
<span class="line"><span style="color:#24292E;">        ResultMap resultMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getResultMap</span><span style="color:#24292E;">(extend);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取父ResultMap对象中记录的ResultMapping集合</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ResultMapping</span><span style="color:#24292E;">&gt; extendedResultMappings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(resultMap.</span><span style="color:#6F42C1;">getResultMappings</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 删除需要覆盖的ResultMapping集合</span></span>
<span class="line"><span style="color:#24292E;">        extendedResultMappings.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(resultMappings);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果当前&lt;resultMap&gt;标签中定义了&lt;constructor&gt;标签，则不需要使用父ResultMap中记录</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 的相应&lt;constructor&gt;标签，这里会将其对应的ResultMapping对象删除</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> declaresConstructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ResultMapping resultMapping </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> resultMappings) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resultMapping.</span><span style="color:#6F42C1;">getFlags</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(ResultFlag.CONSTRUCTOR)) {</span></span>
<span class="line"><span style="color:#24292E;">                declaresConstructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (declaresConstructor) {</span></span>
<span class="line"><span style="color:#24292E;">            extendedResultMappings.</span><span style="color:#6F42C1;">removeIf</span><span style="color:#24292E;">(resultMapping </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> resultMapping.</span><span style="color:#6F42C1;">getFlags</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(ResultFlag.CONSTRUCTOR));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加需要被继承下来的ResultMapping对象记录到resultMappings集合中</span></span>
<span class="line"><span style="color:#24292E;">        resultMappings.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(extendedResultMappings);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建ResultMap对象，并添加到Configuration.resultMaps集合中保存</span></span>
<span class="line"><span style="color:#24292E;">    ResultMap resultMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ResultMap.</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">(configuration, id, type, resultMappings, autoMapping)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">discriminator</span><span style="color:#24292E;">(discriminator)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    configuration.</span><span style="color:#6F42C1;">addResultMap</span><span style="color:#24292E;">(resultMap);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resultMap;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>至于 <code>&lt;constructor&gt; </code> 标签的流程，是由XMLMapperBuilder 中的processConstructorElement() 方法实现，其中会先获取 <code>&lt;constructor&gt;</code> 标签的全部子标签，然后为每个标签添加 CONSTRUCTOR 标志（为每个<code>&lt;idArg&gt;</code> 标签添加额外的ID标志），最后通过 buildResultMappingFromContext()方法创建 ResultMapping对象并记录到 resultMappings 集合中暂存，这些 ResultMapping 对象最终也会添加到前面介绍的ResultMap 对象。</p><h5 id="_2-解析-association-和-collection-标签" tabindex="-1">（2）解析 <code>&lt;association&gt;</code> 和 <code>&lt;collection&gt;</code>标签 <a class="header-anchor" href="#_2-解析-association-和-collection-标签" aria-label="Permalink to &quot;（2）解析 \`&lt;association&gt;\` 和 \`&lt;collection&gt;\`标签&quot;">​</a></h5><p>接下来，我们来介绍解析 <code>&lt;association&gt;</code> 和 <code>&lt;collection&gt;</code>标签的核心流程，两者解析的过程基本一致。前面介绍的 buildResultMappingFromContext() 方法不仅完成了 <code>&lt;id&gt;</code>、<code>&lt;result&gt;</code> 等标签的解析，还完成了 <code>&lt;association&gt;</code> 和 <code>&lt;collection&gt;</code> 标签的解析，其中相关的代码片段如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ResultMapping </span><span style="color:#B392F0;">buildResultMappingFromContext</span><span style="color:#E1E4E8;">(XNode context, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> resultType, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ResultFlag</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> flags) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// &lt;association&gt;标签中其他属性的解析与&lt;result&gt;、&lt;id&gt;标签类似，这里不再展开</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果&lt;association&gt;标签没有指定resultMap属性，那么就是匿名嵌套映射，需要通过</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//  processNestedResultMappings()方法解析该匿名的嵌套映射</span></span>
<span class="line"><span style="color:#E1E4E8;">    String nestedResultMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resultMap&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">processNestedResultMappings</span><span style="color:#E1E4E8;">(context, Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">(), resultType));</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// &lt;association&gt;标签中其他属性的解析与&lt;result&gt;、&lt;id&gt;标签类似，这里不再展开</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据上面解析到的属性值，创建ResultMapping对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builderAssistant.</span><span style="color:#B392F0;">buildResultMapping</span><span style="color:#E1E4E8;">(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resultSet, foreignColumn, lazy);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ResultMapping </span><span style="color:#6F42C1;">buildResultMappingFromContext</span><span style="color:#24292E;">(XNode context, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> resultType, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ResultFlag</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> flags) {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// &lt;association&gt;标签中其他属性的解析与&lt;result&gt;、&lt;id&gt;标签类似，这里不再展开</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果&lt;association&gt;标签没有指定resultMap属性，那么就是匿名嵌套映射，需要通过</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//  processNestedResultMappings()方法解析该匿名的嵌套映射</span></span>
<span class="line"><span style="color:#24292E;">    String nestedResultMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resultMap&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">processNestedResultMappings</span><span style="color:#24292E;">(context, Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">(), resultType));</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// &lt;association&gt;标签中其他属性的解析与&lt;result&gt;、&lt;id&gt;标签类似，这里不再展开</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据上面解析到的属性值，创建ResultMapping对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builderAssistant.</span><span style="color:#6F42C1;">buildResultMapping</span><span style="color:#24292E;">(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resultSet, foreignColumn, lazy);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这里的 processNestedResultMappings() 方法会递归执行resultMapElement() 方法解析 <code>&lt;association&gt;</code> 标签和 <code>&lt;collection&gt;</code> 标签指定的匿名嵌套映射，得到一个完整的ResultMap 对象，并添加到Configuration.resultMaps集合中。</p><h5 id="_3-解析-discriminator-标签" tabindex="-1">（3）解析 <code>&lt;discriminator&gt;</code> 标签 <a class="header-anchor" href="#_3-解析-discriminator-标签" aria-label="Permalink to &quot;（3）解析 \`&lt;discriminator&gt;\` 标签&quot;">​</a></h5><p>最后一个要介绍的是 <code>&lt;discriminator&gt;</code> 标签的解析过程，我们将 <code>&lt;discriminator&gt;</code> 标签与 <code>&lt;case&gt;</code> 标签配合使用，根据结果集中某列的值改变映射行为。从 resultMapElement() 方法的逻辑我们可以看出，<code>&lt;discriminator&gt;</code> 标签是由 processDiscriminatorElement() 方法专门进行解析的，具体实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Discriminator </span><span style="color:#B392F0;">processDiscriminatorElement</span><span style="color:#E1E4E8;">(XNode context, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> resultType, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ResultMapping</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> resultMappings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从&lt;discriminator&gt;标签中解析column、javaType、jdbcType、typeHandler四个属性的逻辑非常简单，这里将这部分代码省略</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; discriminatorMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析&lt;discriminator&gt;标签的&lt;case&gt;子标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (XNode caseChild </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> caseChild.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过前面介绍的processNestedResultMappings()方法，解析&lt;case&gt;标签，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建相应的嵌套ResultMap对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        String resultMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> caseChild.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resultMap&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">processNestedResultMappings</span><span style="color:#E1E4E8;">(caseChild, resultMappings, resultType));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 记录该列值与对应选择的ResultMap的Id</span></span>
<span class="line"><span style="color:#E1E4E8;">        discriminatorMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(value, resultMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建Discriminator对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builderAssistant.</span><span style="color:#B392F0;">buildDiscriminator</span><span style="color:#E1E4E8;">(resultType, column, javaTypeClass, jdbcTypeEnum, typeHandlerClass, discriminatorMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Discriminator </span><span style="color:#6F42C1;">processDiscriminatorElement</span><span style="color:#24292E;">(XNode context, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> resultType, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ResultMapping</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> resultMappings) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从&lt;discriminator&gt;标签中解析column、javaType、jdbcType、typeHandler四个属性的逻辑非常简单，这里将这部分代码省略</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; discriminatorMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析&lt;discriminator&gt;标签的&lt;case&gt;子标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (XNode caseChild </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> caseChild.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过前面介绍的processNestedResultMappings()方法，解析&lt;case&gt;标签，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建相应的嵌套ResultMap对象</span></span>
<span class="line"><span style="color:#24292E;">        String resultMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> caseChild.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;resultMap&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">processNestedResultMappings</span><span style="color:#24292E;">(caseChild, resultMappings, resultType));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 记录该列值与对应选择的ResultMap的Id</span></span>
<span class="line"><span style="color:#24292E;">        discriminatorMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(value, resultMap);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建Discriminator对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builderAssistant.</span><span style="color:#6F42C1;">buildDiscriminator</span><span style="color:#24292E;">(resultType, column, javaTypeClass, jdbcTypeEnum, typeHandlerClass, discriminatorMap);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="sql-语句解析全流程" tabindex="-1">SQL 语句解析全流程 <a class="header-anchor" href="#sql-语句解析全流程" aria-label="Permalink to &quot;SQL 语句解析全流程&quot;">​</a></h3><p>在 Mapper.xml 映射文件中，除了上面介绍的标签之外，还有一类比较重要的标签，那就是 <code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;delete&gt;</code>、<code>&lt;update&gt;</code> 等 SQL 语句标签。虽然定义在 Mapper.xml 映射文件中，但是<strong>这些标签是由 XMLStatementBuilder 进行解析的</strong>，而不再由 XMLMapperBuilder 来完成解析。</p><p>在开始介绍 XMLStatementBuilder 解析 SQL 语句标签的具体实现之前，我们先来了解一下 MyBatis 在内存中是如何表示这些 SQL 语句标签的。在内存中，MyBatis 使用 SqlSource 接口来表示解析之后的 SQL 语句，其中的 SQL 语句只是一个中间态，可能包含动态 SQL 标签或占位符等信息，无法直接使用。SqlSource 接口的定义如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSource</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据Mapper文件或注解描述的SQL语句，以及传入的实参，返回可执行的SQL</span></span>
<span class="line"><span style="color:#E1E4E8;">    BoundSql </span><span style="color:#B392F0;">getBoundSql</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">parameterObject</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSource</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据Mapper文件或注解描述的SQL语句，以及传入的实参，返回可执行的SQL</span></span>
<span class="line"><span style="color:#24292E;">    BoundSql </span><span style="color:#6F42C1;">getBoundSql</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">parameterObject</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>MyBatis 在内存中使用 MappedStatement 对象表示上述 SQL 标签。在 MappedStatement 中的 sqlSource 字段记录了 SQL 标签中定义的 SQL 语句，sqlCommandType 字段记录了 SQL 语句的类型（INSERT、UPDATE、DELETE、SELECT 或 FLUSH 类型）。</p><p>介绍完表示 SQL 标签的基础类之后，我们来分析 XMLStatementBuilder 解析 SQL 标签的入口方法------ parseStatementNode() 方法，在该方法中首先会根据 id 属性和 databaseId 属性决定加载匹配的 SQL 标签，然后解析其中的<code>&lt;include&gt;</code> 标签和 <code>&lt;selectKey&gt;</code> 标签，相关的代码片段如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseStatementNode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取SQL标签的id以及databaseId属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String databaseId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;databaseId&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若databaseId属性值与当前使用的数据库不匹配，则不加载该SQL标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若存在相同id且databaseId不为空的SQL标签，则不再加载该SQL标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">databaseIdMatchesCurrent</span><span style="color:#E1E4E8;">(id, databaseId, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.requiredDatabaseId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据SQL标签的名称决定其SqlCommandType</span></span>
<span class="line"><span style="color:#E1E4E8;">    String nodeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNodeName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    SqlCommandType sqlCommandType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SqlCommandType.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(nodeName.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">(Locale.ENGLISH));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取SQL标签的属性值，例如，fetchSize、timeout、parameterType、parameterMap、</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// resultMap、resultType、lang、resultSetType、flushCache、useCache等。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这些属性的具体含义在MyBatis官方文档中已经有比较详细的介绍了，这里不再赘述</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在解析SQL语句之前，先处理其中的&lt;include&gt;标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    XMLIncludeTransformer includeParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLIncludeTransformer</span><span style="color:#E1E4E8;">(configuration, builderAssistant);</span></span>
<span class="line"><span style="color:#E1E4E8;">    includeParser.</span><span style="color:#B392F0;">applyIncludes</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取SQL标签的parameterType、lang两个属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析&lt;selectKey&gt;标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">processSelectKeyNodes</span><span style="color:#E1E4E8;">(id, parameterTypeClass, langDriver);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 暂时省略后面的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseStatementNode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取SQL标签的id以及databaseId属性</span></span>
<span class="line"><span style="color:#24292E;">    String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String databaseId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;databaseId&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若databaseId属性值与当前使用的数据库不匹配，则不加载该SQL标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若存在相同id且databaseId不为空的SQL标签，则不再加载该SQL标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">databaseIdMatchesCurrent</span><span style="color:#24292E;">(id, databaseId, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.requiredDatabaseId)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据SQL标签的名称决定其SqlCommandType</span></span>
<span class="line"><span style="color:#24292E;">    String nodeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNodeName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    SqlCommandType sqlCommandType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SqlCommandType.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(nodeName.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">(Locale.ENGLISH));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取SQL标签的属性值，例如，fetchSize、timeout、parameterType、parameterMap、</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// resultMap、resultType、lang、resultSetType、flushCache、useCache等。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这些属性的具体含义在MyBatis官方文档中已经有比较详细的介绍了，这里不再赘述</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在解析SQL语句之前，先处理其中的&lt;include&gt;标签</span></span>
<span class="line"><span style="color:#24292E;">    XMLIncludeTransformer includeParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLIncludeTransformer</span><span style="color:#24292E;">(configuration, builderAssistant);</span></span>
<span class="line"><span style="color:#24292E;">    includeParser.</span><span style="color:#6F42C1;">applyIncludes</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取SQL标签的parameterType、lang两个属性</span></span>
<span class="line"><span style="color:#24292E;">    ... ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析&lt;selectKey&gt;标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">processSelectKeyNodes</span><span style="color:#24292E;">(id, parameterTypeClass, langDriver);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 暂时省略后面的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="_1-处理-include-标签" tabindex="-1">1. 处理 <code>&lt;include&gt;</code> 标签 <a class="header-anchor" href="#_1-处理-include-标签" aria-label="Permalink to &quot;1. 处理 \`&lt;include&gt;\` 标签&quot;">​</a></h4><p>在实际应用中，我们会在<code>&lt;sql&gt;</code> 标签中定义一些能够被重用的SQL 片段，在 XMLMapperBuilder.sqlElement() 方法中会根据当前使用的 DatabaseId 匹配 <code>&lt;sql&gt;</code> 标签，只有匹配的 SQL 片段才会被加载到内存。</p><p>在解析 SQL 标签之前，MyBatis 会先将 <code>&lt;include&gt;</code> 标签转换成对应的 SQL 片段（即定义在 <code>&lt;sql&gt;</code> 标签内的文本），这个转换过程是在 XMLIncludeTransformer.applyIncludes() 方法中实现的（其中不仅包含了 <code>&lt;include&gt;</code> 标签的处理，还包含了&quot;\${}&quot;占位符的处理）。</p><p>针对 <code>&lt;include&gt;</code> 标签的处理如下：</p><ul><li><p>查找 refid 属性指向的 <code>&lt;sql&gt;</code> 标签，得到其对应的 Node 对象；</p></li><li><p>解析 <code>&lt;include&gt;</code> 标签下的 <code>&lt;property&gt;</code> 标签，将得到的键值对添加到 variablesContext 集合（Properties 类型）中，并形成新的 Properties 对象返回，用于替换占位符；</p></li><li><p>递归执行 applyIncludes()方法，因为在 <code>&lt;sql&gt;</code> 标签的定义中可能会使用 <code>&lt;include&gt;</code> 引用其他 SQL 片段，在 applyIncludes()方法递归的过程中，如果遇到&quot;\${}&quot;占位符，则使用 variablesContext 集合中的键值对进行替换；</p></li><li><p>最后，将 <code>&lt;include&gt;</code> 标签替换成 <code>&lt;sql&gt;</code> 标签的内容。</p></li></ul><p>通过上面逻辑可以看出，<code>&lt;include&gt;</code> 标签和 <code>&lt;sql&gt;</code> 标签是可以嵌套多层的，此时就会涉及 applyIncludes()方法的递归，同时可以配合&quot;\${}&quot;占位符，实现 SQL 片段模板化，更大程度地提高 SQL 片段的重用率。</p><h4 id="_2-处理-selectkey-标签" tabindex="-1">2. 处理 <code>&lt;selectKey&gt;</code> 标签 <a class="header-anchor" href="#_2-处理-selectkey-标签" aria-label="Permalink to &quot;2. 处理 \`&lt;selectKey&gt;\` 标签&quot;">​</a></h4><p>在有的数据库表设计场景中，我们会添加一个自增 ID 字段作为主键，例如，用户 ID、订单 ID 或者这个自增 ID 本身并没有什么业务含义，只是一个唯一标识而已。在某些业务逻辑里面，我们希望在执行 insert 语句的时候返回这个自增 ID 值，<code>&lt;selectKey&gt;</code> 标签就可以实现自增 ID 的获取。<code>&lt;selectKey&gt;</code> 标签不仅可以获取自增 ID，还可以指定其他 SQL 语句，从其他表或执行数据库的函数获取字段值。</p><p><strong>parseSelectKeyNode() 方法是解析 <code>&lt;selectKey&gt;</code> 标签的核心所在</strong> ，其中会解析 <code>&lt;selectKey&gt;</code> 标签的各个属性，并根据这些属性值将其中的 SQL 语句解析成 MappedStatement 对象，具体实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseSelectKeyNode</span><span style="color:#E1E4E8;">(String id, XNode nodeToHandle, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> parameterTypeClass, LanguageDriver langDriver, String databaseId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 解析&lt;selectKey&gt;标签的resultType、statementType、keyProperty等属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过LanguageDriver解析&lt;selectKey&gt;标签中的SQL语句，得到对应的SqlSource对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    SqlSource sqlSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> langDriver.</span><span style="color:#B392F0;">createSqlSource</span><span style="color:#E1E4E8;">(configuration, nodeToHandle, parameterTypeClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SqlCommandType sqlCommandType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SqlCommandType.SELECT;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建MappedStatement对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    builderAssistant.</span><span style="color:#B392F0;">addMappedStatement</span><span style="color:#E1E4E8;">(id, sqlSource, statementType, sqlCommandType,</span></span>
<span class="line"><span style="color:#E1E4E8;">            fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,</span></span>
<span class="line"><span style="color:#E1E4E8;">            resultSetTypeEnum, flushCache, useCache, resultOrdered,</span></span>
<span class="line"><span style="color:#E1E4E8;">            keyGenerator, keyProperty, keyColumn, databaseId, langDriver, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builderAssistant.</span><span style="color:#B392F0;">applyCurrentNamespace</span><span style="color:#E1E4E8;">(id, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建&lt;selectKey&gt;标签对应的KeyGenerator对象，这个KeyGenerator对象会添加到Configuration.keyGenerators集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">    MappedStatement keyStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">getMappedStatement</span><span style="color:#E1E4E8;">(id, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    configuration.</span><span style="color:#B392F0;">addKeyGenerator</span><span style="color:#E1E4E8;">(id, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SelectKeyGenerator</span><span style="color:#E1E4E8;">(keyStatement, executeBefore));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseSelectKeyNode</span><span style="color:#24292E;">(String id, XNode nodeToHandle, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> parameterTypeClass, LanguageDriver langDriver, String databaseId) {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 解析&lt;selectKey&gt;标签的resultType、statementType、keyProperty等属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过LanguageDriver解析&lt;selectKey&gt;标签中的SQL语句，得到对应的SqlSource对象</span></span>
<span class="line"><span style="color:#24292E;">    SqlSource sqlSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> langDriver.</span><span style="color:#6F42C1;">createSqlSource</span><span style="color:#24292E;">(configuration, nodeToHandle, parameterTypeClass);</span></span>
<span class="line"><span style="color:#24292E;">    SqlCommandType sqlCommandType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SqlCommandType.SELECT;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建MappedStatement对象</span></span>
<span class="line"><span style="color:#24292E;">    builderAssistant.</span><span style="color:#6F42C1;">addMappedStatement</span><span style="color:#24292E;">(id, sqlSource, statementType, sqlCommandType,</span></span>
<span class="line"><span style="color:#24292E;">            fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,</span></span>
<span class="line"><span style="color:#24292E;">            resultSetTypeEnum, flushCache, useCache, resultOrdered,</span></span>
<span class="line"><span style="color:#24292E;">            keyGenerator, keyProperty, keyColumn, databaseId, langDriver, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builderAssistant.</span><span style="color:#6F42C1;">applyCurrentNamespace</span><span style="color:#24292E;">(id, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建&lt;selectKey&gt;标签对应的KeyGenerator对象，这个KeyGenerator对象会添加到Configuration.keyGenerators集合中</span></span>
<span class="line"><span style="color:#24292E;">    MappedStatement keyStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">getMappedStatement</span><span style="color:#24292E;">(id, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    configuration.</span><span style="color:#6F42C1;">addKeyGenerator</span><span style="color:#24292E;">(id, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SelectKeyGenerator</span><span style="color:#24292E;">(keyStatement, executeBefore));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_3-处理-sql-语句" tabindex="-1">3. 处理 SQL 语句 <a class="header-anchor" href="#_3-处理-sql-语句" aria-label="Permalink to &quot;3. 处理 SQL 语句&quot;">​</a></h4><p>经过 <code>&lt;include&gt;</code> 标签和 <code>&lt;selectKey&gt;</code> 标签的处理流程之后，XMLStatementBuilder 中的 parseStatementNode()方法接下来就要开始处理 SQL 语句了，相关的代码片段之前被省略了，这里我们详细分析一下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseStatementNode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 前面是解析&lt;selectKey&gt;和&lt;include&gt;标签的逻辑，这里不再展示</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当执行到这里的时候，&lt;selectKey&gt;和&lt;include&gt;标签已经被解析完毕，并删除掉了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 下面是解析SQL语句的逻辑，也是parseStatementNode()方法的核心</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过LanguageDriver.createSqlSource()方法创建SqlSource对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    SqlSource sqlSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> langDriver.</span><span style="color:#B392F0;">createSqlSource</span><span style="color:#E1E4E8;">(configuration, context, parameterTypeClass);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取SQL标签中配置的resultSets、keyProperty、keyColumn等属性，以及前面解析&lt;selectKey&gt;标签得到的KeyGenerator对象等，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这些信息将会填充到MappedStatement对象中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据上述属性信息创建MappedStatement对象，并添加到Configuration.mappedStatements集合中保存</span></span>
<span class="line"><span style="color:#E1E4E8;">    builderAssistant.</span><span style="color:#B392F0;">addMappedStatement</span><span style="color:#E1E4E8;">(id, sqlSource, statementType, sqlCommandType,</span></span>
<span class="line"><span style="color:#E1E4E8;">            fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,</span></span>
<span class="line"><span style="color:#E1E4E8;">            resultSetTypeEnum, flushCache, useCache, resultOrdered,</span></span>
<span class="line"><span style="color:#E1E4E8;">            keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseStatementNode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 前面是解析&lt;selectKey&gt;和&lt;include&gt;标签的逻辑，这里不再展示</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当执行到这里的时候，&lt;selectKey&gt;和&lt;include&gt;标签已经被解析完毕，并删除掉了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 下面是解析SQL语句的逻辑，也是parseStatementNode()方法的核心</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过LanguageDriver.createSqlSource()方法创建SqlSource对象</span></span>
<span class="line"><span style="color:#24292E;">    SqlSource sqlSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> langDriver.</span><span style="color:#6F42C1;">createSqlSource</span><span style="color:#24292E;">(configuration, context, parameterTypeClass);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取SQL标签中配置的resultSets、keyProperty、keyColumn等属性，以及前面解析&lt;selectKey&gt;标签得到的KeyGenerator对象等，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这些信息将会填充到MappedStatement对象中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据上述属性信息创建MappedStatement对象，并添加到Configuration.mappedStatements集合中保存</span></span>
<span class="line"><span style="color:#24292E;">    builderAssistant.</span><span style="color:#6F42C1;">addMappedStatement</span><span style="color:#24292E;">(id, sqlSource, statementType, sqlCommandType,</span></span>
<span class="line"><span style="color:#24292E;">            fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,</span></span>
<span class="line"><span style="color:#24292E;">            resultSetTypeEnum, flushCache, useCache, resultOrdered,</span></span>
<span class="line"><span style="color:#24292E;">            keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这里解析 SQL 语句<strong>使用的是 LanguageDriver 接口</strong>，其核心实现是 XMLLanguageDriver，继承关系如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M00/0D/B0/Cgp9HWA7ksyAUvrwAADwoAT3J5M370.png" alt="图片2.png"><br> LanguageDriver 继承关系图</p><p>在 createSqlSource() 方法中，XMLLanguageDriver 会依赖 XMLScriptBuilder 创建 SqlSource 对象，XMLScriptBuilder 首先会判断 SQL 语句是否为动态SQL，判断的核心逻辑在 parseDynamicTags()方法中，核心实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> MixedSqlNode </span><span style="color:#B392F0;">parseDynamicTags</span><span style="color:#E1E4E8;">(XNode node) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">SqlNode</span><span style="color:#E1E4E8;">&gt; contents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(); </span><span style="color:#6A737D;">// 解析后的SqlNode结果集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    NodeList children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getChildNodes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取SQL标签下的所有节点，包括标签节点和文本节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> children.</span><span style="color:#B392F0;">getLength</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        XNode child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.</span><span style="color:#B392F0;">newXNode</span><span style="color:#E1E4E8;">(children.</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">(i));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (child.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNodeType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Node.CDATA_SECTION_NODE </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">                child.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNodeType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Node.TEXT_NODE) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理文本节点，也就是SQL语句</span></span>
<span class="line"><span style="color:#E1E4E8;">            String data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getStringBody</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            TextSqlNode textSqlNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextSqlNode</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 解析SQL语句，如果含有未解析的&quot;\${}&quot;占位符，则为动态SQL</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (textSqlNode.</span><span style="color:#B392F0;">isDynamic</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                contents.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(textSqlNode);</span></span>
<span class="line"><span style="color:#E1E4E8;">                isDynamic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 标记为动态SQL语句</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                contents.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticTextSqlNode</span><span style="color:#E1E4E8;">(data));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (child.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNodeType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Node.ELEMENT_NODE) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果解析到一个子标签，那么一定是动态SQL</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 这里会根据不同的标签，获取不同的NodeHandler，然后由NodeHandler进行后续解析</span></span>
<span class="line"><span style="color:#E1E4E8;">            String nodeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child.</span><span style="color:#B392F0;">getNode</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getNodeName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            NodeHandler handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodeHandlerMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(nodeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handler </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuilderException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unknown element &lt;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> nodeName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&gt; in SQL statement.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 处理动态SQL语句，并将解析得到的SqlNode对象记录到contents集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">            handler.</span><span style="color:#B392F0;">handleNode</span><span style="color:#E1E4E8;">(child, contents);</span></span>
<span class="line"><span style="color:#E1E4E8;">            isDynamic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析后的SqlNode集合将会被封装成MixedSqlNode返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MixedSqlNode</span><span style="color:#E1E4E8;">(contents);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> MixedSqlNode </span><span style="color:#6F42C1;">parseDynamicTags</span><span style="color:#24292E;">(XNode node) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">SqlNode</span><span style="color:#24292E;">&gt; contents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(); </span><span style="color:#6A737D;">// 解析后的SqlNode结果集合</span></span>
<span class="line"><span style="color:#24292E;">    NodeList children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getChildNodes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取SQL标签下的所有节点，包括标签节点和文本节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> children.</span><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        XNode child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.</span><span style="color:#6F42C1;">newXNode</span><span style="color:#24292E;">(children.</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">(i));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (child.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNodeType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Node.CDATA_SECTION_NODE </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                child.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNodeType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Node.TEXT_NODE) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理文本节点，也就是SQL语句</span></span>
<span class="line"><span style="color:#24292E;">            String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getStringBody</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            TextSqlNode textSqlNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextSqlNode</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 解析SQL语句，如果含有未解析的&quot;\${}&quot;占位符，则为动态SQL</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (textSqlNode.</span><span style="color:#6F42C1;">isDynamic</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                contents.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(textSqlNode);</span></span>
<span class="line"><span style="color:#24292E;">                isDynamic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 标记为动态SQL语句</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                contents.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticTextSqlNode</span><span style="color:#24292E;">(data));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (child.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNodeType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Node.ELEMENT_NODE) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果解析到一个子标签，那么一定是动态SQL</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 这里会根据不同的标签，获取不同的NodeHandler，然后由NodeHandler进行后续解析</span></span>
<span class="line"><span style="color:#24292E;">            String nodeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child.</span><span style="color:#6F42C1;">getNode</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getNodeName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            NodeHandler handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nodeHandlerMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(nodeName);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handler </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuilderException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unknown element &lt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> nodeName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&gt; in SQL statement.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 处理动态SQL语句，并将解析得到的SqlNode对象记录到contents集合中</span></span>
<span class="line"><span style="color:#24292E;">            handler.</span><span style="color:#6F42C1;">handleNode</span><span style="color:#24292E;">(child, contents);</span></span>
<span class="line"><span style="color:#24292E;">            isDynamic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析后的SqlNode集合将会被封装成MixedSqlNode返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MixedSqlNode</span><span style="color:#24292E;">(contents);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>这里使用 SqlNode 接口来表示一条 SQL 语句的不同部分，其中，TextSqlNode 表示的是SQL 语句的文本（可能包含&quot;\${}&quot;占位符），StaticTextSqlNode 表示的是不包含占位符的SQL 语句文本。</p><p>另外一个新接口是NodeHandler，它有很多实现类，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image6/M00/0D/B0/Cgp9HWA7kvSAHP1yAAEyhRwHGEE543.png" alt="图片3.png"><br> NodeHandler 继承关系图</p><p><strong>NodeHandler接口负责解析动态 SQL 内的标签</strong> ，生成相应的 SqlNode 对象，通过 NodeHandler 实现类的名称，我们就可以大概猜测到其解析的标签名称。以 IfHandler 为例，它解析的就是 <code>&lt;if&gt;</code> 标签，其核心实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IfHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleNode</span><span style="color:#E1E4E8;">(XNode </span><span style="color:#FFAB70;">nodeToHandle</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">SqlNode</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">targetContents</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过parseDynamicTags()方法，解析&lt;if&gt;标签下嵌套的动态SQL</span></span>
<span class="line"><span style="color:#E1E4E8;">        MixedSqlNode mixedSqlNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseDynamicTags</span><span style="color:#E1E4E8;">(nodeToHandle);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取&lt;if&gt;标签判断分支的条件</span></span>
<span class="line"><span style="color:#E1E4E8;">        String test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodeToHandle.</span><span style="color:#B392F0;">getStringAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建IfNode对象(也是SqlNode接口的实现)，并将其保存下来</span></span>
<span class="line"><span style="color:#E1E4E8;">        IfSqlNode ifSqlNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IfSqlNode</span><span style="color:#E1E4E8;">(mixedSqlNode, test);</span></span>
<span class="line"><span style="color:#E1E4E8;">        targetContents.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(ifSqlNode);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IfHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleNode</span><span style="color:#24292E;">(XNode </span><span style="color:#E36209;">nodeToHandle</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">SqlNode</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">targetContents</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过parseDynamicTags()方法，解析&lt;if&gt;标签下嵌套的动态SQL</span></span>
<span class="line"><span style="color:#24292E;">        MixedSqlNode mixedSqlNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseDynamicTags</span><span style="color:#24292E;">(nodeToHandle);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取&lt;if&gt;标签判断分支的条件</span></span>
<span class="line"><span style="color:#24292E;">        String test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nodeToHandle.</span><span style="color:#6F42C1;">getStringAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建IfNode对象(也是SqlNode接口的实现)，并将其保存下来</span></span>
<span class="line"><span style="color:#24292E;">        IfSqlNode ifSqlNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IfSqlNode</span><span style="color:#24292E;">(mixedSqlNode, test);</span></span>
<span class="line"><span style="color:#24292E;">        targetContents.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(ifSqlNode);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>完成了对 SQL 语句的解析，得到了相应的 MixedSqlNode对象之后，XMLScriptBuilder 会根据 SQL 语句的类型生成不同的 SqlSource 实现：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SqlSource </span><span style="color:#B392F0;">parseScriptNode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对SQL语句进行解析</span></span>
<span class="line"><span style="color:#E1E4E8;">    MixedSqlNode rootSqlNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseDynamicTags</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SqlSource sqlSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isDynamic) { </span><span style="color:#6A737D;">// 根据该SQL是否为动态SQL，创建不同的SqlSource实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DynamicSqlSource</span><span style="color:#E1E4E8;">(configuration, rootSqlNode);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RawSqlSource</span><span style="color:#E1E4E8;">(configuration, rootSqlNode, parameterType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sqlSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSource </span><span style="color:#6F42C1;">parseScriptNode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对SQL语句进行解析</span></span>
<span class="line"><span style="color:#24292E;">    MixedSqlNode rootSqlNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseDynamicTags</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    SqlSource sqlSource;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isDynamic) { </span><span style="color:#6A737D;">// 根据该SQL是否为动态SQL，创建不同的SqlSource实现</span></span>
<span class="line"><span style="color:#24292E;">        sqlSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DynamicSqlSource</span><span style="color:#24292E;">(configuration, rootSqlNode);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        sqlSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RawSqlSource</span><span style="color:#24292E;">(configuration, rootSqlNode, parameterType);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlSource;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们重点介绍了 MyBatis 在初始化过程中对 Mapper.xml 映射文件的解析。</p><p>首先，我们着重介绍了 Mapper.xml 映射文件中对 <code>&lt;cache&gt;</code> 标签、<code>&lt;cache-ref&gt;</code> 标签以及 <code>&lt;resultMap&gt;</code> 标签（包括它的各个子标签）的解析流程，让我们知道 MyBatis是如何正确理解二级缓存的配置信息以及我们定义的各种映射规则。</p><p>然后，我们详细分析了 MyBatis 对 Mapper.xml 映射文件中 SQL 语句标签的解析，其中涉及 <code>&lt;include&gt;</code>、<code>&lt;selectKey&gt;</code> 等标签的处理逻辑。</p><p>在解析 SQL 语句的过程中，涉及了动态 SQL 语句的解析，不过这一讲只是让你找到了这一逻辑的入口，在下一讲，我们就会深入讲解 MyBatis 动态 SQL 的设计思想和解析流程，记得按时来听课。</p><hr><p><a href="https://shenceyun.lagou.com/t/Mka" target="_blank" rel="noreferrer"><img src="https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png" alt="1.png"></a></p><p><strong>《Java 工程师高薪训练营》</strong></p><p>实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，<a href="https://shenceyun.lagou.com/t/Mka" target="_blank" rel="noreferrer">点击链接，提升自己</a>！</p>`,92),o=[e];function t(c,r,E,i,y,d){return n(),a("div",null,o)}const m=s(p,[["render",t]]);export{g as __pageData,m as default};
