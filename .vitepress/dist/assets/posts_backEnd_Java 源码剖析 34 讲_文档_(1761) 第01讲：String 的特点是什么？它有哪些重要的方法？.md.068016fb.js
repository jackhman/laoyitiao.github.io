import{_ as l,j as p,o,g as e,k as a,Q as s}from"./chunks/framework.b3d8e22e.js";const D=JSON.parse('{"title":"典型回答 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1761) 第01讲：String 的特点是什么？它有哪些重要的方法？.md","filePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1761) 第01讲：String 的特点是什么？它有哪些重要的方法？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/Java 源码剖析 34 讲_文档/(1761) 第01讲：String 的特点是什么？它有哪些重要的方法？.md"},c=s(`<p>你好，我是你的 Java 面试课老师王磊，欢迎进入第 01 课时的内容&quot;String 的特点是什么？它有哪些重要的方法？&quot;。</p><p>几乎所有的 Java 面试都是以 String 开始的，如果第一个问题没有回答好，则会给面试官留下非常不好的第一印象，而糟糕的第一印象则会直接影响到自己的面试结果，就好像刚破壳的小鹅一样，会把第一眼看到的动物当成自己的母亲，即使它第一眼看到的是一只小狗或小猫，也会默认跟随其后，心理学把这种现象叫做<strong>印刻效应</strong>。印刻效应不仅存在于低等动物之中，同样也适用于人类，所以对于 String 的知识，我们必须深入的掌握才能为自己赢得更多的筹码。</p><p>本课时的问题是：String 是如何实现的？它有哪些重要的方法？</p><h3 id="典型回答" tabindex="-1">典型回答 <a class="header-anchor" href="#典型回答" aria-label="Permalink to &quot;典型回答&quot;">​</a></h3><p>以主流的 JDK 版本 1.8 来说，String 内部实际存储结构为 char 数组，源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Comparable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">CharSequence</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用于存储字符串的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> value[];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 缓存字符串的 hash code</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> hash; </span><span style="color:#6A737D;">// Default to 0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ......其他内容</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用于存储字符串的值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> value[];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 缓存字符串的 hash code</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash; </span><span style="color:#6A737D;">// Default to 0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ......其他内容</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>String 源码中包含下面几个重要的方法。</p><h4 id="_1-多构造方法" tabindex="-1">1. 多构造方法 <a class="header-anchor" href="#_1-多构造方法" aria-label="Permalink to &quot;1. 多构造方法&quot;">​</a></h4><p>String 字符串有以下 4 个重要的构造方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// String 为参数的构造方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(String original) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> original.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> original.hash;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// char[] 为参数构造方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> value[]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">copyOf</span><span style="color:#E1E4E8;">(value, value.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// StringBuffer 为参数的构造方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(StringBuffer buffer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;">(buffer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">copyOf</span><span style="color:#E1E4E8;">(buffer.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(), buffer.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// StringBuilder 为参数的构造方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(StringBuilder builder) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">copyOf</span><span style="color:#E1E4E8;">(builder.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(), builder.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// String 为参数的构造方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(String original) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> original.value;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> original.hash;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// char[] 为参数构造方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> value[]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(value, value.length);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// StringBuffer 为参数的构造方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(StringBuffer buffer) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;">(buffer) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(buffer.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(), buffer.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// StringBuilder 为参数的构造方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(StringBuilder builder) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(builder.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(), builder.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，比较容易被我们忽略的是以 StringBuffer 和 StringBuilder 为参数的构造函数，因为这三种数据类型，我们通常都是单独使用的，所以这个小细节我们需要特别留意一下。</p><h4 id="_2-equals-比较两个字符串是否相等" tabindex="-1">2. equals() 比较两个字符串是否相等 <a class="header-anchor" href="#_2-equals-比较两个字符串是否相等" aria-label="Permalink to &quot;2. equals() 比较两个字符串是否相等&quot;">​</a></h4><p>源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object anObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对象引用相同直接返回 true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> anObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断需要对比的值是否为 String 类型，如果不是则直接返回 false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (anObject </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> String) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String anotherString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String)anObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> anotherString.value.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 把两个字符串都转换为 char 数组对比</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> v1[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> v2[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> anotherString.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 循环比对两个字符串的每一个字符</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (n</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果其中有一个字符不相等就 true false，否则继续对比</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (v1[i] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> v2[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object anObject) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对象引用相同直接返回 true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> anObject) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断需要对比的值是否为 String 类型，如果不是则直接返回 false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (anObject </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> String) {</span></span>
<span class="line"><span style="color:#24292E;">        String anotherString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String)anObject;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.length;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> anotherString.value.length) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 把两个字符串都转换为 char 数组对比</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> v1[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> v2[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> anotherString.value;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 循环比对两个字符串的每一个字符</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (n</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果其中有一个字符不相等就 true false，否则继续对比</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (v1[i] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> v2[i])</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>String 类型重写了 Object 中的 equals() 方法，equals() 方法需要传递一个 Object 类型的参数值，在比较时会先通过 instanceof 判断是否为 String 类型，如果不是则会直接返回 false，instanceof 的使用如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object oString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Object oInt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(oString </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> String); </span><span style="color:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(oInt </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> String); </span><span style="color:#6A737D;">// 返回 false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object oString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Object oInt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(oString </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> String); </span><span style="color:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(oInt </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> String); </span><span style="color:#6A737D;">// 返回 false</span></span></code></pre></div><p>当判断参数为 String 类型之后，会循环对比两个字符串中的每一个字符，当所有字符都相等时返回 true，否则则返回 false。</p><p>还有一个和 equals() 比较类似的方法 equalsIgnoreCase()，它是用于忽略字符串的大小写之后进行字符串对比。</p><h4 id="_3-compareto-比较两个字符串" tabindex="-1">3. compareTo() 比较两个字符串 <a class="header-anchor" href="#_3-compareto-比较两个字符串" aria-label="Permalink to &quot;3. compareTo() 比较两个字符串&quot;">​</a></h4><p>compareTo() 方法用于比较两个字符串，返回的结果为 int 类型的值，源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(String anotherString) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> anotherString.value.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取到两个字符串长度最短的那个 int 值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> lim </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(len1, len2);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> v1[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> v2[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> anotherString.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对比每一个字符</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> lim) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> c1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v1[k];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> c2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v2[k];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c1 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> c2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 有字符不相等就返回差值</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> c1 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> c2;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> len1 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> len2;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(String anotherString) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> anotherString.value.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取到两个字符串长度最短的那个 int 值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> lim </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(len1, len2);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> v1[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> v2[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> anotherString.value;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对比每一个字符</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> lim) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1[k];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2[k];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> c2) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 有字符不相等就返回差值</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> c1 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> c2;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> len1 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> len2;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从源码中可以看出，compareTo() 方法会循环对比所有的字符，当两个字符串中有任意一个字符不相同时，则 return char1-char2。比如，两个字符串分别存储的是 1 和 2，返回的值是 -1；如果存储的是 1 和 1，则返回的值是 0 ，如果存储的是 2 和 1，则返回的值是 1。</p><p>还有一个和 compareTo() 比较类似的方法 compareToIgnoreCase()，用于忽略大小写后比较两个字符串。</p><p>可以看出 compareTo() 方法和 equals() 方法都是用于比较两个字符串的，但它们有两点不同：</p><ul><li>equals() 可以接收一个 Object 类型的参数，而 compareTo() 只能接收一个 String 类型的参数；</li><li>equals() 返回值为 Boolean，而 compareTo() 的返回值则为 int。</li></ul><p>它们都可以用于两个字符串的比较，当 equals() 方法返回 true 时，或者是 compareTo() 方法返回 0 时，则表示两个字符串完全相同。</p><h4 id="_4-其他重要方法" tabindex="-1">4. 其他重要方法 <a class="header-anchor" href="#_4-其他重要方法" aria-label="Permalink to &quot;4. 其他重要方法&quot;">​</a></h4><ul><li>indexOf()：查询字符串首次出现的下标位置</li><li>lastIndexOf()：查询字符串最后出现的下标位置</li><li>contains()：查询字符串中是否包含另一个字符串</li><li>toLowerCase()：把字符串全部转换成小写</li><li>toUpperCase()：把字符串全部转换成大写</li><li>length()：查询字符串的长度</li><li>trim()：去掉字符串首尾空格</li><li>replace()：替换字符串中的某些字符</li><li>split()：把字符串分割并返回字符串数组</li><li>join()：把字符串数组转为字符串</li></ul><h3 id="考点分析" tabindex="-1">考点分析 <a class="header-anchor" href="#考点分析" aria-label="Permalink to &quot;考点分析&quot;">​</a></h3><p>这道题目考察的重点是，你对 Java 源码的理解，这也从侧面反应了你是否热爱和喜欢专研程序，而这正是一个优秀程序员所必备的特质。</p><p>String 源码属于所有源码中最基础、最简单的一个，对 String 源码的理解也反应了你的 Java 基础功底。</p><p>String 问题如果再延伸一下，会问到一些更多的知识细节，这也是大厂一贯使用的面试策略，从一个知识点入手然后扩充更多的知识细节，对于 String 也不例外，通常还会关联的询问以下问题：</p><ul><li>为什么 String 类型要用 final 修饰？</li><li>== 和 equals 的区别是什么？</li><li>String 和 StringBuilder、StringBuffer 有什么区别？</li><li>String 的 intern() 方法有什么含义？</li><li>String 类型在 JVM（Java 虚拟机）中是如何存储的？编译器对 String 做了哪些优化？</li></ul><p>接下来我们一起来看这些问题的答案。</p><h3 id="知识扩展" tabindex="-1">知识扩展 <a class="header-anchor" href="#知识扩展" aria-label="Permalink to &quot;知识扩展&quot;">​</a></h3><h4 id="_1-和-equals-的区别" tabindex="-1">1. == 和 equals 的区别 <a class="header-anchor" href="#_1-和-equals-的区别" aria-label="Permalink to &quot;1. == 和 equals 的区别&quot;">​</a></h4><p>== 对于基本数据类型来说，是用于比较 &quot;值&quot;是否相等的；而对于引用类型来说，是用于比较引用地址是否相同的。</p><p>查看源码我们可以知道 Object 中也有 equals() 方法，源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object obj) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> obj);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出，Object 中的 equals() 方法其实就是 ==，而 String 重写了 equals() 方法把它修改成比较两个字符串的值是否相等。</p><p>源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object anObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对象引用相同直接返回 true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> anObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断需要对比的值是否为 String 类型，如果不是则直接返回 false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (anObject </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> String) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String anotherString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String)anObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> anotherString.value.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 把两个字符串都转换为 char 数组对比</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> v1[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> v2[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> anotherString.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 循环比对两个字符串的每一个字符</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (n</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果其中有一个字符不相等就 true false，否则继续对比</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (v1[i] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> v2[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object anObject) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对象引用相同直接返回 true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> anObject) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断需要对比的值是否为 String 类型，如果不是则直接返回 false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (anObject </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> String) {</span></span>
<span class="line"><span style="color:#24292E;">        String anotherString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String)anObject;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.length;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> anotherString.value.length) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 把两个字符串都转换为 char 数组对比</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> v1[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> v2[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> anotherString.value;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 循环比对两个字符串的每一个字符</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (n</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果其中有一个字符不相等就 true false，否则继续对比</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (v1[i] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> v2[i])</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-final-修饰的好处" tabindex="-1">2. final 修饰的好处 <a class="header-anchor" href="#_2-final-修饰的好处" aria-label="Permalink to &quot;2. final 修饰的好处&quot;">​</a></h4><p>从 String 类的源码我们可以看出 String 是被 final 修饰的不可继承类，源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Comparable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">CharSequence</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">//...... }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">//...... }</span></span></code></pre></div><p>那这样设计有什么好处呢？</p><p>Java 语言之父 James Gosling 的回答是，他会更倾向于使用 final，因为它能够缓存结果，当你在传参时不需要考虑谁会修改它的值；如果是可变类的话，则有可能需要重新拷贝出来一个新值进行传参，这样在性能上就会有一定的损失。</p><p>James Gosling 还说迫使 String 类设计成不可变的另一个原因是<strong>安全</strong>，当你在调用其他方法时，比如调用一些系统级操作指令之前，可能会有一系列校验，如果是可变类的话，可能在你校验过后，它的内部的值又被改变了，这样有可能会引起严重的系统崩溃问题，这是迫使 String 类设计成不可变类的一个重要原因。</p><p>总结来说，使用 final 修饰的第一个好处是<strong>安全</strong> ；第二个好处是<strong>高效</strong>，以 JVM 中的字符串常量池来举例，如下两个变量：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;java&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;java&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;java&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;java&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>只有字符串是不可变时，我们才能实现字符串常量池，字符串常量池可以为我们缓存字符串，提高程序的运行效率，如下图所示：</p>`,51),r=s(`<p>试想一下如果 String 是可变的，那当 s1 的值修改之后，s2 的值也跟着改变了，这样就和我们预期的结果不相符了，因此也就没有办法实现字符串常量池的功能了。</p><h4 id="_3-string-和-stringbuilder、stringbuffer-的区别" tabindex="-1">3. String 和 StringBuilder、StringBuffer 的区别 <a class="header-anchor" href="#_3-string-和-stringbuilder、stringbuffer-的区别" aria-label="Permalink to &quot;3. String 和 StringBuilder、StringBuffer 的区别&quot;">​</a></h4><p>因为 String 类型是不可变的，所以在字符串拼接的时候如果使用 String 的话性能会很低，因此我们就需要使用另一个数据类型 StringBuffer，它提供了 append 和 insert 方法可用于字符串的拼接，它使用 synchronized 来保证线程安全，如下源码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> StringBuffer </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(Object obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    toStringCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(obj));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> StringBuffer </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(String str) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    toStringCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> StringBuffer </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(Object obj) {</span></span>
<span class="line"><span style="color:#24292E;">    toStringCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(obj));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> StringBuffer </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String str) {</span></span>
<span class="line"><span style="color:#24292E;">    toStringCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为它使用了 synchronized 来保证线程安全，所以性能不是很高，于是在 JDK 1.5 就有了 StringBuilder，它同样提供了 append 和 insert 的拼接方法，但它没有使用 synchronized 来修饰，因此在性能上要优于 StringBuffer，所以在非并发操作的环境下可使用 StringBuilder 来进行字符串拼接。</p><h4 id="_4-string-和-jvm" tabindex="-1">4. String 和 JVM <a class="header-anchor" href="#_4-string-和-jvm" aria-label="Permalink to &quot;4. String 和 JVM&quot;">​</a></h4><p>String 常见的创建方式有两种，new String() 的方式和直接赋值的方式，直接赋值的方式会先去字符串常量池中查找是否已经有此值，如果有则把引用地址直接指向此值，否则会先在常量池中创建，然后再把引用指向此值；而 new String() 的方式一定会先在堆上创建一个字符串对象，然后再去常量池中查询此字符串的值是否已经存在，如果不存在会先在常量池中创建此字符串，然后把引用的值指向此字符串，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1.</span><span style="color:#B392F0;">intern</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s2 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s3); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1.</span><span style="color:#6F42C1;">intern</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s3); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>它们在 JVM 存储的位置，如下图所示：</p>`,9),E=s(`<blockquote><p>小贴士：JDK 1.7 之后把永生代换成的元空间，把字符串常量池从方法区移到了 Java 堆上。</p></blockquote><p>除此之外编译器还会对 String 字符串做一些优化，例如以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Ja&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;va&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Java&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Ja&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;va&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2);</span></span></code></pre></div><p>虽然 s1 拼接了多个字符串，但对比的结果却是 true，我们使用反编译工具，看到的结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Compiled from </span><span style="color:#9ECBFF;">&quot;StringExample.java&quot;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">com</span><span style="color:#E1E4E8;">.lagou.interview.StringExample {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> com.lagou.interview.</span><span style="color:#B392F0;">StringExample</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokespecial #</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    LineNumberTable</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      line </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(java.lang.</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ldc           #</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// String Java</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> astore_1</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ldc           #</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// String Java</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> astore_2</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> get</span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;">     #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_2</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> if_acmpne     </span><span style="color:#79B8FF;">18</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> iconst_1</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">15</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">goto</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">19</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> iconst_0</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(Z)V</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    LineNumberTable</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      line </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">      line </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">      line </span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span></span>
<span class="line"><span style="color:#E1E4E8;">      line </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Compiled from </span><span style="color:#032F62;">&quot;StringExample.java&quot;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">com</span><span style="color:#24292E;">.lagou.interview.StringExample {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> com.lagou.interview.</span><span style="color:#6F42C1;">StringExample</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_0</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokespecial #</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    LineNumberTable</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      line </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(java.lang.</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]);</span></span>
<span class="line"><span style="color:#24292E;">    Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ldc           #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// String Java</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_1</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ldc           #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// String Java</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_2</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> get</span><span style="color:#D73A49;">static</span><span style="color:#24292E;">     #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_2</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> if_acmpne     </span><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iconst_1</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">15</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">goto</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">19</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iconst_0</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/io/PrintStream.println:(Z)V</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    LineNumberTable</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      line </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">      line </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">      line </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;">      line </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从编译代码 #2 可以看出，代码 &quot;Ja&quot;+&quot;va&quot; 被直接编译成了 &quot;Java&quot; ，因此 s1==s2 的结果才是 true，这就是编译器对字符串优化的结果。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本课时从 String 的源码入手，重点讲了 String 的构造方法、equals() 方法和 compareTo() 方法，其中 equals() 重写了 Object 的 equals() 方法，把引用对比改成了字符串值对比，也介绍了 final 修饰 String 的好处，可以提高效率和增强安全性，同时我们还介绍了 String 和 JVM 的一些执行细节。</p>`,8);function y(i,F,u,g,h,d){const n=p("Image");return o(),e("div",null,[c,a(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/72/87/Cgq2xl5ofeSAGmDSAAAxub0kSB4592.png"}),r,a(n,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/0D/BE/Ciqah16RQbaAZ3QkAACUHPvF6fE928.png"}),E])}const v=l(t,[["render",y]]);export{D as __pageData,v as default};
