import{_ as e,j as l,o as t,g as r,k as p,h as a,s,Q as o}from"./chunks/framework.e0c66c3f.js";const w=JSON.parse('{"title":"命令行和图形化界面展示对比 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/047_说透性能测试/(6163) 12  如何把可视化监控也做得酷炫？.md","filePath":"posts/devops/047_说透性能测试/(6163) 12  如何把可视化监控也做得酷炫？.md","lastUpdated":1696338709000}'),c={name:"posts/devops/047_说透性能测试/(6163) 12  如何把可视化监控也做得酷炫？.md"},i=s("p",null,"前面两讲分别讲解了硬件监控、链路监控以及相关的报警机制。一些同学在学习硬件监控的过程中可以发现，命令行操作反馈迅速及时，指哪儿打哪儿，非常灵活便捷，但并不是所有同学都需要或者都有权限直接在服务器上进行操作。而且很多中大型互联网公司是大型的服务集群，通过命令行去发现每台服务器的问题并不现实，所以很多企业都会采用大屏的图形化监控。在页面上根据自己的需要进行条件筛选，这样不仅简单、清晰、直观，而且能够很方便地向团队成员传递监控的实时信息。",-1),d=s("p",null,"所以作为一位优秀的性能测试工程师，你不仅仅需要掌握命令行监控是如何操作的，也需要了解监控大屏是如何制作的，二者可以说是相互补充的。",-1),y=s("p",null,"这一讲我们就来讲解可视化监控，你可以认为它是一节实操课，需要提前准备好你的服务器环境（推荐 CentOS 7.0），跟着我的步骤一步步进行就可以完成酷炫的监控报表。",-1),E=s("h3",{id:"命令行和图形化界面展示对比",tabindex:"-1"},[a("命令行和图形化界面展示对比 "),s("a",{class:"header-anchor",href:"#命令行和图形化界面展示对比","aria-label":'Permalink to "命令行和图形化界面展示对比"'},"​")],-1),g=s("p",null,"对于初学者而言，你可能并不能从上述文字中感受到命令行和图形化界面展示的区别，那么我用两张图来对比下。",-1),h=s("p",null,"图 1：命令行方式",-1),_=o('<p>图 2：可视化监控大屏</p><p>我想绝大部分还是更愿意看图 2 的可视化监控大屏，本讲的开头也说了命令行监控和可视化监控是一种互补的形式，这就代表两种方式各有千秋。可视化监控除了直观外，我认为还有如下两点优势。</p><p><strong>（1）信息高度集中</strong></p><p>可视化监控大屏一般会根据不同的机器提供不同的维度，比如图 2 就是其中一台机器的各类监控信息汇总，可以说信息多元且海量，我们并不能在同一时间将所有机器的具体信息都看到。而可视化方式可以通过时间维度去追溯历史数据，这相对于命令行基于碎片时间收集的信息要全面很多，很方便后续的复盘或者追踪。</p><p><strong>（2）加速信息传递效率</strong></p><p><strong>大屏的方式也是共享的方式</strong>，可以更快速地把信息传递给项目其他成员，每位成员可以通过大屏的链接去访问，自由选择自己所需要的信息，而且可以通过展现出来的趋势预判会触发的阈值以达到提前发现风险的效果。</p><h3 id="promethues-exporter-grafana" tabindex="-1">Promethues + Exporter + Grafana <a class="header-anchor" href="#promethues-exporter-grafana" aria-label="Permalink to &quot;Promethues + Exporter + Grafana&quot;">​</a></h3><p>大屏的监控并不算新概念，可以说各类方案层出不穷，老牌的监控工具如 Zabbix、Nagios 等，但随着互联网的发展，越来越多高性能且展示酷炫的方案应运而生，其中以 <strong>Promethues + Exporter + Grafana</strong> 为主的通用方案受到普遍欢迎。</p><p><strong>首先来解释下 Promethues + Exporter + Grafana 这套组件的基本作用</strong>。</p><ul><li><p>Prometheus：既然 Exporter 作为 agent，那必然有一套中心化的数据采集存储组件，这个组件就是 Promethues，它通过接收 Exporter 采集的数据，并按照一定的规则进行计算整合，通过 AlertManager 设置报警规则，达到触发条件后就发送报警信息。</p></li><li><p>Exporter：用于采集服务器中的<strong>监控数据</strong>，比如对服务器基础性能进行监控的 node_exporter 插件，也可以理解为 agent。</p></li><li><p>Grafana：用于数据的<strong>渲染展现</strong> ，可以展示得非常酷炫，如果仔细阅读过<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=600#/detail/pc?id=6154" target="_blank" rel="noreferrer">《03 | 构建并执行 JMeter 脚本的正确姿势》</a>，相信你对 Grafana 已经有了一定的了解。</p></li></ul><p>我们再用下面这张图来总结下这个过程。</p>',11),u=o('<p>图 3：组件流程图</p><p>那可能有同学提问了，这套组件除了针对<strong>硬件</strong> 进行监控，对于一些<strong>中间件</strong> 或者<strong>数据库</strong>的监控也可以吗？</p><p>答案是肯定的，根据 Exporter 的不同，你可以监控不同的组件，这也是这套监控最灵活的部分，<strong>不同的 Exprter 可以达到不同的监控目的和效果</strong>。</p><p>接下来我就分别以<strong>监控服务器硬件</strong> 和<strong>数据库</strong>这两个例子来讲述这套体系的搭建以及使用技巧。</p><h3 id="如何打造硬件资源报表" tabindex="-1">如何打造硬件资源报表？ <a class="header-anchor" href="#如何打造硬件资源报表" aria-label="Permalink to &quot;如何打造硬件资源报表？&quot;">​</a></h3><h4 id="第一步安装-node-exporter" tabindex="-1">第一步安装 node_exporter <a class="header-anchor" href="#第一步安装-node-exporter" aria-label="Permalink to &quot;第一步安装 node_exporter&quot;">​</a></h4><p>通过对上文的学习，你应该知道关键部分是如何选择 Exporter，其中 node_exporter 就实现了对 Linux 操作系统中 CPU 使用、负载、磁盘空间、磁盘等待、网络传输等详尽数据的采集。</p><p>接着我就带你来看如何安装部署，比如你需要在 A、B、C 三台机器上同时监控，那必须都安装node_exporter 插件。我先以一台机器为例，带你安装下 node_exporter，使用 wget 直接下载就可以，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wget </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wget </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span></span></code></pre></div><p>然后解压如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar zxvf node_exporter</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.18</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">.linux</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">amd64.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar zxvf node_exporter</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.18</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">.linux</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">amd64.tar.gz</span></span></code></pre></div><p>再进入相应的文件夹，使用后台启动方式开启服务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">nohup .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_exporter </span><span style="color:#F97583;">&amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">nohup .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_exporter </span><span style="color:#D73A49;">&amp;</span></span></code></pre></div><p>当启动完成之后，可以用 ip:9100 的方式打开页面，如下所示，即认为 node_exporter 安装成功了。</p>',14),m=o(`<p>图 4：node_exporter 安装示意图</p><p>我们点击 Metrics 可以查看具体的采集信息，部分展示内容如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># HELP node_cpu_seconds_total Seconds the cpus spent in each mode</span></span>
<span class="line"><span style="color:#E1E4E8;"># TYPE node_cpu_seconds_total counter</span></span>
<span class="line"><span style="color:#E1E4E8;">node_cpu_seconds_total{cpu</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,mode</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;idle&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">995721.03</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># HELP node_cpu_seconds_total Seconds the cpus spent in each mode</span></span>
<span class="line"><span style="color:#24292E;"># TYPE node_cpu_seconds_total counter</span></span>
<span class="line"><span style="color:#24292E;">node_cpu_seconds_total{cpu</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,mode</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;idle&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">995721.03</span></span></code></pre></div><ul><li><p><strong>HELP</strong>是解释下面指标的含义，相当于协助文档；</p></li><li><p><strong>TYPE</strong>用于解释指标的数据类型；</p></li><li><p>下面的信息是具体的统计信息，比如 node_cpu_seconds_total{cpu=&quot;0&quot;,mode=&quot;idle&quot;} 就是指从开机到现在的 cpu0 的空闲时间。</p></li></ul><p>你可以自行安装下 node_exporter，就能看到 Metrics 中的海量数据了。</p><h4 id="第二步安装-prometheus" tabindex="-1">第二步安装 Prometheus <a class="header-anchor" href="#第二步安装-prometheus" aria-label="Permalink to &quot;第二步安装 Prometheus&quot;">​</a></h4><p>Prometheus 作为<strong>时间序列数据库</strong>，提供本地存储和分布式存储，又支持多种数据大盘，而且性能优异，受到市场的欢迎。阿里云也全面接入了 Promethues 的生态，提供了更多开箱即用的组件。</p><p><strong>首先我们使用如下命令进行下载：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wget </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/prometheus/prometheus/releases/download/v2.15.1/prometheus-2.15.1.linux-amd64.tar.gz</span></span>
<span class="line"><span style="color:#E1E4E8;">tar zxvf prometheus</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2.15</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">.linux</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">amd64.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wget </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/prometheus/prometheus/releases/download/v2.15.1/prometheus-2.15.1.linux-amd64.tar.gz</span></span>
<span class="line"><span style="color:#24292E;">tar zxvf prometheus</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2.15</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">.linux</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">amd64.tar.gz</span></span></code></pre></div><p>然后进入解压文件夹 prometheus-2.15.1.linux-amd64，查看主要的配置文件 prometheus.yml。</p><p>该文件主要有四个核心节点，分别是 global、alerting、rule_files 和 scrape_configs。</p><ul><li><p>global：<strong>全局配置</strong>，比如每次数据收集的间隔、规则地扫描数据的间隔。</p></li><li><p>alerting：<strong>设置告警的插件</strong>，在这里会设定 alertmanager 这个插件。</p></li><li><p>rule_files：具体的<strong>报警规则设置</strong> ，比如基于什么指标进行报警，类似于<strong>触发器</strong>。</p></li><li><p>scrape_configs：<strong>采集数据的对象</strong>，job_name、target 以及 job_name 是配置主机的名称，target 是你安装的 Exporter 地址。</p></li></ul><p>然后我们需要增加本地的监控配置，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> job_name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cctester&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    static_configs</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;127.0.0.1:9100&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> job_name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cctester&#39;</span></span>
<span class="line"><span style="color:#24292E;">    static_configs</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;127.0.0.1:9100&#39;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>再启动 Prometheus：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">nohup .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">prometheus </span><span style="color:#F97583;">&amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">nohup .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">prometheus </span><span style="color:#D73A49;">&amp;</span></span></code></pre></div><p>访问 <a href="http://ip:9090/targets" target="_blank" rel="noreferrer">http://ip:9090/targets</a>，根据自己的实际情况填写 ip，出现如下截图表示安装成功。</p>`,17),v=s("p",null,"图 5：Promethues 成功安装示意图",-1),A=s("h4",{id:"第三步是安装-grafana",tabindex:"-1"},[a("第三步是安装 Grafana "),s("a",{class:"header-anchor",href:"#第三步是安装-grafana","aria-label":'Permalink to "第三步是安装 Grafana"'},"​")],-1),b=s("p",null,"这部分第 03 讲已经讲解过，我们就不再赘述，安装完成 Grafana 之后，添加 Prometheus 数据源，测试并保存即可。",-1),x=s("p",null,"图 6：Grafana 添加 Promethues 数据源",-1),f=s("p",null,[a("接着导入官方提供的"),s("strong",null,"展示模板"),a(" 就可以，"),s("a",{href:"https://grafana.com/dashboards/8919",target:"_blank",rel:"noreferrer"},"点击链接"),a("。你可以自行选择相应的版本进行下载，也可以直接填写模板 ID，导入完成之后，便可以看到大屏了，示意图如下：")],-1),F=o(`<p>图 7：可视化大屏示意</p><p>到目前为止，一款基于 Linux 硬件监控的大屏就打造完成了。</p><h3 id="如何可视化监控数据库" tabindex="-1">如何可视化监控数据库？ <a class="header-anchor" href="#如何可视化监控数据库" aria-label="Permalink to &quot;如何可视化监控数据库？&quot;">​</a></h3><p>通过以上的讲解，你可以思考下如果做 MySQL 的监控，哪些组件是可以通用的，需要改变的组件又有哪些。</p><p>能够思考清楚这些问题，我想你就可以基于这套组件打造出属于你自己的监控系统了。</p><p>对于监控来说，关键是面对不同的监控对象是怎么采集和怎么展示的，所以需要改变的是你的采集的 Export 和展示的模板，而<strong>Promethues + Exporter + Grafana</strong>这套组件的社区又非常丰富，所以我们可以快速实现这个需求。</p><p>下面我们下载基于 MySQL 监控的 Exporter，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wget https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wget https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz</span></span></code></pre></div><p>下载完成之后对如下命令进行解压：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar zxvf mysqld_exporter</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.12</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">.linux</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">amd64.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar zxvf mysqld_exporter</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.12</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">.linux</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">amd64.tar.gz</span></span></code></pre></div><p>对于 MySQL 的监控，还需要创建一个配置文件，比如我在解压后的文件夹下创建 my.cnf，来看看 my.cnf 有哪些内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[client]</span></span>
<span class="line"><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">password</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span></span>
<span class="line"><span style="color:#E1E4E8;">port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3306</span></span>
<span class="line"><span style="color:#E1E4E8;">host</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[client]</span></span>
<span class="line"><span style="color:#24292E;">user</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">password</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span></span>
<span class="line"><span style="color:#24292E;">port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3306</span></span>
<span class="line"><span style="color:#24292E;">host</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span></span></code></pre></div><p>可以看出 my.cnf 里的配置信息就是数据库的连接信息，你可以根据自己的实际部署情况进行配置，配置完成之后就可以启动了，启动命令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">nohup .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mysqld_exporter </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">config.my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cnf</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">my.cnf </span><span style="color:#F97583;">&amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">nohup .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mysqld_exporter </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">config.my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cnf</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">my.cnf </span><span style="color:#D73A49;">&amp;</span></span></code></pre></div><p>然后通过网页访问来验证是否部署成功，访问地址一般是 ip:9104，可以看到如下展示信息：</p>`,15),C=o(`<p>点击 Meteric 你也可以发现很多手机端 MySQL 监控信息的参数选项，部分信息如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># HELP mysql_global_variables_max_connections Generic gauge metric from SHOW GLOBAL VARIABLES.</span></span>
<span class="line"><span style="color:#E1E4E8;"># TYPE mysql_global_variables_max_connections gauge</span></span>
<span class="line"><span style="color:#E1E4E8;">mysql_global_variables_max_connections </span><span style="color:#79B8FF;">151</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># HELP mysql_global_variables_max_connections Generic gauge metric from SHOW GLOBAL VARIABLES.</span></span>
<span class="line"><span style="color:#24292E;"># TYPE mysql_global_variables_max_connections gauge</span></span>
<span class="line"><span style="color:#24292E;">mysql_global_variables_max_connections </span><span style="color:#005CC5;">151</span></span></code></pre></div><p>这个配置表示了最大连接数的配置信息，如果能看到这一步信息也说明 mysqld_exporter 安装成功了，接着增加 promethues.yml 里的 MySQL 配置节点，示意如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> job_name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mysql&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    static_configs</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;127.0.0.1:9104&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> job_name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mysql&#39;</span></span>
<span class="line"><span style="color:#24292E;">    static_configs</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;127.0.0.1:9104&#39;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>关于<strong>Grafana 展示，</strong> 选择 Grafana 的 MySQL 监控相关模板导入即可，<a href="https://grafana.com/grafana/dashboards/11323" target="_blank" rel="noreferrer">点击模板链接</a>。下载并导入后就可以了，MySQL 展示效果如下图所示。</p>`,5),D=o('<p>图 8：mysql 可视化监控示意图</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲主要讲述了<strong>Promethues + Exporter + Grafana</strong>的监控方案：</p><ul><li><p>首先需要掌握的是每种组件核心的意义以及使用方法，而不能满足于机械地执行完成上述步骤；</p></li><li><p>然后我是以监控硬件服务器资源和 MySQL 监控来举例，分别代表了硬件层和服务层两个维度，通过这两个例子让你更直观地明白哪些组件是可以复用的，不同的监控目标是否有配套的社区可以给你提供帮助；</p></li><li><p>再者我更想传递的信息是这套监控体系不仅仅是适用于我举的示例，它更是一揽子解决方案，比如说监控 Redis、JVM 等，它同样也是适用的。通过这套方法完全可以解决可视化监控层面的大部分需求，希望你能够多多实践，扫除你们公司可能存在的监控&quot;死角&quot;。</p></li></ul><p>最后给你留一个思考题，你所在的公司监控是怎么做的，有什么优点和缺点？欢迎在评论区给出你的留言。</p><p>下一讲我将带你学习 Docker 的制作、运行以及监控，通过下一讲的学习你可以更多地了解容器相关的技术。</p>',6);function k(P,q,T,S,B,j){const n=l("Image");return t(),r("div",null,[i,d,y,E,g,p(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/02/F0/Cgp9HWAeQEGAH4ObAAIZnEuEI9M121.png"}),a(),h,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/02/F0/Cgp9HWAeQEiAEWf_AAXTN9yw9Y0063.png"}),a(),_,p(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/04/6F/Cgp9HWArp46AD24-AABjRPJ8pcA864.png"}),a(),u,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/02/F0/Cgp9HWAeQHCARf2SAAAPsbMo84s659.png"}),a(),m,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/02/ED/CioPOWAeQH2AP6pBAABkNC-TloM735.png"}),a(),v,A,b,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M01/02/F0/Cgp9HWAeQIiAJMERAACXSmGUo8w948.png"}),a(),x,f,p(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M01/02/ED/CioPOWAeQJOAU5eUAAOCvFyaK3E786.png"}),a(),F,p(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/02/ED/CioPOWAeQKGAUMGKAAAem_X3hX0515.png"}),C,p(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M01/02/F0/Cgp9HWAeQMKAP1owAAJD8a1CZnw412.png"}),a(),D])}const G=e(c,[["render",k]]);export{w as __pageData,G as default};
