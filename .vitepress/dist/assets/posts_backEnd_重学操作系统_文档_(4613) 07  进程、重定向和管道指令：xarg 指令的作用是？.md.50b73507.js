import{_ as n,j as l,o as c,g as t,k as a,Q as o,s as p,h as e}from"./chunks/framework.e0c66c3f.js";const V=JSON.parse('{"title":"进程 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/重学操作系统_文档/(4613) 07  进程、重定向和管道指令：xarg 指令的作用是？.md","filePath":"posts/backEnd/重学操作系统_文档/(4613) 07  进程、重定向和管道指令：xarg 指令的作用是？.md","lastUpdated":1696338709000}'),i={name:"posts/backEnd/重学操作系统_文档/(4613) 07  进程、重定向和管道指令：xarg 指令的作用是？.md"},r=o('<p>在面试中，我们经常会遇到面试官询问 Linux 指令，06 课时中讲到的<code>rm -rf /</code>属于比较简单的题目，相当于小学难度。<strong>这节课给你带来一道初中难度的题目：</strong> <code>xargs</code><strong>指令的作用是什么</strong>？</p><p>通常这个指令是和管道一起使用，因此就引出了这节课的主题：管道。为了理解管道，和学习管道相关的内容，还有一些概念需要你理解，比如：进程、标准流和重定向。好的，接下来请和我一起，把这块知识一网打尽！</p><h3 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h3><p>为了弄清楚这节课程的内容，也就是管道，我们先来讨论一下进程。</p><p>我们知道，应用的可执行文件是放在文件系统里，把可执行文件启动，就会在操作系统里（具体来说是内存中）形成一个应用的副本，这个副本就是进程。</p><p><em><strong>插一个小知识，以后你再遇到面试题：什么是进程？</strong></em></p><p><em><strong>可以回答：进程是应用的执行副本；而不要回答进程是操作系统分配资源的最小单位。前者是定义，后者是作用</strong></em>*。*</p><p><strong>ps</strong></p><p>如果你要看当前的进程，可以用<code>ps</code>指令。p 代表 processes，也就是进程；s 代表 snapshot，也就是快照。所谓快照，就是像拍照一样。</p>',9),d=o("<p>如上图所示，我启动了两个进程，<code>ps</code>和<code>bash</code>。ps 就是我刚刚启动的，被<code>ps</code>自己捕捉到了；<code>bash</code>是因为我开了这个控制台，执行的<code>shell</code>是<code>bash</code>。</p><p>当然操作系统也不可能只有这么几个进程，这是因为不带任何参数的<code>ps</code>指令显示的是同一个电传打字机（TTY上）的进程。TTY 这个概念是一个历史的概念，过去用来传递信息，现在已经被传真、邮件、微信等取代。</p><p>操作系统上的 TTY 是一个输入输出终端的概念，比如用户打开 bash，操作系统就为用户分配了一个输入输出终端。没有加任何参数的<code>ps</code>只显示在同一个 TTY 的进程。</p><p>如果想看到所有的进程，可以用<code>ps -e</code>，<code>-e</code>没有特殊含义，只是为了和<code>-A</code>区分开。我们通常不直接用<code>ps -e</code>而是用<code>ps -ef</code>，这是因为<code>-f</code>可以带上更多的描述字段，如下图所示：</p>",4),g=o("<ul><li><p>UID 指进程的所有者；</p></li><li><p>PID 是进程的唯一标识；</p></li><li><p>PPID 是进程的父进程 ID；</p></li><li><p>C 是 CPU 的利用率（就是 CPU 占用）；</p></li><li><p>STIME 是开始时间；</p></li><li><p>TTY 是进程所在的 TTY，如果没有 TTY 就是 ？号；</p></li><li><p>TIME；</p></li><li><p>CMD 是进程启动时的命令，如果不是一个 Shell 命令，而是用方括号括起来，那就是系统进程或者内核过程。</p></li></ul><p>另外一个用得比较多的是<code>ps aux</code>，它和<code>ps -ef</code>能力差不多，但是是 BSD 风格的。就是加州伯克利分校研发的 Unix 分支版本的衍生风格，这种风格其实不太好描述，我截了一张图，你可以体会一下：</p>",2),_=o('<p>在 BSD 风格中有些字段的叫法和含义变了，如果你感兴趣，可以作为课后延伸学习的内容。</p><h4 id="top" tabindex="-1">top <a class="header-anchor" href="#top" aria-label="Permalink to &quot;top&quot;">​</a></h4><p>另外还有一个和<code>ps</code>能力差不多，但是显示的不是快照而是实时更新数据的<code>top</code>指令。因为自带的<code>top</code>显示的内容有点少， 所以我喜欢用一个叫作<code>htop</code>的指令，具体的安装全方法我会在 10 | 软件的安装： 编译安装和包管理器安装有什么优势和劣势？中给你介绍。本课时，我们先看一下使用效果，如下图所示：</p>',3),E=o('<p>以上，我们一起把进程学了一个皮毛，更多关于进程的内容我们会在模块四：进程和线程中讨论。</p><h3 id="管道-pipeline" tabindex="-1">管道（Pipeline） <a class="header-anchor" href="#管道-pipeline" aria-label="Permalink to &quot;管道（Pipeline）&quot;">​</a></h3><p>现在你已经掌握了一点点进程的基础，下面我们来学习管道，管道（Pipeline）的作用是在命令和命令之间，传递数据。比如说一个命令的结果，就可以作为另一个命令的输入。我们了解了进程，所以这里说的命令就是进程。更准确地说，管道在进程间传递数据。</p><h4 id="输入输出流" tabindex="-1">输入输出流 <a class="header-anchor" href="#输入输出流" aria-label="Permalink to &quot;输入输出流&quot;">​</a></h4><p>每个进程拥有自己的标准输入流、标准输出流、标准错误流。</p><p>这几个标准流说起来很复杂，但其实都是文件。</p><ul><li><p>标准输入流（用 0 表示）可以作为进程执行的上下文（进程执行可以从输入流中获取数据）。</p></li><li><p>标准输出流（用 1 表示）中写入的结果会被打印到屏幕上。</p></li><li><p>如果进程在执行过程中发生异常，那么异常信息会被记录到标准错误流（用 2 表示）中。</p></li></ul><p><strong>重定向</strong></p><p>我们执行一个指令，比如<code>ls -l</code>，结果会写入标准输出流，进而被打印。这时可以用重定向符将结果重定向到一个文件，比如说<code>ls -l &gt; out</code>，这样<code>out</code>文件就会有<code>ls -l</code>的结果；而屏幕上也不会再打印<code>ls -l</code>的结果。</p>',9),h=o('<p>具体来说<code>&gt;</code>符号叫作覆盖重定向；<code>&gt;&gt;</code>叫作追加重定向。<code>&gt;</code>每次都会把目标文件覆盖，<code>&gt;&gt;</code>会在目标文件中追加。比如你每次启动一个程序日志都写入<code>/var/log/somelogfile</code>中，可以这样操作，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">start.sh </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">log</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">somelogfile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">start.sh </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">log</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">somelogfile</span></span></code></pre></div><p>经过这样的操作后，每次执行程序日志就不会被覆盖了。</p><p>另外还有一种情况，比如我们输入:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ls1 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ls1 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> out</span></span></code></pre></div><p>结果并不会存入<code>out</code>文件，因为<code>ls1</code>指令是不存在的。结果会输出到标准错误流中，仍然在屏幕上。这里我们可以把标准错误流也重定向到标准输出流，然后再重定向到文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ls1 </span><span style="color:#F97583;">&amp;&gt;</span><span style="color:#E1E4E8;"> out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ls1 </span><span style="color:#D73A49;">&amp;&gt;</span><span style="color:#24292E;"> out</span></span></code></pre></div><p>这个写法等价于：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ls1 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> out </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">&gt;&amp;</span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ls1 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> out </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">&gt;&amp;</span><span style="color:#005CC5;">1</span></span></code></pre></div>',9),y=o('<p>相当于把<code>ls1</code>的标准输出流重定向到<code>out</code>，因为<code>ls1 &gt; out</code>出错了，所以标准错误流被定向到了标准输出流。<code>&amp;</code>代表一种引用关系，具体代表的是<code>ls1 &gt;out</code>的标准输出流。</p><h4 id="管道的作用和分类" tabindex="-1">管道的作用和分类 <a class="header-anchor" href="#管道的作用和分类" aria-label="Permalink to &quot;管道的作用和分类&quot;">​</a></h4><p>有了进程和重定向的知识，接下来我们梳理下管道的作用。管道（Pipeline）将一个进程的输出流定向到另一个进程的输入流，就像水管一样，作用就是把这两个文件接起来。如果一个进程输出了一个字符 X，那么另一个进程就会获得 X 这个输入。</p><p><strong>管道和重定向很像，但是管道是一个连接一个进行计算，重定向是将一个文件的内容定向到另一个文件，这二者经常会结合使用</strong>。</p><p>Linux 中的管道也是文件，有两种类型的管道：</p><ol><li><p>匿名管道（Unnamed Pipeline），这种管道也在文件系统中，但是它只是一个存储节点，不属于任何一个目录。说白了，就是没有路径。</p></li><li><p>命名管道（Named Pipeline），这种管道就是一个文件，有自己的路径。</p></li></ol><h4 id="fifo" tabindex="-1">FIFO <a class="header-anchor" href="#fifo" aria-label="Permalink to &quot;FIFO&quot;">​</a></h4><p>管道具有 FIFO（First In First Out），FIFO 和排队场景一样，先排到的先获得。所以先流入管道文件的数据，也会先流出去传递给管道下游的进程。</p><h3 id="使用场景分析" tabindex="-1">使用场景分析 <a class="header-anchor" href="#使用场景分析" aria-label="Permalink to &quot;使用场景分析&quot;">​</a></h3><p>接下来我们以多个场景举例帮助你深入学习管道。</p><h4 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h4><p>比如我们用<code>ls</code>，希望按照文件名排序倒序，可以使用匿名管道，将<code>ls</code>的结果传递给<code>sort</code>指令去排序。你看，这样<code>ls</code>的开发者就不用关心排序问题了。</p>',12),u=o(`<h4 id="去重" tabindex="-1">去重 <a class="header-anchor" href="#去重" aria-label="Permalink to &quot;去重&quot;">​</a></h4><p>另一个比较常见的场景是去重，比如有一个字典文件，里面都是词语。如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Apple</span></span>
<span class="line"><span style="color:#E1E4E8;">Banana</span></span>
<span class="line"><span style="color:#E1E4E8;">Apple</span></span>
<span class="line"><span style="color:#E1E4E8;">Banana</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Apple</span></span>
<span class="line"><span style="color:#24292E;">Banana</span></span>
<span class="line"><span style="color:#24292E;">Apple</span></span>
<span class="line"><span style="color:#24292E;">Banana</span></span>
<span class="line"><span style="color:#24292E;">......</span></span></code></pre></div><p>如果我们想要去重可以使用<code>uniq</code>指令，<code>uniq</code>指令能够找到文件中相邻的重复行，然后去重。但是我们上面的文件重复行是交替的，所以不可以直接用<code>uniq</code>，因此可以先<code>sort</code>这个文件，然后利用管道将<code>sort</code>的结果重定向到<code>uniq</code>指令。指令如下：</p>`,4),A=o('<h4 id="筛选" tabindex="-1">筛选 <a class="header-anchor" href="#筛选" aria-label="Permalink to &quot;筛选&quot;">​</a></h4><p>有时候我们想根据正则模式筛选对应的内容。比如说我们想找到项目文件下所有文件名中含有<code>Spring</code>的文件。就可以利用<code>grep</code>指令，操作如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">find .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> grep Spring</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">find .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> grep Spring</span></span></code></pre></div><p><code>find ./</code>递归列出当前目录下所有目录中的文件。<code>grep</code>从<code>find</code>的输出流中找出含有<code>Spring</code>关键字的行。</p><p>如果我们希望包含<code>Spring</code>但不包含<code>MyBatis</code>就可以这样操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">find .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> grep Spring </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> grep </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v MyBatis</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">find .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> grep Spring </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> grep </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v MyBatis</span></span></code></pre></div><p><code>grep -v</code>是匹配不包含 MyBatis 的结果。</p><h4 id="数行数" tabindex="-1">数行数 <a class="header-anchor" href="#数行数" aria-label="Permalink to &quot;数行数&quot;">​</a></h4><p>还有一个比较常见的场景是数行数。比如你写了一个 Java 文件想知道里面有多少行，就可以使用<code>wc -l</code>指令，如下所示：</p>',9),v=p("p",null,[e("但是如果你想知道当前目录下有多少个文件，可以用"),p("code",null,"ls | wc -l"),e("，如下所示：")],-1),T=o('<p><strong>接下来请你思考一个问题：我们如何知道当前</strong> <code>java</code><strong>的项目目录下有多少行代码</strong>？</p><p>提示一下。你可以使用下面这个指令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">find </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#9ECBFF;">&quot;.java&quot;</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> wc </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">find </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#032F62;">&quot;.java&quot;</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> wc </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l</span></span></code></pre></div><p>快去自己动手写一写吧，你在尝试的过程中如果遇到什么问题，也可以写在留言区，我会逐一为你解答。</p><h4 id="中间结果" tabindex="-1">中间结果 <a class="header-anchor" href="#中间结果" aria-label="Permalink to &quot;中间结果&quot;">​</a></h4><p>管道一个接着一个，是一个计算逻辑。有时候我们想要把中间的结果保存下来，这就需要用到<code>tee</code>指令。<code>tee</code>指令从标准输入流中读取数据到标准输出流。</p><p>这时候，你可能会问： 老师， 这不是什么都没做吗？</p><p>别急，<code>tee</code>还有一个能力，就是自己利用这个过程把输入流中读取到的数据存到文件中。比如下面这条指令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">find .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#9ECBFF;">&quot;*.java&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> tee JavaList </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> grep Spring</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">find .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#032F62;">&quot;*.java&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> tee JavaList </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> grep Spring</span></span></code></pre></div><p>这句指令的意思是从当前目录中找到所有含有 Spring 关键字的 Java 文件。tee 本身不影响指令的执行，但是 tee 会把 find 指令的结果保存到 JavaList 文件中。</p><p><code>tee</code>这个执行就像英文字母中的 T 一样，连通管道两端，下面又开了口。这个开口，在函数式编程里面叫作副作用。</p><h4 id="xargs" tabindex="-1">xargs <a class="header-anchor" href="#xargs" aria-label="Permalink to &quot;xargs&quot;">​</a></h4><p>上面我们学习的内容难度，已经由小学 1 年级攀升到了小学 6 年级，最后我们来看看初中难度的<code>xargs</code>指令。</p><p><code>xargs</code>指令从标准数据流中构造并执行一行行的指令。<code>xargs</code>从输入流获取字符串，然后利用空白、换行符等切割字符串，在这些字符串的基础上构造指令，最后一行行执行这些指令。</p><p>举个例子，如果我们重命名当前目录下的所有 .a 的文件，想在这些文件前面加一个前缀<code>prefix_</code>。比如说<code>x.a</code>文件需要重命名成<code>prefix_x.a</code>，我们就可以用<code>xargs</code>指令构造模块化的指令。</p><p>现在我们有<code>x.a``y.a``z.a</code>三个文件，如下图所示：</p>',16),m=p("p",null,"然后使用下图中的指令构造我们需要的指令：",-1),b=o("<ul><li><p>我们用<code>ls</code>找到所有的文件；</p></li><li><p><code>-I</code>参数是查找替换符，这里我们用<code>GG</code>替代<code>ls</code>找到的结果；<code>-I GG</code>后面的字符串 GG 会被替换为<code>x.a``x.b</code>或<code>x.z</code>；</p></li><li><p><code>echo</code>是一个在命令行打印字符串的指令。使用<code>echo</code>主要是为了安全，帮助我们检查指令是否有错误。</p></li></ul><p>我们用<code>xargs</code>构造了 3 条指令。这里我再多讲一个词，叫作样板代码。如果你没有用<code>xargs</code>指令，而是用一条条<code>mv</code>指令去敲，这样就构成了样板代码。</p><p>最后去掉 echo，就是我们想要的结果，如下所示：</p>",3),C=o('<h3 id="管道文件" tabindex="-1">管道文件 <a class="header-anchor" href="#管道文件" aria-label="Permalink to &quot;管道文件&quot;">​</a></h3><p>上面我们花了较长的一段时间讨论匿名管道，用<code>|</code>就可以创造和使用。匿名管道也是利用了文件系统的能力，是一种文件结构。当你学到模块六文件系统的内容，会知道匿名管道拥有一个自己的<code>inode</code>，但不属于任何一个文件夹。</p><p>还有一种管道叫作命名管道（Named Pipeline）。命名管道是要挂到文件夹中的，因此需要创建。用<code>mkfifo</code>指令可以创建一个命名管道，下面我们来创建一个叫作<code>pipe1</code>的命名管道，如下图所示：</p>',3),k=o('<p>命名管道和匿名管道能力类似，可以连接一个输出流到另一个输入流，也是 First In First Out。</p><p>当执行<code>cat pipe1</code>的时候，你可以观察到，当前的终端处于等待状态。因为我们<code>cat pipe1</code>的时候<code>pipe1</code>中没有内容。</p><p>如果这个时候我们再找一个终端去写一点东西到<code>pipe</code>中，比如说:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">echo </span><span style="color:#9ECBFF;">&quot;XXX&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> pipe1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">echo </span><span style="color:#032F62;">&quot;XXX&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> pipe1</span></span></code></pre></div><p>这个时候，<code>cat pipe1</code>就会返回，并打印出<code>xxx</code>，如下所示：</p>',5),D=o(`<p>我们可以像上图那样演示这段程序，在<code>cat pipe1</code>后面增加了一个<code>&amp;</code>符号。这个<code>&amp;</code>符号代表指令在后台执行，不会阻塞用户继续输入。然后我们通过<code>echo</code>指令往<code>pipe1</code>中写入东西，接着就会看到<code>xxx</code>被打印出来。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这节课我们为了学习管道，先简单接触了进程的概念，然后学习了重定向。之后我们学习了匿名管道的应用场景，匿名管道帮助我们把 Linux 指令串联起来形成很强的计算能力。特别是<code>xargs</code>指令支持模板化的生成指令，拓展了指令的能力。最后我们还学习了命名管道，命名管道让我们可以真实拿到一个管道文件，让多个程序之间可以方便地进行通信。</p><p><strong>那么通过这节课的学习，你<strong><strong>现在可以</strong></strong>来回答本节关联的面试题目：xargs 的作用了吗？</strong></p><p>老规矩，请你先在脑海里构思下给面试官的表述，并把你的思考写在留言区，然后再来看我接下来的分析。</p><p><strong>【解析】</strong> xargs 将标准输入流中的字符串分割成一条条子字符串，然后再按照我们自己想要的方式构建成一条条指令，大大拓展了 Linux 指令的能力。</p><p>比如我们可以用来按照某种特定的方式逐个处理一个目录下所有的文件；根据一个 IP 地址列表逐个 ping 这些 IP，收集到每个 IP 地址的延迟等。</p><h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><p><strong>最后我再给你出一道高中难度的指令题目。请问下面这段 Shell 程序的作用是什么</strong>？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mkfifo pipe1</span></span>
<span class="line"><span style="color:#E1E4E8;">mkfifo pipe2</span></span>
<span class="line"><span style="color:#E1E4E8;">echo </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n run </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> cat </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> pipe1 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> pipe2 </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">cat </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pipe2 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> pipe1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mkfifo pipe1</span></span>
<span class="line"><span style="color:#24292E;">mkfifo pipe2</span></span>
<span class="line"><span style="color:#24292E;">echo </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n run </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> cat </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> pipe1 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> pipe2 </span><span style="color:#D73A49;">&amp;</span></span>
<span class="line"><span style="color:#24292E;">cat </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pipe2 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> pipe1</span></span></code></pre></div><p>你可以把你的答案、思路或者课后总结写在留言区，这样可以帮助你产生更多的思考，这也是构建知识体系的一部分。经过长期的积累，相信你会得到意想不到的收获。如果你觉得今天的内容对你有所启发，欢迎分享给身边的朋友。期待看到你的思考！</p><p>小编有话说：</p><p>今天老师带你认识了面试中经常被问到的 Linux 指令，还初步讲解了进程的概念，但关于 Linux 的进阶知识以及最最让人头疼的网络知识，我们无法在一篇文章内讲完。想要了解更多知识，深入到真实互联网项目中学习实战技巧，<a href="https://kaiwu.lagou.com/java_basic.html?u#/index" target="_blank" rel="noreferrer">也可以点击此处，即可跳转至《Java 就业急训营》介绍页面</a>。</p>`,13);function F(P,q,x,S,f,I){const s=l("Image");return c(),t("div",null,[r,a(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/58/00/CgqCHl9twJSAZMbHAADiXX3JRVw649.png"}),d,a(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/57/F5/Ciqc1F9twKuAcx9KAAMttqMWk0U603.png"}),g,a(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/58/00/CgqCHl9twMGAAl8XAAOd-4G_G6U649.png"}),_,a(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/57/F5/Ciqc1F9twNKAbWUxAAjBKXaXn90775.png"}),E,a(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/57/F5/Ciqc1F9twOiAWhAGAAU25o5Gb_s323.png"}),h,a(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/58/00/CgqCHl9twP2AefIFAAL1fMsTbHk961.png"}),y,a(s,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/57/F5/Ciqc1F9twQmAUpYzAADI43WGK9A660.png"}),u,a(s,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/58/00/CgqCHl9twRGAXmhPAACPjv2JnVo451.png"}),A,a(s,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/57/F5/Ciqc1F9twRqAH6ezAAD5iEQBhxE628.png"}),v,a(s,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/57/F5/Ciqc1F9twSCAN0h-AABgIcsEgKI655.png"}),T,a(s,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/58/00/CgqCHl9twTWALpuzAABnixlvrS8980.png"}),m,a(s,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/58/01/CgqCHl9twT-AOUALAAE5FDR8Tiw234.png"}),b,a(s,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/57/F5/Ciqc1F9twUiAOcNlAAEsaaMV4DI747.png"}),C,a(s,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/58/01/CgqCHl9twU-ASY8bAAC7_lc6Pr8814.png"}),k,a(s,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image/M00/58/01/CgqCHl9twViAT-M2AADtPsSTV5c658.png"}),D])}const j=n(i,[["render",F]]);export{V as __pageData,j as default};
