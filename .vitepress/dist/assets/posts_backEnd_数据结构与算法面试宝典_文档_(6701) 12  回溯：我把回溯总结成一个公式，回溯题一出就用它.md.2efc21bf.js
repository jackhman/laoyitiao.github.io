import{_ as o,j as e,o as t,g as c,k as a,Q as l,s,h as p}from"./chunks/framework.e0c66c3f.js";const gs=JSON.parse('{"title":"从一次面试开始 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6701) 12  回溯：我把回溯总结成一个公式，回溯题一出就用它.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6701) 12  回溯：我把回溯总结成一个公式，回溯题一出就用它.md","lastUpdated":null}'),r={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6701) 12  回溯：我把回溯总结成一个公式，回溯题一出就用它.md"},E=l(`<p>回溯算法本质上是一种 DFS 算法，在一些小的数据集上能够找到<strong>最优解</strong>。因此，遇到穷举所有路径的问题时，就需要用到回溯。比如，在一些外卖派单系统中，大数据系统给骑手派单，在某个单位时间内累积的订单总是有限的，此时就可以利用回溯算法求解最优派送时间。</p><p>在互联网公司的面试中，<strong>面试官也会经常考察应聘者对小范围数据找最优解的能力</strong>。此时，回溯就是一个非常适合的考点。</p><p>在本讲中，首先我们会讲清楚回溯的由来，以及回溯算法的 1 个核心和 3 个条件。然后，介绍回溯算法的应用：</p><ul><li><p>排列/组合问题</p></li><li><p>去重排列/组合问题</p></li></ul><p>学完本讲，你将收获&quot;一招鲜&quot;的回溯模板。</p><p>在开始学习之前，我给你提 2 个醒儿：</p><blockquote><ol><li><p>我会从简单的问题开始讲解，哪怕你已经知道很多例题的标准答案，也不妨再跟着我学习一遍，也许会有不一样的感悟。</p></li><li><p>本讲会采用链式推导的方式进行讲解，虽然从一个简单的知识点开始讲述，但请你尽量不要跳着读，这样理解起来会更顺滑。</p></li></ol></blockquote><h3 id="从一次面试开始" tabindex="-1">从一次面试开始 <a class="header-anchor" href="#从一次面试开始" aria-label="Permalink to &quot;从一次面试开始&quot;">​</a></h3><p>在拿出模板之前，我们先进行一场模拟面试。很多面试官喜欢从一个非常简单又细小的问题开始层层推进，逐步加深问题的难度，因此本讲我们也采用这种思路进行讲解。</p><p>注：在面试时，回答简单的问题要非常小心，避免犯错，这样面试官才愿意继续和你深入探讨，后面肯定有条&quot;大鱼&quot;等着你去抓。</p><h4 id="从循环到递归" tabindex="-1">从循环到递归 <a class="header-anchor" href="#从循环到递归" aria-label="Permalink to &quot;从循环到递归&quot;">​</a></h4><p>假设这个简单的问题为：需要打印一个数组。比如给定的数组 A[] = {1,2,3}，那么我们需要打印为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,}</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,}</span></span></code></pre></div><p>此外，面试官还给你提供了一个打印函数，你的实现需要用到它：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 打印数组的[0, i)范围里面的数</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这里给定的A数组必然是有效的</span></span>
<span class="line"><span style="color:#E1E4E8;">  System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> i; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 打印数组的[0, i)范围里面的数</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这里给定的A数组必然是有效的</span></span>
<span class="line"><span style="color:#24292E;">  System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>老司机的故事</strong> ：如果面试官说，你<strong>需要使用</strong> 某个函数，其意就是告诉你<strong>必须要用它</strong>！曾经我有一位朋友在面试中挂掉了，原因就是：面试官指定使用 nextRandomInteger() 函数，他却用了 Math.rand() 库函数，导致最后没能通过面试，所以你一定要吸取经验。</p><p>利用给定的 print() 函数，根据题目要求：你应该可以写出如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">solve</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 打印[0, ..., i)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(A, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 打印[0, ..., i)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(A, i);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当面试官看了你的代码，觉得没有问题之后，又将题目进行了升级。面试官让你将这个代码转换为递归的方式。对于这种一维的递归，想必你也能很快拿下吧。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">solve2</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 不能再递归下去, 递归的终止条件。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 打印[0, ..., i)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 打印后面的</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">solve2</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不能再递归下去, 递归的终止条件。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打印[0, ..., i)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, i);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打印后面的</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">solve2</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>经过前面一小轮的交流，相信你已经明白面试官的考点就是：</p><ul><li><p>循环边界</p></li><li><p>指定函数的使用</p></li><li><p>递归</p></li></ul><h4 id="难度升级-1" tabindex="-1">难度升级 1 <a class="header-anchor" href="#难度升级-1" aria-label="Permalink to &quot;难度升级 1&quot;">​</a></h4><p>面试官一看这些问题都没能难住你，并且还有很多时间，接下来：</p><ul><li><p>希望你在递归的基础上改进代码</p></li><li><p>需要使用一个数据结构 Box 来完成打印操作</p></li></ul><p>这个 Box 数据结构有 push、pop、print 三个函数，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Box</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) { l.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x); }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">() { l.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(l.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> l) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { l.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x); }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">() { l.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(l.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> l) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>老司机的提醒</strong> ：既然面试官提到了&quot;需要使用&quot;，那就是要求你<strong>必须使用</strong>。于是你经过一番琢磨写出如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">solve3</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, Box s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">solve3</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve3</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Box s) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">solve3</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>面试官点了点头，正当你在想为什么没有用到 pop() 函数时，面试官就再次将难度进行升级了。</p><h4 id="难度升级-2" tabindex="-1">难度升级 2 <a class="header-anchor" href="#难度升级-2" aria-label="Permalink to &quot;难度升级 2&quot;">​</a></h4><p>面试官会问：如果要用 pop() 函数，应该放在什么地方呢？</p><p><strong>老司机的提醒</strong> ：在这种需求多变的面试场景里，你一定要紧跟面试官的思路。此时<strong>耐心非常重要</strong>。毕竟，工作上的需求就是灵活又多变的。</p><p>在面试官的连环追问下，你可能需要想一段时间，代码就会变成这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">solve4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, Box s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">solve4</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &lt;----- 加在这里!!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Box s) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">solve4</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s);</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &lt;----- 加在这里!!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果你觉得 s.pop() 突然让代码变得很难理解了，不要着急，接下来我会用一种更容易理解的方式给你讲解。</p><p>我们来玩一种<strong>借箱子</strong> 的游戏。每个玩游戏的人，从左到右排成一排，需要<strong>遵守以下规则</strong>：</p><ul><li><p>每个人刚借到箱子的时候，公布箱子的状态（不公布的话，万一别人耍赖说里面有一个亿，到时候咱们可还不起）；</p></li><li><p>把自己选的&quot;宝石&quot;放到箱子中（我们暂且假设第 i 个人，只能选 A[i] 号宝石）；</p></li><li><p>把箱子借给右边的人；</p></li><li><p>为了避免弄丢东西，每个人都必须遵守规则：归还的箱子要与借出时一模一样，所以归还箱子的时候，需要把箱子里面的属于自己的东西拿出来。</p></li></ul>`,38),y=s("p",null,[p("我们先看一下数组中有"),s("strong",null,"两个元素"),p("的时候应该如何处理。")],-1),i=l(`<p>这个时候，输出的结果刚好如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, }</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, }</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, }</span></span></code></pre></div><p>如果我们把视角固定在某个人身上，他要做的事情就是：</p><ul><li><p>说出拿到箱子的状态</p></li><li><p>把自己的东西放进去</p></li><li><p>借出箱子</p></li><li><p>把自己的东西拿出来，把箱子还回去。</p></li></ul><p>这样，我们也同样完成了所有状态的输出。下面将solve4() 函数加点&quot;玩游戏&quot;的注释。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">solve4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, Box s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i]);  </span><span style="color:#6A737D;">// &lt;-- 把自己选中的宝石放进去</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">solve4</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s); </span><span style="color:#6A737D;">// &lt;-- 借给下一个人</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Box s) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i]);  </span><span style="color:#6A737D;">// &lt;-- 把自己选中的宝石放进去</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">solve4</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s); </span><span style="color:#6A737D;">// &lt;-- 借给下一个人</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在我们应该已经明白 s.pop() 的含义了。</p><p><strong>注意：图中数组长度为 2，里面一共有第 0、第 1、第 2 个人。当 if （i &gt;= N）的时候，也就是第 2 个人实际上不可以选择 A[2]。因为这里包含 3 个含义：</strong></p><ul><li><p>如果访问 A[2] 就会导致访问数组越界</p></li><li><p>第 2 个人不能选择任何宝石。也就是没有任何选项</p></li><li><p>更进一步，第 3、第 4、第 5 个人肯定也是没有任何选择的，所以后面需要直接返回。</p></li></ul><p><strong>所以 if （i &gt;= N）表示的本质是：[N, .., inf) 后面所有的人都不会有任何选项了！所以直接返回即可！</strong></p><p>因此，你平时读算法时，如果觉得一段代码非常难懂，除了要一步一步去调试，你还需要为这段代码找一个有趣的场景。</p><p>现在的情况是，每个人都只能有一个宝石，那么如果每个人都有两个宝石，代码就可以进化成这样（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">solve5</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, Box s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(第i个人的宝石1);  </span><span style="color:#6A737D;">// &lt;-- 把自己选中的宝石放进去</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">solve5</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s); </span><span style="color:#6A737D;">// &lt;-- 借给下一个人</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(第i个人的宝石2);  </span><span style="color:#6A737D;">// &lt;-- 把自己选中的宝石2放进去</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">solve5</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s); </span><span style="color:#6A737D;">// &lt;-- 借给下一个人</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve5</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Box s) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(第i个人的宝石1);  </span><span style="color:#6A737D;">// &lt;-- 把自己选中的宝石放进去</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">solve5</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s); </span><span style="color:#6A737D;">// &lt;-- 借给下一个人</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(第i个人的宝石2);  </span><span style="color:#6A737D;">// &lt;-- 把自己选中的宝石2放进去</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">solve5</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s); </span><span style="color:#6A737D;">// &lt;-- 借给下一个人</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>但是代码这么写，显得很啰唆。那有没有什么更好的办法呢？</p><h4 id="模板" tabindex="-1">模板 <a class="header-anchor" href="#模板" aria-label="Permalink to &quot;模板&quot;">​</a></h4><p>前面我们在玩&quot;借箱子&quot;游戏的时候，直接输出了所有的&quot;箱子&quot;的状态。但是有时候，并不是所有的状态都需要输出，你需要根据题目的条件决定哪些应该作为答案进行输出。因此，在 solve5() 函数的基础上，一个更具有普适性的回溯模板就准备好了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, </span><span style="color:#6A737D;">/*第i个人*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               Box s, </span><span style="color:#6A737D;">/*箱子*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               answer</span><span style="color:#6A737D;">/*存放所有的答案*/</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (状态满足要求) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    answer.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ([i, ...., 后面）的人都没有任何选项了) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> 宝石 in {第i个人当前所有宝石选项} {</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(宝石);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s, answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#6A737D;">/*第i个人*/</span></span>
<span class="line"><span style="color:#24292E;">               Box s, </span><span style="color:#6A737D;">/*箱子*/</span></span>
<span class="line"><span style="color:#24292E;">               answer</span><span style="color:#6A737D;">/*存放所有的答案*/</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (状态满足要求) {</span></span>
<span class="line"><span style="color:#24292E;">    answer.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ([i, ...., 后面）的人都没有任何选项了) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> 宝石 in {第i个人当前所有宝石选项} {</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(宝石);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s, answer);</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意：一般来说，回溯的题目都出得比较&quot;赤裸裸&quot;，基本上不需要经过分析匹配，可以直接套这个模板。</p><p>这里稍微总结一下我们得到回溯模板的<strong>推导过程</strong>：</p>`,19),A=s("p",null,"接下来我们看一下使用这个模板所需要：",-1),F=s("ul",null,[s("li",null,[s("p",null,"1 个核心")]),s("li",null,[s("p",null,"3 个条件")])],-1),g=s("h4",{id:"_1-个核心",tabindex:"-1"},[p("1 个核心 "),s("a",{class:"header-anchor",href:"#_1-个核心","aria-label":'Permalink to "1 个核心"'},"​")],-1),D=s("p",null,[p("理解回溯算法的核心，可以将"),s("strong",null,"思路的重点"),p("总结为：第 i 个人怎么选？")],-1),d=l('<p>其他人的情况都被我们无视了。因为，如果从全局的角度去思考问题，你会发现递归来，递归去容易把人绕晕。反过来，如果你考虑清楚第 i 个人应该如何做选择，那么回溯算法就可以迎刃而解。</p><h4 id="_3-个条件" tabindex="-1">3 个条件 <a class="header-anchor" href="#_3-个条件" aria-label="Permalink to &quot;3 个条件&quot;">​</a></h4><p>当我们解决一个核心的问题之后，接下来就要着手开始写代码的时候，需要解决 3 个条件：</p><ul><li><p>什么样的状态是我们想要的？</p></li><li><p>后面的人还有选项吗？如果后面所有的人都没有选项，就需要返回了。</p></li><li><p>第 i 个人的宝石选项是什么样的？</p></li></ul><h3 id="排列组合问题" tabindex="-1">排列组合问题 <a class="header-anchor" href="#排列组合问题" aria-label="Permalink to &quot;排列组合问题&quot;">​</a></h3><p>排列组合在面试中出现的概率极高。尤其是<strong>微软，头条</strong>等大厂特别喜欢出相关的题目。</p><p><strong>排列组合题目，基本上都是使用回溯算法进行求解。熟练地使用回溯的模板，是击破这些大厂算法面试的必要条件</strong>。</p><p>接下来，我们将由浅入深地展开排列组合中的经典面试题。</p><h4 id="例-1-电话号码的字母组合" tabindex="-1">例 1：电话号码的字母组合 <a class="header-anchor" href="#例-1-电话号码的字母组合" aria-label="Permalink to &quot;例 1：电话号码的字母组合&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个手机拨号盘，不同的按键对应不同的字母。现在给定数字字符串的输入，你需要返回所有的小写字母的组合。（条件：输入的数字只会有 2~9）。</p>',10),u=s("p",null,'输入：A = "23"',-1),b=s("p",null,'输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]',-1),h=s("p",null,'解释：数字 2 可以选择字母"abc", 数字 3 可以选择"def"。那么一共有 9 种组合。',-1),C=s("p",null,[p('【分析】看到"'),s("strong",null,"所有"),p('"二字，你应该立马想到使用回溯算法。前面我们提到。回溯算法需要 1 个核心和 3 个条件。')],-1),B=s("h5",{id:"_1-1-个核心",tabindex:"-1"},[p("1. 1 个核心 "),s("a",{class:"header-anchor",href:"#_1-1-个核心","aria-label":'Permalink to "1. 1 个核心"'},"​")],-1),x=s("p",null,'回想一下之前的"借箱子"游戏，里面每个人都只可以有一种选择。',-1),k=s("p",null,'而现在，当题目改变，输入变成"23"之后，情形如下：',-1),f=s("p",null,'第 0 个人拿到的是数字 2，可以选择的"宝石"为{"a", "b", "c"}，第 1 个人可以拿到的宝石为{"d", "e", "f"}。',-1),_=s("p",null,"因此，第 i 个人的选择是：",-1),v=l(`<p>同时，这里我们可以发现，第 i 个人，与 A[i] 并不是强强绑定的。有时候只是借助 A[i] 完成映射。</p><h5 id="_2-3-个条件" tabindex="-1">2. 3 个条件 <a class="header-anchor" href="#_2-3-个条件" aria-label="Permalink to &quot;2. 3 个条件&quot;">​</a></h5><p>如果想要直接套用回溯模板，请你先回答一下回溯模板的三个问题。</p><p>1）什么样的&quot;箱子&quot;状态是我们想要的？</p><p>在这个题目中，由于要输出所有的数字的<strong>完整组合</strong> ，那么只有&quot;箱子&quot;状态的长度<strong>等于</strong>输入字符串长度的时候，才是满足要求的。</p><p>2）什么时候返回？</p><p>输入字符串长度为 n，那么返回条件应该是 if (i &gt;= n) 就需要返回。 因为从 i = n 个人，就不会有宝石选择了。</p><p>3）每个人的宝石选项如何处理？</p><p>正常情况下，第 i 个人的宝石就应该是 A[i]，但是题目中已经指出，A[i] 对应的是一个数字，然后再通过数字得到相应的字母。比如 A[0] = &#39;2&#39;，那么第 0 个人通过字符 &#39;2&#39; 就可以选择 {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;} 三种宝石。</p><p>【<strong>代码</strong>】通过前面的分析，到这里，我们已经可以直接套用回溯模板写代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] ds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] { </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;def&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;ghi&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;jkl&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;mno&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;pqrs&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;tuv&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 8</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;wxyz&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 9</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, StringBuffer </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果我们发现状态满足要求</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (box.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果发现越界, 第N个人开始就没有宝石选项了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 遍历第i个人可以选择的宝石</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> stoneIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) (A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; idx </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> ds[stoneIndex].</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">(); idx</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 拿到宝石</span></span>
<span class="line"><span style="color:#E1E4E8;">            Character stone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ds[stoneIndex].</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(idx);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 放到箱子中</span></span>
<span class="line"><span style="color:#E1E4E8;">            box.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(stone);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 开始处理第i + 1个人</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 把自己的宝石拿出来，然后保持箱子原样!</span></span>
<span class="line"><span style="color:#E1E4E8;">            box.</span><span style="color:#B392F0;">deleteCharAt</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">letterCombinations</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> A.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuffer box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#6A737D;">/* 从第0个人开始 */</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] ds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] { </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;def&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;ghi&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;jkl&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;mno&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 6</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;pqrs&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;tuv&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 8</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;wxyz&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 9</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">A</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, StringBuffer </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果我们发现状态满足要求</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (box.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">            ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果发现越界, 第N个人开始就没有宝石选项了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 遍历第i个人可以选择的宝石</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> stoneIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) (A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; idx </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ds[stoneIndex].</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(); idx</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 拿到宝石</span></span>
<span class="line"><span style="color:#24292E;">            Character stone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ds[stoneIndex].</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(idx);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 放到箱子中</span></span>
<span class="line"><span style="color:#24292E;">            box.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(stone);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 开始处理第i + 1个人</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 把自己的宝石拿出来，然后保持箱子原样!</span></span>
<span class="line"><span style="color:#24292E;">            box.</span><span style="color:#6F42C1;">deleteCharAt</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">letterCombinations</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">A</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> A.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        StringBuffer box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#6A737D;">/* 从第0个人开始 */</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong> ：如果字符串总长为 L，字符串中有 a 个字符属于 {&#39;7&#39;, &#39;9&#39;}，都可以映射到 4 个字母。有 b 个字符属于 {&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;8&#39;}，都可以映射到 3 个字母上。那么复杂度为 O(4^a^ x 3 ^b^)。除去返回值占用的空间，那么只需要占用 O(L) 的空间。</p><p>【<strong>小结</strong>】相比而言，这道题对应的回溯模板还是比较&quot;赤裸裸&quot;，直接套用模板就能解决。但是你要注意&quot;回答&quot;模板的 3 个条件。我再给你留一道练习题，希望你不要偷懒，完成练习巩固这个知识点。</p><p><strong>练习题 1</strong>: 给定只有数字和字母的字符串，其中字母可以改成大写和小写。请输出所有的改写可能。</p><p>输入：A = &quot;a3&quot;</p><p>输出：[&quot;A3&quot;, &quot;a3&quot;]</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>至此，我们已经从每个人只有一种选择，推导到每个人有多种选择。</p>`,19),j=l('<h4 id="例-2-子集" tabindex="-1">例 2：子集 <a class="header-anchor" href="#例-2-子集" aria-label="Permalink to &quot;例 2：子集&quot;">​</a></h4><p>【<strong>题目</strong> 】给定一个<strong>互不相同的数</strong>的数组，返回这个数组里面所有的可能的子集（包括空集）。要求里面的子集不能重复。比如 [[1,2], [2,1]] 不合要求。因为这两个集合是一样的。</p><p>输入：A = [1, 2, 3]</p><p>输出：[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]</p><p>解释：A = [1, 2,3] 集合的子集有 : 分别是 [[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]。</p><p>【<strong>分析</strong>】当一看到子集，就应该想到回溯，接着联系到回溯的模板代码。现在，我们面临的问题是，如何决定每个人选择的宝石应该是什么？</p><h5 id="_1-1-个核心-1" tabindex="-1">1. 1 个核心 <a class="header-anchor" href="#_1-1-个核心-1" aria-label="Permalink to &quot;1. 1 个核心&quot;">​</a></h5><p>首先假设，每个人都可以选择所有的宝石。那么游戏就会形成如下：</p>',8),m=s("p",null,'但是，如果第 0 个人选择 1 ，此时第 1 个人也选择 1，那么箱子里面会装上 "{1, 1}"。很明显这是不符合要求的，因为一个元素被用了两次，不符合子集的定义。',-1),q=s("p",null,"我们分情况整理如下：",-1),N=s("p",null,"Case 1. 当第 0 个人选择 1 的时候，第 1 个人只能选择 {2, 3}, {1, 2}, {1, 3}。",-1),T=s("p",null,"Case 2. 当第 0 个人选择 2 的时候，第 1 个人只能选择 {3}。注意，此时不能再去选择 1，否则会形成 {2, 1}，而这种情况是在前面的选择中出现过的。",-1),L=s("p",null,"Case 3. 当第 0 个人选择 3 的时候，第 1 个人所有的数都不能选。因为一选就会和 Case 1,、Case 2 重复。",-1),I=s("p",null,'通过上述分析，我们发现，第 1 个人的选择范围是和第 0 个人的选择有关系的。如果第 0 个人选择了下标 A[j]，那么第 1 个人就只能选择数组 A[] 中第 [j + 1, ..., N) 范围里面的"宝石"。',-1),S=s("p",null,[p("可以总结成"),s("strong",null,"结论 1：")],-1),w=l(`<blockquote><p><strong>如果第 i 个人选择 A[j]，那么第 i+1 个人的选择范围就是 A[j + 1, N)</strong></p></blockquote><h5 id="_2-3-个条件-1" tabindex="-1">2. 3 个条件 <a class="header-anchor" href="#_2-3-个条件-1" aria-label="Permalink to &quot;2. 3 个条件&quot;">​</a></h5><p>在写代码之前，我们再回答一下回溯代码的 3 个条件。</p><p>1）什么样的&quot;箱子&quot;状态是我们想要的？</p><p>这时是要所有的子集，所以我们只需要把所有的 box 状态放到 ans 中。</p><p>2）什么时候返回？</p><p>输入字符串长度为 n，那么当 if (i &gt;= n) 就需要返回。 因为从 i = n 个人，就不会有宝石选择了。</p><p>3）每个的宝石选项如何处理？</p><p>当第 i 个人选择了 A[j]，那么第 i + 1 个人就只能选择 [j + 1, N)。</p><p>那么我们可以写出代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 将box状态添加到答案中</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> box, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> answer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    answer.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        answer.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(answer.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i,</span><span style="color:#6A737D;">/*第i个人*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> begin, </span><span style="color:#6A737D;">/*第i个人可以选择的范围[begin, end)*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> end,</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> box, </span><span style="color:#6A737D;">/* 箱子的状态 */</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> answer) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 总的宝石数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 把当前箱子的状态放到结果中，因为要的是所有的子集</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果我是最后一个人，并且没有东西给我选了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 那么原样返回箱子</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> begin </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> end) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 我还是有宝石可以选择的。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> begin; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        box.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意这里结论1的使用，所以这里要写 [j + 1, end)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, end, box, answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        box.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 将box状态添加到答案中</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> box, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> answer) {</span></span>
<span class="line"><span style="color:#24292E;">    answer.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">        answer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(answer.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i,</span><span style="color:#6A737D;">/*第i个人*/</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> begin, </span><span style="color:#6A737D;">/*第i个人可以选择的范围[begin, end)*/</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> end,</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> box, </span><span style="color:#6A737D;">/* 箱子的状态 */</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> answer) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 总的宝石数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 把当前箱子的状态放到结果中，因为要的是所有的子集</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, answer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果我是最后一个人，并且没有东西给我选了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 那么原样返回箱子</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> begin </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> end) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 我还是有宝石可以选择的。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> begin; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        box.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意这里结论1的使用，所以这里要写 [j + 1, end)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, end, box, answer);</span></span>
<span class="line"><span style="color:#24292E;">        box.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们根据模板写出了代码，仔细观察可以发现，有以下 2 个地方可以优化：</p><ul><li><p>i 变量其实没有什么用，仅在传参数的时候传了 i + 1 递归下去；</p></li><li><p>end 变量其实就是 N，没有必要写在参数里面。</p></li></ul><p>【<strong>代码</strong>】经过一轮优化后的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> box, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> all) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  all.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    all.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(all.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start, </span><span style="color:#6A737D;">/*第i个人的选择范围[start, N)*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> box,</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> all) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 公布当前箱子的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, all);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果我是最后一个人，并且没有东西给我选了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 那么原样返回箱子</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 我还是有宝石可以选择的。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    box.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, all);</span></span>
<span class="line"><span style="color:#E1E4E8;">    box.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subsets</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> box, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> all) {</span></span>
<span class="line"><span style="color:#24292E;">  all.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">    all.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(all.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start, </span><span style="color:#6A737D;">/*第i个人的选择范围[start, N)*/</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> box,</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> all) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 公布当前箱子的状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, all);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果我是最后一个人，并且没有东西给我选了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 那么原样返回箱子</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 我还是有宝石可以选择的。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    box.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, all);</span></span>
<span class="line"><span style="color:#24292E;">    box.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subsets</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码:<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong> ：时间复杂度，由于一共有 N 个元素，每个元素可能被放到子集中，也可能不被放到子集中，一共有 O(2^N^) 个子集，每个子集都需要一次遍历。假设都按最差情况处理，单个子集遍历时间复杂度为 O(N)。所以时间复杂度为 O(N* 2^N^)。不算上返回值 answer，那么空间复杂度为O(N) 。</p><p>【<strong>小结</strong> 】这个题目是一道非常经典的回溯的题目，下面我们<strong>分析一下考点</strong>：</p><ul><li><p>回溯的模板</p></li><li><p>回溯代码的优化，即哪些变量可以被优化掉。</p></li></ul><p>下面再和你多说两句。我发现，有时候会有小伙伴直接研究网络上已经优化过的代码，感觉自己看不懂回溯。这是两方面的原因导致的：</p><ol><li><p>你没有真正理解到回溯的精髓；</p></li><li><p>网络上的很多代码都没有一步一步讲优化过程，还省略了很多关键步骤，最后直接给出答案。</p></li></ol><p><strong>这两个考点是你理解回溯代码的关键。因此，在看回溯代码的时候，一定要从模板出发，然后再通过优化得到最终的程序</strong>。</p><p>接下来我们通过一些练习来加强你对这个知识点的掌握。</p><p><strong>练习题 2</strong>：在[1, 2, ..., n] 这几个数中，选出 k 个数出来组成集合。输出所有的解。</p><p>输入：n = 2, k = 1</p><p>输出：[[1], [2]]</p><p>解释：一个数的选择只有 [1], [2]</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/77.%E7%BB%84%E5%90%88.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/77.%E7%BB%84%E5%90%88.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/77.%E7%BB%84%E5%90%88.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 3</strong>：给定一个正数数组 A[]，和一个正整数 target。输出所有的子集，使得子集和等于 target。</p><p>注意：里面的元素可以重复选取。</p><p>输入：A = [2, 3, 8]，target = 7</p><p>输出：[2, 2, 3]只有这个子集和等于 7。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 4</strong>：给定一个正数数组 A[]，和一个正整数 target。输出所有的子集，使得子集和等于 target。</p><p>注意：里面的元素<strong>不</strong>可以重复选取。</p><p>输入：A = [2, 3, 8], target = 5</p><p>输出：[2, 3] 只有这个子集和等于 5</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>这里，每个人的选项都是动态决定的，而不再像以前是固定选择 A[i]，或者 A[i] 的某个固定的映射。可以做一个简单的小结：</p><blockquote><p>第 i 个人的选项是动态决定的，可以认为是一个简单的函数 f(i) 来决定它的选项列表。</p></blockquote>`,40),P=l('<h4 id="例-3-排列" tabindex="-1">例 3：排列 <a class="header-anchor" href="#例-3-排列" aria-label="Permalink to &quot;例 3：排列&quot;">​</a></h4><p>【<strong>题目</strong> 】给定<strong>无重复元素</strong>的数组，输出这个数组所有的排列。</p><p>输入：A = [1, 2]</p><p>输出：[[1, 2], [2, 1]]</p><p>解释：两个元素的数组的排列有两种。</p><p>【<strong>分析</strong>】输出数组的所有排列，看到&quot;所有&quot;二字，你应该条件反射知道这里需要用到回溯算法了。</p><p>注：排列算法的标准答案实际上没有几行，但却是经过很多优化步骤精简得到的，下面我们将从最原始的代码开始一步一步推导优化。</p><h5 id="_1-1-个核心-2" tabindex="-1">1. 1 个核心 <a class="header-anchor" href="#_1-1-个核心-2" aria-label="Permalink to &quot;1. 1 个核心&quot;">​</a></h5><p>首先看一下第 i 个人应该怎么选？比如：对于数组 [1, 2, 3] 而言，第 1 个人可以选择所有的元素。</p>',9),V=l(`<p>实际上，排列时，对于位置 i 来说，每个元素都是有可能出现的。因此，我们可以得到<strong>结论 2</strong>：</p><blockquote><p>第 i 个人的选择范围是 [0, N)</p></blockquote><p>此外，根据排列的性质，已经放到 box 中的元素不能再被第 i 个人选中。这样就得到了<strong>结论 3：</strong></p><blockquote><p>已经放到 box 中的元素，不能再被第 i 个人选中</p></blockquote><h5 id="_2-3-个条件-2" tabindex="-1">2. 3 个条件 <a class="header-anchor" href="#_2-3-个条件-2" aria-label="Permalink to &quot;2. 3 个条件&quot;">​</a></h5><p>在使用回溯模板时，首先要想到的是回答回溯的 3 个条件。</p><ul><li><p>满足的状态：一个排列成功之后，其长度应该是与原数组的长度一样，所以我们需要 box 的长度与输入的数组长度一样。</p></li><li><p>何时返回？一共有 N 个元素，每个人只能选一个放到排列中。从第 0 个人到第 N-1 个人都有元素可以选，第 [N, +inf) 个人都不会有元素可以选。</p></li><li><p>第 i 个人可以选的元素，需要满足结论 2 和结论 3。</p></li></ul><p>我们可以写出<strong>伪代码</strong>如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, </span><span style="color:#6A737D;">/*第i个人的选择*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> box, </span><span style="color:#6A737D;">/*箱子*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> ans) { </span><span style="color:#6A737D;">/*满足条件的结果*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans); </span><span style="color:#6A737D;">// 把box放到ans里面</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第N个人开始就没有任何选项了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第i个人的选择范围就是[0, N)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 但是不能使用已经使用过的元素了,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">box.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i])) { </span><span style="color:#6A737D;">// &lt;-- 这里线性搜索</span></span>
<span class="line"><span style="color:#E1E4E8;">      box.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      box.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#6A737D;">/*第i个人的选择*/</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> box, </span><span style="color:#6A737D;">/*箱子*/</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> ans) { </span><span style="color:#6A737D;">/*满足条件的结果*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans); </span><span style="color:#6A737D;">// 把box放到ans里面</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 第N个人开始就没有任何选项了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 第i个人的选择范围就是[0, N)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 但是不能使用已经使用过的元素了,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">box.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i])) { </span><span style="color:#6A737D;">// &lt;-- 这里线性搜索</span></span>
<span class="line"><span style="color:#24292E;">      box.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i]);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      box.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>不过很快可以发现，box.contains() 函数是一个线性搜索复杂度，会导致整个算法的复杂度较高。这里我们可以使用一个哈希 /used[] 数组来记录这个元素是否被使用，就可以得到优化。</p><p>【<strong>代码</strong>】经过优化，可以得到第一个版本的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ans.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ans.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">/*第i个人*/</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">used</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/*used[x]表示A[x] used?*/</span></span>
<span class="line"><span style="color:#E1E4E8;">                           List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/*箱子*/</span></span>
<span class="line"><span style="color:#E1E4E8;">                           List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果状态已经满足要求</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们总是从第0个人开始，那么一共有N个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 那么当到第N个人的时候，已经没有东西可以选了。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// [N ~ inf) 后面所有的人都没有东西可以选了。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 第i个人本来是可以选择A[0 .... n)里面的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 但是需要查看一下used[i]是不是被使用了？</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 可以认为第i个人的选择函数就是使用以前没有使用过的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">used[j]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                box.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">                used[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, used, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">                box.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                used[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">permute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">[] used </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">[N];</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, used, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">            ans.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ans.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">/*第i个人*/</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">used</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/*used[x]表示A[x] used?*/</span></span>
<span class="line"><span style="color:#24292E;">                           List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/*箱子*/</span></span>
<span class="line"><span style="color:#24292E;">                           List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果状态已经满足要求</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们总是从第0个人开始，那么一共有N个元素</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 那么当到第N个人的时候，已经没有东西可以选了。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// [N ~ inf) 后面所有的人都没有东西可以选了。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 第i个人本来是可以选择A[0 .... n)里面的元素</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 但是需要查看一下used[i]是不是被使用了？</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 可以认为第i个人的选择函数就是使用以前没有使用过的元素</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">used[j]) {</span></span>
<span class="line"><span style="color:#24292E;">                box.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j]);</span></span>
<span class="line"><span style="color:#24292E;">                used[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, used, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">                box.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                used[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">permute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">[] used </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">[N];</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, used, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：根据数学公式，我们知道一共会生成 N! 个结果，所以时间复杂度为 O(N!)。如果不算上输出空间，那么空间复杂度就是 O(N)。</p><p>我们会发现，基于 used[] 数组在扫描的时候，仍然会从头扫描到尾，那么有没有什么办法可以避免这种扫描呢？</p><p>这里我们再看一下第 i 个人的选择。假设第 i 个人将&quot;宝石&quot;放到箱子里之前，他身上有一个<strong>袋子</strong>，里面装着将要放到箱子里的宝石。</p>`,16),H=s("p",null,"然后，我们重新再看 1 个核心和 3 个条件。",-1),R=s("h5",{id:"_1-1-个核心-3",tabindex:"-1"},[p("1. 1 个核心 "),s("a",{class:"header-anchor",href:"#_1-1-个核心-3","aria-label":'Permalink to "1. 1 个核心"'},"​")],-1),K=s("p",null,"根据核心的定义：重点解决第 i 个人应该选什么？我们从下面这种情况展开。",-1),Q=s("ul",null,[s("li",null,[s("p",null,"整个数组为 [1, 2, 3, 4, 5, 6]")]),s("li",null,[s("p",null,"已经有 [1, 2, 3] 元素在箱子里面")])],-1),G=s("p",null,"根据结论 2 和结论 3，容易得到，第 i 个人实际上只能选择 [4, 5, 6]。那么在操作时，第 i 个人可以像下图演示的这样操作。",-1),X=s("p",null,"虽然，我们还没有找到一个较好的数据结构来实现袋子。但是，根据这里的操作，可以分析出只需要这种数据结构支持交换操作就可以了。",-1),O=s("p",null,[p('这时候，数组跳出来说："'),s("strong",null,"正是在下"),p('"。我们在操作的时候，统一使用 Swap 操作，如下动图所示：')],-1),z=l(`<p>为了方便，第 i 个人实际上没有必要自己随身带着一个数组作为&quot;袋子&quot;。只需要：</p><ul><li><p>在箱子里提前放好可供选择的元素；</p></li><li><p>告知第 i 个人可以选择的元素的范围，在这里为 [i, N)；</p></li><li><p>第 i 个人每次用完箱子之后，仍然要保证能将&quot;箱子&quot;恢复原样。</p></li></ul><p>【<strong>代码 2</strong>】经过上述分析，我们可以得到第二个版本的代码（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ans.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box[a];</span></span>
<span class="line"><span style="color:#E1E4E8;">    box[a] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box[b];</span></span>
<span class="line"><span style="color:#E1E4E8;">    box[b] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/*第i个人, 选择范围[i, N)*/</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> [] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果状态已经满足要求</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// box已经填满了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 我们总是从第0个人开始，那么一共有N个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 那么当到第N个人的时候，已经没有东西可以选了。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// [N ~ inf) 后面所有的人都没有东西可以选了。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第i个人可以选择box后面可选的元素。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 这里只是选中box[j]元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, i, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 箱子一定要还原</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, i, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">permute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 首先构建好箱子，为了让第i个人有元素可以选择</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 我们需要提前将元素放在里面。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[N];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      box[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">      ans.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ans.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box[a];</span></span>
<span class="line"><span style="color:#24292E;">    box[a] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box[b];</span></span>
<span class="line"><span style="color:#24292E;">    box[b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/*第i个人, 选择范围[i, N)*/</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> [] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果状态已经满足要求</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// box已经填满了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 我们总是从第0个人开始，那么一共有N个元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 那么当到第N个人的时候，已经没有东西可以选了。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// [N ~ inf) 后面所有的人都没有东西可以选了。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第i个人可以选择box后面可选的元素。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 这里只是选中box[j]元素</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, i, j);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 箱子一定要还原</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, i, j);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">permute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 首先构建好箱子，为了让第i个人有元素可以选择</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 我们需要提前将元素放在里面。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[N];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      box[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：根据数学公式，我们知道一共会生成 N! 个结果，所以时间复杂度为 O(N!)。如果不算上输出空间，那么空间复杂度就是 O(N)。</p><p>这里我们发现，box 的状态实际上分为了两部分：一是可选部分，二是不可选部分。</p>`,7),M=l(`<p>此时的&quot;箱子&quot;使用了数组，不再像以前那样只管 push/pop，还需要记录状态：</p><ul><li><p>需要填 box 的哪个位置？</p></li><li><p>第 i 个人可以选择的范围是哪里？</p></li></ul><p>原本函数需要声明为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> boxId, </span><span style="color:#6A737D;">/*box的boxId这个位置需要填充*/</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i,     </span><span style="color:#6A737D;">/* 第i个人 */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start, </span><span style="color:#6A737D;">/* 第i个人可选范围[start, end) */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> end,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> [] box,</span></span>
<span class="line"><span style="color:#E1E4E8;">      List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> ans)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> boxId, </span><span style="color:#6A737D;">/*box的boxId这个位置需要填充*/</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i,     </span><span style="color:#6A737D;">/* 第i个人 */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start, </span><span style="color:#6A737D;">/* 第i个人可选范围[start, end) */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> end,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> [] box,</span></span>
<span class="line"><span style="color:#24292E;">      List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> ans)</span></span></code></pre></div><p>不过这里巧的是：</p><ul><li><p>boxId 刚好等于 i</p></li><li><p>start 也刚好是 i</p></li><li><p>end 一直都是 N</p></li></ul><p>所以代码也就可以优化成上面的样子。如果我们再研究一下，可以发现一些新的东西，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">permute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[N];  </span><span style="color:#F97583;">&lt;--</span><span style="color:#E1E4E8;"> 这里复制了数组A</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      box[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> box </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> A; </span><span style="color:#6A737D;">// &lt;-- 这里如果加个assert，必然成立。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">permute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[N];  </span><span style="color:#D73A49;">&lt;--</span><span style="color:#24292E;"> 这里复制了数组A</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      box[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> box </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> A; </span><span style="color:#6A737D;">// &lt;-- 这里如果加个assert，必然成立。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>根据上述代码不难发现，实际上没有必要使用 box 数组，直接使用 A[] 数组就可以了。</p><p>【<strong>代码</strong>】因此，最终版本的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ans.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box[a];</span></span>
<span class="line"><span style="color:#E1E4E8;">    box[a] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box[b];</span></span>
<span class="line"><span style="color:#E1E4E8;">    box[b] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/*第i个人, 选择范围[i, N)*/</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果状态已经满足要求</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// box已经填满了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 我们总是从第0个人开始，那么一共有N个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 那么当到第N个人的时候，已经没有东西可以选了。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// [N ~ inf) 后面所有的人都没有东西可以选了。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第i个人可以选择box后面可选的元素。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 这里只是选中box[j]元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, i, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(box, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 箱子一定要还原</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, i, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">permute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A</span><span style="color:#6A737D;">/*box*/</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">      ans.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ans.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box[a];</span></span>
<span class="line"><span style="color:#24292E;">    box[a] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box[b];</span></span>
<span class="line"><span style="color:#24292E;">    box[b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/*第i个人, 选择范围[i, N)*/</span></span>
<span class="line"><span style="color:#24292E;">                         List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果状态已经满足要求</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// box已经填满了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 我们总是从第0个人开始，那么一共有N个元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 那么当到第N个人的时候，已经没有东西可以选了。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// [N ~ inf) 后面所有的人都没有东西可以选了。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第i个人可以选择box后面可选的元素。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 这里只是选中box[j]元素</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, i, j);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(box, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 箱子一定要还原</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, i, j);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">permute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A</span><span style="color:#6A737D;">/*box*/</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, ans);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.3.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.3.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.3.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N!)，如果不算返回值占用的空间，那么空间复杂度为 O(N)（因为递归栈也会占用空间）。</p><p>【<strong>小结</strong>】在这个题里面，我们采用了层层优化的方法给你讲解最终代码的由来。虽然核心代码非常短，但是其意义很丰富。</p><p>我们再回顾一下推导过程，如下图所示：</p>`,15),W=s("p",null,"到这里，我们可以将回溯的知识点总结如下：",-1),J=l('<h3 id="去重排列组合" tabindex="-1">去重排列组合 <a class="header-anchor" href="#去重排列组合" aria-label="Permalink to &quot;去重排列组合&quot;">​</a></h3><p>在排列组合问题中，另外一类问题是带有重复元素，并且需要去重处理。在处理这些问题的时候，除了套用前面所讲的回溯模板之外，还需要注意使用以下两步来进行去重。</p><ul><li><p>排序：因为排序可以将相同的元素放到一起。</p></li><li><p>查重：通过查看已有的元素是否已经被使用，进而去重。</p></li></ul><h4 id="例-4-子集-2" tabindex="-1">例 4：子集 2 <a class="header-anchor" href="#例-4-子集-2" aria-label="Permalink to &quot;例 4：子集 2&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个可能包含重复元素的整数数组 A，返回该数组所有可能的子集。注意：解集不能包含重复的子集。</p><p>输入：A = [1, 2, 2]</p><p>输出：[[2], [1], [1,2,2], [2,2], [1,2],[]]</p><p>解释：注意：虽然 {A[0]=1, A[1]=2}, {A[0]=1, A[2]=2} 是选取不同位置的数，但是却都构成了{1,2} 这个子集，因此，只能算一个。</p><p>【<strong>分析</strong>】你又看到了&quot;所有&quot;两个字，那么就可以确定使用回溯算法了。如果回顾一下例 2 讲解的关于子集的问题，我们会发现，这里可以使用结论 1（由例 2 得来）。</p><blockquote><p>如果第 i 个人选择了 A[j]，那么第 i+1 个人的选择范围就是 A[j + 1, N)</p></blockquote><p>本质上是因为例 2 中已经说明 A[] 数组中没有相同的元素。那么在本题中，如果有相同的元素应该如何处理？</p><p>老规矩，我们还是从 1 个核心开始思考这个问题。</p><h5 id="_1-1-个核心-4" tabindex="-1">1. 1 个核心 <a class="header-anchor" href="#_1-1-个核心-4" aria-label="Permalink to &quot;1. 1 个核心&quot;">​</a></h5><p>我们把思路的核心放在<strong>第 i 个人的选择上</strong> 。对于第 i 个人来说，如果我们依然使用（例 2 的）<strong>结论 1</strong>：</p><blockquote><p>如果第 i 个人选择了 A[j]，那么第 i+1 个人的选择范围就是 A[j + 1, N)</p></blockquote>',15),Y=l(`<p>对于这种情况，在回溯时，实际上会出现重复。伪代码如下（为了让你看得更加清楚，这里没有使用 for 循环）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, Box s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(第i个人的宝石5);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(第i个人的宝石4);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(第i个人的宝石4);      </span><span style="color:#6A737D;">// &lt;-- 重复了!!</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s);</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Box s) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(第i个人的宝石5);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s);</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(第i个人的宝石4);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s);</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(第i个人的宝石4);      </span><span style="color:#6A737D;">// &lt;-- 重复了!!</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s);</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们会发现，后面的宝石 4 实际上是重复的。因为题目要求：不同位置上的同值元素会被认为是一样的。因此，我们要想办法做去重。</p><p><strong>去重方法 1</strong> ：你可以这样理解。你的左裤兜里面有个红宝石，右裤兜里面有个一样的红宝石。每次你都只能往箱子里<strong>放一个</strong>宝石（并且是放在箱子里面同样的位置），给你的朋友嘚瑟。</p><p>你朋友肯定会问：&quot;你为什么要把同样的东西给我看两遍？&quot;。</p><p>这时，你只需要对第 i 个人去重就可以了。那么我们很快就可以写出如下的伪代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, Box s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    S </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashSet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> 宝石 in {第i个人当前所有宝石选项} {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">S.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(宝石)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        s.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(宝石);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, s, answer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        s.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        S.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(宝石);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Box s) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// &lt;-- 说出箱子的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    S </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashSet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> 宝石 in {第i个人当前所有宝石选项} {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">S.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(宝石)) {</span></span>
<span class="line"><span style="color:#24292E;">        s.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(宝石);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, s, answer);</span></span>
<span class="line"><span style="color:#24292E;">        s.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        S.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(宝石);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>但是，如果只是对第 i 个人去重，还会遇到一个问题。比如：数组为 A = [4, 4, 4, 1, 4]，假设只有两个人在选择的时候，下图所示的 ① ② 两种情况就有可能出现重复。</p>`,8),U=l(`<p>那么如何避免这种 [1, 4] 和 [4, 1] 重复的情况呢？</p><p><strong>去重方法 2</strong> ：再看一下第 i 个人在选择范围上的（例 2 的）<strong>结论 1</strong>：</p><blockquote><p>如果第 i 个人选择了 A[j]，那么第 i+1 个人的选择范围就是 A[j + 1, N)</p></blockquote><p>为了方便讨论问题的本质，在只有两个人的情况下，结论 1 由递归可以很容易展开成循环的情况（用循环描述起来更容易）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &lt;-- 第i人的选择</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> jj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; jj </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; jj</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &lt;-- 第i+1人的选择</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j], </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[jj]} </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> 放到结果子集</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &lt;-- 第i人的选择</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> jj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; jj </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; jj</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &lt;-- 第i+1人的选择</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j], </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[jj]} </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> 放到结果子集</span></span></code></pre></div><p>若 A[] 数组中没有相同元素的进来，这样循环就不会产生相同子集。但是，如果有相同元素进来，我们需要将数组排序之后再进行处理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(A);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &lt;-- 第i人的选择</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> jj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; jj </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; jj</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &lt;-- 第i+1人的选择</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j], </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[jj]} </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> 放到结果子集</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(A);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &lt;-- 第i人的选择</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> jj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; jj </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; jj</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &lt;-- 第i+1人的选择</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j], </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[jj]} </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> 放到结果子集</span></span></code></pre></div><p>如果对于 A[] = [1, 4, 4, 4] 而言（已经排序了），那么子集合中就只能出现 [1, 4]，而不会再出现 [4, 1]。因为下面这个<strong>结论 4</strong> 是可以证明的：</p><blockquote><p>从一个有序数组中，选择一个子序列出来，这个子序列必然是有序的。</p></blockquote><p>关于结论 4 ，我希望你可以尝试证明一下，也欢迎你把证明过程写在评论区，我们一起交流。我们回到题目中来，如果只排序，只能保证 [1, 4] 和 [4, 1] 两个子集不会重复，并不能避免 [1, A[1] = 4] 和 [1, A[2] = 4] 这种类型的重复。</p><p>看来是时候将<strong>去重方法 1</strong> 和<strong>去重方法 2</strong> 合体了。变身吧！</p><p><strong>最终解</strong>：再加 hash_set，就可以避免重复子集了，代码如下所示（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(A); </span><span style="color:#6A737D;">// 排序</span></span>
<span class="line"><span style="color:#E1E4E8;">i_set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HashSet;  </span><span style="color:#6A737D;">// 第i个人的去重set</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// &lt; -- 第i人的选择</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i_set.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j])) </span><span style="color:#F97583;">continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  i1_set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HashSet;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> jj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; jj </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; jj</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span><span style="color:#6A737D;">// &lt;-- 第i+1人的选择</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i1_set.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[jj])) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j], </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[jj]} </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> 放到结果子集</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(A); </span><span style="color:#6A737D;">// 排序</span></span>
<span class="line"><span style="color:#24292E;">i_set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HashSet;  </span><span style="color:#6A737D;">// 第i个人的去重set</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// &lt; -- 第i人的选择</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i_set.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j])) </span><span style="color:#D73A49;">continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  i1_set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HashSet;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> jj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; jj </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; jj</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span><span style="color:#6A737D;">// &lt;-- 第i+1人的选择</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i1_set.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[jj])) </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j], </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[jj]} </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> 放到结果子集</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我们再来看一道练习题。</p><p><strong>练习题 5</strong>：给定一个排序后的数组，去除里面的重复元素，求返回去重后数组的长度。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>如果你做过这个题，就会发现，在排序后的数组处理去重的时候，只需要和前面的元素进行比较就可以了。</p><h5 id="_2-3-个条件-3" tabindex="-1">2. 3 个条件 <a class="header-anchor" href="#_2-3-个条件-3" aria-label="Permalink to &quot;2. 3 个条件&quot;">​</a></h5><p>接下来，我们再看回溯的 3 个条件。</p><p>1）满足的状态：由于我们已经通过排序 + 前面的元素进行比较，进行了去重，因此，只需要把状态放到结果中就可以。</p><p>2）何时返回？一共有 N 个元素，每个人只能选一个放到组合中。从第 0 个人到第 N-1 个人都有元素可以选，第 [N, +inf) 个人都不会有元素可以选。</p><p>3）第 i 个人可以选的元素，需要满足<strong>结论 1，并且需要利用有序性来去重</strong>。</p><p>【<strong>代码</strong>】那么到这里为止，我们已经可以写出代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                      List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ans.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/*第i个人的选择范围(start, N)*/</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 已经没得选了</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        box.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">        box.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsetsWithDup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(A);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                      List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">      ans.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ans.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/*第i个人的选择范围(start, N)*/</span></span>
<span class="line"><span style="color:#24292E;">                         List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 已经没得选了</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        box.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">        box.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsetsWithDup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(A);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong> ：时间复杂度为 O(N x 2^N^)，如果不算返回值占用的空间，空间复杂度为 O(N)。</p><p>【<strong>小结</strong>】在这里，我们步步为营，重点分析了第 i 个人应该做的选择项，最后利用排序之后子序列无重复的特性进行了去重处理。</p><p>这里我给出推导过程中的每一步的代码，供你参考。</p><p>第一步，使用排序 + Set。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>第二步，使用排序+和前面的元素进行比较而去重。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.1.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.1.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.1.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>第三步：利用例 2 的精简参数的办法，对第二步的代码进行&quot;瘦身&quot;。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h4 id="例-5-排列-2" tabindex="-1">例 5：排列 2 <a class="header-anchor" href="#例-5-排列-2" aria-label="Permalink to &quot;例 5：排列 2&quot;">​</a></h4><p>【<strong>题目</strong> 】给定一个<strong>可包含重复数字</strong>的数组 A ，按任意顺序返回所有不重复的全排列。</p><p>输入：A[] = [1, 1, 2]</p><p>输出：[[1,1,2], [1,2,1], [2,1,1]]</p><p>解释：[A[0], A[1], A[2]] 与 [A[1], A[0], A[2]] 是一个重复的排列，不能放在其中。其他重复的排列也类似。因此最终只有 3 个数组有排列。</p><p>【<strong>分析</strong>】这个题与例 3 的区别在于：数组 A[] 可能包含重复数字的。我们还是先从 1 个核心开始分析。</p><h5 id="_1-1-个核心-5" tabindex="-1">1. 1 个核心 <a class="header-anchor" href="#_1-1-个核心-5" aria-label="Permalink to &quot;1. 1 个核心&quot;">​</a></h5><p>根据例 3 的分析，当第 i 个人的选择范围是余下的 {4, 7, 4, ,4} 的时候，他可以进行的操作是不停地交换。</p>`,42),Z=s("p",null,"但是，当遇到下面这种场景时，可以发现，交换带来的结果是一样的：",-1),$=l(`<p>因此，需要去重。从第 i 个人的视角出发，我们可以发现，由于执行的是 Swap 操作，实际上没有必要重复地把一个相同值的元素放到 box 中同样的位置。</p><p>具体来说，我们可以采用<strong>哈希记录</strong>的办法来去重。在例 3 的基础上，修改代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] box,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> ans)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第i个人的选择范围[start, end)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(box[j])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, start, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(box, start </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, start, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">        s.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(box[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] box,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start,</span></span>
<span class="line"><span style="color:#24292E;">                         List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> ans)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第i个人的选择范围[start, end)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(box[j])) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, start, j);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(box, start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ans);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, start, j);</span></span>
<span class="line"><span style="color:#24292E;">        s.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(box[j]);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><blockquote><p>完整代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>不过，我们在例 4 中，提到过一种重复的情况，比如下图展示等情况：</p>`,5),ss=s("p",null,[p("为什么在这里不需要处理？因为在本题中，我们需要求解的是"),s("strong",null,"排列"),p("，而 [1, 4] 和 [4, 1] 本来就是不一样的，所以不需要处理这种情况。")],-1),ns=s("p",null,[p("这里我们使用了 HashSet，虽然它的复杂度是 O(1)，但是在"),s("strong",null,"数据量比较小"),p("的时候，直接基于线性查找的方式可能会更快一些。主要基于以下两点：")],-1),as=s("ul",null,[s("li",null,[s("p",null,"HashSet 需要动态申请和释放内存，代价比较大；")]),s("li",null,[s("p",null,"线性查找具有较好的内存局部性，对 CPU 的缓存更加友好。")])],-1),ls=s("p",null,"因此，我们可以使用线性查找的方式来确定将要交换的元素在之前是否出现过了。",-1),ps=l(`<p>由于第 i 个人只需要执行 Swap 操作，那么，当前面已经将 4 放到 box[start]，后面的 box[j] = 4 就没有必要再执行 Swap 操作，将 4 放到 box[start] 里了。</p><p>所以，除了用哈希处理，我们还可以直接利用线性查找这一操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> j; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (box[k] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//不要处理A[j] &lt;-- 类似于哈希的已经找到了!</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> j; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (box[k] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//不要处理A[j] &lt;-- 类似于哈希的已经找到了!</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="_2-3-个条件-4" tabindex="-1">2. 3 个条件 <a class="header-anchor" href="#_2-3-个条件-4" aria-label="Permalink to &quot;2. 3 个条件&quot;">​</a></h5><p>经过前面的洗礼，想必你对于三个条件的分析已经非常明白了，下面我们再总结一下。</p><ul><li><p>满足的状态：一个排列成功之后，其长度应该与原数组的长度一样。所以我们需要 box 的长度与输入的数组长度一样。</p></li><li><p>何时返回？一共有 N 个元素，每个人只能选一个放到排列中。从第 0 个人到第 N-1 个人都有元素可以选，第 [N, +inf) 个人都不会有元素可以选。</p></li><li><p>第 i 个人可以选的元素，需要满足结论 2 和结论 3，并且还需要注意<strong>去重。</strong></p></li></ul><p>【<strong>代码</strong>】那么最终代码可以如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ans.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">j</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">      box[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">      box[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">end</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (box[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> box </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// box中只有[0, ..., N)几个空位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当第i个人进来放东西的时候，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 并且要取的范围是[start, N)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 也就是[N, N)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 肯定是没有东西放的</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 并且box此时已经放满了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第i个人的选择范围[start, end)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(box, start, j, box[j])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, start, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(box, start </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(box, start, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">permuteUnique</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A</span><span style="color:#6A737D;">/*box*/</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">      ans.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ans.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">j</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box[i];</span></span>
<span class="line"><span style="color:#24292E;">      box[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box[j];</span></span>
<span class="line"><span style="color:#24292E;">      box[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">end</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (box[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> box </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// box中只有[0, ..., N)几个空位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当第i个人进来放东西的时候，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 并且要取的范围是[start, N)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 也就是[N, N)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 肯定是没有东西放的</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 并且box此时已经放满了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第i个人的选择范围[start, end)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(box, start, j, box[j])) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, start, j);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(box, start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ans);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(box, start, j);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">permuteUnique</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A</span><span style="color:#6A737D;">/*box*/</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.1.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.1.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.1.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：最差情况下，假设每个数都不一样，一共有 O(N!) 种排列，每种排列需要 O(N) 来放到输出里面，所以时间复杂度为 O(N x N!)。如果不算返回值，那么空间复杂度就是 O(N)。</p><p>【<strong>小结</strong>】在排列的情况下，我们发现，实际上去重操作要简单一些，只需要保证第 i 个人不要重复地把相同的内容放到同一个位置就可以了。</p><p>以上，我们学习了两个子集问题，两个排列问题，下面我分别从两个维度去总结两个题目。</p>`,12),os=l(`<p>这里我再留一个思考题，检验一下你对子集和排列的理解是否到位。</p><p><strong>思考题</strong>：在排列组合中，子集问题的递归函数的写法是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, start, box, ans)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, ans)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, start, box, ans)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, ans)</span></span></code></pre></div><p>而排列问题的递归调用是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(box, start, ans)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, start </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, ans)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(box, start, ans)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, ans)</span></span></code></pre></div><p>为什么一个是 j+1，一个是 start+1 呢？老规矩，你一定要自己操作一下，这样才能真正消化我给你讲解的知识和解题技巧。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在本讲，我们介绍了回溯题目的 1 个模板、1 个核心，以及 3 个条件。选取了几道具有代表性的题目进行讲解，回溯的题目还有很多。不过只要你领会到本讲价绍的分析方法和解题思想，再遇到回溯问题就难不倒你了。另外，我再强调一句，在处理回溯问题时，还需要注意去重的处理，理解为什么要这样处理。</p><p>为了方便你复习，我把本讲重要的知识点总结在如下图所示的思维导图里，你可以利用课下时间进行消化，再结合练习题巩固今天所学的知识。</p>`,9),es=l('<h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><p>最后再给你留一个思考题。</p><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1~9 的正整数，并且每种组合中不存在重复的数字。</p><p>输入：n = 7, k = 3</p><p>输出：[1, 2, 4]</p><p>解释：只有 3 个数且和为 7 的组合为 [1, 2, 4]</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-iii.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-iii.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-iii.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>关于回溯的知识我们就介绍到这里，接下来请和我一起踏上更加奇妙的算法旅程，下一讲将介绍：13 | 搜索：如何掌握 DFS 与 BFS 的解题套路？记得按时来探险。</p>',8);function ts(cs,rs,Es,ys,is,As){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/32/23/Cgp9HWBtdtSAemcJAABtIIQYuhI248.png"}),y,a(n,{alt:"1.gif",src:"https://s0.lgstatic.com/i/image6/M00/32/23/Cgp9HWBtdtuAF8knABW0aJ4sYFY451.gif"}),i,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/32/2C/CioPOWBtdv6ATY5lAABVm7vYZuA844.png"}),A,F,g,D,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/32/2C/CioPOWBtdwiAS-y4AAEpIitKONI169.png"}),d,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/32/23/Cgp9HWBtdxKAa_IqAADNQcafC-0771.png"}),u,b,h,C,B,x,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtdyOAOcbzAABowutir0s459.png"}),k,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M01/32/23/Cgp9HWBtdyyAEHvOAACZKdDxbbI193.png"}),f,_,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtdzOAKtlQAABSK7rzKO0889.png"}),v,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtd1CAKIPqAAFn75z053s828.png"}),j,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtd2KAMoGiAACIgBcvVEs557.png"}),m,q,a(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image6/M00/32/2C/CioPOWBteASAC2BPAADRSYzADxo556.png"}),N,a(n,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image6/M01/32/24/Cgp9HWBteAyAe5pyAADFY2OC8CY932.png"}),T,a(n,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBteDKABd7KAAC7RMpN8BA100.png"}),L,I,S,a(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M01/32/24/Cgp9HWBteFKAbyA_AABiyDTuqnA371.png"}),w,a(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/32/25/Cgp9HWBteGqAZMylAAEqT_ofGyc931.png"}),P,a(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M01/32/2D/CioPOWBteHmAYEkbAABDDRrPp08346.png"}),V,a(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M00/32/25/Cgp9HWBteIuALQiGAAH4SSA6SLE200.png"}),H,R,K,Q,G,a(n,{alt:"2.gif",src:"https://s0.lgstatic.com/i/image6/M00/32/25/Cgp9HWBteKSAdcDmABC51Quisxo118.gif"}),X,O,a(n,{alt:"3.gif",src:"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteKyAJej-AApc_Eb_YTw097.gif"}),z,a(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteLiAQ_gDAAE5tlvsWjg213.png"}),M,a(n,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteMeAQBV8AABSwrpsu8U552.png"}),W,a(n,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteNGAZD5TAAGFudmr2E8242.png"}),J,a(n,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBtePaAcwJVAAG672uGcho369.png"}),Y,a(n,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteQGAcjy3AALPFrgULVg418.png"}),U,a(n,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteRqATVJhAACynh0Mq7w152.png"}),Z,a(n,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteSCAfdJcAAC171lwGnU669.png"}),$,a(n,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteSiAf626AALTqN7ChdM529.png"}),ss,ns,as,ls,a(n,{alt:"Drawing 21.png",src:"https://s0.lgstatic.com/i/image6/M00/32/2F/CioPOWBteTCALbz-AAC6scJpg2I034.png"}),ps,a(n,{alt:"Drawing 22.png",src:"https://s0.lgstatic.com/i/image6/M01/32/2F/CioPOWBteT-AImZjAADTAQrjfTc956.png"}),os,a(n,{alt:"Drawing 23.png",src:"https://s0.lgstatic.com/i/image6/M01/32/26/Cgp9HWBteUaAFj2OAAIfg-QqiDc226.png"}),es])}const Ds=o(r,[["render",ts]]);export{gs as __pageData,Ds as default};
