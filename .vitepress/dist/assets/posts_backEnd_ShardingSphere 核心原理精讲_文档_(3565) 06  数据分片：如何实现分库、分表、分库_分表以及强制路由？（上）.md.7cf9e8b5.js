import{_ as o,j as e,o as r,g as t,k as l,h as a,Q as p,s}from"./chunks/framework.4e7d56ce.js";const L=JSON.parse('{"title":"06数据分片：如何实现分库、分表、分库+分表以及强制路由？（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3565) 06  数据分片：如何实现分库、分表、分库+分表以及强制路由？（上）.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3565) 06  数据分片：如何实现分库、分表、分库+分表以及强制路由？（上）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3565) 06  数据分片：如何实现分库、分表、分库+分表以及强制路由？（上）.md"},E=p(`<h1 id="_06数据分片-如何实现分库、分表、分库-分表以及强制路由-上" tabindex="-1">06数据分片：如何实现分库、分表、分库+分表以及强制路由？（上） <a class="header-anchor" href="#_06数据分片-如何实现分库、分表、分库-分表以及强制路由-上" aria-label="Permalink to &quot;06数据分片：如何实现分库、分表、分库+分表以及强制路由？（上）&quot;">​</a></h1><p>通过前面几个课时的介绍，相信你对 ShardingSphere 已经有了初步了解。从今天开始，我将带领你通过案例分析逐步掌握 ShardingSphere 的各项核心功能，首当其冲的就是分库分表机制。</p><h3 id="单库单表系统" tabindex="-1">单库单表系统 <a class="header-anchor" href="#单库单表系统" aria-label="Permalink to &quot;单库单表系统&quot;">​</a></h3><p>我们先从单库单表系统说起。在整个课程中，如果没有特殊强调，我们将默认使用 Spring Boot 集成和 ShardingSphere 框架，同时基于 Mybatis 实现对数据库的访问。</p><h4 id="导入开发框架" tabindex="-1">导入开发框架 <a class="header-anchor" href="#导入开发框架" aria-label="Permalink to &quot;导入开发框架&quot;">​</a></h4><p>系统开发的第一步是导入所需的开发框架。在下面这段代码中，我们新建了一个 Spring Boot 代码工程，在 pom 文件中需要添加对 sharding-jdbc-spring-boot-starter 和 mybatis-spring-boot-starter 这两个 starter 的引用：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sharding-jdbc-spring-boot-starter&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.mybatis.spring.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sharding-jdbc-spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.mybatis.spring.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>开发环境初始化要做的工作也就是这些，下面我们来介绍案例的业务场景。</p><h4 id="梳理业务场景" tabindex="-1">梳理业务场景 <a class="header-anchor" href="#梳理业务场景" aria-label="Permalink to &quot;梳理业务场景&quot;">​</a></h4><p>我们考虑一个在医疗健康领域中比较常见的业务场景。在这类场景中，每个用户（User）都有一份健康记录（HealthRecord），存储着代表用户当前健康状况的健康等级（HealthLevel），以及一系列健康任务（HealthTask）。通常，医生通过用户当前的健康记录创建不同的健康任务，然后用户可以通过完成医生所指定的任务来获取一定的健康积分，而这个积分决定了用户的健康等级，并最终影响到整个健康记录。健康任务做得越多，健康等级就越高，用户的健康记录也就越完善，反过来健康任务也就可以越做越少，从而形成一个正向的业务闭环。这里，<strong>我们无意对整个业务闭环做过多的阐述，而是关注这一业务场景下几个核心业务对象的存储和访问方式。</strong></p><p>在这个场景下，我们关注 User、HealthRecord、HealthLevel 和 HealthTask 这四个业务对象。在下面这张图中，对每个业务对象给出最基础的字段定义，以及这四个对象之间的关联关系：</p>`,11),i=s("h4",{id:"完成基础功能",tabindex:"-1"},[a("完成基础功能 "),s("a",{class:"header-anchor",href:"#完成基础功能","aria-label":'Permalink to "完成基础功能"'},"​")],-1),y=s("p",null,"既然采用 Mybatis 作为 ORM 框架，那么就需要遵循 Mybatis 的开发流程。首先，我们需要完成各个业务实体的定义：",-1),d=s("p",null,"业务实体的类定义",-1),h=s("p",null,"基于这些业务实体，我们需要完成对应的 Mapper 文件编写，我把这些 Mapper 文件放在代码工程的 resources 目录下：",-1),g=p(`<p>Mybatis Mapper 文件定义</p><p>下一步是数据源信息的配置，我们把这些信息放在一个单独的 application-traditional.properties 配置文件中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.datasource.driverClassName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.datasource.driverClassName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root</span></span></code></pre></div><p>按照 Spring Boot 的配置约定，我们在 application.properties 配置文件中把上述配置文件设置为启动 profile。通过使用不同的 profile，我们可以完成不同配置体系之间的切换。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.profiles.active</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">traditional</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.profiles.active</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">traditional</span></span></code></pre></div><p>接下来要做的事情就是创建 Repository 层组件：</p>`,6),_=s("p",null,"Repository 层接口定义",-1),u=s("p",null,"最后，我们设计并实现了相关的三个服务类，分别是 UserService、HealthLevelService 和 HealthRecordService。",-1),F=p(`<p>Service 层接口和实现类定义</p><p>通过 UserService，我们会插入一批用户数据用于完成用户信息的初始化。然后，我们有一个 HealthLevelService，专门用来初始化健康等级信息。<strong>请注意，与其他业务对象不同，健康等级信息是系统中的一种典型字典信息</strong>，我们假定系统中存在 5 种健康等级。</p><p>第三个，也是最重要的服务就是 HealthRecordService，我们用它来完成 HealthRecord 以及 HealthTask 数据的存储和访问。这里以 HealthRecordService 服务为例，下面这段代码给出了它的实现过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HealthRecordServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HealthRecordService</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> HealthRecordRepository healthRecordRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> HealthTaskRepository healthTaskRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processHealthRecords</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException{</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">insertHealthRecords</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">insertHealthRecords</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         HealthRecord healthRecord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insertHealthRecord</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">insertHealthTask</span><span style="color:#E1E4E8;">(i, healthRecord);</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(healthRecord.</span><span style="color:#B392F0;">getRecordId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> HealthRecord </span><span style="color:#B392F0;">insertHealthRecord</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">     HealthRecord healthRecord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HealthRecord</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     healthRecord.</span><span style="color:#B392F0;">setUserId</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">     healthRecord.</span><span style="color:#B392F0;">setLevelId</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     healthRecord.</span><span style="color:#B392F0;">setRemark</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Remark&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        healthRecordRepository.</span><span style="color:#B392F0;">addEntity</span><span style="color:#E1E4E8;">(healthRecord);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> healthRecord;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insertHealthTask</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HealthRecord </span><span style="color:#FFAB70;">healthRecord</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">     HealthTask healthTask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HealthTask</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     healthTask.</span><span style="color:#B392F0;">setRecordId</span><span style="color:#E1E4E8;">(healthRecord.</span><span style="color:#B392F0;">getRecordId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     healthTask.</span><span style="color:#B392F0;">setUserId</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">     healthTask.</span><span style="color:#B392F0;">setTaskName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TaskName&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i);</span></span>
<span class="line"><span style="color:#E1E4E8;">     healthTaskRepository.</span><span style="color:#B392F0;">addEntity</span><span style="color:#E1E4E8;">(healthTask);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HealthRecordServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HealthRecordService</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HealthRecordRepository healthRecordRepository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HealthTaskRepository healthTaskRepository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processHealthRecords</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException{</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">insertHealthRecords</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">insertHealthRecords</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         HealthRecord healthRecord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insertHealthRecord</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">insertHealthTask</span><span style="color:#24292E;">(i, healthRecord);</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(healthRecord.</span><span style="color:#6F42C1;">getRecordId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HealthRecord </span><span style="color:#6F42C1;">insertHealthRecord</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">     HealthRecord healthRecord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HealthRecord</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     healthRecord.</span><span style="color:#6F42C1;">setUserId</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">     healthRecord.</span><span style="color:#6F42C1;">setLevelId</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     healthRecord.</span><span style="color:#6F42C1;">setRemark</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Remark&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        healthRecordRepository.</span><span style="color:#6F42C1;">addEntity</span><span style="color:#24292E;">(healthRecord);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> healthRecord;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insertHealthTask</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HealthRecord </span><span style="color:#E36209;">healthRecord</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">     HealthTask healthTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HealthTask</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     healthTask.</span><span style="color:#6F42C1;">setRecordId</span><span style="color:#24292E;">(healthRecord.</span><span style="color:#6F42C1;">getRecordId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     healthTask.</span><span style="color:#6F42C1;">setUserId</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">     healthTask.</span><span style="color:#6F42C1;">setTaskName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TaskName&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">     healthTaskRepository.</span><span style="color:#6F42C1;">addEntity</span><span style="color:#24292E;">(healthTask);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，我们已经从零开始实现了一个完整业务场景所需要的 DAO 层和 Service 层组件。这些组件在业务逻辑上都非常简单，而在技术上也是完全采用了 Mybatis 的经典开发过程。最后，我们可以通过一组简单的单元测试来验证这些组件是否能够正常运行。下面这段代码以 UserServiceTest 类为例给出它的实现，涉及 @RunWith、@SpringBootTest 等常见单元测试注解的使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">webEnvironment</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SpringBootTest.WebEnvironment.MOCK)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserService userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testProcessUsers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">       userService.</span><span style="color:#B392F0;">processUsers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">webEnvironment</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SpringBootTest.WebEnvironment.MOCK)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserService userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testProcessUsers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">       userService.</span><span style="color:#6F42C1;">processUsers</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行这个单元测试，我们可以看到测试通过，并且在数据库的 User 表中也看到了插入的数据。至此，一个单库单表的系统已经构建完成。接下来，我们将对这个系统做分库分表改造。</p><p>在传统单库单表的数据架构上进行分库分表的改造，开发人员只需要做一件事情，那就是基于上一课时介绍的 ShardingSphere 配置体系完成针对具体场景的配置工作即可，所有已经存在的业务代码都不需要做任何的变动，这就是 ShardingSphere 的强大之处。让我们一起开始吧。</p><h3 id="系统改造-如何实现分库" tabindex="-1">系统改造：如何实现分库？ <a class="header-anchor" href="#系统改造-如何实现分库" aria-label="Permalink to &quot;系统改造：如何实现分库？&quot;">​</a></h3><p>作为系统改造的第一步，我们首先来看看如何基于配置体系实现数据的分库访问。</p><h4 id="初始化数据源" tabindex="-1">初始化数据源 <a class="header-anchor" href="#初始化数据源" aria-label="Permalink to &quot;初始化数据源&quot;">​</a></h4><p>针对分库场景，我们设计了两个数据库，分别叫 ds0 和 ds1。显然，针对两个数据源，我们就需要初始化两个 DataSource 对象，这两个 DataSource 对象将组成一个 Map 并传递给 ShardingDataSourceFactory 工厂类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds0,ds1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds0</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds0,ds1</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds0</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds1</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span></code></pre></div><h4 id="设置分片策略" tabindex="-1">设置分片策略 <a class="header-anchor" href="#设置分片策略" aria-label="Permalink to &quot;设置分片策略&quot;">​</a></h4><p>明确了数据源之后，我们需要设置针对分库的分片策略：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{user_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{user_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span></code></pre></div><p>我们知道，在 ShardingSphere 中存在一组 ShardingStrategyConfiguration，这里使用的是基于行表达式的 InlineShardingStrategyConfiguration。</p><p>InlineShardingStrategyConfiguration 包含两个需要设置的参数，一个是指定分片列名称的 shardingColumn，另一个是指定分片算法行表达式的 algorithmExpression。在我们的配置方案中，将基于 user_id 列对 2 的取模值来确定数据应该存储在哪一个数据库中。同时，注意到这里配置的是&quot;default-database-strategy&quot;项。结合上一课时的内容，设置这个配置项相当于是在 ShardingRuleConfiguration 中指定了默认的分库 ShardingStrategy。</p><h4 id="设置绑定表和广播表" tabindex="-1">设置绑定表和广播表 <a class="header-anchor" href="#设置绑定表和广播表" aria-label="Permalink to &quot;设置绑定表和广播表&quot;">​</a></h4><p>接下来我们需要设置绑定表。绑定表（BindingTable）是 ShardingSphere 中提出的一个新概念，我来给你解释一下。</p><p>所谓绑定表，是指与分片规则一致的一组主表和子表。例如，在我们的业务场景中，health_record 表和 health_task 表中都存在一个 record_id 字段。如果我们在应用过程中按照这个 record_id 字段进行分片，那么这两张表就可以构成互为绑定表关系。</p><p>引入绑定表概念的根本原因在于，互为绑定表关系的多表关联查询不会出现笛卡尔积，因此关联查询效率将大大提升。举例说明，如果所执行的为下面这条 SQL：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record record JOIN health_task task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record record JOIN health_task task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span></code></pre></div><p>如果我们不显式配置绑定表关系，假设分片键 record_id 将值 1 路由至第 1 片，将数值 2 路由至第 0 片，那么路由后的 SQL 应该为 4 条，它们呈现为笛卡尔积：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record0 record JOIN health_task0 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record0 record JOIN health_task1 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record1 record JOIN health_task0 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record1 record JOIN health_task1 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record0 record JOIN health_task0 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record0 record JOIN health_task1 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record1 record JOIN health_task0 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record1 record JOIN health_task1 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span></code></pre></div><p>然后，在配置绑定表关系后，路由的 SQL 就会减少到 2 条：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record0 record JOIN health_task0 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record1 record JOIN health_task1 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record0 record JOIN health_task0 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record1 record JOIN health_task1 task ON record.record_id=task.record_id WHERE record.record_id in (1, 2);</span></span></code></pre></div><p><strong>请注意，如果想要达到这种效果，互为绑定表的各个表的分片键要完全相同</strong>。在上面的这些 SQL 语句中，我们不难看出，这个需要完全相同的分片键就是 record_id。</p><p>让我们回到案例中的场景，显然，health_record 和 health_task 应该互为绑定表关系。所以，我们可以在配置文件中添加对这种关系的配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.binding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record, health_task</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.binding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record, health_task</span></span></code></pre></div><p>介绍完绑定表，再来看广播表的概念。<strong>所谓广播表（BroadCastTable），是指所有分片数据源中都存在的表，也就是说，这种表的表结构和表中的数据在每个数据库中都是完全一样的</strong>。广播表的适用场景比较明确，通常针对数据量不大且需要与海量数据表进行关联查询的应用场景，典型的例子就是每个分片数据库中都应该存在的字典表。</p><p>同样回到我们的场景，对于 health_level 表而言，由于它保存着有限的健康等级信息，可以认为它就是这样的一种字典表。所以，我们也在配置文件中添加了对广播表的定义，在下面这段代码中你可以看到：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.broadcast</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_level</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.broadcast</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_level</span></span></code></pre></div><h4 id="设置表分片规则" tabindex="-1">设置表分片规则 <a class="header-anchor" href="#设置表分片规则" aria-label="Permalink to &quot;设置表分片规则&quot;">​</a></h4><p>通过前面的这些配置项，我们根据需求完成了 ShardingRuleConfiguration 中与分库操作相关的配置信息设置。我们知道 ShardingRuleConfiguration 中的 TableRuleConfiguration 是必填项。所以，我们来看一下这个场景下应该如何对表分片进行设置。</p><p>TableRuleConfiguration 是表分片规则配置，包含了用于设置真实数据节点的 actualDataNodes；用于设置分库策略的 databaseShardingStrategyConfig；以及用于设置分布式环境下的自增列生成器的 keyGeneratorConfig。前面已经在 ShardingRuleConfiguration 中设置了默认的 databaseShardingStrategyConfig，现在我们需要完成剩下的 actualDataNodes 和 keyGeneratorConfig 的设置。</p><p>对于 health_record 表而言，由于存在两个数据源，所以，它所属于的 actual-data-nodes 可以用行表达式 ds$-&gt;{0..1}.health_record 来进行表示，代表在 ds0 和 ds1 中都存在表 health_record。而对于 keyGeneratorConfig 而言，通常建议你使用雪花算法。明确了这些信息之后，health_record 表对应的 TableRuleConfiguration 配置也就顺理成章了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}.health_record</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}.health_record</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span></code></pre></div><p>同样的，health_task 表的配置也完全类似，这里需要根据实际情况调整 key-generator.column 的具体数据列：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}.health_task</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}.health_task</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span></code></pre></div><p>让我们重新执行 HealthRecordTest 单元测试，并检查数据库中的数据。下面这张图是 ds0 中的 health_record 和 health_task 表：</p>`,41),k=s("p",null,"ds0 中 health_record 表数据",-1),A=s("p",null,"ds0 中 health_task 表数据",-1),v=s("p",null,"而这张图是 ds1 中的 health_record 和 health_task 表：",-1),b=s("p",null,"ds1 中 health_record 表数据",-1),D=s("p",null,"ds1 中 health_task 表数据",-1),m=s("p",null,"显然，这两张表的数据已经正确进行了分库。",-1),R=s("h3",{id:"小结",tabindex:"-1"},[a("小结 "),s("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),S=s("p",null,"从本课时开始，我们正式进入到 ShardingSphere 核心功能的讲解。为了介绍这些功能特性，我们将从单库单表架构讲起，基于一个典型的业务场景梳理数据操作的需求，并给出整个代码工程的框架，以及基于测试用例验证数据操作结果的实现过程。今天的内容关注于如何实现分库操作，我们通过引入 ShardingSphere 中强大的配置体系实现了分库效果。",-1),C=s("p",null,"这里给你留一道思考题：如何理解绑定表和广播表的含义和作用？",-1),T=s("p",null,"分库是 ShardingSphere 中分片引擎的核心功能之一，也可以说是最简单的功能之一。在下一课时中，我们将继续介绍分表、分库+分表以及强制路由等分片机制。",-1);function H(B,f,I,O,N,q){const n=e("Image");return r(),t("div",null,[E,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/2B/30/Ciqc1F79xmuAcgDXAABZ98dOvow631.png"}),a(),i,y,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/2B/30/Ciqc1F79xn2AZ5AlAAANShGk9Ss532.png"}),a(),d,h,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/2B/3B/CgqCHl79xouAFJaOAAAN0iT9QRU187.png"}),a(),g,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/2B/30/Ciqc1F79xqWAWcuSAAAQHxH2EJw496.png"}),a(),_,u,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/2B/3B/CgqCHl79xruAfTx6AAAXfz-iHSU716.png"}),a(),F,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/2B/30/Ciqc1F79x0uAMmoLAAAni5nGp94973.png"}),a(),k,l(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/2B/30/Ciqc1F79xzCAJRa1AAAsmwNVR2c289.png"}),a(),A,v,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/2B/30/Ciqc1F79x1aAcKcKAAAnnGtKSYI997.png"}),a(),b,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/2B/30/Ciqc1F79x12ACkcOAAAugYxPEXc765.png"}),a(),D,m,R,S,C,T])}const j=o(c,[["render",H]]);export{L as __pageData,j as default};
