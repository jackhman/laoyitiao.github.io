import{_ as p,j as e,o as t,h as r,k as o,f as n,Q as l,s}from"./chunks/framework.d3daa342.js";const v=JSON.parse('{"title":"05自动配置：如何正确理解SpringBoot自动配置实现原理？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Boot 实战开发_文档/(5720) 05  自动配置：如何正确理解 Spring Boot 自动配置实现原理？.md","filePath":"posts/backEnd/Spring Boot 实战开发_文档/(5720) 05  自动配置：如何正确理解 Spring Boot 自动配置实现原理？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Boot 实战开发_文档/(5720) 05  自动配置：如何正确理解 Spring Boot 自动配置实现原理？.md"},E=l(`<h1 id="_05自动配置-如何正确理解springboot自动配置实现原理" tabindex="-1">05自动配置：如何正确理解SpringBoot自动配置实现原理？ <a class="header-anchor" href="#_05自动配置-如何正确理解springboot自动配置实现原理" aria-label="Permalink to &quot;05自动配置：如何正确理解SpringBoot自动配置实现原理？&quot;">​</a></h1><p>通过前面几个课时内容的介绍，相信你对 Spring Boot 中的配置体系已经有了全面的了解。Spring Boot 中的配置体系是一套强大而复杂的体系，其中最基础、最核心的要数自动配置（AutoConfiguration）机制了。今天我们将围绕这个话题详细展开讨论，看看 Spring Boot 如何实现自动配置。那我们就先从 @SpringBootApplication 注解开始讲起。</p><h3 id="springbootapplication-注解" tabindex="-1">@SpringBootApplication 注解 <a class="header-anchor" href="#springbootapplication-注解" aria-label="Permalink to &quot;@SpringBootApplication 注解&quot;">​</a></h3><p>@SpringBootApplication 注解位于 spring-boot-autoconfigure 工程的 org.springframework.boot.autoconfigure 包中，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ComponentScan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">excludeFilters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FilterType.CUSTOM, </span><span style="color:#79B8FF;">classes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeExcludeFilter.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FilterType.CUSTOM, </span><span style="color:#79B8FF;">classes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AutoConfigurationExcludeFilter.class) })</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SpringBootApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">annotation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EnableAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">exclude</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">annotation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EnableAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">excludeName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">annotation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ComponentScan.class, </span><span style="color:#79B8FF;">attribute</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;basePackages&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">scanBasePackages</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">annotation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ComponentScan.class, </span><span style="color:#79B8FF;">attribute</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;basePackageClasses&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">scanBasePackageClasses</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootConfiguration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">excludeFilters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FilterType.CUSTOM, </span><span style="color:#005CC5;">classes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeExcludeFilter.class),</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FilterType.CUSTOM, </span><span style="color:#005CC5;">classes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AutoConfigurationExcludeFilter.class) })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SpringBootApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">annotation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EnableAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#24292E;">    Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">exclude</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">annotation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EnableAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">excludeName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">annotation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ComponentScan.class, </span><span style="color:#005CC5;">attribute</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;basePackages&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">scanBasePackages</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">annotation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ComponentScan.class, </span><span style="color:#005CC5;">attribute</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;basePackageClasses&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">scanBasePackageClasses</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相较一般的注解，@SpringBootApplication 注解显得有点复杂。我们可以通过 exclude 和 excludeName 属性来配置不需要实现自动装配的类或类名，也可以通过 scanBasePackages 和 scanBasePackageClasses 属性来配置需要进行扫描的包路径和类路径。</p><p>注意到 @SpringBootApplication 注解实际上是一个组合注解，它由三个注解组合而成，分别是 @SpringBootConfiguration、@EnableAutoConfiguration 和 @ComponentScan。</p><ul><li><strong>@ComponentScan 注解</strong></li></ul><p>@ComponentScan 注解不是 Spring Boot 引入的新注解，而是属于 Spring 容器管理的内容。@ComponentScan 注解就是扫描基于 @Component 等注解所标注的类所在包下的所有需要注入的类，并把相关 Bean 定义批量加载到容器中。显然，Spring Boot 应用程序中同样需要这个功能。</p><ul><li><strong>@SpringBootConfiguration 注解</strong></li></ul><p>@SpringBootConfiguration 注解比较简单，事实上它是一个空注解，只是使用了 Spring 中的 @Configuration 注解。@Configuration 注解比较常见，提供了 JavaConfig 配置类实现。</p><ul><li><strong>@EnableAutoConfiguration 注解</strong></li></ul><p>@EnableAutoConfiguration 注解是我们需要重点剖析的对象，下面进行重点展开。该注解的定义如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigurationPackage</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(AutoConfigurationImportSelector.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">EnableAutoConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    String ENABLED_OVERRIDE_PROPERTY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.boot.enableautoconfiguration&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">exclude</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">excludeName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigurationPackage</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(AutoConfigurationImportSelector.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EnableAutoConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    String ENABLED_OVERRIDE_PROPERTY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.boot.enableautoconfiguration&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">exclude</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">excludeName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们关注两个新注解，@AutoConfigurationPackage 和 @Import(AutoConfigurationImportSelector.class)。</p><h4 id="autoconfigurationpackage-注解" tabindex="-1">@AutoConfigurationPackage 注解 <a class="header-anchor" href="#autoconfigurationpackage-注解" aria-label="Permalink to &quot;@AutoConfigurationPackage 注解&quot;">​</a></h4><p>@AutoConfigurationPackage 注解定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(AutoConfigurationPackages.Registrar.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">AutoConfigurationPackage</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(AutoConfigurationPackages.Registrar.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">AutoConfigurationPackage</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从命名上讲，在这个注解中我们对该注解所在包下的类进行自动配置，而在实现方式上用到了 Spring 中的 @Import 注解。在使用 Spring Boot 时，@Import 也是一个非常常见的注解，可以用来动态创建 Bean。为了便于理解后续内容，这里有必要对 @Import 注解的运行机制做一些展开，该注解定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 @Import 注解的属性中可以设置需要引入的类名，例如 @AutoConfigurationPackage 注解上的 @Import(AutoConfigurationPackages.Registrar.class)。根据该类的不同类型，Spring 容器针对 @Import 注解有以下四种处理方式：</p><ul><li><p>如果该类实现了 ImportSelector 接口，Spring 容器就会实例化该类，并且调用其 selectImports 方法；</p></li><li><p>如果该类实现了 DeferredImportSelector 接口，则 Spring 容器也会实例化该类并调用其 selectImports方法。DeferredImportSelector 继承了 ImportSelector，区别在于 DeferredImportSelector 实例的 selectImports 方法调用时机晚于 ImportSelector 的实例，要等到 @Configuration 注解中相关的业务全部都处理完了才会调用；</p></li><li><p>如果该类实现了 ImportBeanDefinitionRegistrar 接口，Spring 容器就会实例化该类，并且调用其 registerBeanDefinitions 方法；</p></li><li><p>如果该类没有实现上述三种接口中的任何一个，Spring 容器就会直接实例化该类。</p></li></ul><p>有了对 @Import 注解的基本理解，我们再来看 AutoConfigurationPackages.Registrar 类，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Registrar</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ImportBeanDefinitionRegistrar</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">DeterminableImports</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerBeanDefinitions</span><span style="color:#E1E4E8;">(AnnotationMetadata </span><span style="color:#FFAB70;">metadata</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                BeanDefinitionRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(registry, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PackageImport</span><span style="color:#E1E4E8;">(metadata).</span><span style="color:#B392F0;">getPackageName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">determineImports</span><span style="color:#E1E4E8;">(AnnotationMetadata </span><span style="color:#FFAB70;">metadata</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">singleton</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PackageImport</span><span style="color:#E1E4E8;">(metadata));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Registrar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImportBeanDefinitionRegistrar</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">DeterminableImports</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerBeanDefinitions</span><span style="color:#24292E;">(AnnotationMetadata </span><span style="color:#E36209;">metadata</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                BeanDefinitionRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(registry, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PackageImport</span><span style="color:#24292E;">(metadata).</span><span style="color:#6F42C1;">getPackageName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">determineImports</span><span style="color:#24292E;">(AnnotationMetadata </span><span style="color:#E36209;">metadata</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">singleton</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PackageImport</span><span style="color:#24292E;">(metadata));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这个 Registrar 类实现了前面第三种情况中提到的 ImportBeanDefinitionRegistrar 接口并重写了 registerBeanDefinitions 方法，该方法中调用 AutoConfigurationPackages 自身的 register 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(BeanDefinitionRegistry registry, String... packageNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (registry.</span><span style="color:#B392F0;">containsBeanDefinition</span><span style="color:#E1E4E8;">(BEAN)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            BeanDefinition beanDefinition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registry.</span><span style="color:#B392F0;">getBeanDefinition</span><span style="color:#E1E4E8;">(BEAN);</span></span>
<span class="line"><span style="color:#E1E4E8;">            ConstructorArgumentValues constructorArguments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> beanDefinition</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">getConstructorArgumentValues</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            constructorArguments.</span><span style="color:#B392F0;">addIndexedArgumentValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">addBasePackages</span><span style="color:#E1E4E8;">(constructorArguments, packageNames));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            GenericBeanDefinition beanDefinition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GenericBeanDefinition</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            beanDefinition.</span><span style="color:#B392F0;">setBeanClass</span><span style="color:#E1E4E8;">(BasePackages.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            beanDefinition.</span><span style="color:#B392F0;">getConstructorArgumentValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addIndexedArgumentValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    packageNames);</span></span>
<span class="line"><span style="color:#E1E4E8;">            beanDefinition.</span><span style="color:#B392F0;">setRole</span><span style="color:#E1E4E8;">(BeanDefinition.ROLE_INFRASTRUCTURE);</span></span>
<span class="line"><span style="color:#E1E4E8;">            registry.</span><span style="color:#B392F0;">registerBeanDefinition</span><span style="color:#E1E4E8;">(BEAN, beanDefinition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(BeanDefinitionRegistry registry, String... packageNames) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (registry.</span><span style="color:#6F42C1;">containsBeanDefinition</span><span style="color:#24292E;">(BEAN)) {</span></span>
<span class="line"><span style="color:#24292E;">            BeanDefinition beanDefinition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">getBeanDefinition</span><span style="color:#24292E;">(BEAN);</span></span>
<span class="line"><span style="color:#24292E;">            ConstructorArgumentValues constructorArguments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> beanDefinition</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">getConstructorArgumentValues</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            constructorArguments.</span><span style="color:#6F42C1;">addIndexedArgumentValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">addBasePackages</span><span style="color:#24292E;">(constructorArguments, packageNames));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            GenericBeanDefinition beanDefinition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GenericBeanDefinition</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            beanDefinition.</span><span style="color:#6F42C1;">setBeanClass</span><span style="color:#24292E;">(BasePackages.class);</span></span>
<span class="line"><span style="color:#24292E;">            beanDefinition.</span><span style="color:#6F42C1;">getConstructorArgumentValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addIndexedArgumentValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    packageNames);</span></span>
<span class="line"><span style="color:#24292E;">            beanDefinition.</span><span style="color:#6F42C1;">setRole</span><span style="color:#24292E;">(BeanDefinition.ROLE_INFRASTRUCTURE);</span></span>
<span class="line"><span style="color:#24292E;">            registry.</span><span style="color:#6F42C1;">registerBeanDefinition</span><span style="color:#24292E;">(BEAN, beanDefinition);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个方法的逻辑是先判断整个 Bean 有没有被注册，如果已经注册则获取 Bean 的定义，通过 Bean 获取构造函数的参数并添加参数值；如果没有，则创建一个新的 Bean 的定义，设置 Bean 的类型为 AutoConfigurationPackages 类型并进行 Bean 的注册。</p><h4 id="autoconfigurationimportselector" tabindex="-1">AutoConfigurationImportSelector <a class="header-anchor" href="#autoconfigurationimportselector" aria-label="Permalink to &quot;AutoConfigurationImportSelector&quot;">​</a></h4><p>然后我们再来看 @EnableAutoConfiguration 注解中的 @Import(AutoConfigurationImportSelector.class) 部分，首先我们明确 AutoConfigurationImportSelector 类实现了 @Import 注解第二种情况中的 DeferredImportSelector 接口，所以会执行如下所示的 selectImports 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">selectImports</span><span style="color:#E1E4E8;">(AnnotationMetadata annotationMetadata) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isEnabled</span><span style="color:#E1E4E8;">(annotationMetadata)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> NO_IMPORTS;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        AutoConfigurationMetadata autoConfigurationMetadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AutoConfigurationMetadataLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">loadMetadata</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.beanClassLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">        AnnotationAttributes attributes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAttributes</span><span style="color:#E1E4E8;">(annotationMetadata);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取 configurations 集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; configurations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCandidateConfigurations</span><span style="color:#E1E4E8;">(annotationMetadata,</span></span>
<span class="line"><span style="color:#E1E4E8;">                attributes);</span></span>
<span class="line"><span style="color:#E1E4E8;">        configurations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeDuplicates</span><span style="color:#E1E4E8;">(configurations);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; exclusions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExclusions</span><span style="color:#E1E4E8;">(annotationMetadata, attributes);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">checkExcludedClasses</span><span style="color:#E1E4E8;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#E1E4E8;">        configurations.</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(exclusions);</span></span>
<span class="line"><span style="color:#E1E4E8;">        configurations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(configurations, autoConfigurationMetadata);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">fireAutoConfigurationImportEvents</span><span style="color:#E1E4E8;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">toStringArray</span><span style="color:#E1E4E8;">(configurations);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">selectImports</span><span style="color:#24292E;">(AnnotationMetadata annotationMetadata) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isEnabled</span><span style="color:#24292E;">(annotationMetadata)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> NO_IMPORTS;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        AutoConfigurationMetadata autoConfigurationMetadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AutoConfigurationMetadataLoader</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">loadMetadata</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.beanClassLoader);</span></span>
<span class="line"><span style="color:#24292E;">        AnnotationAttributes attributes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAttributes</span><span style="color:#24292E;">(annotationMetadata);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取 configurations 集合</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; configurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCandidateConfigurations</span><span style="color:#24292E;">(annotationMetadata,</span></span>
<span class="line"><span style="color:#24292E;">                attributes);</span></span>
<span class="line"><span style="color:#24292E;">        configurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeDuplicates</span><span style="color:#24292E;">(configurations);</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; exclusions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExclusions</span><span style="color:#24292E;">(annotationMetadata, attributes);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkExcludedClasses</span><span style="color:#24292E;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#24292E;">        configurations.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(exclusions);</span></span>
<span class="line"><span style="color:#24292E;">        configurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(configurations, autoConfigurationMetadata);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">fireAutoConfigurationImportEvents</span><span style="color:#24292E;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">toStringArray</span><span style="color:#24292E;">(configurations);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码的核心是通过 getCandidateConfigurations 方法获取 configurations 集合并进行过滤。getCandidateConfigurations 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCandidateConfigurations</span><span style="color:#E1E4E8;">(AnnotationMetadata metadata,</span></span>
<span class="line"><span style="color:#E1E4E8;">            AnnotationAttributes attributes) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; configurations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SpringFactoriesLoader.</span><span style="color:#B392F0;">loadFactoryNames</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">getSpringFactoriesLoaderFactoryClass</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">getBeanClassLoader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">notEmpty</span><span style="color:#E1E4E8;">(configurations,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;are using a custom packaging, make sure that file is correct.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> configurations;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCandidateConfigurations</span><span style="color:#24292E;">(AnnotationMetadata metadata,</span></span>
<span class="line"><span style="color:#24292E;">            AnnotationAttributes attributes) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; configurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SpringFactoriesLoader.</span><span style="color:#6F42C1;">loadFactoryNames</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">getSpringFactoriesLoaderFactoryClass</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">getBeanClassLoader</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">notEmpty</span><span style="color:#24292E;">(configurations,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;are using a custom packaging, make sure that file is correct.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> configurations;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码中可以先关注 Assert 校验，该校验是一个非空校验，会提示 &quot;在 META-INF/spring.factories 中没有找到自动配置类&quot; 这个异常信息。看到这里，不得不提到 JDK 中的 SPI 机制，因为无论从 SpringFactoriesLoader 这个类的命名上，还是 META-INF/spring.factories 这个文件目录，两者之间都存在很大的相通性。关于 JDK 中的 SPI 机制，我们在 05 讲的后续内容中马上就会介绍到。</p><p>从类名上看，AutoConfigurationImportSelector 类是一种选择器，负责从各种配置项中找到需要导入的具体配置类。该类的结构如下图所示：</p>`,34),i=s("p",null,"AutoConfigurationImportSelector 类层结构图",-1),y=s("p",null,"显然，AutoConfigurationImportSelector 所依赖的最关键组件就是 SpringFactoriesLoader，下面我们对其进行具体展开。",-1),g=s("h3",{id:"spi-机制和-springfactoriesloader",tabindex:"-1"},[n("SPI 机制和 SpringFactoriesLoader "),s("a",{class:"header-anchor",href:"#spi-机制和-springfactoriesloader","aria-label":'Permalink to "SPI 机制和 SpringFactoriesLoader"'},"​")],-1),u=s("p",null,"要想理解 SpringFactoriesLoader 类，我们首先需要了解 JDK 中 SPI（Service Provider Interface，服务提供者接口）机制。",-1),d=s("h4",{id:"jdk-中的-spi-机制",tabindex:"-1"},[n("JDK 中的 SPI 机制 "),s("a",{class:"header-anchor",href:"#jdk-中的-spi-机制","aria-label":'Permalink to "JDK 中的 SPI 机制"'},"​")],-1),C=s("p",null,"JDK 提供了用于服务查找的一个工具类 java.util.ServiceLoader 来实现 SPI 机制。当服务提供者提供了服务接口的一种实现之后，我们可以在 jar 包的 META-INF/services/ 目录下创建一个以服务接口命名的文件，该文件里配置着一组 Key-Value，用于指定服务接口与实现该服务接口具体实现类的映射关系。而当外部程序装配这个 jar 包时，就能通过该 jar 包 META-INF/services/ 目录中的配置文件找到具体的实现类名，并装载实例化，从而完成模块的注入。SPI 提供了一种约定，基于该约定就能很好地找到服务接口的实现类，而不需要在代码里硬编码指定。JDK 中 SPI 机制开发流程如下图所示：",-1),F=l(`<p>JDK 中 SPI 机制开发流程图</p><h4 id="springfactoriesloader" tabindex="-1">SpringFactoriesLoader <a class="header-anchor" href="#springfactoriesloader" aria-label="Permalink to &quot;SpringFactoriesLoader&quot;">​</a></h4><p>SpringFactoriesLoader 类似这种 SPI 机制，只不过以服务接口命名的文件是放在 META-INF/spring.factories 文件夹下，对应的 Key 为 EnableAutoConfiguration。SpringFactoriesLoader 会查找所有 META-INF/spring.factories 文件夹中的配置文件，并把 Key 为 EnableAutoConfiguration 所对应的配置项通过反射实例化为配置类并加载到容器中。这一点我们可以在 SpringFactoriesLoader 的 loadSpringFactories 方法中进行印证：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadSpringFactories</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        MultiValueMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(classLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Enumeration&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; urls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (classLoader </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">                    classLoader.</span><span style="color:#B392F0;">getResources</span><span style="color:#E1E4E8;">(FACTORIES_RESOURCE_LOCATION) </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ClassLoader.</span><span style="color:#B392F0;">getSystemResources</span><span style="color:#E1E4E8;">(FACTORIES_RESOURCE_LOCATION));</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedMultiValueMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (urls.</span><span style="color:#B392F0;">hasMoreElements</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urls.</span><span style="color:#B392F0;">nextElement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                UrlResource resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UrlResource</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">                Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PropertiesLoaderUtils.</span><span style="color:#B392F0;">loadProperties</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String factoryClassName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((String) entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String factoryName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">commaDelimitedListToStringArray</span><span style="color:#E1E4E8;">((String) entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(factoryClassName, factoryName.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            cache.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(classLoader, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unable to load factories from location [&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    FACTORIES_RESOURCE_LOCATION </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadSpringFactories</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#24292E;">        MultiValueMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(classLoader);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Enumeration&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; urls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (classLoader </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">                    classLoader.</span><span style="color:#6F42C1;">getResources</span><span style="color:#24292E;">(FACTORIES_RESOURCE_LOCATION) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                    ClassLoader.</span><span style="color:#6F42C1;">getSystemResources</span><span style="color:#24292E;">(FACTORIES_RESOURCE_LOCATION));</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedMultiValueMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (urls.</span><span style="color:#6F42C1;">hasMoreElements</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> urls.</span><span style="color:#6F42C1;">nextElement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                UrlResource resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UrlResource</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">                Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PropertiesLoaderUtils.</span><span style="color:#6F42C1;">loadProperties</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    String factoryClassName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((String) entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String factoryName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">commaDelimitedListToStringArray</span><span style="color:#24292E;">((String) entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(factoryClassName, factoryName.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(classLoader, result);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unable to load factories from location [&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    FACTORIES_RESOURCE_LOCATION </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以下就是 spring-boot-autoconfigure 工程中所使用的 spring.factories 配置文件片段，可以看到 EnableAutoConfiguration 项中包含了各式各样的配置项，这些配置项在 Spring Boot 启动过程中都能够通过 SpringFactoriesLoader 加载到运行时环境，从而实现自动化配置：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># Auto Configure</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># Auto Configure</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p>以上就是 Spring Boot 中基于 @SpringBootApplication 注解实现自动配置的基本过程和原理。当然，@SpringBootApplication 注解也可以基于外部配置文件加载配置信息。基于约定优于配置思想，Spring Boot 在加载外部配置文件的过程中大量使用了默认配置。</p><h3 id="conditionalon-系列条件注解" tabindex="-1">@ConditionalOn 系列条件注解 <a class="header-anchor" href="#conditionalon-系列条件注解" aria-label="Permalink to &quot;@ConditionalOn 系列条件注解&quot;">​</a></h3><p>Spring Boot 默认提供了 100 多个 AutoConfiguration 类，显然我们不可能会全部引入。所以在自动装配时，系统会去类路径下寻找是否有对应的配置类。如果有对应的配置类，则按条件进行判断，决定是否需要装配。这里就引出了在阅读 Spring Boot 代码时经常会碰到的另一批注解，即 @ConditionalOn 系列条件注解。</p><h4 id="conditionalon-系列条件注解的示例" tabindex="-1">@ConditionalOn 系列条件注解的示例 <a class="header-anchor" href="#conditionalon-系列条件注解的示例" aria-label="Permalink to &quot;@ConditionalOn 系列条件注解的示例&quot;">​</a></h4><p>我们先通过一个简单的示例来了解 @ConditionalOn 系列条件注解的使用方式，例如以下代码就是这类注解的一种典型应用，该代码位于 Spring Cloud Config 的客户端代码工程 spring-cloud-config-client 中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(ConfigServicePropertySourceLocator.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.cloud.config.enabled&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ConfigServicePropertySourceLocator </span><span style="color:#B392F0;">configServicePropertySource</span><span style="color:#E1E4E8;">(ConfigClientProperties properties) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigServicePropertySourceLocator locator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigServicePropertySourceLocator</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> locator;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(ConfigServicePropertySourceLocator.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.cloud.config.enabled&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConfigServicePropertySourceLocator </span><span style="color:#6F42C1;">configServicePropertySource</span><span style="color:#24292E;">(ConfigClientProperties properties) {</span></span>
<span class="line"><span style="color:#24292E;">        ConfigServicePropertySourceLocator locator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigServicePropertySourceLocator</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                properties);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> locator;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里运用了两个 @ConditionalOn 注解，一个是 @ConditionalOnMissingBean，一个是 @ConditionalOnProperty。再比如在 Spring Cloud Config 的服务器端代码工程 spring-cloud-config-server 中，存在如下 ConfigServerAutoConfiguration 自动配置类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnBean</span><span style="color:#E1E4E8;">(ConfigServerConfiguration.Marker.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(ConfigServerProperties.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">({ EnvironmentRepositoryConfiguration.class, CompositeConfiguration.class, ResourceRepositoryConfiguration.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigServerEncryptionConfiguration.class, ConfigServerMvcConfiguration.class })</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigServerAutoConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnBean</span><span style="color:#24292E;">(ConfigServerConfiguration.Marker.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(ConfigServerProperties.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">({ EnvironmentRepositoryConfiguration.class, CompositeConfiguration.class, ResourceRepositoryConfiguration.class,</span></span>
<span class="line"><span style="color:#24292E;">        ConfigServerEncryptionConfiguration.class, ConfigServerMvcConfiguration.class })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigServerAutoConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们运用了 @ConditionalOnBean 注解。实际上，Spring Boot 中提供了一系列的条件注解，常见的包括：</p><ul><li><p>@ConditionalOnProperty：只有当所提供的属性属于 true 时才会实例化 Bean</p></li><li><p>@ConditionalOnBean：只有在当前上下文中存在某个对象时才会实例化 Bean</p></li><li><p>@ConditionalOnClass：只有当某个 Class 位于类路径上时才会实例化 Bean</p></li><li><p>@ConditionalOnExpression：只有当表达式为 true 的时候才会实例化 Bean</p></li><li><p>@ConditionalOnMissingBean：只有在当前上下文中不存在某个对象时才会实例化 Bean</p></li><li><p>@ConditionalOnMissingClass：只有当某个 Class 在类路径上不存在的时候才会实例化 Bean</p></li><li><p>@ConditionalOnNotWebApplication：只有当不是 Web 应用时才会实例化 Bean</p></li></ul><p>当然 Spring Boot 还提供了一些不大常用的 @ConditionalOnXXX 注解，这些注解都定义在 org.springframework.boot.autoconfigure.condition 包中。</p><p>显然上述 ConfigServicePropertySourceLocator 类中只有在 &quot;spring.cloud.config.enabled&quot; 属性为 true（通过 matchIfMissing 配置项表示默认即为 true）以及类路径上不存在 ConfigServicePropertySourceLocator 时才会进行实例化。而 ConfigServerAutoConfiguration 只有在类路径上存在 ConfigServerConfiguration.Marker 类时才会进行实例化，这是一种常用的自动配置控制技巧。</p><h4 id="conditionalon-系列条件注解的实现原理" tabindex="-1">@ConditionalOn 系列条件注解的实现原理 <a class="header-anchor" href="#conditionalon-系列条件注解的实现原理" aria-label="Permalink to &quot;@ConditionalOn 系列条件注解的实现原理&quot;">​</a></h4><p>@ConditionalOn 系列条件注解非常多，我们无意对所有这些组件进行展开。事实上这些注解的实现原理也大致相同，我们只需要深入了解其中一个就能做到触类旁通。这里我们挑选 @ConditionalOnClass 注解进行展开，该注解定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ ElementType.TYPE, ElementType.METHOD })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Conditional</span><span style="color:#E1E4E8;">(OnClassCondition.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ ElementType.TYPE, ElementType.METHOD })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Conditional</span><span style="color:#24292E;">(OnClassCondition.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到， @ConditionalOnClass 注解本身带有两个属性，一个 Class 类型的 value，一个 String 类型的 name，所以我们可以采用这两种方式中的任意一种来使用该注解。同时 ConditionalOnClass 注解本身还带了一个 @Conditional(OnClassCondition.class) 注解。所以， ConditionalOnClass 注解的判断条件其实就包含在 OnClassCondition 这个类中。</p><p>OnClassCondition 是 SpringBootCondition 的子类，而 SpringBootCondition 又实现了Condition 接口。Condition 接口只有一个 matches 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Condition</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(ConditionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, AnnotatedTypeMetadata </span><span style="color:#FFAB70;">metadata</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Condition</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(ConditionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, AnnotatedTypeMetadata </span><span style="color:#E36209;">metadata</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SpringBootCondition 中的 matches 方法实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(ConditionContext context,</span></span>
<span class="line"><span style="color:#E1E4E8;">            AnnotatedTypeMetadata metadata) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String classOrMethodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClassOrMethodName</span><span style="color:#E1E4E8;">(metadata);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ConditionOutcome outcome </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMatchOutcome</span><span style="color:#E1E4E8;">(context, metadata);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">logOutcome</span><span style="color:#E1E4E8;">(classOrMethodName, outcome);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">recordEvaluation</span><span style="color:#E1E4E8;">(context, classOrMethodName, outcome);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> outcome.</span><span style="color:#B392F0;">isMatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//省略其他方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(ConditionContext context,</span></span>
<span class="line"><span style="color:#24292E;">            AnnotatedTypeMetadata metadata) {</span></span>
<span class="line"><span style="color:#24292E;">        String classOrMethodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClassOrMethodName</span><span style="color:#24292E;">(metadata);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ConditionOutcome outcome </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMatchOutcome</span><span style="color:#24292E;">(context, metadata);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">logOutcome</span><span style="color:#24292E;">(classOrMethodName, outcome);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">recordEvaluation</span><span style="color:#24292E;">(context, classOrMethodName, outcome);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> outcome.</span><span style="color:#6F42C1;">isMatch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//省略其他方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 getClassOrMethodName 方法获取被添加了@ConditionalOnClass 注解的类或者方法的名称，而 getMatchOutcome 方法用于获取匹配的输出。我们看到 getMatchOutcome 方法实际上是一个抽象方法，需要交由 SpringBootCondition 的各个子类完成实现，这里的子类就是 OnClassCondition 类。在理解 OnClassCondition 时，我们需要明白在 Spring Boot 中，@ConditionalOnClass 或者 @ConditionalOnMissingClass 注解对应的条件类都是 OnClassCondition，所以在 OnClassCondition 的 getMatchOutcome 中会同时处理两种情况。这里我们挑选处理 @ConditionalOnClass 注解的代码，核心逻辑如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ClassLoader classLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ConditionMessage matchMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ConditionMessage.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; onClasses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCandidates</span><span style="color:#E1E4E8;">(metadata, ConditionalOnClass.class);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (onClasses </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; missing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMatches</span><span style="color:#E1E4E8;">(onClasses, MatchType.MISSING, classLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">missing.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ConditionOutcome</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">noMatch</span><span style="color:#E1E4E8;">(ConditionMessage.</span><span style="color:#B392F0;">forCondition</span><span style="color:#E1E4E8;">(ConditionalOnClass.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">didNotFind</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;required class&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;required classes&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">(Style.QUOTE, missing));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            matchMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matchMessage.</span><span style="color:#B392F0;">andCondition</span><span style="color:#E1E4E8;">(ConditionalOnClass.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">found</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;required class&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;required classes&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">(Style.QUOTE, </span><span style="color:#B392F0;">getMatches</span><span style="color:#E1E4E8;">(onClasses, MatchType.PRESENT, classLoader));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ClassLoader classLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">ConditionMessage matchMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConditionMessage.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; onClasses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCandidates</span><span style="color:#24292E;">(metadata, ConditionalOnClass.class);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (onClasses </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; missing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMatches</span><span style="color:#24292E;">(onClasses, MatchType.MISSING, classLoader);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">missing.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ConditionOutcome</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">noMatch</span><span style="color:#24292E;">(ConditionMessage.</span><span style="color:#6F42C1;">forCondition</span><span style="color:#24292E;">(ConditionalOnClass.class)</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">didNotFind</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;required class&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;required classes&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">(Style.QUOTE, missing));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            matchMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matchMessage.</span><span style="color:#6F42C1;">andCondition</span><span style="color:#24292E;">(ConditionalOnClass.class)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">found</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;required class&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;required classes&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">(Style.QUOTE, </span><span style="color:#6F42C1;">getMatches</span><span style="color:#24292E;">(onClasses, MatchType.PRESENT, classLoader));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里有两个方法值得注意，一个是 getCandidates 方法，一个是 getMatches 方法。首先通过 getCandidates 方法获取了 ConditionalOnClass 的 name 属性和 value 属性。然后通过 getMatches 方法将这些属性值进行比对，得到这些属性所指定的但在类加载器中不存在的类。如果发现类加载器中应该存在但事实上又不存在的类，则返回一个匹配失败的 Condition；反之，如果类加载器中存在对应类的话，则把匹配信息进行记录并返回一个 ConditionOutcome。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>在今天的内容中，我们接触到了 Spring Boot 开发过程中非常核心的话题，即自动配置。自动配置是理解 Spring Boot 应用程序构建和运行的关键要素。当我们尝试去理解一个基于 Spring Boot 开发的工具或框架时，今天的内容能帮助你快速切入该工具或框架的实现原理。同时，在日常开发过程中，诸如 SPI 机制和 @ConditionalOn 系列条件注解也都可以直接应用到我们自身的系统设计和开发中，从而提供高扩展性的架构实现方案。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>可以说，自动配置是 Spring Boot 最核心和最基本的功能，而 @SpringBootApplication 注解又是 Spring Boot 应用程序的入口。本课时从 @SpringBootApplication 注解入手，详细分析了自动配置机制的实现过程。涉及的知识点比较多，包含 JDK 中的 SPI 机制，以及 @ConditionalOn 系列条件注解，需要你进行分析和掌握。</p><p>这里给你留一道思考题：在 Spring Boot 中，如何基于 JDK 中的 SPI 机制完成对配置类的自动加载？欢迎你在留言区与我交流、互动。</p><p>介绍完配置体系之后，06 讲我们将进入一个全新的主题，即介绍 Spring Boot 中数据访问层的构建方式。</p>`,35);function A(f,m,D,S,h,B){const a=e("Image");return t(),r("div",null,[E,o(a,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image/M00/73/9F/Ciqc1F_GIU2AGFv2AACsHHV_6h0534.png"}),n(),i,y,g,u,d,C,o(a,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image/M00/73/AA/CgqCHl_GIVmABagiAAEbqB5E-U0604.png"}),n(),F])}const k=p(c,[["render",A]]);export{v as __pageData,k as default};
