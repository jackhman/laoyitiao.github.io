import{_ as p,j as e,o as t,g as c,k as o,s,h as n,Q as l}from"./chunks/framework.b3d8e22e.js";const h=JSON.parse('{"title":"增加功能开关 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6677) 22  功能实战：如何使用现有架构添加点赞功能？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6677) 22  功能实战：如何使用现有架构添加点赞功能？.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6677) 22  功能实战：如何使用现有架构添加点赞功能？.md"},E=s("p",null,"你有没有遇到过接手一份新的代码却不知道如何下手的情况？其实，一套良好的开发框架就能有效地解决这种问题。规范的架构与框架不仅具有良好的可扩展性，例如，可以灵活地替换网络层、数据库甚至 UI 层的实现，而且还为开发者提供了统一的开发步骤与规范，方便新功能的快速迭代。",-1),y=s("p",null,[n("我们的 Moments App 使用了 MVVM 架构来支持快速开发，在这一讲中，我们再以"),s("strong",null,"添加点赞功能"),n("为例来看看如何一步一步去开发一个新功能。")],-1),i=s("p",null,[n("如下面的动图所示，我们可以摇动手机来打开内部功能菜单页面，在该页面内点击"),s("strong",null,"开启点赞按钮"),n("来启动点赞功能。当重启 App 以后，我们就能在朋友圈页面里看到点赞按钮了。")],-1),d=l(`<p>根据组件间的依赖关系，我们可以按照以下五个步骤来进行开发：</p><ul><li><p><strong>增加&quot;添加点赞功能&quot;的功能开关；</strong></p></li><li><p><strong>开发网络层来更新 BFF 的点赞信息；</strong></p></li><li><p><strong>开发 Repository 层来存储数据；</strong></p></li><li><p><strong>开发 ViewModel 层来准备 UI 所需的数据；</strong></p></li><li><p><strong>开发 UI/View 层呈现点赞按钮和点赞朋友列表。</strong></p></li></ul><p>下面我们就来详细说明这每一个步骤。</p><h3 id="增加功能开关" tabindex="-1">增加功能开关 <a class="header-anchor" href="#增加功能开关" aria-label="Permalink to &quot;增加功能开关&quot;">​</a></h3><p>当我们开发一个周期比较长的新功能时，通常会使用功能开关。</p><p>如果没有功能开关，当开发周期超过一周以上时，我们就不得不把开发中的功能放在一个&quot;长命&quot;功能分支下，直到整个功能完成后才合并到主分支，这往往会增加合并分支的难度。</p><p>另一种方法是延迟发布的时间，在功能完整开发出来后才进行发布。假如有多个团队一直在开发新功能，那么发布计划就可能一直在延迟。但如果我们使用了功能开关，就可以把未完成的功能一直隐藏着，直到通过完整的测试和产品验证后才把开关启动并进行发布。总之，<strong>有了功能开关，我们可以支持多个团队并行开发，并在此期间随时发布新版本的 App</strong>。</p><p>下面我们看看如何为<strong>添加点赞功能</strong>增加一个功能开关，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalToggle</span><span style="color:#E1E4E8;">: String, ToggleType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> isLikeButtonForMomentEnabled</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalToggle</span><span style="color:#24292E;">: String, ToggleType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> isLikeButtonForMomentEnabled</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先，我们为枚举类型<code>InternalToggle</code>添加<code>isLikeButtonForMomentEnabled</code>来表示<strong>启动点赞功能</strong>的功能开关。</p><p>接着在<code>InternalTogglesDataStore</code>里把该值初始化为<code>false</code>表示默认关闭该功能，这样就能保证 App Store 版本的 App 都看不到这个功能，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalTogglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userDefaults</span><span style="color:#E1E4E8;">: UserDefaults) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.userDefaults.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">defaults</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            InternalToggle.isLikeButtonForMomentEnabled.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">            ])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalTogglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userDefaults</span><span style="color:#24292E;">: UserDefaults) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.userDefaults.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">defaults</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            InternalToggle.isLikeButtonForMomentEnabled.</span><span style="color:#005CC5;">rawValue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">            ])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后一步是通过<code>isLikeButtonForMomentEnabled</code>初始化<code>InternalMenuFeatureToggleItemViewModel</code>，并添加到<code>InternalMenuViewModel</code>的<code>sections</code>属性里面 ，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> featureTogglesSection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">InternalMenuSection</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.featureToggles,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.likeButtonForMomentEnabled, </span><span style="color:#79B8FF;">toggle</span><span style="color:#E1E4E8;">: InternalToggle.isLikeButtonForMomentEnabled)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ])</span></span>
<span class="line"><span style="color:#E1E4E8;">sections </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">just</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    featureTogglesSection,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// other sections</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> featureTogglesSection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">InternalMenuSection</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.featureToggles,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.likeButtonForMomentEnabled, </span><span style="color:#005CC5;">toggle</span><span style="color:#24292E;">: InternalToggle.isLikeButtonForMomentEnabled)</span></span>
<span class="line"><span style="color:#24292E;">    ])</span></span>
<span class="line"><span style="color:#24292E;">sections </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">just</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    featureTogglesSection,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// other sections</span></span>
<span class="line"><span style="color:#24292E;">])</span></span></code></pre></div><p>这样子就为内部隐藏菜单增加了<strong>启动点赞功能</strong>的功能开关。功能开关是其他模块的基础，你会看到我们在其他模块中也都会使用到该开关。</p><h3 id="开发网络层" tabindex="-1">开发网络层 <a class="header-anchor" href="#开发网络层" aria-label="Permalink to &quot;开发网络层&quot;">​</a></h3><p>Moments App 使用了 BFF 来读取朋友圈信息，那我们也把点赞信息存储在 BFF 里面。因为 Moments App 的 BFF 使用了 GraphQL，要更新 BFF 上的数据，我们就需要使用 Mutation。和 Restful API 的 Post 操作不一样，在 GraphQL 的 Mutation 不仅能更新数据，还可以返回数据。</p><p>下面我们就来一起看看网络层的实现，首先定义一个名叫<code>UpdateMomentLikeSessionType</code>的协议来<strong>提供更新点赞信息的接口</strong>，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateMomentLikeSessionType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateLike</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> isLiked: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">momentID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">fromUserID</span><span style="color:#E1E4E8;"> userID: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;MomentsDetails&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateMomentLikeSessionType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateLike</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> isLiked: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">momentID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">fromUserID</span><span style="color:#24292E;"> userID: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;MomentsDetails&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该协议只定义了一个<code>updateLike()</code>方法，该方法会接收以下的入口参数，并返回类型为<code>MomentsDetails</code>的 Observable 序列。</p><ul><li><p><code>isLiked</code>是一个布尔类型，用于表示是否点赞了。</p></li><li><p><code>momentID</code>表示被点赞的那条朋友圈的 ID。</p></li><li><p><code>userID</code>表示点赞的用户 ID。</p></li></ul><p>接着我们定义了一个遵循<code>UpdateMomentLikeSessionType</code>协议的结构体，它名叫<code>UpdateMomentLikeSession</code>。<code>UpdateMomentLikeSession</code>的实现方法和<code>GetMomentsByUserIDSession</code>代码基本一致，我们已经在《18 | 网络层架构：如何设计网络访问与 JSON 数据解析？》那一讲中详细讲述了<code>GetMomentsByUserIDSession</code>的实现，如有需要你可以回去复习一下。</p><p>不同的地方是在<code>query</code>属性的定义里，<code>UpdateMomentLikeSession</code>使用了<code>mutation</code>而不是<code>query</code>，具体定义如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">   mutation updateMomentLike($momentID: ID!, $userID: ID!, $isLiked: Boolean!) { </span></span>
<span class="line"><span style="color:#9ECBFF;">       // the response for updateMomentLike </span></span>
<span class="line"><span style="color:#9ECBFF;">   }</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">   mutation updateMomentLike($momentID: ID!, $userID: ID!, $isLiked: Boolean!) { </span></span>
<span class="line"><span style="color:#032F62;">       // the response for updateMomentLike </span></span>
<span class="line"><span style="color:#032F62;">   }</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span></code></pre></div><p>这样子，我们就能往 BFF 发送一个 Mutation 请求并接收更新后的<code>MomentsDetails</code>信息了。</p><p>除了<strong>更新点赞信息</strong> 以外，我们还要修改<code>GetMomentsByUserIDSession</code>来<strong>读取点赞朋友的列表信息</strong>。</p><p>不过，点赞信息只有在功能开关开启的时候才能看到，因此在读取朋友圈信息的时候需要进行检查。要检查内部功能开关，需要使用到一个<code>InternalTogglesDataStore</code>的实例，因此我们在初始化<code>GetMomentsByUserIDSession</code>的时候可以将<code>InternalTogglesDataStore.shared</code>传递进去，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> togglesDataStore: TogglesDataStoreType</span></span>
<span class="line"><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">togglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> InternalTogglesDataStore.shared, </span><span style="color:#B392F0;">sessionHandler</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.togglesDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> togglesDataStore</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> togglesDataStore: TogglesDataStoreType</span></span>
<span class="line"><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">togglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InternalTogglesDataStore.shared, </span><span style="color:#6F42C1;">sessionHandler</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.togglesDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> togglesDataStore</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当<code>GetMomentsByUserIDSession</code>接收到<code>InternalTogglesDataStore</code>的实例时，可以直接保存到<code>togglesDataStore</code>属性里面，这样我们就能使用<code>togglesDataStore</code>属性来检查点赞功能是否开启了。下面代码展示的是内嵌<code>Session</code>结构体的<code>init()</code>方法：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">togglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> variables: [</span><span style="color:#79B8FF;">AnyHashable</span><span style="color:#E1E4E8;">: Encodable] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;userID&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> userID,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                               </span><span style="color:#9ECBFF;">&quot;withLikes&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> togglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(InternalToggle.isLikeButtonForMomentEnabled)]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">togglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> variables: [</span><span style="color:#005CC5;">AnyHashable</span><span style="color:#24292E;">: Encodable] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;userID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> userID,</span></span>
<span class="line"><span style="color:#24292E;">                                               </span><span style="color:#032F62;">&quot;withLikes&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> togglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(InternalToggle.isLikeButtonForMomentEnabled)]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过调用<code>togglesDataStore.isToggleOn(InternalToggle.isLikeButtonForMomentEnabled)</code>来判断是否开启了点赞功能，如果是，就把<code>withLikes</code>属性赋值为<code>true</code>，否则赋为<code>false</code>。这样就可以在 Query 里面使用<code>withLikes</code>属性了，代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">   query getMomentsDetailsByUserID($userID: ID!, $withLikes: Boolean!) {</span></span>
<span class="line"><span style="color:#9ECBFF;">     getMomentsDetailsByUserID(userID: $userID) {</span></span>
<span class="line"><span style="color:#9ECBFF;">         // other fields</span></span>
<span class="line"><span style="color:#9ECBFF;">         createdDate</span></span>
<span class="line"><span style="color:#9ECBFF;">         isLiked @include(if: $withLikes)</span></span>
<span class="line"><span style="color:#9ECBFF;">         likes @include(if: $withLikes) {</span></span>
<span class="line"><span style="color:#9ECBFF;">           id</span></span>
<span class="line"><span style="color:#9ECBFF;">           avatar</span></span>
<span class="line"><span style="color:#9ECBFF;">         }</span></span>
<span class="line"><span style="color:#9ECBFF;">       }</span></span>
<span class="line"><span style="color:#9ECBFF;">     }</span></span>
<span class="line"><span style="color:#9ECBFF;">   }</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">   query getMomentsDetailsByUserID($userID: ID!, $withLikes: Boolean!) {</span></span>
<span class="line"><span style="color:#032F62;">     getMomentsDetailsByUserID(userID: $userID) {</span></span>
<span class="line"><span style="color:#032F62;">         // other fields</span></span>
<span class="line"><span style="color:#032F62;">         createdDate</span></span>
<span class="line"><span style="color:#032F62;">         isLiked @include(if: $withLikes)</span></span>
<span class="line"><span style="color:#032F62;">         likes @include(if: $withLikes) {</span></span>
<span class="line"><span style="color:#032F62;">           id</span></span>
<span class="line"><span style="color:#032F62;">           avatar</span></span>
<span class="line"><span style="color:#032F62;">         }</span></span>
<span class="line"><span style="color:#032F62;">       }</span></span>
<span class="line"><span style="color:#032F62;">     }</span></span>
<span class="line"><span style="color:#032F62;">   }</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span></code></pre></div><p>在定义<code>query</code>属性的地方，我们把<code>withLikes</code>传递给<code>getMomentsDetailsByUserID</code>Query，然后通过<code>@include</code>来控制是否读取<code>isLiked</code>和<code>likes</code>属性，从而保证只有当<code>isLikeButtonForMomentEnabled</code>开关开启时，才需要读取这两个属性。</p><p>到此为止，网络层的开发就完成了，下面我们再来看看 Repository 层的开发。</p><h3 id="开发-repository-层" tabindex="-1">开发 Repository 层 <a class="header-anchor" href="#开发-repository-层" aria-label="Permalink to &quot;开发 Repository 层&quot;">​</a></h3><p>在朋友圈功能里面，Respository 层的关键组件是<code>MomentsRepo</code>。当它要更新点赞信息时，就会用<code>UpdateMomentLikeSessionType</code>协议，因此我们在初始化的时候也注入对该协议的依赖，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> updateMomentLikeSession: UpdateMomentLikeSessionType</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shared: MomentsRepo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MomentsRepo</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">updateMomentLikeSession</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">UpdateMomentLikeSession</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">}()</span></span>
<span class="line"><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(..., </span><span style="color:#B392F0;">updateMomentLikeSession</span><span style="color:#E1E4E8;">: UpdateMomentLikeSessionType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.updateMomentLikeSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> updateMomentLikeSession: UpdateMomentLikeSessionType</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shared: MomentsRepo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MomentsRepo</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">updateMomentLikeSession</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">UpdateMomentLikeSession</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">}()</span></span>
<span class="line"><span style="color:#D73A49;">init</span><span style="color:#24292E;">(..., </span><span style="color:#6F42C1;">updateMomentLikeSession</span><span style="color:#24292E;">: UpdateMomentLikeSessionType) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.updateMomentLikeSession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们把<code>UpdateMomentLikeSession</code>结构体的实例赋值给<code>updateMomentLikeSession</code>属性，当需要访问网络层时就可以使用该属性的方法，接着看一下<code>updateLike()</code>方法的实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateLike</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isLiked</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">momentID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">fromUserID</span><span style="color:#E1E4E8;"> userID: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">updateLike</span><span style="color:#E1E4E8;">(isLiked, </span><span style="color:#79B8FF;">momentID</span><span style="color:#E1E4E8;">: momentID, </span><span style="color:#79B8FF;">fromUserID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">do</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: { persistentDataStore.</span><span style="color:#79B8FF;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">momentsDetails</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) })</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> () }</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">catchErrorJustReturn</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateLike</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isLiked</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">momentID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">fromUserID</span><span style="color:#24292E;"> userID: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> updateMomentLikeSession</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">updateLike</span><span style="color:#24292E;">(isLiked, </span><span style="color:#005CC5;">momentID</span><span style="color:#24292E;">: momentID, </span><span style="color:#005CC5;">fromUserID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">do</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: { persistentDataStore.</span><span style="color:#005CC5;">save</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">momentsDetails</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> () }</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">catchErrorJustReturn</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过调用<code>updateMomentLikeSession</code>属性的<code>updateLike()</code>方法来更新点赞信息，然后把返回的结果通过<code>persistentDataStore</code>的<code>save()</code>方法保存到本地数据存储中。</p><p>到这里，Repository 层的开发也完成了，我们接着修改 ViewModel 层的代码来支持点赞功能。</p><h3 id="开发-viewmodel-层" tabindex="-1">开发 ViewModel 层 <a class="header-anchor" href="#开发-viewmodel-层" aria-label="Permalink to &quot;开发 ViewModel 层&quot;">​</a></h3><p>因为点赞功能只使用在 UI 层的<code>MomentListItemView</code>里面，所以我们只需要更新该 View 所对应的 ViewModel<code>MomentListItemViewModel</code>即可。为此，我们<strong>增加了两个属性</strong> ：第一个是<code>isLiked</code>属性，用于表示用户是否已经点赞了该朋友圈信息；第二个是<code>likes</code>属性，用于显示点赞了朋友的头像列表。</p><p>有了这两个属性，我们就可以在<code>init()</code>方法里面把<code>MomentsDetails.Moment</code>数据映射到这两个属性中去，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">isLiked </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moment.isLiked </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">likes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moment.likes</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.compactMap { </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.avatar) } </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> []</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">isLiked </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moment.isLiked </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">likes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moment.likes</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.compactMap { </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.avatar) } </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> []</span></span></code></pre></div><p><code>isLiked</code>属性的映射比较简单，只是简单的赋值即可。而<code>likes</code>属性则需要我们把 BFF 返回的 URL 字符串转换为用于呈现图片的<code>URL</code>类型。</p><p>当用户在页面中点击点赞按钮后，我们就需要调用<code>MomentListItemViewModel</code>来完成具体的操作，因此我们在<code>MomentListItemViewModel</code>也定义了两个方法，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">like</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> userID: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> momentsRepo.</span><span style="color:#79B8FF;">updateLike</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isLiked</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">momentID</span><span style="color:#E1E4E8;">: momentID, </span><span style="color:#79B8FF;">fromUserID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unlike</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;"> userID: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> momentsRepo.</span><span style="color:#79B8FF;">updateLike</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isLiked</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">momentID</span><span style="color:#E1E4E8;">: momentID, </span><span style="color:#79B8FF;">fromUserID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">like</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> userID: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> momentsRepo.</span><span style="color:#005CC5;">updateLike</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isLiked</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">momentID</span><span style="color:#24292E;">: momentID, </span><span style="color:#005CC5;">fromUserID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unlike</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;"> userID: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> momentsRepo.</span><span style="color:#005CC5;">updateLike</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isLiked</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">momentID</span><span style="color:#24292E;">: momentID, </span><span style="color:#005CC5;">fromUserID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，<code>like(from userID: String)</code>和<code>unlike(from userID: String)</code>方法都调用了<code>momentsRepo.updateLike()</code>方法来更新点赞信息。至此，ViewModel 层也开发完毕了。</p><h3 id="开发-ui-view-层" tabindex="-1">开发 UI/View 层 <a class="header-anchor" href="#开发-ui-view-层" aria-label="Permalink to &quot;开发 UI/View 层&quot;">​</a></h3><p>其他模块开发完毕以后，最后就是更新 UI/View 层了。因为点赞按钮在每一条朋友圈信息里面，所以我们只需要修改<code>MomentListItemView</code>就可以了。你可以从下面的这个示例图看到新加的组件：</p>`,51),F=l(`<p>从示例图可以看到，新加的组件主要有以下三个。</p><ul><li><p><code>likesStakeView</code>用于存放点赞朋友的列表。</p></li><li><p><code>likesContainerView</code>是一个用来存放<code>likesStakeView</code>的容器视图，我们还可以使用它来设置背景颜色和配置圆角效果。</p></li><li><p><code>favoriteButton</code>表示点赞按钮。</p></li></ul><p>这些 UI 组件的属性定义如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> likesContainerView: UIView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UIColor.designKit.secondaryBackground</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.layer.cornerRadius </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> likesStakeView: UIStackView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.spacing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Spacing.twoExtraSmall</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> favoriteButton: UIButton </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configure</span><span style="color:#E1E4E8;">(.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">asHeartFavoriteButton</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> likesContainerView: UIView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UIColor.designKit.secondaryBackground</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.layer.cornerRadius </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> likesStakeView: UIStackView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.spacing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Spacing.twoExtraSmall</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> favoriteButton: UIButton </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configure</span><span style="color:#24292E;">(.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.translatesAutoresizingMaskIntoConstraints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">asHeartFavoriteButton</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了这些属性以后，我们还需要把它们添加到 UI 里面，下面是<code>setupUI()</code>方法的代码：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupUI</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> togglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(InternalToggle.isLikeButtonForMomentEnabled) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        likesContainerView.</span><span style="color:#79B8FF;">addSubview</span><span style="color:#E1E4E8;">(likesStakeView)</span></span>
<span class="line"><span style="color:#E1E4E8;">        verticalStackView.</span><span style="color:#79B8FF;">addArrangedSubview</span><span style="color:#E1E4E8;">(likesContainerView)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">addSubview</span><span style="color:#E1E4E8;">(favoriteButton)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupUI</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> togglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(InternalToggle.isLikeButtonForMomentEnabled) {</span></span>
<span class="line"><span style="color:#24292E;">        likesContainerView.</span><span style="color:#005CC5;">addSubview</span><span style="color:#24292E;">(likesStakeView)</span></span>
<span class="line"><span style="color:#24292E;">        verticalStackView.</span><span style="color:#005CC5;">addArrangedSubview</span><span style="color:#24292E;">(likesContainerView)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">addSubview</span><span style="color:#24292E;">(favoriteButton)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面的代码可以看到，只有当<code>isLikeButtonForMomentEnabled</code>开关开启时，才需要添加新的组件。添加新组件的逻辑相对比较简单，我们把<code>likesStakeView</code>添加到<code>likesContainerView</code>里面，然后把<code>likesContainerView</code>添加到<code>verticalStackView</code>，这样就可以把点赞的朋友列表放在父视图的底部，最后再把<code>favoriteButton</code>放到父视图里面。</p><p>接着我们为新的组件配置自动布局的约束条件，这就一起来看看<code>setupConstraints()</code>方法的实现：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupConstraints</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> togglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(InternalToggle.isLikeButtonForMomentEnabled) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        likesStakeView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.top.leading.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(Spacing.twoExtraSmall)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.bottom.trailing.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Spacing.twoExtraSmall)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        favoriteButton.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.bottom.trailing.</span><span style="color:#79B8FF;">equalToSuperview</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">offset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Spacing.medium)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupConstraints</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> togglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(InternalToggle.isLikeButtonForMomentEnabled) {</span></span>
<span class="line"><span style="color:#24292E;">        likesStakeView.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.top.leading.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(Spacing.twoExtraSmall)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.bottom.trailing.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Spacing.twoExtraSmall)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        favoriteButton.snp.makeConstraints {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.bottom.trailing.</span><span style="color:#005CC5;">equalToSuperview</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">offset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Spacing.medium)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Moments App 使用了 SnapKit 库来配置约束。在这个例子中，我们通过调用<code>equalToSuperview().offset(Spacing.twoExtraSmall)</code>为<code>likesStakeView</code>添加填充（padding），然后把<code>favoriteButton</code>放置在父视图的右下角。</p><p><strong>配置好布局以后，我们通过绑定的方式来处理点赞按钮的点击事件</strong>，具体代码如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupBindings</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> togglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(InternalToggle.isLikeButtonForMomentEnabled) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        favoriteButton.rx.tap</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: { [</span><span style="color:#F97583;">weak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.favoriteButton.isSelected {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.viewModel</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">like</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.userDataStore.userID).</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.viewModel</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">unlike</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.userDataStore.userID).</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            })</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupBindings</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> togglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(InternalToggle.isLikeButtonForMomentEnabled) {</span></span>
<span class="line"><span style="color:#24292E;">        favoriteButton.rx.tap</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: { [</span><span style="color:#D73A49;">weak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.favoriteButton.isSelected {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.viewModel</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">like</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.userDataStore.userID).</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.viewModel</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">unlike</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.userDataStore.userID).</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样地，在进行绑定前，我们先检查<code>isLikeButtonForMomentEnabled</code>开关是否开启。当开关开启了，我们就使用 RxCocoa 中<code>UIButton</code>的<code>.rx.tap</code>扩展属性来绑定<code>favoriteButton</code>的点击事件。当用户点击了点赞按钮时，就会调用<code>viewModel</code>的<code>like()</code>或者<code>unlike()</code>方法来更新点赞状态。</p><p>到此为止，我们已经开发了一个完整的点赞功能。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲中，我们以<strong>添加点赞功能</strong>为例讲解了如何快速开发一个新功能。因为 Moments App 使用了 MVVM 和 RxSwift 来进行架构，这就保证了每一层都有明确的责任与分工。</p><p>当你开发新功能时，就可以按照我今天讲解的这些步骤一层层来进行开发：<strong>添加功能开关，开发网络层、Repository 层、ViewModel 层和 View 层</strong>。这样能大大减低代码接手的难度，使得整个团队都遵循统一的步骤与规范，从而降低沟通成本，并同时保证代码的质量。</p><p>思考题</p><blockquote><p>你可能已经注意到，当一个类型需要依赖其他类型时，例如当 GetMomentsByUserIDSession 使用 TogglesDataStoreType 时，我们都是通过 init() 方法进行注入的。那为什么我们不在 GetMomentsByUserIDSession 定义 togglesDataStore 属性时直接初始化呢？</p></blockquote><p>你可以把自己的思考写到下面的留言区哦，这一讲就介绍到这里了，下一讲我将介绍如何使用 TDD 来保证功能模块的高质量。</p><p><strong>源码地址</strong></p><blockquote><p>朋友圈点赞功能的源码地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments</a></p></blockquote>`,22);function u(g,C,m,k,D,B){const a=e("Image");return t(),c("div",null,[E,y,i,o(a,{alt:"21-01.gif",src:"https://s0.lgstatic.com/i/image6/M00/3C/B3/CioPOWCL3CuAMBOkASZnzg1UurI778.gif"}),d,o(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/AB/Cgp9HWCL3BeAUoLnAArqYZDfnS4379.png"}),F])}const v=p(r,[["render",u]]);export{h as __pageData,v as default};
