import{_ as l,j as s,o as _,g as p,k as t,Q as r,s as e,h as a}from"./chunks/framework.e0c66c3f.js";const D=JSON.parse('{"title":"ZAB 协议算法 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3159) 第29讲：ZAB 协议算法：崩溃恢复和消息广播.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3159) 第29讲：ZAB 协议算法：崩溃恢复和消息广播.md","lastUpdated":1696338709000}'),i={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3159) 第29讲：ZAB 协议算法：崩溃恢复和消息广播.md"},n=r("",5),d=r("",7),c=r("",4),g=e("p",null,"首先，会对比 logicClock 服务器的投票轮次，当 logicClock 相同时，表明两张选票处于相同的投票阶段，并进入下一阶段，否则跳过。接下来再对比 vote_zxid 被选举的服务器 ID 信息，若接收到的外部投票信息中的 vote_zxid 字段较大，则将自己的票中的 vote_zxid 与 vote_myid 更新为收到的票中的 vote_zxid 与 vote_myid ，并广播出去。要是对比的结果相同，则继续对比 vote_myid 被选举服务器上所保存的最大事务 ID ，若外部投票的 vote_myid 比较大，则将自己的票中的 vote_myid 更新为收到的票中的 vote_myid 。 经过这些对比和替换后，最终该台 Follow 服务器会产生新的投票信息，并在下一轮的投票中发送到 ZooKeeper 集群中。",-1),Z=e("h4",{id:"消息广播",tabindex:"-1"},[a("消息广播 "),e("a",{class:"header-anchor",href:"#消息广播","aria-label":'Permalink to "消息广播"'},"​")],-1),h=e("p",null,"在 Leader 节点服务器处理请求后，需要通知集群中的其他角色服务器进行数据同步。ZooKeeper 集群采用消息广播的方式发送通知。",-1),A=e("p",null,'ZooKeeper 集群使用原子广播协议进行消息发送，该协议的底层实现过程与我们在" 28 | 彻底掌握二阶段提交/三阶段提交算法原理" 的二阶段提交过程非常相似，如下图所示。',-1),m=e("p",null,"当要在集群中的其他角色服务器进行数据同步的时候，Leader 服务器将该操作过程封装成一个 Proposal 提交事务，并将其发送给集群中其他需要进行数据同步的服务器。当这些服务器接收到 Leader 服务器的数据同步事务后，会将该条事务能否在本地正常执行的结果反馈给 Leader 服务器，Leader 服务器在接收到其他 Follow 服务器的反馈信息后进行统计，判断是否在集群中执行本次事务操作。",-1),K=e("p",null,'这里请大家注意 ，与我们" 28 | 彻底掌握二阶段提交/三阶段提交算法原理" 中提到的二阶段提交过程不同（即需要集群中所有服务器都反馈可以执行事务操作后，主服务器再次发送 commit 提交请求执行数据变更） ，ZAB 协议算法省去了中断的逻辑，当 ZooKeeper 集群中有超过一般的 Follow 服务器能够正常执行事务操作后，整个 ZooKeeper 集群就可以提交 Proposal 事务了。',-1),L=e("h3",{id:"总结",tabindex:"-1"},[a("总结 "),e("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),B=e("p",null,"本节课我们主要介绍了 ZooKeeper 中的 ZAB 协议算法。 ZAB 协议算法能够保证 ZooKeeper 集群服务在处理事务性请求后的数据一致性 ，当集群中的 Leader 服务器发生崩溃的时候，ZAB 协议算法可以在 ZooKeeper 集群中重新选举 Leader 并进行数据的同步恢复。其中值得注意的是消息广播的底层实现过程虽然与二阶段提交非常相似，但是与二阶段提交相比，并没有事务丢弃的过程。在 ZooKeeper 集群的消息广播中，只要满足整个集群中超过半数的 Follow 服务器可以执行本次事务操作，Leader 就可以向集群中发送提交事务操作，最终完成数据的变更。",-1);function u(F,T,q,w,C,I){const o=s("Image");return _(),p("div",null,[n,t(o,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/40/D6/Ciqc1F8zqzWAY5J1AAAlia-QXZo498.png"}),d,t(o,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/40/E1/CgqCHl8zq1SABNDvAAB3WcgZ-2s055.png"}),c,t(o,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/40/D6/Ciqc1F8zq2CAABxRAACKTM36L6o309.png"}),g,Z,h,A,t(o,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/40/D6/Ciqc1F8zq2qAXTCIAAB2wqjPhfI084.png"}),m,K,L,B])}const b=l(i,[["render",u]]);export{D as __pageData,b as default};
