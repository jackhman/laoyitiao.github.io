import{_ as o,j as e,o as t,g as c,k as a,s as n,h as p,Q as l}from"./chunks/framework.b3d8e22e.js";const I=JSON.parse('{"title":"并行获取数据 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4189) 12  案例分析：并行计算让代码“飞”起来.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4189) 12  案例分析：并行计算让代码“飞”起来.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4189) 12  案例分析：并行计算让代码“飞”起来.md"},E=n("p",null,"现在的电脑，往往都有多颗核，即使是一部手机，也往往配备了并行处理器，通过多进程和多线程的手段，就可以让多个 CPU 核同时工作，加快任务的执行。",-1),y=n("p",null,[p("Java 提供了非常丰富的 API，来支持多线程开发。对我们 Java 程序员来说，"),n("strong",null,"多线程是面试和工作中必备的技能"),p("。但它如何应用到业务场景中？又有哪些注意事项？本课时将从一个并行获取数据的例子开始，逐步讲解这个面试中最频繁的知识点。")],-1),i=n("h3",{id:"并行获取数据",tabindex:"-1"},[p("并行获取数据 "),n("a",{class:"header-anchor",href:"#并行获取数据","aria-label":'Permalink to "并行获取数据"'},"​")],-1),u=n("p",null,"考虑到下面一种场景。有一个用户数据接口，要求在 50ms 内返回数据。它的调用逻辑非常复杂，打交道的接口也非常多，需要从 20 多个接口汇总数据。这些接口，最小的耗时也要 20ms，哪怕全部都是最优状态，算下来也需要 20*20 = 400ms。",-1),F=n("p",null,"如下图，解决的方式只有并行，通过多线程同时去获取计算结果，最后进行结果拼接。",-1),d=l(`<p>但这种编程模型太复杂了，如果使用原始的线程 API，或者使用 wait、notify 等函数，代码的复杂度可以想象有多大。但幸运的是，现在 Java 中的大多数并发编程场景，都可以使用 concurrent 包的一些工具类来实现。</p><p>在这种场景中，我们就可以使用 <strong>CountDownLatch</strong> 完成操作。CountDownLatch 本质上是一个计数器，我们把它初始化为与执行任务相同的数量。当一个任务执行完时，就将计数器的值减 1，直到计数器值达到 0 时，表示完成了所有的任务，在 await 上等待的线程就可以继续执行下去。</p><p>下面这段代码，是我专门为这个场景封装的一个工具类。它传入了两个参数：一个是要计算的 job 数量，另外一个是整个大任务超时的毫秒数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParallelFetcher</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timeout; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CountDownLatch latch; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ThreadPoolExecutor executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            TimeUnit.HOURS, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParallelFetcher</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">jobSize</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">timeoutMill</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        latch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountDownLatch</span><span style="color:#E1E4E8;">(jobSize); </span></span>
<span class="line"><span style="color:#E1E4E8;">        timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeoutMill; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(Runnable </span><span style="color:#FFAB70;">runnable</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        executor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            runnable.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            latch.</span><span style="color:#B392F0;">countDown</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.latch.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">(timeout, TimeUnit.MILLISECONDS); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.executor.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParallelFetcher</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeout; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CountDownLatch latch; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ThreadPoolExecutor executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            TimeUnit.HOURS, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParallelFetcher</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">jobSize</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">timeoutMill</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        latch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountDownLatch</span><span style="color:#24292E;">(jobSize); </span></span>
<span class="line"><span style="color:#24292E;">        timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeoutMill; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">runnable</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        executor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            runnable.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            latch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.latch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">(timeout, TimeUnit.MILLISECONDS); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.executor.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当我们的 job 运行时间，超过了任务的时间上限，就会被直接终止，这就是 await 函数的功能。</p><p>下面是使用这段代码的一个示例。SlowInterfaceMock 是一个测试类，用来模拟远程服务的超时动作，会等待 0~60 毫秒，程序运行后，会输出执行结果到 map 集合中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String userid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SlowInterfaceMock mock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SlowInterfaceMock</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    ParallelFetcher fetcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParallelFetcher</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method0&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method0</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method1&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method1</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method2&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method2</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method3&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method3</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method4&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method4</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method5&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method5</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method6&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method6</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method7&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method7</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method8&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method8</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method9&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method9</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method10&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method10</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method11&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method11</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method12&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method12</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method13&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method13</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method14&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method14</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method15&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method15</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method16&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method16</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method17&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method17</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method18&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method18</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">submitJob</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;method19&quot;</span><span style="color:#E1E4E8;">, mock.</span><span style="color:#B392F0;">method19</span><span style="color:#E1E4E8;">(userid))); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(fetcher.latch); </span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    fetcher.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String userid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SlowInterfaceMock mock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SlowInterfaceMock</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    ParallelFetcher fetcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParallelFetcher</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method0&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method0</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method1&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method1</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method2&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method2</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method3&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method3</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method4&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method4</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method5&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method5</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method6&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method6</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method7&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method7</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method8&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method8</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method9&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method9</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method10&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method10</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method11&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method11</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method12&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method12</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method13&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method13</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method14&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method14</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method15&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method15</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method16&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method16</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method17&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method17</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method18&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method18</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">submitJob</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;method19&quot;</span><span style="color:#24292E;">, mock.</span><span style="color:#6F42C1;">method19</span><span style="color:#24292E;">(userid))); </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(fetcher.latch); </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result); </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    fetcher.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用这种方式，我们的接口就可以在<strong>固定的时间内</strong>返回了。concurrent 包里面提供了非常多的类似 CountDownLatch 的工具，在享受便捷性的同时，我们来看一下这段代码需要注意的事情。</p><p>首先，latch 的数量加上 map 的 size，总数应该是 20，但运行之后，大概率不是，我们丢失了部分数据。原因就是，main 方法里使用了 HashMap 类，它并不是线程安全的，在并发执行时发生了错乱，造成了错误的结果，将 HashMap 换成 ConcurrentHashMap 即可解决问题。</p><p>从这个小问题我们就可以看出：并发编程并不是那么友好，一不小心就会踏进陷阱。如果你对集合的使用场景并不是特别在行，<strong>直接使用线程安全的类</strong>，出错的概率会更少一点。</p><p>我们再来看一下线程池的设置，里面有非常多的参数，最大池数量达到了 200 个。那线程数到底设置多少合适呢？按照我们的需求，每次请求需要执行 20 个线程，200 个线程就可以支持 10 个并发量，按照最悲观的 50ms 来算的话，这个接口支持的最小 QPS 就是：1000/50*10=200。这就是说，如果访问量增加，这个线程数还可以调大。</p><p>在我们的平常的业务中，有计算密集型任务和 I/O 密集型任务之分。</p><ul><li><strong>I/O 密集型任务</strong></li></ul><p>对于我们常见的互联网服务来说，大多数是属于 <strong>I/O 密集型</strong>的，比如等待数据库的 I/O，等待网络 I/O 等。在这种情况下，当线程数量等于 I/O 任务的数量时，效果是最好的。虽然线程上下文切换会有一定的性能损耗，但相对于缓慢的 I/O 来说，这点损失是可以接受的。</p><p>我们上面说的这种情况，是针对同步 I/O 来说的，基本上是一个任务对应一个线程。异步 NIO 会加速这个过程，《15 | 案例分析：从 BIO 到 NIO，再到 AIO》将对其进行详细讲解。</p><ul><li><strong>计算密集型任务</strong></li></ul><p>计算密集型的任务却正好相反，比如一些耗时的算法逻辑。CPU 要想达到最高的利用率，提高吞吐量，最好的方式就是：让它尽量少地在任务之间切换，此时，线程数等于 CPU 数量，是效率最高的。</p><p>了解了任务的这些特点，就可以通过调整线程数量增加服务性能。比如，高性能的网络工具包 Netty，EventLoop 默认的线程数量，就是处理器的 2 倍。如果我们的业务 I/O 比较耗时，此时就容易造成任务的阻塞，解决方式有两种：一是提高 worker 线程池的大小，另外一种方式是让耗时的操作在另外的线程池里运行。</p><h3 id="从池化对象原理看线程池" tabindex="-1">从池化对象原理看线程池 <a class="header-anchor" href="#从池化对象原理看线程池" aria-label="Permalink to &quot;从池化对象原理看线程池&quot;">​</a></h3><p>线程的资源也是比较昂贵的，频繁地创建和销毁同样会影响系统性能。结合《09 | 案例分析：池化对象的应用场景》中对池化对象的描述，线程资源是非常适合进行池化的。</p><p>线程池与其他对象池的设计思路差不多，但它有一些细微的差别，下面我们来看一下线程池参数最全的构造方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> corePoolSize, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> maximumPoolSize, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> keepAliveTime, </span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit unit, </span></span>
<span class="line"><span style="color:#E1E4E8;">    BlockingQueue</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Runnable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> workQueue, </span></span>
<span class="line"><span style="color:#E1E4E8;">    ThreadFactory threadFactory, </span></span>
<span class="line"><span style="color:#E1E4E8;">    RejectedExecutionHandler handler)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maximumPoolSize, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> keepAliveTime, </span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit unit, </span></span>
<span class="line"><span style="color:#24292E;">    BlockingQueue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Runnable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> workQueue, </span></span>
<span class="line"><span style="color:#24292E;">    ThreadFactory threadFactory, </span></span>
<span class="line"><span style="color:#24292E;">    RejectedExecutionHandler handler)</span></span></code></pre></div><p>前几个参数没有什么好说的，相对于普通对象池而言，由于线程资源总是有效，它甚至少了非常多的 Idle 配置参数（与对象池比较），我们主要来看一下 workQueue 和 handler。</p><p>关于任务的创建过程，可以说是多线程每次必问的问题了。如下图所示，任务被提交后，首先判断它是否达到了最小线程数（coreSize），如果达到了，就将任务缓存在任务队列里。如果队列也满了，会判断线程数量是否达到了最大线程数（maximumPoolSize），如果也达到了，就会进入任务的拒绝策略（handler）。</p>`,24),h=l(`<p>我们来看一下 Executors 工厂类中默认的几个快捷线程池代码。</p><p><strong>1.固定大小线程池</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ExecutorService </span><span style="color:#B392F0;">newFixedThreadPool</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nThreads) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolExecutor</span><span style="color:#E1E4E8;">(nThreads, nThreads, </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">, TimeUnit.MILLISECONDS, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedBlockingQueue&lt;</span><span style="color:#F97583;">Runnable</span><span style="color:#E1E4E8;">&gt;()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExecutorService </span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nThreads) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(nThreads, nThreads, </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">, TimeUnit.MILLISECONDS, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedBlockingQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>FixedThreadPool 的最大最小线程数是相等的，其实设置成不等的也不会起什么作用。主要原因就是它所采用的任务队列 LinkedBlockingQueue 是无界的，代码走不到判断最大线程池的逻辑。keepAliveTime 参数的设置，也没有意义，因为线程池回收的是corePoolSize和maximumPoolSize 之间的线程。</p><p>这个线程池的问题是，由于队列是无界的，在任务较多的情况下，会造成内存使用不可控，同时任务也会在队列里长时间等待。</p><p><strong>2.无限大小线程池</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ExecutorService </span><span style="color:#B392F0;">newCachedThreadPool</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Integer.MAX_VALUE, </span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">60L</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS, </span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> SynchronousQueue&lt;</span><span style="color:#F97583;">Runnable</span><span style="color:#E1E4E8;">&gt;()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExecutorService </span><span style="color:#6F42C1;">newCachedThreadPool</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, Integer.MAX_VALUE, </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">60L</span><span style="color:#24292E;">, TimeUnit.SECONDS, </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> SynchronousQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>CachedThreadPool 是另外一个极端，它的最小线程数是 0，线程空闲 1 分钟的都会被回收。在提交任务时，使用了 SynchronousQueue，不缓存任何任务，直接创建新的线程。这种方式同样会有问题，因为它同样无法控制资源的使用，很容易造成内存溢出和过量的线程创建。</p><p>一般在线上，这两种方式都不推荐，我们需要根据具体的需求，使用 ThreadPoolExecutor 自行构建线程池，这也是阿里开发规范中推荐的方式。</p><ul><li><p>如果任务可以接受一定时间的延迟，那么使用 LinkedBlockingQueue 指定一个队列的上限，缓存一部分任务是合理的；</p></li><li><p>如果任务对实时性要求很高，比如 RPC 服务，就可以使用 SynchronousQueue 队列对任务进行传递，而不是缓存它们。</p></li></ul><p><strong>3.拒绝策略</strong></p><p>默认的拒绝策略，就是抛出异常的 AbortPolicy，与之类似的是 DiscardPolicy，它什么都不做，连异常都不抛出，这个非常不推荐。</p><p>还有一个叫作 CallerRunsPolicy，当线程池饱和时，它会使用用户的线程执行任务。比如，在Controller 里的线程池满了，会阻塞在 Tomcat 的线程池里对任务进行执行，这很容易会将用户线程占满，造成用户业务长时间等待。具体用不用这种策略，还是要看客户对等待时间的忍受程度。</p><p>最后一个策略叫作 <strong>DiscardOldestPolicy</strong>，它在遇到线程饱和时，会先弹出队列里最旧的任务，然后把当前的任务添加到队列中。</p><h3 id="在-springboot-中如何使用异步" tabindex="-1">在 SpringBoot 中如何使用异步？ <a class="header-anchor" href="#在-springboot-中如何使用异步" aria-label="Permalink to &quot;在 SpringBoot 中如何使用异步？&quot;">​</a></h3><p>SpringBoot 中可以非常容易地实现异步任务。</p><p>首先，我们需要在启动类上加上 @EnableAsync 注解，然后在需要异步执行的方法上加上 @Async 注解。一般情况下，我们的任务直接在后台运行就可以，但有些任务需要返回一些数据，这个时候，就可以使用 Future 返回一个代理，供其他的代码使用。</p><p>关键代码如下：</p>`,18),C=l(`<p>默认情况下，Spring 将启动一个默认的线程池供异步任务使用。这个线程池也是无限大的，资源使用不可控，所以强烈建议你使用代码设置一个适合自己的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ThreadPoolTaskExecutor </span><span style="color:#B392F0;">getThreadPoolTaskExecutor</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    ThreadPoolTaskExecutor taskExecutor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolTaskExecutor</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    taskExecutor.</span><span style="color:#B392F0;">setCorePoolSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    taskExecutor.</span><span style="color:#B392F0;">setMaxPoolSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    taskExecutor.</span><span style="color:#B392F0;">setQueueCapacity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    taskExecutor.</span><span style="color:#B392F0;">setKeepAliveSeconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    taskExecutor.</span><span style="color:#B392F0;">setThreadNamePrefix</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test-&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    taskExecutor.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> taskExecutor; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ThreadPoolTaskExecutor </span><span style="color:#6F42C1;">getThreadPoolTaskExecutor</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    ThreadPoolTaskExecutor taskExecutor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolTaskExecutor</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    taskExecutor.</span><span style="color:#6F42C1;">setCorePoolSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    taskExecutor.</span><span style="color:#6F42C1;">setMaxPoolSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    taskExecutor.</span><span style="color:#6F42C1;">setQueueCapacity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    taskExecutor.</span><span style="color:#6F42C1;">setKeepAliveSeconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    taskExecutor.</span><span style="color:#6F42C1;">setThreadNamePrefix</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test-&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    taskExecutor.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> taskExecutor; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="多线程资源盘点" tabindex="-1">多线程资源盘点 <a class="header-anchor" href="#多线程资源盘点" aria-label="Permalink to &quot;多线程资源盘点&quot;">​</a></h3><p><strong>1.线程安全的类</strong></p><p>我们在上面谈到了 HashMap 和 ConcurrentHashMap，后者相对于前者，是线程安全的。多线程的细节非常多，下面我们就来盘点一下，一些常见的线程安全的类。</p><p>注意，下面的每一个对比，<strong>都是面试中的知识点</strong>，想要更加深入地理解，你需要阅读 JDK 的源码。</p><ul><li><p>StringBuilder 对应着 StringBuffer。后者主要是通过 synchronized 关键字实现了线程的同步。值得注意的是，在单个方法区域里，这两者是没有区别的，JIT 的编译优化会去掉 synchronized 关键字的影响。</p></li><li><p>HashMap 对应着 ConcurrentHashMap。ConcurrentHashMap 的话题很大，这里提醒一下 JDK1.7 和 1.8 之间的实现已经不一样了。1.8 已经去掉了分段锁的概念（锁分离技术），并且使用 synchronized 来代替了 ReentrantLock。</p></li><li><p>ArrayList 对应着 CopyOnWriteList。后者是写时复制的概念，适合读多写少的场景。</p></li><li><p>LinkedList 对应着 ArrayBlockingQueue。ArrayBlockingQueue 对默认是不公平锁，可以修改构造参数，将其改成公平阻塞队列，它在 concurrent 包里使用得非常频繁。</p></li><li><p>HashSet 对应着 CopyOnWriteArraySet。</p></li></ul><p>下面以一个经常发生问题的案例，来说一下线程安全的重要性。</p><p>SimpleDateFormat 是我们经常用到的日期处理类，但它本身不是线程安全的，在多线程运行环境下，会产生很多问题，在以往的工作中，通过 sonar 扫描，我发现这种误用的情况特别的多。<strong>在面试中，我也会专门问到 SimpleDateFormat，用来判断面试者是否具有基本的多线程编程意识。</strong></p>`,9),g=l(`<p>执行上图的代码，可以看到，时间已经错乱了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Thu May </span><span style="color:#79B8FF;">01</span><span style="color:#E1E4E8;"> 08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">56</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">618104</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Thu May </span><span style="color:#79B8FF;">01</span><span style="color:#E1E4E8;"> 08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">56</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">618104</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mon Jul </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> 08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">04</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Tue Jun </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;"> 08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">56</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Thu Oct </span><span style="color:#79B8FF;">01</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Sun Jul </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">20220200</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Wed Dec </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> 08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">56</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">2019</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Sun Jul </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">01</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">20220200</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Thu May </span><span style="color:#005CC5;">01</span><span style="color:#24292E;"> 08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">56</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">618104</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Thu May </span><span style="color:#005CC5;">01</span><span style="color:#24292E;"> 08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">56</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">618104</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mon Jul </span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> 08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">04</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Tue Jun </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> 08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">56</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">2020</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Thu Oct </span><span style="color:#005CC5;">01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Sun Jul </span><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">20220200</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Wed Dec </span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> 08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">56</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">2019</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Sun Jul </span><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">20220200</span></span></code></pre></div><p>解决方式就是使用 ThreadLocal 局部变量，代码如下图所示，可以有效地解决线程安全问题。</p>`,3),m=l("<p><strong>2.线程的同步方式</strong></p><p>Java 中实现线程同步的方式有很多，大体可以分为以下 8 类。</p><ul><li><p>使用 Object 类中的 wait、notify、notifyAll 等函数。由于这种编程模型非常复杂，现在已经很少用了。这里有一个关键点，那就是对于这些函数的调用，必须放在同步代码块里才能正常运行。</p></li><li><p>使用 ThreadLocal 线程局部变量的方式，每个线程一个变量，本课时会详细讲解。</p></li><li><p>使用 synchronized 关键字修饰方法或者代码块。这是 Java 中最常见的方式，有锁升级的概念。</p></li><li><p>使用 Concurrent 包里的可重入锁 ReentrantLock。使用 CAS 方式实现的可重入锁。</p></li><li><p>使用 volatile 关键字控制变量的可见性，这个关键字保证了变量的可见性，但不能保证它的原子性。</p></li><li><p>使用线程安全的阻塞队列完成线程同步。比如，使用 LinkedBlockingQueue 实现一个简单的生产者消费者。</p></li><li><p>使用原子变量。<strong>Atomic</strong>* 系列方法，也是使用 CAS 实现的，关于 CAS，我们将在下一课时介绍。</p></li><li><p>使用 Thread 类的 join 方法，可以让多线程按照指定的顺序执行。</p></li></ul><p>下面的截图，是使用 LinkedBlockingQueue 实现的一个简单生产者和消费者实例，<strong>在很多互联网的笔试环节，这个题目会经常出现。</strong> 可以看到，我们还使用了一个 volatile 修饰的变量，来决定程序是否继续运行，这也是 volatile 变量的常用场景。</p>",4),A=l(`<h3 id="fastthreadlocal" tabindex="-1">FastThreadLocal <a class="header-anchor" href="#fastthreadlocal" aria-label="Permalink to &quot;FastThreadLocal&quot;">​</a></h3><p>在我们平常的编程中，使用最多的就是 ThreadLocal 类了。拿最常用的 Spring 来说，它事务管理的传播机制，就是使用 ThreadLocal 实现的。因为 ThreadLocal 是线程私有的，所以 Spring 的事务传播机制是不能够跨线程的。<strong>在问到 Spring 事务管理是否包含子线程时，要能够想到面试官的真实意图。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;">    * Holder to support the {@code currentTransactionStatus()} method, </span></span>
<span class="line"><span style="color:#6A737D;">    * and to support communication between different cooperating advices </span></span>
<span class="line"><span style="color:#6A737D;">    * (e.g. before and after advice) if the aspect involves more than a </span></span>
<span class="line"><span style="color:#6A737D;">    * single method (as will be the case for around advice). </span></span>
<span class="line"><span style="color:#6A737D;">*/</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ThreadLocal&lt;</span><span style="color:#F97583;">TransactionInfo</span><span style="color:#E1E4E8;">&gt; transactionInfoHolder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> NamedThreadLocal&lt;&gt;(</span><span style="color:#9ECBFF;">&quot;Current aspect-driven transaction&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;">    * Holder to support the {@code currentTransactionStatus()} method, </span></span>
<span class="line"><span style="color:#6A737D;">    * and to support communication between different cooperating advices </span></span>
<span class="line"><span style="color:#6A737D;">    * (e.g. before and after advice) if the aspect involves more than a </span></span>
<span class="line"><span style="color:#6A737D;">    * single method (as will be the case for around advice). </span></span>
<span class="line"><span style="color:#6A737D;">*/</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">TransactionInfo</span><span style="color:#24292E;">&gt; transactionInfoHolder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> NamedThreadLocal&lt;&gt;(</span><span style="color:#032F62;">&quot;Current aspect-driven transaction&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>既然 Java 中有了 ThreadLocal 类了，为什么 Netty 还自己创建了一个叫作 FastThreadLocal 的结构？</p><p>我们首先来看一下 ThreadLocal 的实现。</p><p>Thread 类中，有一个成员变量 ThreadLocals，存放了与本线程相关的所有自定义信息。对这个变量的定义在 Thread 类，而操作却在 ThreadLocal 类中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        ThreadLocalMap map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMap</span><span style="color:#E1E4E8;">(t); </span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">ThreadLocalMap </span><span style="color:#B392F0;">getMap</span><span style="color:#E1E4E8;">(Thread t) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> t.threadLocals; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        ThreadLocalMap map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMap</span><span style="color:#24292E;">(t); </span></span>
<span class="line"><span style="color:#24292E;">        ... </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">ThreadLocalMap </span><span style="color:#6F42C1;">getMap</span><span style="color:#24292E;">(Thread t) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> t.threadLocals; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>问题就出在 ThreadLocalMap 类上，它虽然叫 Map，但却没有实现 Map 的接口。如下图，ThreadLocalMap 在 rehash 的时候，并没有采用类似 HashMap 的数组+链表+红黑树的做法，它只使用了一个数组，使用<strong>开放寻址</strong>（遇到冲突，依次查找，直到空闲位置）的方法，这种方式是非常低效的。</p>`,8),b=n("p",null,"由于 Netty 对 ThreadLocal 的使用非常频繁，Netty 对它进行了专项的优化。它之所以快，是因为在底层数据结构上做了文章，使用常量下标对元素进行定位，而不是使用JDK 默认的探测性算法。",-1),B=n("p",null,"还记得《03 | 深入剖析：哪些资源，容易成为瓶颈？》提到的伪共享问题吗？底层的 InternalThreadLocalMap对cacheline 也做了相应的优化。",-1),T=l(`<h3 id="你在多线程使用中都遇到过哪些问题" tabindex="-1">你在多线程使用中都遇到过哪些问题？ <a class="header-anchor" href="#你在多线程使用中都遇到过哪些问题" aria-label="Permalink to &quot;你在多线程使用中都遇到过哪些问题？&quot;">​</a></h3><p>通过上面的知识总结，可以看到多线程相关的编程，是属于比较高阶的技能。面试中，<strong>面试官会经常问你在多线程使用中遇到的一些问题，以此来判断你实际的应用情况。</strong></p><p>我们先总结一下文中已经给出的示例：</p><ul><li><p>线程池的不正确使用，造成了资源分配的不可控；</p></li><li><p>I/O 密集型场景下，线程池开得过小，造成了请求的频繁失败；</p></li><li><p>线程池使用了 CallerRunsPolicy 饱和策略，造成了业务线程的阻塞；</p></li><li><p>SimpleDateFormat 造成的时间错乱。</p></li></ul><p>另外，我想要着重提到的一点是，在处理循环的任务时，一定不要忘了捕捉异常。尤其需要说明的是，像 NPE 这样的异常，由于是非捕获型的，IDE 的代码提示往往不起作用。我见过很多案例，就是由于忘了处理异常，造成了任务中断，这种问题发生的机率小，是比较难定位的，一定要保持良好的编码习惯。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">（！isInterrupted（））{ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">        ...... </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">){ </span></span>
<span class="line"><span style="color:#E1E4E8;">        ...... </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">（！isInterrupted（））{ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">        ...... </span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#24292E;">        ...... </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>多线程环境中，异常日志是非常重要的，但线程池的默认行为并不是特别切合实际。参见如下代码，任务执行时，抛出了一个异常，但我们的终端什么都没输出，异常信息丢失了，这对问题排查非常不友好。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newCachedThreadPool</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">executor.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">( ()</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; s.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}); </span></span>
<span class="line"><span style="color:#E1E4E8;">executor.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newCachedThreadPool</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">executor.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">( ()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; s.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}); </span></span>
<span class="line"><span style="color:#24292E;">executor.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span></code></pre></div><p>我们跟踪任务的执行，在 ThreadPoolExecutor 类中可以找到任务发生异常时的方法，它是抛给了 afterExecute 方法进行处理。</p>`,9),_=l('<p>可惜的是，ThreadPoolExecutor 中的 afterExecute 方法是没有任何实现的，它是个空方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterExecute</span><span style="color:#E1E4E8;">(Runnable r, Throwable t) { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterExecute</span><span style="color:#24292E;">(Runnable r, Throwable t) { }</span></span></code></pre></div><p>如果你通过重写 afterExecute 来改变这个默认行为，但这代价点大。其实，使用 submit 方法提交的任务，会返回一个 Future 对象，只有调用了它的 get 方法，这个异常才会打印。使用 submit 方法提交的任务，代码永远不会走到上图标红的一行，获取异常的方式有且只有这一种。</p><p>只有使用 execute 方法提交的任务才会走到这行异常处理代码。如果你想要默认打印异常，推荐使用 execute 方法提交任务，它和 submit 方法的区别，也不仅仅是返回值不一样那么简单。</p><h3 id="关于异步" tabindex="-1">关于异步 <a class="header-anchor" href="#关于异步" aria-label="Permalink to &quot;关于异步&quot;">​</a></h3><p>曾经有同事问我：&quot;异步，并没有减少任务的执行步骤，也没有算法上的改进，那么为什么说异步的速度更快呢？&quot;</p><p>其实这是部分同学对&quot;异步作用&quot;的错误理解。<strong>异步是一种编程模型，它通过将耗时的操作转移到后台线程运行，从而减少对主业务的堵塞，所以我们说异步让速度变快了</strong>。但如果你的系统资源使用已经到了极限，异步就不能产生任何效果了，它主要优化的是那些阻塞性的等待。</p><p>在我们前面的课程里，缓冲、缓存、池化等优化方法，都是用到了异步。它能够起到转移冲突，优化请求响应的作用。由于合理地利用了资源，我们的系统响应确实变快了， 之后的《15 | 案例分析：从 BIO 到 NIO，再到 AIO》会对此有更多讲解。</p><p>异步还能够对业务进行解耦，如下图所示，它比较像是生产者消费者模型。主线程负责生产任务，并将它存放在待执行列表中；消费线程池负责任务的消费，进行真正的业务逻辑处理。</p>',9),D=l('<h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>多线程的话题很大，本课时的内容稍微多，我们简单总结一下课时重点。</p><p>本课时默认你已经有了多线程的基础知识（否则看起来会比较吃力），所以我们从 CountDownLatch 的一个实际应用场景说起，谈到了线程池的两个重点：<strong>阻塞队列</strong> 和<strong>拒绝策略</strong>。</p><p>接下来，我们学习了如何在常见的框架 <strong>SpringBoot 中配置任务异步执行</strong> 。我们还对多线程的一些重要知识点进行了盘点，尤其看了一些线程安全的工具，以及线程的同步方式。最后，我们对最常用的 <strong>ThreadLocal</strong> 进行了介绍，并了解了 Netty 对这个工具类的优化。</p><p><strong>本课时的所有问题，都是面试高频考点。</strong> 多线程编程的难点除了 API 繁多复杂外，还在于异步编程的模式很难调试。</p><p>我们也对比较难回答的使用经验问题，进行了专题讨论，例如&quot;你在多线程使用中遇到的一些问题以及解决方法&quot;，这种问题被问到的概率还是很高的。</p>',6);function k(v,S,q,f,x,P){const s=e("Image");return t(),c("div",null,[E,y,i,u,F,a(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/43/F4/CgqCHl8856-AdSNPAACjNbY02o4445.png"}),d,a(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/43/E9/Ciqc1F8858qAEUHZAACDI8Y5Ehc385.png"}),h,a(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/43/F4/CgqCHl88596AfI6BAAQTo7l7qJs148.png"}),C,a(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/43/F4/CgqCHl885-eAAm9sAACoGWQZ14E564.png"}),g,a(s,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/43/F4/CgqCHl885-6AEAKjAADZkiqqLtY077.png"}),m,a(s,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/43/E9/Ciqc1F885_aAbF8qAAEC6dLMPo0828.png"}),A,a(s,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/43/F4/CgqCHl886AKAV0BAAAOn46tA-8c161.png"}),b,B,a(s,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/43/E9/Ciqc1F886AqAGmwzAAJh0-ZJljI401.png"}),T,a(s,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/43/E9/Ciqc1F886BSASB_lAAC1lOQlBbE230.png"}),_,a(s,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/43/F5/CgqCHl886B6ADAe8AAFW13_eF1Q541.png"}),D])}const J=o(r,[["render",k]]);export{I as __pageData,J as default};
