import{_ as l,j as o,o as t,g as i,k as n,h as a,s,Q as e}from"./chunks/framework.4e7d56ce.js";const q=JSON.parse('{"title":"配置中心基本模型 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4761) 16  配置方案：如何设计分布式环境下的配置中心解决方案？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4761) 16  配置方案：如何设计分布式环境下的配置中心解决方案？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4761) 16  配置方案：如何设计分布式环境下的配置中心解决方案？.md"},c=s("p",null,"从今天开始，我们进入到配置中心的讨论。在微服务架构中，面对分散在各个服务、各个环境中的各种配置信息，配置中心是必备组件之一。Spring Cloud 中也专门提供了一个 Spring Cloud Config 框架来实现分布式配置中心。在引入这个框架之前，今天我们将先给出分布式配置的基本模型，并基于 Spring Boot 分析配置体系。",-1),d=s("h3",{id:"配置中心基本模型",tabindex:"-1"},[a("配置中心基本模型 "),s("a",{class:"header-anchor",href:"#配置中心基本模型","aria-label":'Permalink to "配置中心基本模型"'},"​")],-1),g=s("p",null,"在《追本溯源：究竟什么样的架构才是微服务架构？》中我们已经提到，微服务架构对于配置中心的需求一方面来自服务的数量。在传统的单块系统中，对于配置信息的管理，往往倾向于把所有配置项跟源代码一起放在代码仓库中，这样比较简单，在确保配置信息安全性的同时，往往也可以运行得很好。但在微服务架构中，如果这样做，势必会导致很多配置信息重复出现在不同的服务中，造成浪费且增加维护成本。",-1),E=s("p",null,"另一方面，配置中心的需求来自配置信息的分散性。可以想象，在一个微服务系统中，势必存在多个服务，而这些服务一般都会存在开发环境、测试环境、预发布环境、生产环境等多套环境。针对不同的环境，我们都会采用一套不同的配置体系。那么如何保证多个环境中这些配置信息都能在各个服务实例中进行实时的同步更新呢？这就需要引入集中式配置管理的设计思想，如下图所示：",-1),h=s("p",null,"集中式配置中心示例图",-1),u=s("p",null,"在上图中，可以看到开发、测试和生产等不同环境的配置信息统一保存在一个配置中心中。而每个环境都构成了一个分布式集群，我们也需要保证每个集群中所有服务内部保存的同一份配置信息能够得到同步的更新。",-1),y=s("p",null,[a("考虑到服务的数量和配置信息的"),s("strong",null,"分散性"),a("，一般都需要引入配置中心的设计思想和相关工具。每一个微服务系统都应该有一个配置中心，而所有微服务中所使用到的配置信息都应该维护在配置中心中。对于配置中心的组成结构，我们可以做一层抽象，如下图所示：")],-1),_=e("",10),m=e("",30);function v(b,f,k,C,S,x){const p=o("Image");return t(),i("div",null,[c,d,g,E,n(p,{alt:"Lark20201112-150617.png",src:"https://s0.lgstatic.com/i/image/M00/6D/2B/Ciqc1F-s34GAFVJmAAKnrEuvJgc476.png"}),a(),h,u,y,n(p,{alt:"Lark20201112-150624.png",src:"https://s0.lgstatic.com/i/image/M00/6D/2B/Ciqc1F-s342AYo8VAAI3kaXIffk714.png"}),a(),_,n(p,{alt:"Lark20201112-150626.png",src:"https://s0.lgstatic.com/i/image/M00/6D/36/CgqCHl-s356AKZoWAAKFrCEd0Fc666.png"}),a(),m])}const B=l(r,[["render",v]]);export{q as __pageData,B as default};
