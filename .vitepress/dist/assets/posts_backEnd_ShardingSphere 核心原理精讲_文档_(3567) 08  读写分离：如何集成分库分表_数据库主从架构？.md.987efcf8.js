import{_ as n,D as l,o as p,g as o,J as e,h as r,Q as s}from"./chunks/framework.f67d7268.js";const m=JSON.parse('{"title":"08读写分离：如何集成分库分表+数据库主从架构？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3567) 08  读写分离：如何集成分库分表+数据库主从架构？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3567) 08  读写分离：如何集成分库分表+数据库主从架构？.md","lastUpdated":1696682708000}'),t={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3567) 08  读写分离：如何集成分库分表+数据库主从架构？.md"},c=s('<h1 id="_08读写分离-如何集成分库分表-数据库主从架构" tabindex="-1">08读写分离：如何集成分库分表+数据库主从架构？ <a class="header-anchor" href="#_08读写分离-如何集成分库分表-数据库主从架构" aria-label="Permalink to &quot;08读写分离：如何集成分库分表+数据库主从架构？&quot;">​</a></h1><p>为了应对高并发场景下的数据库访问需求，读写分离架构是现代数据库架构的一个重要组成部分。今天，我就和你一起来学习 ShardingSphere 中所提供的读写分离机制，以及这一机制如何与前面介绍的分库分表和强制路由整合在一起使用。</p><h3 id="shardingsphere-中的读写分离" tabindex="-1">ShardingSphere 中的读写分离 <a class="header-anchor" href="#shardingsphere-中的读写分离" aria-label="Permalink to &quot;ShardingSphere 中的读写分离&quot;">​</a></h3><p>为了应对数据库读写分离，ShardingSphere 所提供的解决方案还是依赖于强大的配置体系。为了更好地理解这些读写分离相关的配置，我们有必要对读写分离与主从架构有一定的了解。</p><h4 id="读写分离与主从架构" tabindex="-1">读写分离与主从架构 <a class="header-anchor" href="#读写分离与主从架构" aria-label="Permalink to &quot;读写分离与主从架构&quot;">​</a></h4><p>目前，大部分的主流关系型数据库都提供了主从架构的实现方案，通过配置两台或多台数据库的主从关系，可以将一台数据库服务器的数据更新自动同步到另一台服务器上。而<strong>应用程序可以利用数据库的这一功能，实现数据的读写分离，从而改善数据库的负载压力。</strong></p>',6),y=s(`<p>可以看到，<strong>所谓的读写分离，实际上就是将写操作路由到主数据库，而将读操作路由到从数据库</strong>。对于互联网应用而言，读取数据的需求远远大于写入数据的需求，所以从数据库一般都是多台。当然，对于复杂度较高的系统架构而言，主库的数量同样也可以是多台。</p><h4 id="读写分离与-shardingsphere" tabindex="-1">读写分离与 ShardingSphere <a class="header-anchor" href="#读写分离与-shardingsphere" aria-label="Permalink to &quot;读写分离与 ShardingSphere&quot;">​</a></h4><p>就 ShardingSphere 而言，<strong>支持主从架构下的读写分离是一项核心功能</strong>。目前 ShardingSphere 支持单主库、多从库的主从架构来完成分片环境下的读写分离，暂时不支持多主库的应用场景。</p><p>在数据库主从架构中，因为从库一般会有多台，所以当执行一条面向从库的 SQL 语句时，我们需要实现一套负载均衡机制来完成对目标从库的路由。ShardingSphere 默认提供了随机（Random）和轮询（RoundRobin）这两种负载均衡算法来完成这一目标。</p><p>另一方面，由于主库和从库之间存在一定的同步时延和数据不一致情况，所以在有些场景下，我们可能更希望从主库中获取最新数据。ShardingSphere 同样考虑到了这方面需求，开发人员可以通过 Hint 机制来实现对主库的强制路由。</p><h4 id="配置读写分离" tabindex="-1">配置读写分离 <a class="header-anchor" href="#配置读写分离" aria-label="Permalink to &quot;配置读写分离&quot;">​</a></h4><p>实现读写分离要做的还是配置工作。<strong>通过配置，我们的目标是获取支持读写分离的 MasterSlaveDataSource</strong>，而 MasterSlaveDataSource 的创建依赖于 MasterSlaveDataSourceFactory 工厂类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveDataSourceFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DataSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">dataSourceMap</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MasterSlaveRuleConfiguration </span><span style="color:#FFAB70;">masterSlaveRuleConfig</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveDataSource</span><span style="color:#E1E4E8;">(dataSourceMap, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveRule</span><span style="color:#E1E4E8;">(masterSlaveRuleConfig), props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveDataSourceFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DataSource</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">dataSourceMap</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MasterSlaveRuleConfiguration </span><span style="color:#E36209;">masterSlaveRuleConfig</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties </span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveDataSource</span><span style="color:#24292E;">(dataSourceMap, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveRule</span><span style="color:#24292E;">(masterSlaveRuleConfig), props);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面这段代码中，我们可以看到 createDataSource 方法中传入了三个参数，除了熟悉的 dataSourceMap 和 props 之外，还有一个 MasterSlaveRuleConfiguration，而这个 MasterSlaveRuleConfiguration 包含了所有我们需要配置的读写分离信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveRuleConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuleConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//读写分离数据源名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//主库数据源名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String masterDataSourceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//从库数据源名称列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; slaveDataSourceNames;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//从库负载均衡算法</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> LoadBalanceStrategyConfiguration loadBalanceStrategyConfiguration;</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveRuleConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuleConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//读写分离数据源名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//主库数据源名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String masterDataSourceName;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//从库数据源名称列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; slaveDataSourceNames;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//从库负载均衡算法</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LoadBalanceStrategyConfiguration loadBalanceStrategyConfiguration;</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 MasterSlaveRuleConfiguration 类所定义的变量中不难看出，<strong>我们需要配置读写分离数据源名称、主库数据源名称、从库数据源名称列表以及从库负载均衡算法这四个配置项</strong>，仅此而已。</p><h3 id="系统改造-如何实现读写分离" tabindex="-1">系统改造：如何实现读写分离？ <a class="header-anchor" href="#系统改造-如何实现读写分离" aria-label="Permalink to &quot;系统改造：如何实现读写分离？&quot;">​</a></h3><p>在掌握了读写分离的基本概念以及相关配置项之后，我们回到案例，看如何在单库单表架构中引入读写分离机制。</p><p>第一步，仍然是设置用于实现读写分离的数据源。为了演示一主多从架构，我们初始化了一个主数据源 dsmaster 以及两个从数据源 dsslave0 和 dsslave1：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster,dsslave0,dsslave1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsmaster.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsmaster.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsmaster.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/dsmaster</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsmaster.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsmaster.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave0.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave0.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave0.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/dsslave0</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave0.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave0.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave1.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave1.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave1.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/dsslave1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave1.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.dsslave1.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster,dsslave0,dsslave1</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsmaster.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsmaster.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsmaster.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/dsmaster</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsmaster.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsmaster.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave0.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave0.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave0.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/dsslave0</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave0.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave0.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave1.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave1.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave1.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/dsslave1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave1.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.dsslave1.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span></code></pre></div><p>有了数据源之后，我们需要设置 MasterSlaveRuleConfiguration 类中所指定的 4 个配置项，这里负载均衡算法设置的是 random，也就是使用的随机算法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.masterslave.name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_ms</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.masterslave.master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">source</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.masterslave.slave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">source</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsslave0,dsslave1 </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.masterslave.load</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">balance</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">random</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.masterslave.name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_ms</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.masterslave.master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">source</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.masterslave.slave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">source</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsslave0,dsslave1 </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.masterslave.load</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">balance</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">random</span></span></code></pre></div><p>现在我们来插入 User 对象，从控制台的日志中可以看到，ShardingSphere 执行的路由类型是 master-slave ，而具体 SQL 的执行是发生在 dsmaster 主库中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">58</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">08.721</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">4392</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Rule Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">58</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">08.721</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">4392</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> SQL</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> INSERT INTO </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (user_id, user_name) </span><span style="color:#B392F0;">VALUES</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:::</span><span style="color:#E1E4E8;"> DataSources</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dsmaster</span></span>
<span class="line"><span style="color:#E1E4E8;">Insert User</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">58</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">08.721</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">4392</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Rule Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">58</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">08.721</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">4392</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> SQL</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> INSERT INTO </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> (user_id, user_name) </span><span style="color:#B392F0;">VALUES</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:::</span><span style="color:#E1E4E8;"> DataSources</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dsmaster</span></span>
<span class="line"><span style="color:#E1E4E8;">Insert User</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">58</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">08.721</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">4392</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Rule Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">58</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">08.721</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">4392</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> SQL</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> INSERT INTO </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (user_id, user_name) </span><span style="color:#6F42C1;">VALUES</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:::</span><span style="color:#24292E;"> DataSources</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dsmaster</span></span>
<span class="line"><span style="color:#24292E;">Insert User</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">58</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">08.721</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">4392</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Rule Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">58</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">08.721</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">4392</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> SQL</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> INSERT INTO </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> (user_id, user_name) </span><span style="color:#6F42C1;">VALUES</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:::</span><span style="color:#24292E;"> DataSources</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dsmaster</span></span>
<span class="line"><span style="color:#24292E;">Insert User</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p>然后，我们再对 User 对象执行查询操作并获取 SQL 执行日志：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">33.066</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">3364</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Rule Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">33.066</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">3364</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> SQL </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> SELECT </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> FROM user; </span><span style="color:#F97583;">:::</span><span style="color:#E1E4E8;"> DataSources</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dsslave0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">33.066</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">3364</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Rule Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">33.066</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">3364</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> SQL </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> SELECT </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> FROM user; </span><span style="color:#D73A49;">:::</span><span style="color:#24292E;"> DataSources</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dsslave0</span></span></code></pre></div><p>可以看到，这里用到的 DataSource 是 dsslave0，也就是说查询操作发生在 dsslave0 从库中。由于设置的是随机负载均衡策略，当我们多次执行查询操作时，目标 DataSource 会在 dsslave0 和 dsslave1 之间交替出现。</p><h3 id="系统改造-如何实现读写分离-分库分表" tabindex="-1">系统改造：如何实现读写分离+分库分表？ <a class="header-anchor" href="#系统改造-如何实现读写分离-分库分表" aria-label="Permalink to &quot;系统改造：如何实现读写分离+分库分表？&quot;">​</a></h3><p>我们同样可以在分库分表的基础上添加读写分离功能。这时候，我们需要设置两个主数据源 dsmaster0 和 dsmaster1，然后针对每个主数据源分别设置两个从数据源：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster0,dsmaster1,dsmaster0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave0,dsmaster0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave1,dsmaster1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave0,dsmaster1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster0,dsmaster1,dsmaster0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave0,dsmaster0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave1,dsmaster1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave0,dsmaster1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave1</span></span></code></pre></div><p>这时候的库分片策略 default-database-strategy 同样分别指向 dsmaster0 和 dsmaster1 这两个主数据源：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{user_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{user_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span></code></pre></div><p>而对于表分片策略而言，我们还是使用在 07 课时中介绍的分片方式进行设置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}.health_record$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{record_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}.health_record$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{record_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span></code></pre></div><p>完成这些设置之后，同样需要设置两个主数据源对应的配置项：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rules.dsmaster0.master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">source</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster0</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rules.dsmaster0.slave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">source</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave0, dsmaster0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rules.dsmaster1.master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">source</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rules.dsmaster1.slave</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">source</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dsmaster1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave0, dsmaster1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rules.dsmaster0.master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">source</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster0</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rules.dsmaster0.slave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">source</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave0, dsmaster0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave1</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rules.dsmaster1.master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">source</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster1</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rules.dsmaster1.slave</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">source</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dsmaster1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave0, dsmaster1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave1</span></span></code></pre></div><p>这样，我们就在分库分表的基础上添加了对读写分离的支持。ShardingSphere 所提供的强大配置体系使得开发人员可以在原有配置的基础上添加新的配置项，而不需要对原有配置做过多调整。</p><h3 id="系统改造-如何实现读写分离下的强制路由" tabindex="-1">系统改造：如何实现读写分离下的强制路由？ <a class="header-anchor" href="#系统改造-如何实现读写分离下的强制路由" aria-label="Permalink to &quot;系统改造：如何实现读写分离下的强制路由？&quot;">​</a></h3><p>在上个课时中我们介绍了强制路由，在这个基础上，我将给出如何基于 Hint，完成读写分离场景下的主库强制路由方案。</p><p>要想实现主库强制路由，我们还是要使用 HintManager。HintManager 专门提供了一个 setMasterRouteOnly 方法，用于将 SQL 强制路由到主库中。我们把这个方法也封装在 HintManagerHelper 帮助类中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintManagerHelper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initializeHintManagerForMaster</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintManager </span><span style="color:#FFAB70;">hintManager</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       hintManager.</span><span style="color:#B392F0;">setMasterRouteOnly</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintManagerHelper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initializeHintManagerForMaster</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintManager </span><span style="color:#E36209;">hintManager</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       hintManager.</span><span style="color:#6F42C1;">setMasterRouteOnly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，我们在业务代码中加入主库强制路由的功能，下面这段代码演示了这个过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processWithHintValueMaster</span><span style="color:#E1E4E8;">() throws SQLException, IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       DataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DataSourceHelper.</span><span style="color:#B392F0;">getDataSourceForMaster</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (HintManager hintManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HintManager.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              Statement statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           HintManagerHelper.</span><span style="color:#B392F0;">initializeHintManagerForMaster</span><span style="color:#E1E4E8;">(hintManager);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           ResultSet result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select user_id, user_name from user&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (result.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }      </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processWithHintValueMaster</span><span style="color:#24292E;">() throws SQLException, IOException {</span></span>
<span class="line"><span style="color:#24292E;">       DataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DataSourceHelper.</span><span style="color:#6F42C1;">getDataSourceForMaster</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (HintManager hintManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HintManager.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              Statement statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">           HintManagerHelper.</span><span style="color:#6F42C1;">initializeHintManagerForMaster</span><span style="color:#24292E;">(hintManager);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           ResultSet result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select user_id, user_name from user&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (result.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">              System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">       }      </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>执行这段代码，可以在控制台日志中获取执行的结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">17.166</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">16680</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Rule Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> master</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">slave</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">17.166</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">16680</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> SQL</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user_id, user_name from user </span><span style="color:#F97583;">:::</span><span style="color:#E1E4E8;"> DataSources</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dsmaster</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_1</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_2</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">17.166</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">16680</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Rule Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> master</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">slave</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">17.166</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">16680</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> SQL</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user_id, user_name from user </span><span style="color:#D73A49;">:::</span><span style="color:#24292E;"> DataSources</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dsmaster</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_1</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_2</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p>显然，这里的路由类型是 master-slave，而执行 SQL 的 DataSource 只有 dsmaster，也就是说，我们完成了针对主库的强制路由。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>继续承接上一课时的内容，今天我们讲解 ShardingSphere 中的读写分离机制。在日常开发过程中，读写分离是应对高并发数据访问的一种有效技术手段。而在ShardingSphere中，读写分离既可以单独使用，也可以和分库组合在一起使用。ShardingSphere的另一个强大之处还在于提供了针对主库的强制路由机制，这在需要确保获取主库最新数据的场景下非常有用。</p><p>这里给你留一道思考题：如果我们想要在主从架构中只访问主库中的数据，在 ShardingSphere 中有什么方法可以做到这一点？</p>`,44);function E(i,d,F,h,g,u){const a=l("Image");return p(),o("div",null,[c,e(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/2F/3E/Ciqc1F8GtwWAVyTlAABxucwuBlQ362.png"}),r(),y])}const A=n(t,[["render",E]]);export{m as __pageData,A as default};
