import{_ as p,j as l,o,g as e,k as t,h as n,s,Q as r}from"./chunks/framework.4e7d56ce.js";const m=JSON.parse('{"title":"11WebFlux（下）：如何使用函数式编程模型构建异步非阻塞服务？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6993) 11  WebFlux（下）：如何使用函数式编程模型构建异步非阻塞服务？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6993) 11  WebFlux（下）：如何使用函数式编程模型构建异步非阻塞服务？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Spring 响应式编程实战_文档/(6993) 11  WebFlux（下）：如何使用函数式编程模型构建异步非阻塞服务？.md"},E=s("h1",{id:"_11webflux-下-如何使用函数式编程模型构建异步非阻塞服务",tabindex:"-1"},[n("11WebFlux（下）：如何使用函数式编程模型构建异步非阻塞服务？ "),s("a",{class:"header-anchor",href:"#_11webflux-下-如何使用函数式编程模型构建异步非阻塞服务","aria-label":'Permalink to "11WebFlux（下）：如何使用函数式编程模型构建异步非阻塞服务？"'},"​")],-1),y=s("p",null,"上一讲，我们引入了 Spring 框架中专门用于构建响应式 Web 服务的 WebFlux 框架，同时我也给出了两种创建 RESTful 风格 HTTP 端点实现方法中的一种，即注解编程模型。今天，我将介绍另一种实现方法------如何使用函数式编程模型创建响应式 RESTful 服务，这种编程模型与传统的基于 Spring MVC 构建 RESTful 服务的方法有较大差别。",-1),i=s("h3",{id:"webflux-函数式编程模型",tabindex:"-1"},[n("WebFlux 函数式编程模型 "),s("a",{class:"header-anchor",href:"#webflux-函数式编程模型","aria-label":'Permalink to "WebFlux 函数式编程模型"'},"​")],-1),u=s("p",null,"在引入函数式编程模型之前，让我先带你回顾一下 Spring WebFlux 的系统架构图，如下所示。",-1),d=r(`<p>Spring WebFlux 架构图（来自 Spring 官网）</p><p>在上图的后半部分，你可以看到在 Spring WebFlux 中，函数式编程模型的核心概念是 Router Functions，对标 Spring MVC 中的 @Controller、@RequestMapping 等标准注解。而 Router Functions 则提供一套函数式风格的 API，其中最重要的就是 Router 和 Handler 接口。我们可以简单把 Router 对应成 RequestMapping，把 Controller 对应为 Handler。</p><p>当我发起一个远程调用，传入的 HTTP 请求由 HandlerFunction 处理， HandlerFunction 本质上是一个接收 ServerRequest 并返回 Mono 的函数。ServerRequest 和 ServerResponse 是一对不可变接口，用来提供对底层 HTTP 消息的友好访问。在介绍具体的实现案例之前，让我先从这两个接口开始讲起。</p><h4 id="serverrequest" tabindex="-1">ServerRequest <a class="header-anchor" href="#serverrequest" aria-label="Permalink to &quot;ServerRequest&quot;">​</a></h4><p>ServerRequest 代表请求对象，可以访问各种 HTTP 请求元素，包括请求方法、URI 和参数，以及通过单独的 ServerRequest.Headers 获取 HTTP 请求头信息。ServerRequest 通过一系列 bodyToMono() 和 bodyToFlux() 方法提供对请求消息体进行访问的途径。例如，如果我们希望将请求消息体提取为 Mono 类型的对象，可以使用如下方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; string </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(String.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; string </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(String.class);</span></span></code></pre></div><p>而如果我们希望将请求消息体提取为 Flux 类型的对象，可以使用如下方法，其中 Order 是可以从请求消息体反序列化的实体类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux&lt;</span><span style="color:#F97583;">Order</span><span style="color:#E1E4E8;">&gt; order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">bodyToFlux</span><span style="color:#E1E4E8;">(Order.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux&lt;</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">&gt; order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">bodyToFlux</span><span style="color:#24292E;">(Order.class);</span></span></code></pre></div><p>上述的 bodyToMono() 和 bodyToFlux() 两个方法实际上是通用的 ServerRequest.body(BodyExtractor) 工具方法的快捷方式，该方法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(BodyExtractor</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> ServerHttpRequest</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> extractor);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(BodyExtractor</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> ServerHttpRequest</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> extractor);</span></span></code></pre></div><p>BodyExtractor 是一种请求消息体的提取器，允许我们编写自己的提取逻辑。请注意 BodyExtractor 提取的对象是一个 ServerHttpRequest 类型的实例，而这个 ServerHttpRequest 是非阻塞的，与之对应的还有一个 ServerHttpResponse 对象。响应式 Web 操作的正是这组非阻塞的 ServerHttpRequest 和 ServerHttpResponse 对象，而不再是 Spring MVC 里的传统 HttpServletRequest 和 HttpServletResponse 对象。</p><p>当然，如果我们不需要实现定制化的提取逻辑，就可以使用框架为我们提供的常用的 BodyExtractors 实例。通过 BodyExtractors，上面的例子可以替换为以下形式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; string </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	request.</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(BodyExtractors.</span><span style="color:#B392F0;">toMono</span><span style="color:#E1E4E8;">(String.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">Flux&lt;</span><span style="color:#F97583;">Person</span><span style="color:#E1E4E8;">&gt; Order</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	request.</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(BodyExtractors.</span><span style="color:#B392F0;">toFlux</span><span style="color:#E1E4E8;">(Order.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; string </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	request.</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(BodyExtractors.</span><span style="color:#6F42C1;">toMono</span><span style="color:#24292E;">(String.class);</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">Flux&lt;</span><span style="color:#D73A49;">Person</span><span style="color:#24292E;">&gt; Order</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	request.</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(BodyExtractors.</span><span style="color:#6F42C1;">toFlux</span><span style="color:#24292E;">(Order.class);</span></span></code></pre></div><h4 id="serverresponse" tabindex="-1">ServerResponse <a class="header-anchor" href="#serverresponse" aria-label="Permalink to &quot;ServerResponse&quot;">​</a></h4><p>与ServerRequest 对应，ServerResponse 提供对 HTTP 响应的访问。由于它是不可变的，因此我们可以使用构建器创建一个新的 ServerResponse。构建器允许设置响应状态、添加响应标题并提供响应的具体内容。例如，下面的示例演示了如何通过 ok() 方法创建代表 200 状态码的响应，其中我将响应体的类型设置为 JSON 格式，而响应的具体内容是一个 Mono 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">Order</span><span style="color:#E1E4E8;">&gt; order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...;</span></span>
<span class="line"><span style="color:#E1E4E8;">ServerResponse.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">contentType</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(order);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">&gt; order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...;</span></span>
<span class="line"><span style="color:#24292E;">ServerResponse.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">contentType</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON)</span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(order);</span></span></code></pre></div><p>通过 body() 方法来加载响应内容是构建 ServerResponse 最常见的方法，这里我们将 Order 对象作为返回值。如果想要返回各种类型的对象，我们也可以使用 BodyInserters 工具类所提供的构建方法，如常见的 fromObject() 和 fromPublisher() 方法等。以下示例代码中，我们通过 fromObject() 方法直接返回一个 &quot;Hello World&quot;。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ServerResponse.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(BodyInserters.</span><span style="color:#B392F0;">fromObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ServerResponse.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(BodyInserters.</span><span style="color:#6F42C1;">fromObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>上述方法的背后实际上是利用 BodyBuilder 接口中的一组 body() 方法，来构建一个 ServerResponse 对象，典型的 body() 方法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServerResponse</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(BodyInserter</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> ServerHttpResponse</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> inserter);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServerResponse</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(BodyInserter</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> ServerHttpResponse</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> inserter);</span></span></code></pre></div><p>这里我们同样看到了非阻塞式的 ServerHttpResponse 对象。这种 body() 方法比较常见的用法是返回新增和更新操作的结果，你在本讲后续的内容中将会看到这种使用方法。</p><h4 id="handlerfunction" tabindex="-1">HandlerFunction <a class="header-anchor" href="#handlerfunction" aria-label="Permalink to &quot;HandlerFunction&quot;">​</a></h4><p>将 ServerRequest 和 ServerResponse 组合在一起就可以创建 HandlerFunction。HandlerFunction 也是一个接口，定义如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HandlerFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ServerResponse</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(ServerRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ServerResponse</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(ServerRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过实现 HandlerFunction 接口中的 handle() 方法来创建定制化的请求响应处理机制。例如，以下所示的是一个简单的&quot;Hello World&quot;处理函数代码示例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloWorldHandlerFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">HandlerFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">ServerResponse</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">ServerResponse</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(ServerRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ServerResponse.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	BodyInserters.</span><span style="color:#B392F0;">fromObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldHandlerFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">HandlerFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">ServerResponse</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">ServerResponse</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(ServerRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ServerResponse.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	BodyInserters.</span><span style="color:#6F42C1;">fromObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>可以看到，这里使用了前面介绍的 ServerResponse 所提供的 body() 方法返回一个 String 类型的消息体。</p><p>通常，针对某个领域实体都存在 CRUD 等常见的操作，所以需要编写多个类似的处理函数，比较烦琐。这时候就推荐将多个处理函数分组到一个专门的 Handler 类中。在本讲的后面我同样会演示这种实现方法。</p><h4 id="routerfunction" tabindex="-1">RouterFunction <a class="header-anchor" href="#routerfunction" aria-label="Permalink to &quot;RouterFunction&quot;">​</a></h4><p>现在，我们已经可以通过 HandlerFunction 创建请求的处理逻辑，接下来需要把具体请求与这种处理逻辑关联起来，RouterFunction 可以帮助我们实现这一目标。RouterFunction 与传统 SpringMVC 中的 @RequestMapping 注解功能类似。</p><p>创建 RouterFunction 的最常见做法是使用如下所示的 route 方法，该方法通过使用请求谓词和处理函数创建一个 ServerResponse 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T extends ServerResponse</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> RouterFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            RequestPredicate predicate, HandlerFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> handlerFunction) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> DefaultRouterFunction&lt;&gt;(predicate, handlerFunction);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T extends ServerResponse</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> RouterFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            RequestPredicate predicate, HandlerFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> handlerFunction) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> DefaultRouterFunction&lt;&gt;(predicate, handlerFunction);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>RouterFunction 的核心逻辑位于这里的 DefaultRouterFunction 类中，该类的 route() 方法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">HandlerFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(ServerRequest request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.predicate.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(request)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isTraceEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String logPrefix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getLogPrefix</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    logger.</span><span style="color:#B392F0;">trace</span><span style="color:#E1E4E8;">(logPrefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Matched %s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.predicate));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handlerFunction);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">HandlerFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(ServerRequest request) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.predicate.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(request)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isTraceEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    String logPrefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getLogPrefix</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    logger.</span><span style="color:#6F42C1;">trace</span><span style="color:#24292E;">(logPrefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Matched %s&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.predicate));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handlerFunction);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，该方法将传入的 ServerRequest 路由到具体的处理函数 HandlerFunction。如果请求与特定路由匹配，则返回处理函数的结果，否则就返回一个空的 Mono。</p><p>RequestPredicates 工具类提供了常用的谓词，能够实现包括基于路径、HTTP 方法、内容类型等条件的自动匹配。一个简单的 RouterFunction 示例如下，我们用它来实现对 &quot;/hello-world&quot;请求路径的自动路由，这里用到了前面创建的 HelloWorldHandlerFunction。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">RouterFunction&lt;</span><span style="color:#F97583;">ServerResponse</span><span style="color:#E1E4E8;">&gt; helloWorldRoute </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">                RouterFunctions.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(RequestPredicates.</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello-world&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloWorldHandlerFunction</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">RouterFunction&lt;</span><span style="color:#D73A49;">ServerResponse</span><span style="color:#24292E;">&gt; helloWorldRoute </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">                RouterFunctions.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(RequestPredicates.</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello-world&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldHandlerFunction</span><span style="color:#24292E;">());</span></span></code></pre></div><p>类似的，我们应该把 RouterFunction 和各种 HandlerFunction 按照需求结合起来一起使用，常见的做法也是根据领域对象来设计对应的 RouterFunction。</p><p>路由机制的优势在于它的组合型。两个路由功能可以组合成一个新的路由功能，并通过一定的评估方法路由到其中任何一个处理函数。如果第一个路由的谓词不匹配，则第二个谓词会被评估。请注意组合的路由器功能会按照顺序进行评估，因此在通用功能之前放置一些特定功能是一项最佳实践。在 RouterFunction 中，同样提供了对应的组合方法来实现这一目标，请看下面的代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> RouterFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(RouterFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> RouterFunctions.SameComposedRouterFunction&lt;&gt;(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, other);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> RouterFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">andRoute</span><span style="color:#E1E4E8;">(RequestPredicate predicate, HandlerFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> handlerFunction) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(RouterFunctions.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(predicate, handlerFunction));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> RouterFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(RouterFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> RouterFunctions.SameComposedRouterFunction&lt;&gt;(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, other);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> RouterFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">andRoute</span><span style="color:#24292E;">(RequestPredicate predicate, HandlerFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> handlerFunction) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(RouterFunctions.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(predicate, handlerFunction));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过调用上述两个方法中的任意一个来组合两个路由功能，其中后者相当于 RouterFunction.and() 方法与 RouterFunctions.route() 方法的集成。以下代码演示了 RouterFunctions 的组合特性。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">RouterFunction&lt;</span><span style="color:#F97583;">ServerResponse</span><span style="color:#E1E4E8;">&gt; personRoute </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GET</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/orders/{id}&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(APPLICATION_JSON)), personHandler</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getOrderById)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">andRoute</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GET</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/orders&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(APPLICATION_JSON)), personHandler</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getOrders)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">andRoute</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">POST</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/orders&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">contentType</span><span style="color:#E1E4E8;">(APPLICATION_JSON)), personHandler</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">createOrder);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">RouterFunction&lt;</span><span style="color:#D73A49;">ServerResponse</span><span style="color:#24292E;">&gt; personRoute </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GET</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/orders/{id}&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(APPLICATION_JSON)), personHandler</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getOrderById)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">andRoute</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GET</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/orders&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(APPLICATION_JSON)), personHandler</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getOrders)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">andRoute</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">POST</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/orders&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">contentType</span><span style="color:#24292E;">(APPLICATION_JSON)), personHandler</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">createOrder);</span></span></code></pre></div><p>RequestPredicates 工具类所提供的大多数谓词也具备组合特性。例如， RequestPredicates.GET(String) 方法的实现如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> RequestPredicate </span><span style="color:#B392F0;">GET</span><span style="color:#E1E4E8;">(String pattern) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(HttpMethod.GET).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">(pattern));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> RequestPredicate </span><span style="color:#6F42C1;">GET</span><span style="color:#24292E;">(String pattern) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(HttpMethod.GET).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">(pattern));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，该方法是 RequestPredicates.method(HttpMethod.GET) 和 RequestPredicates.path(String) 的组合。我们可以通过调用 RequestPredicate.and(RequestPredicate) 方法或 RequestPredicate.or(RequestPredicate) 方法来构建复杂的请求谓词。</p><h3 id="案例集成-reactivespringcss-中的-web-服务" tabindex="-1">案例集成：ReactiveSpringCSS 中的 Web 服务 <a class="header-anchor" href="#案例集成-reactivespringcss-中的-web-服务" aria-label="Permalink to &quot;案例集成：ReactiveSpringCSS 中的 Web 服务&quot;">​</a></h3><p>现在回到 ReactiveSpringCSS 案例，我们已经明确了在案例系统中，customer-service 分别需要访问 account-service 和 order-service 服务中的 Web 服务。在上一讲的内容中，我们已经基于注解编程模型实现了 account-service 中的 AccountController。今天我将继续给你演示 order-service 中 Web 服务的实现过程。</p><p>基于函数式编程模型，在 order-service 中，我们编写一个 OrderHandler 专门实现根据 OrderNumber 获取 Order 领域实体的处理函数，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OrderService orderService;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">ServerResponse</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getOrderByOrderNumber</span><span style="color:#E1E4E8;">(ServerRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String orderNumber </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">pathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderNumber&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ServerResponse.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.orderService.</span><span style="color:#B392F0;">getOrderByOrderNumber</span><span style="color:#E1E4E8;">(orderNumber), Order.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OrderService orderService;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">ServerResponse</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getOrderByOrderNumber</span><span style="color:#24292E;">(ServerRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String orderNumber </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">pathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderNumber&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ServerResponse.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.orderService.</span><span style="color:#6F42C1;">getOrderByOrderNumber</span><span style="color:#24292E;">(orderNumber), Order.class);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码示例中，我们创建了一个 OrderHandler 类，然后注入 OrderService 并实现了一个 getOrderByOrderNumber() 处理函数。</p><p>现在我们已经具备了 OrderHandler，就可以创建对应的 OrderRouter 了，示例代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderRouter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RouterFunction&lt;</span><span style="color:#F97583;">ServerResponse</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">routeOrder</span><span style="color:#E1E4E8;">(OrderHandler </span><span style="color:#FFAB70;">orderHandler</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> RouterFunctions.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                RequestPredicates.</span><span style="color:#B392F0;">GET</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/orders/{orderNumber}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(RequestPredicates.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON)),</span></span>
<span class="line"><span style="color:#E1E4E8;">                    orderHandler</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getOrderByOrderNumber);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderRouter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RouterFunction&lt;</span><span style="color:#D73A49;">ServerResponse</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">routeOrder</span><span style="color:#24292E;">(OrderHandler </span><span style="color:#E36209;">orderHandler</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> RouterFunctions.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                RequestPredicates.</span><span style="color:#6F42C1;">GET</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/orders/{orderNumber}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(RequestPredicates.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON)),</span></span>
<span class="line"><span style="color:#24292E;">                    orderHandler</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getOrderByOrderNumber);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个示例中，我们通过访问&quot;/orders/{orderNumber}&quot;端点就会自动触发 orderHandler 中的 getOrderByOrderNumber() 方法并返回相应的 ServerResponse。</p><p>接下来，假设我们已经分别通过远程调用获取了目标 Account 对象和 Order 对象，那么 generateCustomerTicket 方法的执行流程就可以明确了。基于响应式编程的实现方法，我们可以得到如下所示的示例代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">CustomerTicket</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateCustomerTicket</span><span style="color:#E1E4E8;">(String accountId, String orderNumber) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        CustomerTicket customerTicket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerTicket</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        customerTicket.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;C_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从远程 account-service 获取 Account 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">AccountMapper</span><span style="color:#E1E4E8;">&gt; accountMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRemoteAccountByAccountId</span><span style="color:#E1E4E8;">(accountId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从远程 order-service 中获取 Order 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">OrderMapper</span><span style="color:#E1E4E8;">&gt; orderMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRemoteOrderByOrderNumber</span><span style="color:#E1E4E8;">(orderNumber);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">CustomerTicket</span><span style="color:#E1E4E8;">&gt; monoCustomerTicket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                Mono.</span><span style="color:#B392F0;">zip</span><span style="color:#E1E4E8;">(accountMapper, orderMapper).</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(tuple </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            AccountMapper account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tuple.</span><span style="color:#B392F0;">getT1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            OrderMapper order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tuple.</span><span style="color:#B392F0;">getT2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(account </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> order </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(customerTicket);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#E1E4E8;">            customerTicket.</span><span style="color:#B392F0;">setAccountId</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            customerTicket.</span><span style="color:#B392F0;">setOrderNumber</span><span style="color:#E1E4E8;">(order.</span><span style="color:#B392F0;">getOrderNumber</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            customerTicket.</span><span style="color:#B392F0;">setCreateTime</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            customerTicket.</span><span style="color:#B392F0;">setDescription</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TestCustomerTicket&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(customerTicket);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> monoCustomerTicket.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(customerTicketRepository</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">save);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">CustomerTicket</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateCustomerTicket</span><span style="color:#24292E;">(String accountId, String orderNumber) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建 CustomerTicket 对象</span></span>
<span class="line"><span style="color:#24292E;">        CustomerTicket customerTicket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerTicket</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        customerTicket.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;C_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从远程 account-service 获取 Account 对象</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">AccountMapper</span><span style="color:#24292E;">&gt; accountMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRemoteAccountByAccountId</span><span style="color:#24292E;">(accountId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从远程 order-service 中获取 Order 对象</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">OrderMapper</span><span style="color:#24292E;">&gt; orderMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRemoteOrderByOrderNumber</span><span style="color:#24292E;">(orderNumber);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">CustomerTicket</span><span style="color:#24292E;">&gt; monoCustomerTicket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                Mono.</span><span style="color:#6F42C1;">zip</span><span style="color:#24292E;">(accountMapper, orderMapper).</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(tuple </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            AccountMapper account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tuple.</span><span style="color:#6F42C1;">getT1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            OrderMapper order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tuple.</span><span style="color:#6F42C1;">getT2</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(account </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> order </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(customerTicket);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 设置 CustomerTicket 对象属性</span></span>
<span class="line"><span style="color:#24292E;">            customerTicket.</span><span style="color:#6F42C1;">setAccountId</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            customerTicket.</span><span style="color:#6F42C1;">setOrderNumber</span><span style="color:#24292E;">(order.</span><span style="color:#6F42C1;">getOrderNumber</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            customerTicket.</span><span style="color:#6F42C1;">setCreateTime</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            customerTicket.</span><span style="color:#6F42C1;">setDescription</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TestCustomerTicket&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(customerTicket);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 保存 CustomerTicket 对象并返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> monoCustomerTicket.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(customerTicketRepository</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">save);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这里的 getRemoteAccountById 和 getRemoteOrderByOrderNumber 方法都涉及了非阻塞式的远程 Web 服务的调用，这一过程我们将放在下一讲中详细介绍。</p><p>请注意，到这里时使用了 Reactor 框架中的 zip 操作符，将 accountMapper 流中的元素与 orderMapper 流中的元素按照一对一的方式进行合并，合并之后得到一个 Tuple2 对象。然后，我们再分别从这个 Tuple2 对象中获取 AccountMapper 和 OrderMapper 对象，并将它们的属性填充到所生成的 CustomerTicket 对象中。最后，我们通过 flatMap 操作符调用了 customerTicketRepository 的 save 方法完成了数据的持久化。这是 zip 和 flatMap 这两个操作符非常经典的一种应用场景，你需要熟练掌握。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>好了，那么本讲内容就说到这。延续上一讲，我们接着讨论了 Spring WebFlux 的使用方法，并给出了基于函数式编程模型的 RESTful 端点创建方法。在这种开发模型中，开发人员需要重点把握 ServerRequest、ServerResponse、HandlerFunction 以及 RouterFunction 这四个核心对象的使用方法。</p><p>这里给你留一道思考题：你知道在 WebFlux 函数式编程模型中包含哪些核心编程对象吗？</p><p>现在，我们已经通过 WebFlux 构建了响应式 Web 服务，下一步就是如何来消费它们了。Spring 也专门提供了一个非阻塞式的 WebClient 工具类来完成这一目标，下一讲我就来和你系统地讨论这个工具类的使用方法，到时见。</p><blockquote><p>点击链接，获取课程相关代码↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,62);function F(g,v,h,b,C,A){const a=l("Image");return o(),e("div",null,[E,y,i,u,t(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/32/E0/Cgp9HWBuf--Aek0BAAT9zBvy7qI451.png"}),n(),d])}const B=p(c,[["render",F]]);export{m as __pageData,B as default};
