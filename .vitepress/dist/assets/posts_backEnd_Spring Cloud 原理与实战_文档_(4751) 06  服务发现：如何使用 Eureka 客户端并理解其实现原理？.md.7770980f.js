import{_ as o,j as e,o as t,g as c,k as l,h as n,Q as p,s}from"./chunks/framework.4e7d56ce.js";const R=JSON.parse('{"title":"使用 Eureka 注册和发现服务 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4751) 06  服务发现：如何使用 Eureka 客户端并理解其实现原理？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4751) 06  服务发现：如何使用 Eureka 客户端并理解其实现原理？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4751) 06  服务发现：如何使用 Eureka 客户端并理解其实现原理？.md"},E=p(`<p>在介绍完 Eureka 服务器端组件之后，今天我们详细地展开讲解 Eureka 的客户端组件。我们的思路同样是先介绍使用 Eureka 注册和发现服务的使用方法，然后基于源码，剖析 Eureka 客户端的实现原理。</p><h3 id="使用-eureka-注册和发现服务" tabindex="-1">使用 Eureka 注册和发现服务 <a class="header-anchor" href="#使用-eureka-注册和发现服务" aria-label="Permalink to &quot;使用 Eureka 注册和发现服务&quot;">​</a></h3><p>现在我们的 SpringHealth 案例中已经有了第一个独立的微服务，即<strong>上一课时构建的 eureka-server 服务</strong>。对于 Eureka 服务器而言，user-service、device-service 和 intervention-service 都是它的客户端，今天我们将先以 user-service 为例来演示如何完成服务的注册和发现。</p><h4 id="实现服务注册" tabindex="-1">实现服务注册 <a class="header-anchor" href="#实现服务注册" aria-label="Permalink to &quot;实现服务注册&quot;">​</a></h4><p>使用 Eureka 注册基于 Spring Boot 构建的 user-service，它非常简单，其主要工作也是通过配置来完成的。在介绍配置内容之前，我们首先需要确保在 Maven 工程中添加对 Eureka 客户端组件 spring-cloud-starter-netflix-eureka-client 的依赖，如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-netflix-eureka-client&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-netflix-eureka-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后，我们来看 user-service 的 Bootstrap 类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableEurekaClient</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(UserApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableEurekaClient</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(UserApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里引入了一个新的注解 @EnableEurekaClient，该注解用于表明当前服务就是一个 Eureka 客户端，这样该服务就可以自动注册到 Eureka 服务器。当然，随着我们后续内容的演进，你会发现可以使用统一的 @SpringCloudApplication 注解，来实现 @SpringBootApplication 和 @EnableEurekaClient 这两个注解整合在一起的效果。</p><p>这里使用独立的 @EnableEurekaClient 注解是为了帮助你更好地理解该注解的作用，而关于 @SpringCloudApplication 注解我们会在介绍到服务熔断时再进行专门引入。</p><p>接下来就是最重要的配置工作，user-service 中的配置内容如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  application</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> userservice </span></span>
<span class="line"><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8081</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">eureka</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  client</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    serviceUrl</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	  defaultZone</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8761/eureka/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  application</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> userservice </span></span>
<span class="line"><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8081</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">eureka</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  client</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    serviceUrl</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">	  defaultZone</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8761/eureka/</span></span></code></pre></div><p>显然，这里包含两段配置内容。第一段配置指定了服务的名称和运行时端口。在上面的示例中，user-service 的名称通过&quot;spring.application.name=userservice&quot;进行指定，也就是说 user-service 在注册中心中的名称为 userservice。在后续的示例中，我们会使用这一名称获取 user-service 在 Eureka 中的各种注册信息。</p><p>在 eureka.client 段中，我们设置 Eureka 客户端行为。这里的 serviceUrl 配置项在上一课时中已经介绍过，serviceUrl.defaultZone 指定的就是 Eureka 服务器的地址。</p><p>当然，如果我们同样基于上一课时中介绍的 Peer Awareness 模式构建了 Eureka 服务器集群，那么 eureka.client.serviceUrl.defaultZone 配置项的内容就应该是&quot;<a href="http://eureka1:8761/eureka/," target="_blank" rel="noreferrer">http://eureka1:8761/eureka/,</a><a href="http://eureka2" target="_blank" rel="noreferrer">http://eureka2</a>:8762/eureka/&quot;，用于指向当前的集群环境。</p><h4 id="实现服务发现" tabindex="-1">实现服务发现 <a class="header-anchor" href="#实现服务发现" aria-label="Permalink to &quot;实现服务发现&quot;">​</a></h4><p>当我们成功创建并启动了 user-service 之后，Eureka 服务器的当前状态如下图所示：</p>`,17),y=p(`<p>包含 user-service 服务注册信息的 Eureka 服务监控页面</p><p>可以看到，现在的 Eureka 中注册了两个 user-service 的服务实例，运行端口分别是 8082 和 8083。这时候，你可能会好奇，user-service 在 Eureka 服务器中的注册信息是如何进行表示的呢？为了获取注册到 Eureka 服务器上具体某一个服务实例的详细信息，我们可以访问如下地址：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http://&lt;</span><span style="color:#85E89D;">eureka-ip-port</span><span style="color:#E1E4E8;">&gt;:8761/eureka/apps/&lt;</span><span style="color:#85E89D;">APPID</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http://&lt;</span><span style="color:#22863A;">eureka-ip-port</span><span style="color:#24292E;">&gt;:8761/eureka/apps/&lt;</span><span style="color:#22863A;">APPID</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>该地址代表的就是一个普通的 HTTP 请求，URL 中的 APPID 就是服务名称。以 user-service 为例，我们发送 HTTP 请求到 <a href="http://localhost:8761/eureka/apps/userservice" target="_blank" rel="noreferrer">http://localhost:8761/eureka/apps/userservice</a> 可以得到如下信息：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;USERSERVICE&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">instance</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">instanceId</span><span style="color:#E1E4E8;">&gt;localhost:userservice:8082&lt;/</span><span style="color:#85E89D;">instanceId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">hostName</span><span style="color:#E1E4E8;">&gt;localhost&lt;/</span><span style="color:#85E89D;">hostName</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">&gt;USERSERVICE&lt;/</span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">ipAddr</span><span style="color:#E1E4E8;">&gt;192.168.247.1&lt;/</span><span style="color:#85E89D;">ipAddr</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">&gt;UP&lt;/</span><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">overriddenstatus</span><span style="color:#E1E4E8;">&gt;UNKNOWN&lt;/</span><span style="color:#85E89D;">overriddenstatus</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enabled</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;8082&lt;/</span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">securePort</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enabled</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">&gt;443&lt;/</span><span style="color:#85E89D;">securePort</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">countryId</span><span style="color:#E1E4E8;">&gt;1&lt;/</span><span style="color:#85E89D;">countryId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dataCenterInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt;MyOwn&lt;/</span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dataCenterInfo</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">leaseInfo</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">renewalIntervalInSecs</span><span style="color:#E1E4E8;">&gt;30&lt;/</span><span style="color:#85E89D;">renewalIntervalInSecs</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">durationInSecs</span><span style="color:#E1E4E8;">&gt;90&lt;/</span><span style="color:#85E89D;">durationInSecs</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">registrationTimestamp</span><span style="color:#E1E4E8;">&gt;1599277974858&lt;/</span><span style="color:#85E89D;">registrationTimestamp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">lastRenewalTimestamp</span><span style="color:#E1E4E8;">&gt;1599278364582&lt;/</span><span style="color:#85E89D;">lastRenewalTimestamp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">evictionTimestamp</span><span style="color:#E1E4E8;">&gt;0&lt;/</span><span style="color:#85E89D;">evictionTimestamp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">serviceUpTimestamp</span><span style="color:#E1E4E8;">&gt;1599277974859&lt;/</span><span style="color:#85E89D;">serviceUpTimestamp</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">leaseInfo</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">management.port</span><span style="color:#E1E4E8;">&gt;8082&lt;/</span><span style="color:#85E89D;">management.port</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">homePageUrl</span><span style="color:#E1E4E8;">&gt;http://localhost:8082/&lt;/</span><span style="color:#85E89D;">homePageUrl</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">statusPageUrl</span><span style="color:#E1E4E8;">&gt;http://localhost:8082/actuator/info&lt;/</span><span style="color:#85E89D;">statusPageUrl</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">healthCheckUrl</span><span style="color:#E1E4E8;">&gt;http://localhost:8082/actuator/health&lt;/</span><span style="color:#85E89D;">healthCheckUrl</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">vipAddress</span><span style="color:#E1E4E8;">&gt;userservice&lt;/</span><span style="color:#85E89D;">vipAddress</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">secureVipAddress</span><span style="color:#E1E4E8;">&gt;userservice&lt;/</span><span style="color:#85E89D;">secureVipAddress</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">isCoordinatingDiscoveryServer</span><span style="color:#E1E4E8;">&gt;false&lt;/</span><span style="color:#85E89D;">isCoordinatingDiscoveryServer</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">lastUpdatedTimestamp</span><span style="color:#E1E4E8;">&gt;1599277974860&lt;/</span><span style="color:#85E89D;">lastUpdatedTimestamp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">lastDirtyTimestamp</span><span style="color:#E1E4E8;">&gt;1599277974520&lt;/</span><span style="color:#85E89D;">lastDirtyTimestamp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">actionType</span><span style="color:#E1E4E8;">&gt;ADDED&lt;/</span><span style="color:#85E89D;">actionType</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">instance</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">instance</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">instance</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">application</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;USERSERVICE&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">instance</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">instanceId</span><span style="color:#24292E;">&gt;localhost:userservice:8082&lt;/</span><span style="color:#22863A;">instanceId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">hostName</span><span style="color:#24292E;">&gt;localhost&lt;/</span><span style="color:#22863A;">hostName</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">app</span><span style="color:#24292E;">&gt;USERSERVICE&lt;/</span><span style="color:#22863A;">app</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">ipAddr</span><span style="color:#24292E;">&gt;192.168.247.1&lt;/</span><span style="color:#22863A;">ipAddr</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">status</span><span style="color:#24292E;">&gt;UP&lt;/</span><span style="color:#22863A;">status</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">overriddenstatus</span><span style="color:#24292E;">&gt;UNKNOWN&lt;/</span><span style="color:#22863A;">overriddenstatus</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">port</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enabled</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">&gt;8082&lt;/</span><span style="color:#22863A;">port</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">securePort</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enabled</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">&gt;443&lt;/</span><span style="color:#22863A;">securePort</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">countryId</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">countryId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dataCenterInfo</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;MyOwn&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dataCenterInfo</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">leaseInfo</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">renewalIntervalInSecs</span><span style="color:#24292E;">&gt;30&lt;/</span><span style="color:#22863A;">renewalIntervalInSecs</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">durationInSecs</span><span style="color:#24292E;">&gt;90&lt;/</span><span style="color:#22863A;">durationInSecs</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">registrationTimestamp</span><span style="color:#24292E;">&gt;1599277974858&lt;/</span><span style="color:#22863A;">registrationTimestamp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">lastRenewalTimestamp</span><span style="color:#24292E;">&gt;1599278364582&lt;/</span><span style="color:#22863A;">lastRenewalTimestamp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">evictionTimestamp</span><span style="color:#24292E;">&gt;0&lt;/</span><span style="color:#22863A;">evictionTimestamp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">serviceUpTimestamp</span><span style="color:#24292E;">&gt;1599277974859&lt;/</span><span style="color:#22863A;">serviceUpTimestamp</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">leaseInfo</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">metadata</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">management.port</span><span style="color:#24292E;">&gt;8082&lt;/</span><span style="color:#22863A;">management.port</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">metadata</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">homePageUrl</span><span style="color:#24292E;">&gt;http://localhost:8082/&lt;/</span><span style="color:#22863A;">homePageUrl</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">statusPageUrl</span><span style="color:#24292E;">&gt;http://localhost:8082/actuator/info&lt;/</span><span style="color:#22863A;">statusPageUrl</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">healthCheckUrl</span><span style="color:#24292E;">&gt;http://localhost:8082/actuator/health&lt;/</span><span style="color:#22863A;">healthCheckUrl</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">vipAddress</span><span style="color:#24292E;">&gt;userservice&lt;/</span><span style="color:#22863A;">vipAddress</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">secureVipAddress</span><span style="color:#24292E;">&gt;userservice&lt;/</span><span style="color:#22863A;">secureVipAddress</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">isCoordinatingDiscoveryServer</span><span style="color:#24292E;">&gt;false&lt;/</span><span style="color:#22863A;">isCoordinatingDiscoveryServer</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">lastUpdatedTimestamp</span><span style="color:#24292E;">&gt;1599277974860&lt;/</span><span style="color:#22863A;">lastUpdatedTimestamp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">lastDirtyTimestamp</span><span style="color:#24292E;">&gt;1599277974520&lt;/</span><span style="color:#22863A;">lastDirtyTimestamp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">actionType</span><span style="color:#24292E;">&gt;ADDED&lt;/</span><span style="color:#22863A;">actionType</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">instance</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">instance</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">instance</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">application</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>这里出现了两个标签代表存在两个 user-service 服务实例。根据如上所示的服务实例详细信息，我们可以获取该服务的服务名称、IP 地址、端口、是否可用等基本信息，也可以访问 statusPageUrl、healthCheckUrl 等地址查看当前服务的运行状态，更为重要的是得到了 leaseInfo 等与服务注册过程直接相关的基础数据，这些基础数据有助于我们理解 Eureka 作为注册中心的工作原理。</p><h3 id="理解-eureka-客户端基本原理" tabindex="-1">理解 Eureka 客户端基本原理 <a class="header-anchor" href="#理解-eureka-客户端基本原理" aria-label="Permalink to &quot;理解 Eureka 客户端基本原理&quot;">​</a></h3><p>对于 Eureka 而言，微服务的提供者和消费者都是它的客户端，其中服务提供者关注<strong>服务注册、服务续约</strong> 和<strong>服务下线</strong>等功能，而服务消费者关注于服务信息的获取。同时，对于服务消费者而言，为了提高服务获取的性能以及在注册中心不可用的情况下继续使用服务，一般都还会具有缓存机制。</p><p>在 Netflix Eureka 中，专门提供了一个客户端包，并抽象了一个客户端接口 EurekaClient。EurekaClient 接口继承自 LookupService 接口，这个 LookupService 接口实际上也是我们上一课时中所介绍的 InstanceRegistry 接口的父接口。EurekaClient 在 LookupService 接口的基础上提供了一系列扩展方法，<strong>这些扩展方法并不是重点，我们还是更应该关注于它的类层机构</strong>，如下所示：</p>`,9),i=p(`<p>接口 EurekaClient 的类层结构</p><p>可以看到 EurekaClient 接口有个实现类 DiscoveryClient（位于 com.netflix.discovery 包中），该类包含了服务提供者和服务消费者的核心处理逻辑，同时提供了我们在介绍 Eureka 服务器端基本原理时所介绍的 register、renew 等方法。DiscoveryClient 类的实现非常复杂，我们重点关注它构造方法中的这行代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">initScheduledTasks</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">initScheduledTasks</span><span style="color:#24292E;">();</span></span></code></pre></div><p>通过分析该方法中的代码，我们看到系统在这里初始化了一批调度任务，具体包含缓存刷新 cacheRefresh、心跳 heartbeat、服务实例复制 InstanceInfoReplicator 等，其中缓存刷新面向服务消费者，而心跳和服务实例复制面向服务提供者。接下来我们将分别从这两个 Eureka 客户端组件出发讨论服务注册和发现的客户端操作。</p><h4 id="服务提供者操作源码解析" tabindex="-1">服务提供者操作源码解析 <a class="header-anchor" href="#服务提供者操作源码解析" aria-label="Permalink to &quot;服务提供者操作源码解析&quot;">​</a></h4><p>服务提供者关注<strong>服务注册、服务续约和服务下线</strong>等功能，它可以使用 Eureka 服务器提供的 RESTful API 完成上述操作。因为篇幅关系，这里同样以服务注册为例给出服务提供者的操作流程。</p><p>在 DiscoveryClient 类中，服务注册操作由register 方法完成，如下所示。为了简单起见，我们对代码进行了裁剪，省略了日志相关等非核心代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">() throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; httpResponse;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            httpResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eurekaTransport.registrationClient.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(instanceInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> httpResponse.</span><span style="color:#B392F0;">getStatusCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">204</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">() throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; httpResponse;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            httpResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eurekaTransport.registrationClient.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(instanceInfo);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> httpResponse.</span><span style="color:#6F42C1;">getStatusCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">204</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述 register 方法会在 InstanceInfoReplicator 类的 run 方法中进行执行。从操作流程上讲，上述代码的逻辑非常简单，即服务提供者先将自己注册到 Eureka 服务器中，然后根据返回的结果确定操作是否成功。显然，这里的重点代码是eurekaTransport.registrationClient.register()，DiscoveryClient 通过这行代码发起了远程请求。</p><p>首先我们来看 EurekaTransport 类，这是 DiscoveryClient 类中的一个内部类，定义了 registrationClient 变量用于实现服务注册。registrationClient 的类型是 EurekaHttpClient 接口，该接口的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EurekaHttpClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(InstanceInfo </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">sendHeartBeat</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, InstanceInfo </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">, InstanceStatus </span><span style="color:#FFAB70;">overriddenStatus</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">statusUpdate</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, InstanceStatus </span><span style="color:#FFAB70;">newStatus</span><span style="color:#E1E4E8;">, InstanceInfo </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">deleteStatusOverride</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, InstanceInfo </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Applications</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getApplications</span><span style="color:#E1E4E8;">(String... </span><span style="color:#FFAB70;">regions</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Applications</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getDelta</span><span style="color:#E1E4E8;">(String... </span><span style="color:#FFAB70;">regions</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Applications</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getVip</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">vipAddress</span><span style="color:#E1E4E8;">, String... </span><span style="color:#FFAB70;">regions</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Applications</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSecureVip</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">secureVipAddress</span><span style="color:#E1E4E8;">, String... </span><span style="color:#FFAB70;">regions</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Application</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getApplication</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EurekaHttpClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(InstanceInfo </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">sendHeartBeat</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, InstanceInfo </span><span style="color:#E36209;">info</span><span style="color:#24292E;">, InstanceStatus </span><span style="color:#E36209;">overriddenStatus</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">statusUpdate</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, InstanceStatus </span><span style="color:#E36209;">newStatus</span><span style="color:#24292E;">, InstanceInfo </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">deleteStatusOverride</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, InstanceInfo </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Applications</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getApplications</span><span style="color:#24292E;">(String... </span><span style="color:#E36209;">regions</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Applications</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getDelta</span><span style="color:#24292E;">(String... </span><span style="color:#E36209;">regions</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Applications</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getVip</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">vipAddress</span><span style="color:#24292E;">, String... </span><span style="color:#E36209;">regions</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Applications</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSecureVip</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">secureVipAddress</span><span style="color:#24292E;">, String... </span><span style="color:#E36209;">regions</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Application</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getApplication</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这个 EurekaHttpClient 接口定义了 Eureka 服务器的一些底层 REST API，包括 register、cancel、sendHeartBeat、statusUpdate、getApplications 等。在 Eureka 中，关于如何实现客户端与服务器端的远程通信，从工作原理上讲只是一个 RESTful 风格的 HTTP 请求，但在具体设计和实现上可以说是非常考究，因此类层结构上也比较复杂。我们先来看 EurekaHttpClient 接口的一个实现类 EurekaHttpClientDecorator，从命名上看它是一个装饰器（Decorator），如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EurekaHttpClientDecorator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EurekaHttpClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Register</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Cancel</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">SendHeartBeat</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">StatusUpdate</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">DeleteStatusOverride</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">GetApplications</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EurekaHttpResponse&lt;</span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(EurekaHttpClient </span><span style="color:#FFAB70;">delegate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        RequestType </span><span style="color:#B392F0;">getRequestType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; EurekaHttpResponse&lt;</span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(RequestExecutor&lt;</span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">requestExecutor</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InstanceInfo </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> RequestExecutor&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(EurekaHttpClient </span><span style="color:#FFAB70;">delegate</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> delegate.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(info);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RequestType </span><span style="color:#B392F0;">getRequestType</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> RequestType.Register;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略其他方法实现</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EurekaHttpClientDecorator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EurekaHttpClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Register</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Cancel</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">SendHeartBeat</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">StatusUpdate</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">DeleteStatusOverride</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">GetApplications</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        EurekaHttpResponse&lt;</span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(EurekaHttpClient </span><span style="color:#E36209;">delegate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        RequestType </span><span style="color:#6F42C1;">getRequestType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; EurekaHttpResponse&lt;</span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(RequestExecutor&lt;</span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">requestExecutor</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InstanceInfo </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> RequestExecutor&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(EurekaHttpClient </span><span style="color:#E36209;">delegate</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> delegate.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(info);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RequestType </span><span style="color:#6F42C1;">getRequestType</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> RequestType.Register;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略其他方法实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 EurekaHttpClientDecorator 通过定义一个抽象方法 execute(RequestExecutor requestExecutor) 来包装 EurekaHttpClient，这种包装是代理机制的一种表现形式。</p><br><p>然后我们再来看如何构建一个 EurekaHttpClient，Eureka 也专门提供了 EurekaHttpClientFactory 类来负责构建具体的 EurekaHttpClient。显然，这是工厂模式的一种典型应用。EurekaHttpClientFactory 接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EurekaHttpClientFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpClient </span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EurekaHttpClientFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpClient </span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Eureka 中存在一批 EurekaHttpClientFactory 的实现类，包括 RetryableEurekaHttpClient 和 MetricsCollectingEurekaHttpClient 等，这些类都位于 com.netflix.discovery.shared.transport.decorator 包下。同时，在 com.netflix.discovery.shared.transport 包下，还存在一个 EurekaHttpClients 工具类，能够创建通过 RedirectingEurekaHttpClient、RetryableEurekaHttpClient、SessionedEurekaHttpClient 包装之后的 EurekaHttpClient。如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EurekaHttpClientFactory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> EurekaHttpClient </span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SessionedEurekaHttpClient</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        name,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        RetryableEurekaHttpClient.</span><span style="color:#B392F0;">createFactory</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                name,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                transportConfig,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                clusterResolver,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                RedirectingEurekaHttpClient.</span><span style="color:#B392F0;">createFactory</span><span style="color:#E1E4E8;">(transportClientFactory),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                ServerStatusEvaluators.</span><span style="color:#B392F0;">legacyEvaluator</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">                        transportConfig.</span><span style="color:#B392F0;">getSessionedClientReconnectIntervalSeconds</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EurekaHttpClientFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> EurekaHttpClient </span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SessionedEurekaHttpClient</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        name,</span></span>
<span class="line"><span style="color:#24292E;">                        RetryableEurekaHttpClient.</span><span style="color:#6F42C1;">createFactory</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                name,</span></span>
<span class="line"><span style="color:#24292E;">                                transportConfig,</span></span>
<span class="line"><span style="color:#24292E;">                                clusterResolver,</span></span>
<span class="line"><span style="color:#24292E;">                                RedirectingEurekaHttpClient.</span><span style="color:#6F42C1;">createFactory</span><span style="color:#24292E;">(transportClientFactory),</span></span>
<span class="line"><span style="color:#24292E;">                                ServerStatusEvaluators.</span><span style="color:#6F42C1;">legacyEvaluator</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">                        transportConfig.</span><span style="color:#6F42C1;">getSessionedClientReconnectIntervalSeconds</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>这是 EurekaHttpClient 创建过程中的一条分支，即通过包装器对请求过程进行层层封装和代理。而在执行远程请求时，Eureka 同样提供了另一套体系来完成真正的远程调用，原始的 EurekaHttpClient 通过 TransportClientFactory 进行创建。TransportClientFactory 接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransportClientFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpClient </span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">(EurekaEndpoint </span><span style="color:#FFAB70;">serviceUrl</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransportClientFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpClient </span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">(EurekaEndpoint </span><span style="color:#E36209;">serviceUrl</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TransportClientFactory 同样存在一批实现类，其中有些是实名类，有些是匿名类。以实名的实现类 JerseyEurekaHttpClientFactory 为例，它位于 com.netflix.discovery.shared.transport.jersey 包下，通过 EurekaJerseyClient 获取 Jersey 客户端，而 EurekaJerseyClient 又会使用 ApacheHttpClient4 对象，从而完成 REST 调用。</p><p>作为总结，这里也给你分享一个 Eureka 在设计和实现上的技巧，也就是所谓的高阶（High Level）API和低阶（Low Level）API，如下图所示：</p>`,23),g=p(`<p>高阶 API 和低阶 API 关系示意图</p><p>针对高阶 API，主要是通过装饰器模式进行一系列包装，从而创建目标 EurekaHttpClient。而关于低阶 API 的话，主要是 HTTP 远程调用的实现，Netflix 提供的是基于 Jersey 的版本，而 Spring Cloud 则提供了基于 RestTemplate 的版本，这点我们后面会再讲到。</p><h4 id="服务消费者操作源码解析" tabindex="-1">服务消费者操作源码解析 <a class="header-anchor" href="#服务消费者操作源码解析" aria-label="Permalink to &quot;服务消费者操作源码解析&quot;">​</a></h4><p>我们在介绍注册中心模型时，服务消费者可以配备缓存机制以加速服务路由。对于 Eureka 而言，作为客户端组件的 DiscoveryClient 同样具备这种缓存功能。</p><p>Eureka 客户端通过定时任务完成缓存刷新操作，我们已经在前面的内容中提到 DiscoveryClient 中的 initScheduledTasks 方法用于初始化各种调度任务，对于缓存刷选而言，调度器的初始化过程如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (clientConfig.</span><span style="color:#B392F0;">shouldFetchRegistry</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> registryFetchIntervalSeconds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientConfig.</span><span style="color:#B392F0;">getRegistryFetchIntervalSeconds</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> expBackOffBound </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientConfig.</span><span style="color:#B392F0;">getCacheRefreshExecutorExponentialBackOffBound</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            scheduler.</span><span style="color:#B392F0;">schedule</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TimedSupervisorTask</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#9ECBFF;">&quot;cacheRefresh&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            scheduler,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            cacheRefreshExecutor,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            registryFetchIntervalSeconds,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            TimeUnit.SECONDS,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            expBackOffBound,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheRefreshThread</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">                    registryFetchIntervalSeconds, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (clientConfig.</span><span style="color:#6F42C1;">shouldFetchRegistry</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> registryFetchIntervalSeconds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientConfig.</span><span style="color:#6F42C1;">getRegistryFetchIntervalSeconds</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> expBackOffBound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientConfig.</span><span style="color:#6F42C1;">getCacheRefreshExecutorExponentialBackOffBound</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            scheduler.</span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TimedSupervisorTask</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#032F62;">&quot;cacheRefresh&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                            scheduler,</span></span>
<span class="line"><span style="color:#24292E;">                            cacheRefreshExecutor,</span></span>
<span class="line"><span style="color:#24292E;">                            registryFetchIntervalSeconds,</span></span>
<span class="line"><span style="color:#24292E;">                            TimeUnit.SECONDS,</span></span>
<span class="line"><span style="color:#24292E;">                            expBackOffBound,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheRefreshThread</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    ),</span></span>
<span class="line"><span style="color:#24292E;">                    registryFetchIntervalSeconds, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这里启动了一个调度任务并通过 CacheRefreshThread 线程完成具体操作。CacheRefreshThread 线程定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheRefreshThread</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">refreshRegistry</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheRefreshThread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">refreshRegistry</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于服务消费者而言，最重要的操作就是<strong>获取服务注册信息</strong>。在这里的 refreshRegistry 方法中，我们发现在进行一系列的校验之后，最终调用了 fetchRegistry 方法以完成注册信息的更新，该方法代码如下。为了简单起见，我们对代码进行了部分裁剪，只保留主流程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetchRegistry</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> forceFullRegistryFetch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取应用</span></span>
<span class="line"><span style="color:#E1E4E8;">            Applications applications </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getApplications</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (...) </span><span style="color:#6A737D;">//如果满足全量拉取条件</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 全量拉取服务实例数据</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">getAndStoreFullRegistry</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 增量拉取服务实例数据</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">getAndUpdateDelta</span><span style="color:#E1E4E8;">(applications);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 重新计算和设置一致性hashcode</span></span>
<span class="line"><span style="color:#E1E4E8;">	applications.</span><span style="color:#B392F0;">setAppsHashCode</span><span style="color:#E1E4E8;">(applications.</span><span style="color:#B392F0;">getReconcileHashCode</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 刷新本地缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onCacheRefreshed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 更新远程服务实例运行状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateInstanceRemoteStatus</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetchRegistry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> forceFullRegistryFetch) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取应用</span></span>
<span class="line"><span style="color:#24292E;">            Applications applications </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getApplications</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (...) </span><span style="color:#6A737D;">//如果满足全量拉取条件</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 全量拉取服务实例数据</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">getAndStoreFullRegistry</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 增量拉取服务实例数据</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">getAndUpdateDelta</span><span style="color:#24292E;">(applications);</span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 重新计算和设置一致性hashcode</span></span>
<span class="line"><span style="color:#24292E;">	applications.</span><span style="color:#6F42C1;">setAppsHashCode</span><span style="color:#24292E;">(applications.</span><span style="color:#6F42C1;">getReconcileHashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 刷新本地缓存</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onCacheRefreshed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 更新远程服务实例运行状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateInstanceRemoteStatus</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的几个带注释的方法都非常有用，因为 getAndStoreFullRegistry 的逻辑相对比较简单，我们将重点介绍 getAndUpdateDelta 方法，以便学习在 Eureka 中如何实现增量数据更新的设计技巧。裁剪之后的 getAndUpdateDelta 方法代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAndUpdateDelta</span><span style="color:#E1E4E8;">(Applications applications) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> currentUpdateGeneration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fetchRegistryGeneration.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Applications delta </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过 eurekaTransport.queryClient 获取增量信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        EurekaHttpResponse&lt;</span><span style="color:#F97583;">Applications</span><span style="color:#E1E4E8;">&gt; httpResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eurekaTransport.queryClient.</span><span style="color:#B392F0;">getDelta</span><span style="color:#E1E4E8;">(remoteRegionsRef.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (httpResponse.</span><span style="color:#B392F0;">getStatusCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Status.OK.</span><span style="color:#B392F0;">getStatusCode</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            delta </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> httpResponse.</span><span style="color:#B392F0;">getEntity</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (delta </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//如果增量信息为空，就直接发起一次全量更新</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">getAndStoreFullRegistry</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fetchRegistryGeneration.</span><span style="color:#B392F0;">compareAndSet</span><span style="color:#E1E4E8;">(currentUpdateGeneration, currentUpdateGeneration </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) {</span><span style="color:#6A737D;">//通过CAS来确保请求的线程安全性</span></span>
<span class="line"><span style="color:#E1E4E8;">            String reconcileHashCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fetchRegistryUpdateLock.</span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;">//比对从服务器端返回的增量数据和本地数据，合并两者的差异数据</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">updateDelta</span><span style="color:#E1E4E8;">(delta);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//用合并了增量数据之后的本地数据来生成一致性 hashcode</span></span>
<span class="line"><span style="color:#E1E4E8;">                    reconcileHashCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getReconcileHashCode</span><span style="color:#E1E4E8;">(applications);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    fetchRegistryUpdateLock.</span><span style="color:#B392F0;">unlock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//比较本地数据中的 hashcode 和来自服务器端的 hashcode</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">reconcileHashCode.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(delta.</span><span style="color:#B392F0;">getAppsHashCode</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> clientConfig.</span><span style="color:#B392F0;">shouldLogDeltaDiff</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;">//如果 hashcode 不一致，就触发远程调用进行全量更新</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">reconcileAndLogDifference</span><span style="color:#E1E4E8;">(delta, reconcileHashCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAndUpdateDelta</span><span style="color:#24292E;">(Applications applications) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> currentUpdateGeneration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fetchRegistryGeneration.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Applications delta </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过 eurekaTransport.queryClient 获取增量信息</span></span>
<span class="line"><span style="color:#24292E;">        EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Applications</span><span style="color:#24292E;">&gt; httpResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eurekaTransport.queryClient.</span><span style="color:#6F42C1;">getDelta</span><span style="color:#24292E;">(remoteRegionsRef.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (httpResponse.</span><span style="color:#6F42C1;">getStatusCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Status.OK.</span><span style="color:#6F42C1;">getStatusCode</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            delta </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> httpResponse.</span><span style="color:#6F42C1;">getEntity</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (delta </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//如果增量信息为空，就直接发起一次全量更新</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">getAndStoreFullRegistry</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fetchRegistryGeneration.</span><span style="color:#6F42C1;">compareAndSet</span><span style="color:#24292E;">(currentUpdateGeneration, currentUpdateGeneration </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span><span style="color:#6A737D;">//通过CAS来确保请求的线程安全性</span></span>
<span class="line"><span style="color:#24292E;">            String reconcileHashCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fetchRegistryUpdateLock.</span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#6A737D;">//比对从服务器端返回的增量数据和本地数据，合并两者的差异数据</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">updateDelta</span><span style="color:#24292E;">(delta);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//用合并了增量数据之后的本地数据来生成一致性 hashcode</span></span>
<span class="line"><span style="color:#24292E;">                    reconcileHashCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getReconcileHashCode</span><span style="color:#24292E;">(applications);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    fetchRegistryUpdateLock.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//比较本地数据中的 hashcode 和来自服务器端的 hashcode</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">reconcileHashCode.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(delta.</span><span style="color:#6F42C1;">getAppsHashCode</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> clientConfig.</span><span style="color:#6F42C1;">shouldLogDeltaDiff</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#6A737D;">//如果 hashcode 不一致，就触发远程调用进行全量更新</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">reconcileAndLogDifference</span><span style="color:#24292E;">(delta, reconcileHashCode);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>回顾 Eureka 服务器端基本原理，我们知道 Eureka 服务器端会保存一个服务注册列表的缓存。Eureka 官方文档中提到这个数据保留时间是三分钟，而 Eureka 客户端的定时调度机制会每隔 30 秒刷选本地缓存。原则上，只要 Eureka 客户端不停地获取服务器端的更新数据，就能保证自己的数据和 Eureka 服务器端的保持一致。但如果客户端在 3 分钟之内没有获取更新数据，就会导致自身与服务器端的数据不一致，这是这种更新机制所必须要考虑的问题，也是我们自己在设计类似场景时的一个注意点。</p><p>针对上述问题，Eureka 采用了一致性 HashCode 方法来进行解决。Eureka 服务器端每次返回的增量数据中都会带有一个一致性 HashCode，这个 HashCode 会与 Eureka 客户端用本地服务列表数据算出的一致性 HashCode 进行比对，如果两者不一致就证明增量更新出了问题，这时候就需要执行一次全量更新。</p><p>在 Eureka 中，计算一致性 HashCode 的方法如下所示，可以看到这一方法基于服务注册实例信息完成编码计算过程，最终返回一个 String 类型的计算结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getReconcileHashCode</span><span style="color:#E1E4E8;">(Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, AtomicInteger</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> instanceCountMap) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuilder reconcileHashCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">AtomicInteger</span><span style="color:#E1E4E8;">&gt; mapEntry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> instanceCountMap.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            reconcileHashCode.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(mapEntry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(STATUS_DELIMITER).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(mapEntry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(STATUS_DELIMITER);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> reconcileHashCode.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getReconcileHashCode</span><span style="color:#24292E;">(Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, AtomicInteger</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> instanceCountMap) {</span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder reconcileHashCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">75</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">AtomicInteger</span><span style="color:#24292E;">&gt; mapEntry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> instanceCountMap.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            reconcileHashCode.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(mapEntry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(STATUS_DELIMITER).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(mapEntry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(STATUS_DELIMITER);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> reconcileHashCode.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>作为总结，Eureka 客户端缓存定时更新的流程如下图所示，可以看到它与服务注册的流程基本一致，也就是说在 Eureka 中，服务提供者和服务消费者作为 Eureka 服务器的客户端采用了同一套体系完成与服务器端的交互。</p>`,17),u=s("p",null,"Eureka 缓存刷选流程时序图",-1),d=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),F=s("p",null,"延续上一课时内容，今天我们讨论了 Eureka 客户端组件的使用方法和实现原理。在使用方法上，我们同样只需要在 Spring Boot 的启动类中添加一个注解，就可以将服务自身注册到 Eureka 服务器中。而在实现原理上，服务的提供者和服务的消费者都是 Eureka 客户端，但却有不同的操作流程，需要我们分别进行分析。",-1),A=s("p",null,"这里给你留一道思考题：针对位于 Eureka 服务器上的服务列表信息，Eureka 客户端如何实现注册信息的同步和增量更新？",-1),h=s("p",null,"负载均衡与服务治理关系密切。下一课时，我们就将基于Eureka 的已知内容，讨论 Spring Cloud 中的客户端负载均衡组件 Ribbon 与 Eureka 之间的交互关系以及使用方法。",-1);function C(k,D,v,f,m,S){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/58/DB/Ciqc1F9wT66APdccAAB8da4b_EM993.png"}),n(),y,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/58/E7/CgqCHl9wUAmATPQxAAAqMtQEPGk029.png"}),n(),i,l(a,{alt:"Lark20201009-104135.png",src:"https://s0.lgstatic.com/i/image/M00/5B/A4/CgqCHl9_zgeAKVhNAAHaQoJ_1kI602.png"}),n(),g,l(a,{alt:"Lark20201009-104138.png",src:"https://s0.lgstatic.com/i/image/M00/5B/99/Ciqc1F9_zfGAOViSAAGXRnBlAdc236.png"}),n(),u,d,F,A,h])}const b=o(r,[["render",C]]);export{R as __pageData,b as default};
