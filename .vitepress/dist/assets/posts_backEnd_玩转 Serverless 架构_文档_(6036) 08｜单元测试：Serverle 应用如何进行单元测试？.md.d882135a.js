import{_ as o,j as e,o as c,g as t,k as l,h as s,Q as p,s as n}from"./chunks/framework.4e7d56ce.js";const D=JSON.parse('{"title":"08｜单元测试：Serverle应用如何进行单元测试？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/玩转 Serverless 架构_文档/(6036) 08｜单元测试：Serverle 应用如何进行单元测试？.md","filePath":"posts/backEnd/玩转 Serverless 架构_文档/(6036) 08｜单元测试：Serverle 应用如何进行单元测试？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/玩转 Serverless 架构_文档/(6036) 08｜单元测试：Serverle 应用如何进行单元测试？.md"},E=p('<h1 id="_08-单元测试-serverle应用如何进行单元测试" tabindex="-1">08｜单元测试：Serverle应用如何进行单元测试？ <a class="header-anchor" href="#_08-单元测试-serverle应用如何进行单元测试" aria-label="Permalink to &quot;08｜单元测试：Serverle应用如何进行单元测试？&quot;">​</a></h1><p>这一讲我将带你学习如何为 Serverless 应用编写单元测试。</p><p>单元测试是保证代码质量和应用稳定性的重要手段，但很多同学却不喜欢写单元测试，觉得又麻烦，又要花很多时间，其实这与没有掌握正确的方法有很大关系。除此之外，还有的同学不知道怎么写单元测试，尤其是怎么对 Serverless 应用编写单元测试，<strong>而这是所有 Serverless 开发者面临的问题。</strong> 我们团队在使用 Serverless 的初期也踩过很多坑，总结起来主要有以下难点：</p><ul><li><p>Serverless 架构是分布式的，组成 Serverless 应用的函数是单独运行的，这些函数集合到一起组成分布式架构，你需要对独立函数和分布式应用都进行测试；</p></li><li><p>Serverless 架构依赖很多云服务，比如各种 FaaS、BaaS 等，这些云服务很难在本地模拟；</p></li><li><p>Serverless 架构是事件驱动的，事件驱动这种异步工作模式也很难在本地模拟。</p></li></ul><p><strong>那怎么解决这些问题呢？</strong> 这就是今天这一讲的重点了。总的来说，这一讲我会先带你了解 Serverelss 应用的单元测试准则，这些准则可以指导你编写出更易测试的代码，然后会带你编写实际的单元测试，并总结出单元测试的一些最佳实践，让你能够学以致用。</p><h3 id="serverless-单元测试准则" tabindex="-1">Serverless 单元测试准则 <a class="header-anchor" href="#serverless-单元测试准则" aria-label="Permalink to &quot;Serverless 单元测试准则&quot;">​</a></h3><p>著名的 Scrum 联盟创始人 Mike Cohn 在 2012 年提出了测试金字塔理论：</p>',7),y=p(`<p>测试金字塔</p><p>如果你写过单元测试，测试金字塔对你来说肯定不陌生，测试可分为单元测试、服务测试和 UI 测试，金字塔越上层测试速度越慢，成本越高，所以你应该写更多的单元测试。</p><p><strong>可是 Serverless 应用依赖很多云服务，函数参数也与触发器强相关，要怎么写代码才能更方便写单元测试呢？我实践总结出了几条测试准则，供你参考：</strong></p><ol><li><p>将业务逻辑和依赖的云服务分开，保持业务代码独立，使其更易于扩展和测试；</p></li><li><p>对业务逻辑编写充分的单元测试，保证业务代码的正确性；</p></li><li><p>对业务代码和云服务编写集成测试，保证应用的正确性。</p></li></ol><p>我来带你看一个实际的例子。<strong>假设你要实现一个功能：保存用户信息，保存成功后并发送欢迎邮件。</strong> 最简单、最好实现、但不好测试的代码就是下面这样：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// handler.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;db&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mailer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mailer&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    email: event.email,</span></span>
<span class="line"><span style="color:#E1E4E8;">    created_at: Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将用户信息存入数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">  db.</span><span style="color:#B392F0;">saveUser</span><span style="color:#E1E4E8;">(user, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;保存用户信息失败&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 存入成功后，为用户发送一封邮件</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">success</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mailer.</span><span style="color:#B392F0;">sendWelcomeEmail</span><span style="color:#E1E4E8;">(event.email);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (success) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果发送邮件成功，则通过回调函数返回 userId</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果发送邮件失败，则通过回调函数告诉调用方发送邮件失败</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`发送邮件（\${</span><span style="color:#E1E4E8;">user</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">email</span><span style="color:#9ECBFF;">}）失败\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// handler.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;db&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mailer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;mailer&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    email: event.email,</span></span>
<span class="line"><span style="color:#24292E;">    created_at: Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将用户信息存入数据库</span></span>
<span class="line"><span style="color:#24292E;">  db.</span><span style="color:#6F42C1;">saveUser</span><span style="color:#24292E;">(user, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;保存用户信息失败&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 存入成功后，为用户发送一封邮件</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">success</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mailer.</span><span style="color:#6F42C1;">sendWelcomeEmail</span><span style="color:#24292E;">(event.email);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (success) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果发送邮件成功，则通过回调函数返回 userId</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, userId);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果发送邮件失败，则通过回调函数告诉调用方发送邮件失败</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`发送邮件（\${</span><span style="color:#24292E;">user</span><span style="color:#032F62;">.</span><span style="color:#24292E;">email</span><span style="color:#032F62;">}）失败\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>按照测试准则一，这份代码存在这样几个问题。</p><ul><li><p><strong>业务逻辑没有和 FaaS 服务分开：</strong> 因为 handler 是 FaaS 的入口函数，handler 的参数是由具体 FaaS 平台实现的，比如函数计算、Lambda 等，不同 FaaS 平台实现不一样。</p></li><li><p><strong>单元测试依赖数据库（db）和邮件服务（mailer）：</strong> 这些服务都需要发送网络请求。</p></li></ul><p>所以让我们将这段代码进行重构，使其更易于测试：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/users.js</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Users</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">db</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">mailer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mailer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mailer;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      email: email,</span></span>
<span class="line"><span style="color:#E1E4E8;">      created_at: Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将用户信息存入数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.db.</span><span style="color:#B392F0;">saveUser</span><span style="color:#E1E4E8;">(user, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;保存用户信息失败&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 存入成功后，为用户发送一封邮件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">success</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mailer.</span><span style="color:#B392F0;">sendWelcomeEmail</span><span style="color:#E1E4E8;">(email);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (success) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果发送邮件成功，则通过回调函数返回 userId</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, id);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果发送邮件失败，则通过回调函数告诉调用方发送邮件失败</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`发送邮件（\${</span><span style="color:#E1E4E8;">email</span><span style="color:#9ECBFF;">}）失败\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Users;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/users.js</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Users</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">db</span><span style="color:#24292E;">, </span><span style="color:#E36209;">mailer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mailer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mailer;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#E36209;">email</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      email: email,</span></span>
<span class="line"><span style="color:#24292E;">      created_at: Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将用户信息存入数据库</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.db.</span><span style="color:#6F42C1;">saveUser</span><span style="color:#24292E;">(user, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;保存用户信息失败&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 存入成功后，为用户发送一封邮件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">success</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mailer.</span><span style="color:#6F42C1;">sendWelcomeEmail</span><span style="color:#24292E;">(email);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (success) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 如果发送邮件成功，则通过回调函数返回 userId</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, id);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 如果发送邮件失败，则通过回调函数告诉调用方发送邮件失败</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`发送邮件（\${</span><span style="color:#24292E;">email</span><span style="color:#032F62;">}）失败\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Users;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// handler.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;db&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mailer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mailer&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./src/users&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 User 实例</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Users</span><span style="color:#E1E4E8;">(db, mailer);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">saveUser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  users.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(event.email, callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// handler.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;db&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mailer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;mailer&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Users</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./src/users&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 User 实例</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Users</span><span style="color:#24292E;">(db, mailer);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">saveUser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  users.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(event.email, callback);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>你可以看到，我们将存储数据和发送邮件的业务逻辑单独拆分到了 Users 类中，并且 User 类提供构造函数，注入 db 和 mailer 这两个依赖。db 和 mailer 的初始化逻辑和依赖 FaaS 的 handler 函数单独放在 handler.js 文件中，该文件中的代码修改频率更低。</p><p>这样修改后代码就满足了准则一，我们的业务逻辑也完全不依赖任何外部服务了，在单元测试时既可以使用真实的 db 和 mailer 服务，也可以模拟 db 和 mailer 类，使单元测试更简单。并且你的代码也更易于扩展，当你想要将代码迁移到其他 FaaS 平台，你不用修改业务逻辑，只需要提供一个 handler.js 使其适用于新的 FaaS 平台，从而避免云厂商绑定。</p><p>此外根据准则二，我们还需要对业务逻辑进行充分的单元测试，也就是需要对 User 类编写单元测试，具体怎么做呢？接下来就让我们进入单元测试实践部分。</p><h3 id="serverless-单元测试实践" tabindex="-1">Serverless 单元测试实践 <a class="header-anchor" href="#serverless-单元测试实践" aria-label="Permalink to &quot;Serverless 单元测试实践&quot;">​</a></h3><p>首先你需要选择一个测试框架，Node.js 中有很多优秀的测试框架，比如 Jest、Mocha 等，我比较喜欢的是 Jest，因为它可以零配置上手使用、内置 Mock 功能、提供了完整的测试覆盖率报告等。</p><p>你可以使用 npm install -D jest 来安装。然后在 package.json 中添加一个 jest 的命令即可。</p><p>为了方便管理所有测试用例，你可以创建一个 <code>__test__</code>目录，然后在里面新建名为 <code>users.test.js</code>的文件编写 Users 类的测试。Jest 默认会将<code>__test__</code>目录或包含 test 关键字文件中的代码当作单元测试。</p><p>为了方便你进行实践，我提供了一个份<a href="https://github.com/nodejh/serverless-class/tree/master/08" target="_blank" rel="noreferrer">示例代码</a>供你参考，你也可以通过 Git 命令下载使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ git clone git@</span><span style="color:#F97583;">github</span><span style="color:#E1E4E8;">.com</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">nodejh</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">serverless</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class.git</span></span>
<span class="line"><span style="color:#E1E4E8;">$ cd 08</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">unit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">testing</span><span style="color:#F97583;">/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ git clone git@</span><span style="color:#D73A49;">github</span><span style="color:#24292E;">.com</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">nodejh</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">serverless</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class.git</span></span>
<span class="line"><span style="color:#24292E;">$ cd 08</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">unit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">testing</span><span style="color:#D73A49;">/</span></span></code></pre></div><p>完整的目录结构如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">README.md</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">__tests__</span></span>
<span class="line"><span style="color:#B392F0;">│</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">users.test.js</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src</span></span>
<span class="line"><span style="color:#B392F0;">│</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">users.js</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">handler.js</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package.json</span></span>
<span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README.md</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__tests__</span></span>
<span class="line"><span style="color:#6F42C1;">│</span><span style="color:#24292E;">   </span><span style="color:#032F62;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">users.test.js</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">src</span></span>
<span class="line"><span style="color:#6F42C1;">│</span><span style="color:#24292E;">   </span><span style="color:#032F62;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">users.js</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">handler.js</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">package.json</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless.yaml</span></span></code></pre></div><p>为了保证业务逻辑的正确性，我们就需要对 Users 类进行测试。Users 类主要提供了 save 方法，save 方法的功能是把用户信息存入数据库，然后给用户发送一封邮件。代码运行中，可能存在几种情况：</p><ul><li><p>用户信息写入数据库成功，发送邮件成功；</p></li><li><p>用户信息写入数据库成功，发送邮件失败；</p></li><li><p>用户信息写入数据库失败。</p></li></ul><p><strong>这个时候你可能会感觉有点困难了，</strong> 写数据库或发邮件都依赖远程服务，并且还有那么多异常情况要考虑，怎么进行测试呢？对于 save 方法来说，它本质上不需要关心远程服务，只需考虑分支逻辑的正确性，所以这个地方我们可以对 db 和 mailer 进行模拟，模拟 db 和 mailer 的各自异常情况，然后观察 save 方法的执行结果是否正确。</p><p>Jest 提供了 Mock 功能，可以让我们对类或函数进行模拟。由于 save 方法主要使用到了 db.saveUser 和 mailer.sendWelcomeEmail 这两个函数，所以我们只需要对这两个函数进行模拟：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    saveUser: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mailer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendWelcomeEmail: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    saveUser: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">((</span><span style="color:#E36209;">user</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mailer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sendWelcomeEmail: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span></code></pre></div><p>在上面的代码中，db.saveUser 的参数是 user 和回调函数 callback，当函数执行完毕会调用回调函数，回调函数的参数分别是 null 和 1，表示 db.saveUser 执行成功。mailerMock.sendWelcomeEmail 的返回值则为 true，表示发送邮件成功。</p><p>接下来就可以针对 save 方法编写第一个测试用例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../src/users&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;用户信息写入数据库成功，发送邮件成功&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 模拟 db.saveUser，并调用成功</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    saveUser: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 模拟 mailer.sendWelcomeEmail，并调用成功</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mailer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendWelcomeEmail: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Users</span><span style="color:#E1E4E8;">(db, mailer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">email</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test@gmail.com&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  users.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(email, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第一个断言，保存用户信息后的结果为 null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(err).</span><span style="color:#B392F0;">toBeNull</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第二个断言，保存并发送</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(userId).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Users</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../src/users&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;用户信息写入数据库成功，发送邮件成功&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 模拟 db.saveUser，并调用成功</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    saveUser: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">((</span><span style="color:#E36209;">user</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 模拟 mailer.sendWelcomeEmail，并调用成功</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mailer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sendWelcomeEmail: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">users</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Users</span><span style="color:#24292E;">(db, mailer);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">email</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test@gmail.com&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  users.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(email, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第一个断言，保存用户信息后的结果为 null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(err).</span><span style="color:#6F42C1;">toBeNull</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第二个断言，保存并发送</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(userId).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>首先我们模拟了 db 和 mailer 这两个远程服务，并假设其运行结果都是正常的，然后用模拟的 db 和 mailer 来初始化 users 类，接下来调用 users.save 方法。当 db 和 mailer 都执行正常后，users.save 的回调函数参数就分别应该是模拟的 null 和 1，所以我们在 users.save 的回调函数中添加了 expect(err).toBeNull() 和 expect(userId).toBe(1) 这两个断言。</p><p>使用 npm run test 测试一下，运行结果如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> unit-testing@1.0.0 test</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> jest</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PASS</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">__test__/users.test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">✓</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">用户信息写入数据库成功，发送邮件成功</span><span style="color:#E1E4E8;"> (11 </span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Suites:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span></span>
<span class="line"><span style="color:#B392F0;">Tests:</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span></span>
<span class="line"><span style="color:#B392F0;">Snapshots:</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span></span>
<span class="line"><span style="color:#B392F0;">Time:</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">3.391</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#B392F0;">Ran</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">all</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">suites.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> unit-testing@1.0.0 test</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> jest</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PASS</span><span style="color:#24292E;">  </span><span style="color:#032F62;">__test__/users.test.js</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">✓</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用户信息写入数据库成功，发送邮件成功</span><span style="color:#24292E;"> (11 </span><span style="color:#032F62;">ms</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Suites:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span></span>
<span class="line"><span style="color:#6F42C1;">Tests:</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span></span>
<span class="line"><span style="color:#6F42C1;">Snapshots:</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span></span>
<span class="line"><span style="color:#6F42C1;">Time:</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">3.391</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#6F42C1;">Ran</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">suites.</span></span></code></pre></div><p>类似地，我们还需要增加其他两种情况的测试用例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;用户信息写入数据库成功，发送邮件失败&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    saveUser: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mailer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendWelcomeEmail: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Users</span><span style="color:#E1E4E8;">(db, mailer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">email</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test@gmail.com&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  users.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(email, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(err).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`发送邮件（\${</span><span style="color:#E1E4E8;">email</span><span style="color:#9ECBFF;">}）失败\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(userId).</span><span style="color:#B392F0;">toBeUndefined</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;用户信息写入数据失败&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    saveUser: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Internal Error&#39;</span><span style="color:#E1E4E8;">))),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mailer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendWelcomeEmail: jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Users</span><span style="color:#E1E4E8;">(db, mailer);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">email</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test@gmail.com&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  users.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(email, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(err).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;保存用户信息失败&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(userId).</span><span style="color:#B392F0;">toBeUndefined</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;用户信息写入数据库成功，发送邮件失败&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    saveUser: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">((</span><span style="color:#E36209;">user</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mailer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sendWelcomeEmail: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">users</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Users</span><span style="color:#24292E;">(db, mailer);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">email</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test@gmail.com&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  users.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(email, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(err).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`发送邮件（\${</span><span style="color:#24292E;">email</span><span style="color:#032F62;">}）失败\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(userId).</span><span style="color:#6F42C1;">toBeUndefined</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;用户信息写入数据失败&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    saveUser: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">((</span><span style="color:#E36209;">user</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Internal Error&#39;</span><span style="color:#24292E;">))),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mailer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sendWelcomeEmail: jest.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">users</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Users</span><span style="color:#24292E;">(db, mailer);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">email</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test@gmail.com&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  users.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(email, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(err).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;保存用户信息失败&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(userId).</span><span style="color:#6F42C1;">toBeUndefined</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>至此，关于 Users 类的完整单元测试就写好了。我在示例代码中还添加了<code>test:coverage</code>这个命令用来运行单元测试并生成测试覆盖率：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm run test</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">coverage</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> unit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">testing@</span><span style="color:#F97583;">1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> test</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">coverage</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> jest </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">collect</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">coverage</span></span>
<span class="line"><span style="color:#E1E4E8;"> PASS  __test__</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">users.test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">  ✓ 用户信息写入数据库成功，发送邮件成功 (</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> ms)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ✓ 用户信息写入数据库成功，发送邮件失败</span></span>
<span class="line"><span style="color:#E1E4E8;">  ✓ 用户信息写入数据失败 (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ms)</span></span>
<span class="line"><span style="color:#F97583;">----------|---------|----------|---------|---------|-------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">File      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> Stmts </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> Branch </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> Funcs </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> Lines </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Uncovered Line #s </span></span>
<span class="line"><span style="color:#F97583;">----------|---------|----------|---------|---------|-------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">All files </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;"> users.js </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#F97583;">----------|---------|----------|---------|---------|-------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">Test Suites</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> passed, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"><span style="color:#E1E4E8;">Tests</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> passed, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"><span style="color:#E1E4E8;">Snapshots</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> total</span></span>
<span class="line"><span style="color:#E1E4E8;">Time</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">2.983</span><span style="color:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#E1E4E8;">Ran all test suites.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm run test</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">coverage</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> unit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">testing@</span><span style="color:#D73A49;">1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">coverage</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> jest </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">collect</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">coverage</span></span>
<span class="line"><span style="color:#24292E;"> PASS  __test__</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">users.test.js</span></span>
<span class="line"><span style="color:#24292E;">  ✓ 用户信息写入数据库成功，发送邮件成功 (</span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> ms)</span></span>
<span class="line"><span style="color:#24292E;">  ✓ 用户信息写入数据库成功，发送邮件失败</span></span>
<span class="line"><span style="color:#24292E;">  ✓ 用户信息写入数据失败 (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ms)</span></span>
<span class="line"><span style="color:#D73A49;">----------|---------|----------|---------|---------|-------------------</span></span>
<span class="line"><span style="color:#24292E;">File      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> Stmts </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> Branch </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> Funcs </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> Lines </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Uncovered Line #s </span></span>
<span class="line"><span style="color:#D73A49;">----------|---------|----------|---------|---------|-------------------</span></span>
<span class="line"><span style="color:#24292E;">All files </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;"> users.js </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#D73A49;">----------|---------|----------|---------|---------|-------------------</span></span>
<span class="line"><span style="color:#24292E;">Test Suites</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> passed, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> total</span></span>
<span class="line"><span style="color:#24292E;">Tests</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> passed, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> total</span></span>
<span class="line"><span style="color:#24292E;">Snapshots</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> total</span></span>
<span class="line"><span style="color:#24292E;">Time</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">2.983</span><span style="color:#24292E;"> s</span></span>
<span class="line"><span style="color:#24292E;">Ran all test suites.</span></span></code></pre></div><p>从运行结果中可以看的 user.js 的覆盖率是 100%，说明所有代码都经过了测试。100% 的单测覆盖率也应该是每个追求极致的程序员的目标。</p><p>有了完整的单元测试，我们就再也不用担心修改代码引入 Bug 了。假如某天你修改了业务逻辑，比如回调函数不再返回 userId 了，类似下面这样：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(email, callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.db.</span><span style="color:#B392F0;">saveUser</span><span style="color:#E1E4E8;">(user, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;保存用户信息失败&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">success</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mailer.</span><span style="color:#B392F0;">sendWelcomeEmail</span><span style="color:#E1E4E8;">(email);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (success) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 发送邮件成功后，不再返回 userId</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`发送邮件（\${</span><span style="color:#E1E4E8;">email</span><span style="color:#9ECBFF;">}）失败\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(email, callback) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.db.</span><span style="color:#6F42C1;">saveUser</span><span style="color:#24292E;">(user, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;保存用户信息失败&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">success</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mailer.</span><span style="color:#6F42C1;">sendWelcomeEmail</span><span style="color:#24292E;">(email);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (success) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 发送邮件成功后，不再返回 userId</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`发送邮件（\${</span><span style="color:#24292E;">email</span><span style="color:#032F62;">}）失败\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>再去运行单元测试，单元测试就无法通过了：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> unit-testing@1.0.0 test</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> jest</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FAIL</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">__test__/users.test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">✕</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">用户信息写入数据库成功，发送邮件成功</span><span style="color:#E1E4E8;"> (14 </span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">✓</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">用户信息写入数据库成功，发送邮件失败</span><span style="color:#E1E4E8;"> (1 </span><span style="color:#9ECBFF;">ms</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">✓</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">用户信息写入数据失败</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">●</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">用户信息写入数据库成功，发送邮件成功</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect(received</span><span style="color:#E1E4E8;">).toBe(</span><span style="color:#B392F0;">expected</span><span style="color:#E1E4E8;">) // Object.is equality</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Expected:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Received:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">18</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">expect(err</span><span style="color:#E1E4E8;">)</span><span style="color:#B392F0;">.toBeNull</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">19</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">第二个断言，保存并发送</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">expect(userId</span><span style="color:#E1E4E8;">).toBe(</span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">^</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">21</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">22</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">23</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">callback</span><span style="color:#E1E4E8;"> (__test__/users.test.js:20:20)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cb</span><span style="color:#E1E4E8;"> (src/users.js:19:11)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Object.</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">anonymou</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (__test__/users.test.js:7:37)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Users.save</span><span style="color:#E1E4E8;"> (src/users.js:13:13)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Object.</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">anonymou</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (__test__/users.test.js:16:9)</span></span>
<span class="line"><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Suites:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span></span>
<span class="line"><span style="color:#B392F0;">Tests:</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span></span>
<span class="line"><span style="color:#B392F0;">Snapshots:</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span></span>
<span class="line"><span style="color:#B392F0;">Time:</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">3.054</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#B392F0;">Ran</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">all</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">suites.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> unit-testing@1.0.0 test</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> jest</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FAIL</span><span style="color:#24292E;">  </span><span style="color:#032F62;">__test__/users.test.js</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">✕</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用户信息写入数据库成功，发送邮件成功</span><span style="color:#24292E;"> (14 </span><span style="color:#032F62;">ms</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">✓</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用户信息写入数据库成功，发送邮件失败</span><span style="color:#24292E;"> (1 </span><span style="color:#032F62;">ms</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">✓</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用户信息写入数据失败</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">●</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用户信息写入数据库成功，发送邮件成功</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect(received</span><span style="color:#24292E;">).toBe(</span><span style="color:#6F42C1;">expected</span><span style="color:#24292E;">) // Object.is equality</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Expected:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Received:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">undefined</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">18</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#6F42C1;">expect(err</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">.toBeNull</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">第二个断言，保存并发送</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">20</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#6F42C1;">expect(userId</span><span style="color:#24292E;">).toBe(</span><span style="color:#6F42C1;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">^</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">21</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">22</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">23</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">callback</span><span style="color:#24292E;"> (__test__/users.test.js:20:20)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cb</span><span style="color:#24292E;"> (src/users.js:19:11)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Object.</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">anonymou</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (__test__/users.test.js:7:37)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Users.save</span><span style="color:#24292E;"> (src/users.js:13:13)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Object.</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">anonymou</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (__test__/users.test.js:16:9)</span></span>
<span class="line"><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Suites:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span></span>
<span class="line"><span style="color:#6F42C1;">Tests:</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span></span>
<span class="line"><span style="color:#6F42C1;">Snapshots:</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span></span>
<span class="line"><span style="color:#6F42C1;">Time:</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">3.054</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#6F42C1;">Ran</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">suites.</span></span></code></pre></div><p>从单元测试结果就可以看出业务逻辑发生了不兼容变更，这时就需要考虑该变更对上下游的影响，避免造成线上业务风险，在确认没有风险后再修改测试用例。</p><p>在业务变得越来越复杂的时候，你的代码也会越来越多，单元测试也会越来越多。<strong>为了更好地管理代码，我建议单元测试的目录结构和业务代码结构保持一致，</strong> 比如未来你的代码可能演化为 MVC（Modle-Controller-View）三层架构，则代码目录结构应该是下面这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── README.md</span></span>
<span class="line"><span style="color:#E1E4E8;">├── __tests__</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── controllers</span></span>
<span class="line"><span style="color:#E1E4E8;">│   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   └── users.test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── models</span></span>
<span class="line"><span style="color:#E1E4E8;">│   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   └── users.test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── views</span></span>
<span class="line"><span style="color:#E1E4E8;">├── src</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── controllers</span></span>
<span class="line"><span style="color:#E1E4E8;">│   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   └── users.test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── models</span></span>
<span class="line"><span style="color:#E1E4E8;">│   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   └── users.test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── views</span></span>
<span class="line"><span style="color:#E1E4E8;">├── handler.js</span></span>
<span class="line"><span style="color:#E1E4E8;">├── node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#F97583;">package</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">lock.json</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#FDAEB7;font-style:italic;">package</span><span style="color:#E1E4E8;">.json</span></span>
<span class="line"><span style="color:#E1E4E8;">└── serverless.yml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── README.md</span></span>
<span class="line"><span style="color:#24292E;">├── __tests__</span></span>
<span class="line"><span style="color:#24292E;">│   └── controllers</span></span>
<span class="line"><span style="color:#24292E;">│   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   └── users.test.js</span></span>
<span class="line"><span style="color:#24292E;">│   └── models</span></span>
<span class="line"><span style="color:#24292E;">│   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   └── users.test.js</span></span>
<span class="line"><span style="color:#24292E;">│   └── views</span></span>
<span class="line"><span style="color:#24292E;">├── src</span></span>
<span class="line"><span style="color:#24292E;">│   └── controllers</span></span>
<span class="line"><span style="color:#24292E;">│   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   └── users.test.js</span></span>
<span class="line"><span style="color:#24292E;">│   └── models</span></span>
<span class="line"><span style="color:#24292E;">│   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   └── users.test.js</span></span>
<span class="line"><span style="color:#24292E;">│   └── views</span></span>
<span class="line"><span style="color:#24292E;">├── handler.js</span></span>
<span class="line"><span style="color:#24292E;">├── node_modules</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#D73A49;">package</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">lock.json</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#B31D28;font-style:italic;">package</span><span style="color:#24292E;">.json</span></span>
<span class="line"><span style="color:#24292E;">└── serverless.yml</span></span></code></pre></div><p>其中 src 目录中是业务源代码， <code>__test__</code>中是单元测试代码， 两个目录结构完全相同，这样代码的结构层次就非常清晰。</p><p>讲到这儿，我想你应该对开篇提到的 Serverless 单元测试的难点有了理解了吧？<strong>要解决这些难点，主要就是要将业务代码和依赖的云服务分离开来，这样才能方便测试。</strong></p><p>当然了，我在本讲开篇也提到了，虽然单元测试很好，但也有很多人不喜欢写单元测试，主要是觉得麻烦。所以为了让单元测试能够为开发提升价值，而不带来负担，<strong>我总结了一些单元测试的最佳实践，希望能够给你一些帮助。</strong></p><ul><li><p><strong>速度</strong>：单元测试的速度要足够快，因为单元测试运行非常频繁，是用来辅助开发的，如果运行速度慢，则会影响开发效率，我们团队要求单个测试小于200ms，整个系统的测试小于10分钟。</p></li><li><p><strong>隔离外部调用</strong>：单元测试需要隔离一切外部调用，比如不能使用其他真实类、不能读磁盘、不能有网络调用、不能写数据库、不能依赖环境变量、不能依赖系统时间等。</p></li><li><p><strong>模拟</strong>：必要时需要对外部进行模拟，以确保单元测试不被外部环境所影响。由于模拟外部 API 可能会导致代码内部行为发送改变，所以要注意按照最新外部 API 描述进行模拟。</p></li><li><p><strong>单一职责</strong>：一个测试用例只用于验证一个行为;</p></li><li><p><strong>自描述</strong>：单元测试是代码最好的文档，也是方法最好的描述，因此单元测试需要能够明确代码的意图。</p></li></ul><p>最后，单元测试并不是测试的全部，单元测试只是用来保证单个功能、组件的正确性。在 Serverless 中，你依旧需要使用集成测试来验证所有组件集成到一起时运行是否正常，所以我也建议你对 Serverless 应用进行集成测试。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>单元测试一直是困扰 Serverless 开发者的一大难题。在本节课中，我首先展示了一段难以编写单元测试的代码示例，然后讨论了为什么 Serverless 应用编写单元测试难、应该如何编写易测试的代码，以及如何编写单元测试，最后介绍了我在编写单元测试过程中的一些最佳实践。<strong>关于这一讲，我想强调这几个点：</strong></p><ul><li><p>Serverless 应用由于其分布式、依赖云服务、事件驱动等特性，导致编写单元测试很困难；</p></li><li><p>为了方便编写单元测试，需要将业务逻辑和依赖的云服务分离开来；</p></li><li><p>编写单元测试时，需要考虑速度、隔离性、单一职责等因素，避免单元测试成为开发的负担；</p></li><li><p>好的单元测试应该是自描述的，能对代码进行解释说明。</p></li></ul><p>总的来说，对 Serverless 应用编写单元测试的前提是将业务代码和云服务依赖分离，在设计和编写业务代码时就需要考虑代码是否利于测试，在此基础上，业务代码的单元测试和传统应用单元测试的方法是互通的。但单元测试只是保证系统质量的一部分，你依旧需要编写集成测试，来保证整个系统的质量和稳定性。</p>`,54),i=n("p",null,"最后我给你留的作业：亲自实践一下 Serverless 应用的单元测试和集成测试。",-1),F=n("p",null,[s("示例代码地址："),n("a",{href:"https://github.com/nodejh/serverless-class/tree/master/08/unit-testing",target:"_blank",rel:"noreferrer"},"https://github.com/nodejh/serverless-class/tree/master/08/unit-testing")],-1);function C(d,B,u,A,g,m){const a=e("Image");return c(),t("div",null,[E,l(a,{alt:"Lark20210113-175325.png",src:"https://s0.lgstatic.com/i/image2/M01/05/4E/CgpVE1_-wzCALcR9AAR8TB-B350408.png"}),s(),y,l(a,{alt:"Lark20210113-175329.png",src:"https://s0.lgstatic.com/i/image2/M01/05/4E/CgpVE1_-w06AWX__AAEYrgALpK0776.png"}),s(),i,F])}const h=o(r,[["render",C]]);export{D as __pageData,h as default};
