import{_ as o,j as e,o as t,h as c,k as p,f as n,s,Q as l}from"./chunks/framework.d3daa342.js";const h=JSON.parse('{"title":"彩蛋2穷途末路的选择：Lambda架构","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/21讲吃透实时流计算_文档/(6440) 彩蛋 2  穷途末路的选择：Lambda 架构.md","filePath":"posts/backEnd/21讲吃透实时流计算_文档/(6440) 彩蛋 2  穷途末路的选择：Lambda 架构.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/21讲吃透实时流计算_文档/(6440) 彩蛋 2  穷途末路的选择：Lambda 架构.md"},E=s("h1",{id:"彩蛋2穷途末路的选择-lambda架构",tabindex:"-1"},[n("彩蛋2穷途末路的选择：Lambda架构 "),s("a",{class:"header-anchor",href:"#彩蛋2穷途末路的选择-lambda架构","aria-label":'Permalink to "彩蛋2穷途末路的选择：Lambda架构"'},"​")],-1),y=s("p",null,"在前面的课时中，我们都是在讨论实时计算的问题。但真实的世界里，很多事情都不尽人愿。有时候，因为算法复杂度过高、数据量过大，我们并不能通过直接的实时计算，获得想要的结果。比如，二度关联图谱计算以及一些复杂的统计学习模型或机器学习模型训练等。在这种情况下，我们该如何制定出一个可以真实落地的系统架构方案呢？",-1),i=s("p",null,"这个时候，我们就需要用到压箱底的 Lambda 架构了。",-1),d=s("h3",{id:"lambda-架构",tabindex:"-1"},[n("Lambda 架构 "),s("a",{class:"header-anchor",href:"#lambda-架构","aria-label":'Permalink to "Lambda 架构"'},"​")],-1),m=s("p",null,"什么是 Lambda 架构呢？下面的图 1 进行了说明。",-1),F=l('<p>图 1 Lambda 系统架构图</p><p>从上面的图 1 可以看出，Lambda 架构总体上分为三层：批处理层（batch layer）、快速处理层（speed layer）和服务层（serving layer），其中：</p><ul><li><p>批处理层负责处理主数据集（也就是历史全量数据）；</p></li><li><p>快速处理层负责处理增量数据（也就是新进入系统的数据）；</p></li><li><p>服务层用于将批处理层和快速处理层的结果合并起来，给用户或应用程序提供查询服务。</p></li></ul><p>Lambda 架构是一种架构设计思路，针对每一层的技术组件选型并没有严格限定。我们可以根据自己公司和项目的实际情况，选择相应的技术方案。</p><p>对于批处理层，数据存储可以选择 HDFS、S3 等大数据存储系统，而计算工具则可以选择 MapReduce、Hive、Spark 等大数据处理框架。批处理层的计算结果（比如数据库表或者视图），由于需要被服务层或快速处理层快速访问，所以可以存放在诸如 MySQL、HBase 等能够快速响应查询请求的数据库中。</p><p>对于快速处理层，这就是各种流计算框架的用武之地了，比如 Flink、Spark Streaming 和 Storm 等。快速处理层由于对性能要求更加严苛，它们的计算结果可以存入像 Redis 这样具有超高性能表现的内存数据库中。不过有时候为了查询方便，也可以将计算结果存放在 MySQL 等传统数据库中，毕竟这些数据库配合缓存一起使用的话，性能也是非常棒的。</p><p>对于服务层，当其接收到查询请求时，就可以分别从存储批处理层和快速处理层计算结果的数据库中，取出相应的计算结果并做合并，就能得到最终的查询结果了。</p><p>不过，虽然 Lambda 架构实现了间接的实时计算，但它也存在一些问题。其中最主要的就是，对于同一个查询目标，需要分别为批处理层和快速处理层开发不同的算法实现。也就是说，对于相同的逻辑，需要开发两种不同的代码，并使用两种不同的计算框架（比如同时使用 Storm 和 Spark），这对开发、测试和运维，都带来一定的复杂性和额外工作。</p><p>所以，Lambda 架构的改进版本，也就是 Kappa 架构应运而生。</p><h3 id="kappa-架构" tabindex="-1">Kappa 架构 <a class="header-anchor" href="#kappa-架构" aria-label="Permalink to &quot;Kappa 架构&quot;">​</a></h3><p>下面的图 2 展示了 Kappa 架构的工作原理。</p>',11),u=l(`<p>图 2 Kappa 系统架构图</p><p>从上面的图 2 可以看出，Kappa 架构相比 Lambda 架构的最大改进，就是将批处理层也用快速处理层的流计算技术所取代。这样一来，批处理层和快速处理层<strong>使用相同的流计算逻辑，并有更统一的计算框架</strong>，从而降低了开发、测试和运维的成本。</p><p>另外，由于 Kappa 架构完全使用&quot;流计算&quot;来处理数据，这就让我们在&quot;存储&quot;方面也可以作出调整。我们不必再像在 Lambda 架构中，将离线数据转储到 HDFS、S3 这样的&quot;块数据&quot;存储系统。而只需要将数据按照&quot;流&quot;的方式，存储在 Kafka 这样的&quot;流数据&quot;存储系统里即可。这既减少了数据存储的空间，也避免了不必要的数据转储，同时还降低了系统的复杂程度。</p><p>所以说，在 Flink 和 Spark Streaming 等新一代<strong>流批一体计算框架</strong> ，以及诸如 Kafka 和 Pulsar 等新一代<strong>流式大数据存储系统</strong> 的<strong>双重加持</strong>下，使用 Kappa 架构处理大数据，已经成为一种非常自然的选择。</p><h3 id="使用-flink-实现-kappa-架构" tabindex="-1">使用 Flink 实现 Kappa 架构 <a class="header-anchor" href="#使用-flink-实现-kappa-架构" aria-label="Permalink to &quot;使用 Flink 实现 Kappa 架构&quot;">​</a></h3><p>正所谓光说不练假把式，下面我们就使用 Flink 来演示如何实现 Kappa 架构。</p><p>假设现在我们需要统计&quot;最近 3 天每种商品的销售量&quot;。根据 Kappa 架构的思路，我们将这个计算任务，分为离线处理层和快速处理层。</p><p>其中离线处理层的实现如下（<a href="https://github.com/alain898/realtime_stream_computing_course/blob/main/course_bonus02/src/main/java/com/alain898/course/realtimestreaming/course_bonus02/example/BatchLayer.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">完整代码参考这里</a>）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DataStream counts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stream</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将字符串的数据解析为JSON对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MapFunction&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Event </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> JSONObject.</span><span style="color:#B392F0;">parseObject</span><span style="color:#E1E4E8;">(s, Event.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 提取出每个事件中的商品，转化为商品计数事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MapFunction&lt;</span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">CountedEvent</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CountedEvent </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Event </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountedEvent</span><span style="color:#E1E4E8;">(event.product, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, event.timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">assignTimestampsAndWatermarks</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventTimestampPeriodicWatermarks</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">keyBy</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;product&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对于批处理层，使用滑动窗口SlidingEventTimeWindows</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">timeWindow</span><span style="color:#E1E4E8;">(Time.</span><span style="color:#B392F0;">days</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">), Time.</span><span style="color:#B392F0;">minutes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">// 最后是批处理窗口内的聚合计算</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((e1, e2) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CountedEvent countedEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountedEvent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.product </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e1.product;</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.timestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e1.timestamp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e1.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e2.count;</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.minTimestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(e1.minTimestamp, e2.minTimestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.maxTimestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(e1.maxTimestamp, e2.maxTimestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> countedEvent;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DataStream counts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stream</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将字符串的数据解析为JSON对象</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MapFunction&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Event </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> JSONObject.</span><span style="color:#6F42C1;">parseObject</span><span style="color:#24292E;">(s, Event.class);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 提取出每个事件中的商品，转化为商品计数事件</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MapFunction&lt;</span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">CountedEvent</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CountedEvent </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Event </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountedEvent</span><span style="color:#24292E;">(event.product, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, event.timestamp);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">assignTimestampsAndWatermarks</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventTimestampPeriodicWatermarks</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">keyBy</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;product&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对于批处理层，使用滑动窗口SlidingEventTimeWindows</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">timeWindow</span><span style="color:#24292E;">(Time.</span><span style="color:#6F42C1;">days</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">), Time.</span><span style="color:#6F42C1;">minutes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">// 最后是批处理窗口内的聚合计算</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((e1, e2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        CountedEvent countedEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountedEvent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.product </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e1.product;</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.timestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e1.timestamp;</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e1.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e2.count;</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.minTimestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(e1.minTimestamp, e2.minTimestamp);</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.maxTimestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(e1.maxTimestamp, e2.maxTimestamp);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> countedEvent;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>在上面的代码中，我们采用了长度为 3 天，步长为 30 分钟的滑动窗口。也就是说，每三十分钟会计算一次三天内各个商品的销售量。</p><p>接下来是快速处理层的实现（<a href="https://github.com/alain898/realtime_stream_computing_course/blob/main/course_bonus02/src/main/java/com/alain898/course/realtimestreaming/course_bonus02/example/FastLayer.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">完整代码参考这里</a>）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DataStream counts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stream</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将字符串的数据解析为JSON对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MapFunction&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Event </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> JSONObject.</span><span style="color:#B392F0;">parseObject</span><span style="color:#E1E4E8;">(s, Event.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 提取出每个事件中的商品，转化为商品计数事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MapFunction&lt;</span><span style="color:#F97583;">Event</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">CountedEvent</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CountedEvent </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Event </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountedEvent</span><span style="color:#E1E4E8;">(event.product, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, event.timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">assignTimestampsAndWatermarks</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventTimestampPeriodicWatermarks</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">keyBy</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x.product)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对于批处理层，使用翻转窗口TumblingEventTimeWindows</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">window</span><span style="color:#E1E4E8;">(TumblingEventTimeWindows.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(Time.</span><span style="color:#B392F0;">seconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#6A737D;">// 最后是批处理窗口内的聚合计算</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((e1, e2) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CountedEvent countedEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountedEvent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.product </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e1.product;</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.timestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e1.timestamp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e1.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e2.count;</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.minTimestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(e1.minTimestamp, e2.minTimestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">        countedEvent.maxTimestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(e1.maxTimestamp, e2.maxTimestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> countedEvent;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DataStream counts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stream</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将字符串的数据解析为JSON对象</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MapFunction&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Event </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> JSONObject.</span><span style="color:#6F42C1;">parseObject</span><span style="color:#24292E;">(s, Event.class);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 提取出每个事件中的商品，转化为商品计数事件</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MapFunction&lt;</span><span style="color:#D73A49;">Event</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">CountedEvent</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CountedEvent </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Event </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountedEvent</span><span style="color:#24292E;">(event.product, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, event.timestamp);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">assignTimestampsAndWatermarks</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventTimestampPeriodicWatermarks</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">keyBy</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x.product)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对于批处理层，使用翻转窗口TumblingEventTimeWindows</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">window</span><span style="color:#24292E;">(TumblingEventTimeWindows.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(Time.</span><span style="color:#6F42C1;">seconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#6A737D;">// 最后是批处理窗口内的聚合计算</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((e1, e2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        CountedEvent countedEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountedEvent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.product </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e1.product;</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.timestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e1.timestamp;</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e1.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e2.count;</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.minTimestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(e1.minTimestamp, e2.minTimestamp);</span></span>
<span class="line"><span style="color:#24292E;">        countedEvent.maxTimestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(e1.maxTimestamp, e2.maxTimestamp);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> countedEvent;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span></code></pre></div><p>在上面的代码中，我们采用了长度为 15 秒的翻滚窗口。也就是说，每 15 秒钟会计算一次 15 秒内各个商品的销售量。</p><p>从上面两部分的代码中，我们就可以体会到 Kappa 架构的优势所在了。因为，在上面<strong>批处理层</strong> 和<strong>快速处理层</strong> 的实现中，<strong>除了两个窗口的类型不一样以外，其他的代码完全相同</strong>！是不是非常惊艳？！</p><p>接下来，在批处理层和快速处理层各自计算出结果后，需要将计算结果存入数据库，具体如下（<a href="https://github.com/alain898/realtime_stream_computing_course/blob/main/course_bonus02/src/main/java/com/alain898/course/realtimestreaming/course_bonus02/example/JdbcWriter.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">完整代码参考这里</a>）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdbcWriter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RichSinkFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">CountedEvent</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将每个窗口内的计算结果保存到数据库中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String inset_sql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;INSERT INTO table_counts(id,start,end,product,v_count,layer) VALUES(?,?,?,?,?,?) &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;ON DUPLICATE KEY UPDATE start=?,end=?,product=?,v_count=?,layer=?;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> slideMS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> slideNumberInWindow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String layer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdbcWriter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">slideMS</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">slideNumberInWindow</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">layer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.slideMS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slideMS;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.slideNumberInWindow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slideNumberInWindow;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.layer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> layer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(CountedEvent </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, Context </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过对滑动或翻滚的步长取整，以对齐时间窗口，从而方便后续合并离线部分和实时部分的计算结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.minTimestamp </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> slideMS;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.minTimestamp </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> slideMS </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> slideNumberInWindow;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String product </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.product;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> v_count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.count;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String layer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.layer;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DigestUtils.</span><span style="color:#B392F0;">md5Hex</span><span style="color:#E1E4E8;">(Joiner.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&amp;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(start, end, product, layer)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, id);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, start);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, end);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, product);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, v_count);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, layer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, start);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, end);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">, product);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, v_count);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, layer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        preparedStatement.</span><span style="color:#B392F0;">executeUpdate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdbcWriter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RichSinkFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">CountedEvent</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将每个窗口内的计算结果保存到数据库中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String inset_sql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;INSERT INTO table_counts(id,start,end,product,v_count,layer) VALUES(?,?,?,?,?,?) &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;ON DUPLICATE KEY UPDATE start=?,end=?,product=?,v_count=?,layer=?;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> slideMS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> slideNumberInWindow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String layer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdbcWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slideMS</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">slideNumberInWindow</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">layer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.slideMS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slideMS;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.slideNumberInWindow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slideNumberInWindow;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.layer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> layer;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(CountedEvent </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, Context </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过对滑动或翻滚的步长取整，以对齐时间窗口，从而方便后续合并离线部分和实时部分的计算结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.minTimestamp </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> slideMS;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.minTimestamp </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> slideMS </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> slideNumberInWindow;</span></span>
<span class="line"><span style="color:#24292E;">        String product </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.product;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> v_count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.count;</span></span>
<span class="line"><span style="color:#24292E;">        String layer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.layer;</span></span>
<span class="line"><span style="color:#24292E;">        String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DigestUtils.</span><span style="color:#6F42C1;">md5Hex</span><span style="color:#24292E;">(Joiner.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(start, end, product, layer)));</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, id);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, start);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, end);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, product);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, v_count);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, layer);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, start);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, end);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, product);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, v_count);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, layer);</span></span>
<span class="line"><span style="color:#24292E;">        preparedStatement.</span><span style="color:#6F42C1;">executeUpdate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的代码中，我们将批处理层和快速处理层的结果都存入了数据库。</p><p>最后，服务层只需要使用一条简单的 SQL 语句，就能将批处理层和快速处理层的计算结果合并起来，具体如下（<a href="https://github.com/alain898/realtime_stream_computing_course/blob/main/course_bonus02/src/main/java/com/alain898/course/realtimestreaming/course_bonus02/example/ServerLayer.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">完整代码参考这里</a>）：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> product, </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(v_count) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> s_count </span><span style="color:#F97583;">from</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> table_counts </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">start=</span><span style="color:#E1E4E8;">? </span><span style="color:#F97583;">AND</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">end=</span><span style="color:#E1E4E8;">? </span><span style="color:#F97583;">AND</span><span style="color:#E1E4E8;"> layer</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;batch&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">UNION</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> table_counts </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">start&gt;=</span><span style="color:#E1E4E8;">? </span><span style="color:#F97583;">AND</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">end&lt;=</span><span style="color:#E1E4E8;">? </span><span style="color:#F97583;">AND</span><span style="color:#E1E4E8;"> layer</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;fast&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> union_table </span><span style="color:#F97583;">GROUP BY</span><span style="color:#E1E4E8;"> product;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> product, </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(v_count) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> s_count </span><span style="color:#D73A49;">from</span></span>
<span class="line"><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> table_counts </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">start=</span><span style="color:#24292E;">? </span><span style="color:#D73A49;">AND</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">end=</span><span style="color:#24292E;">? </span><span style="color:#D73A49;">AND</span><span style="color:#24292E;"> layer</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;batch&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">UNION</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> table_counts </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">start&gt;=</span><span style="color:#24292E;">? </span><span style="color:#D73A49;">AND</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">end&lt;=</span><span style="color:#24292E;">? </span><span style="color:#D73A49;">AND</span><span style="color:#24292E;"> layer</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;fast&#39;</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> union_table </span><span style="color:#D73A49;">GROUP BY</span><span style="color:#24292E;"> product;</span></span></code></pre></div><p>在上面的代码中，我们使用 UNION 操作，将批处理层和快速处理层的结果合并起来。然后，在这个合并的表上，通过分组聚合计算，就能非常方便地计算出&quot;最近 3 天每种商品的销售量&quot;这个计算目标了。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>今天，我们讨论了采用 Lambda 架构和 Kappa 架构，间接实现实时计算的方法。</p><p>总的来说，Lambda 架构是一种通用的架构思想，它告诉我们，<strong>当不能直接做到实时计算时，不妨尝试采用离线和实时相结合的折中计算方案</strong>。而从 Lambda 架构上改进而来的 Kappa 架构，通过&quot;流&quot;来统一&quot;编程界面&quot;，降低了系统、开发和运维的复杂程度。</p><p>但是，这并不意味着 Kappa 架构就能够取代 Lambda 架构了。</p><p>因为，在实际项目开发过程中，并不是所有的任务都适合用流计算的方式来完成。目前为止，采用批处理方式实现的算法，比采用流处理方式实现的算法，不管是在丰富度、成熟度、还是可用第三方工具库方面，都要优越很多。</p><p>另外，是选择将离线计算和实时计算框架统一起来，还是将数据人员（他们已经有很多好用且熟悉的数据分析工具，比如 R、Python、Spark 等）和开发人员各自的生产力和创造力发挥出来，还有待商榷。</p><p>所以，我们还是需要根据具体的业务场景、已有技术积累、团队研发能力等多方面因素，设计出最终能够真实落地的方案。</p><p>最后，你在实际工作中有没有碰到过，不能够直接实现实时计算的场景呢？如果使用 Lambda 架构或 Kappa 架构的话，你会怎么做？可以将你的想法或问题写在留言区。</p><p>下面是本课时的知识脑图。</p>`,29);function v(A,D,g,C,b,_){const a=e("Image");return t(),c("div",null,[E,y,i,d,m,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/2D/98/CioPOWBmuM6AEJQwAAIYIcuicaY318.png"}),n(),F,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/2D/90/Cgp9HWBmuNqAeyzOAAIVhE-o3d0639.png"}),n(),u,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/2D/98/CioPOWBmuPiAemNQAAhVcWpIr6g122.png"})])}const B=o(r,[["render",v]]);export{h as __pageData,B as default};
