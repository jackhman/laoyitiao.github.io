import{_ as o,j as e,o as t,h as r,k as p,f as n,s,Q as l}from"./chunks/framework.d3daa342.js";const T=JSON.parse('{"title":"第12讲：如何基于JUnit5的服务实现单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1816) 第12讲：如何基于 JUnit 5 的服务实现单元测试.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1816) 第12讲：如何基于 JUnit 5 的服务实现单元测试.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1816) 第12讲：如何基于 JUnit 5 的服务实现单元测试.md"},E=s("h1",{id:"第12讲-如何基于junit5的服务实现单元测试",tabindex:"-1"},[n("第12讲：如何基于JUnit5的服务实现单元测试 "),s("a",{class:"header-anchor",href:"#第12讲-如何基于junit5的服务实现单元测试","aria-label":'Permalink to "第12讲：如何基于JUnit5的服务实现单元测试"'},"​")],-1),y=s("p",null,'本课时将介绍"如何使用 JUnit 5 实现服务的单元测试"。',-1),i=s("p",null,'第 11 课时对"数据库驱动的微服务实现"做了简要的介绍，本课时将介绍如何使用 JUnit 5 进行单元测试。你可能会好奇，实现相关的内容比较多却用一个课时来讲解，而内容相对较少的单元测试部分也同样用一个课时？',-1),d=s("p",null,"这是因为市面上与实现相关的参考资料已经非常多了，而单元测试的介绍则相对较少，甚至被忽略了。单元测试的重要性怎么强调都不过分。没有覆盖率足够高的自动化单元测试，就无法安全的更新代码和进行重构。单元测试是开发人员所依赖的安全网。基于这些原因，本课时将对单元测试进行具体的介绍。",-1),F=s("h4",{id:"junit-5-介绍",tabindex:"-1"},[n("JUnit 5 介绍 "),s("a",{class:"header-anchor",href:"#junit-5-介绍","aria-label":'Permalink to "JUnit 5 介绍"'},"​")],-1),u=s("p",null,"JUnit 是 Java 单元测试领域中的事实标准，最新版本是 JUnit 5，该版本由 JUnit Platform、JUnit Jupiter 和 JUnit Vintage 组成，这 3 个组件的说明如下表所示：",-1),g=s("p",null,"JUnit Jupiter 的编程模型相比于 JUnit 4 有了很大的改进，推荐在新的项目中使用。下面是一些重要的注解：",-1),C=l("",3),A=l("",23),B=l("",10);function v(D,h,m,b,q,P){const a=e("Image");return t(),r("div",null,[E,y,i,d,F,u,p(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image3/M01/07/AF/CgoCgV6iXLqAfqVwAABV7M2QOBM600.png"}),n(),g,p(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image3/M01/14/DF/Ciqah16iXMmAEiJ7AACRoHzs3ew474.png"}),n(),C,p(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image3/M01/07/B0/CgoCgV6iXOuAZf2mAABIdHZQLEg187.png"}),n(),A,p(a,{alt:"4.png",src:"https://s0.lgstatic.com/i/image3/M01/07/B0/CgoCgV6iXWyAEWGPAAArkcc--wE091.png"}),n(),B])}const S=o(c,[["render",v]]);export{T as __pageData,S as default};
