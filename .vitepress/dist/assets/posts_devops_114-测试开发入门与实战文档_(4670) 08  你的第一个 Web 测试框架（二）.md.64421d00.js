import{_ as o,j as e,o as t,g as r,k as p,h as n,s,Q as l}from"./chunks/framework.4e7d56ce.js";const v=JSON.parse('{"title":"实践出真知------创建 Web 测试框架雏形 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4670) 08  你的第一个 Web 测试框架（二）.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4670) 08  你的第一个 Web 测试框架（二）.md","lastUpdated":1696417798000}'),c={name:"posts/devops/114-测试开发入门与实战文档/(4670) 08  你的第一个 Web 测试框架（二）.md"},y=s("p",null,"通过上一课时的学习，你对 unittest 已经有了一定的认知，这节课我将正式带你搭建 Web 测试框架。",-1),E=s("p",null,"你可以通过下图，对上节课内容进行更清晰的回顾。",-1),i=s("h3",{id:"实践出真知-创建-web-测试框架雏形",tabindex:"-1"},[n("实践出真知------创建 Web 测试框架雏形 "),s("a",{class:"header-anchor",href:"#实践出真知-创建-web-测试框架雏形","aria-label":'Permalink to "实践出真知------创建 Web 测试框架雏形"'},"​")],-1),_=s("p",null,"Web 自动化测试，由于其对应于测试金字塔的 UI 层，所以也常被称为 UI 自动化测试，指的是使用代码模拟真实用户视角，以自动化的方式去执行业务操作，以及进行操作后的检查这样一个过程。",-1),F=s("p",null,"既然是 Web 自动化测试，必然要依托浏览器执行。当前在 Web 自动化测试领域，Selenium/WebDriver 仍然是市场占有率最高的的一款 UI 自动化工具，所以本节课我们就采用 Selenium/WebDriver 来作为我们 Web 自动化测试框架中与浏览器打交道的工具。",-1),u=s("blockquote",null,[s("p",null,[n("其实 Cypress 已严重挑战了 Selenium/WebDriver 的市场霸主地位，并大有后来者居上趋势，想要更多地了解 Cypress 框架，你可以参考我的书"),s("a",{href:"https://item.jd.com/12647091.html",target:"_blank",rel:"noreferrer"},"《前端自动化测试框架 -- Cypress从入门到精通》"),n("。")])],-1),d=s("p",null,"而 unittest 框架是一个相对完整的框架，可以应对测试用例/测试用例集的生成、测试用例的执行、测试执行后的清理及测试报告，所以如下图所示，两者结合我们就有了 Web 自动化测试框架的雏形：",-1),h=l(`<p>Web 自动化测试框架雏形图</p><p>下面我们按照上一课时提及的&quot;使用 unittest 框架创建测试用例的步骤&quot;把这个框架创建起来。</p><p>1.首先，我们先给定项目的文件结构：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouTest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">main.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouTest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">main.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span></code></pre></div><p>2.测试类 test_baidu.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Baidu</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(</span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results, </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@unittest.skip</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;i want to skip&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_set</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/gaoji/preferences.html&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&quot;.//*[@id=&#39;nr&#39;]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        m.find_element_by_xpath(</span><span style="color:#9ECBFF;">&quot;//option[@value=&#39;10&#39;]&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDown</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main(</span><span style="color:#FFAB70;">verbosity</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Baidu</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(</span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results, </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@unittest.skip</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;i want to skip&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_set</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/gaoji/preferences.html&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&quot;.//*[@id=&#39;nr&#39;]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        m.find_element_by_xpath(</span><span style="color:#032F62;">&quot;//option[@value=&#39;10&#39;]&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDown</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main(</span><span style="color:#E36209;">verbosity</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>需要注意的是，要想正确运行 Selenium，需要安装相应的依赖，包括 Selenium 和对应的 WebDriver，我以 Win10 下运行 Chrome 为例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 1.安装Selenium，假设lagouTest项目在D盘的_Automation文件夹下</span></span>
<span class="line"><span style="color:#6A737D;"># D:\\_Automation\\lagouTest&gt;pip install selenium</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 安装Chrome Driver</span></span>
<span class="line"><span style="color:#6A737D;"># 从如下地址选择跟你浏览器版本一致的chrome Driver下载：</span></span>
<span class="line"><span style="color:#6A737D;"># http://npm.taobao.org/mirrors/chromedriver</span></span>
<span class="line"><span style="color:#6A737D;"># 并将解压后的chromedriver.exe放到python安装目录下的scripts文件夹下。</span></span>
<span class="line"><span style="color:#6A737D;"># Win10下默认路径为用户目录下的AppData：</span></span>
<span class="line"><span style="color:#6A737D;"># C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python38-32\\Scripts</span></span>
<span class="line"><span style="color:#6A737D;"># 3.进入环境配置，编辑系统变量里path变量，在最后面加上Chrome的安装路径：</span></span>
<span class="line"><span style="color:#6A737D;"># C:\\Program Files\\Google\\Chrome\\Application</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 1.安装Selenium，假设lagouTest项目在D盘的_Automation文件夹下</span></span>
<span class="line"><span style="color:#6A737D;"># D:\\_Automation\\lagouTest&gt;pip install selenium</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 安装Chrome Driver</span></span>
<span class="line"><span style="color:#6A737D;"># 从如下地址选择跟你浏览器版本一致的chrome Driver下载：</span></span>
<span class="line"><span style="color:#6A737D;"># http://npm.taobao.org/mirrors/chromedriver</span></span>
<span class="line"><span style="color:#6A737D;"># 并将解压后的chromedriver.exe放到python安装目录下的scripts文件夹下。</span></span>
<span class="line"><span style="color:#6A737D;"># Win10下默认路径为用户目录下的AppData：</span></span>
<span class="line"><span style="color:#6A737D;"># C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python38-32\\Scripts</span></span>
<span class="line"><span style="color:#6A737D;"># 3.进入环境配置，编辑系统变量里path变量，在最后面加上Chrome的安装路径：</span></span>
<span class="line"><span style="color:#6A737D;"># C:\\Program Files\\Google\\Chrome\\Application</span></span></code></pre></div><p>&quot;Baidu&quot;这个测试类我写得非常不优雅，项目配置、元素定位、测试数据全部耦合在一块儿，现在先不去管它，我会在后面的课时慢慢优化它，带你认识框架设计的全过程。</p><p>3.main.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    suite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> unittest.defaultTestLoader.discover(os.path.join(os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;tests&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#FFAB70;">pattern</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;*.py&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">top_level_dir</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    runner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> unittest.TextTestRunner(</span><span style="color:#FFAB70;">verbosity</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    runner.run(suite)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    suite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> unittest.defaultTestLoader.discover(os.path.join(os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;tests&quot;</span><span style="color:#24292E;">),</span><span style="color:#E36209;">pattern</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;*.py&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">top_level_dir</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    runner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> unittest.TextTestRunner(</span><span style="color:#E36209;">verbosity</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    runner.run(suite)</span></span></code></pre></div><p>4.运行 main.py，我们将看到如下结果：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test_baidu_search (tests.test_baidu.Baidu) </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;"> ok</span></span>
<span class="line"><span style="color:#E1E4E8;">test_baidu_set (tests.test_baidu.Baidu) </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;"> skipped </span><span style="color:#9ECBFF;">&#39;i want to skip&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">----------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">Ran </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tests </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8.</span><span style="color:#FDAEB7;font-style:italic;">564s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">OK (</span><span style="color:#FFAB70;">skipped</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test_baidu_search (tests.test_baidu.Baidu) </span><span style="color:#005CC5;">...</span><span style="color:#24292E;"> ok</span></span>
<span class="line"><span style="color:#24292E;">test_baidu_set (tests.test_baidu.Baidu) </span><span style="color:#005CC5;">...</span><span style="color:#24292E;"> skipped </span><span style="color:#032F62;">&#39;i want to skip&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">----------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#24292E;">Ran </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tests </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8.</span><span style="color:#B31D28;font-style:italic;">564s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">OK (</span><span style="color:#E36209;">skipped</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div><p>可以看到这个测试运行成功了。 假设我们需要运行更多的测试用例怎么办？仅仅需要在 tests 文件夹下添加相应的测试类就好了。这样，一个基于 unittest 的 Web 端测试框架的雏形就搭建成功了，是不是非常简单？</p><h3 id="实践出真知-优化-web-测试框架" tabindex="-1">实践出真知------优化 Web 测试框架 <a class="header-anchor" href="#实践出真知-优化-web-测试框架" aria-label="Permalink to &quot;实践出真知------优化 Web 测试框架&quot;">​</a></h3><p>现在我们的框架虽然可以测试了，但有一个问题：测试报告直接打印在 Console 里，不利于我们查看测试运行的历史。那么能不能把测试报告给持久化呢？我们来看一下解决方案。</p><h4 id="_1-直接存储测试运行结果报告" tabindex="-1">1. 直接存储测试运行结果报告 <a class="header-anchor" href="#_1-直接存储测试运行结果报告" aria-label="Permalink to &quot;1. 直接存储测试运行结果报告&quot;">​</a></h4><p>新添加一个测试报告处理文件 txtReport.py</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">|--lagouTest</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--main.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--txtReport.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">|--lagouTest</span></span>
<span class="line"><span style="color:#24292E;">    |--tests</span></span>
<span class="line"><span style="color:#24292E;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        |--__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    |--main.py</span></span>
<span class="line"><span style="color:#24292E;">    |--__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    |--txtReport.py</span></span></code></pre></div><p>其中，txtReport.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__author__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#6A737D;"># -*-coding=utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 获取tests文件夹所在路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_dir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base, </span><span style="color:#9ECBFF;">&#39;tests&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 列出所有待测试文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.listdir(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_dir)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 定义正则匹配规则，过滤__init__.py和 *.pyc文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">(</span><span style="color:#DBEDFF;">__init__</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">py</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">pyc</span><span style="color:#79B8FF;">)</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;"># 测试结果写文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base,</span><span style="color:#9ECBFF;">&quot;log.txt&quot;</span><span style="color:#E1E4E8;">)):</span></span>
<span class="line"><span style="color:#E1E4E8;">            f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base,</span><span style="color:#9ECBFF;">&quot;log.txt&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base,</span><span style="color:#9ECBFF;">&quot;log.txt&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&#39;w&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            f.flush()</span></span>
<span class="line"><span style="color:#E1E4E8;">        f.close()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 运行符合要求的测试文件并写入log.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run_test</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> py_file </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_list:</span></span>
<span class="line"><span style="color:#E1E4E8;">            match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pattern.match(py_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> match:</span></span>
<span class="line"><span style="color:#E1E4E8;">                os.system(</span><span style="color:#9ECBFF;">&#39;python </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> 1&gt;&gt;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> 2&gt;&amp;1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_dir,py_file),os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base,</span><span style="color:#9ECBFF;">&quot;log.txt&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Test()</span></span>
<span class="line"><span style="color:#E1E4E8;">    test.run_test()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__author__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#6A737D;"># -*-coding=utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 获取tests文件夹所在路径</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base, </span><span style="color:#032F62;">&#39;tests&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 列出所有待测试文件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.listdir(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_dir)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 定义正则匹配规则，过滤__init__.py和 *.pyc文件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">__init__</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">py</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">pyc</span><span style="color:#005CC5;">)</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;"># 测试结果写文件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base,</span><span style="color:#032F62;">&quot;log.txt&quot;</span><span style="color:#24292E;">)):</span></span>
<span class="line"><span style="color:#24292E;">            f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base,</span><span style="color:#032F62;">&quot;log.txt&quot;</span><span style="color:#24292E;">),</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base,</span><span style="color:#032F62;">&quot;log.txt&quot;</span><span style="color:#24292E;">),</span><span style="color:#032F62;">&#39;w&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            f.flush()</span></span>
<span class="line"><span style="color:#24292E;">        f.close()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 运行符合要求的测试文件并写入log.txt</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run_test</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> py_file </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_list:</span></span>
<span class="line"><span style="color:#24292E;">            match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pattern.match(py_file)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> match:</span></span>
<span class="line"><span style="color:#24292E;">                os.system(</span><span style="color:#032F62;">&#39;python </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> 1&gt;&gt;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> 2&gt;&amp;1&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_dir,py_file),os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base,</span><span style="color:#032F62;">&quot;log.txt&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Test()</span></span>
<span class="line"><span style="color:#24292E;">    test.run_test()</span></span></code></pre></div><p>在 Pycharm 或者命令行里执行这个文件，你会发现测试被运行且运行报告 log.txt 生成在根目录下。</p><p>但是你会发现，这个报告还不够好，仅仅是把 Console 里的内容重定向到文件里罢了。正常情况下，我们的测试报告都是比较美观的，比如说 HTML 格式。</p><h4 id="_2-使用测试报告模块生成测试报告" tabindex="-1">2. 使用测试报告模块生成测试报告 <a class="header-anchor" href="#_2-使用测试报告模块生成测试报告" aria-label="Permalink to &quot;2. 使用测试报告模块生成测试报告&quot;">​</a></h4><p>常用的测试报告模块有 HTMLTestRunner 和 allure。下面我以 HTMLTestRunner 为例，来演示下如何生成测试报告。而如何使用 allure 生成测试报告，我们放在下节 <strong>&quot;09 | 你的第一个 API 测试框架&quot;</strong> 讲。</p><p>首先，我们更改下项目结构，创建一个生成测试报告的文件 html_reporter.py。更新后的项目结构如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouTest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">html_reporter.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">HTMLTestRunner.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">main.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">txtReport.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouTest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">html_reporter.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">HTMLTestRunner.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">main.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">txtReport.py</span></span></code></pre></div><p>html_reporter.py 中的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__author__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> HTMLTestRunner</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GenerateReport</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        now </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.strftime(</span><span style="color:#9ECBFF;">&#39;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">-%H_%M&#39;</span><span style="color:#E1E4E8;">, time.localtime(time.time()))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.report_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;test_report_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> now </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.html&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.dirname(os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> os.path.exists(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.report_name)):</span></span>
<span class="line"><span style="color:#E1E4E8;">            os.remove(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.report_name))</span></span>
<span class="line"><span style="color:#E1E4E8;">        fp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.report_name), </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        fp.close()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate_report</span><span style="color:#E1E4E8;">(self, test_suites):</span></span>
<span class="line"><span style="color:#E1E4E8;">        fp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(os.path.join(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.test_base, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.report_name), </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        runner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HTMLTestRunner.HTMLTestRunner(</span><span style="color:#FFAB70;">stream</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fp, </span><span style="color:#FFAB70;">title</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Test_Report_iTesting&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                               </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Below report show the results of auto run&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        runner.run(test_suites)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__author__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> HTMLTestRunner</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GenerateReport</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.strftime(</span><span style="color:#032F62;">&#39;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">-%H_%M&#39;</span><span style="color:#24292E;">, time.localtime(time.time()))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.report_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;test_report_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> now </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.html&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.dirname(os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> os.path.exists(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.report_name)):</span></span>
<span class="line"><span style="color:#24292E;">            os.remove(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.report_name))</span></span>
<span class="line"><span style="color:#24292E;">        fp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.report_name), </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        fp.close()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate_report</span><span style="color:#24292E;">(self, test_suites):</span></span>
<span class="line"><span style="color:#24292E;">        fp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.test_base, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.report_name), </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        runner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HTMLTestRunner.HTMLTestRunner(</span><span style="color:#E36209;">stream</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fp, </span><span style="color:#E36209;">title</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Test_Report_iTesting&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                               </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Below report show the results of auto run&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        runner.run(test_suites)</span></span></code></pre></div><p>GenerateReport 类有一个构造函数类 <strong>init</strong>.py，里面实现了 test 文件的建立。另外定义了一个 generate_report 的类方法，来运行并生成测试报告。</p><p>可以看到，在 html_reporter.py 中，我导入了 HTMLTestRunner，那么 HTMLTestRunner 模块是如何导入呢？一般情况下通过<a href="http://tungwaiyip.info/software/HTMLTestRunner.html" target="_blank" rel="noreferrer">tungwaiyip.info</a>下载即可。</p><p>但 HTMLTestRunner 下载后直接应用于 Python 3 会出现运行错误，所以我直接给你提供一个修复错误后的可用版本，你可以直接进入<a href="https://pan.baidu.com/s/1E4sPHHLOXwfxnY9cbNOyRA" target="_blank" rel="noreferrer">拉勾教育百度网盘</a>（提取码: y3dw）直接下载。</p><p>最后，我们需要改动下 main.py 的内容，使之应用 HTMLTestRunner 这个测试报告。更改后 main.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__author__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest,os</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> common.html_reporter </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> GenerateReport</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    suite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> unittest.defaultTestLoader.discover(os.path.join(os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">),</span><span style="color:#9ECBFF;">&quot;tests&quot;</span><span style="color:#E1E4E8;">),\\</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                </span><span style="color:#FFAB70;">pattern</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;*.py&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">top_level_dir</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    html_report </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerateReport()</span></span>
<span class="line"><span style="color:#E1E4E8;">    html_report.generate_report(suite)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__author__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest,os</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> common.html_reporter </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> GenerateReport</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    suite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> unittest.defaultTestLoader.discover(os.path.join(os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">),</span><span style="color:#032F62;">&quot;tests&quot;</span><span style="color:#24292E;">),\\</span></span>
<span class="line"><span style="color:#24292E;">                                                </span><span style="color:#E36209;">pattern</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;*.py&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">top_level_dir</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    html_report </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerateReport()</span></span>
<span class="line"><span style="color:#24292E;">    html_report.generate_report(suite)</span></span></code></pre></div><p>运行 main.py 文件，你将看到一个 html 格式的测试报告文件被生成了， 它的详细内容如下：</p>`,35),C=l(`<p>至此，我们的第一个 Web 自动化测试框架就优化得差不多了，但是请再次查看 test_baidu.py 这个文件，我们以这个文件里 test_baidu_search 这个类方法为例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(</span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results, </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">    driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(</span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results, </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span></code></pre></div><p>看看这个方法有哪些弊端：</p><ul><li><p>如果我元素定位改变了（对应例子里是&quot;kw&quot;改变），那么我是不是只能在这个代码文件里改啊？ 如果我有多个地方引用，我是不是就要改多遍呢？</p></li><li><p>看这个方法，元素定位、元素操作都是耦合在一起的，我是不是无法一眼就知道你在做什么操作啊？</p></li><li><p>如果我有别的测试要重用你这个方法怎么办？</p></li></ul><p>这些问题一抛出来，大家就知道，我们的框架还有待优化的部分，也有部分同学会猜出，这个就必须讲到 Page Object 了，而这个 Page Object 的详细用法，我将会在 <strong>&quot;10 | 如何使用 Page Object 设计模型？&quot;</strong> 中为你详细讲解。</p><p>另外unittest框架其实非常强大，它还可以做Mock，关于Mock的知识&quot;使用&quot;和&quot;自主实现&quot;，我将在后续的章节 <strong>&quot;20 | 告别依赖，Mock Server&quot;</strong> 必杀技中为你详细讲解。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>unittest 是 Python 里非常经典的测试框架，借助 unittest，你可以完成任何自动化测试框架的搭建。最近两个课时我们详细讲解了 unittest 这个框架，以及 Web 测试框架的搭建过程。</p><p>通过学习，你应该对 unittest 的原理、各个组成部分、详细语法、经典使用方式都了然于胸了，并且你应该能够按照我给的步骤，使用 unittest 一 步步搭建起你自己的 Web 测试框架了。</p><p>最后，希望大家能够多学多练，把本节课的代码实际操练一番，为下一课时 <strong>&quot;09 | 你的第一个 API 测试框架&quot;</strong> 做准备。有任何问题，欢迎你在评论区留言讨论。</p><hr><p>想要了解更多关于测试框架的介绍，你可关注我的公众号iTesting，回复&quot;测试框架&quot;查看。</p>`,12);function m(f,A,g,D,B,b){const a=e("Image");return t(),r("div",null,[y,E,p(a,{alt:"白底脑图.png",src:"https://s0.lgstatic.com/i/image/M00/5A/8A/CgqCHl94a_yAEfCPAADAcDmUSmw177.png"}),i,_,F,u,d,p(a,{alt:"Screen Shot 2020-09-03 at 11.53.46 PM.png",src:"https://s0.lgstatic.com/i/image/M00/5A/32/CgqCHl90JvqAJ9cEAAA0xAZJW7Y126.png"}),n(),h,p(a,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/5A/32/CgqCHl90J2KARHGLAABWO-bepxA434.png"}),C])}const T=o(c,[["render",m]]);export{v as __pageData,T as default};
