import{_ as n,j as e,o as t,g as r,k as l,h as p,s,Q as o}from"./chunks/framework.cfb14fe0.js";const C=JSON.parse('{"title":"06分布式系统中，如何回答锁的实现原理？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/架构设计面试精讲_文档/(6055) 06  分布式系统中，如何回答锁的实现原理？.md","filePath":"posts/backEnd/架构设计面试精讲_文档/(6055) 06  分布式系统中，如何回答锁的实现原理？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/架构设计面试精讲_文档/(6055) 06  分布式系统中，如何回答锁的实现原理？.md"},i=s("h1",{id:"_06分布式系统中-如何回答锁的实现原理",tabindex:"-1"},[p("06分布式系统中，如何回答锁的实现原理？ "),s("a",{class:"header-anchor",href:"#_06分布式系统中-如何回答锁的实现原理","aria-label":'Permalink to "06分布式系统中，如何回答锁的实现原理？"'},"​")],-1),E=s("p",null,"上一讲，我讲了分布系统的事务一致性，今天这一讲，我想带你了解分布式系统中与锁有关的面试问题。",-1),y=s("h3",{id:"案例背景",tabindex:"-1"},[p("案例背景 "),s("a",{class:"header-anchor",href:"#案例背景","aria-label":'Permalink to "案例背景"'},"​")],-1),d=s("p",null,"分布式锁是解决协调分布式系统之间，同步访问共享资源的一种方式。详细来讲：在分布式环境下，多个系统在同时操作共享资源（如写数据）时，发起操作的系统通常会通过一种方式去协调其他系统，然后获取访问权限，得到访问权限后才可以写入数据，其他系统必须等待权限释放。",-1),u=o('<br><p>分布式锁</p><p>我和其他的面试官交流后发现，很多面试官都会问候选人与分布式锁相关的问题，在一些细节上挖得还比较细。比如在分布式系统中涉及共享资源的访问，一些面试官会深挖如何控制并发访问共享资源；如何解决资源争抢等技术细节，这些问题在下单场景、优惠券场景都会被考察到，足以证明&quot;分布式锁&quot;考点的重要性。</p><p>那么假设你正在面试，面试官模拟了系统秒杀的场景：为了防止商品库存超售，在并发场景下用到了分布式锁的机制，做商品扣减库存的串行化操作。然后问你：&quot;你如何实现分布式锁？&quot;你该怎么回答呢？</p><h3 id="案例分析" tabindex="-1">案例分析 <a class="header-anchor" href="#案例分析" aria-label="Permalink to &quot;案例分析&quot;">​</a></h3><p>当你听到这个问题后，心里会不会窃喜？觉得这是一道送分题，因为可选方案有很多，比如：</p><ul><li><p>基于关系型数据库 MySQL 实现分布式锁；</p></li><li><p>基于分布式缓存 Redis 实现分布式锁；</p></li></ul><p>你从中选择一个熟悉的实现方式，然后和面试官展开拉锯式的问答环节。</p><blockquote><p>你：&quot;可以基于 Redis 的 setnx 命令来实现分布式锁。&quot;</p><p>面试官：&quot;当拿到锁的服务挂掉，如何防止死锁？&quot;</p><p>你：&quot;可以为锁设置一个过期时间。&quot;</p><p>面试官：&quot;那如何保证加锁和设置过期时间是原子操作？&quot;</p><p>......</p></blockquote><p>如果面试官觉得你回答问题的思路清晰有条理，给出的实现方案也可以落地，并且满足你的业务场景，那么他会认可你具备初中级研发工程师该具备的设计能力，但不要高兴得太早。</p><p>因为有些面试官会继续追问：&quot;分布式锁用 Zookeeper 实现行不行？&quot;，&quot;分布式锁用 etcd 实现行不行？&quot; 借机考察你对分布式协调组件的掌握。你可能会觉得开源组件那么多，自己不可能每一个都用过，答不出来也无妨。<strong>但面试官提问的重点不是停留在组件的使用上，而是你对分布式锁的原理问题的掌握程度。</strong></p><p>换句话说，&quot;如果让借助第三方组件，你怎么设计分布式锁？&quot; 这背后涉及了分布式锁的底层设计逻辑，是你需要掌握的。</p><p>02 讲我提到，在给出方案之前，你要明确待解决的问题点是什么。虽然你可以借助数据库 DB、Redis 和 ZooKeeper 等方式实现分布式锁，但要设计一个分布式锁，就需要明确分布式锁经常出现哪些问题，以及如何解决。</p><ul><li><p><strong>可用问题</strong>：无论何时都要保证锁服务的可用性（这是系统正常执行锁操作的基础）。</p></li><li><p><strong>死锁问题</strong>：客户端一定可以获得锁，即使锁住某个资源的客户端在释放锁之前崩溃或者网络不可达（这是避免死锁的设计原则）。</p></li><li><p><strong>脑裂问题</strong>：集群同步时产生的数据不一致，导致新的进程有可能拿到锁，但之前的进程以为自己还有锁，那么就出现两个进程拿到了同一个锁的问题。</p></li></ul><p>总的来说，设计分布式锁服务，至少要解决上面最核心的几个问题，才能评估锁的优劣，从问题本质来回答面试中的提问，以不变应万变。接下来，我就以开篇的 &quot;库存扣减&quot; 为例，带你了解分布式锁的常见实现方式、优缺点，以及方案背后的原理。</p><h3 id="案例解答" tabindex="-1">案例解答 <a class="header-anchor" href="#案例解答" aria-label="Permalink to &quot;案例解答&quot;">​</a></h3><h4 id="基于关系型数据库实现分布式锁" tabindex="-1">基于关系型数据库实现分布式锁 <a class="header-anchor" href="#基于关系型数据库实现分布式锁" aria-label="Permalink to &quot;基于关系型数据库实现分布式锁&quot;">​</a></h4><p>基于关系型数据库（如 MySQL） 来实现分布式锁是任何阶段的研发同学都需要掌握的，做法如下：先查询数据库是否存在记录，为了防止幻读取（幻读取：事务 A 按照一定条件进行数据读取，这期间事务 B 插入了相同搜索条件的新数据，事务 A 再次按照原先条件进行读取时，发现了事务 B 新插入的数据 ）通过数据库行锁 select for update 锁住这行数据，然后将查询和插入的 SQL 在同一个事务中提交。</p><p>以订单表为例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> order </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> order_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xxx </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">update</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> order </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> order_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xxx </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">update</span></span></code></pre></div><p>基于关系型数据库实现分布式锁比较简单，不过你要注意，基于 MySQL 行锁的方式会出现交叉死锁，比如事务 1 和事务 2 分别取得了记录 1 和记录 2 的排它锁，然后事务 1 又要取得记录 2 的排它锁，事务 2 也要获取记录 1 的排它锁，那这两个事务就会因为相互锁等待，产生死锁。</p>',21),_=o(`<p>数据库交叉死锁</p><p>当然，你可以通过&quot;超时控制&quot;解决交叉死锁的问题，但在高并发情况下，出现的大部分请求都会排队等待，所以&quot;基于关系型数据库实现分布式锁&quot;的方式在性能上存在缺陷，所以如果你回答&quot;基于关系型数据库 MySQL 实现分布式锁&quot;，通常会延伸出下面两个问题。</p><ul><li><strong>数据库的事务隔离级别</strong></li></ul><p>如果你想让系统支持海量并发，那数据库的并发处理能力就尤为重要，而影响数据库并发能力最重要的因素是<strong>数据库的事务隔离机制</strong>。</p><p>数据库的四种隔离级别从低到高分别是：</p><ul><li><p>读未提交（READ UNCOMMITTED）；</p></li><li><p>读已提交（READ COMMITTED）；</p></li><li><p>可重复读（REPEATABLE READ）；</p></li><li><p>可串行化（SERIALIZABLE）。</p></li></ul><p>其中，可串行化操作就是按照事务的先后顺序，排队执行，然而一个事务操作可能要执行很久才能完成，这就没有并发效率可言了，<strong>所以数据库隔离级别越高，系统的并发性能就越差。</strong></p><ul><li><strong>基于乐观锁的方式实现分布式锁</strong></li></ul><p>在数据库层面，select for update 是悲观锁，会一直阻塞直到事务提交，所以为了不产生锁等待而消耗资源，你可以基于乐观锁的方式来实现分布式锁，比如基于版本号的方式，首先在数据库增加一个 int 型字段 ver，然后在 SELECT 同时获取 ver 值，最后在 UPDATE 的时候检查 ver 值是否为与第 2 步或得到的版本值相同。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> 同时获取 ver 值</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> amount, old_ver </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> order </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> order_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">## </span><span style="color:#F97583;">UPDATE</span><span style="color:#E1E4E8;"> 的时候检查 ver 值是否与第 </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> 步获取到的值相同</span></span>
<span class="line"><span style="color:#F97583;">update</span><span style="color:#E1E4E8;"> order </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> ver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> old_ver </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, amount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> yyy </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> order_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xxx </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> ver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> old_ver</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> 同时获取 ver 值</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> amount, old_ver </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> order </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> order_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xxx</span></span>
<span class="line"><span style="color:#24292E;">## </span><span style="color:#D73A49;">UPDATE</span><span style="color:#24292E;"> 的时候检查 ver 值是否与第 </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> 步获取到的值相同</span></span>
<span class="line"><span style="color:#D73A49;">update</span><span style="color:#24292E;"> order </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> ver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> old_ver </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, amount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> yyy </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> order_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xxx </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> ver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> old_ver</span></span></code></pre></div><p>此时，如果更新结果的记录数为1，就表示成功，如果更新结果的记录数为 0，就表示已经被其他应用更新过了，需要做异常处理。</p><p>你可以看到，初中级的研发工程师除了要掌握如何基于关系型数据库实现分布式锁，还要提前掌握数据库隔离级别的相关知识点，以及锁机制，它们是 MySQL 知识体系的一环，我会在第 10 讲中帮你梳理&quot;如何回答 MySQL 的事务隔离级别和锁的机制？&quot;相关问题。</p><h4 id="基于分布式缓存实现分布式锁" tabindex="-1">基于分布式缓存实现分布式锁 <a class="header-anchor" href="#基于分布式缓存实现分布式锁" aria-label="Permalink to &quot;基于分布式缓存实现分布式锁&quot;">​</a></h4><p>我在开篇提到，因为数据库的性能限制了业务的并发量，所以针对&quot; 618 和双 11 大促&quot;等请求量剧增的场景，你要引入基于缓存的分布式锁，这个方案可以避免大量请求直接访问数据库，提高系统的响应能力。</p><p>基于缓存实现的分布式锁，就是将数据仅存放在系统的内存中，不写入磁盘，从而减少 I/O 读写。<strong>接下来，我以 Redis 为例讲解如何实现分布式锁。</strong></p><p>在加锁的过程中，实际上就是在给 Key 键设置一个值，为避免死锁，还要给 Key 键设置一个过期时间。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SET lock_key unique_value NX PX 10000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SET lock_key unique_value NX PX 10000</span></span></code></pre></div><ul><li><p>lock_key 就是 key 键；</p></li><li><p>unique_value 是客户端生成的唯一的标识；</p></li><li><p>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；</p></li><li><p>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。</p></li></ul><p>而解锁的过程就是将 lock_key 键删除，但不能乱删，要保证执行操作的客户端就是加锁的客户端。而这个时候， unique_value 的作用就体现出来，实现方式可以通过 lua 脚本判断 unique_value 是否为加锁客户端。</p><p>选用 Lua 脚本是为了保证解锁操作的原子性。因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">//</span><span style="color:#E1E4E8;"> 释放锁时，先比较 unique_value 是否相等，避免锁的误释放</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> redis.</span><span style="color:#79B8FF;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get&quot;</span><span style="color:#E1E4E8;">,KEYS[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> ARGV[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> redis.</span><span style="color:#79B8FF;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;del&quot;</span><span style="color:#E1E4E8;">,KEYS[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">//</span><span style="color:#24292E;"> 释放锁时，先比较 unique_value 是否相等，避免锁的误释放</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> redis.</span><span style="color:#005CC5;">call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">,KEYS[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ARGV[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redis.</span><span style="color:#005CC5;">call</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;del&quot;</span><span style="color:#24292E;">,KEYS[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span></code></pre></div><p>以上，就是基于 Redis 的 SET 命令和 Lua 脚本在 Redis 单节点上完成了分布式锁的加锁、解锁，不过在实际面试中，<strong>你不能仅停留在操作上，因为这并不能满足应对面试需要掌握的知识深度，</strong> 所以你还要清楚基于 Redis 实现分布式锁的优缺点；Redis 的超时时间设置问题；站在架构设计层面上 Redis 怎么解决集群情况下分布式锁的可靠性问题。</p><p>需要注意的是，你不用一股脑全部将其说出来，而是要做好准备，以便跟上面试官的思路，同频沟通。</p><ul><li><strong>基于 Redis 实现分布式锁的优缺点</strong></li></ul><p>基于数据库实现分布式锁的方案来说，基于缓存实现的分布式锁主要的优点主要有三点。</p><ol><li><p>性能高效（这是选择缓存实现分布式锁最核心的出发点）。</p></li><li><p>实现方便。很多研发工程师选择使用 Redis 来实现分布式锁，很大成分上是因为 Redis 提供了 setnx 方法，实现分布式锁很方便。但是需要注意的是，在 Redis2.6.12 的之前的版本中，由于加锁命令和设置锁过期时间命令是两个操作（不是原子性的），当出现某个线程操作完成 setnx 之后，还没有来得及设置过期时间，线程就挂掉了，就会导致当前线程设置 key 一直存在，后续的线程无法获取锁，最终造成死锁的问题，<strong>所以要选型 Redis 2.6.12 后的版本或通过 Lua 脚本执行加锁和设置超时时间</strong>（Redis 允许将 Lua 脚本传到 Redis 服务器中执行, 脚本中可以调用多条 Redis 命令，并且 Redis 保证脚本的原子性）。</p></li><li><p>避免单点故障（因为 Redis 是跨集群部署的，自然就避免了单点故障）。</p></li></ol><p>当然，基于 Redis 实现分布式锁也存在缺点，主要是不合理设置超时时间，以及 Redis 集群的数据同步机制，都会导致分布式锁的不可靠性。</p><ul><li><strong>如何合理设置超时时间</strong></li></ul><p>通过超时时间来控制锁的失效时间，不太靠谱，比如在有些场景中，一个线程 A 获取到了锁之后，由于业务代码执行时间可能比较长，导致超过了锁的超时时间，自动失效，后续线程 B 又意外的持有了锁，当线程 A 再次恢复后，通过 del 命令释放锁，就错误的将线程 B 中同样 key 的锁误删除了。</p>`,29),g=o('<p>锁超时导致的误操作</p><p>所以，如果锁的超时时间设置过长，会影响性能，如果设置的超时时间过短，有可能业务阻塞没有处理完成，<strong>能否合理设置超时时间，是基于缓存实现分布式锁很难解决的一个问题。</strong></p><p><strong>那么如何合理设置超时时间呢？</strong> 你可以基于续约的方式设置超时时间：先给锁设置一个超时时间，然后启动一个守护线程，让守护线程在一段时间后，重新设置这个锁的超时时间。实现方式就是：写一个守护线程，然后去判断锁的情况，当锁快失效的时候，再次进行续约加锁，当主线程执行完成后，销毁续约锁即可。</p><p>不过这种方式实现起来相对复杂，我建议你结合业务场景进行回答，所以针对超时时间的设置，要站在实际的业务场景中进行衡量。</p><ul><li><strong>Redis 如何解决集群情况下分布式锁的可靠性？</strong></li></ul><p>我在 03 讲中提到了，在回答基于 Redis 实现分布式锁时候，你需要具备的答题思路和扩展点。其中也提到了基于 Redis 集群节点实现分布式锁会存在高可用的问题。</p><blockquote><p>由于 Redis 集群数据同步到各个节点时是异步的，如果在 Redis 主节点获取到锁后，在没有同步到其他节点时，Redis 主节点宕机了，此时新的 Redis 主节点依然可以获取锁，所以多个应用服务就可以同时获取到锁。</p></blockquote><p>但 03 讲我没有说怎么解决这个问题，其实 Redis 官方已经设计了一个分布式锁算法 Redlock 解决了这个问题。</p><p>而如果你能基于 Redlock 原理回答出怎么解决 Redis 集群节点实现分布式锁的问题，会成为面试的加分项。<strong>那官方是怎么解决的呢？</strong></p><p>为了避免 Redis 实例故障导致锁无法工作的问题，Redis 的开发者 Antirez 设计了分布式锁算法 Redlock。Redlock 算法的基本思路，是让客户端和多个独立的 Redis 实例依次请求申请加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败。</p><p>这样一来，即使有某个 Redis 实例发生故障，因为锁的数据在其他实例上也有保存，所以客户端仍然可以正常地进行锁操作，锁的数据也不会丢失。<strong>那 Redlock 算法是如何做到的呢？</strong></p><p><strong>我们假设目前有 N 个独立的 Redis 实例，</strong> 客户端先按顺序依次向 N 个 Redis 实例执行加锁操作。这里的加锁操作和在单实例上执行的加锁操作一样，但是需要注意的是，Redlock 算法设置了加锁的超时时间，为了避免因为某个 Redis 实例发生故障而一直等待的情况。</p><p>当客户端完成了和所有 Redis 实例的加锁操作之后，如果有超过半数的 Redis 实例成功的获取到了锁，并且总耗时没有超过锁的有效时间，那么就是加锁成功。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在课程的最后，我们总结一下，分布式锁是解决多个进程同时访问临界资源的常用方法，在分布式系统中非常普遍，常见的实现方式是基于数据库，基于 Redis。在同等服务器配置下，Redis 的性能是最好的，数据库最差。</p><p>但是在面试时，你要分清楚面试官的考查点，并结合工作中的业务场景给出答案，面试官不侧重你是否能很快地给出结果，而是你思考的过程。</p><p>对于分布式锁，<strong>你要从&quot;解决可用性、死锁、脑裂&quot;等问题为出发点来展开回答各分布式锁的实现方案的优缺点和适用场景。</strong> 另外，在设计分布式锁的时候，为了解决可用性、死锁、脑裂等问题，一般还会再考虑一下锁的四种设计原则。</p><ul><li><p><strong>互斥性</strong>：即在分布式系统环境下，对于某一共享资源，需要保证在同一时间只能一个线程或进程对该资源进行操作。</p></li><li><p><strong>高可用</strong>：也就是可靠性，锁服务不能有单点风险，要保证分布式锁系统是集群的，并且某一台机器锁不能提供服务了，其他机器仍然可以提供锁服务。</p></li><li><p><strong>锁释放</strong>：具备锁失效机制，防止死锁。即使出现进程在持有锁的期间崩溃或者解锁失败的情况，也能被动解锁，保证后续其他进程可以获得锁。</p></li><li><p><strong>可重入</strong>：一个节点获取了锁之后，还可以再次获取整个锁资源。</p></li></ul><p>最后，留一道思考题：我在本讲文中并没有介绍基于 Zookeeper 实现分布式锁的方式，按照今天讲的评估一个分布式锁的方式，基于 Zookeeper 是如何设计和解决的呢？它的优缺点是什么。欢迎你在留言区分享你的观点，我们下一讲见。</p>',19);function h(q,A,k,R,F,v){const a=e("Image");return t(),r("div",null,[i,E,y,d,l(a,{alt:"22.png",src:"https://s0.lgstatic.com/i/image/M00/8D/67/CgqCHl_-esuAcq7vAAFRjfl0DJE878.png"}),p(),u,l(a,{alt:"23.png",src:"https://s0.lgstatic.com/i/image/M00/8D/5C/Ciqc1F_-euqAGDKSAAMBFlwOlu0123.png"}),p(),_,l(a,{alt:"24.png",src:"https://s0.lgstatic.com/i/image2/M01/05/43/Cip5yF_-ewGAUSb5AAFrhs6QnWo499.png"}),p(),g])}const m=n(c,[["render",h]]);export{C as __pageData,m as default};
