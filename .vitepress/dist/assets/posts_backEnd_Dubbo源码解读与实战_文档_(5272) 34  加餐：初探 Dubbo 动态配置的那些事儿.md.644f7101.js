import{_ as p,j as e,o as r,g as t,k as a,h as l,Q as o,s}from"./chunks/framework.e0c66c3f.js";const v=JSON.parse('{"title":"基础协议 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5272) 34  加餐：初探 Dubbo 动态配置的那些事儿.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5272) 34  加餐：初探 Dubbo 动态配置的那些事儿.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(5272) 34  加餐：初探 Dubbo 动态配置的那些事儿.md"},E=o(`<p>在前面第 31 课时中我们详细讲解了 RegistryDirectory 相关的内容，作为一个 NotifyListener 监听器，RegistryDirectory 会同时监听注册中心的 providers、routers 和 configurators 三个目录。通过 RegistryDirectory 处理 configurators 目录的逻辑，我们了解到 configurators 目录中动态添加的 URL 会覆盖 providers 目录下注册的 Provider URL，Dubbo 还会按照 configurators 目录下的最新配置，重新创建 Invoker 对象（同时会销毁原来的 Invoker 对象）。</p><p>在老版本的 Dubbo 中，我们可以通过服务治理控制台向注册中心的 configurators 目录写入动态配置的 URL。在 Dubbo 2.7.x 版本中，动态配置信息除了可以写入注册中心的 configurators 目录之外，还可以写入外部的配置中心，这部分内容我们将在后面的课时详细介绍，今天这一课时我们重点来看<strong>写入注册中心的动态配置。</strong></p><p>首先，我们需要了解一下 configurators 目录中 URL 都有哪些协议以及这些协议的含义，然后还要知道 Dubbo 是如何解析这些 URL 得到 Configurator 对象的，以及 Configurator 是如何与已有的 Provider URL 共同作用得到实现动态更新配置的效果。</p><h3 id="基础协议" tabindex="-1">基础协议 <a class="header-anchor" href="#基础协议" aria-label="Permalink to &quot;基础协议&quot;">​</a></h3><p>首先，我们需要了解<strong>写入注册中心 configurators 中的动态配置有 override 和 absent 两种协议</strong>。下面是一个 override 协议的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">override</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//0.0.0.0/org.apache.dubbo.demo.DemoService?category=configurators&amp;dynamic=false&amp;enabled=true&amp;application=dubbo-demo-api-consumer&amp;timeout=1000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">override</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//0.0.0.0/org.apache.dubbo.demo.DemoService?category=configurators&amp;dynamic=false&amp;enabled=true&amp;application=dubbo-demo-api-consumer&amp;timeout=1000</span></span></code></pre></div><p>那这个 URL 中各个部分的含义是怎样的呢？下面我们就一个一个来分析下。</p><ul><li><p>override，表示采用覆盖方式。Dubbo 支持 override 和 absent 两种协议，我们也可以通过 SPI 的方式进行扩展。</p></li><li><p>0.0.0.0，表示对所有 IP 生效。如果只想覆盖某个特定 IP 的 Provider 配置，可以使用该 Provider 的具体 IP。</p></li><li><p>org.apache.dubbo.demo.DemoService，表示只对指定服务生效。</p></li><li><p>category=configurators，表示该 URL 为动态配置类型。</p></li><li><p>dynamic=false，表示该 URL 为持久数据，即使注册该 URL 的节点退出，该 URL 依旧会保存在注册中心。</p></li><li><p>enabled=true，表示该 URL 的覆盖规则已生效。</p></li><li><p>application=dubbo-demo-api-consumer，表示只对指定应用生效。如果不指定，则默认表示对所有应用都生效。</p></li><li><p>timeout=1000，表示将满足以上条件 Provider URL 中的 timeout 参数值覆盖为 1000。如果想覆盖其他配置，可以直接以参数的形式添加到 override URL 之上。</p></li></ul><p>在 Dubbo 的官网中，还提供了一些简单示例，我们这里也简单解读一下。</p><ul><li>禁用某个 Provider，通常用于临时剔除某个 Provider 节点：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">override</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;disabled=true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">override</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;disabled=true</span></span></code></pre></div><ul><li>调整某个 Provider 的权重为 200：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">override</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;weight=200</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">override</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;weight=200</span></span></code></pre></div><ul><li>调整负载均衡策略为 LeastActiveLoadBalance（负载均衡的内容会在下一课时详细介绍）：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">override</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;loadbalance=leastactive</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">override</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;loadbalance=leastactive</span></span></code></pre></div><ul><li>服务降级，通常用于临时屏蔽某个出错的非关键服务（mock 机制的具体实现我们会在后面的课时详细介绍）：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">override</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">override</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null</span></span></code></pre></div><h3 id="configurator" tabindex="-1">Configurator <a class="header-anchor" href="#configurator" aria-label="Permalink to &quot;Configurator&quot;">​</a></h3><p>当我们在注册中心的 configurators 目录中添加 override（或 absent）协议的 URL 时，Registry 会收到注册中心的通知，回调注册在其上的 NotifyListener，其中就包括 RegistryDirectory。我们在第 31 课时中已经详细分析了 RegistryDirectory.notify() 处理 providers、configurators 和 routers 目录变更的流程，其中 configurators 目录下 URL 会被解析成 Configurator 对象。</p><p>Configurator 接口抽象了一条配置信息，同时提供了将配置 URL 解析成 Configurator 对象的工具方法。Configurator 接口具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configurator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Comparable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Configurator</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取该Configurator对象对应的配置URL，例如前文介绍的override协议URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// configure()方法接收的参数是原始URL，返回经过Configurator修改后的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    URL </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// toConfigurators()工具方法可以将多个配置URL对象解析成相应的Configurator对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Optional&lt;List&lt;</span><span style="color:#F97583;">Configurator</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">toConfigurators</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">urls</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ConfiguratorFactory适配器</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfiguratorFactory configuratorFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(ConfiguratorFactory.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getAdaptiveExtension</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Configurator</span><span style="color:#E1E4E8;">&gt; configurators </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(urls.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 记录解析的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (URL url </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> urls) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 遇到empty协议，直接清空configurators集合，结束解析，返回空集合</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (EMPTY_PROTOCOL.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getProtocol</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                configurators.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; override </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(url.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            override.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(ANYHOST_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (override.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 如果该配置URL没有携带任何参数，则跳过该URL</span></span>
<span class="line"><span style="color:#E1E4E8;">                configurators.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 通过ConfiguratorFactory适配器选择合适ConfiguratorFactory扩展，并创建Configurator对象</span></span>
<span class="line"><span style="color:#E1E4E8;">          configurators.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(configuratorFactory.</span><span style="color:#B392F0;">getConfigurator</span><span style="color:#E1E4E8;">(url));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collections.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(configurators); </span><span style="color:#6A737D;">// 排序</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(configurators);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 排序首先按照ip进行排序，所有ip的优先级都高于0.0.0.0，当ip相同时，会按照priority参数值进行排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(Configurator </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (o </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ipCompare </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(o.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ipCompare </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(PRIORITY_KEY, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> o.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(PRIORITY_KEY, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(i, j);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ipCompare;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configurator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Configurator</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取该Configurator对象对应的配置URL，例如前文介绍的override协议URL</span></span>
<span class="line"><span style="color:#24292E;">    URL </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// configure()方法接收的参数是原始URL，返回经过Configurator修改后的URL</span></span>
<span class="line"><span style="color:#24292E;">    URL </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// toConfigurators()工具方法可以将多个配置URL对象解析成相应的Configurator对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Optional&lt;List&lt;</span><span style="color:#D73A49;">Configurator</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">toConfigurators</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">urls</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ConfiguratorFactory适配器</span></span>
<span class="line"><span style="color:#24292E;">        ConfiguratorFactory configuratorFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(ConfiguratorFactory.class)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getAdaptiveExtension</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Configurator</span><span style="color:#24292E;">&gt; configurators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(urls.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 记录解析的结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (URL url </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> urls) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 遇到empty协议，直接清空configurators集合，结束解析，返回空集合</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (EMPTY_PROTOCOL.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getProtocol</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                configurators.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; override </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(url.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            override.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(ANYHOST_KEY);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (override.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果该配置URL没有携带任何参数，则跳过该URL</span></span>
<span class="line"><span style="color:#24292E;">                configurators.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 通过ConfiguratorFactory适配器选择合适ConfiguratorFactory扩展，并创建Configurator对象</span></span>
<span class="line"><span style="color:#24292E;">          configurators.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(configuratorFactory.</span><span style="color:#6F42C1;">getConfigurator</span><span style="color:#24292E;">(url));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(configurators); </span><span style="color:#6A737D;">// 排序</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(configurators);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 排序首先按照ip进行排序，所有ip的优先级都高于0.0.0.0，当ip相同时，会按照priority参数值进行排序</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Configurator </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ipCompare </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(o.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ipCompare </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(PRIORITY_KEY, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> o.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(PRIORITY_KEY, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(i, j);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ipCompare;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>ConfiguratorFactory 接口是一个扩展接口，Dubbo 提供了两个实现类，如下图所示：</p>`,22),y=s("p",null,"ConfiguratorFactory 继承关系图",-1),i=s("p",null,"其中，OverrideConfiguratorFactory 对应的扩展名为 override，创建的 Configurator 实现是 OverrideConfigurator；AbsentConfiguratorFactory 对应的扩展名是 absent，创建的 Configurator 实现类是 AbsentConfigurator。",-1),u=s("p",null,"Configurator 接口的继承关系如下图所示：",-1),g=o(`<p>Configurator 继承关系图</p><p>其中，AbstractConfigurator 中维护了一个 configuratorUrl 字段，记录了完整的配置 URL。<strong>AbstractConfigurator 是一个模板类，其核心实现是 configure() 方法</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> URL </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里会根据配置URL的enabled参数以及host决定该URL是否可用，同时还会根据原始URL是否为空以及原始URL的host是否为空，决定当前是否执行后续覆盖逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">configuratorUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(ENABLED_KEY, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 针对2.7.0之后版本，这里添加了一个configVersion参数作为区分</span></span>
<span class="line"><span style="color:#E1E4E8;">    String apiVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(CONFIG_VERSION_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(apiVersion)) { </span><span style="color:#6A737D;">// 对2.7.0之后版本的配置处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        String currentSide </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String configuratorSide </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据配置URL中的side参数以及原始URL中的side参数值进行匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentSide.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(configuratorSide) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> CONSUMER.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(configuratorSide) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureIfMatch</span><span style="color:#E1E4E8;">(NetUtils.</span><span style="color:#B392F0;">getLocalHost</span><span style="color:#E1E4E8;">(), url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentSide.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(configuratorSide) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> PROVIDER.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(configuratorSide) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureIfMatch</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">(), url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 2.7.0版本之前对配置的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureDeprecated</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> URL </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里会根据配置URL的enabled参数以及host决定该URL是否可用，同时还会根据原始URL是否为空以及原始URL的host是否为空，决定当前是否执行后续覆盖逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">configuratorUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(ENABLED_KEY, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 针对2.7.0之后版本，这里添加了一个configVersion参数作为区分</span></span>
<span class="line"><span style="color:#24292E;">    String apiVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(CONFIG_VERSION_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(apiVersion)) { </span><span style="color:#6A737D;">// 对2.7.0之后版本的配置处理</span></span>
<span class="line"><span style="color:#24292E;">        String currentSide </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">        String configuratorSide </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据配置URL中的side参数以及原始URL中的side参数值进行匹配</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentSide.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(configuratorSide) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> CONSUMER.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(configuratorSide) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureIfMatch</span><span style="color:#24292E;">(NetUtils.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">(), url);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentSide.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(configuratorSide) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> PROVIDER.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(configuratorSide) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureIfMatch</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">(), url);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 2.7.0版本之前对配置的处理</span></span>
<span class="line"><span style="color:#24292E;">        url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureDeprecated</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们需要关注下<strong>configureDeprecated() 方法对历史版本的兼容</strong>，其实这也是对注册中心 configurators 目录下配置 URL 的处理，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> URL </span><span style="color:#B392F0;">configureDeprecated</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果配置URL中的端口不为空，则是针对Provider的，需要判断原始URL的端口，两者端口相同，才能执行configureIfMatch()方法中的配置方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (configuratorUrl.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureIfMatch</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">(), url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果没有指定端口，则该配置URL要么是针对Consumer的，要么是针对任意URL的（即host为0.0.0.0）</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果原始URL属于Consumer，则使用Consumer的host进行匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SIDE_KEY, PROVIDER).</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(CONSUMER)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureIfMatch</span><span style="color:#E1E4E8;">(NetUtils.</span><span style="color:#B392F0;">getLocalHost</span><span style="color:#E1E4E8;">(), url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SIDE_KEY, CONSUMER).</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(PROVIDER)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果是Provider URL，则用0.0.0.0来配置</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureIfMatch</span><span style="color:#E1E4E8;">(ANYHOST_VALUE, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> URL </span><span style="color:#6F42C1;">configureDeprecated</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果配置URL中的端口不为空，则是针对Provider的，需要判断原始URL的端口，两者端口相同，才能执行configureIfMatch()方法中的配置方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (configuratorUrl.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (url.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureIfMatch</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">(), url);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果没有指定端口，则该配置URL要么是针对Consumer的，要么是针对任意URL的（即host为0.0.0.0）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果原始URL属于Consumer，则使用Consumer的host进行匹配</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SIDE_KEY, PROVIDER).</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(CONSUMER)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureIfMatch</span><span style="color:#24292E;">(NetUtils.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">(), url);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SIDE_KEY, CONSUMER).</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(PROVIDER)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果是Provider URL，则用0.0.0.0来配置</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureIfMatch</span><span style="color:#24292E;">(ANYHOST_VALUE, url);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>configureIfMatch() 方法会排除匹配 URL 中不可动态修改的参数，并调用 Configurator 子类的 doConfigurator() 方法重写原始 URL，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> URL </span><span style="color:#B392F0;">configureIfMatch</span><span style="color:#E1E4E8;">(String host, URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ANYHOST_VALUE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(configuratorUrl.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> host.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(configuratorUrl.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">())) { </span><span style="color:#6A737D;">// 匹配host</span></span>
<span class="line"><span style="color:#E1E4E8;">        String providers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(OVERRIDE_PROVIDERS_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(providers) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> providers.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> providers.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(ANYHOST_VALUE)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            String configApplication </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(APPLICATION_KEY,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    configuratorUrl.</span><span style="color:#B392F0;">getUsername</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            String currentApplication </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(APPLICATION_KEY, url.</span><span style="color:#B392F0;">getUsername</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (configApplication </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ANY_VALUE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(configApplication)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> configApplication.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(currentApplication)) { </span><span style="color:#6A737D;">// 匹配application</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 排除不能动态修改的属性，其中包括category、check、dynamic、enabled还有以~开头的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">                Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; conditionKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(CATEGORY_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Constants.CHECK_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(DYNAMIC_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(ENABLED_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(GROUP_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(VERSION_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(APPLICATION_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(CONFIG_VERSION_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(COMPATIBLE_CONFIG_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">                conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(INTERFACES);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> configuratorUrl.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;~&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> APPLICATION_KEY.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> SIDE_KEY.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        conditionKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 如果配置URL与原URL中以~开头的参数值不相同，则不使用该配置URL重写原URL</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ANY_VALUE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">value.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(key.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;~&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> key))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 移除配置URL不支持动态配置的参数之后，调用Configurator子类的doConfigure方法重新生成URL</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doConfigure</span><span style="color:#E1E4E8;">(url, configuratorUrl.</span><span style="color:#B392F0;">removeParameters</span><span style="color:#E1E4E8;">(conditionKeys));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> URL </span><span style="color:#6F42C1;">configureIfMatch</span><span style="color:#24292E;">(String host, URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ANYHOST_VALUE.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(configuratorUrl.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> host.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(configuratorUrl.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">())) { </span><span style="color:#6A737D;">// 匹配host</span></span>
<span class="line"><span style="color:#24292E;">        String providers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(OVERRIDE_PROVIDERS_KEY);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(providers) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> providers.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> providers.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(ANYHOST_VALUE)) { </span></span>
<span class="line"><span style="color:#24292E;">            String configApplication </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(APPLICATION_KEY,</span></span>
<span class="line"><span style="color:#24292E;">                    configuratorUrl.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            String currentApplication </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(APPLICATION_KEY, url.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (configApplication </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ANY_VALUE.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(configApplication)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> configApplication.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(currentApplication)) { </span><span style="color:#6A737D;">// 匹配application</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 排除不能动态修改的属性，其中包括category、check、dynamic、enabled还有以~开头的属性</span></span>
<span class="line"><span style="color:#24292E;">                Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; conditionKeys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(CATEGORY_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Constants.CHECK_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(DYNAMIC_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(ENABLED_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(GROUP_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(VERSION_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(APPLICATION_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(CONFIG_VERSION_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(COMPATIBLE_CONFIG_KEY);</span></span>
<span class="line"><span style="color:#24292E;">                conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(INTERFACES);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> configuratorUrl.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;~&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> APPLICATION_KEY.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(key) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> SIDE_KEY.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">                        conditionKeys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 如果配置URL与原URL中以~开头的参数值不相同，则不使用该配置URL重写原URL</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ANY_VALUE.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">value.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;~&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> key))) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 移除配置URL不支持动态配置的参数之后，调用Configurator子类的doConfigure方法重新生成URL</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doConfigure</span><span style="color:#24292E;">(url, configuratorUrl.</span><span style="color:#6F42C1;">removeParameters</span><span style="color:#24292E;">(conditionKeys));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们再反过来仔细审视一下 AbstractConfigurator.configure() 方法中针对 2.7.0 版本之后动态配置的处理，其中会根据 side 参数明确判断配置 URL 和原始 URL 属于 Consumer 端还是 Provider 端，判断逻辑也更加清晰。匹配之后的具体替换过程同样是调用 configureIfMatch() 方法实现的，这里不再重复。</p><p>Configurator 的两个子类实现非常简单。在 OverrideConfigurator 的 doConfigure() 方法中，会直接用配置 URL 中剩余的全部参数，覆盖原始 URL 中的相应参数，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> URL </span><span style="color:#B392F0;">doConfigure</span><span style="color:#E1E4E8;">(URL currentUrl, URL configUrl) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 直接调用addParameters()方法，进行覆盖</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> currentUrl.</span><span style="color:#B392F0;">addParameters</span><span style="color:#E1E4E8;">(configUrl.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> URL </span><span style="color:#6F42C1;">doConfigure</span><span style="color:#24292E;">(URL currentUrl, URL configUrl) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 直接调用addParameters()方法，进行覆盖</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> currentUrl.</span><span style="color:#6F42C1;">addParameters</span><span style="color:#24292E;">(configUrl.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 AbsentConfigurator 的 doConfigure() 方法中，会尝试用配置 URL 中的参数添加到原始 URL 中，如果原始 URL 中已经有了该参数是不会被覆盖的，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> URL </span><span style="color:#B392F0;">doConfigure</span><span style="color:#E1E4E8;">(URL currentUrl, URL configUrl) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 直接调用addParametersIfAbsent()方法尝试添加参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> currentUrl.</span><span style="color:#B392F0;">addParametersIfAbsent</span><span style="color:#E1E4E8;">(configUrl.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> URL </span><span style="color:#6F42C1;">doConfigure</span><span style="color:#24292E;">(URL currentUrl, URL configUrl) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 直接调用addParametersIfAbsent()方法尝试添加参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> currentUrl.</span><span style="color:#6F42C1;">addParametersIfAbsent</span><span style="color:#24292E;">(configUrl.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，Dubbo 2.7.0 版本之前的<strong>动态配置核心实现</strong>就介绍完了，其中我们也简单涉及了 Dubbo 2.7.0 版本之后一些逻辑，只不过没有全面介绍 Dubbo 2.7.0 之后的配置格式以及核心处理逻辑，不用担心，这些内容我们将会在后面的&quot;配置中心&quot;章节继续深入分析。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们主要介绍了 Dubbo 中配置相关的实现。我们首先通过示例分析了 configurators 目录中涉及的 override 协议 URL、absent 协议 URL 的格式以及各个参数的含义，然后还详细讲解了 Dubbo 解析 configurator URL 得到的 Configurator 对象，以及 Configurator 覆盖 Provider URL 各个参数的具体实现。</p><p>下一课时，我们将开始介绍 Cluster 层中负载均衡的相关内容，记得按时来听课。</p>`,16);function F(d,f,C,A,D,U){const n=e("Image");return r(),t("div",null,[E,a(n,{alt:"Lark20201120-160501.png",src:"https://s0.lgstatic.com/i/image/M00/6F/F4/CgqCHl-3eLqAL0VKAAGW_mZ-1yE800.png"}),l(),y,i,u,a(n,{alt:"Lark20201120-160505.png",src:"https://s0.lgstatic.com/i/image/M00/6F/E9/Ciqc1F-3eMCAP6pVAAGo31X0Wd8652.png"}),l(),g])}const R=p(c,[["render",F]]);export{v as __pageData,R as default};
