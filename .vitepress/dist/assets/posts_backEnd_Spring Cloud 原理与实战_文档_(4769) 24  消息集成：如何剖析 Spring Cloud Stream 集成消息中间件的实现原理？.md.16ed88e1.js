import{_ as l,j as o,o as e,h as t,k as a,f as p,Q as s}from"./chunks/framework.d3daa342.js";const h=JSON.parse('{"title":"24消息集成：如何剖析SpringCloudStream集成消息中间件的实现原理？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4769) 24  消息集成：如何剖析 Spring Cloud Stream 集成消息中间件的实现原理？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4769) 24  消息集成：如何剖析 Spring Cloud Stream 集成消息中间件的实现原理？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4769) 24  消息集成：如何剖析 Spring Cloud Stream 集成消息中间件的实现原理？.md"},c=s(`<h1 id="_24消息集成-如何剖析springcloudstream集成消息中间件的实现原理" tabindex="-1">24消息集成：如何剖析SpringCloudStream集成消息中间件的实现原理？ <a class="header-anchor" href="#_24消息集成-如何剖析springcloudstream集成消息中间件的实现原理" aria-label="Permalink to &quot;24消息集成：如何剖析SpringCloudStream集成消息中间件的实现原理？&quot;">​</a></h1><p>Spring Cloud Stream 中的内容比较多，今天我们重点关注的是如何实现 Spring Cloud Stream 与其他消息中间件的整合过程，因此只介绍消息发送和接收的主流程。我们将分别从<strong>Spring Cloud Stream</strong> 以及<strong>消息中间件</strong>的角度出发，分析如何基于这一主流程，完成两者之间的无缝集成。</p><h3 id="spring-cloud-stream-中的-binder" tabindex="-1">Spring Cloud Stream 中的 Binder <a class="header-anchor" href="#spring-cloud-stream-中的-binder" aria-label="Permalink to &quot;Spring Cloud Stream 中的 Binder&quot;">​</a></h3><p>通过前面几个课时的介绍，我们明确了 Binder 组件是 Spring Cloud Stream 与各种消息中间件进行集成的核心组件，而 Binder 组件的实现过程涉及一批核心类之间的相互协作。接下来，我们就对 Binder 相关的核心类做源码级的展开。</p><h4 id="bindableproxyfactory" tabindex="-1">BindableProxyFactory <a class="header-anchor" href="#bindableproxyfactory" aria-label="Permalink to &quot;BindableProxyFactory&quot;">​</a></h4><p>我们知道在发送和接收消息时，需要使用 @EnableBinding 注解，该注解的作用就是告诉 Spring Cloud Stream 将该应用程序绑定到消息中间件，从而实现两者之间的连接。我们来到 org.springframework.cloud.stream.binding 包下的 BindableProxyFactory 类。根据该类上的注释，BindableProxyFactory 是用于初始化由 @EnableBinding 注解所提供接口的工厂类，该类的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindableProxyFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodInterceptor</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">FactoryBean</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">Bindable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">InitializingBean</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindableProxyFactory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodInterceptor</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">FactoryBean</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">Bindable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">InitializingBean</span></span></code></pre></div><p>注意到 BindableProxyFactory 同时实现了 MethodInterceptor 接口和 Bindable 接口。其中前者是 AOP 中的方法拦截器，而后者是一个标明能够绑定 Input 和 Output 的接口。我们先来看 MethodInterceptor 中用于拦截的 invoke 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(MethodInvocation invocation) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Method method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invocation.</span><span style="color:#B392F0;">getMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Object boundTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> targetCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(method);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (boundTarget </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> boundTarget;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Input input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AnnotationUtils.</span><span style="color:#B392F0;">findAnnotation</span><span style="color:#E1E4E8;">(method, Input.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (input </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BindingBeanDefinitionRegistryUtils.</span><span style="color:#B392F0;">getBindingTargetName</span><span style="color:#E1E4E8;">(input, method);</span></span>
<span class="line"><span style="color:#E1E4E8;">            boundTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.inputHolders.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(name).</span><span style="color:#B392F0;">getBoundTarget</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            targetCache.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(method, boundTarget);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> boundTarget;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Output output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AnnotationUtils.</span><span style="color:#B392F0;">findAnnotation</span><span style="color:#E1E4E8;">(method, Output.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (output </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BindingBeanDefinitionRegistryUtils.</span><span style="color:#B392F0;">getBindingTargetName</span><span style="color:#E1E4E8;">(output, method);</span></span>
<span class="line"><span style="color:#E1E4E8;">                boundTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputHolders.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(name).</span><span style="color:#B392F0;">getBoundTarget</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                targetCache.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(method, boundTarget);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> boundTarget;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(MethodInvocation invocation) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invocation.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Object boundTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> targetCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(method);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (boundTarget </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> boundTarget;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Input input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AnnotationUtils.</span><span style="color:#6F42C1;">findAnnotation</span><span style="color:#24292E;">(method, Input.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (input </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BindingBeanDefinitionRegistryUtils.</span><span style="color:#6F42C1;">getBindingTargetName</span><span style="color:#24292E;">(input, method);</span></span>
<span class="line"><span style="color:#24292E;">            boundTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.inputHolders.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">getBoundTarget</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            targetCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(method, boundTarget);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> boundTarget;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Output output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AnnotationUtils.</span><span style="color:#6F42C1;">findAnnotation</span><span style="color:#24292E;">(method, Output.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (output </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BindingBeanDefinitionRegistryUtils.</span><span style="color:#6F42C1;">getBindingTargetName</span><span style="color:#24292E;">(output, method);</span></span>
<span class="line"><span style="color:#24292E;">                boundTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.outputHolders.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">getBoundTarget</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                targetCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(method, boundTarget);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> boundTarget;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的逻辑比较简单，可以看到 BindableProxyFactory 保存了一个缓存对象 targetCache。如果所调用方法已经存在于缓存中，则直接返回目标对象。反之，会根据 @Input 和 @Output 注解从 inputHolders 和 outputHolders 中获取对应的目标对象并放入缓存中。这里使用缓存的作用仅仅是为了加快每次方法调用的速度，而系统在初始化时通过重写 afterPropertiesSet 方法，已经将所有的目标对象都放置在 inputHolders 和 outputHolders 这两个集合中。至于这里提到的这个目标对象，暂时可以把它理解为就是一种 MessageChannel 对象，后面会对其进行展开。</p><p>然后我们来看 Bindable 接口的定义，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bindable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Collection&lt;Binding&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">createAndBindInputs</span><span style="color:#E1E4E8;">(BindingService </span><span style="color:#FFAB70;">adapter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindOutputs</span><span style="color:#E1E4E8;">(BindingService </span><span style="color:#FFAB70;">adapter</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unbindInputs</span><span style="color:#E1E4E8;">(BindingService </span><span style="color:#FFAB70;">adapter</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unbindOutputs</span><span style="color:#E1E4E8;">(BindingService </span><span style="color:#FFAB70;">adapter</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInputs</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptySet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getOutputs</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptySet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bindable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Collection&lt;Binding&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">createAndBindInputs</span><span style="color:#24292E;">(BindingService </span><span style="color:#E36209;">adapter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindOutputs</span><span style="color:#24292E;">(BindingService </span><span style="color:#E36209;">adapter</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unbindInputs</span><span style="color:#24292E;">(BindingService </span><span style="color:#E36209;">adapter</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unbindOutputs</span><span style="color:#24292E;">(BindingService </span><span style="color:#E36209;">adapter</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInputs</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptySet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getOutputs</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptySet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这个接口提供了对 Input 和 Output 的绑定和解绑操作。在 BindableProxyFactory 中，对以上几个方法的实现过程基本都类似，我们随机挑选一个 bindOutputs 方法进行展开，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindOutputs</span><span style="color:#E1E4E8;">(BindingService bindingService) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">BoundTargetHolder</span><span style="color:#E1E4E8;">&gt; boundTargetHolderEntry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputHolders.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            BoundTargetHolder boundTargetHolder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> boundTargetHolderEntry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String outputTargetName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> boundTargetHolderEntry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (boundTargetHolderEntry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isBindable</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (log.</span><span style="color:#B392F0;">isDebugEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    log.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Binding %s:%s:%s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.namespace, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.type, outputTargetName));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                bindingService.</span><span style="color:#B392F0;">bindProducer</span><span style="color:#E1E4E8;">(boundTargetHolder.</span><span style="color:#B392F0;">getBoundTarget</span><span style="color:#E1E4E8;">(), outputTargetName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindOutputs</span><span style="color:#24292E;">(BindingService bindingService) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">BoundTargetHolder</span><span style="color:#24292E;">&gt; boundTargetHolderEntry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.outputHolders.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            BoundTargetHolder boundTargetHolder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boundTargetHolderEntry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String outputTargetName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boundTargetHolderEntry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (boundTargetHolderEntry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isBindable</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (log.</span><span style="color:#6F42C1;">isDebugEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    log.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Binding %s:%s:%s&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.namespace, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.type, outputTargetName));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                bindingService.</span><span style="color:#6F42C1;">bindProducer</span><span style="color:#24292E;">(boundTargetHolder.</span><span style="color:#6F42C1;">getBoundTarget</span><span style="color:#24292E;">(), outputTargetName);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要引入另一个重要的工具类 BindingService，该类提供了对 Input 和 Output 目标对象进行绑定的能力。但事实上，通过类上的注释可以看到，这也是一个外观类，它将底层的绑定动作委托给了 Binder。我们以绑定生产者的 bindProducer 方法为例展开讨论，该方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindProducer</span><span style="color:#E1E4E8;">(T output, String outputName) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String bindingTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.bindingServiceProperties</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getBindingDestination</span><span style="color:#E1E4E8;">(outputName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Binder&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ProducerProperties</span><span style="color:#E1E4E8;">&gt; binder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Binder</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, ProducerProperties</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">getBinder</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                outputName, output.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        ProducerProperties producerProperties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.bindingServiceProperties</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getProducerProperties</span><span style="color:#E1E4E8;">(outputName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (binder </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ExtendedPropertiesBinder) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object extension </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((ExtendedPropertiesBinder) binder)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">getExtendedProducerProperties</span><span style="color:#E1E4E8;">(outputName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            ExtendedProducerProperties extendedProducerProperties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ExtendedProducerProperties&lt;&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    extension);</span></span>
<span class="line"><span style="color:#E1E4E8;">            BeanUtils.</span><span style="color:#B392F0;">copyProperties</span><span style="color:#E1E4E8;">(producerProperties, extendedProducerProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">            producerProperties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> extendedProducerProperties;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">(producerProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Binding&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; binding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doBindProducer</span><span style="color:#E1E4E8;">(output, bindingTarget, binder, producerProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.producerBindings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(outputName, binding);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> binding;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindProducer</span><span style="color:#24292E;">(T output, String outputName) {</span></span>
<span class="line"><span style="color:#24292E;">        String bindingTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bindingServiceProperties</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getBindingDestination</span><span style="color:#24292E;">(outputName);</span></span>
<span class="line"><span style="color:#24292E;">        Binder&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ProducerProperties</span><span style="color:#24292E;">&gt; binder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Binder</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, ProducerProperties</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">getBinder</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                outputName, output.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        ProducerProperties producerProperties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bindingServiceProperties</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getProducerProperties</span><span style="color:#24292E;">(outputName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (binder </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ExtendedPropertiesBinder) {</span></span>
<span class="line"><span style="color:#24292E;">            Object extension </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((ExtendedPropertiesBinder) binder)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">getExtendedProducerProperties</span><span style="color:#24292E;">(outputName);</span></span>
<span class="line"><span style="color:#24292E;">            ExtendedProducerProperties extendedProducerProperties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ExtendedProducerProperties&lt;&gt;(</span></span>
<span class="line"><span style="color:#24292E;">                    extension);</span></span>
<span class="line"><span style="color:#24292E;">            BeanUtils.</span><span style="color:#6F42C1;">copyProperties</span><span style="color:#24292E;">(producerProperties, extendedProducerProperties);</span></span>
<span class="line"><span style="color:#24292E;">            producerProperties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> extendedProducerProperties;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">(producerProperties);</span></span>
<span class="line"><span style="color:#24292E;">        Binding&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; binding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doBindProducer</span><span style="color:#24292E;">(output, bindingTarget, binder, producerProperties);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.producerBindings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(outputName, binding);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> binding;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这里的 doBindProducer 方法完成了真正的绑定操作，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doBindProducer</span><span style="color:#E1E4E8;">(T output, String bindingTarget, Binder</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, ProducerProperties</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> binder,</span></span>
<span class="line"><span style="color:#E1E4E8;">            ProducerProperties producerProperties) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.taskScheduler </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.bindingServiceProperties.</span><span style="color:#B392F0;">getBindingRetryInterval</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> binder.</span><span style="color:#B392F0;">bindProducer</span><span style="color:#E1E4E8;">(bindingTarget, output, producerProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> binder.</span><span style="color:#B392F0;">bindProducer</span><span style="color:#E1E4E8;">(bindingTarget, output, producerProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (RuntimeException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                LateBinding&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; late </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LateBinding&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">rescheduleProducerBinding</span><span style="color:#E1E4E8;">(output, bindingTarget, binder, producerProperties, late, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> late;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doBindProducer</span><span style="color:#24292E;">(T output, String bindingTarget, Binder</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, ProducerProperties</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> binder,</span></span>
<span class="line"><span style="color:#24292E;">            ProducerProperties producerProperties) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.taskScheduler </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bindingServiceProperties.</span><span style="color:#6F42C1;">getBindingRetryInterval</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> binder.</span><span style="color:#6F42C1;">bindProducer</span><span style="color:#24292E;">(bindingTarget, output, producerProperties);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> binder.</span><span style="color:#6F42C1;">bindProducer</span><span style="color:#24292E;">(bindingTarget, output, producerProperties);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (RuntimeException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                LateBinding&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; late </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LateBinding&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">rescheduleProducerBinding</span><span style="color:#24292E;">(output, bindingTarget, binder, producerProperties, late, e);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> late;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从这个方法中，我们终于看到了 Spring Cloud Stream 中最核心的概念 Binder，通过 Binder 的 bindProducer 方法完成了目标对象的绑定。</p><h4 id="binder" tabindex="-1">Binder <a class="header-anchor" href="#binder" aria-label="Permalink to &quot;Binder&quot;">​</a></h4><p>Binder 是一个接口，分别提供了绑定生产者和消费者的方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Binder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ConsumerProperties</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">P</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ProducerProperties</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Binding&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">bindConsumer</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">, T </span><span style="color:#FFAB70;">inboundBindTarget</span><span style="color:#E1E4E8;">, C </span><span style="color:#FFAB70;">consumerProperties</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    Binding&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">bindProducer</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, T </span><span style="color:#FFAB70;">outboundBindTarget</span><span style="color:#E1E4E8;">, P </span><span style="color:#FFAB70;">producerProperties</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Binder</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ConsumerProperties</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">P</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ProducerProperties</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    Binding&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">bindConsumer</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">group</span><span style="color:#24292E;">, T </span><span style="color:#E36209;">inboundBindTarget</span><span style="color:#24292E;">, C </span><span style="color:#E36209;">consumerProperties</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    Binding&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">bindProducer</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, T </span><span style="color:#E36209;">outboundBindTarget</span><span style="color:#24292E;">, P </span><span style="color:#E36209;">producerProperties</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在介绍 Binder 接口的具体实现类之前，我们先来看一下如何获取一个 Binder，getBinder 方法如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Binder</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBinder</span><span style="color:#E1E4E8;">(String channelName, Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> bindableType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String binderConfigurationName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.bindingServiceProperties.</span><span style="color:#B392F0;">getBinder</span><span style="color:#E1E4E8;">(channelName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> binderFactory.</span><span style="color:#B392F0;">getBinder</span><span style="color:#E1E4E8;">(binderConfigurationName, bindableType);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Binder</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBinder</span><span style="color:#24292E;">(String channelName, Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> bindableType) {</span></span>
<span class="line"><span style="color:#24292E;">        String binderConfigurationName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bindingServiceProperties.</span><span style="color:#6F42C1;">getBinder</span><span style="color:#24292E;">(channelName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> binderFactory.</span><span style="color:#6F42C1;">getBinder</span><span style="color:#24292E;">(binderConfigurationName, bindableType);</span></span></code></pre></div><p>显然，这里用到了个工厂模式。工厂类 BinderFactory 的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BinderFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Binder&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ConsumerProperties</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ProducerProperties</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getBinder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">configurationName</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">bindableType</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BinderFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Binder&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ConsumerProperties</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ProducerProperties</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getBinder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">configurationName</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">bindableType</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>BinderFactory 只有一个方法，根据给定的配置名称 configurationName 和绑定类型 bindableType 获取 Binder 实例。而 BinderFactory 的实现类也只有一个，即 DefaultBinderFactory。在该实现类的 getBinder 方法中对配置信息进行了校验，并通过 getBinderInstance 获取真正的 Binder 实例。在 getBinderInstance 方法中，我们通过一系列基于 Spring 容器的步骤构建了一个上下文对象 ConfigurableApplicationContext，并通过该上下文对象获取实现了 Binder 接口的 Java bean，核心代码就是下面这句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Binder&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; binder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> binderProducingContext.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(Binder.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Binder&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; binder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> binderProducingContext.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(Binder.class);</span></span></code></pre></div><p>当然，对于 BinderFactory 而言，缓存也是需要的。在 DefaultBinderFactory 中存在一个 binderInstanceCache 变量，使用了一个 Map 来保存配置名称所对应的 Binder 对象。</p><h4 id="abstractmessagechannelbinder" tabindex="-1">AbstractMessageChannelBinder <a class="header-anchor" href="#abstractmessagechannelbinder" aria-label="Permalink to &quot;AbstractMessageChannelBinder&quot;">​</a></h4><p>既然我们已经能够获取 Binder 实例，接下去就来讨论 Binder 实例中对 bindConsumer 和 bindProducer 方法的实现过程。在 Spring Cloud Stream 中，Binder 接口的类层关系如下所示，注意到这里还展示了 spring-cloud-stream-binder-rabbit 代码工程中的 RabbitMessageChannelBinder 类，这个类在本课时讲到 Spring Cloud Stream 与 RabbitMQ 进行集成时会具体展开：</p>`,31),E=s(`<p>Binder 接口类层结构图</p><p>Spring Cloud Stream 首先提供了一个 AbstractBinder，这是一个抽象类，提供的 bindConsumer 和 bindProducer 方法实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindConsumer</span><span style="color:#E1E4E8;">(String name, String group, T target, C properties) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(group)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Assert.</span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">properties.</span><span style="color:#B392F0;">isPartitioned</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;A consumer group is required for a partitioned subscription&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doBindConsumer</span><span style="color:#E1E4E8;">(name, group, target, properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doBindConsumer</span><span style="color:#E1E4E8;">(String name, String group, T inputTarget, C properties);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindProducer</span><span style="color:#E1E4E8;">(String name, T outboundBindTarget, P properties) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doBindProducer</span><span style="color:#E1E4E8;">(name, outboundBindTarget, properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doBindProducer</span><span style="color:#E1E4E8;">(String name, T outboundBindTarget, P properties);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindConsumer</span><span style="color:#24292E;">(String name, String group, T target, C properties) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(group)) {</span></span>
<span class="line"><span style="color:#24292E;">            Assert.</span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">properties.</span><span style="color:#6F42C1;">isPartitioned</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;A consumer group is required for a partitioned subscription&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doBindConsumer</span><span style="color:#24292E;">(name, group, target, properties);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doBindConsumer</span><span style="color:#24292E;">(String name, String group, T inputTarget, C properties);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindProducer</span><span style="color:#24292E;">(String name, T outboundBindTarget, P properties) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doBindProducer</span><span style="color:#24292E;">(name, outboundBindTarget, properties);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doBindProducer</span><span style="color:#24292E;">(String name, T outboundBindTarget, P properties);</span></span></code></pre></div><p>可以看到，它对 Binder 接口中相关方法只是提供了空实现，并把具体实现过程通过 doBindConsumer 和 doBindProducer 抽象方法交由子类进行完成。显然，从设计模式上讲，AbstractBinder 应用了很典型的模板方法模式。</p><p>AbstractBinder 的子类是 AbstractMessageChannelBinder，它同样也是一个抽象类。我们来看它的 doBindProducer 方法，并对该方法中的核心语句进行提取和整理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Binding</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MessageChannel</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doBindProducer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String destination, MessageChannel outputChannel,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> P producerProperties) throws BinderException {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MessageHandler producerMessageHandler;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ProducerDestination producerDestination;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            producerDestination </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.provisioningProvider.</span><span style="color:#B392F0;">provisionProducerDestination</span><span style="color:#E1E4E8;">(destination,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    producerProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">            SubscribableChannel errorChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> producerProperties.</span><span style="color:#B392F0;">isErrorChannelEnabled</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerErrorInfrastructure</span><span style="color:#E1E4E8;">(producerDestination) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            producerMessageHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProducerMessageHandler</span><span style="color:#E1E4E8;">(producerDestination, producerProperties,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    errorChannel);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#B392F0;">postProcessOutputChannel</span><span style="color:#E1E4E8;">(outputChannel, producerProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((SubscribableChannel) outputChannel).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SendingHandler</span><span style="color:#E1E4E8;">(producerMessageHandler, HeaderMode.embeddedHeaders</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(producerProperties.</span><span style="color:#B392F0;">getHeaderMode</span><span style="color:#E1E4E8;">()), </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.headersToEmbed,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                     producerProperties.</span><span style="color:#B392F0;">isUseNativeEncoding</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Binding&lt;</span><span style="color:#F97583;">MessageChannel</span><span style="color:#E1E4E8;">&gt; binding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> DefaultBinding&lt;</span><span style="color:#F97583;">MessageChannel</span><span style="color:#E1E4E8;">&gt;(destination, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, outputChannel,</span></span>
<span class="line"><span style="color:#E1E4E8;">                producerMessageHandler </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Lifecycle </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (Lifecycle) producerMessageHandler </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doPublishEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingCreatedEvent</span><span style="color:#E1E4E8;">(binding));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> binding;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Binding</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MessageChannel</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doBindProducer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String destination, MessageChannel outputChannel,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> P producerProperties) throws BinderException {</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MessageHandler producerMessageHandler;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ProducerDestination producerDestination;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            producerDestination </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.provisioningProvider.</span><span style="color:#6F42C1;">provisionProducerDestination</span><span style="color:#24292E;">(destination,</span></span>
<span class="line"><span style="color:#24292E;">                    producerProperties);</span></span>
<span class="line"><span style="color:#24292E;">            SubscribableChannel errorChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producerProperties.</span><span style="color:#6F42C1;">isErrorChannelEnabled</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerErrorInfrastructure</span><span style="color:#24292E;">(producerDestination) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            producerMessageHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProducerMessageHandler</span><span style="color:#24292E;">(producerDestination, producerProperties,</span></span>
<span class="line"><span style="color:#24292E;">                    errorChannel);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#6F42C1;">postProcessOutputChannel</span><span style="color:#24292E;">(outputChannel, producerProperties);</span></span>
<span class="line"><span style="color:#24292E;">        ((SubscribableChannel) outputChannel).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SendingHandler</span><span style="color:#24292E;">(producerMessageHandler, HeaderMode.embeddedHeaders</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(producerProperties.</span><span style="color:#6F42C1;">getHeaderMode</span><span style="color:#24292E;">()), </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.headersToEmbed,</span></span>
<span class="line"><span style="color:#24292E;">	                     producerProperties.</span><span style="color:#6F42C1;">isUseNativeEncoding</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Binding&lt;</span><span style="color:#D73A49;">MessageChannel</span><span style="color:#24292E;">&gt; binding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> DefaultBinding&lt;</span><span style="color:#D73A49;">MessageChannel</span><span style="color:#24292E;">&gt;(destination, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, outputChannel,</span></span>
<span class="line"><span style="color:#24292E;">                producerMessageHandler </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Lifecycle </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (Lifecycle) producerMessageHandler </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doPublishEvent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingCreatedEvent</span><span style="color:#24292E;">(binding));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> binding;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码的核心逻辑在于，Source 里的 output 发送消息到 outputChannel 通道之后会被 SendingHandler 这个 MessageHandler 进行处理。从设计模式上讲，SendingHandler 是一个静态代理类，因此它又将这个处理过程委托给了由 createProducerMessageHandler 方法所创建的 producerMessageHandler，这点从 SendingHandler 的定义中可以得到验证，如下所示的 delegate 就是传入的 producerMessageHandler：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SendingHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractMessageHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lifecycle</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MessageHandler delegate;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleMessageInternal</span><span style="color:#E1E4E8;">(Message&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Message&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; messageToSend </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.useNativeEncoding) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> message</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serializeAndEmbedHeadersIfApplicable</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.delegate.</span><span style="color:#B392F0;">handleMessage</span><span style="color:#E1E4E8;">(messageToSend);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 省略其他方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SendingHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractMessageHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lifecycle</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MessageHandler delegate;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleMessageInternal</span><span style="color:#24292E;">(Message&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            Message&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; messageToSend </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.useNativeEncoding) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> message</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serializeAndEmbedHeadersIfApplicable</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.delegate.</span><span style="color:#6F42C1;">handleMessage</span><span style="color:#24292E;">(messageToSend);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 省略其他方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>请注意，同样作为一个模板方法类，AbstractMessageChannelBinder 具有三个抽象方法，即 createProducerMessageHandler、postProcessOutputChannel 和 afterUnbindProducer，这三个方法都需要由它的子类进行实现。也就是说，SendingHandler 所使用的 producerMessageHandler 需要由 AbstractMessageChannelBinder 子类负责进行创建。</p><p>需要注意的是，作为统一的数据模型，SendingHandler 以及 producerMessageHandler 中使用的都是 Spring Messaging 组件中的 Message 消息对象，而 createProducerMessageHandler 内部会把这个 Message 消息对象转换成对应中间件的消息数据格式并进行发送。</p><p>下面转到消息消费的场景，我们来看 AbstractMessageChannelBinder 的 doBindConsumer 方法。该方法的核心语句是创建一个消费者端点 ConsumerEndpoint，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">MessageProducer consumerEndpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createConsumerEndpoint</span><span style="color:#E1E4E8;">(destination, group, properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">consumerEndpoint.</span><span style="color:#B392F0;">setOutputChannel</span><span style="color:#E1E4E8;">(inputChannel);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">MessageProducer consumerEndpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createConsumerEndpoint</span><span style="color:#24292E;">(destination, group, properties);</span></span>
<span class="line"><span style="color:#24292E;">consumerEndpoint.</span><span style="color:#6F42C1;">setOutputChannel</span><span style="color:#24292E;">(inputChannel);</span></span></code></pre></div><p>这两行代码有两个注意点。首先，createConsumerEndpoint 是一个抽象方法，需要 AbstractMessageChannelBinder 的子类进行实现。与 createProducerMessageHandler 一样，createConsumerEndpoint 需要把中间件对应的消息数据结构转换成 Spring Messaging 中统一的 Message 消息对象。</p><p>然后，我们注意到这里的 consumerEndpoint 类型是 MessageProducer。MessageProducer 在 Spring Integration 中代表的是消息的生产者，它会把从第三方消息中间件中收到的消息转发到 inputChannel 所指定的通道中。基于 @StreamListener 注解，在 Spring Cloud Stream 中存在一个 StreamListenerMessageHandler 类，用于订阅 inputChannel 消息通道中传入的消息并进行消费。</p><p>作为总结，我们可以用如下所示的流程图来概括整个消息发送和消费流程：</p>`,15),y=s(`<p>消息发送和消费整体流程图</p><h3 id="spring-cloud-stream-集成-rabbitmq" tabindex="-1">Spring Cloud Stream 集成 RabbitMQ <a class="header-anchor" href="#spring-cloud-stream-集成-rabbitmq" aria-label="Permalink to &quot;Spring Cloud Stream 集成 RabbitMQ&quot;">​</a></h3><p>到目前为止，Spring Cloud Stream 提供了对 RabbitMQ 和 Kafka 这两款主流消息中间件的集成。今天，我们选择使用 RabbitMQ 作为示例，讲解如何通过 Spring Cloud Stream 所提供的 Binder 完成与具体消息中间件的整合。</p><p>Spring Cloud Stream 团队提供了 spring-cloud-stream-binder-rabbit 作为与 RabbitMQ 集成的代码工程。这个工程只有四个类，我们需要重点关注的就是实现了 AbstractMessageChannelBinder 中几个抽象方法的 RabbitMessageChannelBinder 类。</p><h4 id="集成消息发送" tabindex="-1">集成消息发送 <a class="header-anchor" href="#集成消息发送" aria-label="Permalink to &quot;集成消息发送&quot;">​</a></h4><p>首先找到 RabbitMessageChannelBinder中 的 createProducerMessageHandler 方法，我们知道该方法用于完成消息的发送。我们在 createProducerMessageHandler 中找到了以下核心代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AmqpOutboundEndpoint endpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AmqpOutboundEndpoint</span><span style="color:#E1E4E8;">(         </span><span style="color:#B392F0;">buildRabbitTemplate</span><span style="color:#E1E4E8;">(producerProperties.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(), errorChannel </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">endpoint.</span><span style="color:#B392F0;">setExchangeName</span><span style="color:#E1E4E8;">(producerDestination.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AmqpOutboundEndpoint endpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AmqpOutboundEndpoint</span><span style="color:#24292E;">(         </span><span style="color:#6F42C1;">buildRabbitTemplate</span><span style="color:#24292E;">(producerProperties.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(), errorChannel </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">endpoint.</span><span style="color:#6F42C1;">setExchangeName</span><span style="color:#24292E;">(producerDestination.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre></div><p>首先，在 buildRabbitTemplate 方法中，我们看到了 RabbitTemplate 的构建过程。RabbitTemplate 是 Spring Amqp 组件中提供的专门用于封装与 RabbitMQ 底层交互 API 的模板类。在构建 RabbitTemplate 的整个过程中，涉及设置与 RabbitMQ 相关的 ConnectionFactory 等众多参数。</p><p>然后，我们发现 RabbitMessageChannelBinder 也是直接集成了 Spring Integration 中用于整合 AQMP 协议的 AmqpOutboundEndpoint。AmqpOutboundEndpoint 提供了如下所示的 send 方法进行消息的发送：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(String exchangeName, String routingKey,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Message</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> requestMessage, CorrelationData correlationData) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.amqpTemplate </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> RabbitTemplate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            MessageConverter converter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((RabbitTemplate) </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.amqpTemplate).</span><span style="color:#B392F0;">getMessageConverter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            org.springframework.amqp.core.Message amqpMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MappingUtils.</span><span style="color:#B392F0;">mapMessage</span><span style="color:#E1E4E8;">(requestMessage, converter,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">getHeaderMapper</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">getDefaultDeliveryMode</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">isHeadersMappedLast</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">addDelayProperty</span><span style="color:#E1E4E8;">(requestMessage, amqpMessage);</span></span>
<span class="line"><span style="color:#E1E4E8;">            ((RabbitTemplate) </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.amqpTemplate).</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(exchangeName, routingKey, amqpMessage, correlationData);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.amqpTemplate.</span><span style="color:#B392F0;">convertAndSend</span><span style="color:#E1E4E8;">(exchangeName, routingKey, requestMessage.</span><span style="color:#B392F0;">getPayload</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                    message </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">getHeaderMapper</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">fromHeadersToRequest</span><span style="color:#E1E4E8;">(requestMessage.</span><span style="color:#B392F0;">getHeaders</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                message.</span><span style="color:#B392F0;">getMessageProperties</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(String exchangeName, String routingKey,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Message</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> requestMessage, CorrelationData correlationData) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.amqpTemplate </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> RabbitTemplate) {</span></span>
<span class="line"><span style="color:#24292E;">            MessageConverter converter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((RabbitTemplate) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.amqpTemplate).</span><span style="color:#6F42C1;">getMessageConverter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            org.springframework.amqp.core.Message amqpMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MappingUtils.</span><span style="color:#6F42C1;">mapMessage</span><span style="color:#24292E;">(requestMessage, converter,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">getHeaderMapper</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">getDefaultDeliveryMode</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">isHeadersMappedLast</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">addDelayProperty</span><span style="color:#24292E;">(requestMessage, amqpMessage);</span></span>
<span class="line"><span style="color:#24292E;">            ((RabbitTemplate) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.amqpTemplate).</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(exchangeName, routingKey, amqpMessage, correlationData);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.amqpTemplate.</span><span style="color:#6F42C1;">convertAndSend</span><span style="color:#24292E;">(exchangeName, routingKey, requestMessage.</span><span style="color:#6F42C1;">getPayload</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                    message </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">getHeaderMapper</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">fromHeadersToRequest</span><span style="color:#24292E;">(requestMessage.</span><span style="color:#6F42C1;">getHeaders</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                                message.</span><span style="color:#6F42C1;">getMessageProperties</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">                    });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里依赖于 Spring Amqp 提供的 AmqpTemplate 接口进行消息的发送，而 RabbitTemplate 是 AmqpTemplate 的一个实现类。同时，通过 Spring Integration 组件中提供的 MessageConverter 工具类完成了从 org.springframework.messaging.Message 到 org.springframework.amqp.core.Message 这两个消息数据结构之间的转换。</p><h4 id="集成消息消费" tabindex="-1">集成消息消费 <a class="header-anchor" href="#集成消息消费" aria-label="Permalink to &quot;集成消息消费&quot;">​</a></h4><p>RabbitMessageChannelBinder 中与消息消费相关的是 createConsumerEndpoint 方法。这个方法中大量使用了 Spring Amqp 和 Spring Integration 中的工具类。该方法最终返回的是一个 AmqpInboundChannelAdapter 对象。在 Spring Integration 中，AmqpInboundChannelAdapter 是一种 InboundChannelAdapter，代表面向输入的通道适配器，提供了消息监听功能，如下所示</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Listener</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ChannelAwareMessageListener</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">RetryListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Message </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Channel </span><span style="color:#FFAB70;">channel</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//省略相关实现</span></span>
<span class="line"><span style="color:#E1E4E8;">	 }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Listener</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelAwareMessageListener</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">RetryListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMessage</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Message </span><span style="color:#E36209;">message</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Channel </span><span style="color:#E36209;">channel</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//省略相关实现</span></span>
<span class="line"><span style="color:#24292E;">	 }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个 onMessage 方法中，调用了 createAndSend 方法完成消息的创建和发送，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createAndSend</span><span style="color:#E1E4E8;">(Message message, Channel channel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            org.springframework.messaging.Message&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; messagingMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMessage</span><span style="color:#E1E4E8;">(message, channel);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">setAttributesIfNecessary</span><span style="color:#E1E4E8;">(message, messagingMessage);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">sendMessage</span><span style="color:#E1E4E8;">(messagingMessage);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> org.springframework.messaging.Message</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMessage</span><span style="color:#E1E4E8;">(Message message, Channel channel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object payload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AmqpInboundChannelAdapter.this.messageConverter.</span><span style="color:#B392F0;">fromMessage</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">            Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AmqpInboundChannelAdapter.this.headerMapper</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">toHeadersFromRequest</span><span style="color:#E1E4E8;">(message.</span><span style="color:#B392F0;">getMessageProperties</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (AmqpInboundChannelAdapter.this.messageListenerContainer.</span><span style="color:#B392F0;">getAcknowledgeMode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> AcknowledgeMode.MANUAL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                headers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(AmqpHeaders.DELIVERY_TAG, message.</span><span style="color:#B392F0;">getMessageProperties</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDeliveryTag</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                headers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(AmqpHeaders.CHANNEL, channel);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (AmqpInboundChannelAdapter.this.retryTemplate </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                headers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(IntegrationMessageHeaderAccessor.DELIVERY_ATTEMPT, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicInteger</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> org.springframework.messaging.Message&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; messagingMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMessageBuilderFactory</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">withPayload</span><span style="color:#E1E4E8;">(payload)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">copyHeaders</span><span style="color:#E1E4E8;">(headers)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> messagingMessage;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createAndSend</span><span style="color:#24292E;">(Message message, Channel channel) {</span></span>
<span class="line"><span style="color:#24292E;">            org.springframework.messaging.Message&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; messagingMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMessage</span><span style="color:#24292E;">(message, channel);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">setAttributesIfNecessary</span><span style="color:#24292E;">(message, messagingMessage);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">sendMessage</span><span style="color:#24292E;">(messagingMessage);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> org.springframework.messaging.Message</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMessage</span><span style="color:#24292E;">(Message message, Channel channel) {</span></span>
<span class="line"><span style="color:#24292E;">            Object payload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AmqpInboundChannelAdapter.this.messageConverter.</span><span style="color:#6F42C1;">fromMessage</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">            Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AmqpInboundChannelAdapter.this.headerMapper</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">toHeadersFromRequest</span><span style="color:#24292E;">(message.</span><span style="color:#6F42C1;">getMessageProperties</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (AmqpInboundChannelAdapter.this.messageListenerContainer.</span><span style="color:#6F42C1;">getAcknowledgeMode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> AcknowledgeMode.MANUAL) {</span></span>
<span class="line"><span style="color:#24292E;">                headers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(AmqpHeaders.DELIVERY_TAG, message.</span><span style="color:#6F42C1;">getMessageProperties</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDeliveryTag</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                headers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(AmqpHeaders.CHANNEL, channel);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (AmqpInboundChannelAdapter.this.retryTemplate </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                headers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(IntegrationMessageHeaderAccessor.DELIVERY_ATTEMPT, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicInteger</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> org.springframework.messaging.Message&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; messagingMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMessageBuilderFactory</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">withPayload</span><span style="color:#24292E;">(payload)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">copyHeaders</span><span style="color:#24292E;">(headers)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> messagingMessage;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，在上述 createMessage 方法中，我们完成了消息数据格式从 org.springframework.amqp.core.Message 到 org.springframework.messaging.Message 的反向转换。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>Binder 是 Spring Cloud Stream 的核心组件，通过这个组件，Spring Cloud Stream 完成了与第三方消息中间件的集成。在本课时中，我们花了较大篇幅系统分析了 Binder 组件相关的核心类。然后，基于这些核心类以及 RabbitMQ，我们给出了 Spring Cloud Stream 集成RabbitMQ 的实现原理。</p><p>这里给你留一道思考题：在 Spring Cloud Stream 中，Binder 组件对于消息发送和消费做了哪些抽象？</p><p>介绍完 Spring Cloud Stream 之后，我们又将启动一个新的话题，即安全性。在微服务架构中，安全性的重要性往往被忽略，值得我们系统的进行分析和实现。下一课时，我们首先关注如何理解微服务访问的安全需求和实现方案。</p>`,21);function i(d,g,u,F,b,C){const n=o("Image");return e(),t("div",null,[c,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/81/B6/Ciqc1F_RmKqAehbuAAUIZHxCJ9g730.png"}),p(),E,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/81/C1/CgqCHl_RmIOAbYcHAAHhiR5WQIE310.png"}),p(),y])}const A=l(r,[["render",i]]);export{h as __pageData,A as default};
