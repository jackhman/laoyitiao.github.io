import{_ as p,j as e,o as l,g as o,k as t,h as a,Q as c,s}from"./chunks/framework.cfb14fe0.js";const k=JSON.parse('{"title":"15高级进阶：WebView层及代码架构层面优化","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/前端性能优化方法与实战_文档/(6579) 15  高级进阶：WebView 层及代码架构层面优化.md","filePath":"posts/frontEnd/前端性能优化方法与实战_文档/(6579) 15  高级进阶：WebView 层及代码架构层面优化.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/前端性能优化方法与实战_文档/(6579) 15  高级进阶：WebView 层及代码架构层面优化.md"},i=c("",43),E=s("p",null,"当我们拿着鼠标在上面滑动时，就可以看到整个包的组成部分，以及每部分的信息。一般我们可以找内容比较大的方面，然后分析原因进行优化。",-1),y=s("p",null,"比如，有次游戏业务发现打包目录超过了10MB，仔细定位发现是有些 game.map 的文件打包上来了。虽然 game.map 文件便于我们开发时调解 bug，准确定位错误的位置，但在这里却影响了我们的性能体验。找到原因后，解决它也很简单了，直接在打包时，关闭 sourcemap，即在配置文件中增加productionSourceMap:false 就可以了。",-1),d=s("h3",{id:"小结",tabindex:"-1"},[a("小结 "),s("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),b=s("p",null,"好了，以上就是 WebView 性能优化和代码架构层的优化，这里面有一些注意事项。WebView 会占用一定的内存，如果使用 WebView 缓存池进行优化，会出现内存占用多的问题，我们可以将 WebView 放到独立进程中，避免内存泄漏。当然，WebView 独立进程的话，就需要解决进程间调用问题，一般可以直接使用 Aidl 来解决。",-1),u=s("p",null,"下面给你留一个问题：",-1),h=s("blockquote",null,[s("p",null,"目前你一般对 WebView 进行哪些方面的优化？")],-1),_=s("p",null,"欢迎在评论区和我沟通，下一讲我将介绍预请求、预加载及预渲染机制方面的内容。",-1);function w(g,V,W,m,F,A){const n=e("Image");return l(),o("div",null,[i,t(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/31/1F/Cgp9HWBsJq2AXSKWAAfeHG3LQqY567.png"}),a(),E,y,d,b,u,h,_])}const v=p(r,[["render",w]]);export{k as __pageData,v as default};
