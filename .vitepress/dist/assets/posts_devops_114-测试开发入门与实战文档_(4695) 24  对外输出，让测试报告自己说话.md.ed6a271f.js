import{_ as o,j as e,o as t,g as r,k as l,h as a,Q as p,s}from"./chunks/framework.4e7d56ce.js";const U=JSON.parse('{"title":"24对外输出，让测试报告自己说话","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4695) 24  对外输出，让测试报告自己说话.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4695) 24  对外输出，让测试报告自己说话.md","lastUpdated":1696682708000}'),c={name:"posts/devops/114-测试开发入门与实战文档/(4695) 24  对外输出，让测试报告自己说话.md"},E=p('<h1 id="_24对外输出-让测试报告自己说话" tabindex="-1">24对外输出，让测试报告自己说话 <a class="header-anchor" href="#_24对外输出-让测试报告自己说话" aria-label="Permalink to &quot;24对外输出，让测试报告自己说话&quot;">​</a></h1><p>你好，我是蔡超，欢迎来到第 24 课时。通过前面章节的学习，我们已经掌握了测试框架的方方面面，今天我们来讲解测试框架的另外一个重要组成部分 ------ 测试报告。</p><p>测试报告在测试框架中的重要性不言而喻，有了测试报告，我们不仅可以在单次测试运行后，根据测试结果直观地对软件质量有个大致的评估，还可以汇总历次测试运行的情况，得出如下信息。</p><ul><li><p>随着版本的历次变更，质量是变好了还是变坏了？</p></li><li><p>同一个模块下的测试用例， 在不同版本下执行，需要修改测试用例的频率是多少？</p></li></ul><blockquote><p>通过此指标可以看出这个模块更新，或者被其他模块影响的频率高低。</p></blockquote><ul><li><p>哪条测试用例永远成功？考虑是不是测试检查点写得不足，如果不是，考虑是否可以删除掉这条用例。</p></li><li><p>哪条测试用例永远失败，或者大概率失败？</p></li></ul><blockquote><p>首先检查测试脚本是否存在问题。如果没有问题，检查这个测试用例对应哪个功能点？失败的原因是什么？</p></blockquote><p>既然测试报告能告诉我们这么多信息，那么测试报告应该如何开发呢？测试报告又应该包括哪些内容呢？这一讲的大致内容如下图所示，可供你参考。</p>',8),y=p('<h3 id="测试报告应该包括哪些内容" tabindex="-1">测试报告应该包括哪些内容？ <a class="header-anchor" href="#测试报告应该包括哪些内容" aria-label="Permalink to &quot;测试报告应该包括哪些内容？&quot;">​</a></h3><p>在我看来，测试报告至少需要包括项目总览和执行情况分析这两方面的信息。</p><h4 id="_1-项目总览" tabindex="-1">1. 项目总览 <a class="header-anchor" href="#_1-项目总览" aria-label="Permalink to &quot;1. 项目总览&quot;">​</a></h4><ul><li><p>本次测试执行了多长时间？</p></li><li><p>总共执行了多少测试用例？</p></li><li><p>有多少测试用例执行成功？</p></li><li><p>有多少测试用例执行失败？</p></li><li><p>有多少测试用例是非正常失败的？</p></li></ul><blockquote><p>不是由于断言失败，而是由于环境不稳定，运行中突发错误而导致的失败。</p></blockquote><ul><li><p>每条测试用例执行了多长时间？</p></li><li><p>本次测试在哪个环境运行？是开发环境、集成测试环境还是生产环境？</p></li><li><p>本次测试运行在哪个操作系统上？</p></li></ul><h4 id="_2-执行情况分析" tabindex="-1">2. 执行情况分析 <a class="header-anchor" href="#_2-执行情况分析" aria-label="Permalink to &quot;2. 执行情况分析&quot;">​</a></h4><p>针对每一次测试运行，测试报告应该提供最基本的测试分析，包括：</p><ul><li><p>按照测试失败划分的测试分析图</p></li><li><p>按模块划分的测试分析图</p></li><li><p>按照测试用例重要程度、优先级划分的测试分析图</p></li><li><p>按照测试执行时间划分的测试分析图</p></li></ul><p>这些不同维度的分析图，可用从各个层面来反映软件的质量情况。</p><p>所以，依托测试报告进行分析和总结，我们能够有理有据，以数字形式直观反映项目暴露出的质量问题，从而催促各个相关方后续改进。</p><p>在当前市面上所有第三方或者自研的测试报告系统中，<strong>Allure</strong> 是最全面，且支持的测试框架最多的一个测试报告系统。它是开源的测试报告框架，它旨在创建让团队每一个人都清楚明了的测试报告。下面我将以 Allure 报告为例，详细讲解测试报告的开发使用。</p><h3 id="allure-报告生成的原理" tabindex="-1">Allure 报告生成的原理 <a class="header-anchor" href="#allure-报告生成的原理" aria-label="Permalink to &quot;Allure 报告生成的原理&quot;">​</a></h3><p>Allure 报告是基于标准的 xUnit 结果输出，再添加补充数据而生成的，其报告的生成基于如下两个步骤。</p><ul><li><p>在测试执行期间，一个名为 <strong>Adapter</strong> 的小型 library 被连接到测试框架中，并将所有测试执行的信息保存到 XML 文件中。对于大多数编程语言下的流行测试框架（例如 python 语言中的 pytest，Java 中的 jUnit 等），Allure 都默认为其提供了 Adapter。</p></li><li><p>获取 XML 文件后，Allure 会<strong>将这些 XML 文件转换为 HTML 报告</strong>。这一步骤可以通过持续集成系统的 Allure 插件，或者命令行命令实现。</p></li></ul><h3 id="allure-报告特点" tabindex="-1">Allure 报告特点 <a class="header-anchor" href="#allure-报告特点" aria-label="Permalink to &quot;Allure 报告特点&quot;">​</a></h3><p>Allure 报告之所以受到开发、测试，甚至管理人员的推崇，是因为它有如下明显的特点。</p><ul><li>从开发/质量保证的角度看，Allure 报告可以<strong>缩短常见缺陷的生命周期</strong>。</li></ul><p>可以将测试失败划分为 bug 和损坏的（Broken）测试，还可以配置日志、步骤、固定装置、附件、时间、历史记录，以及与 TMS 的集成和 Bug 跟踪系统，方便将 Task 与负责 Task 开发人员和测试人员绑定，从而使开发和测试人员第一时间掌握所有信息。</p><ul><li>从管理者的角度看，Allure 提供了一个清晰的&quot;全局&quot;视野。</li></ul><p>包括本次测试涵盖了哪些功能，Bug 在哪个 case 用例中被发现，以及整体测试用例、单条测试用例的执行时间等信息。</p><h3 id="allure-测试报告一览" tabindex="-1">Allure 测试报告一览 <a class="header-anchor" href="#allure-测试报告一览" aria-label="Permalink to &quot;Allure 测试报告一览&quot;">​</a></h3><p>Allure 测试报告除了涵盖测试运行的全面信息外，还提供各种维度的分析图，包括如下几个部分。</p><ul><li><strong>项目总览（OverView）</strong></li></ul><p>项目总览显示了总体测试运行的一系列统计信息。</p>',25),i=s("ul",null,[s("li",null,[s("strong",null,"按缺陷种类分析（Categories）")])],-1),u=s("p",null,"缺陷种类分析显示了所有不同原因引起的失败，并分类展示。",-1),F=s("ul",null,[s("li",null,[s("strong",null,"按测试套件分析（Suites）")])],-1),d=s("p",null,"测试套件分析显示了按照套件和类划分的所有的测试执行情况。",-1),q=s("ul",null,[s("li",null,[s("strong",null,"图表模块（Graphs）")])],-1),_=s("p",null,"图表模块，包括按照不同维度分析的各种图表（例如测试状态表分析，测试用例等级分析表，测试执行时间分析表等等）。",-1),h=s("ul",null,[s("li",null,[s("strong",null,"按执行时间分析（Timeline）")])],-1),g=s("p",null,"按执行时间分析模块，详细列出了各个测试用例的执行时间，你可以筛选出那些运行时间最长的测试用例进行优化。",-1),C=s("ul",null,[s("li",null,[s("strong",null,"针对 BDD 驱动的测试用例进行分析（Behaviors）")])],-1),m=s("p",null,"这里主要是根据 Epic、Feature 和 Story 标签对测试结果进行分组。",-1),A=s("ul",null,[s("li",null,[s("strong",null,"按照 Package 进行分析（Packages）")])],-1),b=s("p",null,"Package 模块列出了按照 Package 维度进行分析的详细图表。",-1),B=p(`<p>了解了 Allure 测试报告的模块划分，我们来看下，如何配置使得这些模块反映测试的执行情况。</p><h3 id="allure-测试报告开发配置指南" tabindex="-1">Allure 测试报告开发配置指南 <a class="header-anchor" href="#allure-测试报告开发配置指南" aria-label="Permalink to &quot;Allure 测试报告开发配置指南&quot;">​</a></h3><p>Allure 有很多独有的功能，可用来方便自定义测试报告，下面我将详细为你讲解。</p><h4 id="_1-allure-的安装和配置" tabindex="-1">1.Allure 的安装和配置 <a class="header-anchor" href="#_1-allure-的安装和配置" aria-label="Permalink to &quot;1.Allure 的安装和配置&quot;">​</a></h4><p>在不同操作系统下安装 Allure 报告的方式各有不同。关于如何安装、配置 Allure 测试报告，我在前面的章节《<strong>10 | 你的第一个 API 测试框架（二</strong>）》介绍过，你可以回顾一下。</p><p>你也可以直接通过如下方式安装：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install allure-pytest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install allure-pytest</span></span></code></pre></div><blockquote><p>注意，如果你安装过 Allure 2.0 之前的版本，你需要先将之前的版本卸载。</p></blockquote><h4 id="_2-allure-测试报告基础使用" tabindex="-1">2.Allure 测试报告基础使用 <a class="header-anchor" href="#_2-allure-测试报告基础使用" aria-label="Permalink to &quot;2.Allure 测试报告基础使用&quot;">​</a></h4><p>Allure 测试报告安装配置好后，由 pytest 运行的测试便可以直接使用。假设当前你有个项目名为 allureDemo，则你可以采用如下方式使用 Allure 报告：</p><ul><li>首先运行你的测试</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 直接执行allureDemo项目下的所有测试用例，并将测试报告文件夹allure_reports放在项目根目录下</span></span>
<span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\allureDemo&gt;pytest -s  -v --alluredir=./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 直接执行allureDemo项目下的所有测试用例，并将测试报告文件夹allure_reports放在项目根目录下</span></span>
<span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\allureDemo&gt;pytest -s  -v --alluredir=./allure_results</span></span></code></pre></div><ul><li>运行完成后，打开 allure 报告</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#6A737D;"># 1. 使用快捷键 Win + R 调起运行提示框</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 输入&quot;cmd&quot;进入到命令行</span></span>
<span class="line"><span style="color:#6A737D;"># 3. 切换目录到项目根目录，本例中在D:\\_Automation\\allureDemo&gt;：</span></span>
<span class="line"><span style="color:#6A737D;"># 4. 输入命令生成allure报告：</span></span>
<span class="line"><span style="color:#E1E4E8;">allure serve allure_reports</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 以Win10为例：</span></span>
<span class="line"><span style="color:#6A737D;"># 1. 使用快捷键 Win + R 调起运行提示框</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 输入&quot;cmd&quot;进入到命令行</span></span>
<span class="line"><span style="color:#6A737D;"># 3. 切换目录到项目根目录，本例中在D:\\_Automation\\allureDemo&gt;：</span></span>
<span class="line"><span style="color:#6A737D;"># 4. 输入命令生成allure报告：</span></span>
<span class="line"><span style="color:#24292E;">allure serve allure_reports</span></span></code></pre></div><p>此时，Allure 会帮你生成测试报告会自动打开。</p><h3 id="allure-报告实战" tabindex="-1">Allure 报告实战 <a class="header-anchor" href="#allure-报告实战" aria-label="Permalink to &quot;Allure 报告实战&quot;">​</a></h3><p>为了清晰地讲解 Allure 各个模块的使用，但又尽量少地引入其他代码，我将重新建立一个项目来详解 Allure 测试报告。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">|--allureDemo</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--test_basic_report.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--conftest.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">|--allureDemo</span></span>
<span class="line"><span style="color:#24292E;">    |--tests</span></span>
<span class="line"><span style="color:#24292E;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        |--test_basic_report.py</span></span>
<span class="line"><span style="color:#24292E;">        |--__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    |--conftest.py</span></span></code></pre></div><p>其中 conftest.py 里的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> allure</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_addoption</span><span style="color:#E1E4E8;">(parser):</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.addoption(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;--flag&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store_true&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;set skip or not&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.addoption(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;--browser&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Firefox&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;set browser&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;session&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_flag</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request.config.getoption(</span><span style="color:#9ECBFF;">&#39;--flag&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;session&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_browser</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request.config.getoption(</span><span style="color:#9ECBFF;">&#39;--browser&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.hookimpl</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">tryfirst</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">hookwrapper</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_runtest_makereport</span><span style="color:#E1E4E8;">(item, call):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    　　本hook用于制作测试报告</span></span>
<span class="line"><span style="color:#9ECBFF;">    　　:param item:测试用例对象</span></span>
<span class="line"><span style="color:#9ECBFF;">    　　:param call:测试用例的测试步骤</span></span>
<span class="line"><span style="color:#9ECBFF;">    　　         执行完常规钩子函数返回的report报告有个属性叫report.when</span></span>
<span class="line"><span style="color:#9ECBFF;">                when=&#39;setup&#39; 代表返回setup 的执行结果</span></span>
<span class="line"><span style="color:#9ECBFF;">                when=&#39;call&#39; 代表返回call 的执行结果</span></span>
<span class="line"><span style="color:#9ECBFF;">    　　:return:</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    outcome </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">yield</span></span>
<span class="line"><span style="color:#E1E4E8;">    rep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> outcome.get_result()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rep.when </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;call&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> rep.when </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;setup&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (rep.failed </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> rep.skipped):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;initial_browser&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.fixturenames:</span></span>
<span class="line"><span style="color:#E1E4E8;">                web_driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.funcargs[</span><span style="color:#9ECBFF;">&#39;initial_browser&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;"># 如果找不到driver，则直接return</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">            allure.attach(web_driver.get_screenshot_as_png(), </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;wrong picture&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          </span><span style="color:#FFAB70;">attachment_type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">allure.attachment_type.</span><span style="color:#79B8FF;">PNG</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to take screenshot&quot;</span><span style="color:#E1E4E8;">.format(e))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> allure</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_addoption</span><span style="color:#24292E;">(parser):</span></span>
<span class="line"><span style="color:#24292E;">    parser.addoption(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;--flag&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store_true&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;set skip or not&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    parser.addoption(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;--browser&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Firefox&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;set browser&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;session&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_flag</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request.config.getoption(</span><span style="color:#032F62;">&#39;--flag&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;session&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_browser</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request.config.getoption(</span><span style="color:#032F62;">&#39;--browser&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.hookimpl</span><span style="color:#24292E;">(</span><span style="color:#E36209;">tryfirst</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hookwrapper</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_runtest_makereport</span><span style="color:#24292E;">(item, call):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    　　本hook用于制作测试报告</span></span>
<span class="line"><span style="color:#032F62;">    　　:param item:测试用例对象</span></span>
<span class="line"><span style="color:#032F62;">    　　:param call:测试用例的测试步骤</span></span>
<span class="line"><span style="color:#032F62;">    　　         执行完常规钩子函数返回的report报告有个属性叫report.when</span></span>
<span class="line"><span style="color:#032F62;">                when=&#39;setup&#39; 代表返回setup 的执行结果</span></span>
<span class="line"><span style="color:#032F62;">                when=&#39;call&#39; 代表返回call 的执行结果</span></span>
<span class="line"><span style="color:#032F62;">    　　:return:</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    outcome </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">yield</span></span>
<span class="line"><span style="color:#24292E;">    rep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> outcome.get_result()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rep.when </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;call&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> rep.when </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;setup&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (rep.failed </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> rep.skipped):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;initial_browser&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.fixturenames:</span></span>
<span class="line"><span style="color:#24292E;">                web_driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item.funcargs[</span><span style="color:#032F62;">&#39;initial_browser&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 如果找不到driver，则直接return</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">            allure.attach(web_driver.get_screenshot_as_png(), </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;wrong picture&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">attachment_type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">allure.attachment_type.</span><span style="color:#005CC5;">PNG</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to take screenshot&quot;</span><span style="color:#24292E;">.format(e))</span></span></code></pre></div><p>在这个代码中，我分别定义了两个命令行参数 flag 和 browser。</p><ul><li><p>flag：只有两个值 True 和 False，当用户不传 flag 参数时，默认为 False，当用户传递 flag 时，值为 True。</p></li><li><p>browser：代表要启用的浏览器，默认是 Firefox 浏览器。</p></li></ul><p>对应地，get_flag 和 get_browser 这两个 fixture 就是分别用来取 flag 和 browser 的值。</p><p>被装饰器 @pytest.hookimpl(tryfirst=True, hookwrapper=True) 装饰的函数 pytest_runtest_makereport，是 pytest 提供的 Hook 函数，它有以下两个作用：</p><ul><li><p>可以获取到测试用例不同执行阶段的结果（setup，call，teardown）；</p></li><li><p>可以获取钩子方法的调用结果（yield 返回一个 result 对象）和调用结果的测试报告（返回一个 report 对象，即 _pytest.runner.TestReport）。</p></li></ul><p>而在本例中，我通过它实现了当测试失败或者被 skip 时，自动根据 WebDriver 提供的 get_screenshot_as_png() 方法来截图。</p><p>接着，我们来看下文件 test_baidu.py 的内容：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> allure</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@allure.epic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baidu&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.description</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;测试百度的搜索功能&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.severity</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BLOCKER&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.feature</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;百度搜索&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.testcase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://www.baidu.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestBaidu</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initial_browser</span><span style="color:#E1E4E8;">(self, get_browser):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> get_browser:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> get_browser.lower() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Chrome&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> get_browser.lower() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;firefox&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Firefox()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.implicitly_wait(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.title</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试百度搜索正确&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;search_string, expect_string&#39;</span><span style="color:#E1E4E8;">, [(</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">), (</span><span style="color:#9ECBFF;">&#39;helloqa.com&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, initial_browser, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initial_browser</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results) </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.title</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试百度搜索失败&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;search_string, expect_string&#39;</span><span style="color:#E1E4E8;">, [(</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;isGood&#39;</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search_fail</span><span style="color:#E1E4E8;">(self, initial_browser, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initial_browser</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results) </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([</span><span style="color:#9ECBFF;">&quot;-m&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;baidu&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-v&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-k&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test_baidu_search&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test_baidu_fixture_sample.py&quot;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> allure</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@allure.epic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;baidu&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;测试百度的搜索功能&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.severity</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BLOCKER&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.feature</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;百度搜索&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.testcase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://www.baidu.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBaidu</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initial_browser</span><span style="color:#24292E;">(self, get_browser):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> get_browser:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> get_browser.lower() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Chrome&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> get_browser.lower() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;firefox&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Firefox()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.implicitly_wait(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.baidu.com/&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.title</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试百度搜索正确&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;search_string, expect_string&#39;</span><span style="color:#24292E;">, [(</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">), (</span><span style="color:#032F62;">&#39;helloqa.com&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, initial_browser, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initial_browser</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.title</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试百度搜索失败&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;search_string, expect_string&#39;</span><span style="color:#24292E;">, [(</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;isGood&#39;</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search_fail</span><span style="color:#24292E;">(self, initial_browser, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initial_browser</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([</span><span style="color:#032F62;">&quot;-m&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;baidu&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-s&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-v&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-k&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test_baidu_search&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test_baidu_fixture_sample.py&quot;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>在这个文件中，我创建了一个测试类 TestBaidu 和两个测试方法 test_baidu_search() 和 test_baidu_search_fail()。注意：这两个方法有很多关于 allure 的装饰器，例如 @allure.epic、 @allure.feature 等，它们分别代表什么含义我等下再讲，我们继续往下看。</p><p>最后，test_basic_report.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> allure</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flaky </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> flaky</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@allure.epic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;演示下allure支持的测试&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.description</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;测试模块1用来对模块1进行测试&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.feature</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试模块1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.story</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试模块1_story1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@allure.testcase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://www.baidu.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.basic</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestBasic</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.step</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试步骤1 -- 判断登录成功&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.severity</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;BLOCKER&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_login</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;模拟成功的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@flaky</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.step</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试步骤2 -- 查询余额&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.severity</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;normal&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_savings</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;模拟失败的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.step</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试步骤2.1 -- 查询余额&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.severity</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;normal&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_savings1</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;模拟失败的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.description</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;调试用，不执行&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_deposit_temp</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;模拟skip的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.skip(</span><span style="color:#9ECBFF;">&#39;调试用例，skip&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.issue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://itesting.club&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;此处之前有bug，bug号如上&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.step</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试步骤3 -- 取现&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_deposit</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;oops&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.xfail</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ccondition</span><span style="color:#F97583;">=lambda</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reason</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;this test is expecting failure&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_xfail_expected_failure</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;被期望的失败&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.xfail</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">condition</span><span style="color:#F97583;">=lambda</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reason</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;this test is expecting failure&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_xfail_unexpected_pass</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;期望失败，但是却成功，会被标记为不期望的成功&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@allure.step</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试步骤4 -- teardown&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_skip_by_triggered_condition</span><span style="color:#E1E4E8;">(self, get_flag):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> get_flag </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            pytest.skip(</span><span style="color:#9ECBFF;">&quot;flag 是true时， skip掉此条用例&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> allure</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flaky </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> flaky</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@allure.epic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;演示下allure支持的测试&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;测试模块1用来对模块1进行测试&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.feature</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试模块1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.story</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试模块1_story1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@allure.testcase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://www.baidu.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.basic</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBasic</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.step</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试步骤1 -- 判断登录成功&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.severity</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;BLOCKER&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_login</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;模拟成功的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@flaky</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.step</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试步骤2 -- 查询余额&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.severity</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;normal&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_savings</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;模拟失败的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.step</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试步骤2.1 -- 查询余额&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.severity</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;normal&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_savings1</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;模拟失败的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;调试用，不执行&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_deposit_temp</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;模拟skip的测试用例&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        pytest.skip(</span><span style="color:#032F62;">&#39;调试用例，skip&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.issue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://itesting.club&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;此处之前有bug，bug号如上&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.step</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试步骤3 -- 取现&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_deposit</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;oops&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.xfail</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ccondition</span><span style="color:#D73A49;">=lambda</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reason</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;this test is expecting failure&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_xfail_expected_failure</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;被期望的失败&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.xfail</span><span style="color:#24292E;">(</span><span style="color:#E36209;">condition</span><span style="color:#D73A49;">=lambda</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reason</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;this test is expecting failure&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_xfail_unexpected_pass</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;期望失败，但是却成功，会被标记为不期望的成功&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@allure.step</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试步骤4 -- teardown&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_skip_by_triggered_condition</span><span style="color:#24292E;">(self, get_flag):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> get_flag </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            pytest.skip(</span><span style="color:#032F62;">&quot;flag 是true时， skip掉此条用例&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在这个文件中，为了模拟到所有的测试运行情况，我人为定义了一些 pass 和 fail，以及 skip、xfail 的情况。</p><h4 id="_1-allure-测试报告装饰器" tabindex="-1">1.Allure 测试报告装饰器 <a class="header-anchor" href="#_1-allure-测试报告装饰器" aria-label="Permalink to &quot;1.Allure 测试报告装饰器&quot;">​</a></h4><p>在运行整个测试之前，我们来学习下 Allure 测试报告的各个装饰器及其作用：</p>`,34),f=p(`<p>关于每一个装饰器的具体用法，可以直接参考上文中的代码示例。</p><h4 id="_2-为-allure-测试报告添加-environment" tabindex="-1">2.为 Allure 测试报告添加 Environment <a class="header-anchor" href="#_2-为-allure-测试报告添加-environment" aria-label="Permalink to &quot;2.为 Allure 测试报告添加 Environment&quot;">​</a></h4><p>现在，我来生成下测试报告：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在项目根目录下执行</span></span>
<span class="line"><span style="color:#6A737D;"># 本例中，根目录是D:\\_Automation\\allureDemo&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\allureDemo&gt;pytest -m baidu -s  -v --alluredir=./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在项目根目录下执行</span></span>
<span class="line"><span style="color:#6A737D;"># 本例中，根目录是D:\\_Automation\\allureDemo&gt;</span></span>
<span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\allureDemo&gt;pytest -m baidu -s  -v --alluredir=./allure_results</span></span></code></pre></div><p>执行成功后，通过如下命令打开测试报告：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">allure serve ./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">allure serve ./allure_results</span></span></code></pre></div><p>可以看到如下的结果。默认情况下，Allure 生成的报告是不带 Environment 信息的，如下图中&quot;1.Environment 默认没有&quot;所示。</p>`,7),v=p(`<p><strong>那么如何让测试报告带上 Environment 信息呢？</strong></p><ul><li>首先，执行完测试用例后，创建文件 environment.properties，其内容格式如下：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Browser=Chrome</span></span>
<span class="line"><span style="color:#E1E4E8;">Browser.Version=86.0.4240</span></span>
<span class="line"><span style="color:#E1E4E8;">Environment=QA</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Browser=Chrome</span></span>
<span class="line"><span style="color:#24292E;">Browser.Version=86.0.4240</span></span>
<span class="line"><span style="color:#24292E;">Environment=QA</span></span></code></pre></div><blockquote><p>注意：这里为 key=value 的格式。这个文件你可以通过编写相关函数动态获取每次执行时的真实值，然后写入 environment.properties 文件。这里为了方便，我直接 Hard Coded.</p></blockquote><ul><li><p>然后，把文件 <strong>environment.properties</strong> 拷贝到你在执行测试用例时设置的 allure 报告目录下，在本例中为 <strong>allure_results</strong> 这个目录。</p></li><li><p>最后，执行如下命令：</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">allure serve ./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">allure serve ./allure_results</span></span></code></pre></div><p>你会发现 Environment 里出现了我们刚刚配置的值：</p>`,7),k=p(`<h4 id="_3-为-allure-测试报告增加错误类型" tabindex="-1">3.为 Allure 测试报告增加错误类型 <a class="header-anchor" href="#_3-为-allure-测试报告增加错误类型" aria-label="Permalink to &quot;3.为 Allure 测试报告增加错误类型&quot;">​</a></h4><p>在默认情况下，Allure 仅仅会列出以下两种类型的 Categories。</p><ul><li><strong>Product Defects（failed tests）</strong></li></ul><p>表示真正的测试执行失败，如果 Categories 里出现这个错误，通常表明测试用例最后的输出跟期望不符合，有 Bug 出现。</p><ul><li><strong>Test Defects（broken tests）</strong></li></ul><p>表示测试用例本身有问题导致的错误，如果 Categories 里出现这个错误，通常表明测试用例在执行过程中出错了，需要我们进一步调查原因。</p><p>如果你仔细观察 test_basic_report.py 里的代码，你可以看到，我们很多用例是要 skip，或者需要根据用户的传参来 skip 的，这些测试用例没有被反映到 Categories 里。</p><p><strong>那么如何自定义 Categories 呢？</strong></p><ul><li>首先，创建名称为 <strong>categories.json</strong> 的文件，内容如下：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Ignored tests&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;matchedStatuses&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;skipped&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Infrastructure problems&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;matchedStatuses&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;broken&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;failed&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;messageRegex&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;.*bye-bye.*&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Outdated tests&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;matchedStatuses&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;broken&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;traceRegex&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;.*FileNotFoundException.*&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Product defects&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;matchedStatuses&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;failed&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Test defects&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;matchedStatuses&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;broken&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Ignored tests&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;matchedStatuses&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;skipped&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Infrastructure problems&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;matchedStatuses&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;broken&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;failed&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;messageRegex&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;.*bye-bye.*&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Outdated tests&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;matchedStatuses&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;broken&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;traceRegex&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;.*FileNotFoundException.*&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Product defects&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;matchedStatuses&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;failed&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Test defects&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;matchedStatuses&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;broken&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><ul><li><p>然后，把文件 <strong>categories.json</strong> 拷贝到你在执行测试用例时设置的 allure 报告目录下，在本例中为 <strong>allure_results</strong> 这个目录。</p></li><li><p>最后，执行如下命令：</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">allure serve ./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">allure serve ./allure_results</span></span></code></pre></div><p>你会发现 Categories 里出现了我们刚刚配置的值 Ignored tests：</p>`,13),D=p('<h4 id="_4-显示历次运行的-trends" tabindex="-1">4.显示历次运行的 trends <a class="header-anchor" href="#_4-显示历次运行的-trends" aria-label="Permalink to &quot;4.显示历次运行的 trends&quot;">​</a></h4><p>同样地，默认生成的 Allure 报告不包括历次运行信息 Trends，如果想添加历次运行信息到Trends，步骤如下。</p><ul><li>执行完测试后，不要执行 allure serve 命令，转而执行 allure generate。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">allure generate .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">allure generate .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">allure_results</span></span></code></pre></div><p>这个操作会生成一个新的文件夹，名为 allure-report。拷贝 allure-report 文件夹下的 history 文件夹，及其子文件夹到 allure_results 这个目录中。</p><ul><li>在新的一次测试执行后执行 allure serve，即可把历史记录带到 Allure 报告中。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">allure serve ./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">allure serve ./allure_results</span></span></code></pre></div><p>执行完后，打开 Allure 测试报告，你将看到 Trend 的内容。</p>',8),T=p(`<h4 id="_5-为-allure-测试报告添加执行人" tabindex="-1">5.为 Allure 测试报告添加执行人 <a class="header-anchor" href="#_5-为-allure-测试报告添加执行人" aria-label="Permalink to &quot;5.为 Allure 测试报告添加执行人&quot;">​</a></h4><p>同样地，默认的 Allure 测试报告也不显示 Executor，这是因为 Executor 通常是由 Builder 自动生成的，比如通过 Jenkins plugin<a href="http://wiki.jenkins-ci.org/display/JENKINS/Allure+Plugin" target="_blank" rel="noreferrer">Allure Jenkins Plugin</a> 来生成。</p><blockquote><p>关于如何使用 Allure Jenkins Plugin 配置 Allure，你可以在课后另外了解。</p></blockquote><ul><li>当然你也可以自己生成， 首先创建名称为<strong>executor.json</strong> 的文件，内容如下：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;jenkins&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;url&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http://helloqa.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;buildOrder&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;buildName&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;allure-report_deploy#1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;buildUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http://helloqa.com#1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;reportUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http://helloqa.com#1/AllureReport&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;reportName&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting Allure Report&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;jenkins&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;url&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http://helloqa.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;buildOrder&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;buildName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;allure-report_deploy#1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;buildUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http://helloqa.com#1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;reportUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http://helloqa.com#1/AllureReport&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;reportName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting Allure Report&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>然后，拷贝 <strong>executor.json</strong> 到 <strong>allure_results</strong> 这个目录中去。</p></li><li><p>最后， 执行如下命令即可：</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">allure serve ./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">allure serve ./allure_results</span></span></code></pre></div><p>执行完后，打开 Allure 测试报告，你将看到 Executor 的信息：</p>`,8),w=p('<h4 id="_6-allure-测试报告实现错误自动截图" tabindex="-1">6.Allure 测试报告实现错误自动截图 <a class="header-anchor" href="#_6-allure-测试报告实现错误自动截图" aria-label="Permalink to &quot;6.Allure 测试报告实现错误自动截图&quot;">​</a></h4><p>在测试时，特别是 UI 自动化测试错误发生时，我们会想通过系统截图的方式，来更清楚地了解系统当时的状态，于是错误截图就很必要。</p><p>使用 Allure 自动实现错误截图，可以参考下我在本讲 conftest.py 这个文件中定义的如下函数：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest_runtest_makereport</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest_runtest_makereport</span></span></code></pre></div><p>现在，我们来看下错误截图的实际效果。</p><p>首先，通过如下命令运行所有测试：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">alluredir</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">allure_results </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">flag </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">browser chrome</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">alluredir</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">allure_results </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">flag </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">browser chrome</span></span></code></pre></div><p>执行成功后，通过如下命令打开测试报告：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">allure serve ./allure_results</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">allure serve ./allure_results</span></span></code></pre></div><p>可以看到如下结果：</p>',10),x=s("p",null,[a("点击图中的 "),s("strong",null,'"FEATURES BY STORIES"，'),a(" 进入 "),s("strong",null,"Behaviors"),a(" 页面，展开后你可以看到下图：")],-1),P=s("p",null,"可以看到，第 3 条测试用例执行失败了，截图信息也自动保存了。",-1),S=s("h4",{id:"_7-通过-allure-测试报告查看测试用例详情",tabindex:"-1"},[a("7.通过 Allure 测试报告查看测试用例详情 "),s("a",{class:"header-anchor",href:"#_7-通过-allure-测试报告查看测试用例详情","aria-label":'Permalink to "7.通过 Allure 测试报告查看测试用例详情"'},"​")],-1),M=s("p",null,"Allures 生成后，我们可以通过点击左侧的导航栏，进入到不同的页面，观察 Allure 的不同维度的测试分析。这里我不再一一阐述，我重点分享一下如下页面：",-1),I=p('<p>你点击任何一条测试用例，都能在 OverView 里看到这个测试用例的详细情况，包括测试所属的模块、测试用例的重要程度，以及这个测试用例对应 Jira 的 story 等信息，非常清晰明了。</p><h3 id="自研的测试报告" tabindex="-1">自研的测试报告 <a class="header-anchor" href="#自研的测试报告" aria-label="Permalink to &quot;自研的测试报告&quot;">​</a></h3><p>除了用 Allure 来生成测试报告外，你的测试报告也可以自研，那么自研怎么操作呢？</p><p>最简单的方式是你写一个 HTML 模板，然后把涉及运行信息的要素，比如运行环境、执行人、测试成功条数、测试失败条数定义为变量，然后在你的自研框架运行完后，把这些变量替换为真实的值即可。</p><p>至于图表的操作，你可以使用 hicharts、echarts 等图表可视化工具完成。因为这里涉及 HTML 还有一些前端的代码知识，我就不再详细介绍。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过本章的学习，你应该对如何在 pytest 中应用 Allure 测试报告非常熟悉了，对于自研的测试报告的实现原理你应该也能有一点了解。</p><p>测试报告在测试中的重要性不言而喻，一个好的测试报告，不仅可以让项目中的每个人时刻了解当前项目的质量情况，还可以通过对历史版本的测试报告进行分析，提炼出软件质量的演变过程。</p><p>除此之外，一个美观、功能齐全的测试报告，也能让项目管理者更加理解测试工程师的辛勤付出，更助于项目组获取更多的资源支持，可见测试报告在技术之外的重要性。</p><p>好的，我是蔡超，我们下节课再见。</p><p>关于更多开发测试报告的内容，可以关注我的公众号 iTesting 并回复&quot;测试报告&quot;进行查阅。</p><hr><p><a href="https://wj.qq.com/s2/7506053/9b01" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p>',13);function R(N,V,L,H,O,j){const n=e("Image");return t(),r("div",null,[E,l(n,{alt:"图片.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_EytCAMU4XAALj-7uE8Bw866.png"}),a(),y,l(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_EywGASEwDAAHKaRT1ypk100.png"}),a(),i,u,l(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_EywmANf7zAANMZsUM5TA694.png"}),a(),F,d,l(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_EyxKAO_77AANWLzqSMlI490.png"}),a(),q,_,l(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/72/C8/Ciqc1F_EyxqAOAI5AAFGT4Lob0E476.png"}),a(),h,g,l(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/72/C8/Ciqc1F_EyyGAXE03AADRzNiqu0U526.png"}),a(),C,m,l(n,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image/M00/72/C8/Ciqc1F_EyymAIOWAAAMXxTLD16w983.png"}),a(),A,b,l(n,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_EyzCANxDXAAOfMQG3Dvg894.png"}),a(),B,l(n,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image/M00/72/C8/Ciqc1F_Ey0uALwAnAALgzgxDn64368.png"}),a(),f,l(n,{alt:"图片9.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_Ey1mAEBDMAAHzvqGkl94603.png"}),a(),v,l(n,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image/M00/72/C8/Ciqc1F_Ey2CAWRjwAADdVWfDWFk007.png"}),a(),k,l(n,{alt:"图片11.png",src:"https://s0.lgstatic.com/i/image/M00/72/C8/Ciqc1F_Ey2-AAf2rAADu51OZMIw212.png"}),a(),D,l(n,{alt:"图片12.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_Ey3iAILzPAADDNRhR5wE627.png"}),a(),T,l(n,{alt:"图片13.png",src:"https://s0.lgstatic.com/i/image/M00/72/C9/Ciqc1F_Ey4iAPkZGAAEEPbshx8s382.png"}),a(),w,l(n,{alt:"图片14.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_Ey5OAaEzMAAHmNLdCM-o051.png"}),a(),x,l(n,{alt:"图片15.png",src:"https://s0.lgstatic.com/i/image/M00/72/C9/Ciqc1F_Ey6WAbEY8AAMRLlxLq50690.png"}),a(),P,S,M,l(n,{alt:"图片16.png",src:"https://s0.lgstatic.com/i/image/M00/72/D4/CgqCHl_Ey62APFSEAALVV7C1Jes905.png"}),a(),I])}const G=o(c,[["render",R]]);export{U as __pageData,G as default};
