import{_ as p,j as e,o,g as t,k as n,h as l,Q as s}from"./chunks/framework.4e7d56ce.js";const D=JSON.parse('{"title":"26读写分离：普通主从架构和分片主从架构分别是如何实现的？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3585) 26  读写分离：普通主从架构和分片主从架构分别是如何实现的？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3585) 26  读写分离：普通主从架构和分片主从架构分别是如何实现的？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3585) 26  读写分离：普通主从架构和分片主从架构分别是如何实现的？.md"},c=s(`<h1 id="_26读写分离-普通主从架构和分片主从架构分别是如何实现的" tabindex="-1">26读写分离：普通主从架构和分片主从架构分别是如何实现的？ <a class="header-anchor" href="#_26读写分离-普通主从架构和分片主从架构分别是如何实现的" aria-label="Permalink to &quot;26读写分离：普通主从架构和分片主从架构分别是如何实现的？&quot;">​</a></h1><p>在 <strong>&quot;17 | 路由引擎：如何理解分片路由核心类 ShardingRouter 的运作机制？&quot;</strong> 课时中介绍 ShardingSphere 的路由引擎时，我们提到了 ShardingMasterSlaveRouter 类，该类用于对分片信息进行读写分离。</p><p>今天我们就将关注这个话题，看看 ShardingSphere 是如何实现主从架构下的读写分离路由的？</p><h3 id="shardingmasterslaverouter" tabindex="-1">ShardingMasterSlaveRouter <a class="header-anchor" href="#shardingmasterslaverouter" aria-label="Permalink to &quot;ShardingMasterSlaveRouter&quot;">​</a></h3><p>我们来到 ShardingMasterSlaveRouter 类。从效果上讲，读写分离实际上也是一种路由策略，所以该类同样位于 sharding-core-route 工程下。</p><p>ShardingMasterSlaveRouter 的入口函数 route 如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLRouteResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLRouteResult sqlRouteResult) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (MasterSlaveRule each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> masterSlaveRules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//根据每条 MasterSlaveRule 执行路由方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(each, sqlRouteResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sqlRouteResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLRouteResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLRouteResult sqlRouteResult) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (MasterSlaveRule each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> masterSlaveRules) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//根据每条 MasterSlaveRule 执行路由方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(each, sqlRouteResult);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlRouteResult;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里引入了一个规则类 MasterSlaveRule，根据每条 MasterSlaveRule 会执行独立的 route 方法，并最终返回组合的 SQLRouteResult。</p><p>这个 route 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MasterSlaveRule masterSlaveRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLRouteResult sqlRouteResult) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">RoutingUnit</span><span style="color:#E1E4E8;">&gt; toBeRemoved </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">RoutingUnit</span><span style="color:#E1E4E8;">&gt; toBeAdded </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (RoutingUnit each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> sqlRouteResult.</span><span style="color:#B392F0;">getRoutingResult</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">masterSlaveRule.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(each.</span><span style="color:#B392F0;">getDataSourceName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            toBeRemoved.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(each);</span></span>
<span class="line"><span style="color:#E1E4E8;">            String actualDataSourceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 判断是否走主库</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isMasterRoute</span><span style="color:#E1E4E8;">(sqlRouteResult.</span><span style="color:#B392F0;">getSqlStatementContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                MasterVisitedManager.</span><span style="color:#B392F0;">setMasterVisited</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                actualDataSourceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> masterSlaveRule.</span><span style="color:#B392F0;">getMasterDataSourceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">//如果从库有多个，默认采用轮询策略，也可以选择随机访问策略</span></span>
<span class="line"><span style="color:#E1E4E8;">                actualDataSourceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> masterSlaveRule.</span><span style="color:#B392F0;">getLoadBalanceAlgorithm</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        masterSlaveRule.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), masterSlaveRule.</span><span style="color:#B392F0;">getMasterDataSourceName</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(masterSlaveRule.</span><span style="color:#B392F0;">getSlaveDataSourceNames</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            toBeAdded.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createNewRoutingUnit</span><span style="color:#E1E4E8;">(actualDataSourceName, each));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlRouteResult.</span><span style="color:#B392F0;">getRoutingResult</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">removeAll</span><span style="color:#E1E4E8;">(toBeRemoved);</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlRouteResult.</span><span style="color:#B392F0;">getRoutingResult</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(toBeAdded);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MasterSlaveRule masterSlaveRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLRouteResult sqlRouteResult) {</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">RoutingUnit</span><span style="color:#24292E;">&gt; toBeRemoved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">RoutingUnit</span><span style="color:#24292E;">&gt; toBeAdded </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (RoutingUnit each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> sqlRouteResult.</span><span style="color:#6F42C1;">getRoutingResult</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">masterSlaveRule.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(each.</span><span style="color:#6F42C1;">getDataSourceName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            toBeRemoved.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(each);</span></span>
<span class="line"><span style="color:#24292E;">            String actualDataSourceName;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 判断是否走主库</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isMasterRoute</span><span style="color:#24292E;">(sqlRouteResult.</span><span style="color:#6F42C1;">getSqlStatementContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                MasterVisitedManager.</span><span style="color:#6F42C1;">setMasterVisited</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                actualDataSourceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> masterSlaveRule.</span><span style="color:#6F42C1;">getMasterDataSourceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">//如果从库有多个，默认采用轮询策略，也可以选择随机访问策略</span></span>
<span class="line"><span style="color:#24292E;">                actualDataSourceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> masterSlaveRule.</span><span style="color:#6F42C1;">getLoadBalanceAlgorithm</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        masterSlaveRule.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), masterSlaveRule.</span><span style="color:#6F42C1;">getMasterDataSourceName</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(masterSlaveRule.</span><span style="color:#6F42C1;">getSlaveDataSourceNames</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            toBeAdded.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createNewRoutingUnit</span><span style="color:#24292E;">(actualDataSourceName, each));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        sqlRouteResult.</span><span style="color:#6F42C1;">getRoutingResult</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(toBeRemoved);</span></span>
<span class="line"><span style="color:#24292E;">        sqlRouteResult.</span><span style="color:#6F42C1;">getRoutingResult</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(toBeAdded);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在读写分离场景下，因为涉及路由信息的调整，所以这段代码中构建了两个临时变量 toBeRemoved 和 toBeAdded，它们分别用于保存需要移除和需要新增的 RoutingUnit。</p><p>然后，我们来计算真正需要访问的数据库名 actualDataSourceName，这里就需要判断是否走主库。请注意，在当前的 4.X 版本中，ShardingSphere 只支持单主库的应用场景，而从库可以有很多个。</p><p>判断是否为主库的 isMasterRoute 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isMasterRoute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatement sqlStatement) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsLockSegment</span><span style="color:#E1E4E8;">(sqlStatement) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SelectStatement) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> MasterVisitedManager.</span><span style="color:#B392F0;">isMasterVisited</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> HintManager.</span><span style="color:#B392F0;">isMasterRouteOnly</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isMasterRoute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatement sqlStatement) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsLockSegment</span><span style="color:#24292E;">(sqlStatement) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SelectStatement) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> MasterVisitedManager.</span><span style="color:#6F42C1;">isMasterVisited</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> HintManager.</span><span style="color:#6F42C1;">isMasterRouteOnly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里有四个条件，满足任何一个都将确定走主库路由。前面两个比较好理解，后面的 MasterVisitedManager 实际上是一个线程安全的容器，包含了该线程访问是否涉及主库的信息。</p><p>而基于我们在 <strong>&quot;08 | 读写分离：如何集成分库分表+数据库主从架构？&quot;</strong> 课时中对 Hint 概念和强制路由机制的理解，HintManager 是 ShardingSphere 中对数据库 Hint 访问机制的实现类，可以设置强制走主库或者非查询操作走主库。</p><p>如果不走主库路由，那么流程就会走到从库路由；而如果从库有多个，就需要采用一定的策略来确定具体的某一个从库。ShardingSphere 在这方面提供了一个 MasterSlaveLoadBalanceAlgorithm 接口完成从库的选择，请注意该接口位于 sharding-core-api 工程中，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveLoadBalanceAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeBasedSPI</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 在从库列表中选择一个从库进行路由</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">masterDataSourceName</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">slaveDataSourceNames</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveLoadBalanceAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeBasedSPI</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">// 在从库列表中选择一个从库进行路由</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">masterDataSourceName</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">slaveDataSourceNames</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 MasterSlaveLoadBalanceAlgorithm 接口继承了 TypeBasedSPI 接口，表明它是一个 SPI。然后它的参数中包含了一个 MasterDataSourceName 和一批 SlaveDataSourceName，最终返回一个 SlaveDataSourceName。</p><p>ShardingSphere 提供了两个 MasterSlaveLoadBalanceAlgorithm 的实现类，一个是支持随机算法的 RandomMasterSlaveLoadBalanceAlgorithm，另一个则是支持轮询算法的 RoundRobinMasterSlaveLoadBalanceAlgorithm。</p><p>我们在 sharding-core-common 工程中发现了对应的 ServiceLoader 类 MasterSlaveLoadBalanceAlgorithmServiceLoader，而具体 MasterSlaveLoadBalanceAlgorithm 实现类的获取是在 MasterSlaveRule 中。</p><p>请注意，在日常开发过程中，我们实际上不通过配置体系设置这个负载均衡算法，也能正常运行负载均衡策略。</p><p>MasterSlaveRule 中的 createMasterSlaveLoadBalanceAlgorithm 方法给出了答案：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MasterSlaveLoadBalanceAlgorithm </span><span style="color:#B392F0;">createMasterSlaveLoadBalanceAlgorithm</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> LoadBalanceStrategyConfiguration loadBalanceStrategyConfiguration) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取 MasterSlaveLoadBalanceAlgorithmServiceLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">    MasterSlaveLoadBalanceAlgorithmServiceLoader serviceLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveLoadBalanceAlgorithmServiceLoader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据配置来动态加载负载均衡算法实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> loadBalanceStrategyConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> serviceLoader.</span><span style="color:#B392F0;">newService</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> serviceLoader.</span><span style="color:#B392F0;">newService</span><span style="color:#E1E4E8;">(loadBalanceStrategyConfiguration.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">(), loadBalanceStrategyConfiguration.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MasterSlaveLoadBalanceAlgorithm </span><span style="color:#6F42C1;">createMasterSlaveLoadBalanceAlgorithm</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LoadBalanceStrategyConfiguration loadBalanceStrategyConfiguration) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取 MasterSlaveLoadBalanceAlgorithmServiceLoader</span></span>
<span class="line"><span style="color:#24292E;">    MasterSlaveLoadBalanceAlgorithmServiceLoader serviceLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveLoadBalanceAlgorithmServiceLoader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据配置来动态加载负载均衡算法实现类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> loadBalanceStrategyConfiguration</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> serviceLoader.</span><span style="color:#6F42C1;">newService</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> serviceLoader.</span><span style="color:#6F42C1;">newService</span><span style="color:#24292E;">(loadBalanceStrategyConfiguration.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">(), loadBalanceStrategyConfiguration.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，当 loadBalanceStrategyConfiguration 配置不存在时，会直接使用 serviceLoader.newService() 方法完成 SPI 实例的创建。我们回顾 <strong>&quot;13 | 微内核架构：ShardingSphere 如何实现系统的扩展性？&quot;</strong> 中的介绍，就会知道该方法会获取系统中第一个可用的 SPI 实例。</p><p>我们同样在 sharding-core-common 工程中找到了 SPI 的配置信息，如下图所示：</p>`,26),E=s(`<p>针对 MasterSlaveLoadBalanceAlgorithm 的 SPI 配置</p><p>按照这里的配置信息，第一个获取的 SPI 实例应该是 RoundRobinMasterSlaveLoadBalanceAlgorithm，即<strong>轮询策略</strong>，它的 getDataSource 方法实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String name, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String masterDataSourceName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> slaveDataSourceNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        AtomicInteger count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> COUNTS.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(name) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> COUNTS.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(name) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        COUNTS.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(name, count);</span></span>
<span class="line"><span style="color:#E1E4E8;">        count.</span><span style="color:#B392F0;">compareAndSet</span><span style="color:#E1E4E8;">(slaveDataSourceNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> slaveDataSourceNames.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(count.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> slaveDataSourceNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String name, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String masterDataSourceName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> slaveDataSourceNames) {</span></span>
<span class="line"><span style="color:#24292E;">        AtomicInteger count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> COUNTS.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(name) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> COUNTS.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(name) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        COUNTS.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(name, count);</span></span>
<span class="line"><span style="color:#24292E;">        count.</span><span style="color:#6F42C1;">compareAndSet</span><span style="color:#24292E;">(slaveDataSourceNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> slaveDataSourceNames.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(count.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> slaveDataSourceNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然，我们也可以通过配置选择随机访问策略，RandomMasterSlaveLoadBalanceAlgorithm 的 getDataSource 更加简单，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String name, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String masterDataSourceName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> slaveDataSourceNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> slaveDataSourceNames.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ThreadLocalRandom.</span><span style="color:#B392F0;">current</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(slaveDataSourceNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String name, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String masterDataSourceName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> slaveDataSourceNames) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> slaveDataSourceNames.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ThreadLocalRandom.</span><span style="color:#6F42C1;">current</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(slaveDataSourceNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，关于 ShardingMasterSlaveRouter 的介绍就结束了，通过该类我们可以完成分片信息的主从路由，从而实现读写分离。</p><p>在 ShardingSphere 中，还存在一个不含分片信息的主从路由类 MasterSlaveRouter，其实现过程与 ShardingMasterSlaveRouter 非常类似，让我们一起来看一下。</p><h3 id="masterslaverouter" tabindex="-1">MasterSlaveRouter <a class="header-anchor" href="#masterslaverouter" aria-label="Permalink to &quot;MasterSlaveRouter&quot;">​</a></h3><p>从命名上看，ShardingMasterSlaveRouter 类的作用是完成分片条件下的主从路由。通过前面内容的介绍，我们知道该类主要用于路由引擎中，即在普通 ShardingRouter 上再添加一层读写分离路由机制。可以想象这是一种比较偏底层的读写分离机制，我们只是在路由环节对目标数据库做了调整。</p><p>接下来，我们将从另一个维度出发讨论读写分离，从更高的层次控制整个读写分离过程。在 sharding-jdbc-core 工程中，我们曾讨论过 ShardingDataSourceFactory 类，而这次我们的目标是 MasterSlaveDataSourceFactory，该工厂类的作用是创建一个 MasterSlaveDataSource，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveDataSourceFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DataSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">dataSourceMap</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MasterSlaveRuleConfiguration </span><span style="color:#FFAB70;">masterSlaveRuleConfig</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveDataSource</span><span style="color:#E1E4E8;">(dataSourceMap, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveRule</span><span style="color:#E1E4E8;">(masterSlaveRuleConfig), props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveDataSourceFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DataSource</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">dataSourceMap</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MasterSlaveRuleConfiguration </span><span style="color:#E36209;">masterSlaveRuleConfig</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties </span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveDataSource</span><span style="color:#24292E;">(dataSourceMap, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveRule</span><span style="color:#24292E;">(masterSlaveRuleConfig), props);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MasterSlaveDataSource 的定义如下所示，可以看到该类同样扩展了 AbstractDataSourceAdapter 类。关于 AbstractDataSourceAdapter 以及针对 Connection 和 Statement 的各种适配器类我们已经在 <strong>&quot;03 | 规范兼容：JDBC 规范与 ShardingSphere 是什么关系？&quot;</strong> 中进行了详细讨论，这里不再展开。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveDataSource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractDataSourceAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MasterSlaveRuntimeContext runtimeContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DataSource</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">dataSourceMap</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MasterSlaveRule </span><span style="color:#FFAB70;">masterSlaveRule</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(dataSourceMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">        runtimeContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveRuntimeContext</span><span style="color:#E1E4E8;">(dataSourceMap, masterSlaveRule, props, </span><span style="color:#B392F0;">getDatabaseType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MasterSlaveConnection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveConnection</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getDataSourceMap</span><span style="color:#E1E4E8;">(), runtimeContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveDataSource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractDataSourceAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MasterSlaveRuntimeContext runtimeContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DataSource</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">dataSourceMap</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MasterSlaveRule </span><span style="color:#E36209;">masterSlaveRule</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties </span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(dataSourceMap);</span></span>
<span class="line"><span style="color:#24292E;">        runtimeContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveRuntimeContext</span><span style="color:#24292E;">(dataSourceMap, masterSlaveRule, props, </span><span style="color:#6F42C1;">getDatabaseType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MasterSlaveConnection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveConnection</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getDataSourceMap</span><span style="color:#24292E;">(), runtimeContext);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与其他 DataSource 一样，MasterSlaveDataSource 同样负责创建 RuntimeContext 上下文对象和 Connection 对象。先来看这里的 MasterSlaveRuntimeContext，我们发现与 ShardingRuntimeContext 相比，这个类要简单一点，只是构建了所需的 DatabaseMetaData 并进行缓存。</p><p>然后，我们再来看 MasterSlaveConnection。与其他 Connection 类一样，这里也有一组 createStatement 和 prepareStatement 方法用来获取 Statement 和 PreparedStatement，分别对应 MasterSlaveStatement 和 MasterSlavePreparedStatement。</p><p>我们来看 MasterSlaveStatement 中的实现，首先还是关注于它的查询方法 executeQuery：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResultSet </span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(sql)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLException</span><span style="color:#E1E4E8;">(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//清除 StatementExecutor 中的相关变量</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">clearPrevious</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过 MasterSlaveRouter 获取目标 DataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; dataSourceNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> masterSlaveRouter.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(sql, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> dataSourceNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;Cannot support executeQuery for DML or DDL&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//从 Connection 中获取 Statement</span></span>
<span class="line"><span style="color:#E1E4E8;">        Statement statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(dataSourceNames.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">(resultSetType, resultSetConcurrency, resultSetHoldability);</span></span>
<span class="line"><span style="color:#E1E4E8;">        routedStatements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(statement);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//执行查询并返回结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(sql);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultSet </span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(sql)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLException</span><span style="color:#24292E;">(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//清除 StatementExecutor 中的相关变量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">clearPrevious</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过 MasterSlaveRouter 获取目标 DataSource</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; dataSourceNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> masterSlaveRouter.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(sql, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> dataSourceNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;Cannot support executeQuery for DML or DDL&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//从 Connection 中获取 Statement</span></span>
<span class="line"><span style="color:#24292E;">        Statement statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(dataSourceNames.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">(resultSetType, resultSetConcurrency, resultSetHoldability);</span></span>
<span class="line"><span style="color:#24292E;">        routedStatements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(statement);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//执行查询并返回结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(sql);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与 ShardingStatement 不同，上述方法并没有通过分片路由获取目标 dataSourceNames，而是直接通过 MasterSlaveRouter 来实现这一目标。同时，我们注意到这里也没有通过 ShardingSphere 的执行引擎和归并引擎来执行 SQL 并归并结果，而是直接调用了 statement 的 executeQuery 完成 SQL 的执行。显然，这个核心步骤是通过 MasterSlaveRouter 实现的路由机制。</p><p>MasterSlaveRouter 的 route 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatement sqlStatement) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果是强制主库路由</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isMasterRoute</span><span style="color:#E1E4E8;">(sqlStatement)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            MasterVisitedManager.</span><span style="color:#B392F0;">setMasterVisited</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(masterSlaveRule.</span><span style="color:#B392F0;">getMasterDataSourceName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过负载均衡执行从库路由</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(masterSlaveRule.</span><span style="color:#B392F0;">getLoadBalanceAlgorithm</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDataSource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                masterSlaveRule.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), masterSlaveRule.</span><span style="color:#B392F0;">getMasterDataSourceName</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(masterSlaveRule.</span><span style="color:#B392F0;">getSlaveDataSourceNames</span><span style="color:#E1E4E8;">())));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatement sqlStatement) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果是强制主库路由</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isMasterRoute</span><span style="color:#24292E;">(sqlStatement)) {</span></span>
<span class="line"><span style="color:#24292E;">            MasterVisitedManager.</span><span style="color:#6F42C1;">setMasterVisited</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(masterSlaveRule.</span><span style="color:#6F42C1;">getMasterDataSourceName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过负载均衡执行从库路由</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(masterSlaveRule.</span><span style="color:#6F42C1;">getLoadBalanceAlgorithm</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                masterSlaveRule.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), masterSlaveRule.</span><span style="color:#6F42C1;">getMasterDataSourceName</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(masterSlaveRule.</span><span style="color:#6F42C1;">getSlaveDataSourceNames</span><span style="color:#24292E;">())));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码似曾相识，相关的处理流程，以及背后的 LoadBalanceAlgorithm 我们在介绍 ShardingMasterSlaveRouter 类时已经做了全面展开。通过 dataSourceNames 中的任何一个目标数据库名，我们就可以构建 Connection 并创建用于执行查询的 Statement。</p><p>然后，我们来看 MasterSlaveStatement 的 executeUpdate 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//清除 StatementExecutor 中的相关变量</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">clearPrevious</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> masterSlaveRouter.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(sql, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//从 Connection 中获取 Statement</span></span>
<span class="line"><span style="color:#E1E4E8;">            Statement statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(each).</span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">(resultSetType, resultSetConcurrency, resultSetHoldability);</span></span>
<span class="line"><span style="color:#E1E4E8;">            routedStatements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(statement);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//执行更新</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeUpdate</span><span style="color:#E1E4E8;">(sql);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeUpdate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//清除 StatementExecutor 中的相关变量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">clearPrevious</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> masterSlaveRouter.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(sql, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//从 Connection 中获取 Statement</span></span>
<span class="line"><span style="color:#24292E;">            Statement statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(each).</span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">(resultSetType, resultSetConcurrency, resultSetHoldability);</span></span>
<span class="line"><span style="color:#24292E;">            routedStatements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(statement);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//执行更新</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeUpdate</span><span style="color:#24292E;">(sql);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的流程是直接通过 masterSlaveRouter 获取各个目标数据库，然后分别构建 Statement 进行执行。</p><p>同样，我们来到 MasterSlavePreparedStatement 类，先来看它的其中一个构造函数（其余的也类似），如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlavePreparedStatement</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MasterSlaveConnection connection, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> resultSetType, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> resultSetConcurrency, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> resultSetHoldability) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(sql)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLException</span><span style="color:#E1E4E8;">(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建 MasterSlaveRouter</span></span>
<span class="line"><span style="color:#E1E4E8;">        masterSlaveRouter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MasterSlaveRouter</span><span style="color:#E1E4E8;">(connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRule</span><span style="color:#E1E4E8;">(), connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParseEngine</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">                connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getProps</span><span style="color:#E1E4E8;">().</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(ShardingPropertiesConstant.SQL_SHOW));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> masterSlaveRouter.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(sql, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;">//对每个目标 DataSource 从 Connection 中获取 PreparedStatement</span></span>
<span class="line"><span style="color:#E1E4E8;">            PreparedStatement preparedStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(each).</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(sql, resultSetType, resultSetConcurrency, resultSetHoldability);</span></span>
<span class="line"><span style="color:#E1E4E8;">            routedStatements.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(preparedStatement);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlavePreparedStatement</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MasterSlaveConnection connection, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> resultSetType, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> resultSetConcurrency, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> resultSetHoldability) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(sql)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLException</span><span style="color:#24292E;">(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建 MasterSlaveRouter</span></span>
<span class="line"><span style="color:#24292E;">        masterSlaveRouter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MasterSlaveRouter</span><span style="color:#24292E;">(connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRule</span><span style="color:#24292E;">(), connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParseEngine</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">                connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getProps</span><span style="color:#24292E;">().</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(ShardingPropertiesConstant.SQL_SHOW));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> masterSlaveRouter.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(sql, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6A737D;">//对每个目标 DataSource 从 Connection 中获取 PreparedStatement</span></span>
<span class="line"><span style="color:#24292E;">            PreparedStatement preparedStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(each).</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(sql, resultSetType, resultSetConcurrency, resultSetHoldability);</span></span>
<span class="line"><span style="color:#24292E;">            routedStatements.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(preparedStatement);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里构建了 MasterSlaveRouter，然后对于通过 MasterSlaveRouter 路由获取的每个数据库，分别创建一个 PreparedStatement 并保存到 routedStatements 列表中。</p><p>然后，我们来看 MasterSlavePreparedStatement 的 executeQuery 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResultSet </span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> routedStatements.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;Cannot support executeQuery for DDL&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> routedStatements.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultSet </span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> routedStatements.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;Cannot support executeQuery for DDL&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> routedStatements.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于上述 executeQuery 方法而言，我们只需要获取 routedStatements 中的任何一个 PreparedStatement 进行执行即可。而对于 Update 操作，MasterSlavePreparedStatement 的执行流程也与 MasterSlaveStatement 的一致，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeUpdate</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (PreparedStatement each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> routedStatements) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> each.</span><span style="color:#B392F0;">executeUpdate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeUpdate</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (PreparedStatement each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> routedStatements) {</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> each.</span><span style="color:#6F42C1;">executeUpdate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，ShardingSphere 中与读写分离相关的核心类以及主要流程介绍完毕。总体而言，这部分的内容因为不涉及分片操作，所以整体结构还是比较直接和明确的。尤其是我们在了解了分片相关的 ShardingDataSource、ShardingConnection、ShardingStatement 和 ShardingPreparedStatement 之后再来理解今天的内容就显得特别简单，很多底层的适配器模式等内容前面都介绍过。</p><p>作为总结，我们还是简单梳理一下读写分离相关的类层结构，如下所示：</p>`,33),y=s('<h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>在今天的内容中，我们接触到了分布式系统开发过程中非常常见的一个话题，即<strong>负载均衡</strong> 。负载均衡的场景就类似于在多个从库中选择一个目标库进行路由一样，通常需要依赖于一定的负载均衡算法，ShardingSphere 中就提供了<strong>随机</strong> 和<strong>轮询</strong>这两种常见的实现，我们可以在日常开发过程中参考它的实现方法。</p><p>当然，因为 MasterSlaveLoadBalanceAlgorithm 接口是一个 SPI，所以我们也可以定制化新的负载均衡算法并动态加载到 ShardingSphere。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>读写分离是 ShardingSphere 分片引擎中的最后一部分内容，在实际应用过程中，我们可以在分片引擎下嵌入读写分离机制，也可以单独使用这个功能。</p><p>所以在实现上，ShardingSphere 也提供了两种不同的实现类：一种是分片环境下的 ShardingMasterSlaveRouter，一种是用于单独使用的 MasterSlaveRouter，我们对这两个实现类的原理进行了详细的分析和展开。</p><p>最后这里给你留一道思考题：ShardingSphere 中，读写分离引擎与负载均衡算法的集成过程是怎么样的？</p><p>从下一课时开始，我们将进入 ShardingSphere 中另一个核心模块的源码解析，这就是分布式事务。</p><p><a href="https://wj.qq.com/s2/7238084/d702/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品~</a></p>',9);function i(u,S,d,F,g,v){const a=e("Image");return o(),t("div",null,[c,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/4D/43/Ciqc1F9Z3gGABwnKAAB1KuzlwD4571.png"}),l(),E,n(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/4D/4F/CgqCHl9Z3jGAH6CLAAByFyKIpQ0068.png"}),l(),y])}const C=p(r,[["render",i]]);export{D as __pageData,C as default};
