import{_ as a,j as l,o as p,g as o,k as e,h as t,Q as s}from"./chunks/framework.a0d18f64.js";const g=JSON.parse('{"title":"第42讲：使用SpringHATEOAS增强REST服务的语义","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1846) 第42讲：使用 Spring HATEOAS 增强 REST 服务的语义.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1846) 第42讲：使用 Spring HATEOAS 增强 REST 服务的语义.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1846) 第42讲：使用 Spring HATEOAS 增强 REST 服务的语义.md"},c=s(`<h1 id="第42讲-使用springhateoas增强rest服务的语义" tabindex="-1">第42讲：使用SpringHATEOAS增强REST服务的语义 <a class="header-anchor" href="#第42讲-使用springhateoas增强rest服务的语义" aria-label="Permalink to &quot;第42讲：使用SpringHATEOAS增强REST服务的语义&quot;">​</a></h1><p>从本课时开始，我们将介绍一些与云原生微服务开发相关的话题，这些话题之间相互独立，都围绕一个较小的主题来展开。本课时将介绍如何使用 Spring HATEOAS 增强 REST 服务的语义。</p><h3 id="hateoas" tabindex="-1">HATEOAS <a class="header-anchor" href="#hateoas" aria-label="Permalink to &quot;HATEOAS&quot;">​</a></h3><p>REST 是目前大部分 API 使用的架构，在实践 REST 架构时，不同的实现可能有不同的处理方式。很多 API 虽然号称采用 REST 架构，但是并没有遵循 REST 架构的约束要求，我们可以用 REST 成熟度模型来描述 REST 技术的成熟程度。</p><p>该模型把 REST 服务按照成熟度划分成 4 个层次：</p><ul><li><p>第一个层次（Level 0）的 Web 服务只是使用 HTTP 作为传输方式，实际上它只是远程方法调用（RPC）的一种具体形式，SOAP 和 XML-RPC 都属于此类；</p></li><li><p>第二个层次（Level 1）的 Web 服务引入了资源（Resource）的概念，每个资源有对应的标识符和表达（Representation）；</p></li><li><p>第三个层次（Level 2）的 Web 服务使用不同的 HTTP 方法来进行不同的操作，并且使用 HTTP 状态码来表示不同的结果，比如 HTTP GET 方法来获取资源，HTTP DELETE 方法来删除资源；</p></li><li><p>第四个层次（Level 3）的 Web 服务使用 HATEOAS，在资源的表达中包含了链接信息，客户端可以根据链接来发现可以执行的动作。</p></li></ul><p>从上述 REST 成熟度模型中可以看到，使用 HATEOAS 的 REST 服务是成熟度最高的。HATEOAS（Hypermedia as the Engine of Application State）是 REST 架构风格中最复杂的约束，也是构建成熟 REST 服务的核心。它的重要性在于打破了客户端和服务器之间严格的契约，使得客户端可以智能地发现服务所提供的功能，而 REST 服务本身的演化和更新也变得更加容易。</p><p>对于不使用 HATEOAS 的 REST 服务，客户端和服务器的实现之间是紧密耦合的，客户端需要根据服务器提供的相关文档来了解服务所暴露的资源和对应的操作。当服务的实现发生了变化时，比如修改了资源的 URI，客户端也需要进行相应的修改。</p><p>在使用 HATEOAS 的 REST 服务中，客户端通过服务提供的资源的表达来智能地发现可以执行的操作。当服务发生了变化时，客户端并不需要作出修改，因为资源的 URI 和其他信息都是动态发现的。</p><p>HATEOAS 和 OpenAPI 所要解决的问题不同，OpenAPI 规范提出了一种描述 API 的标准方式。开发者需要从 API 的文档中手动地查找到调用某个 API 的地址，还需要从文档中了解不同 API 之间的对应关系。以一个订单的 API 为例，当需要调用该 API 来支付订单时，需要从文档中找到相应的地址。HATEOAS 解决的是 API 的使用问题。如果订单 API 使用 HATEOAS 来实现，那么在获取到当个订单资源的表达之后，从中可以找到一个关系是 payment 的链接，其中就包含了支付订单 API 的地址。这样的使用方式，比从 API 文档中查找要方便很多。</p><h3 id="spring-hateoas" tabindex="-1">Spring HATEOAS <a class="header-anchor" href="#spring-hateoas" aria-label="Permalink to &quot;Spring HATEOAS&quot;">​</a></h3><p>Spring 框架下的 spring-hateoas 子项目为 Spring Web 项目增加了 HATEOAS 支持，对于 Spring Boot 应用来说，只需要添加对 spring-boot-starter-hateoas 的依赖即可。下面介绍 Spring HATEOAS 的使用。</p><h4 id="链接" tabindex="-1">链接 <a class="header-anchor" href="#链接" aria-label="Permalink to &quot;链接&quot;">​</a></h4><p>HATEOAS 中最重要的概念是<strong>链接（Link）</strong>，用来在不同的资源之间建立联系，链接由两个部分组成，分别是链接所指向的超文本的地址，以及链接所代表的关系的名称。链接的地址通常是同一服务中不同的 REST 资源的地址，而关系则根据当前资源和链接指向的资源之间的联系来确定。</p><p>IANA 定义了一些常用的关系名称，如下表所示。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>self</td><td>指向当前资源的链接</td></tr><tr><td>edit</td><td>编辑当前资源的链接</td></tr><tr><td>first</td><td>指向列表中的第一个资源的链接</td></tr><tr><td>next</td><td>指向列表中的下一个资源的链接</td></tr><tr><td>prev</td><td>指向列表中的上一个资源的链接</td></tr><tr><td>last</td><td>指向列表中的最后一个资源的链接</td></tr><tr><td>collection</td><td>指向当前资源所在的集合的链接</td></tr><tr><td>item</td><td>指向当前资源中所代表的集合中的一个元素的链接</td></tr><tr><td>payment</td><td>对当前资源进行支付操作的链接</td></tr></tbody></table><p>在开发中应该优先使用这些标准的关系，这些关系都在 IanaLinkRelations 中有常量定义。下面的代码给出了 Spring HATEOAS 中 Link 类的用法，通过 of 方法来创建 Link 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Link.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/self&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//默认使用关系self </span></span>
<span class="line"><span style="color:#E1E4E8;">Link.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/edit&quot;</span><span style="color:#E1E4E8;">, IanaLinkRelations.EDIT); </span><span style="color:#6A737D;">//使用IANA定义的标准关系 </span></span>
<span class="line"><span style="color:#E1E4E8;">Link.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/custom&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;custom&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//使用自定义关系</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Link.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/self&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//默认使用关系self </span></span>
<span class="line"><span style="color:#24292E;">Link.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/edit&quot;</span><span style="color:#24292E;">, IanaLinkRelations.EDIT); </span><span style="color:#6A737D;">//使用IANA定义的标准关系 </span></span>
<span class="line"><span style="color:#24292E;">Link.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/custom&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;custom&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//使用自定义关系</span></span></code></pre></div><p>在创建 Link 对象时，使用的链接地址通常不是固定的，而是基于某种特定的模板来创建的，比如 /order/{orderId} 这样的模板。Spring HATEOAS 提供了对 URI 模板的支持。</p><p>在下面的代码中，我们直接使用带路径参数的 URI 模板来创建 Link 对象，通过 expand 方法可以用实际值来替代模板中的变量，从而得到实际的链接地址。Link 对象是不可变的，对该对象的方法的调用，都会创建一个新的 Link 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Link link </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Link.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/order/{orderId}&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">link </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> link.</span><span style="color:#B392F0;">expand</span><span style="color:#E1E4E8;">(ImmutableMap.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderId&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 链接的地址为 &quot;/order/123&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Link link </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Link.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/order/{orderId}&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">link </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> link.</span><span style="color:#6F42C1;">expand</span><span style="color:#24292E;">(ImmutableMap.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderId&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 链接的地址为 &quot;/order/123&quot;</span></span></code></pre></div><p>如果需要对 URI 模板进行更复杂的操作，可以使用 UriTemplate 类。在下面的代码中，我们使用 UriTemplate.of 方法来创建 UriTemplate 对象，再通过 with 方法来添加新的查询参数，Link 对象在创建时可以使用 UriTemplate 对象作为参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">UriTemplate uriTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UriTemplate.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/customer/{customerId}/orders&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(TemplateVariable.</span><span style="color:#B392F0;">requestParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;start&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(TemplateVariable.</span><span style="color:#B392F0;">requestParameterContinued</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">Link link </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Link.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(uriTemplate, </span><span style="color:#9ECBFF;">&quot;order&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">expand</span><span style="color:#E1E4E8;">(ImmutableMap.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customerId&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;start&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;e&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#6A737D;">// 链接的地址为 &quot;/customer/123/orders?start=s&amp;end=e&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">UriTemplate uriTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UriTemplate.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/customer/{customerId}/orders&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(TemplateVariable.</span><span style="color:#6F42C1;">requestParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(TemplateVariable.</span><span style="color:#6F42C1;">requestParameterContinued</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">Link link </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Link.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(uriTemplate, </span><span style="color:#032F62;">&quot;order&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">expand</span><span style="color:#24292E;">(ImmutableMap.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customerId&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;s&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;e&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#6A737D;">// 链接的地址为 &quot;/customer/123/orders?start=s&amp;end=e&quot;</span></span></code></pre></div><h4 id="表达模型" tabindex="-1">表达模型 <a class="header-anchor" href="#表达模型" aria-label="Permalink to &quot;表达模型&quot;">​</a></h4><p>为了在资源的超文本表达中添加链接，需要对应用中已有的模型进行封装，这些链接并不属于应用模型的一部分，可以使用标准的方式来进行封装。Spring HATEOAS 提供了进行封装所使用的模型，包括 RepresentationModel 类及其子类。</p><p>下面是 RepresentationModel 类及其子类的结构图。</p>`,26),E=s(`<p>这些模型的说明如下表所示。</p><table><thead><tr><th><strong>模型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>RepresentationModel</td><td>基础的模型，包含 Link 对象的列表</td></tr><tr><td>CollectionModel</td><td>用来封装实体集合的模型</td></tr><tr><td>EntityModel</td><td>用来封装单个实体的模型</td></tr><tr><td>PagedModel</td><td>包含了分页信息的模型</td></tr></tbody></table><p>这些表达模型的使用方式取决于超文本模型与应用模型的匹配程度。如果表达模型仅用一个应用模型就可以完全表示，那么使用 EntityModel 来封装即可；否则需要创建新的模型类并继承自 RepresentationModel 类。</p><p>下面代码中的 getAddress 方法来自地址管理服务的 AddressController 类，与之前的实现相比，该方法增加了对 HATEOAS 的支持。该方法的返回值中包含的对象类型，从 AddressVO 类变成了 EntityModel 类，也就是用 EntityModel 来进行封装。在 getAddress 方法的实现中，EntityModel.of 方法用来封装已有的 AddressVO 对象，并添加新的关系为 self 的 Link 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/address/{addressId}&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">EntityModel</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AddressVO</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;addressId&quot;</span><span style="color:#E1E4E8;">) String addressId, </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;areaLevel&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">required</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">defaultValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> areaLevel) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressService.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(addressId, areaLevel) </span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(address </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> EntityModel.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(address, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">linkTo</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">methodOn</span><span style="color:#E1E4E8;">(AddressController.class).</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(addressId, areaLevel)).</span><span style="color:#B392F0;">withSelfRel</span><span style="color:#E1E4E8;">())) </span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(ResponseEntity</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">ok) </span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">orElseGet</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> ResponseEntity.</span><span style="color:#B392F0;">notFound</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/address/{addressId}&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">EntityModel</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AddressVO</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addressId&quot;</span><span style="color:#24292E;">) String addressId, </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;areaLevel&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">required</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">defaultValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> areaLevel) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressService.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(addressId, areaLevel) </span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(address </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> EntityModel.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(address, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">linkTo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">methodOn</span><span style="color:#24292E;">(AddressController.class).</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(addressId, areaLevel)).</span><span style="color:#6F42C1;">withSelfRel</span><span style="color:#24292E;">())) </span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(ResponseEntity</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">ok) </span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ResponseEntity.</span><span style="color:#6F42C1;">notFound</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在创建 Link 对象时，我们并没有直接指定超文本的链接，而是从控制器的方法调用中创建。上述代码中使用的 methodOn 和 linkTo 方法都来自 WebMvcLinkBuilder 类，用来从 Spring MVC 控制器的方法中创建链接。methodOn 方法的作用是捕获对 AddressController 类的 getAddress 方法的调用，并传递了与当前方法一样的参数值；methodOn 方法的返回值被传递给 linkTo 方法来创建链接，withSelfRel 方法的作用是使用 self 作为链接的关系。</p><p>下面代码中的 JSON 文本是 getAddress 方法的返回值，从中可以看到 _links 属性中包含的链接。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;a8530c62-d837-4aa3-9078-4b47f3c20c6b&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;areaId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;addressLine&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;王府井社区居委会-0&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lng&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">116.414943</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lat&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">39.914146</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;areas&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;_links&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;self&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;href&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http://localhost:8502/address/a8530c62-d837-4aa3-9078-4b47f3c20c6b?areaLevel=0&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;a8530c62-d837-4aa3-9078-4b47f3c20c6b&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;areaId&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;addressLine&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;王府井社区居委会-0&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lng&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">116.414943</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lat&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">39.914146</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;areas&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;_links&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;self&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;href&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http://localhost:8502/address/a8530c62-d837-4aa3-9078-4b47f3c20c6b?areaLevel=0&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在表达一个集合时，可以使用 CollectionModel 来封装。下面的代码是添加了 HATEOAS 支持之后的 AddressController 类的 search 方法，该方法的返回值类型从 List<code>&lt;AddressVO&gt;</code> 变成了 CollectionModel&lt;EntityModel<code>&lt;AddressVO&gt;</code>&gt;，其中 CollectionModel 用来封装 List<code>&lt;AddressVO&gt;</code> 对象，而 EntityModel 用来封装单个的 AddressVO 对象。</p><p>对于 AddressService 类的 search 方法返回的 List<code>&lt;AddressVO&gt;</code> 对象，把其中包含的每个 AddressVO 对象都用 EntityModel.of 方法来封装，并添加相关的链接。整个集合再通过 CollectionModel.of 方法来封装。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/search&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CollectionModel</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">EntityModel</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AddressVO</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;areaCode&quot;</span><span style="color:#E1E4E8;">) Long areaCode, </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;query&quot;</span><span style="color:#E1E4E8;">) String query) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> CollectionModel </span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressService.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(areaCode, query) </span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(address </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> EntityModel.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(address, </span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">linkTo</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#B392F0;">methodOn</span><span style="color:#E1E4E8;">(AddressController.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">                          .</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">                      .</span><span style="color:#B392F0;">withSelfRel</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">              ).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">()), </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">linkTo</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">methodOn</span><span style="color:#E1E4E8;">(AddressController.class).</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(areaCode, query)) </span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">withSelfRel</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/search&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CollectionModel</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">EntityModel</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AddressVO</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;areaCode&quot;</span><span style="color:#24292E;">) Long areaCode, </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;query&quot;</span><span style="color:#24292E;">) String query) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> CollectionModel </span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressService.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(areaCode, query) </span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(address </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> EntityModel.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(address, </span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">linkTo</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#6F42C1;">methodOn</span><span style="color:#24292E;">(AddressController.class) </span></span>
<span class="line"><span style="color:#24292E;">                          .</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">                      .</span><span style="color:#6F42C1;">withSelfRel</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">              ).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">()), </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">linkTo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">methodOn</span><span style="color:#24292E;">(AddressController.class).</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(areaCode, query)) </span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">withSelfRel</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面代码中的 JSON 文本是 search 方法的返回值，该 JSON 文本的结构与不使用 HATEOAS 之前存在很大差异，AddressVO 对象的列表被移到了 _embedded 属性中，这是因为 Spring HATEOAS 默认使用的是 HAL 格式，这种格式的改变会对使用者产生影响。值得一提的是 AddressVO 对象中增加了链接，这个链接的存在，使得客户端在解析了列表中的对象之后，可以自动发现访问每个对象的地址，而不再需要查看文档。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;_embedded&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;addressVOList&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">      { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2f934c5f-7e08-4902-a4c7-4df752361e42&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;areaId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;addressLine&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;王府井社区居委会-0&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;lng&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">116.414938</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;lat&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">39.914294</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;areas&quot;</span><span style="color:#E1E4E8;">: [], </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;_links&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;self&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;href&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http://localhost:8502/address/2f934c5f-7e08-4902-a4c7-4df752361e42?areaLevel=1&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    ] </span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;_links&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;self&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;href&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;http://localhost:8502/search?areaCode=110101001015&amp;query=%E7%8E%8B%E5%BA%9C%E4%BA%95%E7%A4%BE%E5%8C%BA%E5%B1%85%E5%A7%94%E4%BC%9A&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;_embedded&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;addressVOList&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">      { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2f934c5f-7e08-4902-a4c7-4df752361e42&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;areaId&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;addressLine&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;王府井社区居委会-0&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;lng&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">116.414938</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;lat&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">39.914294</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;areas&quot;</span><span style="color:#24292E;">: [], </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;_links&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;self&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;href&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http://localhost:8502/address/2f934c5f-7e08-4902-a4c7-4df752361e42?areaLevel=1&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    ] </span></span>
<span class="line"><span style="color:#24292E;">  }, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;_links&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;self&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;href&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;http://localhost:8502/search?areaCode=110101001015&amp;query=%E7%8E%8B%E5%BA%9C%E4%BA%95%E7%A4%BE%E5%8C%BA%E5%B1%85%E5%A7%94%E4%BC%9A&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="entitylinks" tabindex="-1">EntityLinks <a class="header-anchor" href="#entitylinks" aria-label="Permalink to &quot;EntityLinks&quot;">​</a></h4><p>在创建链接时，我们之前的做法是从 Spring MVC 的控制器方法中来生成链接。在很多时候，控制器的方法只是对某个领域模型 LCRUD 操作的集合，在这种情况下，可以使用 EntityLinks 对象来生成链接，并使用控制器方法更简单。</p><p>如果要使用 EntityLinks 对象，控制器需要遵循一定的规范，如下所示：</p><ul><li><p>在控制器类上使用 @ExposesResourceFor 注解来声明领域对象的类型；</p></li><li><p>在控制器类上声明访问集合资源的路径；</p></li><li><p>在控制器类的某个方法上有访问单个资源路径的映射。</p></li></ul><p>下面是乘客管理服务中 PassengerController 类的部分代码。在 PassengerController 类上通过 @ExposesResourceFor 注解声明了对象类型 PassengerVO，并通过 @RequestMapping 注解声明了访问集合资源的路径。在 getPassenger 方法中，我们使用 EntityLinks 对象的 linkToItemResource 方法来生成访问单个 PassengerVO 资源的链接。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ExposesResourceFor</span><span style="color:#E1E4E8;">(PassengerVO.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/passenger&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassengerController</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  PassengerService passengerService; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  EntityLinks entityLinks; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{id}&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity&lt;EntityModel&lt;</span><span style="color:#F97583;">PassengerVO</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">getPassenger</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">passengerId</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.passengerService.</span><span style="color:#B392F0;">getPassenger</span><span style="color:#E1E4E8;">(passengerId) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(passenger </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> EntityModel </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(passenger, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entityLinks </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">linkToItemResource</span><span style="color:#E1E4E8;">(PassengerVO.class, passengerId) </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">withSelfRel</span><span style="color:#E1E4E8;">())) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(ResponseEntity</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">ok) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(ResponseEntity.</span><span style="color:#B392F0;">notFound</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ExposesResourceFor</span><span style="color:#24292E;">(PassengerVO.class) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/passenger&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassengerController</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  PassengerService passengerService; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  EntityLinks entityLinks; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{id}&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity&lt;EntityModel&lt;</span><span style="color:#D73A49;">PassengerVO</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">getPassenger</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">passengerId</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.passengerService.</span><span style="color:#6F42C1;">getPassenger</span><span style="color:#24292E;">(passengerId) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(passenger </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> EntityModel </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(passenger, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.entityLinks </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">linkToItemResource</span><span style="color:#24292E;">(PassengerVO.class, passengerId) </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">withSelfRel</span><span style="color:#24292E;">())) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(ResponseEntity</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">ok) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(ResponseEntity.</span><span style="color:#6F42C1;">notFound</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>EntityLinks 对象中还包含了一个 linkToCollectionResource 方法来生成访问集合资源的链接。</p><h4 id="组装模型" tabindex="-1">组装模型 <a class="header-anchor" href="#组装模型" aria-label="Permalink to &quot;组装模型&quot;">​</a></h4><p>在之前 AddressController 类的实现中，getAddress 和 search 方法都需要创建封装 AddressVO 对象的 EntityModel。为了减少代码重复，可以把模型的创建统一起来。</p><p>下面代码中的 AddressModel 类继承自 RepresentationModel 类，作为 AddressVO 对象的表达模型。表达模型只是属性的简单集合，并没有复杂的逻辑，因此所有的字段都是声明为 public 的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressModel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RepresentationModel</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">AddressModel</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String id; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Integer areaId; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Long areaCode; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String addressLine; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> BigDecimal lng; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> BigDecimal lat; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressModel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RepresentationModel</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">AddressModel</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String id; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Integer areaId; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Long areaCode; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String addressLine; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> BigDecimal lng; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> BigDecimal lat; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面代码中的 AddressModelAssembler 类用来把 AddressVO 对象转换成 AddressModel 对象，相关的转换操作在 toModel 方法中实现，最主要的工作是添加相关的链接。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressModelAssembler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RepresentationModelAssemblerSupport</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">AddressVO</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">AddressModel</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressModelAssembler</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(AddressController.class, AddressModel.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> AddressModel </span><span style="color:#B392F0;">toModel</span><span style="color:#E1E4E8;">(AddressVO </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    AddressModel model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressModel</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">linkTo</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">methodOn</span><span style="color:#E1E4E8;">(AddressController.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(entity.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">withSelfRel</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entity.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.areaId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entity.</span><span style="color:#B392F0;">getAreaId</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.areaCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entity.</span><span style="color:#B392F0;">getAreaCode</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.addressLine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entity.</span><span style="color:#B392F0;">getAddressLine</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.lat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entity.</span><span style="color:#B392F0;">getLat</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.lng </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entity.</span><span style="color:#B392F0;">getLng</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressModelAssembler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">RepresentationModelAssemblerSupport</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">AddressVO</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">AddressModel</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressModelAssembler</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(AddressController.class, AddressModel.class); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AddressModel </span><span style="color:#6F42C1;">toModel</span><span style="color:#24292E;">(AddressVO </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    AddressModel model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressModel</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">linkTo</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">methodOn</span><span style="color:#24292E;">(AddressController.class) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(entity.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">withSelfRel</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    model.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entity.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    model.areaId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entity.</span><span style="color:#6F42C1;">getAreaId</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    model.areaCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entity.</span><span style="color:#6F42C1;">getAreaCode</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    model.addressLine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entity.</span><span style="color:#6F42C1;">getAddressLine</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    model.lat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entity.</span><span style="color:#6F42C1;">getLat</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    model.lng </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entity.</span><span style="color:#6F42C1;">getLng</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要注意的是，在 RepresentationModelAssemblerSupport 类中有一个 createModelWithId 方法，可以创建 AddressModel 对象并添加关系为 self 的链接，这个方法通过控制器类上的 @RequestMapping 注解来计算出引用单个资源的路径。不过这种方式对 AddressController 类并不适用，因为在 AddressController 类中，访问单个资源的路径模板是 /address/{addressId}，而不是 /{addressId}。对于其他控制器类来说，如果遵循 RepresentationModelAssemblerSupport 类的惯例，那么使用 createModelWithId 方法会更简单。</p><p>在使用 AddressModelAssembler 类之后，进行模型转换的代码可以大大简化。在下面的代码中，AddressController 类的 search 方法使用 AddressModelAssembler 类的 toCollectionModel 方法来转换列表。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/search&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CollectionModel</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AddressModel</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;areaCode&quot;</span><span style="color:#E1E4E8;">) Long areaCode, </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;query&quot;</span><span style="color:#E1E4E8;">) String query) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.assembler </span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">toCollectionModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressService.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(areaCode, query)); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/search&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CollectionModel</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AddressModel</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;areaCode&quot;</span><span style="color:#24292E;">) Long areaCode, </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;query&quot;</span><span style="color:#24292E;">) String query) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.assembler </span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">toCollectionModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressService.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(areaCode, query)); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="处理模型" tabindex="-1">处理模型 <a class="header-anchor" href="#处理模型" aria-label="Permalink to &quot;处理模型&quot;">​</a></h4><p>我们一般在创建表达模型的同时，就完成了对链接的创建。在有些情况下，可能会需要对某些表达模型进行独立的处理，相应的处理方式可能不适合放在某个模型中，比如根据配置在运行时动态调整。这个时候，就可以实现 RepresentationModelProcessor 接口来添加对任意模型的处理。</p><p>在下面的代码中，AreaProcessor 类添加了对 AddressModel 的处理，并添加了关系为 area 的链接，指向获取地址所在的区域的详细信息 API。Spring HATEOAS 可以自动识别 RepresentationModelProcessor 类型的 bean，并应用其中包含的对模型的修改。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AreaProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RepresentationModelProcessor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">AddressModel</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> AddressModel </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(AddressModel </span><span style="color:#FFAB70;">model</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">linkTo</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">methodOn</span><span style="color:#E1E4E8;">(AddressController.class).</span><span style="color:#B392F0;">getArea</span><span style="color:#E1E4E8;">(model.areaCode, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">withRel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;area&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AreaProcessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">RepresentationModelProcessor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">AddressModel</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AddressModel </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(AddressModel </span><span style="color:#E36209;">model</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">linkTo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">methodOn</span><span style="color:#24292E;">(AddressController.class).</span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">(model.areaCode, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">withRel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;area&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="媒体类型" tabindex="-1">媒体类型 <a class="header-anchor" href="#媒体类型" aria-label="Permalink to &quot;媒体类型&quot;">​</a></h4><p>媒体类型的作用是把 HATEOAS 模型转换成特定的超文本表达形式，大部分的表达形式以 JSON 作为基本的格式，只不过具体的格式有所不同。Spring HATEOAS 默认使用超文本应用语言（Hypertext Application Language，HAL）作为表达模型时的格式。HAL 使用 application/hal+json 作为媒体类型，其中最基本的概念是资源和链接。资源中可以包含链接和内嵌资源，内嵌资源包含在 _embedded 属性中，而链接信息则包含在 _links 属性中。</p><p>除了 HAL 之外，Spring HATEOAS 还支持其他不同的媒体类型，应用也可以开发自己的媒体类型。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>HATEOAS 可以增强 REST 服务的语义，从而方便客户端更好地使用服务，自动发现服务所提供的功能。通过本课时的学习，你可以了解 REST 成熟度模型、HATEOAS 的基本概念，以及如何使用 Spring HATEOAS 为 Spring Boot 微服务增加 HATEOAS 支持。</p><p>最后呢，成老师邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我们最关注的点。<a href="https://wj.qq.com/s2/6902680/3fb2/" target="_blank" rel="noreferrer">点击链接，即可参与课程评价</a>。</p>`,39);function y(i,d,u,F,A,C){const n=l("Image");return p(),o("div",null,[c,e(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/3E/BC/CgqCHl8tFzaAcnP-AAA8DI88jKY723.png"}),t(),E])}const h=a(r,[["render",y]]);export{g as __pageData,h as default};
