import{_ as o,j as e,o as t,g as c,k as l,h as n,s,Q as p}from"./chunks/framework.cfb14fe0.js";const P=JSON.parse('{"title":"12简易版RPC框架实现（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4603) 12  简易版 RPC 框架实现（下）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4603) 12  简易版 RPC 框架实现（下）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4603) 12  简易版 RPC 框架实现（下）.md"},E=s("h1",{id:"_12简易版rpc框架实现-下",tabindex:"-1"},[n("12简易版RPC框架实现（下） "),s("a",{class:"header-anchor",href:"#_12简易版rpc框架实现-下","aria-label":'Permalink to "12简易版RPC框架实现（下）"'},"​")],-1),y=s("p",null,"在上一课时中，我们介绍了整个简易 RPC 框架项目的结构和工作原理，并且介绍了简易 RPC 框架底层的协议结构、序列化/反序列化实现、压缩实现以及编解码器的具体实现。本课时我们将继续自底向上，介绍简易 RPC 框架的剩余部分实现。",-1),i=s("h3",{id:"transport-相关实现",tabindex:"-1"},[n("transport 相关实现 "),s("a",{class:"header-anchor",href:"#transport-相关实现","aria-label":'Permalink to "transport 相关实现"'},"​")],-1),F=s("p",null,"正如前文介绍 Netty 线程模型的时候提到，我们不能在 Netty 的 I/O 线程中执行耗时的业务逻辑。在 Demo RPC 框架的 Server 端接收到请求时，首先会通过上面介绍的 DemoRpcDecoder 反序列化得到请求消息，之后我们会通过一个自定义的 ChannelHandler（DemoRpcServerHandler）将请求提交给业务线程池进行处理。",-1),C=s("p",null,"在 Demo RPC 框架的 Client 端接收到响应消息的时候，也是先通过 DemoRpcDecoder 反序列化得到响应消息，之后通过一个自定义的 ChannelHandler（DemoRpcClientHandler）将响应返回给上层业务。",-1),u=s("p",null,"DemoRpcServerHandler 和 DemoRpcClientHandler 都继承自 SimpleChannelInboundHandler，如下图所示：",-1),D=p(`<p>DemoRpcClientHandler 和 DemoRpcServerHandler 的继承关系图</p><p>下面我们就来看一下这两个自定义的 ChannelHandler 实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcServerHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">SimpleChannelInboundHandler</span><span style="color:#E1E4E8;">&lt;Message&lt;</span><span style="color:#F97583;">Request</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 业务线程池</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Executor executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newCachedThreadPool</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelRead0</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          Message&lt;</span><span style="color:#F97583;">Request</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> extraInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getExtraInfo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Constants.</span><span style="color:#B392F0;">isHeartBeat</span><span style="color:#E1E4E8;">(extraInfo)) { </span><span style="color:#6A737D;">// 心跳消息，直接返回即可</span></span>
<span class="line"><span style="color:#E1E4E8;">            channelHandlerContext.</span><span style="color:#B392F0;">writeAndFlush</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 非心跳消息，直接封装成Runnable提交到业务线程</span></span>
<span class="line"><span style="color:#E1E4E8;">        executor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvokeRunnable</span><span style="color:#E1E4E8;">(message, cxt));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcClientHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">SimpleChannelInboundHandler</span><span style="color:#E1E4E8;">&lt;Message&lt;</span><span style="color:#F97583;">Response</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">channelRead0</span><span style="color:#E1E4E8;">(ChannelHandlerContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        Message&lt;</span><span style="color:#F97583;">Response</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        NettyResponseFuture responseFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              Connection.IN_FLIGHT_REQUEST_MAP</span></span>
<span class="line"><span style="color:#E1E4E8;">                  .</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(message.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMessageId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        Response response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 心跳消息特殊处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Constants.</span><span style="color:#B392F0;">isHeartBeat</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                  message.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getExtraInfo</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            response.</span><span style="color:#B392F0;">setCode</span><span style="color:#E1E4E8;">(Constants.HEARTBEAT_CODE);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        responseFuture.</span><span style="color:#B392F0;">getPromise</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setSuccess</span><span style="color:#E1E4E8;">(response);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcServerHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">SimpleChannelInboundHandler</span><span style="color:#24292E;">&lt;Message&lt;</span><span style="color:#D73A49;">Request</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 业务线程池</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Executor executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newCachedThreadPool</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead0</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          Message&lt;</span><span style="color:#D73A49;">Request</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> extraInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getExtraInfo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Constants.</span><span style="color:#6F42C1;">isHeartBeat</span><span style="color:#24292E;">(extraInfo)) { </span><span style="color:#6A737D;">// 心跳消息，直接返回即可</span></span>
<span class="line"><span style="color:#24292E;">            channelHandlerContext.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 非心跳消息，直接封装成Runnable提交到业务线程</span></span>
<span class="line"><span style="color:#24292E;">        executor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvokeRunnable</span><span style="color:#24292E;">(message, cxt));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcClientHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">SimpleChannelInboundHandler</span><span style="color:#24292E;">&lt;Message&lt;</span><span style="color:#D73A49;">Response</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead0</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        Message&lt;</span><span style="color:#D73A49;">Response</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        NettyResponseFuture responseFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              Connection.IN_FLIGHT_REQUEST_MAP</span></span>
<span class="line"><span style="color:#24292E;">                  .</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(message.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMessageId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Response response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 心跳消息特殊处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Constants.</span><span style="color:#6F42C1;">isHeartBeat</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                  message.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getExtraInfo</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            response.</span><span style="color:#6F42C1;">setCode</span><span style="color:#24292E;">(Constants.HEARTBEAT_CODE);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        responseFuture.</span><span style="color:#6F42C1;">getPromise</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setSuccess</span><span style="color:#24292E;">(response);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，这里有两个点需要特别说明一下。一个点是 Server 端的 InvokeRunnable，在这个 Runnable 任务中会根据请求的 serviceName、methodName 以及参数信息，调用相应的方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvokeRunnable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ChannelHandlerContext ctx;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Message&lt;</span><span style="color:#F97583;">Request</span><span style="color:#E1E4E8;">&gt; message;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Response response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Request request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 这里提供BeanManager对所有业务Bean进行管理，其底层在内存中维护了</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 一个业务Bean实例的集合。感兴趣的同学可以尝试接入Spring等容器管</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 理业务Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BeanManager.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 下面通过反射调用Bean中的相应方法</span></span>
<span class="line"><span style="color:#E1E4E8;">            Method method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethod</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                request.</span><span style="color:#B392F0;">getMethodName</span><span style="color:#E1E4E8;">(), request.</span><span style="color:#B392F0;">getArgTypes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(bean, request.</span><span style="color:#B392F0;">getArgs</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 省略异常处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">setResult</span><span style="color:#E1E4E8;">(result); </span><span style="color:#6A737D;">// 设置响应结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将响应消息返回给客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">        ctx.</span><span style="color:#B392F0;">writeAndFlush</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(message.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(), response));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvokeRunnable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ChannelHandlerContext ctx;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Message&lt;</span><span style="color:#D73A49;">Request</span><span style="color:#24292E;">&gt; message;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Response response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Object result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Request request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 这里提供BeanManager对所有业务Bean进行管理，其底层在内存中维护了</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 一个业务Bean实例的集合。感兴趣的同学可以尝试接入Spring等容器管</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 理业务Bean</span></span>
<span class="line"><span style="color:#24292E;">            Object bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BeanManager.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 下面通过反射调用Bean中的相应方法</span></span>
<span class="line"><span style="color:#24292E;">            Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                request.</span><span style="color:#6F42C1;">getMethodName</span><span style="color:#24292E;">(), request.</span><span style="color:#6F42C1;">getArgTypes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(bean, request.</span><span style="color:#6F42C1;">getArgs</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 省略异常处理</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">setResult</span><span style="color:#24292E;">(result); </span><span style="color:#6A737D;">// 设置响应结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将响应消息返回给客户端</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(message.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(), response));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另一个点是 Client 端的 Connection，它是用来暂存已发送出去但未得到响应的请求，这样，在响应返回时，就可以查找到相应的请求以及 Future，从而将响应结果返回给上层业务逻辑，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Closeable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> AtomicLong ID_GENERATOR </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">, NettyResponseFuture&lt;</span><span style="color:#F97583;">Response</span><span style="color:#E1E4E8;">&gt;&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        IN_FLIGHT_REQUEST_MAP </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ChannelFuture future;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AtomicBoolean isConnected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicBoolean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;">(ChannelFuture </span><span style="color:#FFAB70;">future</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isConnected</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.isConnected.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(isConnected);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> NettyResponseFuture&lt;</span><span style="color:#F97583;">Response</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(Message&lt;</span><span style="color:#F97583;">Request</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">timeOut</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成并设置消息ID</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> messageId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ID_GENERATOR.</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        message.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setMessageId</span><span style="color:#E1E4E8;">(messageId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建消息关联的Future</span></span>
<span class="line"><span style="color:#E1E4E8;">        NettyResponseFuture responseFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NettyResponseFuture</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                timeOut, message, future.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultPromise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultEventLoop</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将消息ID和关联的Future记录到IN_FLIGHT_REQUEST_MAP集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        IN_FLIGHT_REQUEST_MAP.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(messageId, responseFuture);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            future.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">writeAndFlush</span><span style="color:#E1E4E8;">(message); </span><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 发送请求异常时，删除对应的Future</span></span>
<span class="line"><span style="color:#E1E4E8;">            IN_FLIGHT_REQUEST_MAP.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(messageId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> responseFuture;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略getter/setter以及close()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Closeable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AtomicLong ID_GENERATOR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">, NettyResponseFuture&lt;</span><span style="color:#D73A49;">Response</span><span style="color:#24292E;">&gt;&gt; </span></span>
<span class="line"><span style="color:#24292E;">        IN_FLIGHT_REQUEST_MAP </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ChannelFuture future;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AtomicBoolean isConnected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicBoolean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;">(ChannelFuture </span><span style="color:#E36209;">future</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isConnected</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.isConnected.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(isConnected);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> NettyResponseFuture&lt;</span><span style="color:#D73A49;">Response</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(Message&lt;</span><span style="color:#D73A49;">Request</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">message</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">timeOut</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成并设置消息ID</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> messageId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ID_GENERATOR.</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        message.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setMessageId</span><span style="color:#24292E;">(messageId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建消息关联的Future</span></span>
<span class="line"><span style="color:#24292E;">        NettyResponseFuture responseFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NettyResponseFuture</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                timeOut, message, future.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultPromise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultEventLoop</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将消息ID和关联的Future记录到IN_FLIGHT_REQUEST_MAP集合中</span></span>
<span class="line"><span style="color:#24292E;">        IN_FLIGHT_REQUEST_MAP.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(messageId, responseFuture);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            future.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(message); </span><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送请求异常时，删除对应的Future</span></span>
<span class="line"><span style="color:#24292E;">            IN_FLIGHT_REQUEST_MAP.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(messageId);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> responseFuture;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略getter/setter以及close()方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以看到，Connection 中没有定时清理 IN_FLIGHT_REQUEST_MAP 集合的操作，在无法正常获取响应的时候，就会导致 IN_FLIGHT_REQUEST_MAP 不断膨胀，最终 OOM。你也可以添加一个时间轮定时器，定时清理过期的请求消息，这里我们就不再展开讲述了。</p><p>完成自定义 ChannelHandler 的编写之后，我们需要再定义两个类------ DemoRpcClient 和 DemoRpcServer，分别作为 Client 和 Server 的启动入口。<strong>DemoRpcClient 的实现如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Closeable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Bootstrap clientBootstrap;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> EventLoopGroup group;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String host;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcClient</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">host</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">port</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> host;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">        clientBootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bootstrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建并配置客户端Bootstrap</span></span>
<span class="line"><span style="color:#E1E4E8;">        group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NettyEventLoopFactory.</span><span style="color:#B392F0;">eventLoopGroup</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Constants.DEFAULT_IO_THREADS, </span><span style="color:#9ECBFF;">&quot;NettyClientWorker&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        clientBootstrap.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(group)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.TCP_NODELAY, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(NioSocketChannel.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 指定ChannelHandler的顺序</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">SocketChannel</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo-rpc-encoder&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcEncoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo-rpc-decoder&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcDecoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;client-handler&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcClientHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ChannelFuture </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// 连接指定的地址和端口</span></span>
<span class="line"><span style="color:#E1E4E8;">        ChannelFuture connect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientBootstrap.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(host, port);</span></span>
<span class="line"><span style="color:#E1E4E8;">        connect.</span><span style="color:#B392F0;">awaitUninterruptibly</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> connect;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        group.</span><span style="color:#B392F0;">shutdownGracefully</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Closeable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Bootstrap clientBootstrap;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> EventLoopGroup group;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String host;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcClient</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">host</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">port</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> host;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">        clientBootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bootstrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建并配置客户端Bootstrap</span></span>
<span class="line"><span style="color:#24292E;">        group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NettyEventLoopFactory.</span><span style="color:#6F42C1;">eventLoopGroup</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            Constants.DEFAULT_IO_THREADS, </span><span style="color:#032F62;">&quot;NettyClientWorker&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        clientBootstrap.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(group)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.TCP_NODELAY, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 指定ChannelHandler的顺序</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo-rpc-encoder&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcEncoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo-rpc-decoder&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcDecoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;client-handler&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcClientHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ChannelFuture </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 连接指定的地址和端口</span></span>
<span class="line"><span style="color:#24292E;">        ChannelFuture connect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientBootstrap.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(host, port);</span></span>
<span class="line"><span style="color:#24292E;">        connect.</span><span style="color:#6F42C1;">awaitUninterruptibly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> connect;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        group.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过 DemoRpcClient 的代码我们可以看到其 ChannelHandler 的执行顺序如下：</p>`,11),d=p(`<p>客户端 ChannelHandler 结构图</p><p>另外，在创建EventLoopGroup时并没有直接使用NioEventLoopGroup，而是在 NettyEventLoopFactory 中根据当前操作系统进行选择，对于 Linux 系统，会使用 EpollEventLoopGroup，其他系统则使用 NioEventLoopGroup。</p><p>接下来我们再看<strong>DemoRpcServer 的具体实现</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcServer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EventLoopGroup bossGroup;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EventLoopGroup workerGroup;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ServerBootstrap serverBootstrap;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Channel channel;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">port</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.port </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> port;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建boss和worker两个EventLoopGroup，注意一些小细节， </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// workerGroup 是按照中的线程数是按照 CPU 核数计算得到的，</span></span>
<span class="line"><span style="color:#E1E4E8;">        bossGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NettyEventLoopFactory.</span><span style="color:#B392F0;">eventLoopGroup</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;boos&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        workerGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NettyEventLoopFactory.</span><span style="color:#B392F0;">eventLoopGroup</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">availableProcessors</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;worker&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        serverBootstrap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerBootstrap</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(bossGroup, </span></span>
<span class="line"><span style="color:#E1E4E8;">                    workerGroup).</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(ChannelOption.SO_REUSEADDR, Boolean.TRUE)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">childOption</span><span style="color:#E1E4E8;">(ChannelOption.TCP_NODELAY, Boolean.TRUE)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoggingHandler</span><span style="color:#E1E4E8;">(LogLevel.INFO))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">childHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ChannelInitializer&lt;</span><span style="color:#F97583;">SocketChannel</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">                  { </span><span style="color:#6A737D;">// 指定每个Channel上注册的ChannelHandler以及顺序</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initChannel</span><span style="color:#E1E4E8;">(SocketChannel </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                       ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demp-rpc-decoder&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcDecoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                       ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demo-rpc-encoder&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcEncoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                       ch.</span><span style="color:#B392F0;">pipeline</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addLast</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;server-handler&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcServerHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                     }</span></span>
<span class="line"><span style="color:#E1E4E8;">         });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ChannelFuture </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ChannelFuture channelFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serverBootstrap.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(port);</span></span>
<span class="line"><span style="color:#E1E4E8;">        channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channelFuture.</span><span style="color:#B392F0;">channel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        channel.</span><span style="color:#B392F0;">closeFuture</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> channelFuture;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EventLoopGroup bossGroup;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EventLoopGroup workerGroup;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ServerBootstrap serverBootstrap;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Channel channel;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">port</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> port;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建boss和worker两个EventLoopGroup，注意一些小细节， </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// workerGroup 是按照中的线程数是按照 CPU 核数计算得到的，</span></span>
<span class="line"><span style="color:#24292E;">        bossGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NettyEventLoopFactory.</span><span style="color:#6F42C1;">eventLoopGroup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;boos&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        workerGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NettyEventLoopFactory.</span><span style="color:#6F42C1;">eventLoopGroup</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">availableProcessors</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;worker&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        serverBootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrap</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(bossGroup, </span></span>
<span class="line"><span style="color:#24292E;">                    workerGroup).</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.SO_REUSEADDR, Boolean.TRUE)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">childOption</span><span style="color:#24292E;">(ChannelOption.TCP_NODELAY, Boolean.TRUE)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoggingHandler</span><span style="color:#24292E;">(LogLevel.INFO))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">                  { </span><span style="color:#6A737D;">// 指定每个Channel上注册的ChannelHandler以及顺序</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                       ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demp-rpc-decoder&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcDecoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                       ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo-rpc-encoder&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcEncoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                       ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;server-handler&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcServerHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                     }</span></span>
<span class="line"><span style="color:#24292E;">         });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ChannelFuture </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        ChannelFuture channelFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverBootstrap.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(port);</span></span>
<span class="line"><span style="color:#24292E;">        channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channelFuture.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">closeFuture</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> channelFuture;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过对 DemoRpcServer 实现的分析，我们可以知道每个 Channel 上的 ChannelHandler 顺序如下：</p>`,5),A=s("p",null,"服务端 ChannelHandler 结构图",-1),v=s("h3",{id:"registry-相关实现",tabindex:"-1"},[n("registry 相关实现 "),s("a",{class:"header-anchor",href:"#registry-相关实现","aria-label":'Permalink to "registry 相关实现"'},"​")],-1),g=s("p",null,"介绍完客户端和服务端的通信之后，我们再来看简易 RPC 框架的另一个基础能力------服务注册与服务发现能力，对应 demo-rpc 项目源码中的 registry 包。",-1),h=s("p",null,"registry 包主要是依赖 Apache Curator 实现了一个简易版本的 ZooKeeper 客户端，并基于 ZooKeeper 实现了注册中心最基本的两个功能：Provider 注册以及 Consumer 订阅。",-1),m=s("p",null,"这里我们先定义一个 Registry 接口，其中提供了注册以及查询服务实例的方法，如下图所示：",-1),B=p(`<p>ZooKeeperRegistry 是基于 curator-x-discovery 对 Registry 接口的实现类型，其中封装了之前课时介绍的 ServiceDiscovery，并在其上添加了 ServiceCache 缓存提高查询效率。ZooKeeperRegistry 的具体实现如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZookeeperRegistry</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Registry</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> InstanceSerializer </span><span style="color:#FFAB70;">serializer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> JsonInstanceSerializer</span><span style="color:#F97583;">&lt;&gt;</span><span style="color:#E1E4E8;">(ServerInfo.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ServiceDiscovery</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">serviceDiscovery</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ServiceCache</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">serviceCache</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;localhost:2181&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/demo/rpc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化CuratorFramework</span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFramework client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">(address, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动Curator客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">blockUntilConnected</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 阻塞当前线程，等待连接成</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">createContainers</span><span style="color:#E1E4E8;">(root);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化ServiceDiscovery</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDiscovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServiceDiscoveryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">(ServerInfo.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;">(client).</span><span style="color:#B392F0;">basePath</span><span style="color:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">serializer</span><span style="color:#E1E4E8;">(serializer)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDiscovery.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动ServiceDiscovery</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ServiceCache，监Zookeeper相应节点的变化，也方便后续的读取</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceDiscovery.</span><span style="color:#B392F0;">serviceCacheBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceCache.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动ServiceCache</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerService</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ServiceInstance</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">service</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">             throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDiscovery.</span><span style="color:#B392F0;">registerService</span><span style="color:#E1E4E8;">(service);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unregisterService</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ServiceInstance</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">service</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">          throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDiscovery.</span><span style="color:#B392F0;">unregisterService</span><span style="color:#E1E4E8;">(service);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServiceInstance</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queryForInstances</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 直接根据name进行过滤ServiceCache中的缓存数据 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> serviceCache.</span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(name))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZookeeperRegistry</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Registry</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> InstanceSerializer </span><span style="color:#E36209;">serializer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> JsonInstanceSerializer</span><span style="color:#D73A49;">&lt;&gt;</span><span style="color:#24292E;">(ServerInfo.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ServiceDiscovery</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">serviceDiscovery</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ServiceCache</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">serviceCache</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;localhost:2181&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">        String root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/demo/rpc&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化CuratorFramework</span></span>
<span class="line"><span style="color:#24292E;">        CuratorFramework client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">(address, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动Curator客户端</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">blockUntilConnected</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 阻塞当前线程，等待连接成</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">createContainers</span><span style="color:#24292E;">(root);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化ServiceDiscovery</span></span>
<span class="line"><span style="color:#24292E;">        serviceDiscovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceDiscoveryBuilder</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">(ServerInfo.class)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">client</span><span style="color:#24292E;">(client).</span><span style="color:#6F42C1;">basePath</span><span style="color:#24292E;">(root)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">serializer</span><span style="color:#24292E;">(serializer)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        serviceDiscovery.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动ServiceDiscovery</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ServiceCache，监Zookeeper相应节点的变化，也方便后续的读取</span></span>
<span class="line"><span style="color:#24292E;">        serviceCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceDiscovery.</span><span style="color:#6F42C1;">serviceCacheBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(root)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        serviceCache.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动ServiceCache</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerService</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ServiceInstance</span><span style="color:#24292E;">&lt;</span><span style="color:#E36209;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">service</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">             throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">        serviceDiscovery.</span><span style="color:#6F42C1;">registerService</span><span style="color:#24292E;">(service);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unregisterService</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ServiceInstance</span><span style="color:#24292E;"> </span><span style="color:#E36209;">service</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">          throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">        serviceDiscovery.</span><span style="color:#6F42C1;">unregisterService</span><span style="color:#24292E;">(service);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServiceInstance</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queryForInstances</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">String</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 直接根据name进行过滤ServiceCache中的缓存数据 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> serviceCache.</span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(name))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过对 ZooKeeperRegistry的分析可以得知，它是基于 Curator 中的 ServiceDiscovery 组件与 ZooKeeper 进行交互的，并且对 Registry 接口的实现也是通过直接调用 ServiceDiscovery 的相关方法实现的。在查询时，直接读取 ServiceCache 中的缓存数据，ServiceCache 底层在本地维护了一个 ConcurrentHashMap 缓存，通过 PathChildrenCache 监听 ZooKeeper 中各个子节点的变化，同步更新本地缓存。这里我们简单看一下 ServiceCache 的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceCacheImpl</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceCache</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">PathChildrenCacheListener</span><span style="color:#E1E4E8;">{</span><span style="color:#6A737D;">//实现PathChildrenCacheListener接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 关联的ServiceDiscovery实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ServiceDiscoveryImpl&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;  discovery;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 底层的PathChildrenCache，用于监听子节点的变化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PathChildrenCache cache; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 本地缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConcurrentMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, ServiceInstance&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; instances </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Maps.</span><span style="color:#B392F0;">newConcurrentMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;ServiceInstance&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(){ </span><span style="color:#6A737D;">// 返回本地缓存内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(instances.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">childEvent</span><span style="color:#E1E4E8;">(CuratorFramework </span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          PathChildrenCacheEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> CHILD_ADDED</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> CHILD_UPDATED</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">addInstance</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 更新本地缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">                notifyListeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> CHILD_REMOVED</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{ </span><span style="color:#6A737D;">// 更新本地缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">                instances.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">instanceIdFromData</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                notifyListeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 通知ServiceCache上注册的监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceCacheImpl</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceCache</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">PathChildrenCacheListener</span><span style="color:#24292E;">{</span><span style="color:#6A737D;">//实现PathChildrenCacheListener接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 关联的ServiceDiscovery实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ServiceDiscoveryImpl&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;  discovery;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 底层的PathChildrenCache，用于监听子节点的变化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PathChildrenCache cache; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 本地缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConcurrentMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, ServiceInstance&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; instances </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Maps.</span><span style="color:#6F42C1;">newConcurrentMap</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;ServiceInstance&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(){ </span><span style="color:#6A737D;">// 返回本地缓存内容</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(instances.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">childEvent</span><span style="color:#24292E;">(CuratorFramework </span><span style="color:#E36209;">client</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          PathChildrenCacheEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CHILD_ADDED</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CHILD_UPDATED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">addInstance</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 更新本地缓存</span></span>
<span class="line"><span style="color:#24292E;">                notifyListeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CHILD_REMOVED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{ </span><span style="color:#6A737D;">// 更新本地缓存</span></span>
<span class="line"><span style="color:#24292E;">                instances.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">instanceIdFromData</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                notifyListeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 通知ServiceCache上注册的监听器</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="proxy-相关实现" tabindex="-1">proxy 相关实现 <a class="header-anchor" href="#proxy-相关实现" aria-label="Permalink to &quot;proxy 相关实现&quot;">​</a></h3><p>在简易版 Demo RPC 框架中，Proxy 主要是为 Client 端创建一个代理，帮助客户端程序屏蔽底层的网络操作以及与注册中心之间的交互。</p><p>简易版 Demo RPC 使用 JDK 动态代理的方式生成代理，这里需要编写一个 InvocationHandler 接口的实现，即下面的 DemoRpcProxy。其中有两个核心方法：一个是 newInstance() 方法，用于生成代理对象；另一个是 invoke() 方法，当调用目标对象的时候，会执行 invoke() 方法中的代理逻辑。</p><p>下面是 DemoRpcProxy 的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcProxy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvocationHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 需要代理的服务(接口)名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String serviceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用于与Zookeeper交互，其中自带缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Registry&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; registry;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcProxy</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceName</span><span style="color:#E1E4E8;">, Registry&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span><span style="color:#6A737D;">// 初始化上述两个字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serviceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceName;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.registry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registry;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">clazz</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        Registry&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) Proxy.</span><span style="color:#B392F0;">newProxyInstance</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">getContextClassLoader</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Class</span><span style="color:#E1E4E8;">[]{clazz},</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcProxy</span><span style="color:#E1E4E8;">(clazz.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), registry));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">proxy</span><span style="color:#E1E4E8;">, Method </span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从Zookeeper缓存中获取可用的Server地址,并随机从中选择一个</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;ServiceInstance&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt;&gt; serviceInstances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">              registry.</span><span style="color:#B392F0;">queryForInstances</span><span style="color:#E1E4E8;">(serviceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServiceInstance&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; serviceInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstances</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ThreadLocalRandom.</span><span style="color:#B392F0;">current</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(serviceInstances.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建请求消息，然后调用remoteCall()方法请求上面选定的Server端</span></span>
<span class="line"><span style="color:#E1E4E8;">        String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Header header </span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Header</span><span style="color:#E1E4E8;">(MAGIC, VERSION_1...);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Message&lt;</span><span style="color:#F97583;">Request</span><span style="color:#E1E4E8;">&gt; message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(header, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">(serviceName, methodName, args));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remoteCall</span><span style="color:#E1E4E8;">(serviceInstance.</span><span style="color:#B392F0;">getPayload</span><span style="color:#E1E4E8;">(), message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">remoteCall</span><span style="color:#E1E4E8;">(ServerInfo </span><span style="color:#FFAB70;">serverInfo</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            Message </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (serverInfo </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get available server error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建DemoRpcClient连接指定的Server端</span></span>
<span class="line"><span style="color:#E1E4E8;">        DemoRpcClient demoRpcClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcClient</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              serverInfo.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">(), serverInfo.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        ChannelFuture channelFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> demoRpcClient.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">awaitUninterruptibly</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建对应的Connection对象，并发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;">(channelFuture, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        NettyResponseFuture responseFuture </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">             connection.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(message, Constants.DEFAULT_TIMEOUT);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 等待请求对应的响应</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> responseFuture.</span><span style="color:#B392F0;">getPromise</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcProxy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvocationHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 需要代理的服务(接口)名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String serviceName;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用于与Zookeeper交互，其中自带缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Registry&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; registry;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcProxy</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceName</span><span style="color:#24292E;">, Registry&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span><span style="color:#6A737D;">// 初始化上述两个字段</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceName;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.registry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registry;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">clazz</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        Registry&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建代理对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) Proxy.</span><span style="color:#6F42C1;">newProxyInstance</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">getContextClassLoader</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">[]{clazz},</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcProxy</span><span style="color:#24292E;">(clazz.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), registry));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">proxy</span><span style="color:#24292E;">, Method </span><span style="color:#E36209;">method</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从Zookeeper缓存中获取可用的Server地址,并随机从中选择一个</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;ServiceInstance&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt;&gt; serviceInstances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">              registry.</span><span style="color:#6F42C1;">queryForInstances</span><span style="color:#24292E;">(serviceName);</span></span>
<span class="line"><span style="color:#24292E;">        ServiceInstance&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; serviceInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstances</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ThreadLocalRandom.</span><span style="color:#6F42C1;">current</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(serviceInstances.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建请求消息，然后调用remoteCall()方法请求上面选定的Server端</span></span>
<span class="line"><span style="color:#24292E;">        String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Header header </span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Header</span><span style="color:#24292E;">(MAGIC, VERSION_1...);</span></span>
<span class="line"><span style="color:#24292E;">        Message&lt;</span><span style="color:#D73A49;">Request</span><span style="color:#24292E;">&gt; message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(header, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">(serviceName, methodName, args));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remoteCall</span><span style="color:#24292E;">(serviceInstance.</span><span style="color:#6F42C1;">getPayload</span><span style="color:#24292E;">(), message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">remoteCall</span><span style="color:#24292E;">(ServerInfo </span><span style="color:#E36209;">serverInfo</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            Message </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (serverInfo </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get available server error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建DemoRpcClient连接指定的Server端</span></span>
<span class="line"><span style="color:#24292E;">        DemoRpcClient demoRpcClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcClient</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              serverInfo.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">(), serverInfo.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        ChannelFuture channelFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> demoRpcClient.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">awaitUninterruptibly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建对应的Connection对象，并发送请求</span></span>
<span class="line"><span style="color:#24292E;">        Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;">(channelFuture, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        NettyResponseFuture responseFuture </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">             connection.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(message, Constants.DEFAULT_TIMEOUT);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 等待请求对应的响应</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> responseFuture.</span><span style="color:#6F42C1;">getPromise</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            Constants.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 DemoRpcProxy 的实现中我们可以看到，它依赖了 ServiceInstanceCache 获取ZooKeeper 中注册的 Server 端地址，同时依赖了 DemoRpcClient 与Server 端进行通信，上层调用方拿到这个代理对象后，就可以像调用本地方法一样进行调用，而不再关心底层网络通信和服务发现的细节。当然，这个简易版 DemoRpcProxy 的实现还有很多可以优化的地方，例如：</p><ul><li><p>缓存 DemoRpcClient 客户端对象以及相应的 Connection 对象，不必每次进行创建。</p></li><li><p>可以添加失败重试机制，在请求出现超时的时候，进行重试。</p></li><li><p>可以添加更加复杂和灵活的负载均衡机制，例如，根据 Hash 值散列进行负载均衡、根据节点 load 情况进行负载均衡等。</p></li></ul><p>你若感兴趣的话可以尝试进行扩展，以实现一个更加完善的代理层。</p><h3 id="使用方接入" tabindex="-1">使用方接入 <a class="header-anchor" href="#使用方接入" aria-label="Permalink to &quot;使用方接入&quot;">​</a></h3><p>介绍完 Demo RPC 的核心实现之后，下面我们讲解下Demo RPC 框架的使用方式。这里涉及Consumer、DemoServiceImp、Provider三个类以及 DemoService 业务接口。</p>`,14),S=p(`<p>使用接入的相关类</p><p>首先，我们定义<strong>DemoService 接口</strong>作为业务 Server 接口，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">param</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">param</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>DemoServiceImpl</strong>对 DemoService 接口的实现也非常简单，如下所示，将参数做简单修改后返回：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">param</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> param;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">param</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> param;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>了解完相应的业务接口和实现之后，我们再来看<strong>Provider</strong>的实现，它的角色类似于 Dubbo 中的 Provider，其会创建 DemoServiceImpl 这个业务 Bean 并将自身的地址信息暴露出去，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Provider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建DemoServiceImpl，并注册到BeanManager中</span></span>
<span class="line"><span style="color:#E1E4E8;">        BeanManager.</span><span style="color:#B392F0;">registerBean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoServiceImpl</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ZookeeperRegistry，并将Provider的地址信息封装成ServerInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 对象注册到Zookeeper</span></span>
<span class="line"><span style="color:#E1E4E8;">        ZookeeperRegistry&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; discovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ZookeeperRegistry&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        discovery.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServerInfo serverInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20880</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        discovery.</span><span style="color:#B392F0;">registerService</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">             ServiceInstance.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServerInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;demoService&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">payload</span><span style="color:#E1E4E8;">(serverInfo).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 启动DemoRpcServer，等待Client的请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        DemoRpcServer rpcServer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoRpcServer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20880</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        rpcServer.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Provider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建DemoServiceImpl，并注册到BeanManager中</span></span>
<span class="line"><span style="color:#24292E;">        BeanManager.</span><span style="color:#6F42C1;">registerBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoServiceImpl</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ZookeeperRegistry，并将Provider的地址信息封装成ServerInfo</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对象注册到Zookeeper</span></span>
<span class="line"><span style="color:#24292E;">        ZookeeperRegistry&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; discovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ZookeeperRegistry&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        discovery.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ServerInfo serverInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerInfo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20880</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        discovery.</span><span style="color:#6F42C1;">registerService</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">             ServiceInstance.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServerInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demoService&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">payload</span><span style="color:#24292E;">(serverInfo).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 启动DemoRpcServer，等待Client的请求</span></span>
<span class="line"><span style="color:#24292E;">        DemoRpcServer rpcServer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoRpcServer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20880</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        rpcServer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后是Consumer，它类似于 Dubbo 中的 Consumer，其会订阅 Provider 地址信息，然后根据这些信息选择一个 Provider 建立连接，发送请求并得到响应，这些过程在 Proxy 中都予以了封装，那Consumer 的实现就很简单了，可参考如下示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Consumer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ZookeeperRegistr对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        ZookeeperRegistry&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; discovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ZookeeperRegistry&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建代理对象，通过代理调用远端Server</span></span>
<span class="line"><span style="color:#E1E4E8;">        DemoService demoService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DemoRpcProxy.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(DemoService.class, discovery);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用sayHello()方法，并输出结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> demoService.</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Consumer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ZookeeperRegistr对象</span></span>
<span class="line"><span style="color:#24292E;">        ZookeeperRegistry&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; discovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ZookeeperRegistry&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建代理对象，通过代理调用远端Server</span></span>
<span class="line"><span style="color:#24292E;">        DemoService demoService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DemoRpcProxy.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(DemoService.class, discovery);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用sayHello()方法，并输出结果</span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> demoService.</span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们首先介绍了简易 RPC 框架中的<strong>transport 包</strong> ，它在上一课时介绍的编解码器基础之上，<strong>实现了服务端和客户端的通信能力</strong> 。之后讲解了<strong>registry 包</strong> 如何实现与 ZooKeeper 的交互，<strong>完善了简易 RPC 框架的服务注册与服务发现的能力</strong> 。接下来又分析了<strong>proxy 包</strong> 的实现，其中通过 JDK 动态代理的方式，<strong>帮接入方屏蔽了底层网络通信的复杂性</strong>。最后，我们编写了一个简单的 DemoService 业务接口，以及相应的 Provider 和 Consumer 接入简易 RPC 框架。</p><p>在本课时最后，留给你一个小问题：在 transport 中创建 EventLoopGroup 的时候，为什么针对 Linux 系统使用的 EventLoopGroup会有所不同呢？期待你的留言。</p><p>简易版 RPC 框架 Demo 的链接：<a href="https://github.com/xxxlxy2008/demo-prc" target="_blank" rel="noreferrer">https://github.com/xxxlxy2008/demo-prc</a> 。</p>`,13);function R(b,I,_,w,k,T){const a=e("Image");return t(),c("div",null,[E,y,i,F,C,u,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/4A/7F/Ciqc1F9R3QOAbbKRAAD4lAEEjtg767.png"}),n(),D,l(a,{alt:"Lark20200904-143159.png",src:"https://s0.lgstatic.com/i/image/M00/4A/81/Ciqc1F9R35eARBOdAAEUxDl6DGE227.png"}),n(),d,l(a,{alt:"Lark20200904-143204.png",src:"https://s0.lgstatic.com/i/image/M00/4A/8C/CgqCHl9R34eAEosNAAEZMNHAB1c561.png"}),n(),A,v,g,h,m,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/4A/7F/Ciqc1F9R3WuAd1UPAAA82c309GI280.png"}),n(),B,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/4A/7F/Ciqc1F9R3YiAXV8hAAAtXArd3J0997.png"}),n(),S])}const L=o(r,[["render",R]]);export{P as __pageData,L as default};
