import{_ as e,j as o,o as t,h as r,k as l,f as a,Q as p,s}from"./chunks/framework.d3daa342.js";const w=JSON.parse('{"title":"第28讲：深入query-graphql插件，SWRocketbot背后的英雄（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1746) 第28讲：深入 query-graphql 插件，SW Rocketbot 背后的英雄（上）.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1746) 第28讲：深入 query-graphql 插件，SW Rocketbot 背后的英雄（上）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1746) 第28讲：深入 query-graphql 插件，SW Rocketbot 背后的英雄（上）.md"},y=p(`<h1 id="第28讲-深入query-graphql插件-swrocketbot背后的英雄-上" tabindex="-1">第28讲：深入query-graphql插件，SWRocketbot背后的英雄（上） <a class="header-anchor" href="#第28讲-深入query-graphql插件-swrocketbot背后的英雄-上" aria-label="Permalink to &quot;第28讲：深入query-graphql插件，SWRocketbot背后的英雄（上）&quot;">​</a></h1><p>SkyWalking OAP 目前只提供了query-graphql-plugin 这一款查询插件，从名字就可以看出它是使用 GraphQL 实现的查询 API。本课时将深入分析 query-graphql​-plugin 模块的核心原理。</p><h3 id="启动逻辑" tabindex="-1">启动逻辑 <a class="header-anchor" href="#启动逻辑" aria-label="Permalink to &quot;启动逻辑&quot;">​</a></h3><p>首先我们需要了解的是 query-graphql-plugin 插件是如何将 GraphQL 与 OAP 自身的 JettyServer Handler 体系进行集成的。这部分集成逻辑是在 GraphQLQueryProvider 中实现的，它是 query-grapql-plugin 插件 SPI 文件中指定的唯一一个 ModuleProvider 实现，其中主要完成下面三件事：</p><ol><li><p>通过 GraphQL Java Tools 实现 GraphQL Schema 与 POJO 之间的映射，创建相应的 GraphQLSchema 对象。如何使用 GraphQL Java Tools 以及 Resolver 与 POJO 映射的映射规则在前面的 GraphQL Java Tools 入门中已经详细介绍过了。</p></li><li><p>通过 GraphQL Java API 创建 GraphQL 对象，它将处理&quot;/graphql&quot;路径上的全部请求。</p></li><li><p>创建 GraphQLQueryHandler 实例并注册到 JettyServer。GraphQLQueryHandler 会将收到的 Http 请求进行一次转换，并交给 GraphQL 对象进行处理。</p></li></ol><p>GraphQLQueryProvider 的核心实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLQueryProvider</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleProvider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> GraphQLQueryConfig config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLQueryConfig</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GraphQL graphQL;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ServiceNotProvidedException, ModuleStartException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        GraphQLSchema schema </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SchemaParser.</span><span style="color:#B392F0;">newParser</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;query-protocol/common.graphqls&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">resolvers</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Query</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mutation</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            ... ... </span><span style="color:#6A737D;">// 这里会添加所有 GraphQL Schema以及关联的 Resolver实现，后面会挑选几个展开详述</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() .</span><span style="color:#B392F0;">makeExecutableSchema</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建 GraphQL 对象， GraphQL Java提供的API</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.graphQL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GraphQL.</span><span style="color:#B392F0;">newGraphQL</span><span style="color:#E1E4E8;">(schema).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ServiceNotProvidedException, ModuleStartException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建 GraphQLQueryHandler实例并注册到 JettyServer中</span></span>
<span class="line"><span style="color:#E1E4E8;">        JettyHandlerRegister service </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getManager</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(CoreModule.NAME).</span><span style="color:#B392F0;">provider</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getService</span><span style="color:#E1E4E8;">(JettyHandlerRegister.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里的 path在 application.yml中的 query部分有相应配置项，默认是&quot;/graphql&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        service.</span><span style="color:#B392F0;">addHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLQueryHandler</span><span style="color:#E1E4E8;">(config.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">(), graphQL));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLQueryProvider</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModuleProvider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> GraphQLQueryConfig config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLQueryConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GraphQL graphQL;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServiceNotProvidedException, ModuleStartException {</span></span>
<span class="line"><span style="color:#24292E;">        GraphQLSchema schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SchemaParser.</span><span style="color:#6F42C1;">newParser</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;query-protocol/common.graphqls&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">resolvers</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Query</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mutation</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            ... ... </span><span style="color:#6A737D;">// 这里会添加所有 GraphQL Schema以及关联的 Resolver实现，后面会挑选几个展开详述</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() .</span><span style="color:#6F42C1;">makeExecutableSchema</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建 GraphQL 对象， GraphQL Java提供的API</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.graphQL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GraphQL.</span><span style="color:#6F42C1;">newGraphQL</span><span style="color:#24292E;">(schema).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServiceNotProvidedException, ModuleStartException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建 GraphQLQueryHandler实例并注册到 JettyServer中</span></span>
<span class="line"><span style="color:#24292E;">        JettyHandlerRegister service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getManager</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(CoreModule.NAME).</span><span style="color:#6F42C1;">provider</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getService</span><span style="color:#24292E;">(JettyHandlerRegister.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里的 path在 application.yml中的 query部分有相应配置项，默认是&quot;/graphql&quot;</span></span>
<span class="line"><span style="color:#24292E;">        service.</span><span style="color:#6F42C1;">addHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLQueryHandler</span><span style="color:#24292E;">(config.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">(), graphQL));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="graphqlqueryhandler" tabindex="-1">GraphQLQueryHandler <a class="header-anchor" href="#graphqlqueryhandler" aria-label="Permalink to &quot;GraphQLQueryHandler&quot;">​</a></h4><p>在前面介绍中提到，server-core 模块会启动两个 Server，一个是 GRPCServer，主要用于接收 Agent 发送来的 gRPC 请求，前文介绍的 RegisterServiceHandler、JVMMetricReportServiceHandler、TraceSegmentReportServiceHandler 等都是注册在 GRPCServer 上的 Handler；另一个是 JettyServer，用于接收 Http 请求，本小节介绍的 GraphQLQueryHandler 就是注册在 JettyServer 的 Handler，它继承 JettyJsonHandler 如下图所示：</p>`,9),E=p(`<p>JettyJsonHandler 使用模板方法模式将真正的请求处理逻辑延迟到子类实现，而在其 doGet() 方法和 doPost() 方法中只完成了下面几项通用的逻辑：</p><ol><li><p>设置 HttpResponse 响应头；</p></li><li><p>将请求处理结果（JSON 数据）写入返回给客户端；</p></li><li><p>如果请求处理过程中出现异常，则在响应的 JSON 中携带 error-message 字段记录简单的异常信息。</p></li></ol><p>GraphQLQueryHandler 只支持 POST 请求，不支持 GET 请求，其 doPost() 方法中首先会读取 JSON 格式的请求体，并用其中数据创建 ExecutionInput 对象，execute() 方法是 GraphQL 对象处理请求的入口，ExecutionInput 是其唯一的参数，execute() 方法返回 ExecutionResult 对象，其中封装了查询得到的 GraphQL Schema 对象（正常情况）以及错误信息（异常情况），具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> JsonElement </span><span style="color:#B392F0;">doPost</span><span style="color:#E1E4E8;">(HttpServletRequest req) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    BufferedReader reader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BufferedReader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InputStreamReader</span><span style="color:#E1E4E8;">(req.</span><span style="color:#B392F0;">getInputStream</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    StringBuilder request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略读取reader的过程</span></span>
<span class="line"><span style="color:#E1E4E8;">    JsonObject requestJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gson.</span><span style="color:#B392F0;">fromJson</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(), JsonObject.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExecutionInput executionInput </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExecutionInput.</span><span style="color:#B392F0;">newExecutionInput</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(requestJson.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(QUERY).</span><span style="color:#B392F0;">getAsString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">variables</span><span style="color:#E1E4E8;">(gson.</span><span style="color:#B392F0;">fromJson</span><span style="color:#E1E4E8;">(requestJson.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(VARIABLES), mapOfStringObjectType))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在前文的示例中，Spring Boot 帮我们屏蔽了 execute()方法的调用，这里需要自己通过GraphQL Java API进行调用</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExecutionResult executionResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> graphQL.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(executionInput);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executionResult.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 正常查询结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">GraphQLError</span><span style="color:#E1E4E8;">&gt; errors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executionResult.</span><span style="color:#B392F0;">getErrors</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 异常信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    JsonObject jsonObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsonObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将正常查询结果记录到&quot;data&quot;字段，将异常信息记录到&quot;error&quot;(略)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> JsonElement </span><span style="color:#6F42C1;">doPost</span><span style="color:#24292E;">(HttpServletRequest req) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    BufferedReader reader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(req.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    StringBuilder request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略读取reader的过程</span></span>
<span class="line"><span style="color:#24292E;">    JsonObject requestJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gson.</span><span style="color:#6F42C1;">fromJson</span><span style="color:#24292E;">(request.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(), JsonObject.class);</span></span>
<span class="line"><span style="color:#24292E;">    ExecutionInput executionInput </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExecutionInput.</span><span style="color:#6F42C1;">newExecutionInput</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(requestJson.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(QUERY).</span><span style="color:#6F42C1;">getAsString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">variables</span><span style="color:#24292E;">(gson.</span><span style="color:#6F42C1;">fromJson</span><span style="color:#24292E;">(requestJson.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(VARIABLES), mapOfStringObjectType))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在前文的示例中，Spring Boot 帮我们屏蔽了 execute()方法的调用，这里需要自己通过GraphQL Java API进行调用</span></span>
<span class="line"><span style="color:#24292E;">    ExecutionResult executionResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> graphQL.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(executionInput);</span></span>
<span class="line"><span style="color:#24292E;">    Object data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> executionResult.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 正常查询结果</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">GraphQLError</span><span style="color:#24292E;">&gt; errors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> executionResult.</span><span style="color:#6F42C1;">getErrors</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 异常信息</span></span>
<span class="line"><span style="color:#24292E;">    JsonObject jsonObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsonObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将正常查询结果记录到&quot;data&quot;字段，将异常信息记录到&quot;error&quot;(略)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonObject;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到此处为止，query-graphql-plugin 插件处理查询请求的核心流程就介绍完了，通过下面一张图，可以很好地总结该流程：</p>`,5),i=s("h3",{id:"graphql-schema-鸟瞰",tabindex:"-1"},[a("GraphQL Schema 鸟瞰 "),s("a",{class:"header-anchor",href:"#graphql-schema-鸟瞰","aria-label":'Permalink to "GraphQL Schema 鸟瞰"'},"​")],-1),u=s("p",null,"在 resouces/query-protocol 目录中包含了 query-graphql-plugin 插件的全部 GraphQL Schema 文件，其结构如下图所示，该结构图是通过 GraphQL Voyager 工具生成的，如果你感兴趣可以查找相关资料进行了解。",-1),d=s("p",null,"在学习了前面介绍的 GraphQL Schema 基本语法和示例之后，相信你已经完全能够读懂上图涉及的全部 GraphQL Schema 定义，这里就不再一一展开分析，我们将重点放在关联的 Resolver 以及具体的查询实现上。",-1),g=s("h3",{id:"metadataquery",tabindex:"-1"},[a("MetadataQuery "),s("a",{class:"header-anchor",href:"#metadataquery","aria-label":'Permalink to "MetadataQuery"'},"​")],-1),h=s("p",null,"query-graphql-plugin 插件中提供了三个查询 Service 的方法，如下图所示：",-1),F=s("p",null,"GraphQL Java Tools 会将上述三个查询 Service 的方法映射到 MetadataQuery 中的同名方法，如下图所示，MetadataQuery 会将请求委托给 MetadataQueryService 的同名方法处理，而 MetadataQueryService 中也没有其他逻辑，直接将请求委托给 MetadataQueryEsDAO 的同名方法：",-1),A=p(`<p>在 MetadataQuery 的这三个方法中都有一个 Duration 入参，在 metadata.graphqls 文件中定义了 Duration 这个 input 类型，该参数指定了查询的起止时间以及时间单位。</p><p>MetadataQueryEsDAO 底层通过 High Level REST Client 对 ElasticSearch 的查询。先来看 searchServices() 方法的具体实现，其中会根据时间范围以及 serviceName 进行匹配：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Service</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">searchServices</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> startTimestamp, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> endTimestamp,</span></span>
<span class="line"><span style="color:#E1E4E8;">    String keyword) throws IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SearchSourceBuilder sourceBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SearchSourceBuilder.</span><span style="color:#B392F0;">searchSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    BoolQueryBuilder boolQueryBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilders.</span><span style="color:#B392F0;">boolQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询的时间范围</span></span>
<span class="line"><span style="color:#E1E4E8;">    boolQueryBuilder.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">timeRangeQueryBuild</span><span style="color:#E1E4E8;">(startTimestamp, endTimestamp));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 不查询 NetWorkAddress在 service_inventory索引中的数据 </span></span>
<span class="line"><span style="color:#E1E4E8;">    boolQueryBuilder.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">termQuery</span><span style="color:#E1E4E8;">(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(keyword)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// serviceName匹配用户指定的关键字(keyword)</span></span>
<span class="line"><span style="color:#E1E4E8;">        String matchCName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MatchCNameBuilder.INSTANCE.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(ServiceInventory.NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">        boolQueryBuilder.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">matchQuery</span><span style="color:#E1E4E8;">(matchCName, keyword));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(boolQueryBuilder);</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceBuilder.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(queryMaxSize); </span><span style="color:#6A737D;">// 查询返回Document的个数上限，默认上限5000个</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过 RestHighLevelClient 执行 SearchRequest查询</span></span>
<span class="line"><span style="color:#E1E4E8;">    SearchResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(ServiceInventory.INDEX_NAME, sourceBuilder);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从 SearchResponse响应中获取相应的 Service信息并返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildServices</span><span style="color:#E1E4E8;">(response);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Service</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">searchServices</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startTimestamp, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> endTimestamp,</span></span>
<span class="line"><span style="color:#24292E;">    String keyword) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    SearchSourceBuilder sourceBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SearchSourceBuilder.</span><span style="color:#6F42C1;">searchSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    BoolQueryBuilder boolQueryBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilders.</span><span style="color:#6F42C1;">boolQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询的时间范围</span></span>
<span class="line"><span style="color:#24292E;">    boolQueryBuilder.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">timeRangeQueryBuild</span><span style="color:#24292E;">(startTimestamp, endTimestamp));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 不查询 NetWorkAddress在 service_inventory索引中的数据 </span></span>
<span class="line"><span style="color:#24292E;">    boolQueryBuilder.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">termQuery</span><span style="color:#24292E;">(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(keyword)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// serviceName匹配用户指定的关键字(keyword)</span></span>
<span class="line"><span style="color:#24292E;">        String matchCName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MatchCNameBuilder.INSTANCE.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(ServiceInventory.NAME);</span></span>
<span class="line"><span style="color:#24292E;">        boolQueryBuilder.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">matchQuery</span><span style="color:#24292E;">(matchCName, keyword));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(boolQueryBuilder);</span></span>
<span class="line"><span style="color:#24292E;">    sourceBuilder.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(queryMaxSize); </span><span style="color:#6A737D;">// 查询返回Document的个数上限，默认上限5000个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过 RestHighLevelClient 执行 SearchRequest查询</span></span>
<span class="line"><span style="color:#24292E;">    SearchResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(ServiceInventory.INDEX_NAME, sourceBuilder);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从 SearchResponse响应中获取相应的 Service信息并返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildServices</span><span style="color:#24292E;">(response);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下图展示了 timeRangeQueryBuild() 方法构造的查询时间范围：</p>`,4),B=p('<p>另外两个查询 Service 元数据的方法：getAllServices() 方法只根据时间范围进行查询，searchService() 方法只根据 serviceName 的关键字进行匹配，实现方式类似，这里不再展开详细分析。</p><p>除了查询 Service，MetadataQuery 还提供了查询其他多种基础元数据的相应方法：</p><ul><li><strong>查询 ServiceInstance</strong></li></ul><p>getServiceInstances() 方法可以按照时间范围和 serviceId 查询关联的 ServiceInstance 集合。</p><ul><li><p><strong>查询 Endpoint</strong></p><ul><li><p>searchEndpoint() 方法会根据 serviceId 以及关键字查询相应的 Endpoint 集合。</p></li><li><p>getEndpointInfo() 方法会根据指定的 endpointId 查询 Endpoint 信息。</p></li></ul></li><li><p><strong>查询 Databases</strong></p></li></ul><p>getAllDatabases() 方法其实也是查询 Service ，只不过指定了 node_type 字段的取值为 Database 而已。</p><ul><li><strong>查询 ClusterBrief</strong></li></ul><p>getGlobalBrief() 方法会按照时间范围查询整个 OAP 集群所能感知到的各类组件的个数，然后封装成 ClusterBrief 对象返回。在 ClusterBrief 中包括 Service 数量、 Endpoint 数量、Database 数量、Cache 数量以及 MQ 数量。</p><p>查询上述元数据的请求最终会委托给 MetadataQueryEsDAO 中的同名方法，然后依赖 High Level Rest Client 请求 ElasticSearch 进行查询，具体代码实现并不复杂，如果你感兴趣可以参考源码进行学习。</p><h3 id="metricquery" tabindex="-1">MetricQuery <a class="header-anchor" href="#metricquery" aria-label="Permalink to &quot;MetricQuery&quot;">​</a></h3><p>在前面介绍 jvm-receiver-plugin 以及 trace-receiver-plugin 的章节中，我们详细介绍了 SkyWalking 中多种监控指标的计算方式以及存储实现，在 query-graphql-plugin 插件中自然是关注这些指标是如何查询的，在 metric.graphqls 文件中定义了下图三个查询监控指标的相关方法。</p>',11),m=s("ul",null,[s("li",null,[s("p",null,"getValues() 方法：返回一个聚合后的单值，例如，一个 Service 在一段时间内 SLA 的平均值。")]),s("li",null,[s("p",null,"getLinearIntValues() 方法：返回一条时序数据（即每个时间单位一个点，这些连续的点可以组成一张二维的监控图）。")]),s("li",null,[s("p",null,"getThermodynamic() 方法：返回的 heatmap（热力图）。")])],-1),v=s("h4",{id:"查询单个聚合值",tabindex:"-1"},[a("查询单个聚合值 "),s("a",{class:"header-anchor",href:"#查询单个聚合值","aria-label":'Permalink to "查询单个聚合值"'},"​")],-1),C=s("p",null,"首先来看 MetricQuery.getValues() 方法，请求该方法的位置是在 SkyWalking Rocketbot 的拓扑图中，如下图所示：",-1),S=p(`<p>图中的&quot;每分钟请求量&quot;&quot;SLA&quot;以及&quot;延迟&quot;三个值都是分别请求 getValues() 方法获得的，这三个值都是计算查询时间段内响应指标的平均值。</p><p>getValues() 方法有两个入参，一个是 Duration 类型入参，用于指定查询时间范围，另一个是 是 BatchMetricConditions 类型入参，其中指定了查询的 index alias 以及 entity_id 字段集合。以上图中 SLA 这个指标为例，其 BatchMetricConditions.name 值为&quot;service_sla&quot;，entity_id 字段集合为 [2,3]（图中 demo-webapp 和 demo-provider 对应的 ServiceId 分别为 2 和 3）。</p><p>MetricQuery 最终会将 getValues() 请求委托给 MetricsQueryEsDAO 的同名方法，下面以查询 demo-provider 和 demo-webapp 两个 Service 在 2020 年 01 月 05 日 19:10~19:40 的 SLA 为例，分析 MetricsQueryEsDAO.getValues() 方法的执行流程：</p><p>1、指定 time_bucket 字段的时间范围，即 time_bucket 字段值必须在 startTB 和 endTB 之间。相关代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">RangeQueryBuilder rangeQueryBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilders.</span><span style="color:#B392F0;">rangeQuery</span><span style="color:#E1E4E8;">(Metrics.TIME_BUCKET).</span><span style="color:#B392F0;">gte</span><span style="color:#E1E4E8;">(startTB).</span><span style="color:#B392F0;">lte</span><span style="color:#E1E4E8;">(endTB);</span></span>
<span class="line"><span style="color:#E1E4E8;">BoolQueryBuilder boolQuery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilders.</span><span style="color:#B392F0;">boolQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">boolQuery.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(rangeQueryBuilder);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">RangeQueryBuilder rangeQueryBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilders.</span><span style="color:#6F42C1;">rangeQuery</span><span style="color:#24292E;">(Metrics.TIME_BUCKET).</span><span style="color:#6F42C1;">gte</span><span style="color:#24292E;">(startTB).</span><span style="color:#6F42C1;">lte</span><span style="color:#24292E;">(endTB);</span></span>
<span class="line"><span style="color:#24292E;">BoolQueryBuilder boolQuery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilders.</span><span style="color:#6F42C1;">boolQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">boolQuery.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(rangeQueryBuilder);</span></span></code></pre></div><p>这里的 startTB 和 endTB 已经经过格式化，与查询的 Index 中使用的时间格式对齐。示例中的 startTB 和 endTB 分别是 202001051910 和 202001051940。</p><p>2、精确匹配 Document 中的 entity_id 字段值，示例中 entity_id 字段分别为 2 和 3， 相关代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">where.</span><span style="color:#B392F0;">getKeyValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(keyValues </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (keyValues.</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        boolQuery.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">termsQuery</span><span style="color:#E1E4E8;">(keyValues.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), keyValues.</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        boolQuery.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">termQuery</span><span style="color:#E1E4E8;">(keyValues.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), keyValues.</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">where.</span><span style="color:#6F42C1;">getKeyValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(keyValues </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (keyValues.</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">        boolQuery.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">termsQuery</span><span style="color:#24292E;">(keyValues.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), keyValues.</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        boolQuery.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">termQuery</span><span style="color:#24292E;">(keyValues.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), keyValues.</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>3、按照 entity_id 分组聚合查询到的 SLA 值（即 Document 中的 percentage 字段），具体聚合方式是计算平均值，相关片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TermsAggregationBuilder entityIdAggregation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AggregationBuilders.</span><span style="color:#B392F0;">terms</span><span style="color:#E1E4E8;">(Metrics.ENTITY_ID).</span><span style="color:#B392F0;">field</span><span style="color:#E1E4E8;">(Metrics.ENTITY_ID).</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">parentAggBuilder.</span><span style="color:#B392F0;">subAggregation</span><span style="color:#E1E4E8;">(AggregationBuilders.</span><span style="color:#B392F0;">avg</span><span style="color:#E1E4E8;">(valueCName).</span><span style="color:#B392F0;">field</span><span style="color:#E1E4E8;">(valueCName));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TermsAggregationBuilder entityIdAggregation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AggregationBuilders.</span><span style="color:#6F42C1;">terms</span><span style="color:#24292E;">(Metrics.ENTITY_ID).</span><span style="color:#6F42C1;">field</span><span style="color:#24292E;">(Metrics.ENTITY_ID).</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">parentAggBuilder.</span><span style="color:#6F42C1;">subAggregation</span><span style="color:#24292E;">(AggregationBuilders.</span><span style="color:#6F42C1;">avg</span><span style="color:#24292E;">(valueCName).</span><span style="color:#6F42C1;">field</span><span style="color:#24292E;">(valueCName));</span></span></code></pre></div><p>4、将上述构造的查询条件和聚合函数构造成 SearchRequest 请求发送给 ElasticSearch 集群完成查询，相关片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SearchSourceBuilder sourceBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SearchSourceBuilder.</span><span style="color:#B392F0;">searchSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(boolQuery);</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">aggregation</span><span style="color:#E1E4E8;">(entityIdAggregation);</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(indexName, sourceBuilder);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SearchSourceBuilder sourceBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SearchSourceBuilder.</span><span style="color:#6F42C1;">searchSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(boolQuery);</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">aggregation</span><span style="color:#24292E;">(entityIdAggregation);</span></span>
<span class="line"><span style="color:#24292E;">SearchResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(indexName, sourceBuilder);</span></span></code></pre></div><p>注意，这里查询的 indexName 是 Index 别名，在前面介绍 Index Template 的时候已经简单介绍了 Index alias 的作用，这里不再重复。</p><p>5、解析 SearchResponse 得到查询结果，即示例中每个 Service 的 SLA 平均值，相关代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">IntValues intValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntValues</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Terms idTerms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getAggregations</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Metrics.ENTITY_ID);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Terms.Bucket idBucket </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> idTerms.</span><span style="color:#B392F0;">getBuckets</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    KVInt kvInt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KVInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// key为 entity_id，即示例中的serviceId</span></span>
<span class="line"><span style="color:#E1E4E8;">    kvInt.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(idBucket.</span><span style="color:#B392F0;">getKeyAsString</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// value为该 entity_id对应的 SLA平均值</span></span>
<span class="line"><span style="color:#E1E4E8;">    kvInt.</span><span style="color:#B392F0;">setValue</span><span style="color:#E1E4E8;">(idBucket.</span><span style="color:#B392F0;">getAggregations</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(valueCName).</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    intValues.</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(kvInt);  </span><span style="color:#6A737D;">// 记录上述查询解析结果</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> intValues;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">IntValues intValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntValues</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Terms idTerms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getAggregations</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Metrics.ENTITY_ID);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Terms.Bucket idBucket </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> idTerms.</span><span style="color:#6F42C1;">getBuckets</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    KVInt kvInt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KVInt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// key为 entity_id，即示例中的serviceId</span></span>
<span class="line"><span style="color:#24292E;">    kvInt.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(idBucket.</span><span style="color:#6F42C1;">getKeyAsString</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// value为该 entity_id对应的 SLA平均值</span></span>
<span class="line"><span style="color:#24292E;">    kvInt.</span><span style="color:#6F42C1;">setValue</span><span style="color:#24292E;">(idBucket.</span><span style="color:#6F42C1;">getAggregations</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(valueCName).</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    intValues.</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(kvInt);  </span><span style="color:#6A737D;">// 记录上述查询解析结果</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> intValues;</span></span></code></pre></div><p>注意，上述执行过程只展示了针对 Avg 计算的相关代码，其他监控指标可能会用到其他聚合函数（例如：Sum、Max 等），就可能会走到其他代码分支，但核心逻辑类似，这里就不再重复展示了。</p><h4 id="查询时序" tabindex="-1">查询时序 <a class="header-anchor" href="#查询时序" aria-label="Permalink to &quot;查询时序&quot;">​</a></h4><p>下图是 demo-provider （serviceId = 3）响应时间的监控图，如前文所述，图中的时序数据是通过 getLinearIntValues() 方法查询得到的：</p>`,18),D=p(`<p>下面将以该图为例，详细分析 getLinearIntValues() 方法的查询流程：</p><p>1、首先根据查询的起止时间以及 entity_id，确定要查询的 Document Id，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 按照 DownSampling单位以及查询时间范围，确定有多少个Document需要查询</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">DurationPoint</span><span style="color:#E1E4E8;">&gt; durationPoints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DurationUtils.INSTANCE.</span><span style="color:#B392F0;">getDurationPoints</span><span style="color:#E1E4E8;">(downsampling, startTB, endTB);</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; ids </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">// 构造每个 DurationPoint对应的 Document Id</span></span>
<span class="line"><span style="color:#E1E4E8;">durationPoints.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(durationPoint </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> ids.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(durationPoint.</span><span style="color:#B392F0;">getPoint</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Const.ID_SPLIT </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 按照 DownSampling单位以及查询时间范围，确定有多少个Document需要查询</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">DurationPoint</span><span style="color:#24292E;">&gt; durationPoints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DurationUtils.INSTANCE.</span><span style="color:#6F42C1;">getDurationPoints</span><span style="color:#24292E;">(downsampling, startTB, endTB);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; ids </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">// 构造每个 DurationPoint对应的 Document Id</span></span>
<span class="line"><span style="color:#24292E;">durationPoints.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(durationPoint </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ids.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(durationPoint.</span><span style="color:#6F42C1;">getPoint</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Const.ID_SPLIT </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id));</span></span></code></pre></div><p>示例中的 DownSampling 值为 Minute，查询的时间范围为 20:44~ 20:59，生成的 DurationPoint 以及 Document Id 如下图所示：</p>`,4),_=p(`<p>2、创建 SearchRequst 请求进行查询。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SearchRequest searchRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchRequest</span><span style="color:#E1E4E8;">(indexName);</span></span>
<span class="line"><span style="color:#E1E4E8;">searchRequest.</span><span style="color:#B392F0;">types</span><span style="color:#E1E4E8;">(TYPE);</span></span>
<span class="line"><span style="color:#6A737D;">// 指定查询的 Document Id</span></span>
<span class="line"><span style="color:#E1E4E8;">searchRequest.</span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">idsQuery</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addIds</span><span style="color:#E1E4E8;">(ids)).</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(ids.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(searchRequest);</span></span>
<span class="line"><span style="color:#6A737D;">// 将返回的 SearchResponse转换成 Map后返回，第一层 Key是Document Id，第二层 Key是 Field名称，第二层 Value是字段对应的 Value值</span></span>
<span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#F97583;">SearchHit</span><span style="color:#E1E4E8;">[] hits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getHits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHits</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SearchHit hit </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hits) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(hit.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), hit.</span><span style="color:#B392F0;">getSourceAsMap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SearchRequest searchRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchRequest</span><span style="color:#24292E;">(indexName);</span></span>
<span class="line"><span style="color:#24292E;">searchRequest.</span><span style="color:#6F42C1;">types</span><span style="color:#24292E;">(TYPE);</span></span>
<span class="line"><span style="color:#6A737D;">// 指定查询的 Document Id</span></span>
<span class="line"><span style="color:#24292E;">searchRequest.</span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">idsQuery</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addIds</span><span style="color:#24292E;">(ids)).</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(ids.length);</span></span>
<span class="line"><span style="color:#24292E;">SearchResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(searchRequest);</span></span>
<span class="line"><span style="color:#6A737D;">// 将返回的 SearchResponse转换成 Map后返回，第一层 Key是Document Id，第二层 Key是 Field名称，第二层 Value是字段对应的 Value值</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">SearchHit</span><span style="color:#24292E;">[] hits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getHits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHits</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SearchHit hit </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hits) {</span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(hit.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), hit.</span><span style="color:#6F42C1;">getSourceAsMap</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span></code></pre></div><p>示例中会根据步骤 1 生成的 Document Id 精确查找 demo-webapp 的 service_resp_time 指标每分钟（20:44~ 20:59 范围）对应的 Document，如下图所示：</p>`,3),Q=s("p",null,"3、将步骤 2 的查询结果整理成 IntValues（底层是 KVInt 列表），相关代码实现比较简单，不再展示。示例中的整理结果如下图所示，其中每个 KVInt 的 Key 为 Document Id，Value 为相应的 summation 值：",-1),b=s("p",null,"前端拿到上述 KVInt 列表之后，即可绘制出示例中的 Service Response Time 监控图。",-1),q=s("h4",{id:"查询-heatmap",tabindex:"-1"},[a("查询 heatmap "),s("a",{class:"header-anchor",href:"#查询-heatmap","aria-label":'Permalink to "查询 heatmap"'},"​")],-1),I=s("p",null,"MetricQuery 中最后一个查询方法是 getThermodynamic() 方法，该方法用于查询热力图，具体查询方式与 getLinearIntValues() 方法类似，这里不再展开分析。",-1);function k(T,L,R,P,V,x){const n=o("Image");return t(),r("div",null,[y,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/26/44/CgqCHl7xt6yAHDDLAAIeqgBo9HE860.png"}),a(),E,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/26/38/Ciqc1F7xt76AflHaAANfIPXqD0Q765.png"}),a(),i,u,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/26/39/Ciqc1F7xt8uAa-I6AAjKWi_tgPI783.png"}),a(),d,g,h,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/26/39/Ciqc1F7xt9WABcbdAAI-KmsR4xQ745.png"}),a(),F,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/26/44/CgqCHl7xt92AR6MbAAT0t4jgEsA600.png"}),a(),A,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/26/39/Ciqc1F7xt-uAYJIjAANCIMBQIGg737.png"}),a(),B,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/26/44/CgqCHl7xuAKAGJpGAAEsPKwo6_0843.png"}),a(),m,v,C,l(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/26/39/Ciqc1F7xuA2AZu34AAD4-d0xhHI072.png"}),a(),S,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/26/3A/Ciqc1F7xuIyAZc4MAABhTIGGqHg410.png"}),a(),D,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/26/45/CgqCHl7xuJmAapVFAAC9IVj0ets069.png"}),a(),_,l(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/26/3A/Ciqc1F7xuKiAfaUbAAr-NQ2X_L4640.png"}),a(),Q,l(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/26/45/CgqCHl7xuLKAFb6VAAwzofyYQew138.png"}),a(),b,q,I])}const f=e(c,[["render",k]]);export{w as __pageData,f as default};
