import{_ as p,j as t,o as e,g as c,k as l,h as a,s,Q as o}from"./chunks/framework.b3d8e22e.js";const Es=JSON.parse('{"title":"nmon ------ 获取系统性能数据 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4181) 04  工具实践：如何获取代码性能数据？.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4181) 04  工具实践：如何获取代码性能数据？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4181) 04  工具实践：如何获取代码性能数据？.md"},y=s("p",null,"首先解答一下上一课时的问题。磁盘的速度这么慢，为什么 Kafka 操作磁盘，吞吐量还能那么高？",-1),E=s("p",null,"这是因为，磁盘之所以慢，主要就是慢在寻道的操作上面。Kafka 官方测试表明，这个寻道时间长达 10ms。磁盘的顺序写和随机写的速度比，可以达到 6 千倍，Kafka 就是采用的顺序写的方式。",-1),i=s("p",null,"经过上一课时我们了解到，想要进行深入排查，需要收集较详细的性能数据，包括操作系统性能数据、JVM 的性能数据、应用的性能数据等。",-1),d=s("p",null,"那么，我们应该如何获取这些数据呢？本课时我将介绍一系列常用的性能测试工具。",-1),h=s("h3",{id:"nmon-获取系统性能数据",tabindex:"-1"},[a("nmon ------ 获取系统性能数据 "),s("a",{class:"header-anchor",href:"#nmon-获取系统性能数据","aria-label":'Permalink to "nmon ------ 获取系统性能数据"'},"​")],-1),_=s("p",null,"除了在上一课时中介绍的 top、free 等命令，还有一些将资源整合在一起的监控工具，",-1),m=s("p",null,"nmon 便是一个老牌的 Linux 性能监控工具，它不仅有漂亮的监控界面（如下图所示），还能产出细致的监控报表。",-1),F=o("",11),C=s("p",null,"nmonchart 报表",-1),g=s("h3",{id:"jvisualvm-获取-jvm-性能数据",tabindex:"-1"},[a("jvisualvm ------ 获取 JVM 性能数据 "),s("a",{class:"header-anchor",href:"#jvisualvm-获取-jvm-性能数据","aria-label":'Permalink to "jvisualvm ------ 获取 JVM 性能数据"'},"​")],-1),A=s("p",null,"jvisualvm 原是随着 JDK 发布的一个工具，Java 9 之后开始单独发布。通过它，可以了解应用在运行中的内部情况。我们可以连接本地或者远程的服务器，监控大量的性能数据。",-1),u=s("p",null,"通过插件功能，jvisualvm 能获得更强大的扩展。如下图所示，建议把所有的插件下载下来进行体验。",-1),D=o("",5),v=o("",11),B=s("p",null,"JMC 录制结果主界面",-1),f=s("p",null,"通过录制数据，可以清晰了解到某一分钟内，操作系统资源，以及 JVM 内部的性能数据情况。",-1),b=s("h4",{id:"_2-线程",tabindex:"-1"},[a("2.线程 "),s("a",{class:"header-anchor",href:"#_2-线程","aria-label":'Permalink to "2.线程"'},"​")],-1),k=s("p",null,"选择相应的线程，即可了解线程的执行情况，比如 Wait、Idle 、Block 等状态和时序。",-1),M=s("p",null,"以 C2 编译器线程为例，可以看到详细的热点类，以及方法内联后的代码大小。如下图所示，C2 此时正在疯狂运转。",-1),J=s("p",null,"JMC 录制结果 线程界面",-1),j=s("h4",{id:"_3-内存",tabindex:"-1"},[a("3.内存 "),s("a",{class:"header-anchor",href:"#_3-内存","aria-label":'Permalink to "3.内存"'},"​")],-1),T=s("p",null,"通过内存界面，可以看到每个时间段内内存的申请情况。在排查内存溢出、内存泄漏等情况时，这个功能非常有用。",-1),x=s("p",null,"JMC 录制结果 内存界面",-1),P=s("h4",{id:"_4-锁",tabindex:"-1"},[a("4.锁 "),s("a",{class:"header-anchor",href:"#_4-锁","aria-label":'Permalink to "4.锁"'},"​")],-1),S=s("p",null,"一些竞争非常严重的锁信息，以及一些死锁信息，都可以在锁信息界面中找到。",-1),q=s("p",null,"可以看到，一些锁的具体 ID，以及关联的线程信息，都可以进行联动分析。",-1),w=s("p",null,"JMC 录制结果 锁信息界面",-1),L=s("h4",{id:"_5-文件和-socket",tabindex:"-1"},[a("5.文件和 Socket "),s("a",{class:"header-anchor",href:"#_5-文件和-socket","aria-label":'Permalink to "5.文件和 Socket"'},"​")],-1),V=s("p",null,"文件和 Socket 界面能够监控对 I/O 的读写，界面一目了然。如果你的应用 I/O 操作比较繁重，比如日志打印比较多、网络读写频繁，就可以在这里监控到相应的信息，并能够和执行栈关联起来。",-1),R=s("p",null,"JMC 录制结果 文件和 Socket 界面",-1),I=s("h4",{id:"_6-方法调用",tabindex:"-1"},[a("6.方法调用 "),s("a",{class:"header-anchor",href:"#_6-方法调用","aria-label":'Permalink to "6.方法调用"'},"​")],-1),X=s("p",null,"这个和 jvisualvm 的功能类似，展示的是方法调用信息和排行。从这里可以看到一些高耗时方法和热点方法。",-1),G=s("p",null,"JMC 录制结果 方法调用",-1),H=s("h4",{id:"_7-垃圾回收",tabindex:"-1"},[a("7.垃圾回收 "),s("a",{class:"header-anchor",href:"#_7-垃圾回收","aria-label":'Permalink to "7.垃圾回收"'},"​")],-1),N=s("p",null,"如果垃圾回收过于频繁，就会影响应用的性能。JFR 对垃圾回收进行了详细的记录，比如什么时候发生了垃圾回收，用的什么垃圾回收器，每次垃圾回收的耗时，甚至是什么原因引起的等问题，都可以在这里看到。",-1),W=s("p",null,"JMC 录制结果 垃圾回收",-1),Q=s("h4",{id:"_8-jit",tabindex:"-1"},[a("8.JIT "),s("a",{class:"header-anchor",href:"#_8-jit","aria-label":'Permalink to "8.JIT"'},"​")],-1),$=s("p",null,"JIT 编译后的代码，执行速度会特别快，但它需要一个编译过程。编译界面显示了详细的 JIT 编译过程信息，包括生成后的 CodeCache 大小、方法内联信息等。",-1),O=s("p",null,"JMC 录制结果 JIT 信息",-1),U=s("h4",{id:"_9-tlab",tabindex:"-1"},[a("9.TLAB "),s("a",{class:"header-anchor",href:"#_9-tlab","aria-label":'Permalink to "9.TLAB"'},"​")],-1),Y=s("p",null,"JVM 默认给每个线程开辟一个 buffer 区域，用来加速对象分配，这就是 TLAB（Thread Local Allocation Buffer）的概念。这个 buffer，就放在 Eden 区。",-1),K=s("p",null,"原理和 Java 语言中的 ThreadLocal 类似，能够避免对公共区的操作，可以减少一些锁竞争。如下图所示的界面，详细地显示了这个分配过程。",-1),Z=s("p",null,"JMC 录制结果 TLAB 信息",-1),z=s("p",null,"在后面的课时中，我们会有多个使用此工具的分析案例。",-1),ss=s("h3",{id:"arthas-获取单个请求的调用链耗时",tabindex:"-1"},[a("Arthas ------ 获取单个请求的调用链耗时 "),s("a",{class:"header-anchor",href:"#arthas-获取单个请求的调用链耗时","aria-label":'Permalink to "Arthas ------ 获取单个请求的调用链耗时"'},"​")],-1),as=s("p",null,"Arthas 是一个 Java 诊断工具，可以排查内存溢出、CPU 飙升、负载高等内容，可以说是一个 jstack、jmap 等命令的大集合。",-1),ns=o("",16);function ls(os,ps,ts,es,cs,rs){const n=t("Image");return e(),c("div",null,[y,E,i,d,h,_,m,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/36/9A/CgqCHl8X2gWANM2wAAkEF7IjoMg031.png"}),a(),F,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/36/8F/Ciqc1F8X2m6ABh9lAAqiFOnIMT0061.png"}),a(),C,g,A,u,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/36/9C/CgqCHl8X3PeAPufLAAPBFcBR8qY801.png"}),a(),D,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/36/9C/CgqCHl8X3QOANLEGAAaKW6xLOSg775.png"}),a(),v,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/36/9C/CgqCHl8X3SyAbYa7AAfd6jZo6t4915.png"}),a(),B,f,b,k,M,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/36/91/Ciqc1F8X3TWASVq0AAY9V2QKEX8030.png"}),a(),J,j,T,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/36/91/Ciqc1F8X3T6AesX5AAcyVYacyeQ529.png"}),a(),x,P,S,q,l(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3UeAJ5L_AAQ7-kTs7YM289.png"}),a(),w,L,V,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/36/91/Ciqc1F8X3VGABH4xAAfkaSBZDio750.png"}),a(),R,I,X,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3WOAYQSCAAVmKbHpuBQ717.png"}),a(),G,H,N,l(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/36/92/Ciqc1F8X3X6ACtlVAAgwHnO3oHQ281.png"}),a(),W,Q,$,l(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3Y2AWi8dAAZ8RGTPyoA991.png"}),a(),O,U,Y,K,l(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3baAW4VFAAaz04YR1w4277.png"}),a(),Z,z,ss,as,l(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3eSAP67rAANG-JDjv2E614.png"}),a(),ns])}const is=p(r,[["render",ls]]);export{Es as __pageData,is as default};
