import{_ as s,o as a,h as o,Q as n}from"./chunks/framework.d3daa342.js";const h=JSON.parse('{"title":"第16讲：如何根据实际需要，定制自己的线程池？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/096-Java 并发编程文档/(254) 第16讲：如何根据实际需要，定制自己的线程池？.md","filePath":"posts/backEnd/096-Java 并发编程文档/(254) 第16讲：如何根据实际需要，定制自己的线程池？.md","lastUpdated":1696682708000}'),l={name:"posts/backEnd/096-Java 并发编程文档/(254) 第16讲：如何根据实际需要，定制自己的线程池？.md"},e=n(`<h1 id="第16讲-如何根据实际需要-定制自己的线程池" tabindex="-1">第16讲：如何根据实际需要，定制自己的线程池？ <a class="header-anchor" href="#第16讲-如何根据实际需要-定制自己的线程池" aria-label="Permalink to &quot;第16讲：如何根据实际需要，定制自己的线程池？&quot;">​</a></h1><p>在本课时我们主要学习如何根据自己的实际需求设置线程池的各个参数来定制自己的线程池。</p><h3 id="核心线程数" tabindex="-1">核心线程数 <a class="header-anchor" href="#核心线程数" aria-label="Permalink to &quot;核心线程数&quot;">​</a></h3><p>第一个需要设置的参数往往是 corePoolSize 核心线程数，在上一课时我们讲过，合理的线程数量和任务类型，以及 CPU 核心数都有关系，基本结论是线程的平均工作时间所占比例越高，就需要越少的线程；线程的平均等待时间所占比例越高，就需要越多的线程。而对于最大线程数而言，如果我们执行的任务类型不是固定的，比如可能一段时间是 CPU 密集型，另一段时间是 IO 密集型，或是同时有两种任务相互混搭。那么在这种情况下，我们可以把最大线程数设置成核心线程数的几倍，以便应对任务突发情况。当然更好的办法是用不同的线程池执行不同类型的任务，让任务按照类型区分开，而不是混杂在一起，这样就可以按照上一课时估算的线程数或经过压测得到的结果来设置合理的线程数了，达到更好的性能。</p><h3 id="阻塞队列" tabindex="-1">阻塞队列 <a class="header-anchor" href="#阻塞队列" aria-label="Permalink to &quot;阻塞队列&quot;">​</a></h3><p>对于阻塞队列这个参数而言，我们可以选择之前介绍过的 LinkedBlockingQueue 或者 SynchronousQueue 或者 DelayedWorkQueue，不过还有一种常用的阻塞队列叫 ArrayBlockingQueue，它也经常被用于线程池中，这种阻塞队列内部是用数组实现的，在新建对象的时候要求传入容量值，且后期不能扩容，所以 ArrayBlockingQueue 的最大的特点就是容量是有限的。这样一来，如果任务队列放满了任务，而且线程数也已经达到了最大值，线程池根据规则就会拒绝新提交的任务，这样一来就可能会产生一定的数据丢失。</p><p>但相比于无限增加任务或者线程数导致内存不足，进而导致程序崩溃，数据丢失还是要更好一些的，如果我们使用了 ArrayBlockingQueue 这种阻塞队列，再加上我们限制了最大线程数量，就可以非常有效地防止资源耗尽的情况发生。此时的队列容量大小和 maxPoolSize 是一个 trade-off，如果我们使用容量更大的队列和更小的最大线程数，就可以减少上下文切换带来的开销，但也可能因此降低整体的吞吐量；如果我们的任务是 IO 密集型，则可以选择稍小容量的队列和更大的最大线程数，这样整体的效率就会更高，不过也会带来更多的上下文切换。</p><h3 id="线程工厂" tabindex="-1">线程工厂 <a class="header-anchor" href="#线程工厂" aria-label="Permalink to &quot;线程工厂&quot;">​</a></h3><p>对于线程工厂 threadFactory 这个参数，我们可以使用默认的 defaultThreadFactory，也可以传入自定义的有额外能力的线程工厂，因为我们可能有多个线程池，而不同的线程池之间有必要通过不同的名字来进行区分，所以可以传入能根据业务信息进行命名的线程工厂，以便后续可以根据线程名区分不同的业务进而快速定位问题代码。比如可以通过com.google.common.util.concurrent.ThreadFactory</p><p>Builder 来实现，如代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ThreadFactoryBuilder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadFactoryBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">ThreadFactory rpcFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">setNameFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rpc-pool-%d&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ThreadFactoryBuilder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadFactoryBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">ThreadFactory rpcFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">setNameFormat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rpc-pool-%d&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><p>我们生成了名字为 rpcFactory 的 ThreadFactory，它的 nameFormat 为 &quot;rpc-pool-%d&quot; ，那么它生成的线程的名字是有固定格式的，它生成的线程的名字分别为&quot;rpc-pool-1&quot;，&quot;rpc-pool-2&quot; ，以此类推。</p><h3 id="拒绝策略" tabindex="-1">拒绝策略 <a class="header-anchor" href="#拒绝策略" aria-label="Permalink to &quot;拒绝策略&quot;">​</a></h3><p>最后一个参数是拒绝策略，我们可以根据业务需要，选择第 11 讲里的四种拒绝策略之一来使用：AbortPolicy，DiscardPolicy，DiscardOldestPolicy 或者 CallerRunsPolicy。除此之外，我们还可以通过实现 RejectedExecutionHandler 接口来实现自己的拒绝策略，在接口中我们需要实现 rejectedExecution 方法，在 rejectedExecution 方法中，执行例如打印日志、暂存任务、重新执行等自定义的拒绝策略，以便满足业务需求。如代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomRejectionHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RejectedExecutionHandler</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rejectedExecution</span><span style="color:#E1E4E8;">(Runnable </span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">, ThreadPoolExecutor </span><span style="color:#FFAB70;">executor</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//打印日志、暂存任务、重新执行等拒绝策略</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomRejectionHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RejectedExecutionHandler</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rejectedExecution</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">r</span><span style="color:#24292E;">, ThreadPoolExecutor </span><span style="color:#E36209;">executor</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//打印日志、暂存任务、重新执行等拒绝策略</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>所以定制自己的线程池和我们的业务是强相关的，首先我们需要掌握每个参数的含义，以及常见的选项，然后根据实际需要，比如说并发量、内存大小、是否接受任务被拒绝等一系列因素去定制一个非常适合自己业务的线程池，这样既不会导致内存不足，同时又可以用合适数量的线程来保障任务执行的效率，并在拒绝任务时有所记录方便日后进行追溯。</p>`,17),p=[e];function t(r,c,i,E,y,d){return a(),o("div",null,p)}const _=s(l,[["render",t]]);export{h as __pageData,_ as default};
