import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.4e7d56ce.js";const d=JSON.parse('{"title":"为什么要使用前端框架 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/108-前端进阶笔记文档/(7206) 10  掌握前端框架模板引擎的实现原理.md","filePath":"posts/frontEnd/108-前端进阶笔记文档/(7206) 10  掌握前端框架模板引擎的实现原理.md","lastUpdated":1696338709000}'),l={name:"posts/frontEnd/108-前端进阶笔记文档/(7206) 10  掌握前端框架模板引擎的实现原理.md"},o=p(`<p>如今说起前端开发，基本上都离不开前端框架。随着前端技术不断迭代，前端框架相关的文档和社区日益完善，前端入门也越来越简单了。我们可以快速上手一些工具和框架，但常常会忽略其中的设计和原理。</p><p>对框架和工具的了解不够深入，会导致我们在遇到一些偏门的问题时容易找不到方向，也不利于个人的知识领域扩展，不能很好地进行技术选型。</p><p>今天，我会带你了解前端框架为什么会这么热门，以及介绍前端框架的核心能力------模板引擎的实现原理。在讲解的过程中，一些代码会以 Vue.js 作为示例。</p><p>我们先来看一下，为什么要使用前端框架。</p><h3 id="为什么要使用前端框架" tabindex="-1">为什么要使用前端框架 <a class="header-anchor" href="#为什么要使用前端框架" aria-label="Permalink to &quot;为什么要使用前端框架&quot;">​</a></h3><p>一个工具被大多数人使用、成为热门，离不开相关技术发展的历史进程。了解这些工具和框架出现的原因，我们可以及时掌握技术的发展方向，保持对技术的敏感度、更新自身的认知，这些都会成为我们自身的竞争力。</p><p>前端框架也一样。在前端框架出现之前，jQuery 也是前端开发必备的工具库，大多数项目中都会使用。短短几年间，前端开发却变得无法离开前端框架，这中间到底发生了什么呢？</p><h4 id="前端的飞速发展" tabindex="-1">前端的飞速发展 <a class="header-anchor" href="#前端的飞速发展" aria-label="Permalink to &quot;前端的飞速发展&quot;">​</a></h4><p>曾几何时，一提到前端，大家都会想到 jQuery。那是 jQuery 一把梭的年代，不管前端后台都会用 jQuery 完成页面开发。那时候前端开发的工作倾向于切图和重构，重页面样式而轻逻辑，工作内容常常是拼接 JSP 模板、拼 PHP 模板以及调节浏览器兼容。</p><p>为什么 jQuery 那么热门呢？除了超方便的 Sizzle 引擎元素选择器、简单易用的异步请求库 ajax，还有链式调用的编程方式使得代码如行云流水般流畅。jQuery 提供的便捷几乎满足了当时前端的大部分工作（所以说 jQuery 一把梭不是毫无道理的）。</p><p>接下来短短的几年时间，前端经历了特别多的改变。随着 Node.js 的出现、NPM 包管理的完善，再加上热闹的开源社区，前端领域获得了千千万万开发者的支援。从页面开发到工具库开发、框架开发、脚本开发、到服务端开发，单线程的 JavaScript 正在不断进行自我革新，从而将领域不断拓宽，形成了如今你所能看到的、获得赋能的前端。</p><p>那么，是什么原因导致了 jQuery 被逐渐冷落，前端框架站上了舞台中央呢？其中的原因有很多，包括业务场景的进化、技术的更新迭代，比如前端应用逐渐复杂、单页应用的出现、前端模块化等。</p><h4 id="前端框架的出现" tabindex="-1">前端框架的出现 <a class="header-anchor" href="#前端框架的出现" aria-label="Permalink to &quot;前端框架的出现&quot;">​</a></h4><p>前面第 8 讲中，我们知道了浏览器是如何渲染页面的。从用户的角度来看，浏览器生成了最终的渲染树，并通过光栅化来将页面显示在屏幕上，页面渲染的工作就完成了。</p><p>实际上，浏览器页面更多的不只是静态页面的渲染，还包括点击、拖拽等事件操作以及接口请求、数据渲染到页面等动态的交互逻辑，因此我们还常常需要更新页面的内容。</p><p>要理解前端框架为什么如此重要，需要先看看在框架出现前，前端开发是如何实现和用户进行交互的。</p><p>这个过程跟上一讲事件驱动的内容很相似，以一个常见的表单提交作为例子，会包括编写静态页面、给对应的元素绑定对应的事件、事件触发时更新页面内容等步骤，这是最简单的页面交互。</p><p>对于更新页面内容这个步骤，如果我们页面中有很多的内容需要更新，光拼接字符串我们可能就有一大堆代码。</p><blockquote><p>以下的例子，为了不占用大量的篇幅，使用了 jQuery，否则代码量会更多。</p></blockquote><p>举个例子，抢答活动中常常会出现题目和多个答案进行选择，我们现在需要开发一个管理端，对这些抢答卡片进行管理。假设一个问题会包括两个答案，我们可以通过新增卡片的方式来添加一套问答，编辑卡片的过程包括这些步骤。</p><p><strong>1</strong>. 新增一个卡片时，通过插入 DOM 节点的方式添加卡片样式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 用来新增一个卡片，卡片内需要填写一些内容</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">addCard</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取一个id为the-dom的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#the-dom&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从该元素内获取class为the-class的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> addDom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.the-class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在the-class元素前方插入一个div</span></span>
<span class="line"><span style="color:#E1E4E8;">  addDom.</span><span style="color:#B392F0;">before</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;div class=&quot;col-lg-4&quot; data-index=&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;&gt;&lt;/div&gt;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 同时保存下来该DOM节点，方便更新内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> theDom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;[data-index=&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;]&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  theDom.</span><span style="color:#B392F0;">innerHTML</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;form-control question&quot;</span><span style="color:#E1E4E8;"> placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;你的问题&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;form-control option-a&quot;</span><span style="color:#E1E4E8;"> placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;回答1&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;form-control option-b&quot;</span><span style="color:#E1E4E8;"> placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;回答2&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        \`</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 做完上面这堆之后index自增</span></span>
<span class="line"><span style="color:#E1E4E8;">  index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> theDom;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 用来新增一个卡片，卡片内需要填写一些内容</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">addCard</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取一个id为the-dom的元素</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#the-dom&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从该元素内获取class为the-class的元素</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> addDom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.the-class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在the-class元素前方插入一个div</span></span>
<span class="line"><span style="color:#24292E;">  addDom.</span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;div class=&quot;col-lg-4&quot; data-index=&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;&gt;&lt;/div&gt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 同时保存下来该DOM节点，方便更新内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> theDom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[data-index=&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;]&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  theDom.</span><span style="color:#6F42C1;">innerHTML</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    \`</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;form-control question&quot;</span><span style="color:#24292E;"> placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;你的问题&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;form-control option-a&quot;</span><span style="color:#24292E;"> placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;回答1&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;form-control option-b&quot;</span><span style="color:#24292E;"> placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;回答2&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        \`</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 做完上面这堆之后index自增</span></span>
<span class="line"><span style="color:#24292E;">  index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> theDom;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>2</strong>. 卡片内编辑题目和答案时，会有字数限制（使用 jQuery 对输入框的输入事件进行监听，并限制输入内容）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// theDom使用上面代码保存下来的引用</span></span>
<span class="line"><span style="color:#6A737D;">// 问题绑定值</span></span>
<span class="line"><span style="color:#E1E4E8;">theDom</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;keyup&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.question&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (ev) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ev.target.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.target.value.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 答案a绑定值</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;keyup&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.option-a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (ev) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ev.target.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.target.value.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 答案b绑定值</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;keyup&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.option-b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (ev) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ev.target.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ev.target.value.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// theDom使用上面代码保存下来的引用</span></span>
<span class="line"><span style="color:#6A737D;">// 问题绑定值</span></span>
<span class="line"><span style="color:#24292E;">theDom</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;keyup&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.question&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (ev) {</span></span>
<span class="line"><span style="color:#24292E;">    ev.target.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.target.value.</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 答案a绑定值</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;keyup&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.option-a&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (ev) {</span></span>
<span class="line"><span style="color:#24292E;">    ev.target.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.target.value.</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 答案b绑定值</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;keyup&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.option-b&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (ev) {</span></span>
<span class="line"><span style="color:#24292E;">    ev.target.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ev.target.value.</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p><strong>3</strong>. 获取输入框内的内容（使用 jQuery 选择元素并获取内容），用于提交到后台。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取卡片的输入值</span></span>
<span class="line"><span style="color:#6A737D;">// theDom 使用上面代码保存下来的引用</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">getCardValue</span><span style="color:#E1E4E8;">(index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#the-dom&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> theDom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;[data-index=&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;]&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> questionName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> theDom.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.question&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">val</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> optionA </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> theDom.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.option-a&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">val</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> optionB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> theDom.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.option-b&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">val</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { questionName, optionA, optionB };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取卡片的输入值</span></span>
<span class="line"><span style="color:#6A737D;">// theDom 使用上面代码保存下来的引用</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">getCardValue</span><span style="color:#24292E;">(index) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#the-dom&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> theDom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[data-index=&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;]&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> questionName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> theDom.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.question&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">val</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> optionA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> theDom.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.option-a&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">val</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> optionB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> theDom.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.option-b&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">val</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { questionName, optionA, optionB };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，仅是实现一个问答卡片的编辑就需要编写不少的代码，大多数代码内容都是为了拼接 HTML 内容、获取 DOM 节点、操作 DOM 节点。</p><p>这些代码逻辑，如果我们使用 Vue 来实现，只需要这么写：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div v</span><span style="color:#F97583;">-for=</span><span style="color:#9ECBFF;">&quot;card in cards&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">      type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;form-control question&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;card.questionName&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;你的问题&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">      type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;form-control option-a&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;card.optionA&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;回答1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">      type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;form-control option-b&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;card.optionB&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;回答2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Cards&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cards</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 添加一个卡片</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addCard</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cards.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          questionName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          optionA</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          optionB</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 获取卡片的输入值</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">getCardValue</span><span style="color:#E1E4E8;">(index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cards[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div v</span><span style="color:#D73A49;">-for=</span><span style="color:#032F62;">&quot;card in cards&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input</span></span>
<span class="line"><span style="color:#24292E;">      type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#24292E;">      class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;form-control question&quot;</span></span>
<span class="line"><span style="color:#24292E;">      v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;card.questionName&quot;</span></span>
<span class="line"><span style="color:#24292E;">      placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;你的问题&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input</span></span>
<span class="line"><span style="color:#24292E;">      type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#24292E;">      class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;form-control option-a&quot;</span></span>
<span class="line"><span style="color:#24292E;">      v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;card.optionA&quot;</span></span>
<span class="line"><span style="color:#24292E;">      placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;回答1&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">input</span></span>
<span class="line"><span style="color:#24292E;">      type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#24292E;">      class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;form-control option-b&quot;</span></span>
<span class="line"><span style="color:#24292E;">      v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;card.optionB&quot;</span></span>
<span class="line"><span style="color:#24292E;">      placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;回答2&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Cards&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        cards</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    methods</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 添加一个卡片</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">addCard</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cards.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          questionName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          optionA</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          optionB</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 获取卡片的输入值</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">getCardValue</span><span style="color:#24292E;">(index) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cards[index];</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>可见，前端框架提供了便利的数据绑定、界面更新、事件监听等 API，我们不需要再手动更新前端页面的内容、维护一大堆的 HTML 和变量拼接的动态内容了。</p><p>使用前端框架对开发效率有很大的提升，同时也在一定程度上避免了代码可读性、可维护性等问题。这也是为什么前端框架这么热门，大家都会使用它来进行开发的原因。</p><p>那么，前端框架是怎么做到这些的呢？要实现这些能力，离不开其中的模板引擎。</p><h3 id="前端框架的核心-模板引擎" tabindex="-1">前端框架的核心------模板引擎 <a class="header-anchor" href="#前端框架的核心-模板引擎" aria-label="Permalink to &quot;前端框架的核心------模板引擎&quot;">​</a></h3><p>当用户对页面进行操作、页面内容更新，我们需要实现的功能流程包括：</p><ol><li><p>监听操作；</p></li><li><p>获取数据变量；</p></li><li><p>使用数据变量拼接成 HTML 模板；</p></li><li><p>将 HTML 内容塞到页面对应的地方；</p></li><li><p>将 HTML 片段内需要监听的点击等事件进行绑定。</p></li></ol><p>可以看到，实现逻辑会比较复杂和烦琐。</p><p>如果使用前端框架，我们可以：</p><ul><li><p>使用将数据变量绑定到 HTML 模板的方式，来控制展示的内容；</p></li><li><p>配合一些条件判断、条件循环等逻辑，控制交互的具体逻辑；</p></li><li><p>通过改变数据变量，框架会自动更新页面内容。</p></li></ul><p>这样，我们可以快速高效地完成功能开发，代码的可读性和维护性都远胜于纯手工实现。</p><p>如果使用数据驱动的方式，还可以通过让逻辑与 UI 解耦的方式，提升代码的可维护性。其中的数据绑定、事件绑定等功能，前端框架是依赖模板引擎的方式来实现的。</p><p>以 Vue 为例子，对于开发者编写的 Vue 代码，Vue 会将其进行以下处理从而渲染到页面中：</p><ol><li><p>解析语法生成 AST 对象；</p></li><li><p>根据生成的 AST 对象，完成<code>data</code>数据初始化；</p></li><li><p>根据 AST 对象和<code>data</code>数据绑定情况，生成虚拟 DOM 对象；</p></li><li><p>将虚拟 DOM 对象生成真正的 DOM 元素插入到页面中，此时页面会被渲染。</p></li></ol><p>模板引擎将模板语法进行解析，分别生成 HTML DOM，使用像 HTML 拼接的方式（在对应的位置绑定变量、指令解析获取拼接逻辑等等），同时配合事件的管理、虚拟 DOM 的设计，可以最大化地提升页面的性能。</p><p>这些便是模板引擎主要的工作，我们来分别看一下。</p><h4 id="解析语法生成-ast-对象" tabindex="-1">解析语法生成 AST 对象 <a class="header-anchor" href="#解析语法生成-ast-对象" aria-label="Permalink to &quot;解析语法生成 AST 对象&quot;">​</a></h4><p>抽象语法树（Abstract Syntax Tree）也称为 AST 语法树，指的是源代码语法所对应的树状结构。其实我们的 DOM 结构树，也是 AST 的一种，浏览器会对 HTML DOM 进行语法解析、并生成最终的页面。</p><p>生成 AST 的过程涉及编译器的原理，一般经过以下过程。</p><ol><li><p>语法分析。模板引擎需要在这个过程中识别出特定的语法，比如<code>v-if</code>/<code>v-for</code>这样的指令，或是<code>&lt;MyCustomComponent&gt;</code>这样的自定义 DOM 标签，还有<code>@click</code>/<code>:props</code>这样的简化绑定语法等。</p></li><li><p>语义分析。这个过程会审查源程序有无语义错误，为代码生成阶段收集类型信息，一般类型检查也会在这个过程中进行。例如我们绑定了某个不存在的变量或者事件，又或者是使用了某个未定义的自定义组件等，都会在这个阶段进行报错提示。</p></li><li><p>生成 AST 对象。</p></li></ol><p>以 Vue 为例，生成 AST 的过程包括 HTML 模板解析、元素检查和预处理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  将HTML编译成AST对象</span></span>
<span class="line"><span style="color:#6A737D;"> *  该代码片段基于Vue2.x版本</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">export function </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> CompilerOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ASTElement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回AST对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 篇幅原因，一些前置定义省略</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 此处开始解析HTML模板</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parseHTML</span><span style="color:#E1E4E8;">(template, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    expectHTML</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.expectHTML,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isUnaryTag</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.isUnaryTag,</span></span>
<span class="line"><span style="color:#E1E4E8;">    shouldDecodeNewlines</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> options.shouldDecodeNewlines,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(tag, attrs, unary) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 一些前置检查和设置、兼容处理此处省略</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 此处定义了初始化的元素AST对象</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> element</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ASTElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">        attrsList</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> attrs,</span></span>
<span class="line"><span style="color:#E1E4E8;">        attrsMap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeAttrsMap</span><span style="color:#E1E4E8;">(attrs),</span></span>
<span class="line"><span style="color:#E1E4E8;">        parent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> currentParent,</span></span>
<span class="line"><span style="color:#E1E4E8;">        children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 检查元素标签是否合法（不是保留命名）</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isForbiddenTag</span><span style="color:#E1E4E8;">(element) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isServerRendering</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        element.forbidden </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Templates should only be responsible for mapping the state to the &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;UI. Avoid placing tags with side-effects in your templates, such as &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              \`</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">\${tag}</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">\` </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;, as they will not be parsed.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          );</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 执行一些前置的元素预处理</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> preTransforms.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        preTransforms[i](element, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 是否原生元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inVPre) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理元素的一些属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processRawAttrs</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理指令，此处包括v-for/v-if/v-once/key等等</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processFor</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processIf</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processOnce</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processKey</span><span style="color:#E1E4E8;">(element); </span><span style="color:#6A737D;">// 删除结构属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 确定这是否是一个简单的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        element.plain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">element.key </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">attrs.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理ref/slot/component等属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processRef</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processSlot</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processComponent</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> transforms.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          transforms[i](element, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">processAttrs</span><span style="color:#E1E4E8;">(element);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 后面还有一些父子节点等处理，此处省略</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其他省略</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  将HTML编译成AST对象</span></span>
<span class="line"><span style="color:#6A737D;"> *  该代码片段基于Vue2.x版本</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">export function </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> CompilerOptions</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ASTElement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回AST对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 篇幅原因，一些前置定义省略</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 此处开始解析HTML模板</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parseHTML</span><span style="color:#24292E;">(template, {</span></span>
<span class="line"><span style="color:#24292E;">    expectHTML</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.expectHTML,</span></span>
<span class="line"><span style="color:#24292E;">    isUnaryTag</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.isUnaryTag,</span></span>
<span class="line"><span style="color:#24292E;">    shouldDecodeNewlines</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.shouldDecodeNewlines,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(tag, attrs, unary) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 一些前置检查和设置、兼容处理此处省略</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 此处定义了初始化的元素AST对象</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> element</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ASTElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        tag,</span></span>
<span class="line"><span style="color:#24292E;">        attrsList</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> attrs,</span></span>
<span class="line"><span style="color:#24292E;">        attrsMap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeAttrsMap</span><span style="color:#24292E;">(attrs),</span></span>
<span class="line"><span style="color:#24292E;">        parent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> currentParent,</span></span>
<span class="line"><span style="color:#24292E;">        children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 检查元素标签是否合法（不是保留命名）</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isForbiddenTag</span><span style="color:#24292E;">(element) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isServerRendering</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        element.forbidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Templates should only be responsible for mapping the state to the &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;UI. Avoid placing tags with side-effects in your templates, such as &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              \`</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">\${tag}</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">\` </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;, as they will not be parsed.&quot;</span></span>
<span class="line"><span style="color:#24292E;">          );</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 执行一些前置的元素预处理</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> preTransforms.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        preTransforms[i](element, options);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 是否原生元素</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inVPre) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理元素的一些属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processRawAttrs</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理指令，此处包括v-for/v-if/v-once/key等等</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processFor</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processIf</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processOnce</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processKey</span><span style="color:#24292E;">(element); </span><span style="color:#6A737D;">// 删除结构属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 确定这是否是一个简单的元素</span></span>
<span class="line"><span style="color:#24292E;">        element.plain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">element.key </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">attrs.length;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理ref/slot/component等属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processRef</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processSlot</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processComponent</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> transforms.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          transforms[i](element, options);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processAttrs</span><span style="color:#24292E;">(element);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 后面还有一些父子节点等处理，此处省略</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其他省略</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，Vue 将开发者的模板代码解析成 AST 对象，我们来看看这样的 AST 对象是怎样生成 DOM 元素的。</p><h4 id="ast-对象生成-dom-元素" tabindex="-1">AST 对象生成 DOM 元素 <a class="header-anchor" href="#ast-对象生成-dom-元素" aria-label="Permalink to &quot;AST 对象生成 DOM 元素&quot;">​</a></h4><p>前面提到，在编译解析和渲染过程中，模板引擎会识别和解析模板语法语义、生成 AST 对象，最后根据 AST 对象会生成最终的 DOM 元素。</p><p>举个例子，我们写了以下这么一段 HTML 模板：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">123</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">456</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">span</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">789</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">span</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">123</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">456</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">span</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">789</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">span</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>模板引擎可以在语法分析、语义分析等步骤后，得到这样的一个 AST 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">thisDiv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  dom</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dom&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ele</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    nodeIndex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dom&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ele</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        nodeIndex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{ type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">, value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;"> }],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dom&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ele</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        nodeIndex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">          { type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">, value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;456&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dom&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            ele</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;span&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            nodeIndex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{ type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">, value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;789&quot;</span><span style="color:#E1E4E8;"> }],</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">thisDiv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  dom</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dom&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ele</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    nodeIndex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dom&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ele</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        nodeIndex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{ type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">, value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;"> }],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dom&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ele</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        nodeIndex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">          { type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">, value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;456&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">          {</span></span>
<span class="line"><span style="color:#24292E;">            type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dom&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            ele</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;span&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            nodeIndex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{ type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">, value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;789&quot;</span><span style="color:#24292E;"> }],</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>这个 AST 对象维护我们需要的一些信息，包括 HTML 元素里：</p><ul><li><p>需要绑定哪些变量（变量更新的时候需要更新该节点内容）；</p></li><li><p>是否有其他的逻辑需要处理（比如含有逻辑指令，如<code>v-if</code>、<code>v-for</code>等）；</p></li><li><p>哪些节点绑定了事件监听事件（是否匹配一些常用的事件能力支持，如<code>@click</code>）。</p></li></ul><p>模板引擎会根据 AST 对象生成最终的页面片段和逻辑，在这个过程中会通过添加特殊标识（例如元素 ID、属性标记等）的方式来标记 DOM 节点，配合 DOM 元素选择方式、事件监听方式等，在需要更新的时候可快速定位到该 DOM 节点，并进行节点内容更新，从而实现页面内容的更新。</p><p>目前来说，前端模板渲染的实现一般分为以下两种方式。</p><ol><li><p>字符串模版方式：使用拼接的方式生成 DOM 字符串，直接通过<code>innderHTML()</code>插入页面。</p></li><li><p>节点模版方式：使用<code>createElement()</code>/<code>appendChild()</code>/<code>textContent</code>等方法动态地插入 DOM 节点。</p></li></ol><p>在使用字符串模版的时候，我们将<code>nodeIndex</code>绑定在元素属性上，主要用于在数据更新时追寻节点进行内容更新。</p><p>在使用节点模版的时候，我们可在创建节点时将该节点保存下来，直接用于数据更新：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 假设这是一个生成 DOM 的过程，包括 innerHTML 和事件监听</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">generateDOM</span><span style="color:#E1E4E8;">(astObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { dom, binding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> astObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 生成DOM，这里假装当前节点是baseDom</span></span>
<span class="line"><span style="color:#E1E4E8;">  baseDom.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDOMString</span><span style="color:#E1E4E8;">(dom);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对于数据绑定的，来进行监听更新吧</span></span>
<span class="line"><span style="color:#E1E4E8;">  baseDom.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data:change&quot;</span><span style="color:#E1E4E8;">, (name, value) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 寻找匹配的数据绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> binding.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">((x) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> x.valueName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若找到值绑定的对应节点，则更新其值。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      baseDom.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(\`[data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">index</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;\${obj.nodeIndex}&quot;</span><span style="color:#E1E4E8;">]\`).innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取DOM字符串，这里简单拼成字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">getDOMString</span><span style="color:#E1E4E8;">(domObj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 无效对象返回&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">domObj) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { type, children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [], nodeIndex, ele, value } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> domObj;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dom&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若有子对象，递归返回生成的字符串拼接</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> childString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    children.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((x) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      childString </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDOMString</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// dom对象，拼接生成对象字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> \`</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">\${ele} data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">index</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;\${nodeIndex}&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">\${childString}</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">\${ele}</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若为textNode，返回text的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 假设这是一个生成 DOM 的过程，包括 innerHTML 和事件监听</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">generateDOM</span><span style="color:#24292E;">(astObject) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { dom, binding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> astObject;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 生成DOM，这里假装当前节点是baseDom</span></span>
<span class="line"><span style="color:#24292E;">  baseDom.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDOMString</span><span style="color:#24292E;">(dom);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 对于数据绑定的，来进行监听更新吧</span></span>
<span class="line"><span style="color:#24292E;">  baseDom.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data:change&quot;</span><span style="color:#24292E;">, (name, value) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 寻找匹配的数据绑定</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> binding.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">((x) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> x.valueName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> name);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若找到值绑定的对应节点，则更新其值。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj) {</span></span>
<span class="line"><span style="color:#24292E;">      baseDom.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(\`[data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">index</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;\${obj.nodeIndex}&quot;</span><span style="color:#24292E;">]\`).innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取DOM字符串，这里简单拼成字符串</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">getDOMString</span><span style="color:#24292E;">(domObj) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 无效对象返回&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">domObj) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { type, children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [], nodeIndex, ele, value } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> domObj;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dom&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若有子对象，递归返回生成的字符串拼接</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> childString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    children.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((x) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      childString </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDOMString</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// dom对象，拼接生成对象字符串</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> \`</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">\${ele} data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">index</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;\${nodeIndex}&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">\${childString}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">\${ele}</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">\`;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若为textNode，返回text的值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过上面的方式，前端框架实现了将 AST 对象生成 DOM 元素，并将这些 DOM 元素渲染或更新到页面上。</p><p>或许你会觉得疑惑：原本就是一个<code>&lt;div&gt;</code>HTML 模板，经过 AST 生成一个对象，最终还是生成一个<code>&lt;div&gt;</code>DOM 节点，看起来好像挺多余的。</p><p>实际上，在这个过程中，模板引擎可以实现更多功能。</p><h4 id="模板引擎可以做更多" tabindex="-1">模板引擎可以做更多 <a class="header-anchor" href="#模板引擎可以做更多" aria-label="Permalink to &quot;模板引擎可以做更多&quot;">​</a></h4><p>将 HTML 模板解析成 AST 对象，再根据 AST 对象生成 DOM 节点，在这个过程中前端框架可以实现以下功能：</p><ol><li><p>排除无效 DOM 元素（非自定义组件、也非默认组件的 DOM 元素），在构建阶段可及时发现并进行报错；</p></li><li><p>可识别出自定义组件，并渲染对应的组件；</p></li><li><p>可方便地实现数据绑定、事件绑定等功能；</p></li><li><p>为虚拟 DOM Diff 过程打下铺垫；</p></li><li><p>HTML 转义（预防 XSS 漏洞）。</p></li></ol><p>这里我们以第 5 点预防 XSS 漏洞为例子，详细地介绍一下模板引擎是如何避免 XSS 攻击的。</p><h4 id="预防-xss-漏洞" tabindex="-1">预防 XSS 漏洞 <a class="header-anchor" href="#预防-xss-漏洞" aria-label="Permalink to &quot;预防 XSS 漏洞&quot;">​</a></h4><p>我们知道 XSS 的整个攻击过程大概为：</p><ol><li><p>攻击者提交含有恶意代码的内容（比如 JavaScript 脚本）；</p></li><li><p>页面渲染的时候，这些内容未被过滤就被加载处理，比如获取 Cookie、执行操作等；</p></li><li><p>其他用户在浏览页面的时候，就会在加载到恶意代码时受到攻击。</p></li></ol><p>要避免网站用户受到 XSS 攻击，主要方法是将用户提交的内容进行过滤处理。大多数前端框架会自带 HTML 转义功能，从而避免的 XSS 攻击。</p><p>以 Vue 为例，使用默认的数据绑定方式（双大括号、<code>v-bind</code>等）会进行 HTML 转义，将数据解释为普通文本，而非 HTML 代码。</p><p>除此预防 XSS 漏洞之外，前端框架还做了一些性能、安全性等方面的优化，也提供了一些用于项目开发配套的工具，包括路由的管理、状态和数据的管理等工具。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>今天我带大家了解了前端框架的出现，由于前端框架帮开发者解决了很多重复性的工作（拼接 HTML 模板、DOM 元素查找、DOM 元素事件监听等），极大地提升了开发者的效率，同时还提升了代码的可读性和可维护性，因此受到很多前端开发的追捧。</p><p>除此之外，我还介绍了前端框架中模板引擎的实现原理，包括解析语法生成 AST 对象、根据 AST 对象生成 DOM 元素，并对生成的 DOM 元素进行标记，则可以在变量改变的时候，解析找到相应的 DOM 元素进行内容的更新。</p><p>在了解这些内容之后，我们可以在页面渲染遇到性能问题的时候，根据所使用框架的具体实现，找到可能导致页面渲染卡顿或是不流畅的原因。除此之外，在使用框架的过程中，遇到一些语法报错、XSS 安全漏洞等问题的时候，也可以快速找到解决办法。</p><p>今日思考：React.js 中的 JSX 和模板引擎是什么关系？在留言区写出你的想法！</p>`,83),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const D=s(l,[["render",t]]);export{d as __pageData,D as default};
