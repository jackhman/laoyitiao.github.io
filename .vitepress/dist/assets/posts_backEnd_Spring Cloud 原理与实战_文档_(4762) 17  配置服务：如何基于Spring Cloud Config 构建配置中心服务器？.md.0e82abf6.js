import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const d=JSON.parse('{"title":"构建配置中心 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4762) 17  配置服务：如何基于Spring Cloud Config 构建配置中心服务器？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4762) 17  配置服务：如何基于Spring Cloud Config 构建配置中心服务器？.md","lastUpdated":null}'),p={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4762) 17  配置服务：如何基于Spring Cloud Config 构建配置中心服务器？.md"},o=l(`<p>在上一课时中，我们提到配置中心有两个核心组件，一个是<strong>配置服务器</strong> ，一个是<strong>配置仓库</strong>。在 Spring Cloud 中，自研了一个 Spring Cloud Config 框架来构建配置中心，并同时提供了配置服务器和多种配置仓库实现方案。今天我们先来看如何基于 Spring Cloud Config 构建配置服务器，并分别基于本地文件系统和第三方仓库来实现配置仓库。</p><h3 id="构建配置中心" tabindex="-1">构建配置中心 <a class="header-anchor" href="#构建配置中心" aria-label="Permalink to &quot;构建配置中心&quot;">​</a></h3><p>使用 Spring Cloud Config 构建配置中心的第一步是搭建配置服务器，有了配置服务器就可以分别使用本地文件系统以及第三方仓库来实现具体的配置方案。让我们一一来看一下。</p><h4 id="基于-spring-cloud-config-构建配置服务器" tabindex="-1">基于 Spring Cloud Config 构建配置服务器 <a class="header-anchor" href="#基于-spring-cloud-config-构建配置服务器" aria-label="Permalink to &quot;基于 Spring Cloud Config 构建配置服务器&quot;">​</a></h4><p>基于 Spring Cloud Config，要想构建配置服务器，我们需要在 SpringHealth 案例中创建一个新的独立服务 config-server 并导入两个组件，它们分别是 spring-cloud-config-server 和 spring-cloud-starter-config，其中前者包含了用于构建配置服务器的各种组件，相应的 Maven 依赖如下所示。</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-config-server&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-config&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-config-server&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-config&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接下来我们在新建的 config-server 工程中添加一个 Bootstrap 类 ConfigServerApplication，如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigServer</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigServerApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(ConfigServerApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigServer</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigServerApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(ConfigServerApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>除了熟悉的 @SpringCloudApplication 注解之外，我们还看到这里添加了一个崭新的注解 @EnableConfigServer。有了这个注解，配置服务器就可以将所存储的配置信息转化为 RESTful 接口数据供各个业务微服务在分布式环境下进行使用。</p><h4 id="实现基于本地文件系统的配置方案" tabindex="-1">实现基于本地文件系统的配置方案 <a class="header-anchor" href="#实现基于本地文件系统的配置方案" aria-label="Permalink to &quot;实现基于本地文件系统的配置方案&quot;">​</a></h4><p>Spring Cloud Config 中提供了多种配置仓库的实现方案，最常见的就是基于本地文件系统的配置方案和基于 Git 的配置方案。我们先来看基于本地文件系统的配置方案，在这种配置方案中，相当于配置仓库位于配置服务器的内部。</p><p>在 SpringHealth 案例中，当我们使用本地配置文件方案构建配置仓库时，一种典型的项目工程结构参考下图：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6E/CA/Ciqc1F-zkbCARstdAAPVdmGsq8Y115.png" alt="Lark20201117-170114.png"><br> 本地配置文件方案下的项目工程结构图</p><p>可以看到，我们在 src/main/resources 目录下创建一个 springhealthconfig 文件夹，再在这个文件夹下分别创建 userservice、deviceservice 和 interventionservice 这三个子文件夹，请注意这三个子文件夹的名称必须与各个服务自身的名称完全一致。然后我们可以看到这三个子文件夹下面都放着以服务名称命名的针对不同运行环境的 .yml 配置文件。</p><p>接下来，我们在 application.yml 文件中添加如下配置项，通过 searchLocations 指向各个配置文件的路径。</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">server:</span></span>
<span class="line"><span style="color:#E1E4E8;">   port: 8888</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">   cloud:</span></span>
<span class="line"><span style="color:#E1E4E8;">      config:</span></span>
<span class="line"><span style="color:#E1E4E8;">        server:</span></span>
<span class="line"><span style="color:#E1E4E8;">           native:</span></span>
<span class="line"><span style="color:#E1E4E8;">	           searchLocations: classpath: springhealthconfig/</span></span>
<span class="line"><span style="color:#E1E4E8;">	                            classpath: springhealthconfig/userservice,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                            classpath: springhealthconfig/deviceservice,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                            classpath: springhealthconfig/interventionservice</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">server:</span></span>
<span class="line"><span style="color:#24292E;">   port: 8888</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">   cloud:</span></span>
<span class="line"><span style="color:#24292E;">      config:</span></span>
<span class="line"><span style="color:#24292E;">        server:</span></span>
<span class="line"><span style="color:#24292E;">           native:</span></span>
<span class="line"><span style="color:#24292E;">	           searchLocations: classpath: springhealthconfig/</span></span>
<span class="line"><span style="color:#24292E;">	                            classpath: springhealthconfig/userservice,</span></span>
<span class="line"><span style="color:#24292E;">	                            classpath: springhealthconfig/deviceservice,</span></span>
<span class="line"><span style="color:#24292E;">	                            classpath: springhealthconfig/interventionservice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>现在我们再 springhealthconfig/userservice/userservice.yml 配置文件中添加如下所示的配置信息，显然这些配置信息用于设置 MySQL 数据库访问的各项参数。</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">	  jpa:</span></span>
<span class="line"><span style="color:#E1E4E8;">	    database: MYSQL</span></span>
<span class="line"><span style="color:#E1E4E8;">	  datasource:</span></span>
<span class="line"><span style="color:#E1E4E8;">	    platform: mysql</span></span>
<span class="line"><span style="color:#E1E4E8;">	    url: jdbc:mysql://127.0.0.1:3306/springhealth_user</span></span>
<span class="line"><span style="color:#E1E4E8;">	driver-class-name: com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">	    username: root</span></span>
<span class="line"><span style="color:#E1E4E8;">	    password: root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">	  jpa:</span></span>
<span class="line"><span style="color:#24292E;">	    database: MYSQL</span></span>
<span class="line"><span style="color:#24292E;">	  datasource:</span></span>
<span class="line"><span style="color:#24292E;">	    platform: mysql</span></span>
<span class="line"><span style="color:#24292E;">	    url: jdbc:mysql://127.0.0.1:3306/springhealth_user</span></span>
<span class="line"><span style="color:#24292E;">	driver-class-name: com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">	    username: root</span></span>
<span class="line"><span style="color:#24292E;">	    password: root</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Spring Cloud Config 为我们提供了强大的集成入口，配置服务器可以将存放在本地文件系统中的配置文件信息自动转化为 RESTful 风格的接口数据。当我们启动配置服务器，并访问 <a href="http://localhost:8888/userservice" target="_blank" rel="noreferrer">http://localhost:8888/userservice</a>/default 端点时，可以得到如下信息：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	    &quot;name&quot;: &quot;userservice&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    &quot;profiles&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">	        &quot;default&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">	    &quot;label&quot;: null,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    &quot;version&quot;: null,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    &quot;state&quot;: null,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    &quot;propertySources&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">	        {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            &quot;name&quot;: &quot;classpath:springhealthconfig/userservice/userservice.yml&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	            &quot;source&quot;: {</span></span>
<span class="line"><span style="color:#E1E4E8;">	                &quot;spring.jpa.database&quot;: &quot;MYSQL&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                &quot;spring.datasource.platform&quot;: &quot;mysql&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                &quot;spring.datasource.url&quot;: &quot;jdbc:mysql://119.3.52.175:3306/springhealth_user&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                &quot;spring.datasource.username&quot;: &quot;root&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                &quot;spring.datasource.password&quot;: &quot;1qazxsw2#edc&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	                &quot;spring.datasource.driver-class-name&quot;: &quot;com.mysql.jdbc.Driver&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	            }</span></span>
<span class="line"><span style="color:#E1E4E8;">	        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	    &quot;name&quot;: &quot;userservice&quot;,</span></span>
<span class="line"><span style="color:#24292E;">	    &quot;profiles&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">	        &quot;default&quot;</span></span>
<span class="line"><span style="color:#24292E;">	    ],</span></span>
<span class="line"><span style="color:#24292E;">	    &quot;label&quot;: null,</span></span>
<span class="line"><span style="color:#24292E;">	    &quot;version&quot;: null,</span></span>
<span class="line"><span style="color:#24292E;">	    &quot;state&quot;: null,</span></span>
<span class="line"><span style="color:#24292E;">	    &quot;propertySources&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">	        {</span></span>
<span class="line"><span style="color:#24292E;">	            &quot;name&quot;: &quot;classpath:springhealthconfig/userservice/userservice.yml&quot;,</span></span>
<span class="line"><span style="color:#24292E;">	            &quot;source&quot;: {</span></span>
<span class="line"><span style="color:#24292E;">	                &quot;spring.jpa.database&quot;: &quot;MYSQL&quot;,</span></span>
<span class="line"><span style="color:#24292E;">	                &quot;spring.datasource.platform&quot;: &quot;mysql&quot;,</span></span>
<span class="line"><span style="color:#24292E;">	                &quot;spring.datasource.url&quot;: &quot;jdbc:mysql://119.3.52.175:3306/springhealth_user&quot;,</span></span>
<span class="line"><span style="color:#24292E;">	                &quot;spring.datasource.username&quot;: &quot;root&quot;,</span></span>
<span class="line"><span style="color:#24292E;">	                &quot;spring.datasource.password&quot;: &quot;1qazxsw2#edc&quot;,</span></span>
<span class="line"><span style="color:#24292E;">	                &quot;spring.datasource.driver-class-name&quot;: &quot;com.mysql.jdbc.Driver&quot;</span></span>
<span class="line"><span style="color:#24292E;">	            }</span></span>
<span class="line"><span style="color:#24292E;">	        }</span></span>
<span class="line"><span style="color:#24292E;">	    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>因为我们访问的是<a href="http://localhost:8888/userservice" target="_blank" rel="noreferrer">http://localhost:8888/userservice/default</a>端点，相当于获取的是 userservice.yml 文件中的配置信息，所以这里的&quot;profiles&quot;值为&quot;default&quot;，意味着我们的配置文件的 Profile 是默认环境。而&quot;label&quot;的值是&quot;master&quot;，实际上也是代表着一种默认版本信息。最后的&quot;propertySources&quot;段展示了配置文件的路径以及具体内容。</p><p>那么，如果我们想要访问的是 test 环境的配置信息应该怎么做呢？很简单，对应的端点就变成了<a href="http://localhost:8888/userservice/test" target="_blank" rel="noreferrer">http://localhost:8888/userservice/test</a>，你可以尝试进行访问，其他环境也以此类推。</p><h4 id="实现基于第三方仓库的配置方案" tabindex="-1">实现基于第三方仓库的配置方案 <a class="header-anchor" href="#实现基于第三方仓库的配置方案" aria-label="Permalink to &quot;实现基于第三方仓库的配置方案&quot;">​</a></h4><p>对于 Spring Cloud Config 而言，更加推荐将配置信息存放在 Git 等具有版本控制机制的远程仓库中。假如我们把配置信息放在 Git 仓库中，通常的做法是把所有的配置文件放到自建或公共的 Git 系统中。例如在 SpringHealth 案例中，我们可以把各个服务所依赖的配置文件统一存放到 GitHub 上进行托管。</p><p>因为改变了配置仓库的实现方式，我们同样需要修改 application.yml 中关于配置仓库的配置信息，调整后的配置内容示例如下所示：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">server:</span></span>
<span class="line"><span style="color:#E1E4E8;">	  port: 8888</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">	  cloud:</span></span>
<span class="line"><span style="color:#E1E4E8;">	    config:</span></span>
<span class="line"><span style="color:#E1E4E8;">	      discovery:</span></span>
<span class="line"><span style="color:#E1E4E8;">	        enabled: true</span></span>
<span class="line"><span style="color:#E1E4E8;">	      server:</span></span>
<span class="line"><span style="color:#E1E4E8;">	        encrypt.enabled: false</span></span>
<span class="line"><span style="color:#E1E4E8;">	        git:</span></span>
<span class="line"><span style="color:#E1E4E8;">	          uri: https://github.com/tianyilan/springcloud-demo/config-repository/</span></span>
<span class="line"><span style="color:#E1E4E8;">	          searchPaths: userservice,deviceservice,interventionservice</span></span>
<span class="line"><span style="color:#E1E4E8;">	          username: tianyilan</span></span>
<span class="line"><span style="color:#E1E4E8;">	          password: tianyilan_pwd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">server:</span></span>
<span class="line"><span style="color:#24292E;">	  port: 8888</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">	  cloud:</span></span>
<span class="line"><span style="color:#24292E;">	    config:</span></span>
<span class="line"><span style="color:#24292E;">	      discovery:</span></span>
<span class="line"><span style="color:#24292E;">	        enabled: true</span></span>
<span class="line"><span style="color:#24292E;">	      server:</span></span>
<span class="line"><span style="color:#24292E;">	        encrypt.enabled: false</span></span>
<span class="line"><span style="color:#24292E;">	        git:</span></span>
<span class="line"><span style="color:#24292E;">	          uri: https://github.com/tianyilan/springcloud-demo/config-repository/</span></span>
<span class="line"><span style="color:#24292E;">	          searchPaths: userservice,deviceservice,interventionservice</span></span>
<span class="line"><span style="color:#24292E;">	          username: tianyilan</span></span>
<span class="line"><span style="color:#24292E;">	          password: tianyilan_pwd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>可以看到，我们在 spring.cloud.config.server.git 配置段中指定了 GitHub 相关的各项信息，其中 searchPaths 用于指向各个配置文件所在的目录名称。这里的配置项只是基于我 GitHub 账号的一个演示，你也可以根据自身情况进行设置。</p><p>事实上，基于 Git 的配置方案的最终结果也是将位于 Git 仓库中的远程配置文件加载到本地。一旦配置文件已经加载到本地，那么对这些配置文件的处理方式以及处理效果与前面介绍的本地文件系统是完全一样的。</p><h3 id="spring-cloud-config-server-工作机制" tabindex="-1">Spring Cloud Config Server 工作机制 <a class="header-anchor" href="#spring-cloud-config-server-工作机制" aria-label="Permalink to &quot;Spring Cloud Config Server 工作机制&quot;">​</a></h3><p>在 Spring Cloud Config 中，针对服务器端和客户端组件分别构建了 spring-cloud-config-server 和 spring-cloud-config-client 这两个代码工程。今天我们的主题是讨论配置服务器，所以先来看 spring-cloud-config-server 代码工程，关于客户端组件以及 spring-cloud-config-client 代码工程中的相关内容放在下一课时中进行介绍。</p><h4 id="environmentrepository" tabindex="-1">EnvironmentRepository <a class="header-anchor" href="#environmentrepository" aria-label="Permalink to &quot;EnvironmentRepository&quot;">​</a></h4><p>@EnableConfigServer 注解是理解 Spring Cloud Config 服务器端组件的入口，该注解定义如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(ConfigServerConfiguration.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">EnableConfigServer</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(ConfigServerConfiguration.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EnableConfigServer</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里通过 @Import 注解引入了 ConfigServerConfiguration，我们发现在该类中定义了一个 Marker 空类。在 Spring Boot 的自动配置体系中，这是常见的一种处理方式。这个 Marker 类的作用就是为了提供一个启动条件，而这个启动条件的唯一使用者就是 ConfigServerAutoConfiguration，如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnBean</span><span style="color:#E1E4E8;">(ConfigServerConfiguration.Marker.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(ConfigServerProperties.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">({ EnvironmentRepositoryConfiguration.class, CompositeConfiguration.class, ResourceRepositoryConfiguration.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigServerEncryptionConfiguration.class, ConfigServerMvcConfiguration.class })</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigServerAutoConfiguration</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnBean</span><span style="color:#24292E;">(ConfigServerConfiguration.Marker.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(ConfigServerProperties.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">({ EnvironmentRepositoryConfiguration.class, CompositeConfiguration.class, ResourceRepositoryConfiguration.class,</span></span>
<span class="line"><span style="color:#24292E;">        ConfigServerEncryptionConfiguration.class, ConfigServerMvcConfiguration.class })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigServerAutoConfiguration</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这里的 @ConditionalOnBean(ConfigServerConfiguration.Marker.class) 条件注解表示只有在类路径中构建了这个 Marker 类的实例时才会执行 ConfigServerAutoConfiguration 的处理。同时，这里又进一步导入了一批配置类，我们无意对这些配置类都展开讨论，而是重点关注 EnvironmentRepositoryConfiguration。对于 Spring Cloud Config 而言，它把所有的配置信息抽象为一种 Environment（环境），而存储这些配置信息的地方就称为 EnvironmentRepository。EnvironmentRepository 就是带有配置仓库的配置中心实现方案的具体体现，它是一个接口，定义如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnvironmentRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Environment </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">application</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">profile</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">label</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnvironmentRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Environment </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">application</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">profile</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">label</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到这个接口非常简单，Spring Cloud Config中把配置信息抽象为应用（application）、环境（profile）和版本（label）这三个维度进行管理，通过这三个维度，我们就可以确定唯一的一份配置数据。EnvironmentRepository 的实现类非常多，参见下图，从命名中基本都可以看出这些类是用于加载哪些不同类型的配置：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6E/CB/Ciqc1F-zkraAStwyAAmrIq_4e-c473.png" alt="Lark20201117-170119.png"><br> EnvironmentRepository 类层结构图</p><p>事实上，上图中各种实现类之间存在一定的关联，那么我们选择哪一个 EnvironmentRepository 来作为切入点呢？这个问题实际上不难回答，因为 Spring Cloud Config 为我们提供了一个默认的 EnvironmentRepositoryConfiguration，即 DefaultRepositoryConfiguration，如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EnvironmentRepository.class, </span><span style="color:#79B8FF;">search</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SearchStrategy.CURRENT)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultRepositoryConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ConfigurableEnvironment environment;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ConfigServerProperties server;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">required</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TransportConfigCallback customTransportConfigCallback;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MultipleJGitEnvironmentRepository </span><span style="color:#B392F0;">defaultEnvironmentRepository</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            MultipleJGitEnvironmentRepositoryFactory </span><span style="color:#FFAB70;">gitEnvironmentRepositoryFactory</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            MultipleJGitEnvironmentProperties </span><span style="color:#FFAB70;">environmentProperties</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> gitEnvironmentRepositoryFactory.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(environmentProperties);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EnvironmentRepository.class, </span><span style="color:#005CC5;">search</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SearchStrategy.CURRENT)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultRepositoryConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ConfigurableEnvironment environment;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ConfigServerProperties server;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">required</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TransportConfigCallback customTransportConfigCallback;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MultipleJGitEnvironmentRepository </span><span style="color:#6F42C1;">defaultEnvironmentRepository</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            MultipleJGitEnvironmentRepositoryFactory </span><span style="color:#E36209;">gitEnvironmentRepositoryFactory</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            MultipleJGitEnvironmentProperties </span><span style="color:#E36209;">environmentProperties</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> gitEnvironmentRepositoryFactory.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(environmentProperties);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>而 GitRepositoryConfiguration 继承了这个 DefaultRepositoryConfiguration，也就是说 Spring Cloud Config 中默认使用 Git 作为配置仓库来完成配置信息的存储和管理，提供的 EnvironmentRepository 就是 MultipleJGitEnvironmentRepository，而 MultipleJGitEnvironmentRepository 则继承了抽象类 JGitEnvironmentRepository。</p><p>当服务器启动时，在 JGitEnvironmentRepository 中会决定是否调用 initClonedRepository() 方法来完成从远程 Git 仓库 Clone 代码。如果执行了这一操作，相当于会将配置文件从 Git 上 clone 到本地，然后再进行其他的操作。在 JGitEnvironmentRepository 抽象类中，提供了大量针对第三方 Git 仓库的操作代码，这些都不是理解配置中心的重点内容，这里不做展开。我们只需要明白，无论采用诸如 Git、SVN 等具体某一种配置仓库的实现方式，最终我们处理的对象都是位于本地文件系统中的配置文件。为了理解这点，我们需要围绕 MultipleJGitEnvironmentRepository 类从下向上回顾整个类层结构，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/6E/D6/CgqCHl-zkt6AUy91AAGGBtqqXYE828.png" alt="Lark20201117-170122.png"><br> MultipleJGitEnvironmentRepository 类层结构图</p><p>上图中，AbstractScmEnvironmentRepository 实现了 EnvironmentRepository 接口，同时也是 JGitEnvironmentRepository 的父类，它的 findOne 方法如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> Environment </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(String application, String profile, String label) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 构建 NativeEnvironmentRepository</span></span>
<span class="line"><span style="color:#E1E4E8;">        NativeEnvironmentRepository delegate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NativeEnvironmentRepository</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getEnvironment</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NativeEnvironmentProperties</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        Locations locations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getLocations</span><span style="color:#E1E4E8;">(application, profile, label);</span></span>
<span class="line"><span style="color:#E1E4E8;">        delegate.</span><span style="color:#B392F0;">setSearchLocations</span><span style="color:#E1E4E8;">(locations.</span><span style="color:#B392F0;">getLocations</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        Environment result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> delegate.</span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(application, profile, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">setVersion</span><span style="color:#E1E4E8;">(locations.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">setLabel</span><span style="color:#E1E4E8;">(label);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cleaner.</span><span style="color:#B392F0;">clean</span><span style="color:#E1E4E8;">(result, </span><span style="color:#B392F0;">getWorkingDirectory</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toURI</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">getUri</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> Environment </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(String application, String profile, String label) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 构建 NativeEnvironmentRepository</span></span>
<span class="line"><span style="color:#24292E;">        NativeEnvironmentRepository delegate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NativeEnvironmentRepository</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NativeEnvironmentProperties</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Locations locations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLocations</span><span style="color:#24292E;">(application, profile, label);</span></span>
<span class="line"><span style="color:#24292E;">        delegate.</span><span style="color:#6F42C1;">setSearchLocations</span><span style="color:#24292E;">(locations.</span><span style="color:#6F42C1;">getLocations</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Environment result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delegate.</span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(application, profile, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(locations.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">setLabel</span><span style="color:#24292E;">(label);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cleaner.</span><span style="color:#6F42C1;">clean</span><span style="color:#24292E;">(result, </span><span style="color:#6F42C1;">getWorkingDirectory</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toURI</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">getUri</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注意到这里的代码中使用了 NativeEnvironmentRepository，该类实现了 EnvironmentRepository 接口并封装了对本地文件的相关操作。我们同样关注它的 findOne 方法，如下所示（部分代码做了裁剪）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Environment </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(String config, String profile, String label) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplicationBuilder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringApplicationBuilder</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                PropertyPlaceholderAutoConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigurableEnvironment environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEnvironment</span><span style="color:#E1E4E8;">(profile);</span></span>
<span class="line"><span style="color:#E1E4E8;">        builder.</span><span style="color:#B392F0;">environment</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">        builder.</span><span style="color:#B392F0;">web</span><span style="color:#E1E4E8;">(WebApplicationType.NONE).</span><span style="color:#B392F0;">bannerMode</span><span style="color:#E1E4E8;">(Mode.OFF);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取配置信息的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getArgs</span><span style="color:#E1E4E8;">(config, profile, label);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置监听器用于监听配置文件的变化</span></span>
<span class="line"><span style="color:#E1E4E8;">        builder.</span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setListeners</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigFileApplicationListener</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigurableApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        environment.</span><span style="color:#B392F0;">getPropertySources</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;profiles&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clean</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PassthruEnvironmentRepository</span><span style="color:#E1E4E8;">(environment).</span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(config,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    profile, label));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            context.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Environment </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(String config, String profile, String label) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplicationBuilder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringApplicationBuilder</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                PropertyPlaceholderAutoConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">        ConfigurableEnvironment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">(profile);</span></span>
<span class="line"><span style="color:#24292E;">        builder.</span><span style="color:#6F42C1;">environment</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">        builder.</span><span style="color:#6F42C1;">web</span><span style="color:#24292E;">(WebApplicationType.NONE).</span><span style="color:#6F42C1;">bannerMode</span><span style="color:#24292E;">(Mode.OFF);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取配置信息的参数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArgs</span><span style="color:#24292E;">(config, profile, label);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置监听器用于监听配置文件的变化</span></span>
<span class="line"><span style="color:#24292E;">        builder.</span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setListeners</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigFileApplicationListener</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        ConfigurableApplicationContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">        environment.</span><span style="color:#6F42C1;">getPropertySources</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;profiles&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clean</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PassthruEnvironmentRepository</span><span style="color:#24292E;">(environment).</span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(config,</span></span>
<span class="line"><span style="color:#24292E;">                    profile, label));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            context.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>从代码结构上，我们看到最终委托 PassthruEnvironmentRepository 完成配置文件的读取，然后通过 clean 方法完成本地文件地址与远程仓库之间地址的转换。同时，这里用到了 Spring Boot 自带的 ConfigFileApplicationListener 来监听配置文件的变化。</p><h4 id="environmentcontroller" tabindex="-1">EnvironmentController <a class="header-anchor" href="#environmentcontroller" aria-label="Permalink to &quot;EnvironmentController&quot;">​</a></h4><p>在 Spring Cloud Config 中，通过 EnvironmentRepository 获取的配置信息最终通过 EnvironmentController 暴露给客户端应用程序进行。EnvironmentController 类比较简单，类的定义如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestMethod.GET, </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${spring.cloud.config.server.prefix:}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnvironmentController</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EnvironmentRepository repository;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ObjectMapper objectMapper;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET, </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${spring.cloud.config.server.prefix:}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnvironmentController</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EnvironmentRepository repository;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ObjectMapper objectMapper;</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>可以看到它的关键成员变量只有两个，即 EnvironmentRepository 和 ObjectMapper。前者是具体某一个 EnvironmentRepository 的实例，而 ObjectMapper 用于当将结果序列化成 JSON 格式的配置数据。</p><p>EnvironmentController 提供了多种获取配置信息的方法，这些方法接收前面介绍的 application、profile、label 这三个参数。EnvironmentController 中最重要的方法就是如下所示的 defaultLabel 方法和 labelled 方法，这些方法暴露了最常用的获取配置的 HTTP 端点：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/{name}/{profiles:.*[^-].*}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Environment </span><span style="color:#B392F0;">defaultLabel</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String name,</span></span>
<span class="line"><span style="color:#E1E4E8;">          @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String profiles) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">labelled</span><span style="color:#E1E4E8;">(name, profiles, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/{name}/{profiles}/{label:.*}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Environment </span><span style="color:#B392F0;">labelled</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String name, @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String profiles, @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String label) {        </span></span>
<span class="line"><span style="color:#E1E4E8;">  Environment environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.repository.</span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(name, profiles, label);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">acceptEmpty </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (environment </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> environment.</span><span style="color:#B392F0;">getPropertySources</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">())){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnvironmentNotFoundException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Profile Not found&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> environment;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/{name}/{profiles:.*[^-].*}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Environment </span><span style="color:#6F42C1;">defaultLabel</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> String name,</span></span>
<span class="line"><span style="color:#24292E;">          @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> String profiles) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">labelled</span><span style="color:#24292E;">(name, profiles, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/{name}/{profiles}/{label:.*}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Environment </span><span style="color:#6F42C1;">labelled</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> String name, @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> String profiles, @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> String label) {        </span></span>
<span class="line"><span style="color:#24292E;">  Environment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.repository.</span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(name, profiles, label);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">acceptEmpty </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (environment </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">getPropertySources</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">())){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnvironmentNotFoundException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Profile Not found&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> environment;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>可以看到，在 labelled 方法中，会调用 EnvironmentRepository 的 findOne() 方法来加载配置，然后返回给配置的消费者，也就是内嵌了 Spring Cloud Config 客户端的各个业务微服务。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本课时关注与如何使用 Spring Cloud Config 来完成配置中心服务器端的构建过程。我们通过该框架创建了一个新的微服务，并嵌入到 SpringHealth 案例系统中。尽管创建配置指定并指定配置仓库的开发工作非常简单，但我们需要在掌握使用方法的基础上深入理解其内部的工作机制。针对 Spring Cloud Config Server 组件，本课时也做了源码级别的原理分析。</p><p>这里给你留一道思考题：在 Spring Cloud Config 中，是如何对位于 Git 等远程仓库中的配置信息进行有效处理的呢？</p><p>在介绍完 Spring Cloud Config Server 组件之后，下一课时将讨论 Spring Cloud Config Client 组件。我们同样先给出客户端组件的使用方法，然后再讲解它的实现机制。</p>`,60),e=[o];function r(t,c,i,E,y,u){return n(),a("div",null,e)}const g=s(p,[["render",r]]);export{d as __pageData,g as default};
