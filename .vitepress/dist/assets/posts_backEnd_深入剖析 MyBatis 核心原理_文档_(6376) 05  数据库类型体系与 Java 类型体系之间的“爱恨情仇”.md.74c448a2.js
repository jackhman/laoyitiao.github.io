import{_ as o,j as e,o as t,g as c,k as l,h as a,s,Q as p}from"./chunks/framework.4e7d56ce.js";const L=JSON.parse('{"title":"05数据库类型体系与Java类型体系之间的“爱恨情仇”","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6376) 05  数据库类型体系与 Java 类型体系之间的“爱恨情仇”.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6376) 05  数据库类型体系与 Java 类型体系之间的“爱恨情仇”.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6376) 05  数据库类型体系与 Java 类型体系之间的“爱恨情仇”.md"},y=s("h1",{id:"_05数据库类型体系与java类型体系之间的-爱恨情仇",tabindex:"-1"},[a("05数据库类型体系与Java类型体系之间的“爱恨情仇” "),s("a",{class:"header-anchor",href:"#_05数据库类型体系与java类型体系之间的-爱恨情仇","aria-label":'Permalink to "05数据库类型体系与Java类型体系之间的“爱恨情仇”"'},"​")],-1),E=s("p",null,"作为一个 Java 程序员，你应该已经具备了使用 JDBC 操作数据库的基础技能。在使用 JDBC 的时候，你会发现 JDBC 的数据类型与 Java 语言中的数据类型虽然有点对应关系，如下图所示，但还是无法做到一一对应，也自然无法做到自动映射。",-1),i=s("p",null,"数据库类型与 Java 类型对应图表",-1),d=s("p",null,"在使用 PreparedStatement 执行 SQL 语句之前，都是需要手动调用 setInt()、setString() 等 set 方法绑定参数，这不仅仅是告诉 JDBC 一个 SQL 模板中哪个占位符需要使用哪个实参，还会将数据从 Java 类型转换成 JDBC 类型。当从 ResultSet 中获取数据的时候，则是一个逆过程，数据会从 JDBC 类型转换为 Java 类型。",-1),F=s("p",null,[a("可以使用 MyBatis 中的"),s("strong",null,"类型转换器"),a("，完成上述两次类型转换，如下图所示：")],-1),g=p(`<p>JDBC 类型数据与 Java 类型数据转换示意图</p><h3 id="深入-typehandler" tabindex="-1">深入 TypeHandler <a class="header-anchor" href="#深入-typehandler" aria-label="Permalink to &quot;深入 TypeHandler&quot;">​</a></h3><p>说了这么多，类型转换器到底是怎么定义的呢？其实，<strong>MyBatis 中的类型转换器就是 TypeHandler 这个接口</strong>，其定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在通过PreparedStatement为SQL语句绑定参数时，会将传入的实参数据由JdbcType类型转换成Java类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setParameter</span><span style="color:#E1E4E8;">(PreparedStatement </span><span style="color:#FFAB70;">ps</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, T </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, JdbcType </span><span style="color:#FFAB70;">jdbcType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从ResultSet中获取数据时会使用getResult()方法，其中会将读取到的数据由Java类型转换成JdbcType类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  T </span><span style="color:#B392F0;">getResult</span><span style="color:#E1E4E8;">(ResultSet </span><span style="color:#FFAB70;">rs</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">columnName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">  T </span><span style="color:#B392F0;">getResult</span><span style="color:#E1E4E8;">(ResultSet </span><span style="color:#FFAB70;">rs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">columnIndex</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">  T </span><span style="color:#B392F0;">getResult</span><span style="color:#E1E4E8;">(CallableStatement </span><span style="color:#FFAB70;">cs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">columnIndex</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeHandler</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在通过PreparedStatement为SQL语句绑定参数时，会将传入的实参数据由JdbcType类型转换成Java类型</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setParameter</span><span style="color:#24292E;">(PreparedStatement </span><span style="color:#E36209;">ps</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, T </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">, JdbcType </span><span style="color:#E36209;">jdbcType</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从ResultSet中获取数据时会使用getResult()方法，其中会将读取到的数据由Java类型转换成JdbcType类型</span></span>
<span class="line"><span style="color:#24292E;">  T </span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">(ResultSet </span><span style="color:#E36209;">rs</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">columnName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">  T </span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">(ResultSet </span><span style="color:#E36209;">rs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">columnIndex</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">  T </span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">(CallableStatement </span><span style="color:#E36209;">cs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">columnIndex</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>MyBatis 中定义了 BaseTypeHandler 抽象类来实现一些 TypeHandler 的公共逻辑</strong>，BaseTypeHandler 在实现 TypeHandler 的同时，还实现了 TypeReference 抽象类。其继承关系如下图所示：</p>`,5),A=s("p",null,"TypeHandler 继承关系图",-1),T=s("p",null,"在 BaseTypeHandler 中，简单实现了 TypeHandler 接口的 setParameter() 方法和 getResult() 方法。",-1),u=s("ul",null,[s("li",null,[s("p",null,"在 setParameter() 实现中，会判断传入的 parameter 实参是否为空，如果为空，则调用 PreparedStatement.setNull() 方法进行设置；如果不为空，则委托 setNonNullParameter() 这个抽象方法进行处理，setNonNullParameter() 方法由 BaseTypeHandler 的子类提供具体实现。")]),s("li",null,[s("p",null,"在 getResult() 的三个重载实现中，会直接调用相应的 getNullableResult() 抽象方法，这里有三个重载的 getNullableResult() 抽象方法，它们都由 BaseTypeHandler 的子类提供具体实现。")])],-1),D=s("p",null,[a("BaseTypeHandler 的具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考"),s("a",{href:"https://github.com/xxxlxy2008/mybatis",target:"_blank",rel:"noreferrer"},"源码"),a("进行学习。")],-1),H=s("p",null,"下图展示了 BaseTypeHandler 的全部实现类，虽然实现类比较多，但是它们的实现方式大同小异。",-1),C=p(`<p>BaseTypeHandler 实现类示意图</p><p>这里我们以 LongTypeHandler 为例进行分析，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LongTypeHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseTypeHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setNonNullParameter</span><span style="color:#E1E4E8;">(PreparedStatement </span><span style="color:#FFAB70;">ps</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, Long </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, JdbcType </span><span style="color:#FFAB70;">jdbcType</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用PreparedStatement.setLong()实现参数绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">        ps.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(i, parameter);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Long </span><span style="color:#B392F0;">getNullableResult</span><span style="color:#E1E4E8;">(ResultSet </span><span style="color:#FFAB70;">rs</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">columnName</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用ResultSet.getLong()获取指定列值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rs.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(columnName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> rs.</span><span style="color:#B392F0;">wasNull</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Long </span><span style="color:#B392F0;">getNullableResult</span><span style="color:#E1E4E8;">(ResultSet </span><span style="color:#FFAB70;">rs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">columnIndex</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用ResultSet.getLong()获取指定列值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rs.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(columnIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> rs.</span><span style="color:#B392F0;">wasNull</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Long </span><span style="color:#B392F0;">getNullableResult</span><span style="color:#E1E4E8;">(CallableStatement </span><span style="color:#FFAB70;">cs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">columnIndex</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用ResultSet.getLong()获取指定列值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cs.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(columnIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> cs.</span><span style="color:#B392F0;">wasNull</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LongTypeHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseTypeHandler</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setNonNullParameter</span><span style="color:#24292E;">(PreparedStatement </span><span style="color:#E36209;">ps</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">, Long </span><span style="color:#E36209;">parameter</span><span style="color:#24292E;">, JdbcType </span><span style="color:#E36209;">jdbcType</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用PreparedStatement.setLong()实现参数绑定</span></span>
<span class="line"><span style="color:#24292E;">        ps.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(i, parameter);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Long </span><span style="color:#6F42C1;">getNullableResult</span><span style="color:#24292E;">(ResultSet </span><span style="color:#E36209;">rs</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">columnName</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用ResultSet.getLong()获取指定列值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rs.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(columnName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> rs.</span><span style="color:#6F42C1;">wasNull</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Long </span><span style="color:#6F42C1;">getNullableResult</span><span style="color:#24292E;">(ResultSet </span><span style="color:#E36209;">rs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">columnIndex</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用ResultSet.getLong()获取指定列值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rs.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(columnIndex);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> rs.</span><span style="color:#6F42C1;">wasNull</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Long </span><span style="color:#6F42C1;">getNullableResult</span><span style="color:#24292E;">(CallableStatement </span><span style="color:#E36209;">cs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">columnIndex</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用ResultSet.getLong()获取指定列值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cs.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(columnIndex);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> cs.</span><span style="color:#6F42C1;">wasNull</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到：LongTypeHandler 的核心还是通过 PreparedStatement.setLong() 方法以及 ResultSet.getLong() 方法实现的。至于其他 BaseTypeHandler 的核心实现，同样也是依赖了 JDBC 的 API，这里就不再展开介绍了。</p><h3 id="typehandler-注册" tabindex="-1">TypeHandler 注册 <a class="header-anchor" href="#typehandler-注册" aria-label="Permalink to &quot;TypeHandler 注册&quot;">​</a></h3><p>了解了 TypeHandler 接口实现类的核心原理之后，我们就来解决下面两个问题：</p><ul><li><p>MyBatis 如何管理这么多的 TypeHandler 接口实现呢？</p></li><li><p>如何在合适的场景中使用合适的 TypeHandler 实现进行类型转换呢？</p></li></ul><p>你若使用过 MyBatis 的话，应该知道我们可以在 mybatis-config.xml 中通过 标签配置自定义的 TypeHandler 实现，也可以在 Mapper.xml 配置文件定义 的时候指定 typeHandler 属性。无论是哪种配置方式，MyBatis 都会在初始化过程中，获取所有已知的 TypeHandler（包括内置实现和自定义实现），然后创建所有 TypeHandler 实例并注册到 TypeHandlerRegistry 中，<strong>由 TypeHandlerRegistry 统一管理所有 TypeHandler 实例</strong>。</p><br><p>TypeHandlerRegistry 管理 TypeHandler 的时候，用到了以下四个最核心的集合。</p><ul><li><p>jdbcTypeHandlerMap（Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;类型）：该集合记录了 JdbcType 与 TypeHandler 之间的关联关系。JdbcType 是一个枚举类型，每个 JdbcType 枚举值对应一种 JDBC 类型，例如，JdbcType.VARCHAR 对应的就是 JDBC 中的 varchar 类型。在从 ResultSet 中读取数据的时候，就会从 JDBC_TYPE_HANDLER_MAP 集合中根据 JDBC 类型查找对应的 TypeHandler，将数据转换成 Java 类型。</p></li><li><p>typeHandlerMap（Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt;类型）：该集合第一层 Key 是需要转换的 Java 类型，第二层 Key 是转换的目标 JdbcType，最终的 Value 是完成此次转换时所需要使用的 TypeHandler 对象。那为什么要有两层 Map 的设计呢？这里我们举个例子：Java 类型中的 String 可能转换成数据库中的 varchar、char、text 等多种类型，存在一对多关系，所以就可能有不同的 TypeHandler 实现。</p></li><li><p>allTypeHandlersMap（Map&lt;Class, TypeHandler&gt;类型）：该集合记录了全部 TypeHandler 的类型以及对应的 TypeHandler 实例对象。</p></li><li><p>NULL_TYPE_HANDLER_MAP（Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;类型）：空 TypeHandler 集合的标识，默认值为 Collections.emptyMap()。</p></li></ul><p>在 MyBatis 初始化的时候，实例化全部 TypeHandler 对象之后，会立即调用 TypeHandlerRegistry 的 register() 方法完成这些 TypeHandler 对象的注册，这个注册过程的核心逻辑就是向上述四个核心集合中添加 TypeHandler 实例以及与 Java 类型、JDBC 类型之间的映射。</p><p>TypeHandlerRegistry.register() 方法有多个重载实现，这些重载中最基础的实现是三个参数的重载实现，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(Type javaType, JdbcType jdbcType, TypeHandler</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> handler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (javaType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 检测是否明确指定了TypeHandler能够处理的Java类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据指定的Java类型，从typeHandlerMap集合中获取相应的TypeHandler集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">JdbcType</span><span style="color:#E1E4E8;">, TypeHandler&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> typeHandlerMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(javaType);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (map </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> NULL_TYPE_HANDLER_MAP) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将TypeHandler实例记录到typeHandlerMap集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(jdbcType, handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">        typeHandlerMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(javaType, map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 向allTypeHandlersMap集合注册TypeHandler类型和对应的TypeHandler对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    allTypeHandlersMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(handler.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">(), handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(Type javaType, JdbcType jdbcType, TypeHandler</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> handler) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (javaType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 检测是否明确指定了TypeHandler能够处理的Java类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据指定的Java类型，从typeHandlerMap集合中获取相应的TypeHandler集合</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">JdbcType</span><span style="color:#24292E;">, TypeHandler&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> typeHandlerMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(javaType);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (map </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> NULL_TYPE_HANDLER_MAP) {</span></span>
<span class="line"><span style="color:#24292E;">            map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将TypeHandler实例记录到typeHandlerMap集合</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(jdbcType, handler);</span></span>
<span class="line"><span style="color:#24292E;">        typeHandlerMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(javaType, map);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 向allTypeHandlersMap集合注册TypeHandler类型和对应的TypeHandler对象</span></span>
<span class="line"><span style="color:#24292E;">    allTypeHandlersMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(handler.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), handler);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>除了上面的 register() 重载，在有的 register() 重载中会尝试从 TypeHandler 类中的@MappedTypes 注解和 @MappedJdbcTypes 注解中读取信息。其中，<strong>@MappedTypes 注解中可以配置 TypeHandler 实现类能够处理的 Java 类型的集合，@MappedJdbcTypes 注解中可以配置该 TypeHandler 实现类能够处理的 JDBC 类型集合</strong>。</p><p>如下就是读取 @MappedJdbcTypes 注解的 register() 重载方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(Type javaType, TypeHandler</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> typeHandler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 尝试从TypeHandler类中获取@MappedJdbcTypes注解</span></span>
<span class="line"><span style="color:#E1E4E8;">    MappedJdbcTypes mappedJdbcTypes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> typeHandler.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(MappedJdbcTypes.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mappedJdbcTypes </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据@MappedJdbcTypes注解指定的JDBC类型进行注册</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (JdbcType handledJdbcType </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mappedJdbcTypes.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 交给前面的三参数重载处理</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(javaType, handledJdbcType, typeHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果支持jdbcType为null，也是交给前面的三参数重载处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mappedJdbcTypes.</span><span style="color:#B392F0;">includeNullJdbcType</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(javaType, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, typeHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果没有配置MappedJdbcTypes注解，也是交给前面的三参数重载处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(javaType, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, typeHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(Type javaType, TypeHandler</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> typeHandler) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 尝试从TypeHandler类中获取@MappedJdbcTypes注解</span></span>
<span class="line"><span style="color:#24292E;">    MappedJdbcTypes mappedJdbcTypes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> typeHandler.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(MappedJdbcTypes.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mappedJdbcTypes </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据@MappedJdbcTypes注解指定的JDBC类型进行注册</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (JdbcType handledJdbcType </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mappedJdbcTypes.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 交给前面的三参数重载处理</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(javaType, handledJdbcType, typeHandler);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果支持jdbcType为null，也是交给前面的三参数重载处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mappedJdbcTypes.</span><span style="color:#6F42C1;">includeNullJdbcType</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(javaType, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, typeHandler);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果没有配置MappedJdbcTypes注解，也是交给前面的三参数重载处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(javaType, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, typeHandler);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面是读取 @MappedTypes 注解的 register() 方法重载：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(TypeHandler</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> typeHandler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> mappedTypeFound </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取TypeHandler类中定义的@MappedTypes注解</span></span>
<span class="line"><span style="color:#E1E4E8;">    MappedTypes mappedTypes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> typeHandler.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(MappedTypes.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mappedTypes </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据@MappedTypes注解中指定的Java类型进行注册</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; handledType </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mappedTypes.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 交给前面介绍的register()重载读取@MappedJdbcTypes注解并完成注册</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(handledType, typeHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">            mappedTypeFound </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从3.1.0版本开始，如果TypeHandler实现类同时继承了TypeReference这个抽象类，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里会尝试自动查找对应的Java类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mappedTypeFound </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> typeHandler </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> TypeReference) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            TypeReference&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; typeReference </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TypeReference</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) typeHandler;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 交给前面介绍的register()重载读取@MappedJdbcTypes注解并完成注册</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(typeReference.</span><span style="color:#B392F0;">getRawType</span><span style="color:#E1E4E8;">(), typeHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">            mappedTypeFound </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">mappedTypeFound) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">((Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, typeHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(TypeHandler</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> typeHandler) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> mappedTypeFound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取TypeHandler类中定义的@MappedTypes注解</span></span>
<span class="line"><span style="color:#24292E;">    MappedTypes mappedTypes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> typeHandler.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(MappedTypes.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mappedTypes </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据@MappedTypes注解中指定的Java类型进行注册</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; handledType </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mappedTypes.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 交给前面介绍的register()重载读取@MappedJdbcTypes注解并完成注册</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(handledType, typeHandler);</span></span>
<span class="line"><span style="color:#24292E;">            mappedTypeFound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从3.1.0版本开始，如果TypeHandler实现类同时继承了TypeReference这个抽象类，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里会尝试自动查找对应的Java类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mappedTypeFound </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> typeHandler </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TypeReference) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            TypeReference&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; typeReference </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TypeReference</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) typeHandler;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 交给前面介绍的register()重载读取@MappedJdbcTypes注解并完成注册</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(typeReference.</span><span style="color:#6F42C1;">getRawType</span><span style="color:#24292E;">(), typeHandler);</span></span>
<span class="line"><span style="color:#24292E;">            mappedTypeFound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">mappedTypeFound) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">((Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, typeHandler);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们接下来看最后一个 register() 重载。<strong>TypeHandlerRegistry 提供了扫描一个包下的全部 TypeHandler 接口实现类的 register() 重载</strong> 。在该重载中，会首先读取指定包下面的全部的 TypeHandler 实现类，然后再交给 register() 重载读取 @MappedTypes 注解和 @MappedJdbcTypes 注解，并最终完成注册。这个 register() 重载的具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/mybatis" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>最后，我们再来看看 TypeHandlerRegistry 的构造方法，其中会通过 register() 方法注册多个 TypeHandler 对象，下面就展示了为 String 类型注册 TypeHandler 的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeHandlerRegistry</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// StringTypeHandler可以实现String类型与char、varchar、longvarchar类型之间的转换</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String.class, JdbcType.CHAR, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringTypeHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String.class, JdbcType.VARCHAR, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringTypeHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String.class, JdbcType.LONGVARCHAR, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringTypeHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ClobTypeHandler可以完成String类型与clob类型之间的转换</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String.class, JdbcType.CLOB, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClobTypeHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// NStringTypeHandler可以完成String类型与NVARCHAR、NCHAR类型之间的转换</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String.class, JdbcType.NVARCHAR, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NStringTypeHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String.class, JdbcType.NCHAR, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NStringTypeHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// NClobTypeHandler可以完成String类型与NCLOB类型之间的转换</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String.class, JdbcType.NCLOB, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NClobTypeHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略其他TypeHandler实现的注册逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeHandlerRegistry</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// StringTypeHandler可以实现String类型与char、varchar、longvarchar类型之间的转换</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String.class, JdbcType.CHAR, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringTypeHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String.class, JdbcType.VARCHAR, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringTypeHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String.class, JdbcType.LONGVARCHAR, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringTypeHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ClobTypeHandler可以完成String类型与clob类型之间的转换</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String.class, JdbcType.CLOB, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClobTypeHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// NStringTypeHandler可以完成String类型与NVARCHAR、NCHAR类型之间的转换</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String.class, JdbcType.NVARCHAR, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NStringTypeHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String.class, JdbcType.NCHAR, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NStringTypeHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// NClobTypeHandler可以完成String类型与NCLOB类型之间的转换</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String.class, JdbcType.NCLOB, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NClobTypeHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略其他TypeHandler实现的注册逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="typehandler-查询" tabindex="-1">TypeHandler 查询 <a class="header-anchor" href="#typehandler-查询" aria-label="Permalink to &quot;TypeHandler 查询&quot;">​</a></h3><p>分析完注册 TypeHandler 实例的具体实现之后，我们接下来就来看看 MyBatis 是如何从 TypeHandlerRegistry 底层的这几个集合中查找正确的 TypeHandler 实例，<strong>该功能的具体实现是在 TypeHandlerRegistry 的 getTypeHandler() 方法中</strong>。</p><p>这里的 getTypeHandler() 方法也有多个重载，最核心的重载是 getTypeHandler(Type,JdbcType) 这个重载方法，其中会根据传入的 Java 类型和 JDBC 类型，从底层的几个集合中查询相应的 TypeHandler 实例，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> TypeHandler</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTypeHandler</span><span style="color:#E1E4E8;">(Type type, JdbcType jdbcType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ParamMap.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(type)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 过滤掉ParamMap类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据Java类型查找对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">JdbcType</span><span style="color:#E1E4E8;">, TypeHandler&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; jdbcHandlerMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getJdbcHandlerMap</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">    TypeHandler&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (jdbcHandlerMap </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据JdbcType类型查找对应的TypeHandler实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbcHandlerMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(jdbcType);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handler </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 没有对应的TypeHandler实例，则使用null对应的TypeHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">            handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbcHandlerMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handler </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果jdbcHandlerMap只注册了一个TypeHandler，则使用此TypeHandler对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pickSoleHandler</span><span style="color:#E1E4E8;">(jdbcHandlerMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (TypeHandler</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) handler;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> TypeHandler</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTypeHandler</span><span style="color:#24292E;">(Type type, JdbcType jdbcType) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ParamMap.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(type)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 过滤掉ParamMap类型</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据Java类型查找对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">JdbcType</span><span style="color:#24292E;">, TypeHandler&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; jdbcHandlerMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getJdbcHandlerMap</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">    TypeHandler&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (jdbcHandlerMap </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据JdbcType类型查找对应的TypeHandler实例</span></span>
<span class="line"><span style="color:#24292E;">        handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbcHandlerMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(jdbcType);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handler </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 没有对应的TypeHandler实例，则使用null对应的TypeHandler</span></span>
<span class="line"><span style="color:#24292E;">            handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbcHandlerMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handler </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果jdbcHandlerMap只注册了一个TypeHandler，则使用此TypeHandler对象</span></span>
<span class="line"><span style="color:#24292E;">            handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pickSoleHandler</span><span style="color:#24292E;">(jdbcHandlerMap);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (TypeHandler</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) handler;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 getTypeHandler() 方法中会调用 getJdbcHandlerMap() 方法检测 typeHandlerMap 集合中相应的 TypeHandler 集合是否已经初始化。</p><ul><li><p>如果已初始化，则直接使用该集合进行查询；</p></li><li><p>如果未初始化，则尝试以传入的 Java 类型的、已初始化的父类对应的 TypeHandler 集合作为初始集合；</p></li><li><p>如果该 Java 类型的父类没有关联任何已初始化的 TypeHandler 集合，则将该 Java 类型对应的 TypeHandler 集合初始化为 NULL_TYPE_HANDLER_MAP 标识。</p></li></ul><p>getJdbcHandlerMap() 方法具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">JdbcType, TypeHandler</span><span style="color:#F97583;">&lt;?&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getJdbcHandlerMap</span><span style="color:#E1E4E8;">(Type type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 首先查找指定Java类型对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">JdbcType</span><span style="color:#E1E4E8;">, TypeHandler&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; jdbcHandlerMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> typeHandlerMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (NULL_TYPE_HANDLER_MAP.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(jdbcHandlerMap)) { </span><span style="color:#6A737D;">// 检测是否为空集合标识</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化指定Java类型的TypeHandler集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (jdbcHandlerMap </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; clazz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) type;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Enum.class.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(clazz)) { </span><span style="color:#6A737D;">// 针对枚举类型的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">            Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; enumClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">isAnonymousClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">getSuperclass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> clazz;</span></span>
<span class="line"><span style="color:#E1E4E8;">            jdbcHandlerMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getJdbcHandlerMapForEnumInterfaces</span><span style="color:#E1E4E8;">(enumClass, enumClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (jdbcHandlerMap </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(enumClass, </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(enumClass, defaultEnumTypeHandler));</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> typeHandlerMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(enumClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 查找父类关联的TypeHandler集合，并将其作为clazz对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#E1E4E8;">            jdbcHandlerMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getJdbcHandlerMapForSuperclass</span><span style="color:#E1E4E8;">(clazz);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果上述查找皆失败，则以NULL_TYPE_HANDLER_MAP作为clazz对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    typeHandlerMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(type, jdbcHandlerMap </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            NULL_TYPE_HANDLER_MAP </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> jdbcHandlerMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jdbcHandlerMap;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">JdbcType, TypeHandler</span><span style="color:#D73A49;">&lt;?&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getJdbcHandlerMap</span><span style="color:#24292E;">(Type type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 首先查找指定Java类型对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">JdbcType</span><span style="color:#24292E;">, TypeHandler&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; jdbcHandlerMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> typeHandlerMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (NULL_TYPE_HANDLER_MAP.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(jdbcHandlerMap)) { </span><span style="color:#6A737D;">// 检测是否为空集合标识</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化指定Java类型的TypeHandler集合</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (jdbcHandlerMap </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Class) {</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) type;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Enum.class.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(clazz)) { </span><span style="color:#6A737D;">// 针对枚举类型的处理</span></span>
<span class="line"><span style="color:#24292E;">            Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; enumClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">isAnonymousClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getSuperclass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> clazz;</span></span>
<span class="line"><span style="color:#24292E;">            jdbcHandlerMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getJdbcHandlerMapForEnumInterfaces</span><span style="color:#24292E;">(enumClass, enumClass);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (jdbcHandlerMap </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(enumClass, </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(enumClass, defaultEnumTypeHandler));</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> typeHandlerMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(enumClass);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 查找父类关联的TypeHandler集合，并将其作为clazz对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#24292E;">            jdbcHandlerMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getJdbcHandlerMapForSuperclass</span><span style="color:#24292E;">(clazz);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果上述查找皆失败，则以NULL_TYPE_HANDLER_MAP作为clazz对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#24292E;">    typeHandlerMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(type, jdbcHandlerMap </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            NULL_TYPE_HANDLER_MAP </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> jdbcHandlerMap);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jdbcHandlerMap;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里调用的 getJdbcHandlerMapForSuperclass() 方法会判断传入的 clazz 的父类是否为空或 Object。如果是，则方法直接返回 null；如果不是，则尝试从 typeHandlerMap 集合中获取父类对应的 TypeHandler 集合，但如果父类没有关联 TypeHandler 集合，则递归调用 getJdbcHandlerMapForSuperclass() 方法顺着继承树继续向上查找父类，直到查找到父类的 TypeHandler 集合，然后直接返回。</p><p>下面是 getJdbcHandlerMapForSuperclass() 方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">JdbcType, TypeHandler</span><span style="color:#F97583;">&lt;?&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getJdbcHandlerMapForSuperclass</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> clazz) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; superclass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">getSuperclass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (superclass </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> Object.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(superclass)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 父类为Object或null则查找结束</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">JdbcType</span><span style="color:#E1E4E8;">, TypeHandler&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; jdbcHandlerMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> typeHandlerMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(superclass);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (jdbcHandlerMap </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jdbcHandlerMap;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 顺着继承树，递归查找父类对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getJdbcHandlerMapForSuperclass</span><span style="color:#E1E4E8;">(superclass);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">JdbcType, TypeHandler</span><span style="color:#D73A49;">&lt;?&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getJdbcHandlerMapForSuperclass</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> clazz) {</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; superclass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getSuperclass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (superclass </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> Object.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(superclass)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 父类为Object或null则查找结束</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">JdbcType</span><span style="color:#24292E;">, TypeHandler&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; jdbcHandlerMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> typeHandlerMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(superclass);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (jdbcHandlerMap </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jdbcHandlerMap;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 顺着继承树，递归查找父类对应的TypeHandler集合</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getJdbcHandlerMapForSuperclass</span><span style="color:#24292E;">(superclass);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="别名管理" tabindex="-1">别名管理 <a class="header-anchor" href="#别名管理" aria-label="Permalink to &quot;别名管理&quot;">​</a></h3><p>在《02 | 订单系统持久层示例分析，20 分钟带你快速上手 MyBatis》分析的 MyBatis 示例中，我们在 mybatis-config.xml 配置文件中使用 <code>&lt;typeAlias&gt;</code> 标签为 Customer 等 Java 类的完整名称定义了相应的别名，后续编写 SQL 语句、定义 <code>&lt;resultMap&gt;</code> 的时候，<strong>直接使用这些别名即可完全替代相应的完整 Java 类名，这样就非常易于代码的编写和维护</strong>。</p><p><strong>TypeAliasRegistry 是维护别名配置的核心实现所在</strong>，其中提供了别名注册、别名查询的基本功能。在 TypeAliasRegistry 的 typeAliases 字段（Map&lt;String, Class&lt;?&gt;&gt;类型）中记录了别名与 Java 类型之间的对应关系，我们可以通过 registerAlias() 方法完成别名的注册，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAlias</span><span style="color:#E1E4E8;">(String alias, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (alias </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 传入的别名为null，直接抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The parameter alias cannot be null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将别名全部转换为小写</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> alias.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">(Locale.ENGLISH);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测别名是否存在冲突，如果存在冲突，则直接抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeAliases.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> typeAliases.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">typeAliases.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key).</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在typeAliases集合中记录别名与类之间的映射关系</span></span>
<span class="line"><span style="color:#E1E4E8;">    typeAliases.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAlias</span><span style="color:#24292E;">(String alias, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (alias </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 传入的别名为null，直接抛出异常</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The parameter alias cannot be null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将别名全部转换为小写</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> alias.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">(Locale.ENGLISH);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测别名是否存在冲突，如果存在冲突，则直接抛出异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeAliases.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(key) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> typeAliases.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">typeAliases.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key).</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(value)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在typeAliases集合中记录别名与类之间的映射关系</span></span>
<span class="line"><span style="color:#24292E;">    typeAliases.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 TypeAliasRegistry 的构造方法中，会通过上述 registerAlias() 方法将 Java 的基本类型、基本类型的数组类型、基本类型的封装类、封装类型的数组类型、Date、BigDecimal、BigInteger、Map、HashMap、List、ArrayList、Collection、Iterator、ResultSet 等常用类型添加了别名，具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/mybatis" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>除了明确传入别名与相应的 Java 类型之外，TypeAliasRegistry 还提供了扫描指定包名下所有的类中的 @Alias 注解获取别名配置，并完成注册的功能，这个功能涉及两个 registerAliases() 方法的重载，相关实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAliases</span><span style="color:#E1E4E8;">(String packageName, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> superType) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ResolverUtil&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; resolverUtil </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ResolverUtil&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查找指定包下所有的superType类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolverUtil.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ResolverUtil.</span><span style="color:#B392F0;">IsA</span><span style="color:#E1E4E8;">(superType), packageName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt;&gt; typeSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resolverUtil.</span><span style="color:#B392F0;">getClasses</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; type </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> typeSet) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 过滤掉内部类、接口以及抽象类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">type.</span><span style="color:#B392F0;">isAnonymousClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">type.</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">type.</span><span style="color:#B392F0;">isMemberClass</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 扫描类中的@Alias注解</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">registerAlias</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAlias</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取类的简单名称，其中不会包含包名</span></span>
<span class="line"><span style="color:#E1E4E8;">    String alias </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> type.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取类中的@Alias注解</span></span>
<span class="line"><span style="color:#E1E4E8;">    Alias aliasAnnotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> type.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(Alias.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aliasAnnotation </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 获取特定别名</span></span>
<span class="line"><span style="color:#E1E4E8;">        alias </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aliasAnnotation.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里的@Alias注解指定的别名与type类型绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">registerAlias</span><span style="color:#E1E4E8;">(alias, type);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAliases</span><span style="color:#24292E;">(String packageName, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> superType) {</span></span>
<span class="line"><span style="color:#24292E;">    ResolverUtil&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; resolverUtil </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ResolverUtil&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查找指定包下所有的superType类型</span></span>
<span class="line"><span style="color:#24292E;">    resolverUtil.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ResolverUtil.</span><span style="color:#6F42C1;">IsA</span><span style="color:#24292E;">(superType), packageName);</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt;&gt; typeSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resolverUtil.</span><span style="color:#6F42C1;">getClasses</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; type </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> typeSet) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 过滤掉内部类、接口以及抽象类</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">type.</span><span style="color:#6F42C1;">isAnonymousClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">type.</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">type.</span><span style="color:#6F42C1;">isMemberClass</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 扫描类中的@Alias注解</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">registerAlias</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAlias</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取类的简单名称，其中不会包含包名</span></span>
<span class="line"><span style="color:#24292E;">    String alias </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> type.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取类中的@Alias注解</span></span>
<span class="line"><span style="color:#24292E;">    Alias aliasAnnotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> type.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(Alias.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (aliasAnnotation </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 获取特定别名</span></span>
<span class="line"><span style="color:#24292E;">        alias </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aliasAnnotation.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里的@Alias注解指定的别名与type类型绑定</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">registerAlias</span><span style="color:#24292E;">(alias, type);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲我们重点介绍了 MyBatis 中 JdbcType 与 Java 类型之间转换的相关实现。</p><ul><li><p>首先，介绍了 JdbcType 与 Java 类型之间的常见映射关系，以及两种类型之间转换的基础知识；</p></li><li><p>然后，深入分析了 TypeHandler 接口及其核心实现，了解了两种类型转换的原理；</p></li><li><p>接下来，又讲解了 TypeHandler 的注册和查询机制，明确了 MyBatis 是如何管理和使用众多的 TypeHandler 实现；</p></li><li><p>最后，分析了 MyBatis 中的别名实现。</p></li></ul><p>关于这部分的内容，如果你有什么问题，欢迎你在留言区与我分享和交流。在下一讲，我将接着介绍 MyBatis 中日志模块的相关内容，记得按时来听课。</p><hr><p>[</p>`,46),b=s("p",null,[a("]("),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/Mka"),a(")")],-1),h=s("p",null,[s("strong",null,"《Java 工程师高薪训练营》")],-1),m=s("p",null,[a("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),a("！")],-1);function B(v,M,J,S,_,R){const n=e("Image");return t(),c("div",null,[y,E,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/02/E6/Cgp9HWAeMiSAcga0AAEpsa9onlg651.png"}),a(),i,d,F,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/02/E4/CioPOWAeMi6AdTRAAAENMX_HsyU054.png"}),a(),g,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/02/E4/CioPOWAeMkCANy6LAABJPBfXPJY527.png"}),a(),A,T,u,D,H,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/02/E6/Cgp9HWAeMkuAI22uAApwhcDLfQ4596.png"}),a(),C,l(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"}),a(),b,h,m])}const j=o(r,[["render",B]]);export{L as __pageData,j as default};
