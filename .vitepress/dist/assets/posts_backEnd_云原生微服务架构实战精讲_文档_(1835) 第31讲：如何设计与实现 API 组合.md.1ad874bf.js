import{_ as p,j as l,o,g as e,k as a,Q as s}from"./chunks/framework.e0c66c3f.js";const A=JSON.parse('{"title":"API 网关 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1835) 第31讲：如何设计与实现 API 组合.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1835) 第31讲：如何设计与实现 API 组合.md","lastUpdated":1696338709000}'),t={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1835) 第31讲：如何设计与实现 API 组合.md"},r=s('<p>从现在开始，我们将进入到 API 组合这一模块，该模块分为 3 个课时，分别介绍 API 组合的相关概念和具体的实现技术。而此次课时主要介绍 API 组合的设计与实现。</p><p>在介绍 API 组合之前，首先介绍一下 API 网关（Gateway）。</p><h3 id="api-网关" tabindex="-1">API 网关 <a class="header-anchor" href="#api-网关" aria-label="Permalink to &quot;API 网关&quot;">​</a></h3><p>这里先区分一下外部 API 和内部 API。外部 API 是提供给 Web 应用、移动客户端和第三方客户端来调用的；而内部 API 是提供给其他微服务来调用的。</p><p>如果把微服务架构的后台当成一个黑盒子，那么外部 API 就是外部用户与这个黑盒子交互的方式，<strong>这两者之间交互的桥梁，就是 API 网关</strong>。所有外部的 API 访问请求，都需要通过这个网关进入到后台。</p><p>下图给出了 API 网关的示意图，其本质上是一个<strong>反向代理</strong>（Reverse Proxy）。</p>',6),c=s('<p>作为外部访问请求的唯一入口，API 网关所能提供的功能非常丰富，具体如下。</p><p>API 网关负责把外部的访问请求路由到具体的服务，在进行路由时，通常根据访问请求的路径、查询参数和 HTTP 头来确定。</p><p>比如，可以把路径以 /trip/ 开头的请求路由到行程管理服务，而把以 /passenger/ 开头的请求路由到乘客管理服务。而当服务支持多个版本同时运行时，请求路由的逻辑会更加复杂一些，比如路径前缀 /trip/v1/ 和 /trip/v2/ 的请求分别路由到不同版本的行程管理服务。API 网关的路由通过静态或动态的方式进行配置，有些 API 网关支持通过开放 API 在运行时动态修改路由配置。</p><p><strong>API 组合</strong>把来自不同服务的数据组合在一起，形成新的组合 API，这也是本模块需要介绍的内容。如果把不同服务 API 所提供的数据当成是数据库的表格，那么 API 组合就是表之间的连接操作。在组合 API 时，可以对 API 返回的结果进行投影、转换和充实。</p><ul><li><p><strong>边界功能</strong>用来在接收到请求之后，在请求发送给后台服务之前，对请求进行处理。边界功能通常满足应用的一些横切需要，包括身份认证、授权管理、请求速率限制、缓存、性能指标数据收集、请求日志等。由于 API 网关实现了这些功能，可以简化后台服务的开发，这也是大部分 API 网关产品的卖点所在。</p></li><li><p><strong>协议翻译</strong>指的是把外部 API 的协议转换成内部服务之间使用的协议。外部 API 为了兼容性，一般使用 REST API 作为协议，而应用内部的服务之间，出于性能的考虑，可能使用 gRPC，甚至是私有的协议。API 网关负责在两种 API 协议之间进行转换。</p></li></ul><p>由于 API 网关的重要性，云平台通常都提供了相关的服务。除此之外，还有很多开源和商用的产品，比较流行的产品包括 WSO2、Netflix Zuul、Spring Cloud Gateway、Kong 和 SwaggerHub 等。</p><p>从上述说明中可以看到，API 组合也属于 API 网关的一种功能。只不过 API 组合与应用的逻辑紧密相关，无法通过简单的配置来实现，一般需要编写代码或脚本来完成。</p><h3 id="api-组合" tabindex="-1">API 组合 <a class="header-anchor" href="#api-组合" aria-label="Permalink to &quot;API 组合&quot;">​</a></h3><p>在微服务架构的应用中，应用的功能被分散到多个微服务中。来自一个微服务的 API 并不能满足外部使用者的需求，因为一个微服务只能提供部分数据。比如，示例应用中的乘客管理界面需要使用来自乘客管理服务、地址管理服务、行程管理服务和行程派发服务的数据。因此，需要一种方式来提供给使用者所需要的全部数据。</p><p>第一种做法是由客户端根据需要来直接调用不同微服务的 API，这种做法在客户端和微服务之间建立了紧密的耦合关系，增加了客户端使用 API 的难度。当展示一个页面时，可能需要调用多次 API，相应的性能也会比较差。</p><p>另外一种做法是使用第 22 课时介绍的 CQRS 技术，针对客户端的不同需求，创建相应的查询服务，这种做法可以避免多次 API 调用的性能问题。不过 CQRS 技术使用的范围较窄，技术的门槛较高，在实践中的应用也比较少。</p><p>相比前两种做法，更好的做法是使用 API 组合，在应用内部创建进行 API 组合的服务。对客户端发送的 API 请求，该组合服务调用后台的多个微服务的 API，并把得到的数据进行整合，再返回给客户端。API 组合的好处是对微服务 API 的调用发生在系统内部，调用的延迟很小，也免去了客户端的多次调用。</p><h3 id="backend-for-frontend-模式" tabindex="-1">Backend For Frontend 模式 <a class="header-anchor" href="#backend-for-frontend-模式" aria-label="Permalink to &quot;Backend For Frontend 模式&quot;">​</a></h3><p>当应用所要支持的客户端种类变多时，使用单一的通用 API 变得不再适用，这是由于不同客户端的差异性造成的。</p><p>桌面客户端的屏幕大、一般使用的是高速的 ADSL 或光纤网络；移动客户端屏幕小、网络速度较慢，而且对电池消耗有要求。</p><p>这就意味着在移动客户端上需要严格控制 API 请求的数量和响应的大小。移动客户端上的用户体验也与 Web 界面有很大差异，满足用户界面需求的 API 也相应地存在很大不同。如果使用单一的 API 为这两类客户端服务，那么这些差异性会使得 API 的维护成本变高。</p><p><strong>Backend For Frontend 模式</strong>指的是为每一种类型的前端创建其独有的后端 API。这个 API 专门为前端设计，完全满足其需求，通常由该前端的团队来维护。</p><p>下图是 Backend For Frontend 模式的示意图，其中移动客户端和桌面客户端使用专门为它们设计的 API，这些 API 使用同样的后台服务作为数据来源。</p>',18),E=s(`<p>在微服务架构的应用中，这种模式实际上更加适用，因为微服务已经把系统的功能进行了划分，在实现前端需要的 API 时，只需要把微服务的 API 进行整合即可，同时也对前端屏蔽了后端 API 的细节。</p><h3 id="api-组合的实现" tabindex="-1">API 组合的实现 <a class="header-anchor" href="#api-组合的实现" aria-label="Permalink to &quot;API 组合的实现&quot;">​</a></h3><p>API 组合有很多种不同的实现方式，最简单的做法是基于已有的工具进行配置，复杂的实现则需要自己编写代码开发。</p><p>本课时介绍的是为管理乘客的 Web 界面创建的 API 组合，完整的实现请参考示例应用源代码中的 happyride-passenger-web-api 模块。</p><p>乘客管理 Web 界面在管理乘客时，需要用到乘客的地址信息，地址管理服务负责对地址进行统一管理，提供了地址的搜索和查询 API，地址管理服务对应的聚合的根实体是地址对象。在乘客管理服务中，表示用户地址的 UserAddress 对象只包含了地址对象的标识符，并没有包含其他信息。这就意味着当乘客查看或编辑地址时，对应的 API 需要调用地址管理服务的 API 来获取地址的详细数据。</p><p>Web 界面需要的这个 API 负责返回乘客的所有相关信息，包括每个地址的详细信息。而对于地址搜索和查询相关的请求，则直接转发给内部的地址管理服务。</p><p>示例应用使用 Spring Cloud Gateway 来实现该 API 组合。</p><h4 id="_1-spring-cloud-gateway" tabindex="-1">1. Spring Cloud Gateway <a class="header-anchor" href="#_1-spring-cloud-gateway" aria-label="Permalink to &quot;1. Spring Cloud Gateway&quot;">​</a></h4><p>Spring Cloud Gateway 是 Spring 框架提供的 API 网关的实现，基于 Spring Boot 2、Spring WebFlux 和 Project Reactor。在使用 Spring Cloud Gateway 之前，需要对反应式编程的概念有基本的了解。</p><p><strong>反应式编程</strong>是一套完整的编程体系，既有其指导思想，又有相应地框架和库的支持，并且在生产环境中有大量实际的应用。Java 9 中把反应式流规范以 java.util.concurrent.Flow 类的方式添加到了 Java 标准库中，Spring 5 对反应式编程模型提供了支持，尤其是反应式 Web 应用开发使用的 WebFlux，Spring 5 默认的反应式框架是 Reactor。</p><p>Reactor 是一个完全基于反应式流规范的库，两个最核心的类是 Flux 和 Mono，用来表示流：</p><ul><li><p>Flux 表示包含 0 到无限个元素的流；</p></li><li><p>Mono 则表示最多一个元素的流。</p></li></ul><p>Flux 和 Mono 的强大之处来源于各种不同的操作符，可以对流中的元素进行不同的处理。</p><p>Spring Cloud Gateway 中有 3 个基本的概念，分别是路由、断言和过滤器。</p><ul><li><p><strong>路由</strong>是网关的基本组成部分，由标识符、目的地 URI、断言的集合和过滤器的集合组成。</p></li><li><p><strong>断言</strong>用来判断是否匹配 HTTP 请求，本质上是一个 Java 中的 Predicate 接口的对象，进行判断时的输入类型是 Spring 的 ServerWebExchange 对象。</p></li><li><p><strong>过滤器</strong>用来对 HTTP 请求和响应进行处理，它们都是 GatewayFilter 接口的对象，多个过滤器串联在一起，组成过滤器链。前一个过滤器的输出作为下一个过滤器的输入，这一点与 Servlet 规范中的过滤器是相似的。</p></li></ul><p>当客户端的请求发送到网关时，网关会通过路由的断言来判断该请求是否与某个路由相匹配。如果找到了对应的路由，请求会由该路由的过滤器链来处理，过滤器既可以在请求发送到目标服务之前进行处理，也可以对目标服务返回的响应进行处理。</p><p>Spring Cloud Gateway 提供了两种方式来配置路由，一种方式是通过配置来声明，另一种是通过代码来完成。</p><p>Spring Cloud Gateway 提供了大量内置的断言和过滤器的工厂实现。以断言来说，可以通过 HTTP 请求的头、方法、路径、查询参数、Cookie 和主机名等来进行匹配；以过滤器来说，内置的过滤器工厂可以对 HTTP 请求的头、路径、查询参数和内容进行修改，也可以对 HTTP 响应的状态码、头和内容进行修改，还可以添加请求速率限制、自动重试和断路器等功能。</p><h4 id="_2-具体实现" tabindex="-1">2. 具体实现 <a class="header-anchor" href="#_2-具体实现" aria-label="Permalink to &quot;2. 具体实现&quot;">​</a></h4><p>对于本课时要实现的 API 组合来说，地址相关的 API 只需要转发给地址管理服务即可，这可以通过 Spring Cloud Gateway 的配置来完成。下表是 API 组合所提供的功能。</p><table><thead><tr><th><strong>API 路径</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>/address/**</td><td>转发给地址管理服务</td></tr><tr><td>/passenger/{passengerId}</td><td>获取乘客的详细信息，组合来自乘客管理服务和地址管理服务的数据</td></tr></tbody></table><p>在下面的配置中，标识符为 address_service 的路由的目的地 URI 由配置项 destination.address 来确定，使用的断言是 Path 类型，也就是根据请求的路径来判断，即以 /address 开头的全部请求。使用的过滤器是 StripPrefix，也就是去掉 URI 的路径中的一些前缀。在使用这个过滤器之后，路径 /address/search 会被替换为 /search，与地址管理服务的 API 路径相匹配。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">gateway</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">routes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">address_service</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">uri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${destination.address}</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">predicates</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">Path=/address/**</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">filters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">StripPrefix=1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">gateway</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">routes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">address_service</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">uri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${destination.address}</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">predicates</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">Path=/address/**</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">filters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">StripPrefix=1</span></span></code></pre></div><p>在实现获取乘客详细信息的 API 时，需要对乘客管理服务返回的乘客信息进行修改，添加地址的详细信息。获取地址信息需要访问地址管理服务的 API，这里使用的是 Spring WebFlux 提供的反应式客户端 WebClient 对象。下面代码 AddressServiceProxy 中的 getAddresses 方法用来访问地址管理服务的 API，配置对象 DestinationConfig 中包含了地址管理服务的地址。</p><p>当访问 API 出现错误时，getAddresses 方法返回的 Mono 对象中包含的是一个空的列表，这样做可以保证乘客 API 在地址管理服务出现问题时，仍然可以返回有价值的部分数据。这也是错误处理的一种常见策略。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressServiceProxy</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  DestinationConfig destinationConfig;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;List&lt;</span><span style="color:#F97583;">AddressVO</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">addressIds</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> WebClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.destinationConfig.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(uriBuilder </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> uriBuilder.</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/addresses/{addressIds}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(ImmutableMap.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;addressIds&quot;</span><span style="color:#E1E4E8;">, addressIds)))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">retrieve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">bodyToMono</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ParameterizedTypeReference&lt;List&lt;</span><span style="color:#F97583;">AddressVO</span><span style="color:#E1E4E8;">&gt;&gt;() {})</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">onErrorReturn</span><span style="color:#E1E4E8;">(Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressServiceProxy</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  DestinationConfig destinationConfig;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;List&lt;</span><span style="color:#D73A49;">AddressVO</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">addressIds</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> WebClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.destinationConfig.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(uriBuilder </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> uriBuilder.</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/addresses/{addressIds}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(ImmutableMap.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addressIds&quot;</span><span style="color:#24292E;">, addressIds)))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">retrieve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">bodyToMono</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ParameterizedTypeReference&lt;List&lt;</span><span style="color:#D73A49;">AddressVO</span><span style="color:#24292E;">&gt;&gt;() {})</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">onErrorReturn</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在实现乘客 API 时，需要用到修改 HTTP 响应内容的过滤器，该过滤器只能通过代码来配置，如下面的代码所示。RouteLocatorBuilder 构建器用来创建包含路由的 RouteLocator 对象，路由的标识符是 enrich_passenger，使用的断言基于请求的路径进行匹配。第一个过滤器 stripPrefix 去掉 /passenger 前缀，第二个过滤器 modifyResponseBody 声明了原始的响应内容的类型是 PassengerVO 对象，而修改之后的内容的类型是 PassengerResponse 对象。</p><p>在进行修改时，把 PassengerVO 对象中包含乘客的所有地址的标识符以逗号分隔并连接起来之后，调用 AddressServiceProxy 对象的 getAddresses 方法来批量获取地址的信息。最后把这两部分数据组合在 PassengerResponse 对象中，作为最终的响应。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableWebFlux</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebFluxConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  AddressServiceProxy addressServiceProxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  DestinationConfig destinationConfig;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RouteLocator </span><span style="color:#B392F0;">routes</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RouteLocatorBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">routes</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;enrich_passenger&quot;</span><span style="color:#E1E4E8;">, r </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> r.</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/passenger/{passengerId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">filters</span><span style="color:#E1E4E8;">(f </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> f</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">stripPrefix</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">modifyResponseBody</span><span style="color:#E1E4E8;">(PassengerVO.class, PassengerResponse.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    (exchange, passenger) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String addressIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passenger.</span><span style="color:#B392F0;">getUserAddresses</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                          .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(UserAddressVO</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getAddressId)</span></span>
<span class="line"><span style="color:#E1E4E8;">                          .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">joining</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.addressServiceProxy.</span><span style="color:#B392F0;">getAddresses</span><span style="color:#E1E4E8;">(addressIds)</span></span>
<span class="line"><span style="color:#E1E4E8;">                          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(addresses </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                              PassengerResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  .</span><span style="color:#B392F0;">fromPassengerAndAddresses</span><span style="color:#E1E4E8;">(passenger,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      addresses));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.destinationConfig.</span><span style="color:#B392F0;">getPassenger</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableWebFlux</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebFluxConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  AddressServiceProxy addressServiceProxy;</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  DestinationConfig destinationConfig;</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RouteLocator </span><span style="color:#6F42C1;">routes</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RouteLocatorBuilder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">routes</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;enrich_passenger&quot;</span><span style="color:#24292E;">, r </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> r.</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/passenger/{passengerId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">filters</span><span style="color:#24292E;">(f </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> f</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">stripPrefix</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">modifyResponseBody</span><span style="color:#24292E;">(PassengerVO.class, PassengerResponse.class,</span></span>
<span class="line"><span style="color:#24292E;">                    (exchange, passenger) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String addressIds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> passenger.</span><span style="color:#6F42C1;">getUserAddresses</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                          .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(UserAddressVO</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getAddressId)</span></span>
<span class="line"><span style="color:#24292E;">                          .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.addressServiceProxy.</span><span style="color:#6F42C1;">getAddresses</span><span style="color:#24292E;">(addressIds)</span></span>
<span class="line"><span style="color:#24292E;">                          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(addresses </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">                              PassengerResponse</span></span>
<span class="line"><span style="color:#24292E;">                                  .</span><span style="color:#6F42C1;">fromPassengerAndAddresses</span><span style="color:#24292E;">(passenger,</span></span>
<span class="line"><span style="color:#24292E;">                                      addresses));</span></span>
<span class="line"><span style="color:#24292E;">                    }))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.destinationConfig.</span><span style="color:#6F42C1;">getPassenger</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面的 JSON 代码展示了乘客管理服务返回的乘客信息的数据。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;email&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;test@test.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;55af028b-6bd3-4266-b8db-70d2b0d2dc07&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;mobilePhoneNumber&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;13812345678&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;userAddresses&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;addressId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;c258ac5f-c86c-4fd0-b046-a17c047ba6a3&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;b11db379-f652-4aa9-ac4a-0cb0c0224b30&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;home&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;addressId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ba629ecf-3f92-4953-afe3-766a6586bbb5&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;63992a22-411d-49b0-893c-c5742d43d970&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;office&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;email&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;test@test.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;55af028b-6bd3-4266-b8db-70d2b0d2dc07&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;mobilePhoneNumber&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;13812345678&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;userAddresses&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;addressId&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;c258ac5f-c86c-4fd0-b046-a17c047ba6a3&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;b11db379-f652-4aa9-ac4a-0cb0c0224b30&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;home&quot;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;addressId&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ba629ecf-3f92-4953-afe3-766a6586bbb5&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;63992a22-411d-49b0-893c-c5742d43d970&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;office&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在经过 API 组合之后，乘客 API 返回的乘客信息的数据如下所示。从中可以看到，userAddresses 属性的值进行了修改，包含了地址的详细信息。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;email&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;33&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;54d4dd20-09dd-4105-b9aa-48560c841ca1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;mobilePhoneNumber&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;33&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;bob&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;userAddresses&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;addressId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;585d747e-8605-442f-93bb-043aac15ea7e&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;addressLine&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;王府井社区居委会-0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;areaId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;areas&quot;</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;83e5597d-dd8f-4906-ba8d-abf24a7754c2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;lat&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">39.914211</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;lng&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">116.414808</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;xyz&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;addressId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;df7eccb3-06d6-4400-b0e3-975be546c691&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;addressLine&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;王府井社区居委会-1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;areaId&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;areas&quot;</span><span style="color:#E1E4E8;">: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;a604a3d3-6d01-497f-99c4-6a3de311cd9f&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;lat&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">39.914293</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;lng&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">116.414966</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;def&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;email&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;33&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;54d4dd20-09dd-4105-b9aa-48560c841ca1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;mobilePhoneNumber&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;33&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;userAddresses&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;addressId&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;585d747e-8605-442f-93bb-043aac15ea7e&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;addressLine&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;王府井社区居委会-0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;areaId&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;areas&quot;</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;83e5597d-dd8f-4906-ba8d-abf24a7754c2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;lat&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">39.914211</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;lng&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">116.414808</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;xyz&quot;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;addressId&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;df7eccb3-06d6-4400-b0e3-975be546c691&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;addressLine&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;王府井社区居委会-1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;areaId&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;areas&quot;</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;a604a3d3-6d01-497f-99c4-6a3de311cd9f&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;lat&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">39.914293</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;lng&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">116.414966</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;def&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>为了满足不同客户端的需求，微服务架构的应用中通常需要使用 API 组合来创建客户端独有的 API。通过本课时的学习，你可以了解到 API 网关和 API 组合的基本概念，以及 Backend For Frontend 模式在实际开发中的作用，最后还可以掌握如何使用 Spring Cloud Gateway 来组合 API。</p>`,35);function y(i,d,u,F,q,C){const n=l("Image");return o(),e("div",null,[r,a(n,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/2A/6C/CgqCHl78UQWAQJu1AABh3O-rYrk883.png"}),c,a(n,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/2A/6C/CgqCHl78US2AJni8AABsasYH0J8660.png"}),E])}const P=p(t,[["render",y]]);export{A as __pageData,P as default};
