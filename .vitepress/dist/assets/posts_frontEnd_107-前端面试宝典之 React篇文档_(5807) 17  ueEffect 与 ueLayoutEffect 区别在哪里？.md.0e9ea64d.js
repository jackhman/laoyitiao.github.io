import{_ as o,D as e,o as t,g as c,J as l,h as n,Q as p,m as s}from"./chunks/framework.f67d7268.js";const R=JSON.parse('{"title":"17ueEffect与ueLayoutEffect区别在哪里？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5807) 17  ueEffect 与 ueLayoutEffect 区别在哪里？.md","filePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5807) 17  ueEffect 与 ueLayoutEffect 区别在哪里？.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/107-前端面试宝典之 React篇文档/(5807) 17  ueEffect 与 ueLayoutEffect 区别在哪里？.md"},E=p('<h1 id="_17ueeffect与uelayouteffect区别在哪里" tabindex="-1">17ueEffect与ueLayoutEffect区别在哪里？ <a class="header-anchor" href="#_17ueeffect与uelayouteffect区别在哪里" aria-label="Permalink to &quot;17ueEffect与ueLayoutEffect区别在哪里？&quot;">​</a></h1><p>在 React 的面试中会对 Hooks API 进行一个区分度考察，重点往往会落在 useEffect 与 useLayoutEffect 上。很有意思，光从名字来看，它们就很相像，所以被点名的概率就很高。这一讲我们来重点讲解下这部分内容。</p><h3 id="审题" tabindex="-1">审题 <a class="header-anchor" href="#审题" aria-label="Permalink to &quot;审题&quot;">​</a></h3><p>在第 04 讲<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566&amp;sid=20-h5Url-0#/detail/pc?id=5794" target="_blank" rel="noreferrer">&quot;类组件与函数组件有什么区别呢？&quot;</a>中讲过该类型的题目，其中提到<strong>描述区别，就是求同存异的过程。</strong> 那我们可以直接用同样的思路来思考下这道题。</p><p>先挖掘 useEffect 与 useLayoutEffect 的共性，它们被用于解决什么问题，其次发掘独特的个性、各自适用的场景、设计原理以及未来趋势等。</p><h3 id="承题" tabindex="-1">承题 <a class="header-anchor" href="#承题" aria-label="Permalink to &quot;承题&quot;">​</a></h3><p>根据以上的分析，该讲所讲解题目的答题思路就有了。</p><p>首先是论述<strong>共同点</strong>：</p><ul><li><p><strong>使用方式</strong>，也就是列举使用方式上有什么相似处，共同用于解决什么问题；</p></li><li><p><strong>运用效果</strong>，使用后的执行效果上有什么相似处。</p></li></ul><p>其次是<strong>不同点</strong>：</p><ul><li><p><strong>使用场景</strong>，两者在使用场景的区分点在哪里，为什么可以或者不可以混用；</p></li><li><p><strong>独有能力</strong>，什么能力是其独有的，而另外一方没有的；</p></li><li><p><strong>设计原理</strong>，即从内部设计挖掘本质的原因；</p></li><li><p><strong>未来趋势</strong>，两者在未来的发展趋势上有什么区别，是否存在一方可能在使用频率上胜出或者淡出的情况。</p></li></ul>',11),y=p(`<h3 id="破题" tabindex="-1">破题 <a class="header-anchor" href="#破题" aria-label="Permalink to &quot;破题&quot;">​</a></h3><h4 id="共同点" tabindex="-1">共同点 <a class="header-anchor" href="#共同点" aria-label="Permalink to &quot;共同点&quot;">​</a></h4><p><strong>使用方式</strong></p><p>如果你读过 React Hooks 的官方文档，你可能会发现这么一段描述：useLayoutEffect 的函数签名与 useEffect 相同。</p><p>那什么是<strong>函数签名呢</strong>？函数签名就像我们在银行账号上签写的个人签名一样，独一无二，具有法律效应。以下面这段代码为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">MyObject.prototype.</span><span style="color:#B392F0;">myFunction</span><span style="color:#E1E4E8;">(value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">MyObject.prototype.</span><span style="color:#6F42C1;">myFunction</span><span style="color:#24292E;">(value)</span></span></code></pre></div><p>应用 MDN 的描述，在 JavaScript 中的签名通常包括这样几个部分：</p><ul><li><p>该函数是安装在一个名为 MyObject 的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Object" target="_blank" rel="noreferrer">对象</a>上；</p></li><li><p>该函数安装在 MyObject 的原型上（因此它是一个<a href="https://developer.mozilla.org/en-US/docs/Glossary/instance_method" target="_blank" rel="noreferrer">实例方法</a>，而不是一个<a href="https://developer.mozilla.org/en-US/docs/Glossary/static_method" target="_blank" rel="noreferrer">静态方法/类方法</a>）；</p></li><li><p>该函数的名称是 myFunction；</p></li><li><p>该函数接收一个叫 value 的参数，且没有进一步定义。</p></li></ul><p>那为什么说 useEffect 与 useLayoutEffect 函数签名相同呢？它们俩的名字完全不同啊。这是因为在源码中，它们调用的是同一个函数。下面的这段代码是 React useEffect 与 useLayoutEffect 在 ReactFiberHooks.js 源码中的样子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// useEffect</span></span>
<span class="line"><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Array</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mixed</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> )</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   currentHookNameInDev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;useEffect&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">mountHookTypesDev</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">checkDepsAreArrayDev</span><span style="color:#E1E4E8;">(deps);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mountEffect</span><span style="color:#E1E4E8;">(create, deps);</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">mountEffect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	  create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Array</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mixed</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">// $FlowExpectedError - jest isn&#39;t a global, and isn&#39;t recognized outside of tests</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> typeof jest) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#B392F0;">warnIfNotCurrentlyActingEffectsInDEV</span><span style="color:#E1E4E8;">(currentlyRenderingFiber);</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mountEffectImpl</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	    UpdateEffect </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PassiveEffect </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PassiveStaticEffect,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    HookPassive,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    create,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    deps,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  );</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// useLayoutEffect</span></span>
<span class="line"><span style="color:#B392F0;">useLayoutEffect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Array</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mixed</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> )</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   currentHookNameInDev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;useLayoutEffect&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">mountHookTypesDev</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">checkDepsAreArrayDev</span><span style="color:#E1E4E8;">(deps);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mountLayoutEffect</span><span style="color:#E1E4E8;">(create, deps);</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">mountLayoutEffect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	  create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Array</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mixed</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mountEffectImpl</span><span style="color:#E1E4E8;">(UpdateEffect, HookLayout, create, deps);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// useEffect</span></span>
<span class="line"><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   deps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mixed</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> )</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   currentHookNameInDev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;useEffect&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">mountHookTypesDev</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">checkDepsAreArrayDev</span><span style="color:#24292E;">(deps);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mountEffect</span><span style="color:#24292E;">(create, deps);</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">mountEffect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	  create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  deps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mixed</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">// $FlowExpectedError - jest isn&#39;t a global, and isn&#39;t recognized outside of tests</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> typeof jest) {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#6F42C1;">warnIfNotCurrentlyActingEffectsInDEV</span><span style="color:#24292E;">(currentlyRenderingFiber);</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mountEffectImpl</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	    UpdateEffect </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PassiveEffect </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PassiveStaticEffect,</span></span>
<span class="line"><span style="color:#24292E;">	    HookPassive,</span></span>
<span class="line"><span style="color:#24292E;">	    create,</span></span>
<span class="line"><span style="color:#24292E;">	    deps,</span></span>
<span class="line"><span style="color:#24292E;">	  );</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// useLayoutEffect</span></span>
<span class="line"><span style="color:#6F42C1;">useLayoutEffect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   deps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mixed</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> )</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   currentHookNameInDev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;useLayoutEffect&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">mountHookTypesDev</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">checkDepsAreArrayDev</span><span style="color:#24292E;">(deps);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mountLayoutEffect</span><span style="color:#24292E;">(create, deps);</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">mountLayoutEffect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	  create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  deps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mixed</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mountEffectImpl</span><span style="color:#24292E;">(UpdateEffect, HookLayout, create, deps);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看出：</p><ul><li><p>useEffect 先调用 mountEffect，再调用 mountEffectImpl；</p></li><li><p>useLayoutEffect 会先调用 mountLayoutEffect，再调用 mountEffectImpl。</p></li></ul><p>那么你会发现最终调用的都是同一个名为 mountEffectImpl 的函数，入参一致，返回值也一致，所以函数签名是相同的。</p><p>从代码角度而言，虽然是两个函数，但使用方式是完全一致的，甚至一定程度上可以相互替换。</p><p><strong>运用效果</strong></p><p>从运用效果上而言，useEffect 与 useLayoutEffect 两者都是<strong>用于处理副作用</strong>，这些副作用包括改变 DOM、设置订阅、操作定时器等。在函数组件内部操作副作用是不被允许的，所以需要使用这两个函数去处理。</p><p>虽然看起来很像，但在执行效果上仍然有些许差异。React 官方团队甚至直言，如果不能掌握 useLayoutEffect，不妨直接使用 useEffect。在使用 useEffect 时遇到了问题，再尝试使用 useLayoutEffect。</p><h4 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h4><p><strong>使用场景</strong></p><p>虽然官方团队给出了一个看似友好的建议，但我们并不能将这样模糊的结果作为正式答案回复给面试官。所以两者的差异在哪里？我们不如用代码来说明。下面通过一个案例来讲解两者的区别。</p><p>先使用 useEffect 编写一个组件，在这个组件里面包含了两部分：</p><ul><li><p>组件展示内容，也就是 className 为 square 的部分会展示一个圆圈；</p></li><li><p>在 useEffect 中操作修改 square 的样式，将它的样式重置到页面正中间。</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useEffect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./styles.css&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">greenSquare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.square&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenSquare.style.transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;translate(-50%, -50%)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenSquare.style.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;50%&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenSquare.style.top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;50%&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;App&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;square&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useEffect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./styles.css&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">greenSquare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.square&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    greenSquare.style.transform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;translate(-50%, -50%)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    greenSquare.style.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;50%&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    greenSquare.style.top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;50%&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;App&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;square&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>下面再补充一下样式文件，其中 App 样式中规中矩设置间距，square 样式主要设置圈儿的颜色与大小，接下来就可以看看它的效果了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.App {</span></span>
<span class="line"><span style="color:#E1E4E8;">  text</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">align</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> center;</span></span>
<span class="line"><span style="color:#E1E4E8;">  margin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  padding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">.square {</span></span>
<span class="line"><span style="color:#E1E4E8;">  width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 100px;</span></span>
<span class="line"><span style="color:#E1E4E8;">  height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 100px;</span></span>
<span class="line"><span style="color:#E1E4E8;">  position</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> absolute;</span></span>
<span class="line"><span style="color:#E1E4E8;">  top</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 50px;</span></span>
<span class="line"><span style="color:#E1E4E8;">  left</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  background</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> red;</span></span>
<span class="line"><span style="color:#E1E4E8;">  border</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">radius</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.App {</span></span>
<span class="line"><span style="color:#24292E;">  text</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">align</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> center;</span></span>
<span class="line"><span style="color:#24292E;">  margin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  padding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">.square {</span></span>
<span class="line"><span style="color:#24292E;">  width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 100px;</span></span>
<span class="line"><span style="color:#24292E;">  height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 100px;</span></span>
<span class="line"><span style="color:#24292E;">  position</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> absolute;</span></span>
<span class="line"><span style="color:#24292E;">  top</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 50px;</span></span>
<span class="line"><span style="color:#24292E;">  left</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  background</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> red;</span></span>
<span class="line"><span style="color:#24292E;">  border</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">radius</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后执行代码， 你就会发现红圈在渲染后出现了肉眼可见的瞬移，一下飘到了中间。</p>`,26),i=p(`<p>那如果使用 useLayoutEffect 又会怎么样呢？其他代码都不需要修改，只需要像下面这样，将 useEffect 替换为 useLayoutEffect：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React, { useLayoutEffect } from &quot;react&quot;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> &quot;./styles.css&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useLayoutEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> greenSquare </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.square&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenSquare.style.transform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;translate(-50%, -50%)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenSquare.style.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;50%&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    greenSquare.style.top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;50%&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;App&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div className</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;square&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React, { useLayoutEffect } from &quot;react&quot;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> &quot;./styles.css&quot;;</span></span>
<span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useLayoutEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> greenSquare </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.square&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    greenSquare.style.transform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;translate(-50%, -50%)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    greenSquare.style.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;50%&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    greenSquare.style.top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;50%&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;App&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;square&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>接下来再看执行的效果，你会发现红圈是静止在页面中央，仿佛并没有使用代码强制调整样式的过程。</p>`,3),u=s("p",null,[n("虽然在实际的项目中，我们并不会这么粗暴地去调整组件样式，但这个案例足以说明两者的区别与使用场景。在 React 社区中最佳的实践是这样推荐的，大多数场景下可以直接使用"),s("strong",null,"useEffect"),n(" ，但是如果你的代码引起了页面闪烁，也就是引起了组件突然改变位置、颜色及其他效果等的情况下，就推荐使用"),s("strong",null,"useLayoutEffect"),n("来处理。那么总结起来就是如果有直接操作 DOM 样式或者引起 DOM 样式更新的场景更推荐使用 useLayoutEffect。")],-1),f=s("p",null,"那既然内部都是调用同一个函数，为什么会有这样的区别呢？在探讨这个问题时就需要从 Hooks 的设计原理说起了。",-1),d=s("p",null,[s("strong",null,"设计原理")],-1),F=s("p",null,"首先可以看下这个图：",-1),A=p(`<p>这个图表达了什么意思呢？首先所有的 Hooks，也就是 useState、useEffect、useLayoutEffect 等，都是导入到了 Dispatcher 对象中。在调用 Hook 时，会通过 Dispatcher 调用对应的 Hook 函数。所有的 Hooks 会按顺序存入对应 Fiber 的状态队列中，这样 React 就能知道当前的 Hook 属于哪个 Fiber，这里就是<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566&amp;sid=20-h5Url-0#/detail/pc?id=5806" target="_blank" rel="noreferrer">上一讲</a>所提到的<strong>Hooks 链表</strong>。但 Effect Hooks 会有些不同，它涉及了一些额外的处理逻辑。每个 Fiber 的 Hooks 队列中保存了 effect 节点，而每个 effect 的类型都有可能不同，需要在合适的阶段去执行。</p><p>那么 LayoutEffect 与普通的 Effect 都是 effect，但标记并不一样，所以在调用时，就会有些许不同。回到前面的底层代码，你会发现只有第一个参数和第二个参数是不一样的，其中 UpdateEffect、PassiveEffect、PassiveStaticEffect 就是 Fiber 的标记；HookPassive 和 HookLayout 就是当前 Effect 的标记。如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// useEffect 调用的底层函数</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">mountEffect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	  create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Array</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mixed</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">// $FlowExpectedError - jest isn&#39;t a global, and isn&#39;t recognized outside of tests</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> typeof jest) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#B392F0;">warnIfNotCurrentlyActingEffectsInDEV</span><span style="color:#E1E4E8;">(currentlyRenderingFiber);</span></span>
<span class="line"><span style="color:#E1E4E8;">	    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mountEffectImpl</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	    UpdateEffect </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PassiveEffect </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> PassiveStaticEffect,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    HookPassive,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    create,</span></span>
<span class="line"><span style="color:#E1E4E8;">	    deps,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  );</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#6A737D;">// useLayoutEffect 调用的底层函数</span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">mountLayoutEffect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	  create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	  deps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Array</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mixed</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mountEffectImpl</span><span style="color:#E1E4E8;">(UpdateEffect, HookLayout, create, deps);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// useEffect 调用的底层函数</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">mountEffect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	  create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  deps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mixed</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">// $FlowExpectedError - jest isn&#39;t a global, and isn&#39;t recognized outside of tests</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> typeof jest) {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#6F42C1;">warnIfNotCurrentlyActingEffectsInDEV</span><span style="color:#24292E;">(currentlyRenderingFiber);</span></span>
<span class="line"><span style="color:#24292E;">	    }</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mountEffectImpl</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	    UpdateEffect </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PassiveEffect </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> PassiveStaticEffect,</span></span>
<span class="line"><span style="color:#24292E;">	    HookPassive,</span></span>
<span class="line"><span style="color:#24292E;">	    create,</span></span>
<span class="line"><span style="color:#24292E;">	    deps,</span></span>
<span class="line"><span style="color:#24292E;">	  );</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6A737D;">// useLayoutEffect 调用的底层函数</span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">mountLayoutEffect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	  create</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	  deps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mixed</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mountEffectImpl</span><span style="color:#24292E;">(UpdateEffect, HookLayout, create, deps);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>标记为 HookLayout 的 effect 会在所有的 DOM 变更之后同步调用，所以可以使用它来读取 DOM 布局并同步触发重渲染。但既然是同步，就有一个问题，计算量较大的耗时任务必然会造成阻塞，所以这就需要根据实际情况酌情考虑了。如果非必要情况下，使用标准的 useEffect 可以避免阻塞。这段代码在 react/packages/react-reconciler/src/ReactFiberCommitWork.new.js 中，有兴趣的同学可以研读一下。</p><h3 id="答题" tabindex="-1">答题 <a class="header-anchor" href="#答题" aria-label="Permalink to &quot;答题&quot;">​</a></h3><p>那么以上就是本讲的全部知识点了，内容并不太多，重点主要在于<strong>分析思路</strong>。那么下面就可以进入答题环节了。</p><blockquote><p>useEffect 与 useLayoutEffect 的区别在哪里？这个问题可以分为两部分来回答，共同点与不同点。</p><p>它们的共同点很简单，底层的函数签名是完全一致的，都是调用的 mountEffectImpl，在使用上也没什么差异，基本可以直接替换，也都是用于处理副作用。</p><p>那不同点就很大了，useEffect 在 React 的渲染过程中是被异步调用的，用于绝大多数场景，而 LayoutEffect 会在所有的 DOM 变更之后同步调用，主要用于处理 DOM 操作、调整样式、避免页面闪烁等问题。也正因为是同步处理，所以需要避免在 LayoutEffect 做计算量较大的耗时任务从而造成阻塞。</p><p>在未来的趋势上，两个 API 是会长期共存的，暂时没有删减合并的计划，需要开发者根据场景去自行选择。React 团队的建议非常实用，如果实在分不清，先用 useEffect，一般问题不大；如果页面有异常，再直接替换为 useLayoutEffect 即可。</p></blockquote>`,7),g=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),D=s("p",null,"本题仍然是一个讲区别的点，所以在整体思路上找相同与不同就可以。",-1),h=s("p",null,'这里还有一个很有意思的地方，React 的函数命名追求"望文生义"的效果，这里不是贬义，它在设计上就是希望你从名字猜出真实的作用。比如 componentDidMount、componentDidUpdate 等等虽然名字冗长，但容易理解。从 LayoutEffect 这样一个命名就能看出，它想解决的也就是页面布局的问题。',-1),m=s("p",null,"那么在实际的开发中，还有哪些你觉得不太容易理解的 Hooks？或者容易出错的 Hooks？不妨在留言区留言，我会与你一起交流讨论。",-1),v=s("p",null,"这一讲就到这了，在下一讲中，将主要介绍 React Hooks 的设计模式，到时见。",-1),_=s("hr",null,null,-1),q=s("p",null,"[",-1),C=s("p",null,[n("]("),s("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/mka"),n(")")],-1),k=s("p",null,"《大前端高薪训练营》",-1),b=s("p",null,[n("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),s("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),n("，快来领取！")],-1);function B(L,I,S,x,P,H){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/90/3F/Ciqc1GAKhGuAeJVzAABnKbg5gv0029.png"}),n(),y,l(a,{alt:"GIF1.gif",src:"https://s0.lgstatic.com/i/image2/M01/08/32/Cip5yGAKhLOADIYUAAIoKyWYNqU863.gif"}),n(),i,l(a,{alt:"GIF2.gif",src:"https://s0.lgstatic.com/i/image2/M01/08/34/CgpVE2AKhLyANGs2AAIwo7CyA_E780.gif"}),n(),u,f,d,F,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/08/34/CgpVE2AKhP6AFNRnAAB9M55aj8I408.png"}),n(),A,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image2/M01/08/32/Cip5yGAKhRCAX99HAAD0YKYP40c980.png"}),n(),g,D,h,m,v,_,q,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png"}),n(),C,k,b])}const T=o(r,[["render",B]]);export{R as __pageData,T as default};
