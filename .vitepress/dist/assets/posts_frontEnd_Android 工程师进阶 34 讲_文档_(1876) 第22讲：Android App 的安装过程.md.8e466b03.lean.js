import{_ as n,j as s,o as i,g as o,k as l,s as a,h as t,Q as c}from"./chunks/framework.e0c66c3f.js";const ua=JSON.parse('{"title":"编译阶段 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1876) 第22讲：Android App 的安装过程.md","filePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1876) 第22讲：Android App 的安装过程.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1876) 第22讲：Android App 的安装过程.md"},p=a("p",null,"之前的两节课我们了解了 Android 系统中两个比较重要的系统服务ActivityManagerService（AMS）和 WindowManagerService（WMS），这节课我们通过分析 apk 的安装过程来了解一下 Android 中另一个比较重要的系统服务------PackageManagerService（PMS）。",-1),d=a("p",null,"在分析安装过程之前，需要先了解一下 Android 项目是如何经过编译->打包生成最终的 .apk 格式的安装包。谷歌有一张官方图片来描述 apk 的打包流程，如下图所示。",-1),g=a("p",null,"一个完整的 Android 项目可能包含多个 module，而从宏观上看每一个 module 中的内容可以分为 2 部分：Resources 资源文件、Java 或者 Kotlin 源代码。因此整个项目的编译打包过程也是针对这 2 部分来完成。",-1),_=a("h3",{id:"编译阶段",tabindex:"-1"},[t("编译阶段 "),a("a",{class:"header-anchor",href:"#编译阶段","aria-label":'Permalink to "编译阶段"'},"​")],-1),h=a("h4",{id:"resources-资源文件",tabindex:"-1"},[t("Resources 资源文件 "),a("a",{class:"header-anchor",href:"#resources-资源文件","aria-label":'Permalink to "Resources 资源文件"'},"​")],-1),u=a("p",null,[t("资源文件包括项目中 res 目录下的各种 XML 文件、动画、drawable 图片、音视频等。AAPT 工具负责编译项目中的这些资源文件，所有资源文件会被编译处理，XML 文件（drawable 图片除外）会被编译成二进制文件，所以解压 apk 之后无法直接打开 XML 文件。"),a("strong",null,"但是 assets 和 raw 目录下的资源并不会被编译，会被原封不动的打包到 apk 压缩包中"),t("。")],-1),A=a("p",null,"资源文件编译之后的产物包括两部分：resources.arsc 文件和一个 R.java。前者保存的是一个资源索引表，后者定义了各个资源 ID 常量。这两者结合就可以在代码中找到对应的资源引用。比如如下的 R.java 文件：",-1),k=c("",12),m=a("p",null,"整个编译打包流程可以用下图来描述：",-1),P=a("p",null,"接下来看一下 PMS 是如何将其安装到手机设备中的。",-1),C=a("h3",{id:"pms安装过程概览",tabindex:"-1"},[t("PMS安装过程概览 "),a("a",{class:"header-anchor",href:"#pms安装过程概览","aria-label":'Permalink to "PMS安装过程概览"'},"​")],-1),M=a("p",null,"当我们点击某一个 App 安装包进行安装时，首先会弹出一个系统界面指示我们进行安装操作。这个界面是 Android Framework 中预置的一个 Activity---PackageInstallerActivity.java。当点击安装后，PackageInstallerActivity 最终会将所安装的 apk 信息通过 PackageInstallerSession 传给 PMS，具体方法在 commitLocked 方法中，如下所示：",-1),S=a("p",null,"图中的 mPm 就是系统服务 PackageManagerService。installStage 方法就是正式开始 apk 的安装过程。",-1),I=a("p",null,"整个 apk 的安装过程可以分为两大步：",-1),v=a("ul",null,[a("li",null,"拷贝安装包；"),a("li",null,"装载代码。")],-1),D=a("h4",{id:"拷贝安装包",tabindex:"-1"},[t("拷贝安装包 "),a("a",{class:"header-anchor",href:"#拷贝安装包","aria-label":'Permalink to "拷贝安装包"'},"​")],-1),b=a("p",null,"从 installStage 方法开始看起，代码如下：",-1),f=a("p",null,"解释说明：",-1),w=a("ul",null,[a("li",null,"图中 1 处创建了类型为 INIT_COPY 的 Message。"),a("li",null,"图中 2 处创建 InstallParams，并传入安装包的相关数据。")],-1),y=a("p",null,"Message 发送出去之后，由 PMS 的内部类 PackageHandler 接收并处理，如下：",-1),x=a("p",null,"解释说明：",-1),q=a("ul",null,[a("li",null,"图中 1 处从 Message 中取出 HandlerParams 对象，实际类型是 InstallParams 类型。"),a("li",null,"图中 2 处调用 connectToService 方法连接安装 apk 的 Service 服务。")],-1),Y=a("h4",{id:"packagehandler-的-connecttoservice-方法",tabindex:"-1"},[t("PackageHandler 的 connectToService 方法 "),a("a",{class:"header-anchor",href:"#packagehandler-的-connecttoservice-方法","aria-label":'Permalink to "PackageHandler 的 connectToService 方法"'},"​")],-1),T=a("p",null,"通过隐式 Intent 绑定 Service，实际绑定的 Service 类型是 DefaultContainerService 类型。当绑定 Service 成功之后，会在 onServiceConnection 方法中发送一个绑定操作的 Message，如下所示：",-1),H=a("p",null,"MCS_BOUND 的 Message 接收者还是 PackageHandler，具体如下：",-1),F=a("p",null,"mPendingInstalls 是一个等待队列，里面保存所有需要安装的 apk 解析出来的 HandlerParams 参数，从 mPendingInstalls 中取出第一个需要安装的 HandlerParams 对象，并调用其 startCopy 方法，在 startCopy 方法中会继续调用一个抽象方法 handleStartCopy 处理安装请求。通过之前的分析，我们知道 HandlerParams 实际类型是 InstallParams 类型，因此最终调用的是 InstallParams 的 handlerStartCopy 方法，",-1),L=a("h4",{id:"installparams-的-handlerstartcopy-方法",tabindex:"-1"},[t("InstallParams 的 handlerStartCopy 方法 "),a("a",{class:"header-anchor",href:"#installparams-的-handlerstartcopy-方法","aria-label":'Permalink to "InstallParams 的 handlerStartCopy 方法"'},"​")],-1),E=a("p",null,"这个方法是整个安装包拷贝的核心方法，具体如下：",-1),N=a("p",null,"解释说明：",-1),B=a("ul",null,[a("li",null,"图中 1 处设置安装标志位，决定是安装在手机内部存储空间还是 sdcard 中。"),a("li",null,"图中 2 处判断 apk 安装位置。")],-1),R=a("p",null,"如果安装位置合法，则执行图中 3 处逻辑，创建一个 InstallArgs，实际上是其子类 FileInstallArgs 类型，然后调用其 copyApk 方法进行安装包的拷贝操作。",-1),V=a("h4",{id:"fileinstallargs-的-copyapk-方法",tabindex:"-1"},[t("FileInstallArgs 的 copyApk 方法 "),a("a",{class:"header-anchor",href:"#fileinstallargs-的-copyapk-方法","aria-label":'Permalink to "FileInstallArgs 的 copyApk 方法"'},"​")],-1),J=a("p",null,"可以看出在 copyApk 方法中调用了 doCopyApk 方法，doCopyAPk 方法中主要做了 3 件事情：",-1),j=a("ul",null,[a("li",null,"图中 1 处创建存储安装包的目标路径，实际上是 /data/app/ 应用包名目录；"),a("li",null,"图中 2 处调用服务的 copyPackage 方法将安装包 apk 拷贝到目标路径中；"),a("li",null,"图中 3 处将 apk 中的动态库 .so 文件也拷贝到目标路径中。")],-1),O=a("p",null,"上图中的 IMediaContainerService 实际上就是在开始阶段进行连接操作的 DefaultContainerService 对象，其内部 copyPackage 方法本质上就是执行 IO 流操作，具体如下：",-1),W=a("p",null,"最终安装包在 data/app 目录下以 base.apk 的方式保存，至此安装包拷贝工作就已经完成。",-1),U=a("h3",{id:"装载代码",tabindex:"-1"},[t("装载代码 "),a("a",{class:"header-anchor",href:"#装载代码","aria-label":'Permalink to "装载代码"'},"​")],-1),X=a("p",null,"代码拷贝结束之后，就开始进入真正的安装步骤。",-1),K=a("p",null,"代码回到上述的 HandlerParams 中的 startCopy 方法：",-1),G=a("p",null,"可以看出当安装包拷贝操作结束之后，继续调用 handleReturnCode 方法来处理返回结果，最终调用 processPendingInstall 方法处理安装过程，代码具体如下：",-1),Q=a("p",null,"解释说明：",-1),$=a("ul",null,[a("li",null,"图中 1 处执行预安装操作，主要是检查安装包的状态，确保安装环境正常，如果安装环境有问题会清理拷贝文件。"),a("li",null,"图中 2 处是真正的安装阶段，installPackageTraceLI 方法中添加跟踪 Trace，然后调用 installPackageLI 方法进行安装。"),a("li",null,"图中 3 处处理安装完成之后的操作。")],-1),z=a("p",null,"installPackageLI 是 apk 安装阶段的核心代码，方法实现很长，部分核心代码如下：",-1),Z=a("p",null,"解释说明：",-1),aa=a("ul",null,[a("li",null,"图中 1 处调用 PackageParser 的 parsePackage 方法解析 apk 文件，主要是解析 AndroidManifest.xml 文件，将结果记录在 PackageParser.Package 中。我们在清单文件中声明的 Activity、Service 等组件就是在这一步中被记录到系统 Framework 中，后续才可以通过 startActivity 或者 startService 启动相应的活动或者服务。"),a("li",null,"图中 2 处对 apk 中的签名信息进行验证操作。collectCertificates 做签名验证，collectManifestDigest 主要是做包的项目清单摘要的收集，主要适合用来比较两个包的是否一样。如果我们设备上已经安装了一个 debug 版本的 apk，再次使用一个 release 版本的 apk 进行覆盖安装时，会在这一步验证失败，最终导致安装失败。"),a("li",null,"图中 3 处时执行 dex 优化，实际为 dex2oat 操作，用来将 apk 中的 dex 文件转换为 oat 文件。"),a("li",null,"图中 4 处调用 installNewPackageLI 方法执行新 apk 的安装操作")],-1),ea=a("p",null,"installNewPackageLI 方法负责完成最后的 apk 安装过程，具体代码如下：",-1),la=a("p",null,"解释说明：",-1),ta=a("ul",null,[a("li",null,"scanPackageLI 继续扫描解析 apk 安装包文件，保存 apk 相关信息到 PMS 中，并创建 apk 的 data 目录，具体路径为 /data/data/应用包名。"),a("li",null,"updateSettingsLI 如果安装成功，更新系统设置中的应用信息，比如应用的权限信息。"),a("li",null,"deletePackageLI 如果安装失败，则将安装包以及各种缓存文件删除")],-1),na=a("blockquote",null,[a("p",null,"至此整个 apk 的安装过程结束，实际上安装成功之后，还会发送一个 App 安装成功的广播 ACTION_PACKAGE_ADDED。手机桌面应用注册了这个广播，当接收到应用安装成功之后，就将 apk 的启动 icon 显示在桌面上。")],-1),sa=a("h3",{id:"总结",tabindex:"-1"},[t("总结 "),a("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),ia=a("p",null,"这节课主要介绍了一个 Android 项目从编译成 apk 文件，然后被安装到手机设备上的简要过程。其中编译分 2 块内容：资源 + 源代码。并且生成 apk 之后还要经过签名、对齐等操作。apk 安装也分 2 块进行：安装包拷贝和代码装载。",-1);function oa(ca,ra,pa,da,ga,_a){const e=s("Image");return i(),o("div",null,[p,d,l(e,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/18/66/CgqCHl7YnimALWVSAAEh1GToKmQ996.png"}),g,_,h,u,A,l(e,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/18/5B/Ciqc1F7YnjeAWBwcAAJm6yVrw2E631.png"}),k,l(e,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/18/66/CgqCHl7YnkaARuuYAABXIRNJSsg192.png"}),m,l(e,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/18/66/CgqCHl7Ynk6AEMsbAAGPn3-pe0U243.png"}),P,C,M,l(e,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/18/66/CgqCHl7YnliANsdAAADChIoYQGY542.png"}),S,I,v,D,b,l(e,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/18/66/CgqCHl7YnmOAKxwJAAeDPbSMt08082.png"}),f,w,y,l(e,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/18/66/CgqCHl7YnmyAIOEcAAOwIJUcb7I626.png"}),x,q,Y,l(e,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/18/5B/Ciqc1F7YnnWAa7t4AAGTtgn9n84775.png"}),T,l(e,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/18/5B/Ciqc1F7Ynn2ACJWVAAFb51BBXdQ949.png"}),H,l(e,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/18/5B/Ciqc1F7YnoKAHEXMAAEJ3nJLNYc383.png"}),F,L,E,l(e,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/18/67/CgqCHl7YnoyAMNWXAAVf4iF2VqM771.png"}),N,B,R,V,l(e,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/18/67/CgqCHl7YnpWAO46fAAUi29eLnk8266.png"}),J,j,O,l(e,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/18/67/CgqCHl7Ynp6Aew4nAAOlzQeDuuU439.png"}),W,U,X,K,l(e,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/18/67/CgqCHl7YnqaAVd8eAAC7pLWZqFU880.png"}),G,l(e,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image/M00/18/5B/Ciqc1F7Ynq6AYUaKAAGFA25LwV4100.png"}),Q,$,z,l(e,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image/M00/18/5B/Ciqc1F7YnreAMnZMAAOyzccSfS0859.png"}),Z,aa,ea,l(e,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image/M00/18/67/CgqCHl7YnsCAdCILAAJ1TeRtXoQ877.png"}),la,ta,na,sa,ia])}const Aa=n(r,[["render",oa]]);export{ua as __pageData,Aa as default};
