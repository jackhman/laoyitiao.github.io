import{_ as o,j as e,o as t,g as c,k as l,h as s,s as n,Q as p}from"./chunks/framework.e0c66c3f.js";const h=JSON.parse('{"title":"引入 Spring WebFlux ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6992) 10  WebFlux（上）：如何使用注解编程模式构建异步非阻塞服务？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6992) 10  WebFlux（上）：如何使用注解编程模式构建异步非阻塞服务？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/Spring 响应式编程实战_文档/(6992) 10  WebFlux（上）：如何使用注解编程模式构建异步非阻塞服务？.md"},E=n("p",null,"通过上一讲的介绍，我们已经明确了 Spring 家族中 WebFlux 组件诞生的背景和意义。作为一款新型的 Web 服务开发组件，WebFlux 一方面充分考虑了与原有 Spring MVC 在开发模式上的兼容性，开发人员仍然可以使用基于注解的编程方式来创建响应式 Web 服务；另一方面，WebFlux 也引入了基于函数式编程的全新开发模式。本讲和下一讲将分别对这两种开发模式展开讨论，今天的内容将先关注基于注解的编程模型。",-1),y=n("h3",{id:"引入-spring-webflux",tabindex:"-1"},[s("引入 Spring WebFlux "),n("a",{class:"header-anchor",href:"#引入-spring-webflux","aria-label":'Permalink to "引入 Spring WebFlux"'},"​")],-1),i=n("p",null,[s("如果你是第一次创建 WebFlux 应用，那么最简单的方法应该是使用 Spring 所提供的 Spring Initializer 初始化模板。直接访问 Spring Initializer 网站（"),n("a",{href:"http://start.spring.io/?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"http://start.spring.io/"),s("），选择创建一个 Maven 项目并指定相应的配置项，然后在添加的依赖中选择 Spring Reactive Web，我们就可以获取一个可运行的 WebFlux 模版项目了，如下所示。")],-1),u=p("",36),d=p("",11);function F(g,A,b,C,S,v){const a=e("Image");return t(),c("div",null,[E,y,i,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/31/1A/CioPOWBsGwCAXcqVAABornEKBhA084.png"}),s(),u,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/31/1A/CioPOWBsGyaACJz3AACV3vlgteU433.png"}),s(),d])}const B=o(r,[["render",F]]);export{h as __pageData,B as default};
