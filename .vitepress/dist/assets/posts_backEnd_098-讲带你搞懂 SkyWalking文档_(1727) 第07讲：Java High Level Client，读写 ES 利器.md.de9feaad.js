import{_ as o,j as e,o as t,h as c,k as l,f as n,s,Q as p}from"./chunks/framework.d3daa342.js";const b=JSON.parse('{"title":"第07讲：JavaHighLevelClient，读写ES利器","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1727) 第07讲：Java High Level Client，读写 ES 利器.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1727) 第07讲：Java High Level Client，读写 ES 利器.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1727) 第07讲：Java High Level Client，读写 ES 利器.md"},E=s("h1",{id:"第07讲-javahighlevelclient-读写es利器",tabindex:"-1"},[n("第07讲：JavaHighLevelClient，读写ES利器 "),s("a",{class:"header-anchor",href:"#第07讲-javahighlevelclient-读写es利器","aria-label":'Permalink to "第07讲：JavaHighLevelClient，读写ES利器"'},"​")],-1),y=s("p",null,"通过前面搭建 SkyWalking 的运行环境我们知道，SkyWalking OAP 后端可以使用多种存储对数据进行持久化，例如 MySQL、TiDB 等，默认使用 ElasticSearch 作为持久化存储，在后面的源码分析过程中也将以 ElasticSearch 作为主要存储进行分析。",-1),i=s("h3",{id:"elasticsearch-基本概念",tabindex:"-1"},[n("ElasticSearch 基本概念 "),s("a",{class:"header-anchor",href:"#elasticsearch-基本概念","aria-label":'Permalink to "ElasticSearch 基本概念"'},"​")],-1),u=s("p",null,"本课时将快速介绍一下 ElasticSearch 的基本概念，如果你没有用过 ElasticSearch ，可以通过本小节迅速了解 ElasticSearch 中涉及的基本概念。Elasticsearch 是一个基于 Apache Lucene 的开源搜索引擎，无论在开源还是专业领域，Apache Lucene 可以被认为是迄今为止最先进、性能最好、功能最全的搜索引擎库。但是，Apache Lucene 只是一个工具库，本身使用也比较复杂，直接使用 Apache Lucene 对开发人员的要求比较高，需要检索方面的知识来理解它是如何工作的。ElasticSearch 使用 Java 对 Apache Lucene 进行了封装，提供了简单易用的 RESTful API，隐藏 Apache Lucene 的复杂性，降低了全文检索的编程门槛。",-1),F=s("p",null,"ElasticSearch 中有几个比较核心的概念，为了方便你理解，我将其与数据库中的概念进行映射，如下图所示：",-1),d=p(`<p>注意：在老版本的 ElasticSearch 中，Index 和 Document 之间还有个 Type 的概念，每个 Index 下可以建立多个 Type，Document 存储时需要指定 Index 和 Type。从 ES 6.0 版本开始单个 Index 中只能有一个 Type，ES 7.0 版本以后将不建议使用 Type，ES 8.0 以后完全不支持 Type。</p><p>Document 是构建 Index 的基本单元。例如，一条订单数据就可以是一个 Document，其中可以包含多个 Field，例如，订单的创建时间、价格、明细，等等。Document 以 JSON 格式表示，Field 则是这条 JSON 数据中的字段，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_index&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;order_index&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;kg72dW8BOCMUWGurIFiy&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_version&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_score&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;_source&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;create_time&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2020-02-01 17:35:00&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;creator&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;xxxxx&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;order_status&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;NEW&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;price&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100.00</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_index&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;order_index&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;kg72dW8BOCMUWGurIFiy&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_version&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_score&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;_source&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;create_time&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-02-01 17:35:00&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;creator&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;xxxxx&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;order_status&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;NEW&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100.00</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Index 是具有某些类似特征的 Document 的集合，Index 与 Document 之间的关系就类似于数据库中 Table 与 Row 之间的关系。在 Index 中可以存储任意数量的 Document。在后续介绍的示例中可以看到，对 Document 的添加、删除、更新、搜索等操作，都需要明确的指定 Index 名称。</p><p>最后，还需要了解 ElasticSearch 中一个叫作 Index Template（模板）的概念。Index Template 一般会包含 settings、mappings、index_patterns 、order、aliases 几部分:</p><ul><li>index_patterns 负责匹配 Index 名称，Index Template 只会应用到名称与之匹配的 Index 上，而且 ElasticSearch 只会在 Index 创建的时候应用匹配的 Index Template，后续修改 Index Template 时不会影响已有的 Index。通过 index_patterns 匹配可以让多个 Index 重用一个 Index Template。</li><li>settings 主要用于设置 Index 中的一些相关配置信息，如分片数、副本数、refresh 间隔等信息（后面会介绍分片数和副本数的概念）；</li><li>mappings 主要是一些说明信息，类似于定义该 Index 的 schema 信息，例如，指定每个 Field 字段的数据类型；&gt;</li><li>order 主要作用于在多个 Index Template 同时匹配到一个 Index 的情况，如果此时这些Index Template 中的配置出现不一致，则以 order 的最大值为准，order 默认值为 0。另外，创建 Index 的命令中如果自带了 settings 或 mappings 配置，则其优先级最高；</li><li>aliases 则是为匹配的 Index 创建别名。我们可以通过请求<a href="http://localhost:9200/_alias/*" target="_blank" rel="noreferrer">http://localhost:9200/_alias/*</a>获取所有别名与 Index 之间的对应关系。</li></ul><p>下面是 SkyWalking 使用的 segment 模板，它会匹配所有 segment-* 索引，segment-yyyyMMdd 索引是用来存储 Trace 数据的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;segment&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;order&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;index_patterns&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;segment-*&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;settings&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;refresh_interval&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3s&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;number_of_shards&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;number_of_replicas&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 省略 analysis字段设置</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;mappings&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;segment_id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;keyword&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    },</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;trace_id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;keyword&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    },</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;service_id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;integer&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    },</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 省略其他字段的设置</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;aliases&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 为匹配的Index创建别名</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;segment&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;segment&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;order&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;index_patterns&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;segment-*&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;settings&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;index&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;refresh_interval&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3s&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;number_of_shards&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;number_of_replicas&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 省略 analysis字段设置</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;mappings&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;segment_id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;keyword&quot;</span></span>
<span class="line"><span style="color:#24292E;">                    },</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;trace_id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;keyword&quot;</span></span>
<span class="line"><span style="color:#24292E;">                    },</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;service_id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;integer&quot;</span></span>
<span class="line"><span style="color:#24292E;">                    },</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 省略其他字段的设置</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;aliases&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 为匹配的Index创建别名</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;segment&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="节点角色" tabindex="-1">节点角色 <a class="header-anchor" href="#节点角色" aria-label="Permalink to &quot;节点角色&quot;">​</a></h3><p>一个 ElasticSearch 集群是由一个或多个节点组成，这些节点共同存储了集群中的所有数据，并且 ElasticSearch 提供了跨节点的联合索引和搜索功能。集群名称是一个 ElasticSearch 集群的唯一标识，在请求 ElasticSearch 集群时都需要使用到这个集群名称。在同一个网络环境中，需要保证集群名称不重复，否则集群中的节点可能会加入到错误的集群中。</p><p>ElasticSearch 集群是去中心化的，ElasticSearch 节点的相互发现是基于 Pull-Push 版本的 Gossip 算法实现的。Zen Discovery 是 ElasticSearch 默认的发现实现，提供了广播和单播的能力，帮助一个集群内的节点完成快速的相互发现。</p><p>ElasticSearch 集群中的节点有多个可选的角色，这些角色都是通过在节点的配置文件中配置的。</p><ul><li>Master Eligible Node （候选主节点）：可以被选举为 Master 的候选节点；</li><li>Master Node （主节点）：完成节点发现阶段之后，才会进入主节点选举阶段，为了防止在网络分区的场景下出现脑裂问题，一般采用 quorum 版本的 Bully 算法变体（本课时重点是帮助你快速了解 ElasticSearch 基础知识，不展开该算法的具体原理）。所以，主节点是从候选主节点中选举出来的，主要负责管理 ElasticSearch 集群，通过广播的机制与其他节点维持关系，负责集群中的 DDL 操作（创建/删除索引），管理其他节点上的分片；</li><li>Data Node（数据节点）：存放数据的节点，负责数据的增删改查；</li><li>Coordinating Node（协调节点）：每个节点都是一个潜在的协调节点，协调节点最大的作用就是响应客户端的请求，将各个分片里的数据汇总起来一并返回给客户端，因此 ElasticSearch 的节点需要有足够的 CPU 和内存资源去处理汇总操作；</li><li>Ingest Node（提取节点）：能执行预处理管道，不负责数据也不负责集群相关的事务。</li></ul><h3 id="分片-副本" tabindex="-1">分片&amp;副本 <a class="header-anchor" href="#分片-副本" aria-label="Permalink to &quot;分片\\&amp;副本&quot;">​</a></h3><p>在 ElasticSearch 中的一个 Index 可以存储海量的 Document，单台机器的磁盘大小是无法存储的，而且在进行数据检索的时候，单台机器也存在性能瓶颈，无法为海量数据提供高效的检索。</p><p>为了解决上述问题，ElasticSearch 将单个 Index 分割成多个分片，创建 Index 时，可以按照预估值指定任意数量的分片。虽然逻辑上每个分片都属于一个 Index，但是单个分片都是一个功能齐全且独立的 Index，一个分片可以被分配到集群中的任意节点上。</p><p>通过分片的功能，Index 就有了容量水平扩展的能力，运维人员可以通过添加节点的方式扩充整个集群的容量。在处理检索请求时，不同的分片由不同的 ElasticSearch 节点进行检索，可以实现并发操作，这样也就可以大大提高检索性能。</p><p>最后，某条 Document 数据具体存储在哪个分片，完全由 ElasticSearch 的分片机制决定。当写入一条 Document 的时候，ElasticSearch 会根据指定的 key （默认是 ElasticSearch 自动生成的 Id，用户也可以手动指定）决定其所在的分片编号，计算公式如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">分片编号 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> 主分片数量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">分片编号 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(key) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> 主分片数量</span></span></code></pre></div><p>主分片的数量决定了 Document 所在的分片编号，所以在创建 Index 之后，主分片数量不能改变。</p><p>在进行搜索时，每个分片产生的部分查询结果，也是由 ElasticSearch 集群负责进行聚合的，整个过程对于 Client 来说是透明的，如同操作一个单节点 ElasticSearch 实例。</p><p>单台服务器在实际使用中可能会因为这样或那样的原因发生故障，例如意外断电、系统崩溃、磁盘寿命到期等，这些故障是无法预知的。当发生故障时，该节点负责的分片就无法对外提供服务了，此时需要有一定的容错机制，在发生故障时保证此分片可以继续对外提供服务。</p><p>ElasticSearch 提供的副本功能就可以很好的解决这一问题，在副本模式下，每个分片分为主分片和副本分片，下图中一个 Index 有两个分片，p0 和 p1 是两个主分片，r0 和 r1 则是相应的副本分片：</p>`,23),q=s("p",null,"副本带来了两个好处：一个是在主分片出现故障的时候，可以通过副本继续提供服务（所以，分片副本一般不与主分片分配到同一个节点上）；另一个就是查询操作可以在分片副本上执行，因此可以提升整个 ElasticSearch 查询性能。",-1),h=s("h3",{id:"elasticsearch-写入流程简介",tabindex:"-1"},[n("ElasticSearch 写入流程简介 "),s("a",{class:"header-anchor",href:"#elasticsearch-写入流程简介","aria-label":'Permalink to "ElasticSearch 写入流程简介"'},"​")],-1),g=s("p",null,"分片是 ElasticSearch 中最小的数据分配单位，即一个分片总是作为一个整体被分配到集群中的某个节点。继续深入分片的结构会发现，一个分片是由多个 Segment 构成的，如下图所示：",-1),C=p('<p>Segment 是最小的数据存储单元，ElasticSearch 每隔一段时间会产生一个新的 Segment，用于写入最新的数据。旧的 Segment 是不可改变的，只能用于数据查询，是无法继续向其中写入数据的。</p><p>在很多分布式系统中都能看到类似的设计，这种设计有下面几点好处：</p><ul><li>旧 Segment 不支持修改，那么在读操作的时候就不需要加锁，省去了锁本身以及竞争锁相关的开销；</li><li>只有最新的 Segment 支持写入，可以实现顺序写入的效果，增加写入性能；</li><li>只有最新的 Segment 支持写入，可以更好的利用文件系统的 Cache 进行缓存，提高写入和查询性能。</li></ul><p>介绍完分片内部的 Segment 结构之后，接下来简单介绍一下 ElasticSearch 集群处理一个写入请求的大致过程：</p><p>写入请求会首先发往协调节点（Coordinating Node），之前提到，协调节点可能是 Client 连接上的任意一个节点，协调节点根据 Document Id 找到对应的主分片所在的节点。</p><p>接下来，由主分片所在节点处理写入请求，先是写入 Transaction Log 【很多分布式系统都有 WAL （Write-ahead Log）的概念，可以防止数据丢失】，而后将数据写入内存中，默认情况下每隔一秒会同步到 FileSystem Cache 中，Cache 中的数据在后续查询中已经可以被查询了，默认情况下每隔 30s，会将 FileSystem cache 中的数据写入磁盘中，当然为了降低数据丢失的概率，可以将这个时间缩短，甚至设置成同步的形式，相应地，写入性能也会受到影响。</p><p>写入其他副本的方式与写入主分片的方式类似，不再重复。需要注意的是，这里可以设置三种副本写入策略：</p><ul><li>quorum：默认为 quorum 策略，即超过半数副本写入成功之后，相应写入请求即可返回给客户端；</li><li>one ：one 策略是只要成功写入一个副本，即可向客户端返回；</li><li>all：all 策略是要成功写入所有副本之后，才能向客户端返回。</li></ul><p>ElasticSearch 的删除操作只是逻辑删除， 在每个 Segment 中都会维护一个 .del 文件，删除操作会将相应 Document 在 .del 文件中标记为已删除，查询时依然可以查到，但是会在结果中将这些&quot;已删除&quot;的 Document 过滤掉。</p><p>由于旧 Segment 文件无法修改，ElasticSearch 是无法直接进行修改的，而是引入了版本的概念，它会将旧版本的 Document 在 .del 文件中标记为已删除，而将新版本的 Document 索引到最新的 Segment 中。</p><p>另外，随着数据的不断写入，将产生很多小 Segment 文件，ElasticSearch 会定期进行 Segment Merge，从而减少碎片文件，降低文件打开数，提升 I/O 性能。在 Merge 过程中可以同时根据 .del 文件，将被标记的 Document 真正删除，此时才是真正的物理删除。</p><h3 id="elasticsearch-查询流程简介" tabindex="-1">ElasticSearch 查询流程简介 <a class="header-anchor" href="#elasticsearch-查询流程简介" aria-label="Permalink to &quot;ElasticSearch 查询流程简介&quot;">​</a></h3><p>读操作分为两个阶段：查询阶段和聚合提取阶段。在查询阶段中，协调节点接受到读请求，并将请求分配到相应的分片上（如果没有特殊指定，请求可能落到主分片，也有可能落到副本分片，由协调节点的负载均衡算法来确定）。默认情况下，每个分片会创建一个固定大小的优先级队列（其中只包含 Document Id 以及 Score，并不包含 Document 的具体内容），并以 Score 进行排序，返回给协调节点。如下图所示：</p>',13),D=p(`<p>在聚合阶段中，协调节点会将拿到的全部优先级队列进行合并排序，然后再通过 Document ID 查询对应的 Document ，并将这些 Document 组装到队列里返回给客户端。</p><h3 id="high-level-rest-client-入门" tabindex="-1">High Level REST Client 入门 <a class="header-anchor" href="#high-level-rest-client-入门" aria-label="Permalink to &quot;High Level REST Client 入门&quot;">​</a></h3><p>ElasticSearch 提供了两种 Java Client，分别是 Low Level REST Client 和 High Level REST Client，两者底层都是通过 HTTP 接口与 ElasticSearch 进行交互的：</p><ul><li>Low Level REST Client 需要使用方自己完成请求的序列化以及响应的反序列化；</li><li>High Level REST Client 是基于 Low Level REST Client 实现的，调用方直接使用特定的请求/响应对象即可完成数据的读写，完全屏蔽了底层协议的细节，无需再关心底层的序列化问题。另外， High Level REST Client 提供的 API 都会有同步和异步( async 开头)两个版本，其中同步方法直接返回相应的 response 对象，异步方法需要添加相应的 Listener 来监听并处理返回结果。</li></ul><p>SkyWalking 中提供的 ElasticSearchClient 是对 High Level REST Client 的封装，本课时将简单介绍 High Level REST Client 的基本操作，你可以将本课时作为 High Level REST Client 的入门参考，更加完整的 API 使用可以参考 ElasticSearch <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.5/java-rest-high.html" target="_blank" rel="noreferrer">官方文档</a>。</p><p>使用 High Level REST Client 的第一步就是初始化 RestHighLevelClient 对象，该过程底层会初始化线程池以及网络请求所需的资源，类似于 JDBC 中的 Connection 对象，相关 API 代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">RestHighLevelClient client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RestHighLevelClient</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">   RestClient.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">( </span><span style="color:#6A737D;">// 指定 ElasticSearch 集群各个节点的地址和端口号</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpHost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9200</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpHost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9201</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">)));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">RestHighLevelClient client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestHighLevelClient</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">   RestClient.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">( </span><span style="color:#6A737D;">// 指定 ElasticSearch 集群各个节点的地址和端口号</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9200</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9201</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">)));</span></span></code></pre></div><p>拿到 RestHighLevelClient 对象之后，我们就可以通过它发送 CreateIndexRequest 请求创建 Index，示例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建 CreateIndexRequest请求，该请求会创建一个名为&quot;skywalking&quot;的 Index，</span></span>
<span class="line"><span style="color:#6A737D;">// 注意，Index 的名称必须是小写</span></span>
<span class="line"><span style="color:#E1E4E8;">CreateIndexRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateIndexRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 在 CreateIndexRequest请求中设置 Index的 setting信息</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">settings</span><span style="color:#E1E4E8;">(Settings.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;index.number_of_shards&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 设置分片数量</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;index.number_of_replicas&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 设置副本数量</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 在 CreateIndexRequest请求中设置 Index的 Mapping信息，新建的 Index里有</span></span>
<span class="line"><span style="color:#6A737D;">// 个user和message两个字段，都为text类型，还有一个 age字段，为 integer类型</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">mapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type=text&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type=integer&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type=text&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置请求的超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">(TimeValue.</span><span style="color:#B392F0;">timeValueSeconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 CreateIndex请求</span></span>
<span class="line"><span style="color:#E1E4E8;">CreateIndexResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">indices</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#6A737D;">// 这里关心 CreateIndexResponse响应的 isAcknowledged字段值</span></span>
<span class="line"><span style="color:#6A737D;">// 该字段为 true则表示 ElasticSearch已处理该请求</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> acknowledged </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">isAcknowledged</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Assert.</span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(acknowledged);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 CreateIndexRequest请求，该请求会创建一个名为&quot;skywalking&quot;的 Index，</span></span>
<span class="line"><span style="color:#6A737D;">// 注意，Index 的名称必须是小写</span></span>
<span class="line"><span style="color:#24292E;">CreateIndexRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateIndexRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 在 CreateIndexRequest请求中设置 Index的 setting信息</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">settings</span><span style="color:#24292E;">(Settings.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;index.number_of_shards&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 设置分片数量</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;index.number_of_replicas&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 设置副本数量</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 在 CreateIndexRequest请求中设置 Index的 Mapping信息，新建的 Index里有</span></span>
<span class="line"><span style="color:#6A737D;">// 个user和message两个字段，都为text类型，还有一个 age字段，为 integer类型</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">mapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type=text&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type=integer&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type=text&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置请求的超时时间</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">(TimeValue.</span><span style="color:#6F42C1;">timeValueSeconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 CreateIndex请求</span></span>
<span class="line"><span style="color:#24292E;">CreateIndexResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">indices</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#6A737D;">// 这里关心 CreateIndexResponse响应的 isAcknowledged字段值</span></span>
<span class="line"><span style="color:#6A737D;">// 该字段为 true则表示 ElasticSearch已处理该请求</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> acknowledged </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">isAcknowledged</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Assert.</span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(acknowledged);</span></span></code></pre></div><p>完成 Index 的创建之后，我们就可以通过 IndexRequest 请求向其中写入 Document 数据了，需要使用 RestHighLevelClient 发送 IndexRequest 实现 Document 的写入：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建 IndexRequest请求，这里需要指定 Index名称</span></span>
<span class="line"><span style="color:#E1E4E8;">IndexRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IndexRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// Document Id，不指定的话，ElasticSearch 为其自动分配</span></span>
<span class="line"><span style="color:#6A737D;">// Document的具体内容</span></span>
<span class="line"><span style="color:#E1E4E8;">String jsonString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">user</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">kim</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">,&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">postDate</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">2013-01-30</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">,&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">age</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:29,&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">message</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">trying out Elasticsearch</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">(jsonString, XContentType.JSON);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 IndexRequest请求，不抛异常，就是创建成了</span></span>
<span class="line"><span style="color:#E1E4E8;">IndexResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(response);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下：</span></span>
<span class="line"><span style="color:#6A737D;">// IndexResponse[index=skywalking,type=type,id=1,version=1,</span></span>
<span class="line"><span style="color:#6A737D;">// result=created,seqNo=0,primaryTerm=1,shards=</span></span>
<span class="line"><span style="color:#6A737D;">// {&quot;total&quot;:3,&quot;successful&quot;:1,&quot;failed&quot;:0}]</span></span>
<span class="line"><span style="color:#6A737D;">// -----------------------</span></span>
<span class="line"><span style="color:#6A737D;">// IndexResponse 中包含写入的 Index名称、Document Id，Document 版本，创建的</span></span>
<span class="line"><span style="color:#6A737D;">// result等重要信息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 IndexRequest请求，这里需要指定 Index名称</span></span>
<span class="line"><span style="color:#24292E;">IndexRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IndexRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// Document Id，不指定的话，ElasticSearch 为其自动分配</span></span>
<span class="line"><span style="color:#6A737D;">// Document的具体内容</span></span>
<span class="line"><span style="color:#24292E;">String jsonString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">user</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">kim</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">,&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">postDate</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">2013-01-30</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">,&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">age</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:29,&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">message</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">trying out Elasticsearch</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">(jsonString, XContentType.JSON);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 IndexRequest请求，不抛异常，就是创建成了</span></span>
<span class="line"><span style="color:#24292E;">IndexResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(response);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下：</span></span>
<span class="line"><span style="color:#6A737D;">// IndexResponse[index=skywalking,type=type,id=1,version=1,</span></span>
<span class="line"><span style="color:#6A737D;">// result=created,seqNo=0,primaryTerm=1,shards=</span></span>
<span class="line"><span style="color:#6A737D;">// {&quot;total&quot;:3,&quot;successful&quot;:1,&quot;failed&quot;:0}]</span></span>
<span class="line"><span style="color:#6A737D;">// -----------------------</span></span>
<span class="line"><span style="color:#6A737D;">// IndexResponse 中包含写入的 Index名称、Document Id，Document 版本，创建的</span></span>
<span class="line"><span style="color:#6A737D;">// result等重要信息</span></span></code></pre></div><p>在明确知道 Document 的 Id 以及所属的 Index 时，我们可以通过 GetRequest 请求查询该 Document 内容，相关代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建 GetRequest请求，这里指定 Index、type以及 Document Id，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在高版本中，type参数已经消失</span></span>
<span class="line"><span style="color:#E1E4E8;">    GetRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发送 GetRequest请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    GetResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从 GetResponse响应中可以拿到相应的 Document以及相关信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    String index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getIndex</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取 Index名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">// 获取 Document Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.</span><span style="color:#B392F0;">isExists</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 检查 Document是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Document版本</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;version:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> version);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取不同格式的 Document内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        String sourceAsString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getSourceAsString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sourceAsString:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> sourceAsString);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; sourceAsMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getSourceAsMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sourceAsMap:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> sourceAsMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] sourceAsBytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getSourceAsBytes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 按照字段进行遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DocumentField</span><span style="color:#E1E4E8;">&gt; fields </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getFields</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DocumentField</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                 fields.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            DocumentField documentField </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> documentField.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> documentField.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Document Not Exist!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (ElasticsearchParseException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// Index不存在的异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> RestStatus.NOT_FOUND) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can find index&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下：</span></span>
<span class="line"><span style="color:#6A737D;">// version:1</span></span>
<span class="line"><span style="color:#6A737D;">// sourceAsString:{&quot;user&quot;:&quot;kim&quot;,&quot;postDate&quot;:&quot;2013-01-30&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;age&quot;:29,&quot;message&quot;:&quot;trying out Elasticsearch&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">// sourceAsMap:{postDate=2013-01-30, message=trying out Elasticsearch, </span></span>
<span class="line"><span style="color:#6A737D;">// user=kim, age=29}</span></span>
<span class="line"><span style="color:#6A737D;">// _seq_no:0</span></span>
<span class="line"><span style="color:#6A737D;">// _primary_term:1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建 GetRequest请求，这里指定 Index、type以及 Document Id，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在高版本中，type参数已经消失</span></span>
<span class="line"><span style="color:#24292E;">    GetRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发送 GetRequest请求</span></span>
<span class="line"><span style="color:#24292E;">    GetResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从 GetResponse响应中可以拿到相应的 Document以及相关信息</span></span>
<span class="line"><span style="color:#24292E;">    String index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getIndex</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取 Index名称</span></span>
<span class="line"><span style="color:#24292E;">    String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">// 获取 Document Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.</span><span style="color:#6F42C1;">isExists</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 检查 Document是否存在</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Document版本</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;version:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> version);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取不同格式的 Document内容</span></span>
<span class="line"><span style="color:#24292E;">        String sourceAsString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getSourceAsString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sourceAsString:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sourceAsString);</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; sourceAsMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getSourceAsMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sourceAsMap:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sourceAsMap);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] sourceAsBytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getSourceAsBytes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 按照字段进行遍历</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DocumentField</span><span style="color:#24292E;">&gt; fields </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getFields</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DocumentField</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                 fields.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            DocumentField documentField </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> documentField.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            Object value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> documentField.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Document Not Exist!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (ElasticsearchParseException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// Index不存在的异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> RestStatus.NOT_FOUND) {</span></span>
<span class="line"><span style="color:#24292E;">        System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Can find index&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下：</span></span>
<span class="line"><span style="color:#6A737D;">// version:1</span></span>
<span class="line"><span style="color:#6A737D;">// sourceAsString:{&quot;user&quot;:&quot;kim&quot;,&quot;postDate&quot;:&quot;2013-01-30&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;age&quot;:29,&quot;message&quot;:&quot;trying out Elasticsearch&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">// sourceAsMap:{postDate=2013-01-30, message=trying out Elasticsearch, </span></span>
<span class="line"><span style="color:#6A737D;">// user=kim, age=29}</span></span>
<span class="line"><span style="color:#6A737D;">// _seq_no:0</span></span>
<span class="line"><span style="color:#6A737D;">// _primary_term:1</span></span></code></pre></div><p>有时候，我们只想检测某个 Document 是否存在，并不想查询其具体内容，可以通过 exists() 方法实现。该方法发送的还是 GetRequest 请求，但我们可以指明此次请求不查询 Document 的具体内容，在 Document 较大的时候可以节省带宽，具体使用方式如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">GetRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 不查询 &quot;_source&quot;字段以及其他字段</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">fetchSourceContext</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FetchSourceContext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">storedFields</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;_none_&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 通过exists()方法发送 GetRequest</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> exists </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">Assert.</span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(exists);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">GetRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 不查询 &quot;_source&quot;字段以及其他字段</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">fetchSourceContext</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FetchSourceContext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">storedFields</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_none_&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 通过exists()方法发送 GetRequest</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> exists </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">Assert.</span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(exists);</span></span></code></pre></div><p>删除一个 Document 的时候，使用的是 DeleteRequest，其中需要指定 Document Id 以及所属 Index 即可，使用方式如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DeleteRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DeleteRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">DeleteResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(response);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// DeleteResponse[index=skywalking,type=type,id=1,version=5,</span></span>
<span class="line"><span style="color:#6A737D;">// result=deleted,shards=ShardInfo{total=3, successful=1,</span></span>
<span class="line"><span style="color:#6A737D;">// failures=[]}]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DeleteRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DeleteRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">DeleteResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(response);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// DeleteResponse[index=skywalking,type=type,id=1,version=5,</span></span>
<span class="line"><span style="color:#6A737D;">// result=deleted,shards=ShardInfo{total=3, successful=1,</span></span>
<span class="line"><span style="color:#6A737D;">// failures=[]}]</span></span></code></pre></div><p>最后来看看更新操作，使用的是 UpdateRequest，示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">XContentBuilder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> XContentFactory.</span><span style="color:#B392F0;">jsonBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">builder.</span><span style="color:#B392F0;">startObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    builder.</span><span style="color:#B392F0;">field</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    builder.</span><span style="color:#B392F0;">field</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;update Test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">builder.</span><span style="color:#B392F0;">endObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 UpdateReques请求</span></span>
<span class="line"><span style="color:#E1E4E8;">UpdateRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">doc</span><span style="color:#E1E4E8;">(builder);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">UpdateResponse updateResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(updateResponse);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// UpdateResponse[index=skywalking,type=type,id=1,version=2,seqNo=1,</span></span>
<span class="line"><span style="color:#6A737D;">// primaryTerm=1,result=updated,shards=ShardInfo{total=3, </span></span>
<span class="line"><span style="color:#6A737D;">// successful=1, failures=[]}]</span></span>
<span class="line"><span style="color:#6A737D;">// 注意，更新之后 Document version 会增加</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">XContentBuilder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> XContentFactory.</span><span style="color:#6F42C1;">jsonBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">builder.</span><span style="color:#6F42C1;">startObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    builder.</span><span style="color:#6F42C1;">field</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    builder.</span><span style="color:#6F42C1;">field</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;update Test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">builder.</span><span style="color:#6F42C1;">endObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 UpdateReques请求</span></span>
<span class="line"><span style="color:#24292E;">UpdateRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">doc</span><span style="color:#24292E;">(builder);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#24292E;">UpdateResponse updateResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(updateResponse);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// UpdateResponse[index=skywalking,type=type,id=1,version=2,seqNo=1,</span></span>
<span class="line"><span style="color:#6A737D;">// primaryTerm=1,result=updated,shards=ShardInfo{total=3, </span></span>
<span class="line"><span style="color:#6A737D;">// successful=1, failures=[]}]</span></span>
<span class="line"><span style="color:#6A737D;">// 注意，更新之后 Document version 会增加</span></span></code></pre></div><p>除了通过 GetRequest 请求根据 Document Id 进行查询之外，我们还可以通过 SearchRequest 请求进行检索，在检索请求里面我们可以通过 QueryBuilder 构造具体的检索条件，下面是一个简单的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建 SearchRequest请求</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchRequest searchRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 SearchSourceBuilder,用来构造检索条件</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchSourceBuilder searchSourceBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchSourceBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 通过id进行检索，这里查询 Id为1和2的两个Document</span></span>
<span class="line"><span style="color:#E1E4E8;">searchSourceBuilder.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">idsQuery</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addIds</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">searchRequest.</span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">(searchSourceBuilder);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 SearchRequest 请求</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchResponse searchResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(searchRequest);</span></span>
<span class="line"><span style="color:#6A737D;">// 遍历 SearchHit</span></span>
<span class="line"><span style="color:#F97583;">SearchHit</span><span style="color:#E1E4E8;">[] searchHits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> searchResponse.</span><span style="color:#B392F0;">getHits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHits</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SearchHit searchHit </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> searchHits) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(searchHit.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       searchHit.</span><span style="color:#B392F0;">getSourceAsMap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// 1:{postDate=2013-01-30, message=update Test, user=kim, age=31}</span></span>
<span class="line"><span style="color:#6A737D;">// 2:{postDate=2020-01-30, message=Test Message, user=Tom, age=51}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 SearchRequest请求</span></span>
<span class="line"><span style="color:#24292E;">SearchRequest searchRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 SearchSourceBuilder,用来构造检索条件</span></span>
<span class="line"><span style="color:#24292E;">SearchSourceBuilder searchSourceBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchSourceBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 通过id进行检索，这里查询 Id为1和2的两个Document</span></span>
<span class="line"><span style="color:#24292E;">searchSourceBuilder.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">idsQuery</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addIds</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">searchRequest.</span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">(searchSourceBuilder);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 SearchRequest 请求</span></span>
<span class="line"><span style="color:#24292E;">SearchResponse searchResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(searchRequest);</span></span>
<span class="line"><span style="color:#6A737D;">// 遍历 SearchHit</span></span>
<span class="line"><span style="color:#D73A49;">SearchHit</span><span style="color:#24292E;">[] searchHits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> searchResponse.</span><span style="color:#6F42C1;">getHits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHits</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SearchHit searchHit </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> searchHits) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(searchHit.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       searchHit.</span><span style="color:#6F42C1;">getSourceAsMap</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// 1:{postDate=2013-01-30, message=update Test, user=kim, age=31}</span></span>
<span class="line"><span style="color:#6A737D;">// 2:{postDate=2020-01-30, message=Test Message, user=Tom, age=51}</span></span></code></pre></div><p>按照 Document Id 进行查询之外，ElasticSearch 还提供了一套 Query DSL 语言帮助我们构造复杂的查询条件，查询条件主要分为下面两部分：</p><ul><li><strong>Leaf 子句</strong> ：Leaf 子句一般是针对某个字段的查询，例如： <ul><li><strong>Match Query</strong> ：最常用的 Full Text Query 。Match Query 既能处理全文字段，又能处理精确字段（可参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/query-dsl-match-query.html" target="_blank" rel="noreferrer">Match Query 的官方文档</a>）。</li><li><strong>Term Query</strong> ：精确匹配字段值的查询（可参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/query-dsl-term-query.html" target="_blank" rel="noreferrer">Term Query 的官方文档</a>。</li><li><strong>Range Query</strong> ：针对一个字段的范围查询（可参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/query-dsl-range-query.html" target="_blank" rel="noreferrer">Range Query 的官方文档</a>。</li></ul></li><li><strong>Compound 子句</strong> ：Conpound 子句是由一个或多个 Leaf 子句或 Compound 子句构成的，例如 Bool Query，包含多个返回 Boolean 值的子句（可参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/query-dsl-bool-query.html" target="_blank" rel="noreferrer">Bool Query 的官方文档</a>）。</li></ul><p>下面使用 ElasticSearch Query DSL 实现一个复杂查询：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建 SearchRequest请求，查询的Index为skywalking</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchRequest searchRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SearchRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skywalking&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 SearchSourceBuilder,用来构造检索条件</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchSourceBuilder sourceBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       SearchSourceBuilder.</span><span style="color:#B392F0;">searchSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 BoolQueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">BoolQueryBuilder boolQueryBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilders.</span><span style="color:#B392F0;">boolQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 符合条件的 Document中 age字段的值必须位于[10,40]这个范围</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">QueryBuilder</span><span style="color:#E1E4E8;">&gt; mustQueryList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> boolQueryBuilder.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">mustQueryList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">rangeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">gte</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">mustQueryList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(QueryBuilders.</span><span style="color:#B392F0;">rangeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">lte</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 符合条件的 Document中 user字段的值必须为kim</span></span>
<span class="line"><span style="color:#E1E4E8;">boolQueryBuilder.</span><span style="color:#B392F0;">must</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    QueryBuilders.</span><span style="color:#B392F0;">termQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;kim&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">sourceBuilder.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(boolQueryBuilder);</span></span>
<span class="line"><span style="color:#E1E4E8;">searchRequest.</span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">(sourceBuilder);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 SearchRequest 请求</span></span>
<span class="line"><span style="color:#E1E4E8;">SearchResponse searchResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(searchRequest);</span></span>
<span class="line"><span style="color:#F97583;">SearchHit</span><span style="color:#E1E4E8;">[] searchHits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> searchResponse.</span><span style="color:#B392F0;">getHits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHits</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SearchHit searchHit </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> searchHits) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(searchHit.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       searchHit.</span><span style="color:#B392F0;">getSourceAsMap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出:</span></span>
<span class="line"><span style="color:#6A737D;">// 1:{postDate=2013-01-30, message=update Test, user=kim, age=31}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 SearchRequest请求，查询的Index为skywalking</span></span>
<span class="line"><span style="color:#24292E;">SearchRequest searchRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SearchRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skywalking&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 通过 SearchSourceBuilder,用来构造检索条件</span></span>
<span class="line"><span style="color:#24292E;">SearchSourceBuilder sourceBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       SearchSourceBuilder.</span><span style="color:#6F42C1;">searchSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 BoolQueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">BoolQueryBuilder boolQueryBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilders.</span><span style="color:#6F42C1;">boolQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 符合条件的 Document中 age字段的值必须位于[10,40]这个范围</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">QueryBuilder</span><span style="color:#24292E;">&gt; mustQueryList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boolQueryBuilder.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">mustQueryList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">rangeQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">gte</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">mustQueryList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(QueryBuilders.</span><span style="color:#6F42C1;">rangeQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">lte</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 符合条件的 Document中 user字段的值必须为kim</span></span>
<span class="line"><span style="color:#24292E;">boolQueryBuilder.</span><span style="color:#6F42C1;">must</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    QueryBuilders.</span><span style="color:#6F42C1;">termQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;kim&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">sourceBuilder.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(boolQueryBuilder);</span></span>
<span class="line"><span style="color:#24292E;">searchRequest.</span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">(sourceBuilder);</span></span>
<span class="line"><span style="color:#6A737D;">// 发送 SearchRequest 请求</span></span>
<span class="line"><span style="color:#24292E;">SearchResponse searchResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(searchRequest);</span></span>
<span class="line"><span style="color:#D73A49;">SearchHit</span><span style="color:#24292E;">[] searchHits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> searchResponse.</span><span style="color:#6F42C1;">getHits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHits</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SearchHit searchHit </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> searchHits) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(searchHit.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       searchHit.</span><span style="color:#6F42C1;">getSourceAsMap</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出:</span></span>
<span class="line"><span style="color:#6A737D;">// 1:{postDate=2013-01-30, message=update Test, user=kim, age=31}</span></span></code></pre></div><p>示例中匹配的 Document 中 age 字段的值位于[10,40]这个范围中，且 user 字段值为 &quot;kim&quot;，类似于 SQL 语句中的【age &gt;=10 and age &lt;=40 and user == &quot;kim&quot;】语句。</p><p>High Level REST Client 还提供了批量操作的 API ------ BulkProcessor 会将多个请求积攒成一个 bulk，然后批量发给 ElasticSearch 集群进行处理。使用 BulkProcessor 批量操作可以减少请求发送次数，提高请求消息的有效负载，降低 ElasticSearch 集群压力。</p><p>BulkProcessor 中有几个核心参数需要设置。</p><ul><li>setBulkActions() 方法：设置每个 BulkRequest 包含的请求数量，默认值为 1000；</li><li>setBulkSize()：设置每个 BulkRequest 的大小，默认值为 5MB；</li><li>setFlushInterval()：设置两次发送 BulkRequest 执行的时间间隔。没有默认值；</li><li>setConcurrentRequests()：设置并发请求数。默认是 1，表示允许执行 1 个并发请求，积攒 BulkRequest 和发送 bulk 是异步的，其数值表示发送 bulk 的并发线程数（取值可以是任意大于 0 的数字），若设置为 0 表示二者同步；</li><li>setBackoffPolicy()：设置最大重试次数和重试周期。默认最大重试次数为 8 次，初始延迟是 50 ms。</li></ul><p>下面来看创建 BulkProcessor 的具体流程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 该 Listener可以监听每个 BulkRequest请求相关事件</span></span>
<span class="line"><span style="color:#E1E4E8;">BulkProcessor.Listener listener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> BulkProcessor.</span><span style="color:#B392F0;">Listener</span><span style="color:#E1E4E8;">() {...}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 BulkProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">BulkProcessor bulkProcessor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BulkProcessor.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">(client</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">bulkAsync,</span></span>
<span class="line"><span style="color:#E1E4E8;">         listener).</span><span style="color:#B392F0;">setBulkActions</span><span style="color:#E1E4E8;">(bulkActions) </span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">setBulkSize</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ByteSizeValue</span><span style="color:#E1E4E8;">(bulkSize, ByteSizeUnit.MB))</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">setFlushInterval</span><span style="color:#E1E4E8;">(TimeValue.</span><span style="color:#B392F0;">timeValueSeconds</span><span style="color:#E1E4E8;">(flushInterval))</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">setConcurrentRequests</span><span style="color:#E1E4E8;">(concurrentRequests)</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">setBackoffPolicy</span><span style="color:#E1E4E8;">(BackoffPolicy.</span><span style="color:#B392F0;">exponentialBackoff</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            TimeValue.</span><span style="color:#B392F0;">timeValueMillis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 该 Listener可以监听每个 BulkRequest请求相关事件</span></span>
<span class="line"><span style="color:#24292E;">BulkProcessor.Listener listener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> BulkProcessor.</span><span style="color:#6F42C1;">Listener</span><span style="color:#24292E;">() {...}</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 BulkProcessor</span></span>
<span class="line"><span style="color:#24292E;">BulkProcessor bulkProcessor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BulkProcessor.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">(client</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">bulkAsync,</span></span>
<span class="line"><span style="color:#24292E;">         listener).</span><span style="color:#6F42C1;">setBulkActions</span><span style="color:#24292E;">(bulkActions) </span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">setBulkSize</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteSizeValue</span><span style="color:#24292E;">(bulkSize, ByteSizeUnit.MB))</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">setFlushInterval</span><span style="color:#24292E;">(TimeValue.</span><span style="color:#6F42C1;">timeValueSeconds</span><span style="color:#24292E;">(flushInterval))</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">setConcurrentRequests</span><span style="color:#24292E;">(concurrentRequests)</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">setBackoffPolicy</span><span style="color:#24292E;">(BackoffPolicy.</span><span style="color:#6F42C1;">exponentialBackoff</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            TimeValue.</span><span style="color:#6F42C1;">timeValueMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这里添加的 BulkProcessor.Listener 实现如下，其中提供了三个方法分别监听 BulkRequest 请求触发的不同事件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> BulkProcessor.</span><span style="color:#B392F0;">Listener</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeBulk</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> executionId, BulkRequest request) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      ... </span><span style="color:#6A737D;">// 在 BulkRequest请求发送之前，会触发该方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterBulk</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> executionId, BulkRequest request,</span></span>
<span class="line"><span style="color:#E1E4E8;">      BulkResponse response) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      ... </span><span style="color:#6A737D;">// 在收到 BulkResponse响应时触发该方法，这里可以通过 </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// response.hasFailures()方法判断请求是否失败</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterBulk</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> executionId, BulkRequest request,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Throwable failure) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 在 BulkRequest请求抛出异常的时候，会触发该方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> BulkProcessor.</span><span style="color:#6F42C1;">Listener</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeBulk</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> executionId, BulkRequest request) { </span></span>
<span class="line"><span style="color:#24292E;">      ... </span><span style="color:#6A737D;">// 在 BulkRequest请求发送之前，会触发该方法</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterBulk</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> executionId, BulkRequest request,</span></span>
<span class="line"><span style="color:#24292E;">      BulkResponse response) { </span></span>
<span class="line"><span style="color:#24292E;">      ... </span><span style="color:#6A737D;">// 在收到 BulkResponse响应时触发该方法，这里可以通过 </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// response.hasFailures()方法判断请求是否失败</span></span>
<span class="line"><span style="color:#24292E;">   } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterBulk</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> executionId, BulkRequest request,</span></span>
<span class="line"><span style="color:#24292E;">        Throwable failure) { </span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 在 BulkRequest请求抛出异常的时候，会触发该方法</span></span>
<span class="line"><span style="color:#24292E;">   } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>之后我们就可以通过 BulkProcessor.add() 方法向其中添加请求，这些请求最终会积攒成一个 BulkRequest 请求发出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">bulkProcessor.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IndexRequest</span><span style="color:#E1E4E8;">(...));</span></span>
<span class="line"><span style="color:#E1E4E8;">bulkProcessor.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DeleteRequest</span><span style="color:#E1E4E8;">(...));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bulkProcessor.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IndexRequest</span><span style="color:#24292E;">(...));</span></span>
<span class="line"><span style="color:#24292E;">bulkProcessor.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DeleteRequest</span><span style="color:#24292E;">(...));</span></span></code></pre></div><p>一般情况下，我们只需要在全局维护一个 BulkProcessor 对象即可，在应用程序关闭之前需要通过 awaitClose() 方法等待全部请求发送出去后再关闭 BulkProcessor 对象。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时首先介绍了 ElasticSearch 中的核心概念，为了便于理解，将这些概念与数据库进行了对比。接下来介绍了 ElasticSearch 集群中各个节点的角色，以及 ElasticSearch 引入分片和副本功能要解决的问题。之后对 ElasticSearch 读写数据的核心流程进行概述。最后，通过示例的方式介绍了 ElasticSearch High Level REST Client 的基本使用方式。在后续课时讲解 SkyWalking OAP 实现时，你会再次看到 High Level REST Client 的身影。</p>`,38);function B(A,m,S,k,v,x){const a=e("Image");return t(),c("div",null,[E,y,i,u,F,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kASATlQvAAApiOhG1PE953.png"}),n(),d,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kASAIlnSAAA2g6WmR_U791.png"}),n(),q,h,g,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kASAPMPyAABiTVfbZ1w517.png"}),n(),C,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kASAVIIqAADyYyiGJl0221.png"}),n(),D])}const I=o(r,[["render",B]]);export{b as __pageData,I as default};
