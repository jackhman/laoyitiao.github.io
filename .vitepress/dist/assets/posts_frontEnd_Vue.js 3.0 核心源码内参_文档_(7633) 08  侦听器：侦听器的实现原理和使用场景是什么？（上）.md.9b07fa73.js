import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.d3daa342.js";const F=JSON.parse('{"title":"08侦听器：侦听器的实现原理和使用场景是什么？（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7633) 08  侦听器：侦听器的实现原理和使用场景是什么？（上）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7633) 08  侦听器：侦听器的实现原理和使用场景是什么？（上）.md","lastUpdated":1696682708000}'),p={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7633) 08  侦听器：侦听器的实现原理和使用场景是什么？（上）.md"},o=l(`<h1 id="_08侦听器-侦听器的实现原理和使用场景是什么-上" tabindex="-1">08侦听器：侦听器的实现原理和使用场景是什么？（上） <a class="header-anchor" href="#_08侦听器-侦听器的实现原理和使用场景是什么-上" aria-label="Permalink to &quot;08侦听器：侦听器的实现原理和使用场景是什么？（上）&quot;">​</a></h1><p>在平时的开发工作中，我们经常使用侦听器帮助我们去观察某个数据的变化然后去执行一段逻辑。</p><p>在 Vue.js 2.x 中，你可以通过 watch 选项去初始化一个侦听器，称作 watcher：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  watch</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">(newVal, oldVal) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;new: %s,00 old: %s&#39;</span><span style="color:#E1E4E8;">, newVal, oldVal) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  watch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">(newVal, oldVal) { </span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;new: %s,00 old: %s&#39;</span><span style="color:#24292E;">, newVal, oldVal) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span></code></pre></div><p>当然你也可以通过 $watch API 去创建一个侦听器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> unwatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vm.</span><span style="color:#B392F0;">$watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(newVal, oldVal) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;new: %s, old: %s&#39;</span><span style="color:#E1E4E8;">, newVal, oldVal) </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> unwatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vm.</span><span style="color:#6F42C1;">$watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(newVal, oldVal) { </span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;new: %s, old: %s&#39;</span><span style="color:#24292E;">, newVal, oldVal) </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>与 watch 选项不同，通过 $watch API 创建的侦听器 watcher 会返回一个 unwatch 函数，你可以随时执行它来停止这个 watcher 对数据的侦听，而对于 watch 选项创建的侦听器，它会随着组件的销毁而停止对数据的侦听。</p><p>在 Vue.js 3.0 中，虽然你仍可以使用 watch 选项，但针对 Composition API，Vue.js 3.0 提供了 watch API 来实现侦听器的效果。</p><p>那么，接下来就随我一起来学习 watch API 吧。</p><h3 id="watch-api-的用法" tabindex="-1">watch API 的用法 <a class="header-anchor" href="#watch-api-的用法" aria-label="Permalink to &quot;watch API 的用法&quot;">​</a></h3><p>我们先来看 Vue.js 3.0 中 watch API 有哪些用法。</p><p>1.watch API 可以<strong>侦听一个 getter 函数</strong>，但是它必须返回一个响应式对象，当该响应式对象更新后，会执行对应的回调函数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> state = reactive({ count: </span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> }) </span></span>
<span class="line"><span style="color:#E1E4E8;">watch(() =&gt; state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当 state.count 更新，会触发此回调函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> state = reactive({ count: </span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> }) </span></span>
<span class="line"><span style="color:#24292E;">watch(() =&gt; state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当 state.count 更新，会触发此回调函数 </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>2.watch API 也可以直接<strong>侦听一个响应式对象</strong>，当响应式对象更新后，会执行对应的回调函数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> count = ref(</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">watch(count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当 count.value 更新，会触发此回调函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> count = ref(</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">watch(count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当 count.value 更新，会触发此回调函数 </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>3.watch API 还可以直接<strong>侦听多个响应式对象</strong>，任意一个响应式对象更新后，就会执行对应的回调函数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> count = ref(</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> count2 = ref(</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">watch([count, count2], ([count, count2], [prevCount, prevCount2]) =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当 count.value 或者 count2.value 更新，会触发此回调函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> count = ref(</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> count2 = ref(</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">watch([count, count2], ([count, count2], [prevCount, prevCount2]) =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当 count.value 或者 count2.value 更新，会触发此回调函数 </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="watch-api-实现原理" tabindex="-1">watch API 实现原理 <a class="header-anchor" href="#watch-api-实现原理" aria-label="Permalink to &quot;watch API 实现原理&quot;">​</a></h3><p>侦听器的言下之意就是，当侦听的对象或者函数发生了变化则自动执行某个回调函数，这和我们前面说过的副作用函数 effect 很像， 那它的内部实现是不是依赖了 effect 呢？带着这个疑问，我们来探究 watch API 的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(source, cb, options) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isFunction</span><span style="color:#E1E4E8;">(cb)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(\`\\\`</span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(fn, options</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)\\\` signature has been moved to a separate API. \` </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      \`Use \\\`</span><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(fn, options</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)\\\` instead. \\\`watch\\\` now only \` </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      \`supports \\\`</span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(source, cb, options</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) signature.\`) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doWatch</span><span style="color:#E1E4E8;">(source, cb, options) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">doWatch</span><span style="color:#E1E4E8;">(source, cb, { immediate, deep, flush, onTrack, onTrigger } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EMPTY_OBJ) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 标准化 source </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 构造 applyCb 回调函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建 scheduler 时序执行函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建 effect 副作用函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回侦听器销毁函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(source, cb, options) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isFunction</span><span style="color:#24292E;">(cb)) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(\`\\\`</span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(fn, options</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)\\\` signature has been moved to a separate API. \` </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      \`Use \\\`</span><span style="color:#6F42C1;">watchEffect</span><span style="color:#24292E;">(fn, options</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)\\\` instead. \\\`watch\\\` now only \` </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      \`supports \\\`</span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(source, cb, options</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) signature.\`) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doWatch</span><span style="color:#24292E;">(source, cb, options) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">doWatch</span><span style="color:#24292E;">(source, cb, { immediate, deep, flush, onTrack, onTrigger } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EMPTY_OBJ) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 标准化 source </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 构造 applyCb 回调函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建 scheduler 时序执行函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建 effect 副作用函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回侦听器销毁函数 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从代码中可以看到，watch 函数内部调用了 doWatch 函数，调用前会在非生产环境下判断第二个参数 cb 是不是一个函数，如果不是则会报警告以告诉用户应该使用 watchEffect(fn, options) API，watchEffect API 也是侦听器相关的 API，稍后我们会详细介绍。</p><p>这个 doWatch 函数很长，所以我只贴出了需要理解的部分，我用注释将这个函数的实现逻辑拆解成了几个步骤。可以看到，内部确实创建了 effect 副作用函数。接下来，就随我一步步看它具体做了哪些事情吧。</p><h4 id="标准化-source" tabindex="-1">标准化 source <a class="header-anchor" href="#标准化-source" aria-label="Permalink to &quot;标准化 source&quot;">​</a></h4><p>我们先来看watch 函数的第一个参数 source。</p><p>通过前文知道 source 可以是 getter 函数，也可以是响应式对象甚至是响应式对象数组，所以我们需要标准化 source，这是<strong>标准化 source 的流程</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// source 不合法的时候会报警告 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> warnInvalidSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (s) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(\`Invalid watch source</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`, s, \`A watch source can only be a getter</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">effect function, a ref, \` </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    \`a reactive object, or an array of these types.\`) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 当前组件实例 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentInstance </span></span>
<span class="line"><span style="color:#E1E4E8;">let getter </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(source)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> source.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRef</span><span style="color:#E1E4E8;">(s)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.value </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isReactive</span><span style="color:#E1E4E8;">(s)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(s) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFunction</span><span style="color:#E1E4E8;">(s)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(s, instance, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* WATCH_GETTER */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      (p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">warnInvalidSource</span><span style="color:#E1E4E8;">(s) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  }) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRef</span><span style="color:#E1E4E8;">(source)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> source.value </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isReactive</span><span style="color:#E1E4E8;">(source)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> source </span></span>
<span class="line"><span style="color:#E1E4E8;">  deep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFunction</span><span style="color:#E1E4E8;">(source)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cb) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// getter with cb </span></span>
<span class="line"><span style="color:#E1E4E8;">    getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(source, instance, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* WATCH_GETTER */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// watchEffect 的逻辑 </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NOOP </span></span>
<span class="line"><span style="color:#E1E4E8;">  (p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">warnInvalidSource</span><span style="color:#E1E4E8;">(source) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cb </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> deep) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> baseGetter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getter </span></span>
<span class="line"><span style="color:#E1E4E8;">  getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">traverse</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">baseGetter</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// source 不合法的时候会报警告 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> warnInvalidSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (s) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(\`Invalid watch source</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`, s, \`A watch source can only be a getter</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">effect function, a ref, \` </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    \`a reactive object, or an array of these types.\`) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 当前组件实例 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentInstance </span></span>
<span class="line"><span style="color:#24292E;">let getter </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(source)) { </span></span>
<span class="line"><span style="color:#24292E;">  getter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> source.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isRef</span><span style="color:#24292E;">(s)) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.value </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isReactive</span><span style="color:#24292E;">(s)) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(s) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isFunction</span><span style="color:#24292E;">(s)) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(s, instance, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* WATCH_GETTER */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      (p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">warnInvalidSource</span><span style="color:#24292E;">(s) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  }) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isRef</span><span style="color:#24292E;">(source)) { </span></span>
<span class="line"><span style="color:#24292E;">  getter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> source.value </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isReactive</span><span style="color:#24292E;">(source)) { </span></span>
<span class="line"><span style="color:#24292E;">  getter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> source </span></span>
<span class="line"><span style="color:#24292E;">  deep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isFunction</span><span style="color:#24292E;">(source)) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cb) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// getter with cb </span></span>
<span class="line"><span style="color:#24292E;">    getter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(source, instance, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* WATCH_GETTER */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// watchEffect 的逻辑 </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  getter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NOOP </span></span>
<span class="line"><span style="color:#24292E;">  (p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">warnInvalidSource</span><span style="color:#24292E;">(source) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cb </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> deep) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> baseGetter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> getter </span></span>
<span class="line"><span style="color:#24292E;">  getter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">baseGetter</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其实，source 标准化主要是根据 source 的类型，将其变成 <s>标准成</s> getter 函数。具体来说：</p><ol><li><p>如果 source 是 ref 对象，则创建一个访问 source.value 的 getter 函数;</p></li><li><p>如果 source 是 reactive 对象，则创建一个访问 source 的 getter 函数，并设置 deep 为 true（deep 的作用我稍后会说）;</p></li><li><p>如果 source 是一个函数，则会进一步判断第二个参数 cb 是否存在，对于 watch API 来说，cb 是一定存在且是一个回调函数，这种情况下，getter 就是一个简单的对 source 函数封装的函数。</p></li></ol><p>如果 source 不满足上述条件，则在非生产环境下报警告，提示 source 类型不合法。</p><p>我们来看一下最终标准化生成的 getter 函数，它会返回一个响应式对象，在后续创建 effect runner 副作用函数需要用到，每次执行 runner 就会把 getter 函数返回的响应式对象作为 watcher 求值的结果，effect runner 的创建流程我们后续会详细分析，这里不需要深入了解。</p><p>最后我们来关注一下 deep 为 true 的情况。此时，我们会发现生成的 getter 函数会被 traverse 函数包装一层。traverse 函数的实现很简单，即通过递归的方式访问 value 的每一个子属性。那么，为什么要递归访问每一个子属性呢？</p><p>其实 deep 属于 watcher 的一个配置选项，Vue.js 2.x 也支持，表面含义是深度侦听，实际上是通过遍历对象的每一个子属性来实现。举个例子你就明白了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> state = reactive({ </span></span>
<span class="line"><span style="color:#E1E4E8;">  count: { </span></span>
<span class="line"><span style="color:#E1E4E8;">    a: { </span></span>
<span class="line"><span style="color:#E1E4E8;">      b: </span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">watch(state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">  console.log(count) </span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">state.count.a.b = </span><span style="color:#FDAEB7;font-style:italic;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { reactive, watch } from &#39;vue&#39; </span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> state = reactive({ </span></span>
<span class="line"><span style="color:#24292E;">  count: { </span></span>
<span class="line"><span style="color:#24292E;">    a: { </span></span>
<span class="line"><span style="color:#24292E;">      b: </span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">watch(state.count, (count, prevCount) =&gt; { </span></span>
<span class="line"><span style="color:#24292E;">  console.log(count) </span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">state.count.a.b = </span><span style="color:#B31D28;font-style:italic;">2</span></span></code></pre></div><p>这里，我们利用 reactive API 创建了一个嵌套层级较深的响应式对象 state，然后再调用 watch API 侦听 state.count 的变化。接下来我们修改内部属性 state.count.a.b 的值，你会发现 watcher 的回调函数执行了，为什么会执行呢？</p><p>学过响应式章节，我们知道只有对象属性先被访问触发了依赖收集，再去修改这个属性，才可以通知对应的依赖更新。而从上述业务代码来看，我们修改 state.count.a.b 的值时并没有访问它 ，但还是触发了 watcher 的回调函数。</p><p>根本原因是，当我们执行 watch 函数的时候，我们知道如果侦听的是一个 reactive 对象，那么内部会设置 deep 为 true，然后执行 traverse 去递归访问对象深层子属性，这个时候就会访问 state.count.a.b 触发依赖收集，这里收集的依赖是 watcher 内部创建的 effect runner。因此，当我们再去修改 state.count.a.b 的时候，就会通知这个 effect ，所以最终会执行 watcher 的回调函数。</p><p>当我们侦听一个通过 reactive API 创建的响应式对象时，内部会执行 traverse 函数，如果这个对象非常复杂，比如嵌套层级很深，那么递归 traverse 就会有一定的性能耗时。因此如果我们需要侦听这个复杂响应式对象内部的某个具体属性，就可以想办法减少 traverse 带来的性能损耗。</p><p>比如刚才的例子，我们就可以直接侦听 state.count.a.b 的变化：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(state.count.a, (</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(newVal) </span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">state.count.a.b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(state.count.a, (</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newVal) </span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">state.count.a.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>这样就可以减少内部执行 traverse 的次数。你可能会问，直接侦听 state.count.a.b 可以吗？答案是不行，因为 state.count.a.b 已经是一个基础数字类型了，不符合 source 要求的参数类型，所以会在非生产环境下报警告。</p><p>那么有没有办法优化使得 traverse 不执行呢？答案是可以的。我们可以侦听一个 getter 函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> state.count.a.b, (</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(newVal) </span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">state.count.a.b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> state.count.a.b, (</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newVal) </span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">state.count.a.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>这样函数内部会访问并返回 state.count.a.b，一次 traverse 都不会执行并且依然可以侦听到它的变化从而执行 watcher 的回调函数。</p><h4 id="构造回调函数" tabindex="-1">构造回调函数 <a class="header-anchor" href="#构造回调函数" aria-label="Permalink to &quot;构造回调函数&quot;">​</a></h4><p>处理完 watch API 第一个参数 source 后，接下来处理第二个参数 cb。</p><p>cb 是一个回调函数，它有三个参数：第一个 newValue 代表新值；第二个 oldValue 代表旧值。第三个参数 onInvalidate，我打算放在后面介绍。</p><p>其实这样的 API 设计非常好理解，即侦听一个值的变化，如果值变了就执行回调函数，回调函数里可以访问到新值和旧值。</p><p>接下来我们来看一下构造回调函数的处理逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">let cleanup </span></span>
<span class="line"><span style="color:#6A737D;">// 注册无效回调函数 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> onInvalidate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (fn) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  cleanup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> runner.options.onStop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(fn, instance, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* WATCH_CLEANUP */</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 旧值初始值 </span></span>
<span class="line"><span style="color:#E1E4E8;">let oldValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(source) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> INITIAL_WATCHER_VALUE </span><span style="color:#6A737D;">/*{}*/</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 回调函数 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> applyCb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cb </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 组件销毁，则直接返回 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.isUnmounted) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 求得新值 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> newValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runner</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (deep </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasChanged</span><span style="color:#E1E4E8;">(newValue, oldValue)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 执行清理函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cleanup) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cleanup</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callWithAsyncErrorHandling</span><span style="color:#E1E4E8;">(cb, instance, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* WATCH_CALLBACK */</span><span style="color:#E1E4E8;">, [ </span></span>
<span class="line"><span style="color:#E1E4E8;">        newValue, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 第一次更改时传递旧值为 undefined </span></span>
<span class="line"><span style="color:#E1E4E8;">        oldValue </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> INITIAL_WATCHER_VALUE </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> undefined </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> oldValue, </span></span>
<span class="line"><span style="color:#E1E4E8;">        onInvalidate </span></span>
<span class="line"><span style="color:#E1E4E8;">      ]) </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 更新旧值 </span></span>
<span class="line"><span style="color:#E1E4E8;">      oldValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">let cleanup </span></span>
<span class="line"><span style="color:#6A737D;">// 注册无效回调函数 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> onInvalidate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (fn) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  cleanup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> runner.options.onStop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(fn, instance, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* WATCH_CLEANUP */</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 旧值初始值 </span></span>
<span class="line"><span style="color:#24292E;">let oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(source) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> INITIAL_WATCHER_VALUE </span><span style="color:#6A737D;">/*{}*/</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 回调函数 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> applyCb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cb </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 组件销毁，则直接返回 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance.isUnmounted) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 求得新值 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> newValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runner</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (deep </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasChanged</span><span style="color:#24292E;">(newValue, oldValue)) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 执行清理函数 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cleanup) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cleanup</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callWithAsyncErrorHandling</span><span style="color:#24292E;">(cb, instance, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* WATCH_CALLBACK */</span><span style="color:#24292E;">, [ </span></span>
<span class="line"><span style="color:#24292E;">        newValue, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 第一次更改时传递旧值为 undefined </span></span>
<span class="line"><span style="color:#24292E;">        oldValue </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> INITIAL_WATCHER_VALUE </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> undefined </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> oldValue, </span></span>
<span class="line"><span style="color:#24292E;">        onInvalidate </span></span>
<span class="line"><span style="color:#24292E;">      ]) </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 更新旧值 </span></span>
<span class="line"><span style="color:#24292E;">      oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>onInvalidate 函数用来注册无效回调函数 ，我们暂时不需要关注它，我们需要重点来看 applyCb。 这个函数实际上就是对 cb 做一层封装，当侦听的值发生变化时就会执行 applyCb 方法，我们来分析一下它的实现。</p><p>首先，watch API 和组件实例相关，因为通常我们会在组件的 setup 函数中使用它，当组件销毁后，回调函数 cb 不应该被执行而是直接返回。</p><p>接着，执行 runner 求得新值，这里实际上就是执行前面创建的 getter 函数求新值。</p><p>最后进行判断，如果是 deep 的情况或者新旧值发生了变化，则执行回调函数 cb，传入参数 newValue 和 oldValue。注意，第一次执行的时候旧值的初始值是空数组或者 undefined。执行完回调函数 cb 后，把旧值 oldValue 再更新为 newValue，这是为了下一次的比对。</p><h4 id="创建-scheduler" tabindex="-1">创建 scheduler <a class="header-anchor" href="#创建-scheduler" aria-label="Permalink to &quot;创建 scheduler&quot;">​</a></h4><p>接下来我们要分析创建 scheduler 过程。</p><p>scheduler 的作用是根据某种调度的方式去执行某种函数，在 watch API 中，主要影响到的是回调函数的执行方式。我们来看一下它的实现逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> invoke </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (fn) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">let scheduler </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flush </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sync&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 同步 </span></span>
<span class="line"><span style="color:#E1E4E8;">  scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invoke </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (flush </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;pre&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> job </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">instance </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> instance.isMounted) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 进入异步队列，组件更新前执行 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">queueJob</span><span style="color:#E1E4E8;">(job) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果组件还没挂载，则同步执行确保在组件挂载前 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">job</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 进入异步队列，组件更新后执行 </span></span>
<span class="line"><span style="color:#E1E4E8;">  scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> job </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(job, instance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.suspense) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> invoke </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (fn) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">let scheduler </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flush </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sync&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 同步 </span></span>
<span class="line"><span style="color:#24292E;">  scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invoke </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (flush </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pre&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> job </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">instance </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> instance.isMounted) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 进入异步队列，组件更新前执行 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">queueJob</span><span style="color:#24292E;">(job) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果组件还没挂载，则同步执行确保在组件挂载前 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">job</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 进入异步队列，组件更新后执行 </span></span>
<span class="line"><span style="color:#24292E;">  scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> job </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(job, instance </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance.suspense) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Watch API 的参数除了 source 和 cb，还支持第三个参数 options，不同的配置决定了 watcher 的不同行为。前面我们也分析了 deep 为 true 的情况，除了 source 为 reactive 对象时会默认把 deep 设置为 true，你也可以主动传入第三个参数，把 deep 设置为 true。</p><p>这里，scheduler 的创建逻辑受到了第三个参数 Options 中的 flush 属性值的影响，不同的 flush 决定了 watcher 的执行时机。</p><ul><li><p>当 flush 为 sync 的时候，表示它是一个同步 watcher，即当数据变化时同步执行回调函数。</p></li><li><p>当 flush 为 pre 的时候，回调函数通过 queueJob 的方式在组件更新之前执行，如果组件还没挂载，则同步执行确保回调函数在组件挂载之前执行。</p></li><li><p>如果没设置 flush，那么回调函数通过 queuePostRenderEffect 的方式在组件更新之后执行。</p></li></ul><p>queueJob 和 queuePostRenderEffect 在这里不是重点，所以我们放到后面介绍。总之，你现在要记住，<strong>watcher 的回调函数是通过一定的调度方式执行的</strong>。</p><h4 id="创建-effect" tabindex="-1">创建 effect <a class="header-anchor" href="#创建-effect" aria-label="Permalink to &quot;创建 effect&quot;">​</a></h4><p>前面的分析我们提到了 runner，它其实就是 watcher 内部创建的 effect 函数，接下来，我们来分析它逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> runner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">effect</span><span style="color:#E1E4E8;">(getter, { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 延时执行 </span></span>
<span class="line"><span style="color:#E1E4E8;">  lazy</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// computed effect 可以优先于普通的 effect 先运行，比如组件渲染的 effect </span></span>
<span class="line"><span style="color:#E1E4E8;">  computed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  onTrack, </span></span>
<span class="line"><span style="color:#E1E4E8;">  onTrigger, </span></span>
<span class="line"><span style="color:#E1E4E8;">  scheduler</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> applyCb </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scheduler</span><span style="color:#E1E4E8;">(applyCb) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> scheduler </span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#6A737D;">// 在组件实例中记录这个 effect </span></span>
<span class="line"><span style="color:#B392F0;">recordInstanceBoundEffect</span><span style="color:#E1E4E8;">(runner) </span></span>
<span class="line"><span style="color:#6A737D;">// 初次执行 </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (applyCb) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (immediate) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">applyCb</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 求旧值 </span></span>
<span class="line"><span style="color:#E1E4E8;">    oldValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runner</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 没有 cb 的情况 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runner</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> runner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">effect</span><span style="color:#24292E;">(getter, { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 延时执行 </span></span>
<span class="line"><span style="color:#24292E;">  lazy</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// computed effect 可以优先于普通的 effect 先运行，比如组件渲染的 effect </span></span>
<span class="line"><span style="color:#24292E;">  computed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  onTrack, </span></span>
<span class="line"><span style="color:#24292E;">  onTrigger, </span></span>
<span class="line"><span style="color:#24292E;">  scheduler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> applyCb </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scheduler</span><span style="color:#24292E;">(applyCb) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> scheduler </span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#6A737D;">// 在组件实例中记录这个 effect </span></span>
<span class="line"><span style="color:#6F42C1;">recordInstanceBoundEffect</span><span style="color:#24292E;">(runner) </span></span>
<span class="line"><span style="color:#6A737D;">// 初次执行 </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (applyCb) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (immediate) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">applyCb</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 求旧值 </span></span>
<span class="line"><span style="color:#24292E;">    oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runner</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 没有 cb 的情况 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runner</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这块代码逻辑是整个 watcher 实现的核心部分，即通过 effect API 创建一个副作用函数 runner，我们需要关注以下几点。</p><ul><li><p><strong>runner 是一个 computed effect</strong>。因为 computed effect 可以优先于普通的 effect（比如组件渲染的 effect）先运行，这样就可以实现当配置 flush 为 pre 的时候，watcher 的执行可以优先于组件更新。</p></li><li><p><strong>runner 执行的方式</strong>。runner 是 lazy 的，它不会在创建后立刻执行。第一次手动执行 runner 会执行前面的 getter 函数，访问响应式数据并做依赖收集。注意，此时activeEffect 就是 runner，这样在后面更新响应式数据时，就可以触发 runner 执行 scheduler 函数，以一种调度方式来执行回调函数。</p></li><li><p><strong>runner 的返回结果</strong>。手动执行 runner 就相当于执行了前面标准化的 getter 函数，getter 函数的返回值就是 watcher 计算出的值，所以我们第一次执行 runner 求得的值可以作为 oldValue。</p></li><li><p><strong>配置了 immediate 的情况</strong>。当我们配置了 immediate ，创建完 watcher 会立刻执行 applyCb 函数，此时 oldValue 还是初始值，在 applyCb 执行时也会执行 runner 进而执行前面的 getter 函数做依赖收集，求得新值。</p></li></ul><h4 id="返回销毁函数" tabindex="-1">返回销毁函数 <a class="header-anchor" href="#返回销毁函数" aria-label="Permalink to &quot;返回销毁函数&quot;">​</a></h4><p>最后，会返回侦听器销毁函数，也就是 watch API 执行后返回的函数。我们可以通过调用它来停止 watcher 对数据的侦听。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">(runner) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 移除组件 effects 对这个 runner 的引用 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(instance.effects, runner) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">(effect) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (effect.active) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cleanup</span><span style="color:#E1E4E8;">(effect) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (effect.options.onStop) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      effect.options.</span><span style="color:#B392F0;">onStop</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    effect.active </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">(runner) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 移除组件 effects 对这个 runner 的引用 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(instance.effects, runner) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">(effect) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (effect.active) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cleanup</span><span style="color:#24292E;">(effect) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (effect.options.onStop) { </span></span>
<span class="line"><span style="color:#24292E;">      effect.options.</span><span style="color:#6F42C1;">onStop</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    effect.active </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>销毁函数内部会执行 stop 方法让 runner 失活，并清理 runner 的相关依赖，这样就可以停止对数据的侦听。并且，如果是在组件中注册的 watcher，也会移除组件 effects 对这个 runner 的引用。</p><p>好了，到这里我们对 watch API 的分析就可以告一段落了。侦听器的内部设计很巧妙，我们可以侦听响应式数据的变化，内部创建 effect runner，首次执行 runner 做依赖收集，然后在数据发生变化后，以某种调度方式去执行回调函数。</p><blockquote><p><strong>本节课的相关代码在源代码中的位置如下：</strong></p><p>packages/runtime-core/src/apiWatch.ts</p></blockquote>`,73),e=[o];function c(t,r,E,y,i,u){return n(),a("div",null,e)}const h=s(p,[["render",c]]);export{F as __pageData,h as default};
