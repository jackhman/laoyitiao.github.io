import{_ as p,j as t,o as e,g as c,k as n,s as a,h as o,Q as l}from"./chunks/framework.b3d8e22e.js";const g=JSON.parse('{"title":"流的状态区分 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/21讲吃透实时流计算_文档/(6431) 14  状态管理：为什么说流计算是有“状态”的？.md","filePath":"posts/backEnd/21讲吃透实时流计算_文档/(6431) 14  状态管理：为什么说流计算是有“状态”的？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/21讲吃透实时流计算_文档/(6431) 14  状态管理：为什么说流计算是有“状态”的？.md"},y=a("p",null,[o("如果你曾经访问过 "),a("a",{href:"https://flink.apache.org/",target:"_blank",rel:"noreferrer"},"Flink 官网"),o("的话，你会看到 Flink 是这么描述它自己的：")],-1),E=l('<p>看到没，第一个词就是<strong>Stateful</strong>（状态）！而且，正是因为这个 stateful，Flink 才会从众多开源流计算框架中脱颖而出，一下子就成为那个最靓的仔，还引得其他流计算框架开始纷纷效仿。</p><p>那为什么&quot;状态&quot;对于流计算是如此重要呢？其实关于这个问题，大家也是在不断的实践中，才逐渐弄明白。可以这样说，只有理解了&quot;状态&quot;，才能够真正理解&quot;流计算&quot;。</p><p>所以今天，我们就来详细讨论下实时流计算中有关于&quot;状态&quot;的问题吧！</p><h3 id="流的状态区分" tabindex="-1">流的状态区分 <a class="header-anchor" href="#流的状态区分" aria-label="Permalink to &quot;流的状态区分&quot;">​</a></h3><p>说到流计算的&quot;状态&quot;，我们在前面讲解流计算的五类算法时，其实就已经接触过了。比如，关联操作中临时保存的窗口数据、时间维度聚合值计算时使用的寄存器、CEP 中的有限状态机、统计或机器学习模型的参数等，这些都是&quot;状态&quot;。</p><p>但是，上面这些&quot;状态&quot;是有区别的！具体来说，这些&quot;状态&quot;可以分为两类，一类是<strong>流数据状态，<strong>另一类是</strong>流信息状态</strong>。下面我针对这两种状态分别解释下。</p><ul><li><p>首先是<strong>流数据状态</strong> 。在流计算过程中，我们需要处理事件窗口、时间乱序、多流关联等问题。解决这些问题，通常需要对部分流数据进行临时缓存，并在计算完成时再将这些临时缓存清理掉。因此，我们将这些<strong>临时保存的部分流数据称为&quot;流数据状态&quot;</strong>。</p></li><li><p>然后是<strong>流信息状态</strong> 。在流计算过程中，我们会得到一些有用的业务信息，比如时间维度的聚合值、关联图谱的一度关联节点数、CEP 的有限状态机等，这些信息会在后续被继续使用，从而需要将它们保存下来。同时在之后的流计算过程中，这些信息还会被不断地查询和更新。因此，我们<strong>将这些分析所得并保存下来的业务信息称为&quot;流信息状态&quot;</strong>。</p></li></ul>',7),i=l(`<p><strong>为什么区分&quot;流数据状态&quot;和&quot;流信息状态&quot;非常重要呢？</strong> 思考这么一个问题，如果要计算&quot;用户过去 7 天交易总金额&quot;，你准备怎么做？</p><p>一种显而易见的方法，是直接使用各种流计算框架提供的窗口函数来实现。比如在 Flink 中，就是如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">userTransactions</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">keyBy</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 滑动窗口，每1秒钟计算一次7天窗口内的交易金额</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">timeWindow</span><span style="color:#E1E4E8;">(Time.</span><span style="color:#B392F0;">days</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">), Time.</span><span style="color:#B392F0;">seconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">userTransactions</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">keyBy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 滑动窗口，每1秒钟计算一次7天窗口内的交易金额</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">timeWindow</span><span style="color:#24292E;">(Time.</span><span style="color:#6F42C1;">days</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">), Time.</span><span style="color:#6F42C1;">seconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上面的 Flink 代码使用了 timeWindow 窗口，每 1 秒钟计算一次 7 天窗口内的总交易金额。其他流计算平台，像 Spark Streaming、Storm 等，也有类似的方法。</p><p>但你一定会发现，上面的实现似乎有些奇怪。到底哪里奇怪呢？我认为至少有以下几点非常不妥。</p><ul><li><p>一是，这个计算是每 1 秒钟才能输出结果。如果我们的业务需求是，<strong>每来一个事件</strong>就对该事件所代表的用户，计算他在&quot;过去 7 天交易的总金额&quot;，那这种按照 1 秒钟做滑动窗口进行处理的方式，就与业务需求不相符了。</p></li><li><p>二是，窗口为 7 天，滑动步长为 1 秒，这两个时间相差的数量级过于巨大！这意味着对于同一份数据，在窗口滑动过程中，会被反复计算&quot;7(天) ÷ 1(秒) ≈ 60万&quot;次！当然，这里设置 1 秒是因为我们想尽可能地&quot;实时&quot;。如果觉得 1 秒太&quot;过分&quot;，你也可以设置滑动步长为 30 秒、60 秒等，但这并不能改变重复计算的本质，并且滑动步长越长，离&quot;实时计算&quot;越远。</p></li><li><p>三是，窗口为 7 天，就意味着在流计算系统中需要保存 7 天的数据。而我们想要计算的其实只是一个 sum 聚合值，保存 7 天的数据不仅会占用大量的内存和磁盘，还会显著降低处理速度。所以针对聚合值计算，还需要保存窗口内的全部数据，这显然是一个严重的问题。对于这个问题，一些流计算框架已经做了优化。比如 Flink 在计算 sum 一类的窗口聚合值时，默认是不用保存窗口内数据的，但是一旦用户需要做些定制化改动，则又退化到要保存窗口内全部数据的情况了。</p></li><li><p>四是，如果我们要在一个事件上，计算<strong>几十个</strong> 类似于&quot;用户过去 7 天交易总金额&quot;这样的指标，按照 timeWindow 的实现方法，每个指标可能会有<strong>不同的时间窗口</strong> 和<strong>滑动步长</strong>。如此一来，同步这几十个指标的计算过程并汇总它们的计算结果，也成了一件不容易的事情。</p></li></ul><p>那么，是什么原因造成了以上这些不妥之处呢？这是因为，我们混淆了&quot;数据窗口&quot;和&quot;业务窗口&quot;。下面详细说明。</p><p>在大多数开源流计算框架中，它们定义的&quot;窗口&quot;函数，其实是针对&quot;流数据&quot;的&quot;分块&quot;管理。我们用这些&quot;窗口&quot;函数，将原本&quot;无穷无尽&quot;的流数据，分割成一个个的&quot;数据块&quot;，然后在&quot;数据块&quot;上做各种计算。这种做法，本质上是对流数据的&quot;分而治之&quot;管理，所以我将这种窗口，称之为&quot;数据窗口&quot;。</p><p>而在&quot;用户过去 7 天交易总金额&quot;的计算中，这里的&quot;7 天&quot;是属于业务意义上的时间窗口，所以我将这种窗口，称之为&quot;业务窗口&quot;。</p><p>澄清了这两种不同的窗口后，我们再来分析下前面的 Flink 代码有什么问题。</p><p>在前面的 Flink 代码中，我们直接使用 timeWindow(Time.days(7)，Time.seconds(1)) 来实现 &quot;7 天&quot;的时间窗口。这里的 Time.days(7) 属于 Flink 对&quot;流数据&quot;的&quot;分块&quot;管理，所以是&quot;数据窗口&quot;！我们将它设置为与&quot;业务窗口&quot;一致，其实是强行将&quot;数据窗口&quot;和&quot;业务窗口&quot;耦合起来。毕竟，我要实现&quot;7 天&quot;的&quot;业务窗口&quot;，为啥一定要用&quot;7 天&quot;的&quot;数据窗口&quot;来对流数据进行分块呢？</p><p>比如，我先将交易数据保存到数据库中，然后将&quot;数据窗口&quot;设置为 1 小时按批处理。或者，我甚至可以根本就不使用&quot;数据窗口&quot;，而是逐个事件处理。这两种方法，它们的&quot;数据窗口&quot;都不是&quot;7 天&quot;，但它们都可以算出用户在&quot;7 天&quot;的&quot;业务窗口&quot;内交易的总金额！</p><p>所以说，正是由于混淆了&quot;数据窗口&quot;与&quot;业务窗口&quot;，将它们强行耦和起来，才造成前面所说的各种不妥！</p><p>接下来，我们来做更进一步的分析。也就是，如果从&quot;状态&quot;的角度看，&quot;数据窗口&quot;和&quot;业务窗口&quot;又有什么区别？</p><p>在实现&quot;数据窗口&quot;时，我们工作的核心是<strong>将部分流数据缓存起来</strong> ，并对缓存的数据按&quot;窗口&quot;划分，最后再将窗口内的数据按批次处理。所以，<strong>实现&quot;数据窗口&quot;所要保存的&quot;状态&quot;是流数据本身</strong> ，这种&quot;状态&quot;就是&quot;<strong>流数据状态</strong>&quot;。</p><p>而在实现&quot;业务窗口&quot;时，我们工作的核心是<strong>保存业务信息</strong> ，比如<strong>每天的交易总金额</strong> 。这样当我们要计算 7 天的总交易金额时，只需要将这 7 天中<strong>每天的交易总金额</strong> 读取出来汇总即可。所以，<strong>实现&quot;业务窗口&quot;所要保存的&quot;状态&quot;是流数据所含的业务信息</strong> ，这种&quot;状态&quot;就是&quot;<strong>流信息状态</strong>&quot;。</p><p>经过上面的分析，你现在应该理解为啥要区分&quot;流数据状态&quot;和&quot;流信息状态&quot;了吧？<strong>&quot;流数据状态&quot;和&quot;流信息状态&quot;根本就是两种不同的状态，&quot;流数据状态&quot;是在管理流数据过程中产生的状态，而&quot;流信息状态&quot;则是在分析流数据业务信息中产生的状态。</strong></p><p>所以接下来，我就详细地讲解下这两种状态。</p><h3 id="流数据状态" tabindex="-1">流数据状态 <a class="header-anchor" href="#流数据状态" aria-label="Permalink to &quot;流数据状态&quot;">​</a></h3><p>我们先来看<strong>流数据状态</strong>。说到流数据状态，其最重要的用途是实现&quot;事件窗口&quot;&quot;时间乱序处理&quot;和&quot;流的关联&quot;。下面我就这三种用途逐一讲解下。</p><h4 id="事件窗口" tabindex="-1">事件窗口 <a class="header-anchor" href="#事件窗口" aria-label="Permalink to &quot;事件窗口&quot;">​</a></h4><p>首先是&quot;事件窗口&quot;。</p><p>在模块 2 时，我们实现过一个流计算框架。在这个框架中，事件处理的方式是来一个就处理一个，并没有&quot;窗口&quot;的概念。但在实际很多场景中，我们并不需要每来一个事件就处理一个事件，而是按照一定的间隔和窗口来处理事件。比如&quot;每 30 秒钟计算一次过去五分钟交易总额&quot;&quot;每满 100 个事件计算平均交易金额&quot;&quot;统计用户在一次活跃期间点击过的商品数量&quot;等。</p><p>对于这些以&quot;窗口&quot;为单元来处理事件的方式，我们需要用一个缓冲区（buffer）临时存储过去一段时间接收到的事件。只有等到触发窗口计算的条件满足时，才开始处理窗口内的事件。最后当窗口里的数据被处理完时，还需要将以后无须再使用的数据清理掉。</p><p>可以看出，以上&quot;事件窗口&quot;功能得以实现，是非常依赖于在缓冲区中保存部分流数据的。这种保存在缓冲区中的部分流数据，就是一种&quot;流数据状态&quot;。</p><h4 id="时间乱序" tabindex="-1">时间乱序 <a class="header-anchor" href="#时间乱序" aria-label="Permalink to &quot;时间乱序&quot;">​</a></h4><p>接下来是&quot;时间乱序&quot;。</p><p>由于网络传输和并发处理的原因，在流计算系统接收到事件时，非常有可能事件已经在时间上乱序了。比如时间戳为 1532329665005 的事件，比时间戳为 1532329665001 的事件先到达流计算系统。怎样处理这种事件在时间上乱序的问题呢？通常的做法就是将收到的事件先保存起来，<strong>等过一段时间</strong>后乱序的事件到达了，再将保存的事件按时间排序，这样就恢复了事件的时间顺序。</p><p>当然，上面的过程存在一个问题，就是&quot;<strong>等过一段时间</strong>&quot;到底是怎样等以及等多久？针对这个问题有一个非常优秀的解决方案，就是水印（watermark）。</p><p>使用&quot;水印&quot;解决时间乱序的原理是这样的。在流计算数据中，按照一定的规律（比如以特定周期）插入&quot;水印&quot;，水印是一个时间戳。当处理单元接收到水印时，表示应该<strong>处理所有时间戳比水印小的事件</strong> 。我们通常将水印设置为&quot;事件的时间戳<strong>减去一段时间</strong> &quot;所得的值，这样就给&quot;先到的时间戳较大的事件&quot;一个等待&quot;晚到的时间戳较小的事件&quot;的机会，而且确保了不会没完没了地等待下去。在这个过程中，等待时间的大小就是那个<strong>减去的时间段</strong>了。</p><p>不过，&quot;水印&quot;这种方案也不是百分百地解决了乱序问题，那些实在太晚到达的事件，就只能是过期不候了。另外，由于解决&quot;时间乱序&quot;的问题需要等待晚到的事件，所以不可避免地会对当前事件的处理带来一定延迟。</p><p>总的来说，在使用&quot;水印&quot;解决&quot;时间乱序&quot;问题时，总是会将时间戳大于水印的数据先缓存起来。这些缓存的部分流数据，就是&quot;流数据状态&quot;。</p><h4 id="流的关联" tabindex="-1">流的关联 <a class="header-anchor" href="#流的关联" aria-label="Permalink to &quot;流的关联&quot;">​</a></h4><p>最后是&quot;流的关联&quot;。</p><p>在关系型数据库中，关联操作是一种非常普遍的行为，现在这种操作也被引进到流计算中来。比如 join、union 等，都是流计算中常用的关联操作。</p><p>虽然&quot;流数据&quot;和&quot;块数据&quot;在数据形式和处理方式上都十分不同，但就&quot;关联&quot;操作而言，它们的工作原理是非常相似的。</p><p>比如，流计算系统在实现 join 操作时，需要先将参与 join 的各个流在一段时间窗口内的全部数据都缓存起来。然后，以这些窗口内的数据为基础，做类似于关系型数据库中表与表之间的 join 计算。最后计算完成时，再将结果以流的方式输出。</p><p>很显然，上面实现流数据 join 操作时，也是需要临时保存部分流数据的，因此&quot;流的关联&quot;操作也用到了&quot;流数据状态&quot;。</p><p>除了以上三种主要用途外，流计算系统在实现其他一些功能时，也需要缓存部分的流数据，比如排序（sorting）、分组（group by）等。因此，这些功能也都使用到了&quot;流数据状态&quot;。</p><p>接下来，我们再看下有关&quot;流数据状态&quot;的存储问题。</p><h4 id="流数据状态的存储" tabindex="-1">流数据状态的存储 <a class="header-anchor" href="#流数据状态的存储" aria-label="Permalink to &quot;流数据状态的存储&quot;">​</a></h4><p>&quot;流数据状态&quot;最理想的情况是全部保存在内存中，只有在做持久化（checkpoint）时，才写入磁盘。这样做的原因在于，流数据从接收、处理到删除的过程，具有实时、快速和临时的特点，如果每次接收到一个新事件，都要将其写入磁盘，势必会引起性能的急剧下降。</p><p>但是，将所有数据全都放在内存，终究还是太过理想。因为大多数场景下，&quot;数据窗口&quot;内的数据量都超过了内存容量。所以，此时也可以将&quot;流数据状态&quot;存放在文件或其他外部存储系统中。这样会对性能造成一定的影响，但避免了内存对数据量的限制。</p><p>至此，我们就讨论完所有&quot;流数据状态&quot;相关的内容了。总的来说，&quot;流数据状态&quot;最重要的功能是实现窗口、关联和乱序处理。在后续模块四的课时中，我还会针对各种开源流计算框架，讲解它们对&quot;流数据状态&quot;的支持情况，这里就不再继续展开了。</p><h3 id="流信息状态" tabindex="-1">流信息状态 <a class="header-anchor" href="#流信息状态" aria-label="Permalink to &quot;流信息状态&quot;">​</a></h3><p>接下来，我们再来看<strong>流信息状态</strong>。&quot;流信息状态&quot;最主要的功能，是记录在流计算过程中分析出的业务信息。</p><p>还是拿前面&quot;用户过去 7 天交易总金额&quot;的例子来说。在实时风控系统中，通常会要求针对每一个到来的交易事件，计算该交易事件的用户在过去 7 天交易的总金额。这种情况下，我们可以将每天的交易金额记录为一条&quot;状态&quot;。当一个交易事件到来时，只需要将过去 7 天每天的交易金额&quot;状态&quot;读取出来，然后汇总求和，就得到了 7 天的总交易金额。</p><p>在上面这个例子中，<strong>将每天的交易金额记录为一条&quot;状态&quot;，就是我们说的&quot;流信息状态&quot;</strong>。</p><p><strong>流信息状态的存储，通常是依赖于数据库完成的</strong>。这有三方面的原因。</p><ul><li><p>一是，&quot;流信息状态&quot;通常需要保存较长时间，数据量也不小，还需要频繁查询和更新，将它存放在数据库中，能方便地长期保存和增删查改。</p></li><li><p>二是，&quot;流信息状态&quot;存在&quot;数据变冷&quot;和&quot;过期淘汰&quot;的问题，使用数据库的&quot;热数据缓存&quot;和&quot;TTL 机制&quot;，能方便有效地解决这两个问题。</p></li><li><p>三是，&quot;流信息状态&quot;通常数据量会很大，单个存储节点往往是不够用的，选择合适的数据库能够方便地扩展为集群。</p></li></ul><p>以上就是我们选择用数据库来存储&quot;流信息状态&quot;的原因了。</p><p>接下来我们就来看看，具体如何用数据库存储&quot;流信息状态&quot;吧！</p><h4 id="使用-apache-ignite-存储流信息状态" tabindex="-1">使用 Apache Ignite 存储流信息状态 <a class="header-anchor" href="#使用-apache-ignite-存储流信息状态" aria-label="Permalink to &quot;使用 Apache Ignite 存储流信息状态&quot;">​</a></h4><p>实际上，我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=614&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6427" target="_blank" rel="noreferrer">10 课时中</a>，已经使用 Redis 数据库来存储&quot;流信息状态&quot;了。当时，我们为了计算&quot;过去一周内在相同设备上交易的次数&quot;，使用 Redis 的 INCR 指令来实现了计数功能，将记录交易次数信息的寄存器，存放在 Redis 中。这个过程其实就是在使用 Redis 存储&quot;流信息状态&quot;。</p><p>不过现在，我们使用另外一种不同的方案来存储&quot;流信息状态&quot;，这就是 Apache Ignite。这里之所以要&quot;多此一举&quot;地用两种不同的方案来实现相同的功能，也是有重要原因的。具体为什么，你在下一个课时就会知道了。</p><p>这里我重点讲解如何用 Apache Ignite 存储&quot;流信息状态&quot;。</p><p>Apache Ignite 是一种<strong>基于内存的数据网格</strong>方案，也可以用作分布式内存数据库。它提供了符合 JCache 标准的数据访问接口，支持丰富的数据结构，并且支持 SQL 查询功能。</p><p>为了更好地对比，我这里还是计算&quot;过去一周在相同设备上交易次数&quot;。下面就是具体的实现过程。</p><p>首先，我们需要定义一个用于存储&quot;流信息状态&quot;的&quot;表&quot;，这个&quot;表&quot;是数据存储的格式。具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountTable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">QuerySqlField</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">QuerySqlField</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timestamp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">QuerySqlField</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> amount;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountTable</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">timestamp</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amount</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.timestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timestamp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.amount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> amount;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 必需重写equals方法，否则在经过序列化和反序列化后，Ignite会视为不同记录，实际上它们是同一条记录</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> o) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (o </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> o.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        CountTable that </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (CountTable) o;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timestamp </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> that.timestamp) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Double.</span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(that.amount, amount) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(that.name) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> that.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 因为重写了equals方法，所以hashCode()方法也跟着一起重写</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> temp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) (timestamp </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> (timestamp </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Double.</span><span style="color:#B392F0;">doubleToLongBits</span><span style="color:#E1E4E8;">(amount);</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) (temp </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> (temp </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountTable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">QuerySqlField</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">QuerySqlField</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">index</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timestamp;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">QuerySqlField</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> amount;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountTable</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">timestamp</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amount</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.timestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timestamp;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.amount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> amount;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 必需重写equals方法，否则在经过序列化和反序列化后，Ignite会视为不同记录，实际上它们是同一条记录</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> o) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> o.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        CountTable that </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (CountTable) o;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timestamp </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> that.timestamp) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(that.amount, amount) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(that.name) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> that.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 因为重写了equals方法，所以hashCode()方法也跟着一起重写</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) (timestamp </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> (timestamp </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">doubleToLongBits</span><span style="color:#24292E;">(amount);</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) (temp </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> (temp </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的表定义中：</p><ul><li><p>name 用于记录状态的关键字；</p></li><li><p>timestamp 用于记录事件处理时的时间戳；</p></li><li><p>amount 用于记录状态发生的次数。</p></li></ul><p>另外，我重写了表 CountTable 类的 equals 方法和 hashCode 方法，这是因为 Apache Ignite 在执行 replace 这类方法时，会进行对象的比较。而由于 Apache Ignite 本身是一个分布式系统，在查询过程中会涉及对象序列化和反序列化的过程。这个时候如果不重写 equals 方法，会导致原本字段完全一样的记录会被视为不同记录，使得程序运行错误。</p><p>与用 Redis 时的实现思路完全一致，我也将 7 天的时间窗口划分为 7 个小窗口，每个小窗口代表 1 天。在每个小窗口内，分配一个用来记录这个窗口事件数的关键字，也就是 CountTable 表定义中的 name 字段，name 取值的格式如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">event_type.</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">device_id.</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit.</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_index</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">event_type.</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">device_id.</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit.</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_index</span></span></code></pre></div><p>其中，&quot;$event_type&quot;表示事件类型，&quot;$device_id&quot;表示设备id，&quot;$window_unit&quot;表示时间窗口单元，&quot;$window_index&quot;表示时间窗口索引。</p><p>比如，对于&quot;device_id&quot;为&quot;d000001&quot;的设备，如果在时间戳为&quot;1532496076032&quot;的时刻更新窗口，则计算的伪代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">event_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;transaction&quot;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">device_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;d000001&quot;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">86400000</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 时间窗口单元为1天，即86400000毫秒</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1532496076032</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17737</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 用时间戳除以时间窗口单元，得到时间窗口索引</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">atTime ＝ (</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;$event_type.$device_id.$window_unit.$window_index&quot;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ignite.getOrCreateCache()</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> md5(</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">name)</span><span style="color:#FDAEB7;font-style:italic;">;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">newRecord </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> new CountTable(</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">name, </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">atTime, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#FDAEB7;font-style:italic;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">do {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">oldRecord = </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">cache.get(</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">oldRecord </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> null) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">newRecord.amount = </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">oldRecord.amount </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">oldRecord = </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">newRecord;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">cache.putIfAbsent(</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">, oldRecord);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">succeed = </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">cache.replace(</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">oldRecord, </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">newRecord);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (!</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">succeed)</span><span style="color:#FDAEB7;font-style:italic;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">event_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;transaction&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">device_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;d000001&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">86400000</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 时间窗口单元为1天，即86400000毫秒</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1532496076032</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17737</span><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 用时间戳除以时间窗口单元，得到时间窗口索引</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">atTime ＝ (</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;$event_type.$device_id.$window_unit.$window_index&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ignite.getOrCreateCache()</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> md5(</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">name)</span><span style="color:#B31D28;font-style:italic;">;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">newRecord </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> new CountTable(</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">name, </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">atTime, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#B31D28;font-style:italic;">;</span></span>
<span class="line"><span style="color:#24292E;">do {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">oldRecord = </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">cache.get(</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">oldRecord </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> null) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">newRecord.amount = </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">oldRecord.amount </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">oldRecord = </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">newRecord;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">cache.putIfAbsent(</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">, oldRecord);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">succeed = </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">cache.replace(</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">, </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">oldRecord, </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">newRecord);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (!</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">succeed)</span><span style="color:#B31D28;font-style:italic;">;</span></span></code></pre></div><p>上面的伪代码描述了使用 Apache Ignite 的 JCache 接口更新某个窗口计数的方法，它实现的功能与之前用 Redis 时并无二致。</p><p>但是，由于 Apache Ignite 没有提供类似于 Redis 中 INCR 指令那样的原子加操作，所以需要自行实现并发安全的累加操作。这里我没有采用&quot;锁&quot;的方案，而是使用了 CAS（Compare And Swap）。CAS 是一种无锁机制，在高并发场景下会比传统的锁具备更好的性能表现。在上面代码的&quot;do while&quot;循环部分，就是 CAS 的实现，其中&quot;$cache.replace&quot;是一个原子操作，保证了 CAS 的并发安全。</p><p>在更新完子窗口的计数后，就是查询完整窗口的总计数了。我们只需要对子时间窗口内的计数做查询并汇总即可。具体实现如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">event_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;transaction&quot;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">device_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;d000001&quot;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">86400000</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 时间窗口单元为1天，即86400000毫秒</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1532496076032</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17737</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 用时间戳除以时间窗口单元，得到时间窗口索引</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">atTime ＝ (</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">startTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">atTime </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">window_unit </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">;    </span><span style="color:#6A737D;"># 窗口为7天</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;$event_type.$device_id.$window_unit.$window_index&quot;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ignite.getOrCreateCache()</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">sumQuery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;SELECT sum(amount) FROM CountTable &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;WHERE name = $name and timestamp &gt; $startTime and timestamp &lt;= $atTime&quot;</span><span style="color:#FDAEB7;font-style:italic;">;</span></span>
<span class="line"><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">cache.query(</span><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;">sumQuery)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">event_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;transaction&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">device_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;d000001&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">86400000</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 时间窗口单元为1天，即86400000毫秒</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1532496076032</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17737</span><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 用时间戳除以时间窗口单元，得到时间窗口索引</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">atTime ＝ (</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">atTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">window_unit </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">;    </span><span style="color:#6A737D;"># 窗口为7天</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;$event_type.$device_id.$window_unit.$window_index&quot;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ignite.getOrCreateCache()</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">sumQuery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;SELECT sum(amount) FROM CountTable &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;WHERE name = $name and timestamp &gt; $startTime and timestamp &lt;= $atTime&quot;</span><span style="color:#B31D28;font-style:italic;">;</span></span>
<span class="line"><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">cache.query(</span><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;">sumQuery)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span></span></code></pre></div><p>上面的伪代码充分利用了 Apache Ignite 支持 SQL 查询的便利性，很容易地计算出过去 7 天交易的总次数。</p><p>至此，我们就使用 Apache Ignite 实现了&quot;过去一周在相同设备上交易次数&quot;的计算。</p><p>总的来说，对于&quot;流信息状态&quot;，我们通常是使用数据库来进行管理，比如 Redis、Apache Ignite、RocksDB 等。我们一般还会要求这些数据库是高性能的，并且可以扩展为集群。对于扩展为集群这点，我会在下一个课时重点讨论。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>今天，我们讨论了实时流计算应用中状态管理的问题，并将实时流计算应用中的状态分为了&quot;流数据状态&quot;和&quot;流信息状态&quot;。</p><p>可以说，&quot;流数据状态&quot;和&quot;流信息状态&quot;分别是从两个不同的维度对&quot;流&quot;进行的管理。<strong>前者&quot;流数据状态&quot;是从&quot;时间&quot;角度对流进行管理，而后者&quot;流信息状态&quot;则是从&quot;空间&quot;角度对流进行管理。</strong>&quot;流信息状态&quot;弥补了&quot;流数据状态&quot;只是对事件在时间序列上做管理的不足，将流的状态扩展到了任意的空间。</p><p>将&quot;流数据状态&quot;和&quot;流信息状态&quot;这两个概念区分开，会指引我们将&quot;流计算应用本身的执行过程&quot;和&quot;流数据的信息管理机制&quot;解耦，这使得实时流计算系统的整体结构更加清晰。</p><p>今天的课程内容稍微偏长了，这是因为&quot;状态&quot;问题对于流计算系统来说，实在是太过重要的内容。它是你以后能否灵活运用各种流计算框架解决业务问题的关键所在，所以请你务必掌握好今天的内容。</p><p>最后，我们留一个小作业。对于&quot;过去 1 小时成交总金额&quot;和&quot;过去 3 个月成交总金额&quot;这两个计算任务，用 Flink 的话你会分别怎样实现呢？可以将你的想法或问题写在留言区。</p><p>下面是本课时的知识脑图，以便于你理解。</p>`,82);function u(q,F,d,D,A,m){const s=t("Image");return e(),c("div",null,[y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/17/0D/CioPOWBHNWSAACawAAC1gtZB88o077.png"}),E,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/17/11/Cgp9HWBHNXCAR1kpAADJACD6xco814.png"}),i,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/17/11/Cgp9HWBHNbqAFSWxAA0fYlDmXYM226.png"})])}const C=p(r,[["render",u]]);export{g as __pageData,C as default};
