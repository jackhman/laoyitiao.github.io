import{_ as p,j as n,o as r,g as l,k as t,h as a,s,Q as e}from"./chunks/framework.e0c66c3f.js";const j=JSON.parse('{"title":"Trace 链路追踪原理 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6003) 10  可观测性之 Trace：更快速定位问题.md","filePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6003) 10  可观测性之 Trace：更快速定位问题.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/微服务Service Mesh原理与实战_文档/(6003) 10  可观测性之 Trace：更快速定位问题.md"},i=s("p",null,"今天我要和你分享的内容是微服务组件之一：提供可观测性功能的组件 Trace。早期系统架构基本是通过日志组件来观察服务的异常情况，而在云原生模式下，链路追踪、Metrics 和日志三者组成了可观测性组件。在微服务和 Service Mesh 架构中，可观测性组件的位置变得越来越重要，一般作为默认组件集成在方案中。",-1),u=s("p",null,"今天我们来讲解一下可观测性组件之一， Trace 链路追踪组件。在学习链路追踪之前，我们先看一下什么是可观测性。",-1),d=s("p",null,[a("可观测性的英文是 Observability，这是伴随着云原生技术发展产生的一个新兴词汇，在传统的 IT 中，并没有这种说法。简单来说，"),s("strong",null,"可观测性是通过系统输出信息到外部，以检测系统内部的运行状态"),a(" 。比如我们这一讲中的"),s("strong",null,"Trace，通过内部打点的方式串联起微服务的各个组件"),a(" ，再比如我们下一讲中的"),s("strong",null,"Metrics，通过输出服务的 Metrics 信息，达到外部监测的目的"),a("。")],-1),g=s("p",null,"可观测性组件主要有如下三种：链路追踪、监控指标、日志。我们先来看看它们的区别和关联：",-1),q=e("",7),_=e("",9),y=s("p",null,"单次请求调用链路",-1),h=s("p",null,"至此，我们介绍了链路追踪系统的原理，那么有哪些常见的链路追踪系统呢？它们又各自有什么特点呢？别着急，我们往下看。",-1),F=s("h3",{id:"常见的链路追踪系统",tabindex:"-1"},[a("常见的链路追踪系统 "),s("a",{class:"header-anchor",href:"#常见的链路追踪系统","aria-label":'Permalink to "常见的链路追踪系统"'},"​")],-1),E=s("h4",{id:"zipkin",tabindex:"-1"},[a("Zipkin "),s("a",{class:"header-anchor",href:"#zipkin","aria-label":'Permalink to "Zipkin"'},"​")],-1),T=s("p",null,"Zipkin是 Twitter 开源的分布式链路追踪系统，属于比较早的 Trace 系统，对 PHP、Golang、Java 都有不错的支持。它提供了一套 Web 图形化界面，供用户查看单条链路信息，也提供了查看调用关系图的功能。",-1),A=e("",3),C=s("p",null,"Jaeger 架构",-1),m=s("p",null,"现在，我们已经初步了解了链路追踪的相关信息，下面我们看看 Trace 系统中的常见问题，以及链路追踪引发的一些思考。",-1),S=s("h3",{id:"trace-系统中的常见问题",tabindex:"-1"},[a("Trace 系统中的常见问题 "),s("a",{class:"header-anchor",href:"#trace-系统中的常见问题","aria-label":'Permalink to "Trace 系统中的常见问题"'},"​")],-1),D=s("p",null,[s("strong",null,"TraceId 如何设计")],-1),I=s("p",null,[a("TraceId 只要全局唯一就可以了，这里我们可以"),s("strong",null,"参考 SOFATrace 中的设计"),a("，通过 8 位的 IP 地址和 13 位的时间戳，以及四位的自增序列，加上本身进程的 PID 号，这样组成的字符串就可以保证全局唯一了。")],-1),b=e("",22),P=s("p",null,"本讲内容到这里就结束了，下一讲我会讲解另一个可观测性组件 Metrics，看看如何通过有效的 Metrics 数据进行监控和告警。",-1),B=s("p",null,"通过这节内容的讲解，如果让你选择，你觉得我们能从海量的 Trace 数据中挖掘出哪些有价值的信息呢？欢迎在留言区和我分享你的观点。我们下一讲再见！",-1);function k(v,f,M,V,N,G){const o=n("Image");return r(),l("div",null,[i,u,d,g,t(o,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8F/09/Ciqc1GAGqMeAYh7bAACzq2izWIY613.png"}),q,t(o,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/06/F5/CgpVE2AGqNCAZ2qmAAIfH6q6d4k552.png"}),_,t(o,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/06/F5/CgpVE2AGqN2AKIZaAAPN557polk911.png"}),a(),y,h,F,E,T,t(o,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/06/F5/CgpVE2AGqOuABlEYAAFtYJVzoKQ218.png"}),A,t(o,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/06/F5/CgpVE2AGqPyAAmAmAADRVPhzW9Q508.png"}),a(),C,m,S,D,I,t(o,{alt:"Lark20210119-180720.png",src:"https://s0.lgstatic.com/i/image2/M01/06/F6/Cip5yGAGr3qAJ-bWAABwdaTrVMk578.png"}),b,t(o,{alt:"Lark20210119-180730.png",src:"https://s0.lgstatic.com/i/image2/M01/06/F8/CgpVE2AGr3CAFxrjAAKoebHGeik261.png"}),a(),P,B])}const J=p(c,[["render",k]]);export{j as __pageData,J as default};
