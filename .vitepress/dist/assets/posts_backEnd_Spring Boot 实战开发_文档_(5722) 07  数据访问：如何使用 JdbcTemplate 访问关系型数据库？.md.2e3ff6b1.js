import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.4e7d56ce.js";const F=JSON.parse('{"title":"数据模型和 Repository 层设计 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Boot 实战开发_文档/(5722) 07  数据访问：如何使用 JdbcTemplate 访问关系型数据库？.md","filePath":"posts/backEnd/Spring Boot 实战开发_文档/(5722) 07  数据访问：如何使用 JdbcTemplate 访问关系型数据库？.md","lastUpdated":1696338709000}'),l={name:"posts/backEnd/Spring Boot 实战开发_文档/(5722) 07  数据访问：如何使用 JdbcTemplate 访问关系型数据库？.md"},o=p(`<p>06 讲我们详细介绍了 JDBC 规范的相关内容，JDBC 规范是 Java 领域中使用最广泛的数据访问标准，目前市面上主流的数据访问框架都是构建在 JDBC 规范之上。</p><p>因为 JDBC 是偏底层的操作规范，所以关于如何使用 JDBC 规范进行关系型数据访问的实现方式有很多（区别在于对 JDBC 规范的封装程度不同），而在 Spring 中，同样提供了 JdbcTemplate 模板工具类实现数据访问，它简化了 JDBC 规范的使用方法，今天我们将围绕这个模板类展开讨论。</p><h3 id="数据模型和-repository-层设计" tabindex="-1">数据模型和 Repository 层设计 <a class="header-anchor" href="#数据模型和-repository-层设计" aria-label="Permalink to &quot;数据模型和 Repository 层设计&quot;">​</a></h3><p>引入 JdbcTemplate 模板工具类之前，我们回到 SpringCSS 案例，先给出 order-service 中的数据模型为本讲内容的展开做一些铺垫。</p><p>我们知道一个订单中往往涉及一个或多个商品，所以在本案例中，我们主要通过一对多的关系来展示数据库设计和实现方面的技巧。而为了使描述更简单，我们把具体的业务字段做了简化。Order 类的定义如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id; </span><span style="color:#6A737D;">//订单Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String orderNumber; </span><span style="color:#6A737D;">//订单编号</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String deliveryAddress; </span><span style="color:#6A737D;">//物流地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Goods</span><span style="color:#E1E4E8;">&gt; goodsList;  </span><span style="color:#6A737D;">//商品列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//省略了 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id; </span><span style="color:#6A737D;">//订单Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String orderNumber; </span><span style="color:#6A737D;">//订单编号</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String deliveryAddress; </span><span style="color:#6A737D;">//物流地址</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Goods</span><span style="color:#24292E;">&gt; goodsList;  </span><span style="color:#6A737D;">//商品列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//省略了 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中代表商品的 Goods 类定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Goods</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id; </span><span style="color:#6A737D;">//商品Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String goodsCode; </span><span style="color:#6A737D;">//商品编号</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String goodsName; </span><span style="color:#6A737D;">//商品名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Double price; </span><span style="color:#6A737D;">//商品价格</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//省略了 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Goods</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id; </span><span style="color:#6A737D;">//商品Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String goodsCode; </span><span style="color:#6A737D;">//商品编号</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String goodsName; </span><span style="color:#6A737D;">//商品名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Double price; </span><span style="color:#6A737D;">//商品价格</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//省略了 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从以上代码，我们不难看出一个订单可以包含多个商品，因此设计关系型数据库表时，我们首先会构建一个中间表来保存 Order 和 Goods 这层一对多关系。在本课程中，我们使用 MySQL 作为关系型数据库，对应的数据库 Schema 定义如下代码所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DROP TABLE IF EXISTS \`order\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">DROP TABLE IF EXISTS \`goods\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">DROP TABLE IF EXISTS \`order_goods\`;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">create table \`order\` (</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`order_number\` varchar(50) not null,</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`delivery_address\` varchar(100) not null,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`create_time\` timestamp not null DEFAULT CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="color:#E1E4E8;">    PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">create table \`goods\` (</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`goods_code\` varchar(50) not null,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`goods_name\` varchar(50) not null,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`goods_price\` double not null,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`create_time\` timestamp not null DEFAULT CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="color:#E1E4E8;">    PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">create table \`order_goods\` (</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`order_id\` bigint(20) not null,</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`goods_id\` bigint(20) not null,</span></span>
<span class="line"><span style="color:#E1E4E8;">    foreign key(\`order_id\`) references \`order\`(\`id\`),</span></span>
<span class="line"><span style="color:#E1E4E8;">    foreign key(\`goods_id\`) references \`goods\`(\`id\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DROP TABLE IF EXISTS \`order\`;</span></span>
<span class="line"><span style="color:#24292E;">DROP TABLE IF EXISTS \`goods\`;</span></span>
<span class="line"><span style="color:#24292E;">DROP TABLE IF EXISTS \`order_goods\`;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">create table \`order\` (</span></span>
<span class="line"><span style="color:#24292E;">    \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#24292E;">    \`order_number\` varchar(50) not null,</span></span>
<span class="line"><span style="color:#24292E;">    \`delivery_address\` varchar(100) not null,</span></span>
<span class="line"><span style="color:#24292E;">  \`create_time\` timestamp not null DEFAULT CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="color:#24292E;">    PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">create table \`goods\` (</span></span>
<span class="line"><span style="color:#24292E;">  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#24292E;">  \`goods_code\` varchar(50) not null,</span></span>
<span class="line"><span style="color:#24292E;">  \`goods_name\` varchar(50) not null,</span></span>
<span class="line"><span style="color:#24292E;">  \`goods_price\` double not null,</span></span>
<span class="line"><span style="color:#24292E;">  \`create_time\` timestamp not null DEFAULT CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="color:#24292E;">    PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">create table \`order_goods\` (</span></span>
<span class="line"><span style="color:#24292E;">    \`order_id\` bigint(20) not null,</span></span>
<span class="line"><span style="color:#24292E;">    \`goods_id\` bigint(20) not null,</span></span>
<span class="line"><span style="color:#24292E;">    foreign key(\`order_id\`) references \`order\`(\`id\`),</span></span>
<span class="line"><span style="color:#24292E;">    foreign key(\`goods_id\`) references \`goods\`(\`id\`)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>基于以上数据模型，我们将完成 order-server 中的 Repository 层组件的设计和实现。首先，我们需要设计一个 OrderRepository 接口，用来抽象数据库访问的入口，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Order </span><span style="color:#B392F0;">addOrder</span><span style="color:#E1E4E8;">(Order </span><span style="color:#FFAB70;">order</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Order </span><span style="color:#B392F0;">getOrderById</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Order </span><span style="color:#B392F0;">getOrderDetailByOrderNumber</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">orderNumber</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Order </span><span style="color:#6F42C1;">addOrder</span><span style="color:#24292E;">(Order </span><span style="color:#E36209;">order</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Order </span><span style="color:#6F42C1;">getOrderById</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Order </span><span style="color:#6F42C1;">getOrderDetailByOrderNumber</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">orderNumber</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个接口非常简单，方法都是自解释的。不过请注意，这里的 OrderRepository 并没有继承任何父接口，完全是一个自定义的、独立的 Repository。</p><p>针对上述 OrderRepository 中的接口定义，我们将构建一系列的实现类。</p><ul><li><p>OrderRawJdbcRepository：使用原生 JDBC 进行数据库访问</p></li><li><p>OrderJdbcRepository：使用 JdbcTemplate 进行数据库访问</p></li><li><p>OrderJpaRepository：使用 Spring Data JPA 进行数据库访问</p></li></ul><p>上述实现类中的 OrderJpaRepository 我们会放到 10 讲《ORM 集成：如何使用 Spring Data JPA 访问关系型数据库？》中进行展开，而 OrderRawJdbcRepository 最基础，不是本课程的重点，因此 07 讲我们只针对 OrderRepository 中 getOrderById 方法的实现过程重点介绍，也算是对 06 讲的回顾和扩展。</p><p>OrderRawJdbcRepository 类中实现方法如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderRawJdbcRepository&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderRawJdbcRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DataSource dataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">getOrderById</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        PreparedStatement statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ResultSet resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select id, order_number, delivery_address from \`order\` where id=?&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            statement.</span><span style="color:#B392F0;">setLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resultSet.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">(resultSet.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">), resultSet.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;order_number&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                        resultSet.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delivery_address&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SQLException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resultSet </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    resultSet.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SQLException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (statement </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    statement.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SQLException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (connection </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    connection.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (SQLException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//省略其他 OrderRepository 接口方法实现</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderRawJdbcRepository&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderRawJdbcRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DataSource dataSource;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">getOrderById</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        PreparedStatement statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ResultSet resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select id, order_number, delivery_address from \`order\` where id=?&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            statement.</span><span style="color:#6F42C1;">setLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, orderId);</span></span>
<span class="line"><span style="color:#24292E;">            resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resultSet.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">(resultSet.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">), resultSet.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;order_number&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                        resultSet.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delivery_address&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SQLException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (resultSet </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    resultSet.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SQLException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (statement </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    statement.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SQLException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (connection </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    connection.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SQLException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//省略其他 OrderRepository 接口方法实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，值得注意的是，我们首先需要在类定义上添加 @Repository 注解，标明这是能够被 Spring 容器自动扫描的 Javabean，再在 @Repository 注解中指定这个 Javabean 的名称为&quot;orderRawJdbcRepository&quot;，方便 Service 层中根据该名称注入 OrderRawJdbcRepository 类。</p><p>可以看到，上述代码使用了 JDBC 原生 DataSource、Connection、PreparedStatement、ResultSet 等核心编程对象完成针对&quot;order&quot;表的一次查询。代码流程看起来比较简单，其实也比较烦琐，学到这里，我们可以结合上一课时的内容理解上述代码。</p><p>请注意，如果我们想运行这些代码，千万别忘了在 Spring Boot 的配置文件中添加对 DataSource 的定义，如下代码所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  datasource:</span></span>
<span class="line"><span style="color:#E1E4E8;">    driver-class-name: com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">    url: jdbc:mysql://127.0.0.1:3306/appointment</span></span>
<span class="line"><span style="color:#E1E4E8;">    username: root</span></span>
<span class="line"><span style="color:#E1E4E8;">    password: root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  datasource:</span></span>
<span class="line"><span style="color:#24292E;">    driver-class-name: com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">    url: jdbc:mysql://127.0.0.1:3306/appointment</span></span>
<span class="line"><span style="color:#24292E;">    username: root</span></span>
<span class="line"><span style="color:#24292E;">    password: root</span></span></code></pre></div><p>回顾完原生 JDBC 的使用方法，接下来就引出今天的重点，即 JdbcTemplate 模板工具类，我们来看看它如何简化数据访问操作。</p><h3 id="使用-jdbctemplate-操作数据库" tabindex="-1">使用 JdbcTemplate 操作数据库 <a class="header-anchor" href="#使用-jdbctemplate-操作数据库" aria-label="Permalink to &quot;使用 JdbcTemplate 操作数据库&quot;">​</a></h3><p>要想在应用程序中使用 JdbcTemplate，首先我们需要引入对它的依赖，如下代码所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-jdbc&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-jdbc&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>JdbcTemplate 提供了一系列的 query、update、execute 重载方法应对数据的 CRUD 操作。</p><h4 id="使用-jdbctemplate-实现查询" tabindex="-1">使用 JdbcTemplate 实现查询 <a class="header-anchor" href="#使用-jdbctemplate-实现查询" aria-label="Permalink to &quot;使用 JdbcTemplate 实现查询&quot;">​</a></h4><p>基于 SpringCSS 案例，我们先来讨论一下最简单的查询操作，并对 OrderRawJdbcRepository 中的 getOrderById 方法进行重构。为此，我们构建了一个新的 OrderJdbcRepository 类并同样实现了 OrderRepository 接口，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderJdbcRepository&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderJdbcRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderRepository</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> JdbcTemplate jdbcTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderJdbcRepository</span><span style="color:#E1E4E8;">(JdbcTemplate </span><span style="color:#FFAB70;">jdbcTemplate</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.jdbcTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbcTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderJdbcRepository&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderJdbcRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderRepository</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> JdbcTemplate jdbcTemplate;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderJdbcRepository</span><span style="color:#24292E;">(JdbcTemplate </span><span style="color:#E36209;">jdbcTemplate</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.jdbcTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbcTemplate;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里通过构造函数注入了 JdbcTemplate 模板类。</p><p>而 OrderJdbcRepository 的 getOrderById 方法实现过程如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">getOrderById</span><span style="color:#E1E4E8;">(Long orderId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbcTemplate.</span><span style="color:#B392F0;">queryForObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select id, order_number, delivery_address from \`order\` where id=?&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">mapRowToOrder, orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">getOrderById</span><span style="color:#24292E;">(Long orderId) {</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbcTemplate.</span><span style="color:#6F42C1;">queryForObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select id, order_number, delivery_address from \`order\` where id=?&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">mapRowToOrder, orderId);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这里使用了 JdbcTemplate 的 queryForObject 方法执行查询操作，该方法传入目标 SQL、参数以及一个 RowMapper 对象。其中 RowMapper 定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RowMapper</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    T </span><span style="color:#B392F0;">mapRow</span><span style="color:#E1E4E8;">(ResultSet </span><span style="color:#FFAB70;">rs</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">rowNum</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RowMapper</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    T </span><span style="color:#6F42C1;">mapRow</span><span style="color:#24292E;">(ResultSet </span><span style="color:#E36209;">rs</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rowNum</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 mapRow 方法定义中，我们不难看出 RowMapper 的作用就是处理来自 ResultSet 中的每一行数据，并将来自数据库中的数据映射成领域对象。例如，使用 getOrderById 中用到的 mapRowToOrder 方法完成对 Order 对象的映射，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">mapRowToOrder</span><span style="color:#E1E4E8;">(ResultSet rs, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rowNum) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">(rs.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">), rs.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;order_number&quot;</span><span style="color:#E1E4E8;">), rs.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delivery_address&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">mapRowToOrder</span><span style="color:#24292E;">(ResultSet rs, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rowNum) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">(rs.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">), rs.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;order_number&quot;</span><span style="color:#24292E;">), rs.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delivery_address&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>讲到这里，你可能注意到 getOrderById 方法实际上只是获取了 Order 对象中的订单部分信息，并不包含商品数据。</p><p>接下来，我们再来设计一个 getOrderDetailByOrderNumber 方法，根据订单编号获取订单以及订单中所包含的所有商品信息，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">getOrderDetailByOrderNumber</span><span style="color:#E1E4E8;">(String orderNumber) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取 Order 基础信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbcTemplate.</span><span style="color:#B392F0;">queryForObject</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;select id, order_number, delivery_address from \`order\` where order_number=?&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">mapRowToOrder,</span></span>
<span class="line"><span style="color:#E1E4E8;">                orderNumber);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (order </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取 Order 与 Goods 之间的关联关系，找到给 Order 中的所有 GoodsId</span></span>
<span class="line"><span style="color:#E1E4E8;">        Long orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; goodsIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbcTemplate.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select order_id, goods_id from order_goods where order_id=?&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ResultSetExtractor&lt;List&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">extractData</span><span style="color:#E1E4E8;">(ResultSet </span><span style="color:#FFAB70;">rs</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException, DataAccessException {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        List&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (rs.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(rs.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;goods_id&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }, orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据 GoodsId 分别获取 Goods 信息并填充到 Order 对象中</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Long goodsId </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> goodsIds) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Goods goods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getGoodsById</span><span style="color:#E1E4E8;">(goodsId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            order.</span><span style="color:#B392F0;">addGoods</span><span style="color:#E1E4E8;">(goods);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">getOrderDetailByOrderNumber</span><span style="color:#24292E;">(String orderNumber) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取 Order 基础信息</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbcTemplate.</span><span style="color:#6F42C1;">queryForObject</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;select id, order_number, delivery_address from \`order\` where order_number=?&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">mapRowToOrder,</span></span>
<span class="line"><span style="color:#24292E;">                orderNumber);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (order </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取 Order 与 Goods 之间的关联关系，找到给 Order 中的所有 GoodsId</span></span>
<span class="line"><span style="color:#24292E;">        Long orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; goodsIds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbcTemplate.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select order_id, goods_id from order_goods where order_id=?&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ResultSetExtractor&lt;List&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">extractData</span><span style="color:#24292E;">(ResultSet </span><span style="color:#E36209;">rs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException, DataAccessException {</span></span>
<span class="line"><span style="color:#24292E;">                        List&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (rs.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                            list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(rs.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;goods_id&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }, orderId);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据 GoodsId 分别获取 Goods 信息并填充到 Order 对象中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Long goodsId </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> goodsIds) {</span></span>
<span class="line"><span style="color:#24292E;">            Goods goods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getGoodsById</span><span style="color:#24292E;">(goodsId);</span></span>
<span class="line"><span style="color:#24292E;">            order.</span><span style="color:#6F42C1;">addGoods</span><span style="color:#24292E;">(goods);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码有点复杂，我们分成几个部分来讲解。</p><p>首先，我们获取 Order 基础信息，并通过 Order 中的 Id 编号从中间表中获取所有 Goods 的 Id 列表，通过遍历这个 Id 列表再分别获取 Goods 信息，最后将 Goods 信息填充到 Order 中，从而构建一个完整的 Order 对象。</p><p>这里通过 Id 获取 Goods 数据的实现方法也与 getOrderById 方法的实现过程一样，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Goods </span><span style="color:#B392F0;">getGoodsById</span><span style="color:#E1E4E8;">(Long goodsId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jdbcTemplate.</span><span style="color:#B392F0;">queryForObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select id, goods_code, goods_name, price from goods where id=?&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">mapRowToGoods, goodsId);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Goods </span><span style="color:#B392F0;">mapRowToGoods</span><span style="color:#E1E4E8;">(ResultSet rs, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rowNum) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Goods</span><span style="color:#E1E4E8;">(rs.</span><span style="color:#B392F0;">getLong</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">), rs.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;goods_code&quot;</span><span style="color:#E1E4E8;">), rs.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;goods_name&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                rs.</span><span style="color:#B392F0;">getDouble</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;price&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Goods </span><span style="color:#6F42C1;">getGoodsById</span><span style="color:#24292E;">(Long goodsId) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jdbcTemplate.</span><span style="color:#6F42C1;">queryForObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select id, goods_code, goods_name, price from goods where id=?&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">mapRowToGoods, goodsId);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Goods </span><span style="color:#6F42C1;">mapRowToGoods</span><span style="color:#24292E;">(ResultSet rs, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rowNum) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Goods</span><span style="color:#24292E;">(rs.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">), rs.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;goods_code&quot;</span><span style="color:#24292E;">), rs.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;goods_name&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                rs.</span><span style="color:#6F42C1;">getDouble</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="使用-jdbctemplate-实现插入" tabindex="-1">使用 JdbcTemplate 实现插入 <a class="header-anchor" href="#使用-jdbctemplate-实现插入" aria-label="Permalink to &quot;使用 JdbcTemplate 实现插入&quot;">​</a></h4><p>在 JdbcTemplate 中，我们可以通过 update 方法实现数据的插入和更新。针对 Order 和 Goods 中的关联关系，插入一个 Order 对象需要同时完成两张表的更新，即 order 表和 order_goods 表，因此插入 Order 的实现过程也分成两个阶段，如下代码所示的 addOrderWithJdbcTemplate 方法展示了这一过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">addOrderDetailWithJdbcTemplate</span><span style="color:#E1E4E8;">(Order order) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//插入 Order 基础信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        Long orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveOrderWithJdbcTemplate</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//插入 Order 与 Goods 的对应关系</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Goods</span><span style="color:#E1E4E8;">&gt; goodsList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getGoods</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Goods goods </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> goodsList) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">saveGoodsToOrderWithJdbcTemplate</span><span style="color:#E1E4E8;">(goods, orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">addOrderDetailWithJdbcTemplate</span><span style="color:#24292E;">(Order order) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//插入 Order 基础信息</span></span>
<span class="line"><span style="color:#24292E;">        Long orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveOrderWithJdbcTemplate</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//插入 Order 与 Goods 的对应关系</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Goods</span><span style="color:#24292E;">&gt; goodsList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getGoods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Goods goods </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> goodsList) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">saveGoodsToOrderWithJdbcTemplate</span><span style="color:#24292E;">(goods, orderId);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里同样先是插入 Order 的基础信息，然后再遍历 Order 中的 Goods 列表并逐条进行插入。其中的 saveOrderWithJdbcTemplate 方法如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long </span><span style="color:#B392F0;">saveOrderWithJdbcTemplate</span><span style="color:#E1E4E8;">(Order order) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        PreparedStatementCreator psc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PreparedStatementCreator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PreparedStatement </span><span style="color:#B392F0;">createPreparedStatement</span><span style="color:#E1E4E8;">(Connection </span><span style="color:#FFAB70;">con</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">                PreparedStatement ps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> con.</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;insert into \`order\` (order_number, delivery_address) values (?, ?)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Statement.RETURN_GENERATED_KEYS);</span></span>
<span class="line"><span style="color:#E1E4E8;">                ps.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, order.</span><span style="color:#B392F0;">getOrderNumber</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                ps.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, order.</span><span style="color:#B392F0;">getDeliveryAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ps;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        KeyHolder keyHolder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKeyHolder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        jdbcTemplate.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(psc, keyHolder);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> keyHolder.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">longValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long </span><span style="color:#6F42C1;">saveOrderWithJdbcTemplate</span><span style="color:#24292E;">(Order order) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        PreparedStatementCreator psc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PreparedStatementCreator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PreparedStatement </span><span style="color:#6F42C1;">createPreparedStatement</span><span style="color:#24292E;">(Connection </span><span style="color:#E36209;">con</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">                PreparedStatement ps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> con.</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;insert into \`order\` (order_number, delivery_address) values (?, ?)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        Statement.RETURN_GENERATED_KEYS);</span></span>
<span class="line"><span style="color:#24292E;">                ps.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, order.</span><span style="color:#6F42C1;">getOrderNumber</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                ps.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, order.</span><span style="color:#6F42C1;">getDeliveryAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ps;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        KeyHolder keyHolder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKeyHolder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        jdbcTemplate.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(psc, keyHolder);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> keyHolder.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">longValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述 saveOrderWithJdbcTemplate 的方法比想象中要复杂，主要原因在于我们需要在插入 order 表的同时返回数据库中所生成的自增主键，因此，这里使用了 PreparedStatementCreator 工具类封装 PreparedStatement 对象的构建过程，并在 PreparedStatement 的创建过程中设置了 Statement.RETURN_GENERATED_KEYS 用于返回自增主键。然后我们构建了一个 GeneratedKeyHolder 对象用于保存所返回的自增主键。这是使用 JdbcTemplate 实现带有自增主键数据插入的一种标准做法，你可以参考这一做法并应用到日常开发过程中。</p><p>至于用于插入 Order 与 Goods 关联关系的 saveGoodsToOrderWithJdbcTemplate 方法就比较简单了，直接调用 JdbcTemplate 的 update 方法插入数据即可，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveGoodsToOrderWithJdbcTemplate</span><span style="color:#E1E4E8;">(Goods goods, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> orderId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        jdbcTemplate.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;insert into order_goods (order_id, goods_id) &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;values (?, ?)&quot;</span><span style="color:#E1E4E8;">, orderId, goods.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveGoodsToOrderWithJdbcTemplate</span><span style="color:#24292E;">(Goods goods, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> orderId) {</span></span>
<span class="line"><span style="color:#24292E;">        jdbcTemplate.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;insert into order_goods (order_id, goods_id) &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;values (?, ?)&quot;</span><span style="color:#24292E;">, orderId, goods.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，我们需要实现插入 Order 的整个流程，先实现 Service 类和 Controller 类，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderJdbcRepository&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> OrderRepository orderRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">addOrder</span><span style="color:#E1E4E8;">(Order </span><span style="color:#FFAB70;">order</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderRepository.</span><span style="color:#B392F0;">addOrder</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orders&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">addOrder</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> Order </span><span style="color:#FFAB70;">order</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Order result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderService.</span><span style="color:#B392F0;">addOrder</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderJdbcRepository&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OrderRepository orderRepository;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">addOrder</span><span style="color:#24292E;">(Order </span><span style="color:#E36209;">order</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderRepository.</span><span style="color:#6F42C1;">addOrder</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orders&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">addOrder</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> Order </span><span style="color:#E36209;">order</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Order result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderService.</span><span style="color:#6F42C1;">addOrder</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这两个类都是直接对 orderJdbcRepository 中的方法进行封装调用，操作非常简单。然后，我们打开 Postman，并在请求消息体中输入如下内容：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;orderNumber&quot; : &quot;Order10002&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;deliveryAddress&quot; : &quot;test_address2&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;goods&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            &quot;id&quot;: 1,</span></span>
<span class="line"><span style="color:#E1E4E8;">            &quot;goodsCode&quot;: &quot;GoodsCode1&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">            &quot;goodsName&quot;: &quot;GoodsName1&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">            &quot;price&quot;: 100.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    &quot;orderNumber&quot; : &quot;Order10002&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;deliveryAddress&quot; : &quot;test_address2&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;goods&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            &quot;id&quot;: 1,</span></span>
<span class="line"><span style="color:#24292E;">            &quot;goodsCode&quot;: &quot;GoodsCode1&quot;,</span></span>
<span class="line"><span style="color:#24292E;">            &quot;goodsName&quot;: &quot;GoodsName1&quot;,</span></span>
<span class="line"><span style="color:#24292E;">            &quot;price&quot;: 100.0</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过 Postman 向<a href="http://localhost:8081/orders" target="_blank" rel="noreferrer">http://localhost:8081/orders</a>端点发起 Post 请求后，我们发现 order 表和 order_goods 表中的数据都已经正常插入。</p><h4 id="使用-simplejdbcinsert-简化数据插入过程" tabindex="-1">使用 SimpleJdbcInsert 简化数据插入过程 <a class="header-anchor" href="#使用-simplejdbcinsert-简化数据插入过程" aria-label="Permalink to &quot;使用 SimpleJdbcInsert 简化数据插入过程&quot;">​</a></h4><p>虽然通过 JdbcTemplate 的 update 方法可以完成数据的正确插入，我们不禁发现这个实现过程还是比较复杂，尤其是涉及自增主键的处理时，代码显得有点臃肿。那么有没有更加简单的实现方法呢？</p><p>答案是肯定的，Spring Boot 针对数据插入场景专门提供了一个 SimpleJdbcInsert 工具类，SimpleJdbcInsert 本质上是在 JdbcTemplate 的基础上添加了一层封装，提供了一组 execute、executeAndReturnKey 以及 executeBatch 重载方法来简化数据插入操作。</p><p>通常，我们可以在 Repository 实现类的构造函数中对 SimpleJdbcInsert 进行初始化，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> JdbcTemplate jdbcTemplate;</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SimpleJdbcInsert orderInserter;</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SimpleJdbcInsert orderGoodsInserter;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderJdbcRepository</span><span style="color:#E1E4E8;">(JdbcTemplate jdbcTemplate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.jdbcTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdbcTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.orderInserter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleJdbcInsert</span><span style="color:#E1E4E8;">(jdbcTemplate).</span><span style="color:#B392F0;">withTableName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\`order\`&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">usingGeneratedKeyColumns</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.orderGoodsInserter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleJdbcInsert</span><span style="color:#E1E4E8;">(jdbcTemplate).</span><span style="color:#B392F0;">withTableName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;order_goods&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> JdbcTemplate jdbcTemplate;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SimpleJdbcInsert orderInserter;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SimpleJdbcInsert orderGoodsInserter;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderJdbcRepository</span><span style="color:#24292E;">(JdbcTemplate jdbcTemplate) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.jdbcTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdbcTemplate;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.orderInserter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleJdbcInsert</span><span style="color:#24292E;">(jdbcTemplate).</span><span style="color:#6F42C1;">withTableName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\`order\`&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">usingGeneratedKeyColumns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.orderGoodsInserter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleJdbcInsert</span><span style="color:#24292E;">(jdbcTemplate).</span><span style="color:#6F42C1;">withTableName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;order_goods&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里首先注入了一个 JdbcTemplate 对象，然后我们基于 JdbcTemplate 并针对 order 表和 order_goods 表分别初始化了两个 SimpleJdbcInsert 对象 orderInserter 和 orderGoodsInserter。其中 orderInserter 中还使用了 usingGeneratedKeyColumns 方法设置自增主键列。</p><p>基于 SimpleJdbcInsert，完成 Order 对象的插入就非常简单了，实现方式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long </span><span style="color:#B392F0;">saveOrderWithSimpleJdbcInsert</span><span style="color:#E1E4E8;">(Order order) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        values.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;order_number&quot;</span><span style="color:#E1E4E8;">, order.</span><span style="color:#B392F0;">getOrderNumber</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        values.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delivery_address&quot;</span><span style="color:#E1E4E8;">, order.</span><span style="color:#B392F0;">getDeliveryAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Long orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderInserter.</span><span style="color:#B392F0;">executeAndReturnKey</span><span style="color:#E1E4E8;">(values).</span><span style="color:#B392F0;">longValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderId;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long </span><span style="color:#6F42C1;">saveOrderWithSimpleJdbcInsert</span><span style="color:#24292E;">(Order order) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        values.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;order_number&quot;</span><span style="color:#24292E;">, order.</span><span style="color:#6F42C1;">getOrderNumber</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        values.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delivery_address&quot;</span><span style="color:#24292E;">, order.</span><span style="color:#6F42C1;">getDeliveryAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Long orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderInserter.</span><span style="color:#6F42C1;">executeAndReturnKey</span><span style="color:#24292E;">(values).</span><span style="color:#6F42C1;">longValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderId;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过构建一个 Map 对象，然后把需要添加的字段设置成一个个键值对。通过SimpleJdbcInsert 的 executeAndReturnKey 方法在插入数据的同时直接返回自增主键。同样，完成 order_goods 表的操作只需要几行代码就可以了，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveGoodsToOrderWithSimpleJdbcInsert</span><span style="color:#E1E4E8;">(Goods goods, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> orderId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        values.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;order_id&quot;</span><span style="color:#E1E4E8;">, orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        values.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;goods_id&quot;</span><span style="color:#E1E4E8;">, goods.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderGoodsInserter.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(values);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveGoodsToOrderWithSimpleJdbcInsert</span><span style="color:#24292E;">(Goods goods, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> orderId) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        values.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;order_id&quot;</span><span style="color:#24292E;">, orderId);</span></span>
<span class="line"><span style="color:#24292E;">        values.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;goods_id&quot;</span><span style="color:#24292E;">, goods.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        orderGoodsInserter.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(values);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用到了 SimpleJdbcInsert 提供的 execute 方法，我们可以把这些方法组合起来对 addOrderDetailWithJdbcTemplate 方法进行重构，从而得到如下所示的 addOrderDetailWithSimpleJdbcInsert 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">addOrderDetailWithSimpleJdbcInsert</span><span style="color:#E1E4E8;">(Order order) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//插入 Order 基础信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        Long orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveOrderWithSimpleJdbcInsert</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//插入 Order 与 Goods 的对应关系</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Goods</span><span style="color:#E1E4E8;">&gt; goodsList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getGoods</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Goods goods </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> goodsList) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">saveGoodsToOrderWithSimpleJdbcInsert</span><span style="color:#E1E4E8;">(goods, orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">addOrderDetailWithSimpleJdbcInsert</span><span style="color:#24292E;">(Order order) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//插入 Order 基础信息</span></span>
<span class="line"><span style="color:#24292E;">        Long orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveOrderWithSimpleJdbcInsert</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//插入 Order 与 Goods 的对应关系</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Goods</span><span style="color:#24292E;">&gt; goodsList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getGoods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Goods goods </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> goodsList) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">saveGoodsToOrderWithSimpleJdbcInsert</span><span style="color:#24292E;">(goods, orderId);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>详细的代码清单可以参考课程的案例代码，你也可以基于 Postman 对重构后的代码进行尝试。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>JdbcTemplate 模板工具类是一个基于 JDBC 规范实现数据访问的强大工具，是一个优秀的工具类。它对常见的 CRUD 操作做了封装并提供了一大批简化的 API。今天我们分别针对查询和插入这两大类数据操作给出了基于 JdbcTemplate 的实现方案，特别是针对插入场景，我们还引入了基于 JdbcTemplate 所构建的 SimpleJdbcInsert 简化这一操作。</p><p>这里给你留一道思考题：在使用 JdbcTemplate 时，如果想要返回数据库的自增主键值有哪些实现方法？</p><p>在 Spring 中存在一组以 -Template 结尾的模板工具类，这些类都是模板方法这一设计模式的典型应用，同时还充分利用了回调机制完成解耦和扩展。在 08 讲中，我们将对 JdbcTemplate 的具体实现机制进行详细剖析。</p>`,74),e=[o];function r(t,c,E,y,i,d){return n(),a("div",null,e)}const g=s(l,[["render",r]]);export{F as __pageData,g as default};
