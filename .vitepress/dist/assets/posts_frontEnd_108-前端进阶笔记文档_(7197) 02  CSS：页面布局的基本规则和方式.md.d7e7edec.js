import{_ as o,j as e,o as t,h as c,k as a,f as s,Q as p,s as l}from"./chunks/framework.d3daa342.js";const R=JSON.parse('{"title":"02CSS：页面布局的基本规则和方式","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/108-前端进阶笔记文档/(7197) 02  CSS：页面布局的基本规则和方式.md","filePath":"posts/frontEnd/108-前端进阶笔记文档/(7197) 02  CSS：页面布局的基本规则和方式.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/108-前端进阶笔记文档/(7197) 02  CSS：页面布局的基本规则和方式.md"},E=p('<h1 id="_02css-页面布局的基本规则和方式" tabindex="-1">02CSS：页面布局的基本规则和方式 <a class="header-anchor" href="#_02css-页面布局的基本规则和方式" aria-label="Permalink to &quot;02CSS：页面布局的基本规则和方式&quot;">​</a></h1><p>前端页面的布局和样式编写是传统技能，但页面样式的实现大多数情况下都无法速成，需要通过不断练习、反复地调试才能熟练掌握，因此有一些同学常常会感到疑惑，比如：</p><ol><li><p>一个元素总宽高为<code>50px</code>，要怎么在调整边框大小的时候，不需要重新计算和设置<code>width/height</code>呢？</p></li><li><p>为什么给一些元素设置宽高，但是却不生效？</p></li><li><p>如何将一个元素固定在页面的某个位置，具体怎么做？</p></li><li><p>为什么将某个元素<code>z-index</code>设置为<code>9999999</code>，但是它依然被其他元素遮挡住了呢？</p></li><li><p>为什么将某个元素里面的元素设置为<code>float</code>之后，这个元素的高度就歪了呢？</p></li><li><p>让一个元素进行垂直和水平居中，有多少种实现方式？</p></li></ol><p>这些问题产生的根本，是对页面布局规则和常见页面布局方式没掌握透彻。今天我就帮你重新梳理下页面布局的基本规则和布局方式，让以上问题迎刃而解。</p><h3 id="页面布局的基本规则" tabindex="-1">页面布局的基本规则 <a class="header-anchor" href="#页面布局的基本规则" aria-label="Permalink to &quot;页面布局的基本规则&quot;">​</a></h3><p>我们在调试页面样式的时候，如果你不了解页面布局规则，会经常遇到&quot;这里为什么歪了&quot;&quot;这里为什么又好了&quot;这样的困惑。其实页面的布局不只是&quot;碰运气&quot;似的调整样式，浏览器的页面布局会有一些规则，包括：</p><ul><li><p>盒模型计算；</p></li><li><p>内联元素与块状元素布局规则；</p></li><li><p>文档流布局；</p></li><li><p>元素堆叠。</p></li></ul><p>下面我们可以结合问题逐一来看。</p><h4 id="盒模型计算" tabindex="-1">盒模型计算 <a class="header-anchor" href="#盒模型计算" aria-label="Permalink to &quot;盒模型计算&quot;">​</a></h4><p>问题 1：一个元素总宽高为<code>30px</code>，要怎么在调整边框大小的时候，不需要重新计算和设置<code>width/height</code>呢？</p><p>这个问题涉及浏览器布局中的盒模型计算。什么是盒模型？浏览器对文档进行布局的时候，会将每个元素都表示为这样一个盒子。</p>',11),y=p(`<p>这就是 CSS 基础盒模型，也就是我们常说的盒模型。盒模型主要用来描述元素所占空间的内容，它由四个部分组成：</p><ul><li><p>外边框边界<code>margin</code>（橙色部分）</p></li><li><p>边框边界<code>border</code>（黄色部分）</p></li><li><p>内边距边界<code>padding</code>（绿色部分）</p></li><li><p>内容边界<code>content</code>（蓝色部分）</p></li></ul><p>盒模型是根据元素的样式来进行计算的，我们可以通过调整元素的样式来改变盒模型。上图中的盒模型来自下面这个<code>&lt;div&gt;</code>元素，我们给这个元素设置了<code>margin</code>、<code>padding</code>和<code>border</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">.box-model-sample</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">margin</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">#000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;box-model-sample&quot;</span><span style="color:#E1E4E8;">&gt;这是一个div&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">.box-model-sample</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">margin</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">border</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">#000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;box-model-sample&quot;</span><span style="color:#24292E;">&gt;这是一个div&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在上述代码中，我们通过使用 CSS 样式来控制盒模型的大小和属性。盒模型还常用来控制元素的尺寸、属性（颜色、背景、边框等）和位置，当我们在调试样式的时，比较容易遇到以下这些场景。</p><p><strong>1</strong> . 盒模型会发生<code>margin</code>外边距叠加，叠加后的值会以最大边距为准。比如，我们给两个相邻的<code>&lt;div&gt;</code>元素分别设置了不同的<code>margin</code>外边距：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">.box-model-sample</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">margin</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">#000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">.large-margin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">margin</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;box-model-sample&quot;</span><span style="color:#E1E4E8;">&gt;这是一个div&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;box-model-sample&quot;</span><span style="color:#E1E4E8;">&gt;这是另一个div&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;box-model-sample large-margin&quot;</span><span style="color:#E1E4E8;">&gt;这是一个margin大一点的div&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">.box-model-sample</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">margin</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">padding</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">border</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">#000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">.large-margin</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">margin</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;box-model-sample&quot;</span><span style="color:#24292E;">&gt;这是一个div&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;box-model-sample&quot;</span><span style="color:#24292E;">&gt;这是另一个div&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;box-model-sample large-margin&quot;</span><span style="color:#24292E;">&gt;这是一个margin大一点的div&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>这段代码在浏览器中运行时，我们可以看到，两个<code>&lt;div&gt;</code>元素之间发生了<code>margin</code>外边距叠加，它们被合并成单个边距。</p>`,8),i=l("p",null,"如果两个元素的外边距不一样，叠加的值大小是各个边距中的最大值，比如上面第二个和第三个矩形之间的外边距值，使用的是第三个边框的外边距值 20 px。",-1),d=p(`<p>需要注意的是，并不是所有情况下都会发生外边距叠加，比如行内框、浮动框或绝对定位框之间的外边距不会叠加。</p><p><strong>2</strong> . 盒模型计算效果有多种，比如元素宽高是否包括了边框。我们可以通过<code>box-sizing</code>属性进行设置盒模型的计算方式，正常的盒模型默认值是<code>content-box</code>。</p><p>使用<code>box-sizing</code>属性可以解决问题 1（调整元素的边框时，不影响元素的宽高），我们可以将元素的<code>box-sizing</code>属性设置为<code>border-box</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  .box-model-sample {</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: 50px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    margin: 10px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    padding: 5px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    border: solid 2px #</span><span style="color:#79B8FF;">000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  .border-box {</span></span>
<span class="line"><span style="color:#E1E4E8;">    box</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sizing: border</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">box;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;box-model-sample&quot;</span><span style="color:#E1E4E8;">&gt;这是一个div(content-box)&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;box-model-sample border-box&quot;</span><span style="color:#E1E4E8;">&gt;这是另一个div(border-box)&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  .box-model-sample {</span></span>
<span class="line"><span style="color:#24292E;">    height: 50px;</span></span>
<span class="line"><span style="color:#24292E;">    margin: 10px;</span></span>
<span class="line"><span style="color:#24292E;">    padding: 5px;</span></span>
<span class="line"><span style="color:#24292E;">    border: solid 2px #</span><span style="color:#005CC5;">000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  .border-box {</span></span>
<span class="line"><span style="color:#24292E;">    box</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sizing: border</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">box;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;box-model-sample&quot;</span><span style="color:#24292E;">&gt;这是一个div(content-box)&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;box-model-sample border-box&quot;</span><span style="color:#24292E;">&gt;这是另一个div(border-box)&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>对于默认<code>content-box</code>的元素来说，元素所占的总宽高为设置的元素宽高(<code>width</code>/<code>height</code>)等于：<code>content + padding + border</code>，因此这里该元素总高度为<code>50 + 5 * 2 + 2 * 2 = 64px</code>。</p>`,5),g=l("p",null,[s("当我们设置为"),l("code",null,"border-box"),s("之后，元素所占的总宽高为设置的元素宽高("),l("code",null,"width"),s("/"),l("code",null,"height"),s(")，因此，此时高度为"),l("code",null,"50px"),s("：")],-1),F=p(`<p>也就是说，如果我们在调整元素边框的时候，不影响元素的宽高，可以给元素的<code>box-sizing</code>属性设置为<code>border-box</code>，这便是问题 1 的答案。通过这种方式，我们可以精确地控制元素的空间占位，同时还能灵活地调整元素边框和内边距。</p><p>虽然我们可以通过盒模型设置元素的占位情况，但是有些时候我们给元素设置宽高却不生效（见问题 2），这是因为元素本身的性质也做了区分，我们来看一下。</p><h4 id="内联元素与块状元素" tabindex="-1">内联元素与块状元素 <a class="header-anchor" href="#内联元素与块状元素" aria-label="Permalink to &quot;内联元素与块状元素&quot;">​</a></h4><p>在浏览器中，元素可分为内联元素和块状元素。比如，<code>&lt;a&gt;</code>元素为内联元素，<code>&lt;div&gt;</code>元素为块状元素，我们分别给它们设置宽高：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">style</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  a,</span></span>
<span class="line"><span style="color:#E1E4E8;">  div {</span></span>
<span class="line"><span style="color:#E1E4E8;">    width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 100px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 20px;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">style</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">123</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;&lt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">456</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;&lt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">789</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">123</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">456</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">789</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">style</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  a,</span></span>
<span class="line"><span style="color:#24292E;">  div {</span></span>
<span class="line"><span style="color:#24292E;">    width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 100px;</span></span>
<span class="line"><span style="color:#24292E;">    height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 20px;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">style</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">123</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;&lt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">456</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;&lt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">789</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">123</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">456</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">789</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>在浏览器中的效果如下图所示：</p>`,6),h=p(`<p>可以看到，<code>&lt;a&gt;</code>元素和<code>&lt;div&gt;</code>元素最主要的区别在于：</p><ul><li><p><code>&lt;a&gt;</code>元素（内联元素）可以和其他内联元素位于同一行，且宽高设置无效；</p></li><li><p><code>&lt;div&gt;</code>元素（块状元素）不可和其他元素位于同一行，且宽高设置有效。</p></li></ul><p>所以问题 2 的答案是，当我们给某个元素设置宽高不生效，是因为该元素为内联元素。那么有没有办法解决这个问题呢？</p><p>我们可以通过设置<code>display</code>的值来对元素进行调整。</p><ul><li><p>设置为<code>block</code>块状元素，此时可以设置宽度<code>width</code>和高度<code>height</code>。</p></li><li><p>设置为<code>inline</code>内联元素，此时宽度高度不起作用。</p></li><li><p>设置为<code>inline-block</code>，可以理解为块状元素和内联元素的结合，布局规则包括：</p><ul><li><p>位于块状元素或者其他内联元素内；</p></li><li><p>可容纳其他块状元素或内联元素；</p></li><li><p>宽度高度起作用。</p></li></ul></li></ul><p>除了内联元素和块状元素，我们还可以将元素设置为<code>inline-block</code>，<code>inline-block</code>可以很方便解决一些问题：使元素居中、给<code>inline</code>元素（<code>&lt;a&gt;</code>/<code>&lt;span&gt;</code>）设置宽高、将多个块状元素放在一行等。</p><h4 id="文档流和元素定位" tabindex="-1">文档流和元素定位 <a class="header-anchor" href="#文档流和元素定位" aria-label="Permalink to &quot;文档流和元素定位&quot;">​</a></h4><p>接下来，我们来看问题 3：将一个元素固定在页面的某个位置，可以怎么做？这个问题涉及文档流的布局和元素定位的样式设置。</p><p>什么是文档流呢？正常的文档流在 HTML 里面为从上到下，从左到右的排版布局。</p><p>文档流布局方式可以使用<code>position</code>样式进行调整，包括：<code>static</code>（默认值）、<code>inherit</code>（继承父元素）、<code>relative</code>（相对定位）、<code>absolute</code>（相对非<code>static</code>父元素绝对定位）、<code>fixed</code>（相对浏览器窗口进行绝对定位）。</p><p>我们来分别看下这些<code>position</code>样式设置效果。</p><p><strong>1</strong> . 元素<code>position</code>样式属性值为<code>static</code>(默认值)时，元素会忽略<code>top</code>/<code>bottom</code>/<code>left</code>/<code>right</code>或者<code>z-index</code>声明，比如我们给部分元素设置<code>position: static</code>的样式以及<code>left</code>和<code>top</code>定位 ：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">, </span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">position</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">static</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">left</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">top</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">a</span><span style="color:#24292E;">, </span><span style="color:#22863A;">p</span><span style="color:#24292E;">, </span><span style="color:#22863A;">div</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">.static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">position</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">static</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">left</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">top</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在<a href="https://about-position-1255459943.file.myqcloud.com/position-static.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">浏览器</a>中，我们可以看到给<code>position: static</code>的元素添加定位<code>left: 100px; top: 100px;</code>是无效的。</p>`,14),C=p(`<p>（static 元素的定位设置无效果）</p><p><strong>2</strong> . 元素<code>position</code>样式属性值为<code>relative</code>时，元素会保持原有文档流，但相对本身的原始位置发生位移，且会占用空间，比如我们给部分元素设置<code>position: relative</code>样式以及<code>left</code>和<code>top</code>定位：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">, </span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.relative</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">position</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">relative</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">left</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">top</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">a</span><span style="color:#24292E;">, </span><span style="color:#22863A;">p</span><span style="color:#24292E;">, </span><span style="color:#22863A;">div</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">.relative</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">position</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">relative</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">left</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">top</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在<a href="https://about-position-1255459943.file.myqcloud.com/position-relative.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">浏览器</a>中，我们可以看到<code>position: relative</code>的元素相对于其正常位置进行定位，元素占有原本位置（文档流中占有的位置与其原本位置相同），因此下一个元素会排到该元素后方。</p>`,4),x=l("p",null,"(relative 定位的元素，定位设置可生效)",-1),_=l("p",null,[s("这里有个需要注意的地方：虽然"),l("code",null,"relative"),s("元素占位与"),l("code",null,"static"),s("相同，但会溢出父元素，撑开整个页面。如下图所示，我们能看到"),l("a",{href:"https://about-position-1255459943.file.myqcloud.com/position-relative-occupation.html?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"浏览器中"),l("code",null,"relative"),s("元素撑开父元素看到页面底部有滚动条。")],-1),u=l("p",null,"(relative 定位的元素，可撑开父元素)",-1),A=l("p",null,[s("此时给父元素设置"),l("code",null,"overflow: hidden;"),s("则可以隐藏溢出部分。")],-1),v=p(`<p>（通过设置<code>overflow: hidden</code>可隐藏溢出部分元素）</p><p><strong>3</strong> . 元素<code>position</code>样式属性值为<code>absolute</code>、且设置了定位（<code>top</code>/<code>bottom</code>/<code>left</code>/<code>right</code>）时，元素会脱离文档流，相对于其包含块来定位，且不占位，比如我们给<code>position: absolute</code>的元素设置<code>left</code>和<code>top</code>定位 ：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.parent</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">300</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.parent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">300</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.absolute</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">position</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">absolute</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">left</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.parent</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">300</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">.parent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#22863A;">div</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">border</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">solid</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">px</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">300</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">.absolute</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">position</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">absolute</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">left</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在<a href="https://about-position-1255459943.file.myqcloud.com/position-absolute.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">浏览器</a>中，我们可以看到<code>position: absolute</code>的元素不占位，因此下一个符合普通流的元素会略过<code>absolute</code>元素排到其上一个元素的后方。</p>`,4),b=p('<p>（absolute 元素不占位）</p><p><strong>4</strong> . 元素<code>position</code>样式属性值为<code>fixed</code>时，元素脱离文档流、且不占位，此时看上去与<code>absolute</code>相似。但当我们进行<a href="https://about-position-1255459943.file.myqcloud.com/position-fixed-absolute.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">页面</a>滚动的时候，会发现<code>fixed</code>元素位置没有发生变化。</p>',2),m=p('<p>（fixed 元素同样不占位）</p><p>这是因为<code>fixed</code>元素相对于浏览器窗口进行定位，而<code>absolute</code>元素只有在满足&quot;无<code>static</code>定位以外的父元素&quot;的时候，才会相对于<code>document</code>进行定位。</p><p>回到问题 3，将一个元素固定在页面的某个位置，可以通过给元素或是其父类元素添加<code>position: fixed</code>或者<code>position: absolute</code>将其固定在浏览器窗口或是文档页面中。</p><p>使用元素定位可以将某个元素固定，那么同一个位置中存在多个元素的时候，就会发生元素的堆叠。</p><h4 id="元素堆叠-z-index" tabindex="-1">元素堆叠 z-index <a class="header-anchor" href="#元素堆叠-z-index" aria-label="Permalink to &quot;元素堆叠 z-index&quot;">​</a></h4><p>元素的堆叠方式和顺序，除了与<code>position</code>定位有关，也与<code>z-index</code>有关。通过设置<code>z-index</code>值，我们可以设置元素的堆叠顺序，比如我们给同级的元素添加<code>z-index值</code>：</p>',6),D=p(`<p>（z-index 可改变元素堆叠顺序）</p><p>在<a href="https://about-position-1255459943.file.myqcloud.com/position-z-index-same-level.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">浏览器</a>中，我们可以看到：</p><ul><li><p>当同级元素不设置<code>z-index</code>或者<code>z-index</code>相等时，后面的元素会叠在前面的元素上方；</p></li><li><p>当同级元素<code>z-index</code>不同时，<code>z-index</code>大的元素会叠在<code>z-index</code>小的元素上方。</p></li></ul><p><code>z-index</code>样式属性比较常用于多个元素层级控制的时候，比如弹窗一般需要在最上层，就可以通过设置较大的<code>z-index</code>值来控制。</p><p>那么，我们来看问题 4： 为什么将某个元素<code>z-index</code>设置为<code>9999999</code>，但是它依然被其他元素遮挡住了呢？</p><p>这是因为除了同级元素以外，<code>z-index</code>值的设置效果还会受到父元素的<code>z-index</code>值的影响。<code>z-index</code>值的设置只决定同一父元素中的同级子元素的堆叠顺序。因此，即使将某个元素<code>z-index</code>设置为<code>9999999</code>，它依然可能因为父元素的<code>z-index</code>值小于其他父元素同级的元素，而导致该元素依然被其他元素遮挡。</p><p>现在，我们解答了问题 1~4，同时还学习了关于 CSS 页面布局的核心规则，包括：</p><ul><li><p>盒模型主要用来描述元素所占空间的内容；</p></li><li><p>一个元素属于内联元素还是块状元素，会影响它是否可以和其他元素位于同一行、宽高设置是否有效；</p></li><li><p>正常的文档流在 HTML 里面为从上到下、从左到右的排版布局，使用<code>position</code>属性可以使元素脱离正常的文档流；</p></li><li><p>使用<code>z-index</code>属性可以设置元素的堆叠顺序。</p></li></ul><p>掌握了这些页面布局的规则，可以解决我们日常页面中单个元素样式调整中的大多数问题。对于进行整体的页面布局，比如设置元素居中、排版、区域划分等，涉及多个元素的布局，这种情况下常常会用到 Flex、Grid 这样的页面布局方式。下面我们一起来看看。</p><h3 id="常见页面布局方式" tabindex="-1">常见页面布局方式 <a class="header-anchor" href="#常见页面布局方式" aria-label="Permalink to &quot;常见页面布局方式&quot;">​</a></h3><p>在我们的日常工作中，实现页面的 UI 样式除了会遇到单个元素的样式调整外，还需要对整个页面进行结构布局，比如将页面划分为左中右、上中下模块，实现某些模块的居中对齐，实现页面的响应式布局，等等。</p><p>要实现对页面的排版布局，需要使用到一些页面布局方式。目前来说，比较常见的布局方式主要有三种：</p><ul><li><p>传统布局方式；</p></li><li><p>Flex 布局方式；</p></li><li><p>Grid 布局方式。</p></li></ul><h4 id="传统布局" tabindex="-1">传统布局 <a class="header-anchor" href="#传统布局" aria-label="Permalink to &quot;传统布局&quot;">​</a></h4><p>传统布局方式基本上使用上面介绍的布局规则，结合<code>display</code>/<code>position</code>/<code>float</code>属性以及一些边距、x/y 轴距离等方式来进行布局。</p><p>除了使用<code>position: fixed</code>或者<code>position: absolute</code>时，会使元素脱离文档流，使用<code>float</code>属性同样会导致元素脱离文档流。</p><p>这就涉及问题 5：为什么将某个元素里面的元素设置为<code>float</code>之后，这个元素的高度就歪了呢？</p><p>这是因为当我们给元素的<code>float</code>属性赋值后，元素会脱离文档流，进行左右浮动，比如这里我们将其中一个<code>&lt;div&gt;</code>元素添加了<code>float</code>属性 ：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  div {</span></span>
<span class="line"><span style="color:#E1E4E8;">    border: solid 1px red;</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: 50px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: 50px;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  .float {</span></span>
<span class="line"><span style="color:#E1E4E8;">    float: left;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;1&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">&gt;2&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">&gt;3&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;4&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;5&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;float&quot;</span><span style="color:#E1E4E8;">&gt;6&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  div {</span></span>
<span class="line"><span style="color:#24292E;">    border: solid 1px red;</span></span>
<span class="line"><span style="color:#24292E;">    width: 50px;</span></span>
<span class="line"><span style="color:#24292E;">    height: 50px;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  .float {</span></span>
<span class="line"><span style="color:#24292E;">    float: left;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">&gt;2&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">&gt;3&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;4&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;5&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;float&quot;</span><span style="color:#24292E;">&gt;6&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>我们可以在<a href="https://about-position-1255459943.file.myqcloud.com/display-float.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">浏览器</a>中看到，<code>float</code>元素会紧贴着父元素或者是上一个同级同浮动元素的边框：</p>`,20),B=p(`<p>可以看到当元素设置为<code>float</code>之后，它就脱离文档流，同时也不再占据原本的空间。</p><p>因此，问题 5 的答案为：本属于普通流中的元素浮动之后，父元素内部如果不存在其他普通流元素了，就会表现出高度为 0，又称为高度塌陷。</p><p>在这样的情况下，我们可以使用以下方法撑开父元素：</p><ul><li><p>父元素使用<code>overflow: hidden</code>（此时高度为<code>auto</code>）；</p></li><li><p>使父元素也成为浮动<code>float</code>元素；</p></li><li><p>使用<code>clear</code>清除浮动。</p></li></ul><p>除了 <code>clear</code> 清除浮动之外，这些方法为什么可以达到撑开父元素的效果呢，这是因为 BFC（Block Formatting Context，块格式化上下文）的特性。BFC 是 Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域，详情大家可以私下了解下。</p><p>传统方式布局的优势在于兼容性较好，在一些版本较低的浏览器上也能给到用户较友好的体验。但传统布局需要掌握的知识较多也相对复杂，对于整个页面的布局和排版实现，常常是基于盒模型、使用<code>display</code>属性+<code>position</code>属性+<code>float</code>属性的方式来进行，这个过程比较烦琐，因此更多时候我们都会使用开源库（比如 bootstrap）来完成页面布局。</p><p>后来 W3C 提出了新的布局方式，可以快速、简便地实现页面的排版布局，新的布局方式包括 Flex 布局和 Grid 布局。</p><h4 id="使用-flex-布局" tabindex="-1">使用 Flex 布局 <a class="header-anchor" href="#使用-flex-布局" aria-label="Permalink to &quot;使用 Flex 布局&quot;">​</a></h4><p>Flex 布局（又称为 flexbox）是一种一维的布局模型。在使用此布局时，需掌握几个概念。</p><ol><li><p>flexbox 的两根轴线。其中，主轴由<code>flex-direction</code>定义，交叉轴则垂直于主轴。</p></li><li><p>在 flexbox 中，使用起始和终止来描述布局方向。</p></li><li><p>认识 flex 容器和 flex 元素。</p></li></ol><p>想熟练使用 Flex 布局，我们需要了解什么是 flex 容器和 flex 元素。比如我们给一个父元素<code>div</code>设置<code>display: flex;</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  div {</span></span>
<span class="line"><span style="color:#E1E4E8;">    border: solid 1px #</span><span style="color:#79B8FF;">000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    margin: 10px;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  .box {</span></span>
<span class="line"><span style="color:#E1E4E8;">    display: flex;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;box&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;1&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;2&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;3 &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;"> /&gt;有其他 &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;"> /&gt;内容&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  div {</span></span>
<span class="line"><span style="color:#24292E;">    border: solid 1px #</span><span style="color:#005CC5;">000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    margin: 10px;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  .box {</span></span>
<span class="line"><span style="color:#24292E;">    display: flex;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;box&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;2&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;3 &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;"> /&gt;有其他 &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;"> /&gt;内容&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在浏览器中的效果就会如图所示：</p>`,13),f=p(`<p>其中，flex 容器为<code>&lt;div class=&quot;box&quot;&gt;</code>元素及其内部区域，而容器的直系子元素（1、2、3 这 3 个<code>&lt;div&gt;</code>）为 flex 元素。</p><p>在掌握了 flex 容器和 flex 元素之后，我们就可以通过调整 flexbox 轴线方向、排列方向和对齐方式的方式，实现需要的页面效果。</p><p>Flex 布局种常用的方式包括：</p><ul><li><p>通过<code>flex-direction</code>调整 Flex 元素的排列方向（主轴的方向）；</p></li><li><p>用<code>flex-wrap</code>实现多行 Flex 容器如何换行；</p></li><li><p>使用<code>justify-content</code>调整 Flex 元素在主轴上的对齐方式；</p></li><li><p>使用<code>align-items</code>调整 Flex 元素在交叉轴上如何对齐；</p></li><li><p>使用<code>align-content</code>调整多根轴线的对齐方式。</p></li></ul><p>Flex 布局给<code>flexbox</code>的子元素之间提供了强大的空间分布和对齐能力，我们可以方便地使用 Flex 布局来实现垂直和水平居中，比如通过将元素设置为<code>display: flex;</code>，并配合使用<code>align-items: center;</code>、<code>justify-content: center;</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  div {</span></span>
<span class="line"><span style="color:#E1E4E8;">    border: solid 1px #</span><span style="color:#79B8FF;">000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  .box {</span></span>
<span class="line"><span style="color:#E1E4E8;">    display: flex;</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: 200px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: 200px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    align</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">items: center;</span></span>
<span class="line"><span style="color:#E1E4E8;">    justify</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">content: center;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  .in-box {</span></span>
<span class="line"><span style="color:#E1E4E8;">    width: 80px;</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: 80px;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;box&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;in-box&quot;</span><span style="color:#E1E4E8;">&gt;我想要垂直水平居中&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  div {</span></span>
<span class="line"><span style="color:#24292E;">    border: solid 1px #</span><span style="color:#005CC5;">000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  .box {</span></span>
<span class="line"><span style="color:#24292E;">    display: flex;</span></span>
<span class="line"><span style="color:#24292E;">    width: 200px;</span></span>
<span class="line"><span style="color:#24292E;">    height: 200px;</span></span>
<span class="line"><span style="color:#24292E;">    align</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">items: center;</span></span>
<span class="line"><span style="color:#24292E;">    justify</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">content: center;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  .in-box {</span></span>
<span class="line"><span style="color:#24292E;">    width: 80px;</span></span>
<span class="line"><span style="color:#24292E;">    height: 80px;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;box&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;in-box&quot;</span><span style="color:#24292E;">&gt;我想要垂直水平居中&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>就可以将一个元素设置为垂直和水平居中：</p>`,7),q=p('<p>对于传统的布局方式来说，要实现上述垂直水平居中，常常需要依赖绝对定位+元素偏移的方式来实现，该实现方式不够灵活（在调整元素大小时需要调整定位）、难以维护。</p><p>Flex 布局的出现，解决了很多前端开发居中、排版的一些痛点，尤其是垂直居中，因此现在几乎成为主流的布局方式。除此之外，还可以对 Flex 元素设置排列顺序、放大比例、缩小比例等。</p><p>如果说 Flex 布局是一维布局，那么 Grid 布局则是一种二维布局的方式。</p><h4 id="grid-布局" tabindex="-1">Grid 布局 <a class="header-anchor" href="#grid-布局" aria-label="Permalink to &quot;Grid 布局&quot;">​</a></h4><p>Grid 布局又称为网格布局，它将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系。</p><p>我们知道 Flex 布局是基于轴线布局，与之相对，Grid 布局则是将容器划分成行和列，可以像表格一样按行或列来对齐元素。</p><p>对于 Grid 布局，同样需要理解几个概念：网格轨道与行列、网格线、网格容器等。其实 Grid 布局很多概念跟 Flex 布局还挺相似的，因此这里不再赘述。</p><p>使用 Grid 布局可以：</p><ul><li><p>实现网页的响应式布局；</p></li><li><p>实现灵活的 12 列布局（类似于 Bootstrap 的 CSS 布局方式）；</p></li><li><p>与其他布局方式结合，与 css 其他部分协同合作。</p></li></ul><p>通过 Grid 布局我们能实现任意组合不同布局，其设计可称得上目前最强大的布局方式，它与 Flex 布局是未来的趋势。其中，Grid 布局适用于较大规模的布局，Flex 布局则适合页面中的组件和较小规模布局。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>今天我带大家学习了页面布局中比较核心的一些规则，包括盒模型计算、内联元素与块状元素布局规则、文档流布局和元素堆叠顺序。我们在写 CSS 过程中会遇到很多的&quot;神奇&quot;现象，而要理解这些现象并解决问题，掌握这些页面布局的原理逻辑和规则很重要。</p><p>除了页面布局规则之外，我还带大家认识了常见的页面布局方式，包括传统布局方式、FleX 布局和 Grid 布局。</p><p>细心的你或许也发现了，我们还遗留了问题 6 没有给出具体的答案：让一个元素进行垂直和水平居中，有多少种实现方式？</p><p>这个问题，我希望你可以自己进行解答，欢迎你将答案写在留言区～</p>',15);function T(k,S,w,P,V,I){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/33/F7/Cgp9HWBwBrWAfuU6AANyH4P_TXw391.png"}),s(),y,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBsGATe5fAACdV1B5j8s079.png"}),s(),i,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBseATZypAACnWIPJ5fU407.png"}),s(),d,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBtmAHIF5AAC8NdjpmFw307.png"}),s(),g,a(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBuCAPnYtAADeCHGecrY299.png"}),s(),F,a(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB1OAfXNsAAFw2Bp-aVw496.png"}),s(),h,a(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB2yAK13GAAEoSLhXiR0106.png"}),s(),C,a(n,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB3mAFFqSAADs-8Jl61g905.png"}),s(),x,_,a(n,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB5-ANcUmAAC64A1Pkhk727.png"}),s(),u,A,a(n,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image6/M00/33/F8/Cgp9HWBwB6iARwZZAABrqdhMZGc561.png"}),s(),v,a(n,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB7KARvTaAABaLe2qI4k309.png"}),s(),b,a(n,{alt:"Drawing 22.png",src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB7uAbshiAADWWsHZghM208.png"}),s(),m,a(n,{alt:"Drawing 24.png",src:"https://s0.lgstatic.com/i/image6/M00/33/F8/Cgp9HWBwB9GAVImUAAC4RJoX2o8350.png"}),s(),D,a(n,{alt:"Drawing 26.png",src:"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB-SAZahpAABKURkJ8hE997.png"}),s(),B,a(n,{alt:"Drawing 28.png",src:"https://s0.lgstatic.com/i/image6/M01/34/01/CioPOWBwB_WAR3CJAAAti6zxREI918.png"}),s(),f,a(n,{alt:"Drawing 30.png",src:"https://s0.lgstatic.com/i/image6/M01/34/01/CioPOWBwCA-Ad4tQAAA-HOY2i2w574.png"}),s(),q])}const G=o(r,[["render",T]]);export{R as __pageData,G as default};
