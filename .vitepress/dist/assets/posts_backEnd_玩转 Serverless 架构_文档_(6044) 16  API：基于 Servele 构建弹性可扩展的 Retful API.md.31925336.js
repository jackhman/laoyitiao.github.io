import{_ as p,j as o,o as e,g as c,k as n,Q as a,s as l,h as t}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"内容管理系统的架构设计 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/玩转 Serverless 架构_文档/(6044) 16  API：基于 Servele 构建弹性可扩展的 Retful API.md","filePath":"posts/backEnd/玩转 Serverless 架构_文档/(6044) 16  API：基于 Servele 构建弹性可扩展的 Retful API.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/玩转 Serverless 架构_文档/(6044) 16  API：基于 Servele 构建弹性可扩展的 Retful API.md"},E=a('<p>今天我想和你聊一聊怎么基于 Serverless 构建弹性可扩展的 Restful API。</p><p>API 是使用 Serverless 最常见，也是最适合的场景之一。和 Serverful 架构的 API 相比，用 Serverless 开发 API 好处很多：</p><ul><li><p>不用购买、管理服务器等基础设施，不用关心服务器的运维，节省人力成本；</p></li><li><p>基于 Serverless 的 API，具备自动弹性伸缩的能力，能根据请求流量弹性扩缩容，让你不再担心流量波峰、波谷；</p></li><li><p>基于 Serverless 的 API 按实际资源使用量来付费，节省财务成本。</p></li></ul><p>因为好处很多，很多开发者跃跃欲试，但在实践过程中却遇到了很多问题，比如怎么设计最优的架构？怎么组织代码？怎么管理多个函数？所以今天我就以开发一个内容管理系统为例，带你学习怎么基于 Serverless 去开发一个 Restful API，解决上述共性问题。</p><p>首先，我们需要对内容管理系统进行架构设计。</p><h3 id="内容管理系统的架构设计" tabindex="-1">内容管理系统的架构设计 <a class="header-anchor" href="#内容管理系统的架构设计" aria-label="Permalink to &quot;内容管理系统的架构设计&quot;">​</a></h3><p>在进行架构设计前，你要明确系统的需求。对于一个内容管理系统，最核心的功能（也是这一讲要实现的功能），主要有这样几个：</p><ul><li><p>用户注册；</p></li><li><p>用户登录；</p></li><li><p>发布文章；</p></li><li><p>修改文章；</p></li><li><p>删除文章；</p></li><li><p>查询文章。</p></li></ul><p>这 6 个功能分别对应了我们要实现的 Restful API。为了方便统一管理 API，在 Serverless 架构中我们通常会用到 API 网关，通过 API 网关触发函数执行，并且基于 API 网关我们还可以实现参数控制、超时时间、IP 黑名单、流量控制等高级功能。</p><p>对于文章管理相关的 Restful API，用户发布文章前需要先登录，在 15 讲，你已经知道在 Serverless 中可以用 JWT 进行身份认证，咱们的管理系统中的登录注册功能也将沿用上一讲的内容。</p><p>在传统的 Serverful 架构中，通常会用 MySQL 等关系型数据库存储数据，但因为关系型数据库要在代码中维护连接状态及连接池，且一般不能自动扩容，并不适合 Serverless 应用，所以在 Serverless 架构中，通常选用表格存储等 Serverless NoSQL 数据来存储数据。</p><p>基于 JWT 的身份认证方案、数据存储方案，我们可以画出 Serverless 的内容管理系统架构图：</p>',12),y=l("p",null,[l("strong",null,"图中主要表达的意思是："),t(" 通过 API 网关承接用户请求，并驱动函数执行。每个函数分别实现一个具体功能，并通过 JWT 实现身份认证，最后表格存储作为数据库。")],-1),i=l("p",null,"其中，数据库中存储的数据主要是用户数据和文章数据。假设用户有 username（用户名） 和 password（密码） 两个属性；文章有 article_id（文章 ID）、username（创建者）、title（文章标题）、content（文章内容）、create_date（创建时间）、update_date（更新时间）这几个属性。",-1),F=a(`<p>接下来，你可以在表格存储中创建对应的数据表（你可以在表格存储控制台创建，也可以直接用我提供的这段代码进行创建）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TableStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tablestore&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 TableStore client</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TableStore.</span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  accessKeyId: </span><span style="color:#9ECBFF;">&#39;&lt;your access key&gt;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  accessKeySecret: </span><span style="color:#9ECBFF;">&#39;&lt;your access secret&gt;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  endpoint: </span><span style="color:#9ECBFF;">&quot;https://serverless-app.cn-shanghai.ots.aliyuncs.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  instancename: </span><span style="color:#9ECBFF;">&quot;serverless-cms&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 user 表</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * 参考文档： https://help.aliyun.com/document_detail/100594.html</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createUserTable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableMeta: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tableName: </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      primaryKey: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 用户名</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.PrimaryKeyType.</span><span style="color:#79B8FF;">STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      definedColumn: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 密码</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.DefinedColumnType.</span><span style="color:#79B8FF;">DCT_STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为数据表配置预留读吞吐量或预留写吞吐量。0 表示不预留吞吐量，完全按量付费</span></span>
<span class="line"><span style="color:#E1E4E8;">    reservedThroughput: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      capacityUnit: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        read: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        write: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 数据的过期时间，单位为秒，-1表示永不过期</span></span>
<span class="line"><span style="color:#E1E4E8;">      timeToLive: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 保存的最大版本数，1 表示每列上最多保存一个版本即保存最新的版本</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxVersions: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">createTable</span><span style="color:#E1E4E8;">(table);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 创建文章表</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createArticleTable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableMeta: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tableName: </span><span style="color:#9ECBFF;">&quot;article&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      primaryKey: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 文章 ID，唯一字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.PrimaryKeyType.</span><span style="color:#79B8FF;">STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      definedColumn: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.DefinedColumnType.</span><span style="color:#79B8FF;">DCT_STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.DefinedColumnType.</span><span style="color:#79B8FF;">DCT_STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.DefinedColumnType.</span><span style="color:#79B8FF;">DCT_STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;create_date&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.DefinedColumnType.</span><span style="color:#79B8FF;">DCT_STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;update_date&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: TableStore.DefinedColumnType.</span><span style="color:#79B8FF;">DCT_STRING</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为数据表配置预留读吞吐量或预留写吞吐量。0 表示不预留吞吐量，完全按量付费</span></span>
<span class="line"><span style="color:#E1E4E8;">    reservedThroughput: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      capacityUnit: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        read: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        write: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    tableOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 数据的过期时间，单位为秒，-1表示永不过期</span></span>
<span class="line"><span style="color:#E1E4E8;">      timeToLive: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 保存的最大版本数，1 表示每列上最多保存一个版本即保存最新的版本</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxVersions: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">createTable</span><span style="color:#E1E4E8;">(table);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createUserTable</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createArticleTable</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TableStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tablestore&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 TableStore client</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TableStore.</span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  accessKeyId: </span><span style="color:#032F62;">&#39;&lt;your access key&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  accessKeySecret: </span><span style="color:#032F62;">&#39;&lt;your access secret&gt;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  endpoint: </span><span style="color:#032F62;">&quot;https://serverless-app.cn-shanghai.ots.aliyuncs.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  instancename: </span><span style="color:#032F62;">&quot;serverless-cms&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 user 表</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * 参考文档： https://help.aliyun.com/document_detail/100594.html</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createUserTable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">table</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    tableMeta: {</span></span>
<span class="line"><span style="color:#24292E;">      tableName: </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      primaryKey: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 用户名</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.PrimaryKeyType.</span><span style="color:#005CC5;">STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      definedColumn: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 密码</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.DefinedColumnType.</span><span style="color:#005CC5;">DCT_STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为数据表配置预留读吞吐量或预留写吞吐量。0 表示不预留吞吐量，完全按量付费</span></span>
<span class="line"><span style="color:#24292E;">    reservedThroughput: {</span></span>
<span class="line"><span style="color:#24292E;">      capacityUnit: {</span></span>
<span class="line"><span style="color:#24292E;">        read: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        write: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    tableOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 数据的过期时间，单位为秒，-1表示永不过期</span></span>
<span class="line"><span style="color:#24292E;">      timeToLive: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 保存的最大版本数，1 表示每列上最多保存一个版本即保存最新的版本</span></span>
<span class="line"><span style="color:#24292E;">      maxVersions: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">createTable</span><span style="color:#24292E;">(table);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 创建文章表</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createArticleTable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">table</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    tableMeta: {</span></span>
<span class="line"><span style="color:#24292E;">      tableName: </span><span style="color:#032F62;">&quot;article&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      primaryKey: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 文章 ID，唯一字符串</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.PrimaryKeyType.</span><span style="color:#005CC5;">STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      definedColumn: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.DefinedColumnType.</span><span style="color:#005CC5;">DCT_STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.DefinedColumnType.</span><span style="color:#005CC5;">DCT_STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.DefinedColumnType.</span><span style="color:#005CC5;">DCT_STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;create_date&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.DefinedColumnType.</span><span style="color:#005CC5;">DCT_STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: </span><span style="color:#032F62;">&quot;update_date&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          type: TableStore.DefinedColumnType.</span><span style="color:#005CC5;">DCT_STRING</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为数据表配置预留读吞吐量或预留写吞吐量。0 表示不预留吞吐量，完全按量付费</span></span>
<span class="line"><span style="color:#24292E;">    reservedThroughput: {</span></span>
<span class="line"><span style="color:#24292E;">      capacityUnit: {</span></span>
<span class="line"><span style="color:#24292E;">        read: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        write: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    tableOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 数据的过期时间，单位为秒，-1表示永不过期</span></span>
<span class="line"><span style="color:#24292E;">      timeToLive: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 保存的最大版本数，1 表示每列上最多保存一个版本即保存最新的版本</span></span>
<span class="line"><span style="color:#24292E;">      maxVersions: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">createTable</span><span style="color:#24292E;">(table);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createUserTable</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createArticleTable</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p>这段代码主要创建了 user 和 article 两张表，其中 user 表的主键是 username，article 表的主键是 article_id，主键的作用是方便查询。除了主键，我还定义了几个列。其实对于表格存储，默认也可以不创建列，表格存储是宽表，除主键外，数据列可以随意扩展。</p><p>在完成了数据库表的创建后，我们就可以开始进行系统实现了。</p><h3 id="内容管理系统的实现" tabindex="-1">内容管理系统的实现 <a class="header-anchor" href="#内容管理系统的实现" aria-label="Permalink to &quot;内容管理系统的实现&quot;">​</a></h3><p>为了方便你学习，我为你提供了完整代码（<a href="https://github.com/nodejh/serverless-class/tree/master/15/cms" target="_blank" rel="noreferrer">代码地址</a>），你可以参考着学习。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ git clone https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/nodejh/serverless-class</span></span>
<span class="line"><span style="color:#E1E4E8;">$ cd </span><span style="color:#79B8FF;">15</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ git clone https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/nodejh/serverless-class</span></span>
<span class="line"><span style="color:#24292E;">$ cd </span><span style="color:#005CC5;">15</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cms</span></span></code></pre></div><p>整个代码目录结构如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── </span><span style="color:#F97583;">package</span><span style="color:#E1E4E8;">.json</span></span>
<span class="line"><span style="color:#E1E4E8;">├── src</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── config</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── index.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── db</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── client.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── function</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   ├── article</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   │   ├── create.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   │   ├── delete.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   │   ├── detail.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   │   └── update.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   └── user</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │       ├── login.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │       └── register.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── middleware</span></span>
<span class="line"><span style="color:#E1E4E8;">│       └── auth.js</span></span>
<span class="line"><span style="color:#E1E4E8;">└── template.yml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── </span><span style="color:#D73A49;">package</span><span style="color:#24292E;">.json</span></span>
<span class="line"><span style="color:#24292E;">├── src</span></span>
<span class="line"><span style="color:#24292E;">│   ├── config</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── index.js</span></span>
<span class="line"><span style="color:#24292E;">│   ├── db</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── client.js</span></span>
<span class="line"><span style="color:#24292E;">│   ├── function</span></span>
<span class="line"><span style="color:#24292E;">│   │   ├── article</span></span>
<span class="line"><span style="color:#24292E;">│   │   │   ├── create.js</span></span>
<span class="line"><span style="color:#24292E;">│   │   │   ├── delete.js</span></span>
<span class="line"><span style="color:#24292E;">│   │   │   ├── detail.js</span></span>
<span class="line"><span style="color:#24292E;">│   │   │   └── update.js</span></span>
<span class="line"><span style="color:#24292E;">│   │   └── user</span></span>
<span class="line"><span style="color:#24292E;">│   │       ├── login.js</span></span>
<span class="line"><span style="color:#24292E;">│   │       └── register.js</span></span>
<span class="line"><span style="color:#24292E;">│   └── middleware</span></span>
<span class="line"><span style="color:#24292E;">│       └── auth.js</span></span>
<span class="line"><span style="color:#24292E;">└── template.yml</span></span></code></pre></div><p>其中，所有业务代码都放在 src 目录中：</p><ul><li><p>config/index.js 是配置文件，里面包含身份凭证等配置信息；</p></li><li><p>db/client.js 对表格存储的增删改查操作进行了封装，方便在函数中使用（将数据库的操作封装还有一个好处是，如果你之后想要迁移到其他数据库，只要修改 db/client.js 中的逻辑，不用修改业务代码）；</p></li><li><p>middleware 目录中是一些中间件，比如 auth.js，用于身份认证；</p></li><li><p>functions 目录中就是所有函数，登录、注册、创建文章等，每个功能分别对应一个函数；</p></li><li><p>template.yaml 是应用配置文件，包括函数和 API 网关的配置。</p></li></ul><p>根据前面梳理的系统功能，我们需要实现以下几个 API：</p><table><thead><tr><th>用户注册</th><th>POST /user/register</th></tr></thead><tbody><tr><td>用户登录</td><td>POST /user/login</td></tr><tr><td>发布文章</td><td>POST /article/create</td></tr><tr><td>查询文章</td><td>GET /article/detail/[article_id]</td></tr><tr><td>更新文章</td><td>POST /article/update</td></tr><tr><td>删除文章</td><td>PUT /article/delete/[article_id]</td></tr></tbody></table><p>每个 API 对应一个具体的函数，每个函数也都有一个与之对应的 API 网关触发器。由于这些函数属于同一个应用，所以我们可以通过一个 template.yaml 来定义所有函数。同时也可以在 template.yaml 中定义函数的 API 网关触发器，这样部署函数时，就会自动创建 API 网关。</p><p>内容管理系统的 template.yaml 格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">ROSTemplateFormatVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Transform</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 函数服务，该服务中的函数都是内容管理系统的函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">serverless-cms</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Serverless 内容管理系统&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 函数名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">functionName</span><span style="color:#E1E4E8;">]:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 函数路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&lt;functionPath&gt;.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># API 网关分组，分钟中的所有 API 都是内容管理系统的 API</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">ServerlessCMSGroup</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Api&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">StageName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">RELEASE</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">DefinitionBody</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">&lt;Path&gt;</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 请求的 path</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">post</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 请求的 method</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-api-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user_register</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># API 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-fc</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 当请求该 API 时，要触发的函数，</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">arn</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${&lt;functionName&gt;.Arn}/</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">ROSTemplateFormatVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#22863A;">Transform</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#22863A;">Resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 函数服务，该服务中的函数都是内容管理系统的函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">serverless-cms</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Serverless 内容管理系统&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 函数名称</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">functionName</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 函数路径</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&lt;functionPath&gt;.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># API 网关分组，分钟中的所有 API 都是内容管理系统的 API</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">ServerlessCMSGroup</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Api&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">StageName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">RELEASE</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">DefinitionBody</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">&lt;Path&gt;</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 请求的 path</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">post</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 请求的 method</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-api-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user_register</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># API 名称</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-fc</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 当请求该 API 时，要触发的函数，</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">arn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${&lt;functionName&gt;.Arn}/</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3000</span></span></code></pre></div><p><strong>template.yaml 主要分为两部分：</strong> 函数定义和 API 网关定义，每个函数都有一个与之对应的 API 网关。我们用 serverless-cms 服务来表示内容管理系统这个应用，服务内的所有函数都是内容管理系统的函数。同理，ServerlessCMSGroup 这个 API 网关分组中的所有 API 都是内容管理系统的 API。</p><p>完整的 template.yaml 配置如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">ROSTemplateFormatVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Transform</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#85E89D;">Resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 函数服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">serverless-cms</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Serverless 内容管理系统&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">user-register</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">src/function/user/register.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">user-login</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">src/function/user/login.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">article-create</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">src/function/article/create.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">article-detail</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">src/function/article/detail.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">article-update</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">src/function/article/update.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">article-delete</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">src/function/article/delete.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">Runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">CodeUri</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># API 网关分组</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">ServerlessCMSGroup</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Api&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">StageName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">RELEASE</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">DefinitionBody</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/user/register&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 请求的 path</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">post</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 请求的 method</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-api-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user_register</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># API 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-fc</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 当请求该 API 时，要触发的函数，</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">arn</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${user-register.Arn}/</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/user/login&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">post</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-api-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">user_login</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-fc</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">arn</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${user-login.Arn}/</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/article/create&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">post</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-api-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">article_create</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-fc</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">arn</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-create.Arn}/</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/article/detail/[article_id]&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">GET</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-api-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">article_detail</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-request-parameters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              - </span><span style="color:#85E89D;">apiParameterName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;article_id&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">location</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Path&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">parameterType</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;String&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">required</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;REQUIRED&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-fc</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">arn</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-detail.Arn}/</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/article/update/[article_id]&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">PUT</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-api-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">article_update</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-request-parameters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              - </span><span style="color:#85E89D;">apiParameterName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;article_id&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">location</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Path&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">parameterType</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;String&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">required</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;REQUIRED&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-fc</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">arn</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-update.Arn}/</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3000</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/article/delete/[article_id]&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">DELETE</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-api-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">article_update</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-request-parameters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              - </span><span style="color:#85E89D;">apiParameterName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;article_id&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">location</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Path&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">parameterType</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;String&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">required</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;REQUIRED&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">x-aliyun-apigateway-fc</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">arn</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-delete.Arn}/</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">ROSTemplateFormatVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#22863A;">Transform</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#22863A;">Resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 函数服务</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">serverless-cms</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Serverless 内容管理系统&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">user-register</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">src/function/user/register.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">user-login</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">src/function/user/login.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">article-create</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">src/function/article/create.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">article-detail</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">src/function/article/detail.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">article-update</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">src/function/article/update.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">article-delete</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">src/function/article/delete.handler</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">Runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">CodeUri</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># API 网关分组</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">ServerlessCMSGroup</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Api&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">StageName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">RELEASE</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">DefinitionBody</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/user/register&#39;</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 请求的 path</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">post</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 请求的 method</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-api-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user_register</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># API 名称</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-fc</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 当请求该 API 时，要触发的函数，</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">arn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${user-register.Arn}/</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/user/login&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">post</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-api-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">user_login</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-fc</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">arn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${user-login.Arn}/</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/article/create&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">post</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-api-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">article_create</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-fc</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">arn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-create.Arn}/</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/article/detail/[article_id]&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">GET</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-api-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">article_detail</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-request-parameters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              - </span><span style="color:#22863A;">apiParameterName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;article_id&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">location</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Path&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">parameterType</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;String&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">required</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;REQUIRED&#39;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-fc</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">arn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-detail.Arn}/</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/article/update/[article_id]&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">PUT</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-api-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">article_update</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-request-parameters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              - </span><span style="color:#22863A;">apiParameterName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;article_id&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">location</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Path&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">parameterType</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;String&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">required</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;REQUIRED&#39;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-fc</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">arn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-update.Arn}/</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3000</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/article/delete/[article_id]&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">DELETE</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-api-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">article_update</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-request-parameters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              - </span><span style="color:#22863A;">apiParameterName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;article_id&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">location</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Path&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">parameterType</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;String&#39;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">required</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;REQUIRED&#39;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">x-aliyun-apigateway-fc</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">arn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">acs:fc:::services/\${serverless-cms.Arn}/functions/\${article-delete.Arn}/</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3000</span></span></code></pre></div><p>在这份配置中，需要注意两个地方：</p><ul><li><p>函数的 Handler 配置，Handler 可以写函数路径，比如<code>src/function/user/register.handler</code>表示<code>src/function/user/</code>目录中的 register.js 文件中的 handler 方法；</p></li><li><p>API 网关配置中的<code>/article/detail/[article_id]</code>Path，这种带参数的 PATH，必须使用<code>x-aliyun-apigateway-request-parameters</code>指定 Path 参数。</p></li></ul><p>接下来，我们就来实现内容管理系统的各个 API，也就是 template.yaml 中定义的各个函数。</p><h4 id="用户注册" tabindex="-1">用户注册 <a class="header-anchor" href="#用户注册" aria-label="Permalink to &quot;用户注册&quot;">​</a></h4><p>用户注册接口定义如下。</p><ul><li><p>请求方法：POST。</p></li><li><p>Path：<code>/user/register</code></p></li><li><p>Body参数：username 用户名、password 密码。</p></li></ul><p>整体代码很简单，在入口函数 handler 中，通过 event 得到 API 网关传递过来的 HTTP 请求 body 数据，然后从中得到 username、password，再将用户信息写入数据库。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/function/user/register</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../db/client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用户注册</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">username</span><span style="color:#6A737D;"> 用户名</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">password</span><span style="color:#6A737D;"> 密码</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">createRow</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, { username }, { password });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 event 中获取 API 网关传递 HTTP 请求 body 数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()).body);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(username, password)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, { success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error, { success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, message: </span><span style="color:#9ECBFF;">&quot;用户注册失败&quot;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/function/user/register</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../db/client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用户注册</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">username</span><span style="color:#6A737D;"> 用户名</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">password</span><span style="color:#6A737D;"> 密码</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#E36209;">username</span><span style="color:#24292E;">, </span><span style="color:#E36209;">password</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">createRow</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, { username }, { password });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 event 中获取 API 网关传递 HTTP 请求 body 数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()).body);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">username</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(username, password)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, { success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(error, { success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, message: </span><span style="color:#032F62;">&quot;用户注册失败&quot;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>代码完成后，就可以将应用部署到函数计算：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 部署应用</span></span>
<span class="line"><span style="color:#E1E4E8;">$ fun deploy</span></span>
<span class="line"><span style="color:#E1E4E8;">Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> service serverless</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cms to be deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">service serverless</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cms deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> api gateway ServerlessCMSGroup to be deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">api gateway ServerlessCMSGroup deploy success</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 部署应用</span></span>
<span class="line"><span style="color:#24292E;">$ fun deploy</span></span>
<span class="line"><span style="color:#24292E;">Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> service serverless</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cms to be deployed...</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">service serverless</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cms deploy success</span></span>
<span class="line"><span style="color:#24292E;">Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> api gateway ServerlessCMSGroup to be deployed...</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">api gateway ServerlessCMSGroup deploy success</span></span></code></pre></div><p>部署过程中，如果看到函数服务 serverless-cms 和 API 网关 ServerlessCMSGroup 都成功部署了，就说明应用部署完成。部署完成后，API 网关会提供一个用来测试的 API Endpoint，当然你也可以绑定自定义域名。</p><p>我们可以通过 curl 测试一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/user/register \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;username=Jack&amp;password=123456&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/user/register \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;username=Jack&amp;password=123456&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span></code></pre></div><p>返回 <code>{&quot;success&quot;: true}</code> ，说明用户注册成功。这时在表格存储控制台也可以看到刚注册的用户。</p>`,33),u=a(`<h4 id="用户登录" tabindex="-1">用户登录 <a class="header-anchor" href="#用户登录" aria-label="Permalink to &quot;用户登录&quot;">​</a></h4><p>完成用户注册函数开发后，就可以接着开发登录。用户登录的接口定义如下。</p><ul><li><p>请求方法：POST。</p></li><li><p>Path：<code>/user/login</code></p></li><li><p>Body 参数：username 用户名、password 密码。</p></li></ul><p>登录的逻辑就是根据用户输入的密码是否正确，如果正确就生成一个 token 返回给调用方。代码实现如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/function/user/login</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;assert&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jwt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jsonwebtoken&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">jwt_secret</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../config&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../db/client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用户登录</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">username</span><span style="color:#6A737D;"> 用户名</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">password</span><span style="color:#6A737D;"> 密码</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getRow</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, { username });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(user </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> user.password </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> password);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">({ username: user.username }, jwt_secret);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> token;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()).body);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(username, password)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">token</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, { success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, data: { token } }))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error, { success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, message: </span><span style="color:#9ECBFF;">&quot;用户登录失败&quot;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/function/user/login</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;assert&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jwt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jsonwebtoken&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">jwt_secret</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../config&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../db/client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用户登录</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">username</span><span style="color:#6A737D;"> 用户名</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">password</span><span style="color:#6A737D;"> 密码</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(</span><span style="color:#E36209;">username</span><span style="color:#24292E;">, </span><span style="color:#E36209;">password</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getRow</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, { username });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(user </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> user.password </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> password);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwt.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">({ username: user.username }, jwt_secret);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> token;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()).body);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">username</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(username, password)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">token</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, { success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, data: { token } }))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(error, { success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, message: </span><span style="color:#032F62;">&quot;用户登录失败&quot;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>将其部署到函数计算后，我们也可以使用 curl 命令进行测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/user/login \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;username=Jack&amp;password=123456&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;token&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span><span style="color:#E1E4E8;">}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/user/login \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;username=Jack&amp;password=123456&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span><span style="color:#24292E;">}}</span></span></code></pre></div><h4 id="身份认证" tabindex="-1">身份认证 <a class="header-anchor" href="#身份认证" aria-label="Permalink to &quot;身份认证&quot;">​</a></h4><p>在完成了注册登录接口后，我们再来看一下内容管理系统中，身份认证应该怎么实现。</p><p>在 15 讲，我们实现了一个 Express.js 框架的身份认证中间件，用来拦截所有请求，身份认证通过后才能进执行后面的代码逻辑。在内容管理系统中，你也可以参考 Express.js 的思想，实现一个 auth.js 专门用于身份认证，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/middleware/auth.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jwt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jsonwebtoken&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">jwt_secret</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../config/index&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 身份认证</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">event</span><span style="color:#6A737D;"> API 网关的 event 对象</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{object}</span><span style="color:#6A737D;"> 认证通过后返回 user 信息；认证失败则返回 false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (data.headers </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> data.headers.Authorization) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        .headers.Authorization.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(token, jwt_secret);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> auth;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/middleware/auth.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jwt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jsonwebtoken&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">jwt_secret</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../config/index&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 身份认证</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{object}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">event</span><span style="color:#6A737D;"> API 网关的 event 对象</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{object}</span><span style="color:#6A737D;"> 认证通过后返回 user 信息；认证失败则返回 false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data.headers </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> data.headers.Authorization) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        .headers.Authorization.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwt.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(token, jwt_secret);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> auth;</span></span></code></pre></div><p>其原理很简单，就是从 API 网关的 event 对象中获取 token，然后验证 token 是否正常。如果认证通过，就返回 user 信息，失败就返回 false。</p><p>这样在需要身份认证的函数中，你只引入 auth.js 并传入 event 对象就可以了。下面是一个简单的示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./middleware/auth&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 使用 auth 进行身份认证</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;身份认证失败!&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 通过身份认证后的业务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./middleware/auth&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用 auth 进行身份认证</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;身份认证失败!&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 通过身份认证后的业务逻辑</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>除了登录注册，其他接口都需要身份认证，所以接下来我们就通过实现&quot;发布文章&quot;函数来实际使用 auth.js。</p><h4 id="发布文章" tabindex="-1">发布文章 <a class="header-anchor" href="#发布文章" aria-label="Permalink to &quot;发布文章&quot;">​</a></h4><p>发布文章的接口定义如下。</p><ul><li><p>请求方法：POST。</p></li><li><p>Path：<code>/article/create</code></p></li><li><p>Headers 参数: Authorization token。</p></li><li><p>Body 参数：title、content。</p></li></ul><p>由于登录后才能发布文章，所以要先通过登录接口获取 token，然后调用 <code>/article/create</code> 接口时，再将 token 放在 HTTP Headers 参数中。发布文章的代码实现如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/function/article/auth</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uuid</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;uuid&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../middleware/auth&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../db/client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 创建文章</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">username</span><span style="color:#6A737D;"> 用户名</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">title</span><span style="color:#6A737D;"> 文章标题</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">content</span><span style="color:#6A737D;"> 文章内容</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createArticle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">article_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> uuid.</span><span style="color:#B392F0;">v4</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">now</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">createRow</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;article&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      article_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      username,</span></span>
<span class="line"><span style="color:#E1E4E8;">      title,</span></span>
<span class="line"><span style="color:#E1E4E8;">      content,</span></span>
<span class="line"><span style="color:#E1E4E8;">      create_date: now,</span></span>
<span class="line"><span style="color:#E1E4E8;">      update_date: now,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> article_id;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;身份认证失败&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 user 中获取 username</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()).body);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createArticle</span><span style="color:#E1E4E8;">(username, title, content)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        message: </span><span style="color:#9ECBFF;">&quot;创建文章失败&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/function/article/auth</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uuid</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;uuid&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../middleware/auth&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../db/client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 创建文章</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">username</span><span style="color:#6A737D;"> 用户名</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">title</span><span style="color:#6A737D;"> 文章标题</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">content</span><span style="color:#6A737D;"> 文章内容</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createArticle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">username</span><span style="color:#24292E;">, </span><span style="color:#E36209;">title</span><span style="color:#24292E;">, </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">article_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> uuid.</span><span style="color:#6F42C1;">v4</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">now</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">createRow</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;article&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      article_id,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      username,</span></span>
<span class="line"><span style="color:#24292E;">      title,</span></span>
<span class="line"><span style="color:#24292E;">      content,</span></span>
<span class="line"><span style="color:#24292E;">      create_date: now,</span></span>
<span class="line"><span style="color:#24292E;">      update_date: now,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> article_id;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;身份认证失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 user 中获取 username</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">username</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()).body);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">title</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createArticle</span><span style="color:#24292E;">(username, title, content)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(error, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        message: </span><span style="color:#032F62;">&quot;创建文章失败&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>首先是使用 auth.js 进行身份认证，认证通过后就可以从 user 中获取 username。然后再从请求体中获取文章标题和文章内容数据，将其存入数据库。</p><p>接下来我们依旧可以将函数部署和使用 curl 进行测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/create \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;title=这是文章标题&amp;content=内容内容内容......&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;d4b9bad8-a0ed-499d-b3c6-c57f16eaa193&quot;</span><span style="color:#E1E4E8;">}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/create \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;title=这是文章标题&amp;content=内容内容内容......&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;d4b9bad8-a0ed-499d-b3c6-c57f16eaa193&quot;</span><span style="color:#24292E;">}}</span></span></code></pre></div><p>在测试时，我们需要将 token 放在 HTTP 请求头的 Authorization 属性中。文章发布成功后，你就可以在表格存储中看到对应的数据了。</p>`,24),A=a(`<h4 id="查询文章" tabindex="-1">查询文章 <a class="header-anchor" href="#查询文章" aria-label="Permalink to &quot;查询文章&quot;">​</a></h4><p>发布文章的接口开发完成后，我们继续开发一个查询文章的接口，这样就可以查询出刚才创建的文章。查询文章接口定义如下。</p><ul><li><p>请求方法：GET。</p></li><li><p>Path：<code>/article/detail/[article_id]</code></p></li><li><p>Headers 参数: Authorization token。</p></li></ul><p>在查询文章接口中，我们需要在 Path 中定义文章 ID 参数，即 article_id。这样在函数代码中，你就可以通过 event 对象的 pathParameters 中获取 article_id 参数，然后根据 article_id 来查询文章详情了。完整代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uuid</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;uuid&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../middleware/auth&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../db/client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取文章详情</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">title</span><span style="color:#6A737D;"> 文章 ID</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getArticle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">article_id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getRow</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;article&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      article_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;身份认证失败&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 event 对象中获取文章 ID</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">article_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()).pathParameters[</span><span style="color:#9ECBFF;">&#39;article_id&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getArticle</span><span style="color:#E1E4E8;">(article_id)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">detail</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        data: detail</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        message: </span><span style="color:#9ECBFF;">&quot;创建文章失败&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uuid</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;uuid&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../middleware/auth&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../db/client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取文章详情</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">title</span><span style="color:#6A737D;"> 文章 ID</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArticle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">article_id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getRow</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;article&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      article_id,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;身份认证失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 event 对象中获取文章 ID</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">article_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()).pathParameters[</span><span style="color:#032F62;">&#39;article_id&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getArticle</span><span style="color:#24292E;">(article_id)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">detail</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        data: detail</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(error, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        message: </span><span style="color:#032F62;">&quot;创建文章失败&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>开发完成后，我们可以将其部署到函数计算，再用 curl 命令进行测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/detail/d4b9bad8-a0ed-499d-b3c6-c57f16eaa193 \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;d4b9bad8-a0ed-499d-b3c6-c57f16eaa193&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;内容内容内容......&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;create_date&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;1/24/2021, 2:05:46 PM&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;这是文章标题&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;update_date&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;1/24/2021, 2:05:46 PM&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Jack&quot;</span><span style="color:#E1E4E8;">}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/detail/d4b9bad8-a0ed-499d-b3c6-c57f16eaa193 \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;d4b9bad8-a0ed-499d-b3c6-c57f16eaa193&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;内容内容内容......&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;create_date&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;1/24/2021, 2:05:46 PM&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;这是文章标题&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;update_date&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;1/24/2021, 2:05:46 PM&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Jack&quot;</span><span style="color:#24292E;">}}</span></span></code></pre></div><p>如上所示，查询文章的接口按照预期返回了文章详情。</p><h4 id="更新文章" tabindex="-1">更新文章 <a class="header-anchor" href="#更新文章" aria-label="Permalink to &quot;更新文章&quot;">​</a></h4><p>更新文章的 API Path 参数和查询文章一样，都需要 Path 中定义 article_id。而其 body 参数则与创建文章相同。此外，更新文章的请求 method 是 PUT，因为在 Restful API 规范中，我们通常使用 POST 来表示创建， 使用 PUT 来表示更新。</p><p>更新文章的接口定义如下。</p><ul><li><p>请求方法：PUT。</p></li><li><p>Path：<code>/article/update/[article_id]</code></p></li><li><p>Headers 参数: Authorization token。</p></li><li><p>Body 参数：title、content。</p></li></ul><p>更新文章的逻辑就是根据 article_id 去更新一行数据。代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../middleware/auth&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../db/client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 更新文章</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">article_id</span><span style="color:#6A737D;"> 待更新的文章 ID</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">title</span><span style="color:#6A737D;"> 文章标题</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">content</span><span style="color:#6A737D;"> 文章内容</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateArticle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">article_id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">now</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLocaleString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">updateRow</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;article&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      article_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      title,</span></span>
<span class="line"><span style="color:#E1E4E8;">      content,</span></span>
<span class="line"><span style="color:#E1E4E8;">      update_date: now,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;身份认证失败&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">eventObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 event 对象的 pathParameters 中获取 Path 参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">article_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eventObject.pathParameters[</span><span style="color:#9ECBFF;">&#39;article_id&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">body</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(eventObject.body);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 event 对象的 body 中获取请求体参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">updateArticle</span><span style="color:#E1E4E8;">(article_id, title, content)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        message: </span><span style="color:#9ECBFF;">&quot;更新文章失败&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../middleware/auth&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../db/client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 更新文章</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">article_id</span><span style="color:#6A737D;"> 待更新的文章 ID</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">title</span><span style="color:#6A737D;"> 文章标题</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">content</span><span style="color:#6A737D;"> 文章内容</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateArticle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">article_id</span><span style="color:#24292E;">, </span><span style="color:#E36209;">title</span><span style="color:#24292E;">, </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">now</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toLocaleString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">updateRow</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;article&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      article_id,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      title,</span></span>
<span class="line"><span style="color:#24292E;">      content,</span></span>
<span class="line"><span style="color:#24292E;">      update_date: now,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;身份认证失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">eventObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 event 对象的 pathParameters 中获取 Path 参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">article_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eventObject.pathParameters[</span><span style="color:#032F62;">&#39;article_id&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">body</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(eventObject.body);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 event 对象的 body 中获取请求体参数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">title</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">updateArticle</span><span style="color:#24292E;">(article_id, title, content)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(error, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        message: </span><span style="color:#032F62;">&quot;更新文章失败&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>开发并部署完成后，使用 curl 命令进行测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/update/d4b9bad8-a0ed-499d-b3c6-c57f16eaa193 \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X PUT \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&quot;title=这是文章标题&amp;content=更新的内容......&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/update/d4b9bad8-a0ed-499d-b3c6-c57f16eaa193 \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">X PUT \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&quot;title=这是文章标题&amp;content=更新的内容......&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span></code></pre></div><p>返回 <code>{&quot;success&quot;:true}</code> 则说明更新成功。</p><h4 id="删除文章" tabindex="-1">删除文章 <a class="header-anchor" href="#删除文章" aria-label="Permalink to &quot;删除文章&quot;">​</a></h4><p>最后就还是一个删除文章的 API 了。删除文章的 API 也需要在 Path 中定义 article_id 参数，并且其 HTTP method 是 DELETE。具体接口定义如下。</p><ul><li><p>请求方法：DELETE。</p></li><li><p>Path：<code>/article/delete/[article_id]</code></p></li><li><p>Headers 参数: Authorization token，</p></li></ul><p>删除文章很简单，就是根据 article_id 删除一行数据，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uuid</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;uuid&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../middleware/auth&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../../db/client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 删除文章</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">title</span><span style="color:#6A737D;"> 文章 ID</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deleteArticle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">article_id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">deleteRow</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;article&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      article_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;身份认证失败&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 event 对象中获取文章 ID</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">article_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()).pathParameters[</span><span style="color:#9ECBFF;">&#39;article_id&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">deleteArticle</span><span style="color:#E1E4E8;">(article_id)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        message: </span><span style="color:#9ECBFF;">&quot;删除文章失败&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uuid</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;uuid&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../middleware/auth&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../../db/client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 删除文章</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">title</span><span style="color:#6A737D;"> 文章 ID</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteArticle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">article_id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">deleteRow</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;article&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      article_id,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 身份认证</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;身份认证失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 event 对象中获取文章 ID</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">article_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()).pathParameters[</span><span style="color:#032F62;">&#39;article_id&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">deleteArticle</span><span style="color:#24292E;">(article_id)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(error, {</span></span>
<span class="line"><span style="color:#24292E;">        success: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        message: </span><span style="color:#032F62;">&quot;删除文章失败&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>同样我们可以通过 curl 命令进行测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/delete/d4b9bad8-a0ed-499d-b3c6-c57f16eaa193 \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X DELETE \\</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/delete/d4b9bad8-a0ed-499d-b3c6-c57f16eaa193 \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">X DELETE \\</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphY2siLCJpYXQiOjE2MTE0OTI2ODF9.c56Xm4RBLYl5yVtR_Vk0IZOL0yijofcyE-P7vjKf4nA&quot;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span></code></pre></div><p>删除成功后，再去表格存储中就找不到这行记录了。至此，内容管理系统的 Restful API 就开发完毕了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>可以看到，基于 Serverless 开发 Restful API 的整个代码非常简单，每个函数只负责一个独立的业务，职责单一、逻辑清晰。关于这一讲，我想强调这样几个重点：</p><ul><li><p>基于 Serverless 开发 API 时，建议你使用 API 网关进行 API 的管理；</p></li><li><p>对于数据库等第三方服务，建议对其基本操作进行封装，这样更方便进行扩展；</p></li><li><p>Serverless 函数需要保持简单、独立、单一职责。</p></li></ul><p>最后，我留给你的作业就是，亲自动手实现一个基于 Serverless 的具有 Restful API 的内容管理系统。我们下一讲见。</p>`,29);function d(D,C,B,h,m,g){const s=o("Image");return e(),c("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/35/CgpVE2AXxXCASAwbAAKdD1n4Tyk774.png"}),y,i,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/35/CgpVE2AXxXyAUsksAAD9II6PlcU787.png"}),F,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/94/46/CgqCHmAXxaeAe89-AADufUP1UJA961.png"}),u,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/94/3B/Ciqc1GAXxceARRiPAACAwtaSp94526.png"}),A])}const v=p(r,[["render",d]]);export{b as __pageData,v as default};
