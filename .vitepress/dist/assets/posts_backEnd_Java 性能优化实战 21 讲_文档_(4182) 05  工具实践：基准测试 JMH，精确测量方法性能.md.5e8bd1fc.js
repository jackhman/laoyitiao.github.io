import{_ as o,j as e,o as t,g as c,k as n,Q as l,s,h as p}from"./chunks/framework.b3d8e22e.js";const j=JSON.parse('{"title":"JMH---基准测试工具 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4182) 05  工具实践：基准测试 JMH，精确测量方法性能.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4182) 05  工具实践：基准测试 JMH，精确测量方法性能.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4182) 05  工具实践：基准测试 JMH，精确测量方法性能.md"},E=l(`<p>上一课时，我们了解到一些外部工具可以获取系统的性能数据。</p><p>但有时候，我们想要测量某段具体代码的性能情况，这时经常会写一些统计执行时间的代码，这些代码穿插在我们的逻辑中，进行一些简单的计时运算。比如下面这几行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//logic </span></span>
<span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> cost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start; </span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Logic cost : &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> cost);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//logic </span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> cost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start; </span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Logic cost : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> cost);</span></span></code></pre></div><p>可惜的是，这段代码的统计结果，并不一定准确。举个例子来说，JVM 在执行时，会对一些代码块，或者一些频繁执行的逻辑，进行 JIT 编译和内联优化，在得到一个稳定的测试结果之前，需要先循环上万次进行预热。预热前和预热后的性能差别非常大。</p><p>另外，从 01 课时我们就知道，评估性能，有很多的指标，如果这些指标数据，每次都要手工去算的话，那肯定是枯燥乏味且低效的。</p><h3 id="jmh-基准测试工具" tabindex="-1">JMH---基准测试工具 <a class="header-anchor" href="#jmh-基准测试工具" aria-label="Permalink to &quot;JMH---基准测试工具&quot;">​</a></h3><p><strong>JMH（the Java Microbenchmark Harness）就是这样一个能做基准测试的工具</strong> 。如果你通过 04 课时介绍的一系列外部工具，定位到了热点代码，要测试它的性能数据，评估改善情况，就可以交给 JMH。它的<strong>测量精度非常高，可达纳秒级别。</strong></p><p>JMH 已经在 JDK 12中被包含，其他版本的需要自行引入 maven，坐标如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.openjdk.jmh&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;jmh-core&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.23&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.openjdk.jmh&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;jmh-generator-annprocess&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.23&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;provided&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.openjdk.jmh&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;jmh-core&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.23&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.openjdk.jmh&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;jmh-generator-annprocess&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.23&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;provided&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>下面，我们介绍一下这个工具的使用。</p><p>JMH 是一个 jar 包，它和单元测试框架 JUnit 非常像，可以通过注解进行一些基础配置。这部分配置有很多是可以通过 main 方法的 OptionsBuilder 进行设置的。</p>`,11),y=l(`<p>上图是一个典型的 JMH 程序执行的内容。通过开启多个进程，多个线程，先执行预热，然后执行迭代，最后汇总所有的测试数据进行分析。在执行前后，还可以根据粒度处理一些前置和后置操作。</p><p>一段简单的 JMH 代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">BenchmarkMode</span><span style="color:#E1E4E8;">(Mode.Throughput) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">OutputTimeUnit</span><span style="color:#E1E4E8;">(TimeUnit.MILLISECONDS) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">State</span><span style="color:#E1E4E8;">(Scope.Thread) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Warmup</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iterations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">timeUnit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TimeUnit.SECONDS) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Measurement</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iterations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">timeUnit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TimeUnit.SECONDS) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Fork</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Threads</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BenchmarkTest</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Benchmark</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">455565655225562L</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Benchmark</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">455565655225562L</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Options opts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionsBuilder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">(BenchmarkTest.class.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">resultFormat</span><span style="color:#E1E4E8;">(ResultFormatType.JSON) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runner</span><span style="color:#E1E4E8;">(opts).</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">BenchmarkMode</span><span style="color:#24292E;">(Mode.Throughput) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">OutputTimeUnit</span><span style="color:#24292E;">(TimeUnit.MILLISECONDS) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">State</span><span style="color:#24292E;">(Scope.Thread) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Warmup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">iterations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">time</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">timeUnit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.SECONDS) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Measurement</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">iterations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">time</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">timeUnit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.SECONDS) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Fork</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Threads</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BenchmarkTest</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Benchmark</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">455565655225562L</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Benchmark</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">455565655225562L</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">        Options opts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionsBuilder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">include</span><span style="color:#24292E;">(BenchmarkTest.class.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">resultFormat</span><span style="color:#24292E;">(ResultFormatType.JSON) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runner</span><span style="color:#24292E;">(opts).</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面，我们逐一介绍一下比较关键的注解和参数。</p><h3 id="关键注解" tabindex="-1">关键注解 <a class="header-anchor" href="#关键注解" aria-label="Permalink to &quot;关键注解&quot;">​</a></h3><h4 id="_1-warmup" tabindex="-1">1. @Warmup <a class="header-anchor" href="#_1-warmup" aria-label="Permalink to &quot;1. @Warmup&quot;">​</a></h4><p>样例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Warmup</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#79B8FF;">iterations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#79B8FF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#79B8FF;">timeUnit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TimeUnit.SECONDS)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Warmup</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#005CC5;">iterations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#005CC5;">time</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#005CC5;">timeUnit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.SECONDS)</span></span></code></pre></div><p>我们不止一次提到预热 warmup 这个注解，可以用在类或者方法上，进行预热配置。可以看到，它有几个配置参数：</p><ul><li><p>timeUnit：时间的单位，默认的单位是秒；</p></li><li><p>iterations：预热阶段的迭代数；</p></li><li><p>time：每次预热的时间；</p></li><li><p>batchSize：批处理大小，指定了每次操作调用几次方法。</p></li></ul><p>上面的注解，意思是对代码预热总计 5 秒（迭代 5 次，每次一秒）。预热过程的测试数据，是不记录测量结果的。</p><p>我们可以看一下它执行的效果：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#79B8FF;">Warmup</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> iterations, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> s each </span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#79B8FF;">Warmup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.281</span><span style="color:#E1E4E8;"> ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ns </span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#79B8FF;">Warmup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.376</span><span style="color:#E1E4E8;"> ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ns </span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#79B8FF;">Warmup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.483</span><span style="color:#E1E4E8;"> ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ns</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># </span><span style="color:#005CC5;">Warmup</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> iterations, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> s each </span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#005CC5;">Warmup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.281</span><span style="color:#24292E;"> ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ns </span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#005CC5;">Warmup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.376</span><span style="color:#24292E;"> ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ns </span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#005CC5;">Warmup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.483</span><span style="color:#24292E;"> ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ns</span></span></code></pre></div><p>一般来说，基准测试都是针对比较小的、执行速度相对较快的代码块，这些代码有很大的可能性被 JIT 编译、内联，所以在编码时保持方法的精简，是一个好的习惯。具体优化过程，我们将在 18 课时介绍。</p><p>说到预热，就不得不提一下在分布式环境下的服务预热。在对服务节点进行发布的时候，通常也会有预热过程，逐步放量到相应的服务节点，直到服务达到最优状态。如下图所示，负载均衡负责这个放量过程，一般是根据百分比进行放量。</p>`,15),i=l(`<h4 id="_2-measurement" tabindex="-1">2. @Measurement <a class="header-anchor" href="#_2-measurement" aria-label="Permalink to &quot;2. @Measurement&quot;">​</a></h4><p>样例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Measurement</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#79B8FF;">iterations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">time</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">timeUnit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TimeUnit.SECONDS)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Measurement</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#005CC5;">iterations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">time</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">timeUnit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.SECONDS)</span></span></code></pre></div><p>Measurement 和 Warmup 的参数是一样的，不同于预热，它指的是真正的迭代次数。</p><p>我们能够从日志中看到这个执行过程：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#79B8FF;">Measurement</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> iterations, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> s each </span></span>
<span class="line"><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1646.000</span><span style="color:#E1E4E8;"> ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op </span></span>
<span class="line"><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1243.000</span><span style="color:#E1E4E8;"> ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op </span></span>
<span class="line"><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1273.000</span><span style="color:#E1E4E8;"> ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op </span></span>
<span class="line"><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1395.000</span><span style="color:#E1E4E8;"> ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op </span></span>
<span class="line"><span style="color:#79B8FF;">Iteration</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1423.000</span><span style="color:#E1E4E8;"> ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># </span><span style="color:#005CC5;">Measurement</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> iterations, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> s each </span></span>
<span class="line"><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1646.000</span><span style="color:#24292E;"> ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op </span></span>
<span class="line"><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1243.000</span><span style="color:#24292E;"> ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op </span></span>
<span class="line"><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1273.000</span><span style="color:#24292E;"> ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op </span></span>
<span class="line"><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1395.000</span><span style="color:#24292E;"> ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op </span></span>
<span class="line"><span style="color:#005CC5;">Iteration</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1423.000</span><span style="color:#24292E;"> ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op</span></span></code></pre></div><p>虽然经过预热之后，代码都能表现出它的最优状态，但一般和实际应用场景还是有些出入。如果你的测试机器性能很高，或者你的测试机资源利用已经达到了极限，都会影响测试结果的数值。</p><p>所以，通常情况下，我都会在测试时，给机器充足的资源，保持一个稳定的环境。在分析结果时，也会更加关注不同代码实现方式下的<strong>性能差异</strong> ，而不是测试数据本身。</p><h4 id="_3-benchmarkmode" tabindex="-1">3. @BenchmarkMode <a class="header-anchor" href="#_3-benchmarkmode" aria-label="Permalink to &quot;3. @BenchmarkMode&quot;">​</a></h4><p>此注解用来指定基准测试类型，对应 Mode 选项，用来修饰类和方法都可以。这里的 value，是一个数组，可以配置多个统计维度。比如：</p><p>@BenchmarkMode({Throughput,Mode.AverageTime})，统计的就是吞吐量和平均执行时间两个指标。</p><p>所谓的模式，其实就是我们第 01 课时里说的一些指标，在 JMH 中，可以分为以下几种：</p><ul><li><p><strong>Throughput：</strong> 整体吞吐量，比如 QPS，单位时间内的调用量等；</p></li><li><p><strong>AverageTime：</strong> 平均耗时，指的是每次执行的平均时间。如果这个值很小不好辨认，可以把统计的单位时间调小一点；</p></li><li><p><strong>SampleTime：</strong> 随机取样，这和我们在第一课时里聊到的 TP 值是一个概念；</p></li><li><p><strong>SingleShotTime：</strong> 如果你想要测试仅仅一次的性能，比如第一次初始化花了多长时间，就可以使用这个参数，其实和传统的 main 方法没有什么区别；</p></li><li><p><strong>All：</strong> 所有的指标，都算一遍，你可以设置成这个参数看下效果。</p></li></ul><p>我们拿平均时间，看一下一个大体的执行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Result </span><span style="color:#9ECBFF;">&quot;com.github.xjjdog.tuning.BenchmarkTest.shift&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2.068</span><span style="color:#E1E4E8;"> ±(</span><span style="color:#79B8FF;">99.9</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">) </span><span style="color:#79B8FF;">0.038</span><span style="color:#E1E4E8;"> ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op [Average] </span></span>
<span class="line"><span style="color:#E1E4E8;">  (min, avg, max) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">2.059</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.068</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.083</span><span style="color:#E1E4E8;">), stdev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.010</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">CI</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">99.9</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">2.030</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.106</span><span style="color:#E1E4E8;">] (assumes normal distribution)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Result </span><span style="color:#032F62;">&quot;com.github.xjjdog.tuning.BenchmarkTest.shift&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">2.068</span><span style="color:#24292E;"> ±(</span><span style="color:#005CC5;">99.9</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">0.038</span><span style="color:#24292E;"> ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op [Average] </span></span>
<span class="line"><span style="color:#24292E;">  (min, avg, max) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">2.059</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.068</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.083</span><span style="color:#24292E;">), stdev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.010</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">CI</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">99.9</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2.030</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.106</span><span style="color:#24292E;">] (assumes normal distribution)</span></span></code></pre></div><p>由于我们声明的时间单位是纳秒，本次 shift 方法的平均响应时间就是 2.068 纳秒。</p><p>我们也可以看下最终的耗时时间：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Benchmark            Mode  Cnt  Score   Error  Units </span></span>
<span class="line"><span style="color:#E1E4E8;">BenchmarkTest.div    avgt    </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2.072</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">0.053</span><span style="color:#E1E4E8;">  ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op </span></span>
<span class="line"><span style="color:#E1E4E8;">BenchmarkTest.shift  avgt    </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2.068</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">0.038</span><span style="color:#E1E4E8;">  ns</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">op</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Benchmark            Mode  Cnt  Score   Error  Units </span></span>
<span class="line"><span style="color:#24292E;">BenchmarkTest.div    avgt    </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2.072</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">0.053</span><span style="color:#24292E;">  ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op </span></span>
<span class="line"><span style="color:#24292E;">BenchmarkTest.shift  avgt    </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2.068</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">0.038</span><span style="color:#24292E;">  ns</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">op</span></span></code></pre></div><p>由于是平均数，这里的 Error 值的是误差（或者波动）的意思。</p><p>可以看到，在衡量这些指标的时候，都有一个时间维度，它就是通过 <strong>@OutputTimeUnit</strong> 注解进行配置的。</p><p>这个就比较简单了，它指明了基准测试结果的时间类型。可用于类或者方法上，一般选择秒、毫秒、微秒，纳秒那是针对的速度非常快的方法。</p><p>举个例子，@BenchmarkMode(Mode.Throughput) 和 @OutputTimeUnit(TimeUnit.MILLISECONDS) 进行组合，代表的就是每毫秒的吞吐量。</p><p>如下面的关于吞吐量的结果，就是以毫秒计算的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Benchmark             Mode  Cnt       Score       Error   Units </span></span>
<span class="line"><span style="color:#E1E4E8;">BenchmarkTest.div    thrpt    </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">482999.685</span><span style="color:#E1E4E8;"> ±  </span><span style="color:#79B8FF;">6415.832</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms </span></span>
<span class="line"><span style="color:#E1E4E8;">BenchmarkTest.shift  thrpt    </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">480599.263</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">20752.609</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Benchmark             Mode  Cnt       Score       Error   Units </span></span>
<span class="line"><span style="color:#24292E;">BenchmarkTest.div    thrpt    </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">482999.685</span><span style="color:#24292E;"> ±  </span><span style="color:#005CC5;">6415.832</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms </span></span>
<span class="line"><span style="color:#24292E;">BenchmarkTest.shift  thrpt    </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">480599.263</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">20752.609</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span></code></pre></div><p>OutputTimeUnit 注解同样可以修饰类或者方法，通过更改时间级别，可以获取更加易读的结果。</p><h4 id="_4-fork" tabindex="-1">4. @Fork <a class="header-anchor" href="#_4-fork" aria-label="Permalink to &quot;4. @Fork&quot;">​</a></h4><p>fork 的值一般设置成 1，表示只使用一个进程进行测试；如果这个数字大于 1，表示会启用新的进程进行测试；但如果设置成 0，程序依然会运行，不过是这样是在用户的 JVM 进程上运行的，可以看下下面的提示，但不推荐这么做。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#79B8FF;">Fork</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">N</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">, test runs </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> the host </span><span style="color:#79B8FF;">VM</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#F97583;">***</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WARNING</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Non</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">forked runs may silently omit </span><span style="color:#79B8FF;">JVM</span><span style="color:#E1E4E8;"> options, mess up profilers, disable compiler hints, etc. </span><span style="color:#F97583;">***</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#F97583;">***</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WARNING</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Use</span><span style="color:#E1E4E8;"> non</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">forked runs only </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> debugging purposes, not </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> actual performance runs. </span><span style="color:#F97583;">***</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># </span><span style="color:#005CC5;">Fork</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">N</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">A</span><span style="color:#24292E;">, test runs </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> the host </span><span style="color:#005CC5;">VM</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#D73A49;">***</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WARNING</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Non</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">forked runs may silently omit </span><span style="color:#005CC5;">JVM</span><span style="color:#24292E;"> options, mess up profilers, disable compiler hints, etc. </span><span style="color:#D73A49;">***</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#D73A49;">***</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WARNING</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Use</span><span style="color:#24292E;"> non</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">forked runs only </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> debugging purposes, not </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> actual performance runs. </span><span style="color:#D73A49;">***</span></span></code></pre></div><p>那么 fork 到底是在进程还是线程环境里运行呢？</p><p>我们追踪一下 JMH 的源码，发现每个 fork 进程是单独运行在 Proccess 进程里的，这样就可以做完全的环境隔离，避免交叉影响。</p><p>它的输入输出流，通过 Socket 连接的模式，发送到我们的执行终端。</p>`,31),F=l(`<p>在这里分享一个小技巧。其实 fork 注解有一个参数叫作 jvmArgsAppend，我们可以通过它传递一些 JVM 的参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Fork</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">jvmArgsAppend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;-Xmx2048m&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-server&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-XX:+AggressiveOpts&quot;</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Fork</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">jvmArgsAppend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;-Xmx2048m&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-server&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-XX:+AggressiveOpts&quot;</span><span style="color:#24292E;">})</span></span></code></pre></div><p>在平常的测试中，也可以适当增加 fork 数，来减少测试的误差。</p><h4 id="_5-threads" tabindex="-1">5. @Threads <a class="header-anchor" href="#_5-threads" aria-label="Permalink to &quot;5. @Threads&quot;">​</a></h4><p>fork 是面向进程的，而 Threads 是面向线程的。指定了这个注解以后，将会开启并行测试。如果配置了 Threads.MAX，则使用和处理机器核数相同的线程数。</p><p>这个和我们平常编码中的习惯也是相同的，并不是说开的线程越多越好。线程多了，操作系统就需要耗费更多的时间在上下文切换上，造成了整体性能的下降。</p><h4 id="_6-group" tabindex="-1">6. @Group <a class="header-anchor" href="#_6-group" aria-label="Permalink to &quot;6. @Group&quot;">​</a></h4><p>@Group 注解只能加在方法上，用来把测试方法进行归类。如果你单个测试文件中方法比较多，或者需要将其归类，则可以使用这个注解。</p><p>与之关联的 @GroupThreads 注解，会在这个归类的基础上，再进行一些线程方面的设置。这两个注解都很少使用，除非是非常大的性能测试案例。</p><h4 id="_7-state" tabindex="-1">7. @State <a class="header-anchor" href="#_7-state" aria-label="Permalink to &quot;7. @State&quot;">​</a></h4><p>@State 指定了在类中变量的作用范围，用于声明某个类是一个&quot;状态&quot;，可以用 Scope 参数用来表示该状态的共享范围。这个注解必须加在类上，否则提示无法运行。</p><p>Scope 有如下三种值。</p><ul><li><p><strong>Benchmark</strong> ：表示变量的作用范围是某个基准测试类。</p></li><li><p><strong>Thread</strong> ：每个线程一份副本，如果配置了 Threads 注解，则每个 Thread 都拥有一份变量，它们互不影响。</p></li><li><p><strong>Group</strong> ：联系上面的 @Group 注解，在同一个 Group 里，将会共享同一个变量实例。</p></li></ul><p>在 JMHSample04DefaultState 测试文件中，演示了变量 x 的默认作用范围是 Thread，关键代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">State</span><span style="color:#E1E4E8;">(Scope.Thread) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JMHSample_04_DefaultState</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.PI; </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Benchmark</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">measure</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        x</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">State</span><span style="color:#24292E;">(Scope.Thread) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JMHSample_04_DefaultState</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.PI; </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Benchmark</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">measure</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        x</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_8-setup-和-teardown" tabindex="-1">8. @Setup 和 @TearDown <a class="header-anchor" href="#_8-setup-和-teardown" aria-label="Permalink to &quot;8. @Setup 和 @TearDown&quot;">​</a></h4><p>和单元测试框架 JUnit 类似，@Setup 用于基准测试前的初始化动作，@TearDown 用于基准测试后的动作，来做一些全局的配置。</p><p>这两个注解，同样有一个 Level 值，标明了方法运行的时机，它有三个取值。</p><ul><li><p><strong>Trial</strong> ：默认的级别，也就是 Benchmark 级别。</p></li><li><p><strong>Iteration</strong> ：每次迭代都会运行。</p></li><li><p><strong>Invocation</strong> ：每次方法调用都会运行，这个是粒度最细的。</p></li></ul><p>如果你的初始化操作，是和方法相关的，那最好使用 Invocation 级别。但大多数场景是一些全局的资源，比如一个 Spring 的 DAO，那么就使用默认的 Trial，只初始化一次就可以。</p><h4 id="_9-param" tabindex="-1">9. @Param <a class="header-anchor" href="#_9-param" aria-label="Permalink to &quot;9. @Param&quot;">​</a></h4><p>@Param 注解只能修饰字段，用来测试不同的参数，对程序性能的影响。配合 @State注解，可以同时制定这些参数的执行范围。</p><p>代码样例如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">BenchmarkMode</span><span style="color:#E1E4E8;">(Mode.AverageTime) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">OutputTimeUnit</span><span style="color:#E1E4E8;">(TimeUnit.</span><span style="color:#79B8FF;">NANOSECONDS</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Warmup</span><span style="color:#E1E4E8;">(iterations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, timeUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TimeUnit.</span><span style="color:#79B8FF;">SECONDS</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Measurement</span><span style="color:#E1E4E8;">(iterations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, timeUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TimeUnit.</span><span style="color:#79B8FF;">SECONDS</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Fork</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">(Scope.Benchmark) </span></span>
<span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JMHSample_27_Params</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#B392F0;">Param</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;31&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;65&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;101&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;103&quot;</span><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> int </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#B392F0;">Param</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;4&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;8&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;16&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;32&quot;</span><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> int </span><span style="color:#FFAB70;">certainty</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    @Benchmark </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> boolean </span><span style="color:#B392F0;">bench</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> BigInteger.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(arg).</span><span style="color:#B392F0;">isProbablePrime</span><span style="color:#E1E4E8;">(certainty); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) throws RunnerException { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Options opt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionsBuilder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">(JMHSample_27_Params.class.</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#6A737D;">//                .param(&quot;arg&quot;, &quot;41&quot;, &quot;42&quot;) // Use this to selectively constrain/override parameters </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runner</span><span style="color:#E1E4E8;">(opt).</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">BenchmarkMode</span><span style="color:#24292E;">(Mode.AverageTime) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">OutputTimeUnit</span><span style="color:#24292E;">(TimeUnit.</span><span style="color:#005CC5;">NANOSECONDS</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Warmup</span><span style="color:#24292E;">(iterations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, timeUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.</span><span style="color:#005CC5;">SECONDS</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Measurement</span><span style="color:#24292E;">(iterations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, timeUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.</span><span style="color:#005CC5;">SECONDS</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Fork</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">(Scope.Benchmark) </span></span>
<span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JMHSample_27_Params</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#6F42C1;">Param</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;31&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;65&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;101&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;103&quot;</span><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> int </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#6F42C1;">Param</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;8&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;16&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;32&quot;</span><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> int </span><span style="color:#E36209;">certainty</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    @Benchmark </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> boolean </span><span style="color:#6F42C1;">bench</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> BigInteger.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(arg).</span><span style="color:#6F42C1;">isProbablePrime</span><span style="color:#24292E;">(certainty); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#E36209;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) throws RunnerException { </span></span>
<span class="line"><span style="color:#24292E;">        Options opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionsBuilder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">include</span><span style="color:#24292E;">(JMHSample_27_Params.class.</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#6A737D;">//                .param(&quot;arg&quot;, &quot;41&quot;, &quot;42&quot;) // Use this to selectively constrain/override parameters </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runner</span><span style="color:#24292E;">(opt).</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>值得注意的是，如果你设置了非常多的参数，这些参数将执行多次，通常会运行很长时间。比如参数 1 M 个，参数 2 N 个，那么总共要执行 M*N 次。</p><p>下面是一个执行结果的截图：</p>`,26),d=s("h4",{id:"_10-compilercontrol",tabindex:"-1"},[p("10. @CompilerControl "),s("a",{class:"header-anchor",href:"#_10-compilercontrol","aria-label":'Permalink to "10. @CompilerControl"'},"​")],-1),u=s("p",null,"这可以说是一个非常有用的功能了。",-1),C=s("p",null,"Java 中方法调用的开销是比较大的，尤其是在调用量非常大的情况下。拿简单的getter/setter 方法来说，这种方法在 Java 代码中大量存在。我们在访问的时候，就需要创建相应的栈帧，访问到需要的字段后，再弹出栈帧，恢复原程序的执行。",-1),h=s("p",null,"如果能够把这些对象的访问和操作，纳入目标方法的调用范围之内，就少了一次方法调用，速度就能得到提升，这就是方法内联的概念。如下图所示，代码经过 JIT 编译之后，效率会有大的提升。",-1),g=l(`<p>这个注解可以用在类或者方法上，能够控制方法的编译行为，常用的有 3 种模式：</p><p>强制使用内联（INLINE），禁止使用内联（DONT_INLINE），甚至是禁止方法编译（EXCLUDE）等。</p><h3 id="将结果图形化" tabindex="-1">将结果图形化 <a class="header-anchor" href="#将结果图形化" aria-label="Permalink to &quot;将结果图形化&quot;">​</a></h3><p>使用 JMH 测试的结果，可以二次加工，进行图形化展示。结合图表数据，更加直观。通过运行时，指定输出的格式文件，即可获得相应格式的性能测试结果。</p><p>比如下面这行代码，就是指定输出 JSON 格式的数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Options opt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionsBuilder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">resultFormat</span><span style="color:#E1E4E8;">(ResultFormatType.JSON) </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Options opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionsBuilder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">resultFormat</span><span style="color:#24292E;">(ResultFormatType.JSON) </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="_1-jmh-支持-5-种格式结果" tabindex="-1">1. JMH 支持 5 种格式结果 <a class="header-anchor" href="#_1-jmh-支持-5-种格式结果" aria-label="Permalink to &quot;1. JMH 支持 5 种格式结果&quot;">​</a></h4><ul><li><p><strong>TEXT</strong> 导出文本文件。</p></li><li><p><strong>CSV</strong> 导出 csv 格式文件。</p></li><li><p><strong>SCSV</strong> 导出 scsv 等格式的文件。</p></li><li><p><strong>JSON</strong> 导出成 json 文件。</p></li><li><p><strong>LATEX</strong> 导出到 latex，一种基于 ΤΕΧ 的排版系统。</p></li></ul><p>一般来说，我们导出成 CSV 文件，直接在 Excel 中操作，生成如下相应的图形就可以了。</p>`,9),m=l('<h4 id="_2-结果图形化制图工具" tabindex="-1">2. 结果图形化制图工具 <a class="header-anchor" href="#_2-结果图形化制图工具" aria-label="Permalink to &quot;2. 结果图形化制图工具&quot;">​</a></h4><p><strong>JMH Visualizer</strong></p><p>这里有一个开源的项目，通过导出 json 文件，上传至 <a href="https://jmh.morethan.io/" target="_blank" rel="noreferrer">JMH Visualizer</a>（点击链接跳转），可得到简单的统计结果。由于很多操作需要鼠标悬浮在上面进行操作，所以个人认为它的展示方式并不是很好。</p><p><strong>JMH Visual Chart</strong></p><p>相比较而言， <a href="http://deepoove.com/jmh-visual-chart" target="_blank" rel="noreferrer">JMH Visual Chart</a>（点击链接跳转）这个工具，就相对直观一些。</p>',5),A=s("p",null,[s("strong",null,"meta-chart")],-1),B=s("p",null,[p("一个通用的 "),s("a",{href:"https://www.meta-chart.com/",target:"_blank",rel:"noreferrer"},"在线图表生成器"),p("（点击链接跳转），导出 CSV 文件后，做适当处理，即可导出精美图像。")],-1),D=s("p",null,"像 Jenkins 等一些持续集成工具，也提供了相应的插件，用来直接显示这些测试结果。",-1),_=s("h3",{id:"小结",tabindex:"-1"},[p("小结 "),s("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),v=s("p",null,[p("本课时主要介绍了 基准测试工具--- JMH，官方的 JMH 有非常丰富的示例，比如伪共享（FalseSharing）的影响等高级话题。我已经把它放在了 "),s("a",{href:"https://gitee.com/xjjdog/tuning-lagou-res",target:"_blank",rel:"noreferrer"},"Gitee"),p("（点击链接跳转）上，你可以将其导入至 Idea 编辑器进行测试。")],-1),k=s("p",null,"JMH 这个工具非常好用，它可以使用确切的测试数据，来支持我们的分析结果。一般情况下，如果定位到热点代码，就需要使用基准测试工具进行专项优化，直到性能有了显著的提升。",-1),b=s("p",null,"接下来的课程，将涉及对一些性能问题细节的验证，也会使用 JMH 进行进一步的分析。",-1);function S(T,q,M,f,I,N){const a=e("Image");return t(),c("div",null,[E,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/38/FA/Ciqc1F8epk6ALUNZAABpIyGz37g324.png"}),y,n(a,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/39/06/CgqCHl8epmWAWw_3AABS3CbQ8AE949.png"}),i,n(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/38/FA/Ciqc1F8epneAFThuAABRpqRrEUw322.png"}),F,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/38/CD/CgqCHl8ebZaAPtXOAAPe5vpFf_c784.png"}),d,u,C,h,n(a,{alt:"4.png",src:"https://s0.lgstatic.com/i/image/M00/38/FA/Ciqc1F8epoqAI9u2AAB4h_ABJWE362.png"}),g,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/38/C3/Ciqc1F8ebi2AdAAbAALlvsHgcKk925.png"}),m,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/38/CE/CgqCHl8ebkmAbujsAAHK-g94ooM905.png"}),A,B,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/38/CE/CgqCHl8eboKAHRe8AAGSfMVOXxw934.png"}),D,_,v,k,b])}const O=o(r,[["render",S]]);export{j as __pageData,O as default};
