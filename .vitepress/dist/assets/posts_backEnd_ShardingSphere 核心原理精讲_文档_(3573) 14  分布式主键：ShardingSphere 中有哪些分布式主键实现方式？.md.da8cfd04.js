import{_ as l,j as p,o,g as t,k as n,h as e,Q as s}from"./chunks/framework.b3d8e22e.js";const C=JSON.parse('{"title":"ShardingSphere 中的自动生成键方案 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3573) 14  分布式主键：ShardingSphere 中有哪些分布式主键实现方式？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3573) 14  分布式主键：ShardingSphere 中有哪些分布式主键实现方式？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3573) 14  分布式主键：ShardingSphere 中有哪些分布式主键实现方式？.md"},c=s(`<p>本课时我将为你讲解 ShardingSphere 中的分布式主键实现方式。</p><p>在传统数据库软件开发过程中，主键自动生成技术是基本需求。各个数据库对该需求也提供了相应的支持，比如 MySQL 的自增键，Oracle 的自增序列等。而在分片场景下，问题就变得有点复杂，我们不能依靠单个实例上的自增键来实现不同数据节点之间的全局唯一主键，这时分布式主键的需求就应运而生。ShardingSphere 作为一款优秀的分库分表开源软件，同样提供了分布式主键的实现机制，今天，我们就对这一机制的基本原理和实现方式展开讨论。</p><h3 id="shardingsphere-中的自动生成键方案" tabindex="-1">ShardingSphere 中的自动生成键方案 <a class="header-anchor" href="#shardingsphere-中的自动生成键方案" aria-label="Permalink to &quot;ShardingSphere 中的自动生成键方案&quot;">​</a></h3><p>在介绍 ShardingSphere 提供的具体分布式主键实现方式之前，我们有必要先对框架中抽象的自动生成键 GeneratedKey 方案进行讨论，从而帮助你明确分布式主键的具体使用场景和使用方法。</p><h4 id="shardingsphere-中的-generatedkey" tabindex="-1">ShardingSphere 中的 GeneratedKey <a class="header-anchor" href="#shardingsphere-中的-generatedkey" aria-label="Permalink to &quot;ShardingSphere 中的 GeneratedKey&quot;">​</a></h4><p>GeneratedKey 并不是 ShardingSphere 所创造的概念。如果你熟悉 Mybatis 这种 ORM 框架，对它就不会陌生。事实上，我们在《数据分片：如何实现分库、分表、分库+分表以及强制路由（上）？》中已经介绍了在 Mybatis 中嵌入 GeneratedKey 的实现方法。通常，我们会在 Mybatis 的 Mapper 文件中设置 useGeneratedKeys 和 keyProperty 属性：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;addEntity&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useGeneratedKeys</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyProperty</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;recordId&quot;</span><span style="color:#E1E4E8;"> &gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">        INSERT INTO health_record (user_id, level_id, remark)  </span></span>
<span class="line"><span style="color:#E1E4E8;">        VALUES (#{userId,jdbcType=INTEGER}, #{levelId,jdbcType=INTEGER},  </span></span>
<span class="line"><span style="color:#E1E4E8;">             #{remark,jdbcType=VARCHAR}) </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;addEntity&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGeneratedKeys</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyProperty</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;recordId&quot;</span><span style="color:#24292E;"> &gt; </span></span>
<span class="line"><span style="color:#24292E;">        INSERT INTO health_record (user_id, level_id, remark)  </span></span>
<span class="line"><span style="color:#24292E;">        VALUES (#{userId,jdbcType=INTEGER}, #{levelId,jdbcType=INTEGER},  </span></span>
<span class="line"><span style="color:#24292E;">             #{remark,jdbcType=VARCHAR}) </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在执行这个 insert 语句时，返回的对象中自动包含了生成的主键值。当然，这种方式能够生效的前提是对应的数据库本身支持自增长的主键。</p><p>当我们使用 ShardingSphere 提供的自动生成键方案时，开发过程以及效果和上面描述的完全一致。在 ShardingSphere 中，同样实现了一个 GeneratedKey 类。<strong>请注意，该类位于 sharding-core-route 工程下</strong>。我们先看该类提供的 getGenerateKey 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">GeneratedKey</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getGenerateKey</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TableMetas tableMetas, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InsertStatement insertStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//找到自增长列 </span></span>
<span class="line"><span style="color:#E1E4E8;">     Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; generateKeyColumnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">findGenerateKeyColumnName</span><span style="color:#E1E4E8;">(insertStatement.</span><span style="color:#B392F0;">getTable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">generateKeyColumnName.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">absent</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//判断自增长类是否已生成主键值 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">containsGenerateKey</span><span style="color:#E1E4E8;">(tableMetas, insertStatement, generateKeyColumnName.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findGeneratedKey</span><span style="color:#E1E4E8;">(tableMetas, parameters, insertStatement, generateKeyColumnName.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createGeneratedKey</span><span style="color:#E1E4E8;">(shardingRule, insertStatement, generateKeyColumnName.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">GeneratedKey</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getGenerateKey</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TableMetas tableMetas, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InsertStatement insertStatement) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//找到自增长列 </span></span>
<span class="line"><span style="color:#24292E;">     Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; generateKeyColumnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">findGenerateKeyColumnName</span><span style="color:#24292E;">(insertStatement.</span><span style="color:#6F42C1;">getTable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">generateKeyColumnName.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">absent</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//判断自增长类是否已生成主键值 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">containsGenerateKey</span><span style="color:#24292E;">(tableMetas, insertStatement, generateKeyColumnName.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findGeneratedKey</span><span style="color:#24292E;">(tableMetas, parameters, insertStatement, generateKeyColumnName.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createGeneratedKey</span><span style="color:#24292E;">(shardingRule, insertStatement, generateKeyColumnName.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>这段代码的逻辑在于先从 ShardingRule 中找到主键对应的 Column，然后判断是否已经包含主键：如果是则找到该主键，如果不是则生成新的主键。今天，我们的重点是分布式主键的生成，所以我们直接来到 createGeneratedKey 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> GeneratedKey </span><span style="color:#B392F0;">createGeneratedKey</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InsertStatement insertStatement, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String generateKeyColumnName) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        GeneratedKey result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratedKey</span><span style="color:#E1E4E8;">(generateKeyColumnName, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> insertStatement.</span><span style="color:#B392F0;">getValueListCount</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">getGeneratedValues</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(shardingRule.</span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">(insertStatement.</span><span style="color:#B392F0;">getTable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> GeneratedKey </span><span style="color:#6F42C1;">createGeneratedKey</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InsertStatement insertStatement, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String generateKeyColumnName) { </span></span>
<span class="line"><span style="color:#24292E;">        GeneratedKey result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratedKey</span><span style="color:#24292E;">(generateKeyColumnName, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> insertStatement.</span><span style="color:#6F42C1;">getValueListCount</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">getGeneratedValues</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(shardingRule.</span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">(insertStatement.</span><span style="color:#6F42C1;">getTable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>在 GeneratedKey 中存在一个类型为 LinkedList 的 generatedValues 变量，用于保存生成的主键，但实际上，生成主键的工作转移到了 ShardingRule 的 generateKey 方法中，我们跳转到 ShardingRule 类并找到这个 generateKey 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Comparable</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicTableName) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">TableRule</span><span style="color:#E1E4E8;">&gt; tableRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findTableRule</span><span style="color:#E1E4E8;">(logicTableName); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tableRule.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingConfigurationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot find strategy for generate keys.&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//从TableRule中获取ShardingKeyGenerator并生成分布式主键 </span></span>
<span class="line"><span style="color:#E1E4E8;">        ShardingKeyGenerator shardingKeyGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> tableRule.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getShardingKeyGenerator</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> defaultShardingKeyGenerator </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tableRule.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getShardingKeyGenerator</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> shardingKeyGenerator.</span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Comparable</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicTableName) { </span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">TableRule</span><span style="color:#24292E;">&gt; tableRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findTableRule</span><span style="color:#24292E;">(logicTableName); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tableRule.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingConfigurationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot find strategy for generate keys.&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//从TableRule中获取ShardingKeyGenerator并生成分布式主键 </span></span>
<span class="line"><span style="color:#24292E;">        ShardingKeyGenerator shardingKeyGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> tableRule.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getShardingKeyGenerator</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> defaultShardingKeyGenerator </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tableRule.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getShardingKeyGenerator</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> shardingKeyGenerator.</span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>首先，根据传入的 logicTableName 找到对应的 TableRule，基于 TableRule 找到其包含的 ShardingKeyGenerator，然后通过 ShardingKeyGenerator 的 generateKey 来生成主键。从设计模式上讲，ShardingRule 也只是一个外观类，真正创建 ShardingKeyGenerator 的过程应该是在 TableRule 中。而这里的 ShardingKeyGenerator 显然就是真正生成分布式主键入口，让我们来看一下。</p><h4 id="shardingkeygenerator" tabindex="-1">ShardingKeyGenerator <a class="header-anchor" href="#shardingkeygenerator" aria-label="Permalink to &quot;ShardingKeyGenerator&quot;">​</a></h4><p>接下来我们分析 ShardingKeyGenerator 接口，从定义上看，该接口继承了 TypeBasedSPI 接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingKeyGenerator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeBasedSPI</span><span style="color:#E1E4E8;"> {     </span></span>
<span class="line"><span style="color:#E1E4E8;">    Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingKeyGenerator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeBasedSPI</span><span style="color:#24292E;"> {     </span></span>
<span class="line"><span style="color:#24292E;">    Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>来到 TableRule 中，在它的一个构造函数中找到了 ShardingKeyGenerator 的创建过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">shardingKeyGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsKeyGeneratorConfiguration</span><span style="color:#E1E4E8;">(tableRuleConfig) </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingKeyGeneratorServiceLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">newService</span><span style="color:#E1E4E8;">(tableRuleConfig.</span><span style="color:#B392F0;">getKeyGeneratorConfig</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">(), tableRuleConfig.</span><span style="color:#B392F0;">getKeyGeneratorConfig</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">shardingKeyGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsKeyGeneratorConfiguration</span><span style="color:#24292E;">(tableRuleConfig) </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingKeyGeneratorServiceLoader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newService</span><span style="color:#24292E;">(tableRuleConfig.</span><span style="color:#6F42C1;">getKeyGeneratorConfig</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">(), tableRuleConfig.</span><span style="color:#6F42C1;">getKeyGeneratorConfig</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span></code></pre></div><p>这里有一个 ShardingKeyGeneratorServiceLoader 类，该类定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingKeyGeneratorServiceLoader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeBasedSPIServiceLoader</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">ShardingKeyGenerator</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        NewInstanceServiceLoader.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(ShardingKeyGenerator.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingKeyGeneratorServiceLoader</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(ShardingKeyGenerator.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingKeyGeneratorServiceLoader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeBasedSPIServiceLoader</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">ShardingKeyGenerator</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        NewInstanceServiceLoader.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(ShardingKeyGenerator.class); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingKeyGeneratorServiceLoader</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(ShardingKeyGenerator.class); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>回顾上一课时的内容，我们不难理解 ShardingKeyGeneratorServiceLoader 类的作用。ShardingKeyGeneratorServiceLoader 继承了 TypeBasedSPIServiceLoader 类，并在静态方法中通过 NewInstanceServiceLoader 注册了类路径中所有的 ShardingKeyGenerator。然后，ShardingKeyGeneratorServiceLoader 的 newService 方法基于类型参数通过 SPI 创建实例，并赋值 Properties 属性。</p><p>通过继承 TypeBasedSPIServiceLoader 类来创建一个新的 ServiceLoader 类，然后在其静态方法中注册相应的 SPI 实现，这是 ShardingSphere 中应用微内核模式的常见做法，很多地方都能看到类似的处理方法。</p><p>我们在 sharding-core-common 工程的 META-INF/services 目录中看到了具体的 SPI 定义：</p>`,25),y=s(`<p>分布式主键 SPI 配置</p><p>可以看到，这里有两个 ShardingKeyGenerator，分别是 SnowflakeShardingKeyGenerator 和 UUIDShardingKeyGenerator，它们都位于org.apache.shardingsphere.core.strategy.keygen 包下。</p><h3 id="shardingsphere-中的分布式主键实现方案" tabindex="-1">ShardingSphere 中的分布式主键实现方案 <a class="header-anchor" href="#shardingsphere-中的分布式主键实现方案" aria-label="Permalink to &quot;ShardingSphere 中的分布式主键实现方案&quot;">​</a></h3><p>在 ShardingSphere 中，ShardingKeyGenerator 接口存在一批实现类。除了前面提到的 SnowflakeShardingKeyGenerator 和UUIDShardingKeyGenerator，还实现了 LeafSegmentKeyGenerator 和 LeafSnowflakeKeyGenerator 类，但这两个类的实现过程有些特殊，我们一会再具体展开。</p><h4 id="uuidshardingkeygenerator" tabindex="-1">UUIDShardingKeyGenerator <a class="header-anchor" href="#uuidshardingkeygenerator" aria-label="Permalink to &quot;UUIDShardingKeyGenerator&quot;">​</a></h4><p>我们先来看最简单的 ShardingKeyGenerator，即 UUIDShardingKeyGenerator。UUIDShardingKeyGenerator 的实现非常容易理解，直接采用 UUID.randomUUID() 的方式产生分布式主键：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UUIDShardingKeyGenerator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingKeyGenerator</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;UUID&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UUIDShardingKeyGenerator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingKeyGenerator</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;UUID&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="snowflakeshardingkeygenerator" tabindex="-1">SnowflakeShardingKeyGenerator <a class="header-anchor" href="#snowflakeshardingkeygenerator" aria-label="Permalink to &quot;SnowflakeShardingKeyGenerator&quot;">​</a></h4><p>再来看 SnowFlake（雪花）算法，SnowFlake 是 ShardingSphere 默认的分布式主键生成策略。它是 Twitter 开源的分布式 ID 生成算法，其核心思想是使用一个 64bit 的 long 型数字作为全局唯一 ID，且 ID 引入了时间戳，基本上能够保持自增。SnowFlake 算法在分布式系统中的应用十分广泛，SnowFlake 算法中 64bit 的详细结构存在一定的规范：</p>`,9),E=s(`<p>64bit 的 ID 结构图</p><br><p>在上图中，我们把 64bit 分成了四个部分：</p><ul><li>符号位</li></ul><p>第一个部分即第一个 bit，值为 0，没有实际意义。</p><ul><li>时间戳位</li></ul><p>第二个部分是 41 个 bit，表示的是时间戳。41 位的时间戳可以容纳的毫秒数是 2 的 41 次幂，一年所使用的毫秒数是365 * 24 * 60 * 60 * 1000，即 69.73 年。 <strong>也就是说，ShardingSphere 的 SnowFlake 算法的时间纪元从 2016 年 11 月 1 日零点开始，可以使用到 2086 年</strong> ，相信能满足绝大部分系统的要求。</p><ul><li>工作进程位</li></ul><p>第三个部分是 10 个 bit，表示工作进程位，其中前 5 个 bit 代表机房 id，后 5 个 bit 代表机器id。</p><ul><li>序列号位</li></ul><p>第四个部分是 12 个 bit，表示序号，也就是某个机房某台机器上在一毫秒内同时生成的 ID 序号。如果在这个毫秒内生成的数量超过 4096（即 2 的 12 次幂），那么生成器会等待下个毫秒继续生成。</p><p>因为 SnowFlake 算法依赖于时间戳，所以还需要考虑时钟回拨这种场景。<strong>所谓时钟回拨，是指服务器因为时间同步，导致某一部分机器的时钟回到了过去的时间点</strong>。显然，时间戳的回滚会导致生成一个已经使用过的 ID，因此默认分布式主键生成器提供了一个最大容忍的时钟回拨毫秒数。如果时钟回拨的时间超过最大容忍的毫秒数阈值，则程序报错；如果在可容忍的范围内，默认分布式主键生成器会等待时钟同步到最后一次主键生成的时间后再继续工作。ShardingSphere 中最大容忍的时钟回拨毫秒数的默认值为 0，可通过属性设置。</p><p>了解了 SnowFlake 算法的基本概念之后，我们来看 SnowflakeShardingKeyGenerator 类的具体实现。首先在 SnowflakeShardingKeyGenerator 类中存在一批常量的定义，用于维护 SnowFlake 算法中各个 bit 之间的关系，同时还存在一个 TimeService 用于获取当前的时间戳。而 SnowflakeShardingKeyGenerator 的核心方法 generateKey 负责生成具体的 ID，我们这里给出详细的代码，并为每行代码都添加注释：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> Comparable</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateKey</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//获取当前时间戳 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> currentMilliseconds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeService.</span><span style="color:#B392F0;">getCurrentMillis</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果出现了时钟回拨，则抛出异常或进行时钟等待 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">waitTolerateTimeDifferenceIfNeed</span><span style="color:#E1E4E8;">(currentMilliseconds)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            currentMilliseconds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timeService.</span><span style="color:#B392F0;">getCurrentMillis</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果上次的生成时间与本次的是同一毫秒 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastMilliseconds </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> currentMilliseconds) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//这个位运算保证始终就是在4096这个范围内，避免你自己传递的sequence超过了4096这个范围 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> (sequence </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (sequence </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> SEQUENCE_MASK)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//如果位运算结果为0，则需要等待下一个毫秒继续生成 </span></span>
<span class="line"><span style="color:#E1E4E8;">                currentMilliseconds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">waitUntilNextTime</span><span style="color:#E1E4E8;">(currentMilliseconds); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">//如果不是，则生成新的sequence </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">vibrateSequenceOffset</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            sequence </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sequenceOffset; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        lastMilliseconds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentMilliseconds; </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//先将当前时间戳左移放到完成41个bit，然后将工作进程为左移到10个bit，再将序号为放到最后的12个bit </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//最后拼接起来成一个64 bit的二进制数字 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ((currentMilliseconds </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> EPOCH) </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> TIMESTAMP_LEFT_SHIFT_BITS) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getWorkerId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> WORKER_ID_LEFT_SHIFT_BITS) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> sequence; </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> Comparable</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateKey</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//获取当前时间戳 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> currentMilliseconds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeService.</span><span style="color:#6F42C1;">getCurrentMillis</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果出现了时钟回拨，则抛出异常或进行时钟等待 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">waitTolerateTimeDifferenceIfNeed</span><span style="color:#24292E;">(currentMilliseconds)) { </span></span>
<span class="line"><span style="color:#24292E;">            currentMilliseconds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timeService.</span><span style="color:#6F42C1;">getCurrentMillis</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果上次的生成时间与本次的是同一毫秒 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastMilliseconds </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> currentMilliseconds) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//这个位运算保证始终就是在4096这个范围内，避免你自己传递的sequence超过了4096这个范围 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> (sequence </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (sequence </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> SEQUENCE_MASK)) { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//如果位运算结果为0，则需要等待下一个毫秒继续生成 </span></span>
<span class="line"><span style="color:#24292E;">                currentMilliseconds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">waitUntilNextTime</span><span style="color:#24292E;">(currentMilliseconds); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">//如果不是，则生成新的sequence </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">vibrateSequenceOffset</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            sequence </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sequenceOffset; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        lastMilliseconds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentMilliseconds; </span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//先将当前时间戳左移放到完成41个bit，然后将工作进程为左移到10个bit，再将序号为放到最后的12个bit </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//最后拼接起来成一个64 bit的二进制数字 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((currentMilliseconds </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> EPOCH) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> TIMESTAMP_LEFT_SHIFT_BITS) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getWorkerId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> WORKER_ID_LEFT_SHIFT_BITS) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> sequence; </span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>可以看到这里综合考虑了时钟回拨、同一个毫秒内请求等设计要素，从而完成了 SnowFlake 算法的具体实现。</p><h4 id="leafsegmentkeygenerator-和-leafsnowflakekeygenerator" tabindex="-1">LeafSegmentKeyGenerator 和 LeafSnowflakeKeyGenerator <a class="header-anchor" href="#leafsegmentkeygenerator-和-leafsnowflakekeygenerator" aria-label="Permalink to &quot;LeafSegmentKeyGenerator 和 LeafSnowflakeKeyGenerator&quot;">​</a></h4><p>事实上，如果实现类似 SnowflakeShardingKeyGenerator 这样的 ShardingKeyGenerator 是比较困难的，而且也属于重复造轮子。因此，尽管 ShardingSphere 在 4.X 版本中也提供了 LeafSegmentKeyGenerator 和 LeafSnowflakeKeyGenerator 这两个 ShardingKeyGenerator 的完整实现类。但在正在开发的 5.X 版本中，这两个实现类被移除了。</p><p>目前，ShardingSphere 专门提供了 OpenSharding 这个代码仓库来存放新版本的 LeafSegmentKeyGenerator 和 LeafSnowflakeKeyGenerator。新版本的实现类直接采用了第三方美团提供的 Leaf 开源实现。</p><p>Leaf 提供两种生成 ID 的方式，一种是号段（Segment）模式，一种是前面介绍的 Snowflake 模式。无论使用哪种模式，我们都需要提供一个 leaf.properties 文件，并设置对应的配置项。无论是使用哪种方式，应用程序都需要设置一个 leaf.key：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># for keyGenerator key </span></span>
<span class="line"><span style="color:#E1E4E8;">leaf.key=sstest </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;"># for LeafSnowflake </span></span>
<span class="line"><span style="color:#E1E4E8;">leaf.zk.list=localhost:2181</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># for keyGenerator key </span></span>
<span class="line"><span style="color:#24292E;">leaf.key=sstest </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;"># for LeafSnowflake </span></span>
<span class="line"><span style="color:#24292E;">leaf.zk.list=localhost:2181</span></span></code></pre></div><p>如果使用号段模式，需要依赖于一张数据库表来存储运行时数据，因此需要在 leaf.properties 文件中添加数据库的相关配置：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># for LeafSegment </span></span>
<span class="line"><span style="color:#E1E4E8;">leaf.jdbc.url=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useSSL=false </span></span>
<span class="line"><span style="color:#E1E4E8;">leaf.jdbc.username=root </span></span>
<span class="line"><span style="color:#E1E4E8;">leaf.jdbc.password=123456</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># for LeafSegment </span></span>
<span class="line"><span style="color:#24292E;">leaf.jdbc.url=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useSSL=false </span></span>
<span class="line"><span style="color:#24292E;">leaf.jdbc.username=root </span></span>
<span class="line"><span style="color:#24292E;">leaf.jdbc.password=123456</span></span></code></pre></div><p>基于这些配置，我们就可以创建对应的 DataSource，并进一步创建用于生成分布式 ID 的 IDGen 实现类，这里创建的是基于号段模式的 SegmentIDGenImpl 实现类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//通过DruidDataSource构建数据源并设置属性 </span></span>
<span class="line"><span style="color:#E1E4E8;">DruidDataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DruidDataSource</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                dataSource.</span><span style="color:#B392F0;">setUrl</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(LeafPropertiesConstant.LEAF_JDBC_URL)); </span></span>
<span class="line"><span style="color:#E1E4E8;">                dataSource.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(LeafPropertiesConstant.LEAF_JDBC_USERNAME)); </span></span>
<span class="line"><span style="color:#E1E4E8;">                dataSource.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(LeafPropertiesConstant.LEAF_JDBC_PASSWORD)); </span></span>
<span class="line"><span style="color:#E1E4E8;">dataSource.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span></span>
<span class="line"><span style="color:#6A737D;">//构建数据库访问Dao组件 </span></span>
<span class="line"><span style="color:#E1E4E8;">IDAllocDao dao </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IDAllocDaoImpl</span><span style="color:#E1E4E8;">(dataSource); </span></span>
<span class="line"><span style="color:#6A737D;">//创建IDGen实现类 </span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.idGen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SegmentIDGenImpl</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//将Dao组件绑定到IDGen实现类 </span></span>
<span class="line"><span style="color:#E1E4E8;"> ((SegmentIDGenImpl) </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.idGen).</span><span style="color:#B392F0;">setDao</span><span style="color:#E1E4E8;">(dao); </span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.idGen.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//通过DruidDataSource构建数据源并设置属性 </span></span>
<span class="line"><span style="color:#24292E;">DruidDataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DruidDataSource</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                dataSource.</span><span style="color:#6F42C1;">setUrl</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(LeafPropertiesConstant.LEAF_JDBC_URL)); </span></span>
<span class="line"><span style="color:#24292E;">                dataSource.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(LeafPropertiesConstant.LEAF_JDBC_USERNAME)); </span></span>
<span class="line"><span style="color:#24292E;">                dataSource.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(LeafPropertiesConstant.LEAF_JDBC_PASSWORD)); </span></span>
<span class="line"><span style="color:#24292E;">dataSource.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                 </span></span>
<span class="line"><span style="color:#6A737D;">//构建数据库访问Dao组件 </span></span>
<span class="line"><span style="color:#24292E;">IDAllocDao dao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IDAllocDaoImpl</span><span style="color:#24292E;">(dataSource); </span></span>
<span class="line"><span style="color:#6A737D;">//创建IDGen实现类 </span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.idGen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SegmentIDGenImpl</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#6A737D;">//将Dao组件绑定到IDGen实现类 </span></span>
<span class="line"><span style="color:#24292E;"> ((SegmentIDGenImpl) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.idGen).</span><span style="color:#6F42C1;">setDao</span><span style="color:#24292E;">(dao); </span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.idGen.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource;</span></span></code></pre></div><p>一旦我们成功创建了 IDGen 实现类，可以通过该类来生成目标 ID，LeafSegmentKeyGenerator 类中包含了所有的实现细节：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Result result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.idGen.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(LeafPropertiesConstant.LEAF_KEY)); </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Result result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.idGen.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(LeafPropertiesConstant.LEAF_KEY)); </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span></code></pre></div><p>介绍完 LeafSegmentKeyGenerator 之后，我们再来看 LeafSnowflakeKeyGenerator。LeafSnowflakeKeyGenerator 的实现依赖于分布式协调框架 Zookeeper，所以在配置文件中需要指定 Zookeeper 的目标地址：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># for LeafSnowflake </span></span>
<span class="line"><span style="color:#E1E4E8;">leaf.zk.list=localhost:2181</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># for LeafSnowflake </span></span>
<span class="line"><span style="color:#24292E;">leaf.zk.list=localhost:2181</span></span></code></pre></div><p>创建用于 LeafSnowflake 的 IDGen 实现类 SnowflakeIDGenImpl 相对比较简单，我们直接在构造函数中设置 Zookeeper 地址就可以了：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">IDGen idGen = new SnowflakeIDGenImpl(properties.getProperty(LeafPropertiesConstant.LEAF_ZK_LIST), 8089);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">IDGen idGen = new SnowflakeIDGenImpl(properties.getProperty(LeafPropertiesConstant.LEAF_ZK_LIST), 8089);</span></span></code></pre></div><p>同样，通过 IDGen 获取模板 ID 的方式是一致的：</p><hr><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">idGen.get(properties.getProperty(LeafPropertiesConstant.LEAF_KEY)).getId();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">idGen.get(properties.getProperty(LeafPropertiesConstant.LEAF_KEY)).getId();</span></span></code></pre></div><p>显然，基于 Leaf 框架实现号段模式和 Snowflake 模式下的分布式 ID 生成方式非常简单，Leaf 框架为我们屏蔽了内部实现的复杂性。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>相比 ShardingSphere 中其他架构设计上的思想和实现方案，分布式主键非常独立，所以今天介绍的各种分布式主键的实现方式完全可以直接套用到日常开发过程中。无论是 ShardingSphere 自身实现的 SnowflakeShardingKeyGenerator，还是基于第三方框架实现的 LeafSegmentKeyGenerator 和 LeafSnowflakeKeyGenerator，都为我们使用分布式主键提供了直接的解决方案。当然，我们也可以在这些实现方案的基础上，进一步挖掘同类型的其他方案。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在分布式系统的开发过程中，分布式主键是一种基础需求。而对于与数据库相关的操作而言，我们往往需要将分布式主键与数据库的主键自动生成机制关联起来。在今天的课程中，我们就从 ShardingSphere 的自动生成键方案说起，引出了分布式主键的各种实现方案。这其中包括最简单的 UUID，也包括经典的雪花算法，以及雪花算法的改进方案 LeafSegment 和 LeafSnowflake 算法。</p><p>这里给你留一道思考题：ShardingSphere 中如何分别实现基于号段的 Leaf 以及基于 Snowflake 的 Leaf 来生成分布式 ID？</p><p>从下一课时开始，我们将进入到 ShardingSphere 分片引擎实现原理的讲解过程中，我将首先为你介绍解析引擎的执行流程，记得按时来听课。</p>`,40);function i(d,g,h,u,F,S){const a=p("Image");return o(),t("div",null,[c,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/3A/E1/Ciqc1F8iliiAVywgAAByh__z6Bw582.png"}),e(),y,n(a,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/3A/ED/CgqCHl8ilkuAHxUeAAHYgqa5Z0Q435.png"}),e(),E])}const b=l(r,[["render",i]]);export{C as __pageData,b as default};
