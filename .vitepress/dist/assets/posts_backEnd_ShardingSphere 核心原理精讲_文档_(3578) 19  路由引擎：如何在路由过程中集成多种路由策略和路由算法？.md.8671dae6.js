import{_ as o,j as e,o as t,g as r,k as l,h as a,Q as p,s}from"./chunks/framework.4e7d56ce.js";const q=JSON.parse('{"title":"分片策略整体结构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3578) 19  路由引擎：如何在路由过程中集成多种路由策略和路由算法？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3578) 19  路由引擎：如何在路由过程中集成多种路由策略和路由算法？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3578) 19  路由引擎：如何在路由过程中集成多种路由策略和路由算法？.md"},E=p(`<p>上一课时《18 | 路由引擎：如何实现数据访问的分片路由和广播路由？》，我们在介绍 ShardingRule 对象时，引出了 ShardingSphere 路由引擎中的<strong>分片策略 ShardingStrategy</strong>，分片策略是路由引擎中的一个核心概念，直接影响了最终的路由结果。今天，我们将围绕这一核心概念展开讨论。</p><h3 id="分片策略整体结构" tabindex="-1">分片策略整体结构 <a class="header-anchor" href="#分片策略整体结构" aria-label="Permalink to &quot;分片策略整体结构&quot;">​</a></h3><p>我们先来看分片策略 ShardingStrategy 的定义，ShardingStrategy 位于 sharding-core-common 工程的 org.apache.shardingsphere.core.strategy.route 包中，其定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStrategy</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取分片 Column </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getShardingColumns</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行分片 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, Collection&lt;</span><span style="color:#F97583;">RouteValue</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValues</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStrategy</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取分片 Column </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getShardingColumns</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行分片 </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, Collection&lt;</span><span style="color:#D73A49;">RouteValue</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValues</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 ShardingStrategy 包含两个核心方法：一个用于指定分片的 Column，而另一个负责执行分片并返回目标 DataSource 和 Table。ShardingSphere 中为我们提供了一系列的分片策略实例，类层结构如下所示：</p>`,5),y=p("<p>ShardingStrategy 实现类图</p><p>如果我们翻阅这些具体 ShardingStrategy 实现类的代码，会发现每个 ShardingStrategy 中都会包含另一个与路由相关的核心概念，即<strong>分片算法 ShardingAlgorithm</strong> ，我们发现 ShardingAlgorithm 是一个空接口，但包含了<strong>四个继承接口</strong>，即</p><ul><li><p>PreciseShardingAlgorithm</p></li><li><p>RangeShardingAlgorithm</p></li><li><p>ComplexKeysShardingAlgorithm</p></li><li><p>HintShardingAlgorithm</p></li></ul><p>而这四个接口又分别具有一批实现类，ShardingAlgorithm 的类层结构如下所示：</p>",4),i=s("p",null,"ShardingAlgorithm 子接口和实现类图",-1),g=s("p",null,[a("请注意，ShardingStrategy 与 ShardingAlgorithm 之间并不是一对一的关系。"),s("strong",null,"在一个 ShardingStrategy 中，可以同时使用多个 ShardingAlgorithm 来完成具体的路由执行策略"),a("。因此，我们具有如下所示的类层结构关系图：")],-1),d=p(`<p>由于分片算法的独立性，ShardingSphere 将其进行单独抽离。从关系上讲，分片策略中包含了分片算法和分片键，我们可以把分片策略的组成结构简单抽象成如下所示的公式：</p><p><strong>分片策略 = 分片算法 + 分片键</strong></p><h3 id="shardingsphere-分片策略详解" tabindex="-1">ShardingSphere 分片策略详解 <a class="header-anchor" href="#shardingsphere-分片策略详解" aria-label="Permalink to &quot;ShardingSphere 分片策略详解&quot;">​</a></h3><p>在 ShardingSphere 中，一共存在五种 ShardingStrategy 实现：</p><ul><li><p>不分片策略（NoneShardingStrategy）</p></li><li><p>Hint 分片策略（HintShardingStrategy）</p></li><li><p>标准分片策略（StandardShardingStrategy）</p></li><li><p>复合分片策略（ComplexShardingStrategy）</p></li><li><p>行表达式分片策略（InlineShardingStrategy）</p></li></ul><p>接下来，我们就对这些 ShardingStrategy一 一进行展开讨论。</p><h4 id="_1-不分片策略-noneshardingstrategy" tabindex="-1">1.不分片策略 NoneShardingStrategy <a class="header-anchor" href="#_1-不分片策略-noneshardingstrategy" aria-label="Permalink to &quot;1.不分片策略 NoneShardingStrategy&quot;">​</a></h4><p>这次我们从简单的开始，先来看 NoneShardingStrategy，这是一种不执行分片的策略，实现方式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NoneShardingStrategy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStrategy</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; shardingColumns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">RouteValue</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValues</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> availableTargetNames; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoneShardingStrategy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStrategy</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; shardingColumns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">RouteValue</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValues</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> availableTargetNames; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到在 NoneShardingStrategy 中，直接返回了输入的 availableTargetNames 而不执行任何具体路由操作。</p><h4 id="_2-hint-分片策略-hintshardingstrategy" tabindex="-1">2.Hint 分片策略 HintShardingStrategy <a class="header-anchor" href="#_2-hint-分片策略-hintshardingstrategy" aria-label="Permalink to &quot;2.Hint 分片策略 HintShardingStrategy&quot;">​</a></h4><p>接下来我们来看 HintShardingStrategy，回想我们在上一课时中通过这个 ShardingStrategy 来判断是否根据 Hint 进行路由。我们知道在有些场景下，分片字段不是由 SQL 本身决定，而由依赖于其他外置条件，这时候，就可使用 SQL Hint 灵活地注入分片字段。</p><blockquote><p>关于 Hint 的概念和前置路由的应用方式，可以回顾 <a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">《07 | 数据分片：如何实现分库、分表、分库+分表以及强制路由（下）？》</a>中的内容。</p></blockquote><p>基于 HintShardingStrategy，我们可以通过 Hint 而非 SQL 解析的方式执行分片策略。而 HintShardingStrategy 的实现依赖于 <strong>HintShardingAlgorithm</strong>，HintShardingAlgorithm 继承了 ShardingAlgorithm 接口。</p><p>其定义如下所示，可以看到该接口同样存在一个 doSharding 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingAlgorithm</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据 Hint 信息执行分片 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, HintShardingValue&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingAlgorithm</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据 Hint 信息执行分片 </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, HintShardingValue&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于 Hint 而言，因为它实际上是对 SQL 执行过程的一种直接干预，所以往往根据传入的 availableTargetNames 进行直接路由，所以我们来看 ShardingSphere 中 HintShardingAlgorithm 接口<strong>唯一的一个实现类 DefaultHintShardingAlgorithm</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultHintShardingAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintShardingValue&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> availableTargetNames; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultHintShardingAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintShardingValue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> availableTargetNames; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这个分片算法的执行方式确实是基于 availableTargetNames，但只是直接返回而已。所以对于 HintShardingStrategy 而言，默认情况下实际上并没有执行任何路由效果。HintShardingStrategy 的完整实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingStrategy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStrategy</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Getter</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; shardingColumns; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintShardingAlgorithm shardingAlgorithm; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingStrategy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintShardingStrategyConfiguration </span><span style="color:#FFAB70;">hintShardingStrategyConfig</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkNotNull</span><span style="color:#E1E4E8;">(hintShardingStrategyConfig.</span><span style="color:#B392F0;">getShardingAlgorithm</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;Sharding algorithm cannot be null.&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        shardingColumns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//从配置中获取 HintShardingAlgorithm </span></span>
<span class="line"><span style="color:#E1E4E8;">        shardingAlgorithm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hintShardingStrategyConfig.</span><span style="color:#B392F0;">getShardingAlgorithm</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SuppressWarnings</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unchecked&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">RouteValue</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValues</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        ListRouteValue shardingValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ListRouteValue) shardingValues.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; shardingResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingAlgorithm.</span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(availableTargetNames,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingValue</span><span style="color:#E1E4E8;">(shardingValue.</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">(), shardingValue.</span><span style="color:#B392F0;">getColumnName</span><span style="color:#E1E4E8;">(), shardingValue.</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(shardingResult); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingStrategy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStrategy</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Getter</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; shardingColumns; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintShardingAlgorithm shardingAlgorithm; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingStrategy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintShardingStrategyConfiguration </span><span style="color:#E36209;">hintShardingStrategyConfig</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkNotNull</span><span style="color:#24292E;">(hintShardingStrategyConfig.</span><span style="color:#6F42C1;">getShardingAlgorithm</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;Sharding algorithm cannot be null.&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        shardingColumns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//从配置中获取 HintShardingAlgorithm </span></span>
<span class="line"><span style="color:#24292E;">        shardingAlgorithm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hintShardingStrategyConfig.</span><span style="color:#6F42C1;">getShardingAlgorithm</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">RouteValue</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValues</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        ListRouteValue shardingValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ListRouteValue) shardingValues.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; shardingResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingAlgorithm.</span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(availableTargetNames,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingValue</span><span style="color:#24292E;">(shardingValue.</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">(), shardingValue.</span><span style="color:#6F42C1;">getColumnName</span><span style="color:#24292E;">(), shardingValue.</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(shardingResult); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们注意到在 HintShardingStrategy 中，shardingAlgorithm 变量的构建是通过 HintShardingStrategyConfiguration 配置类完成的，显然我们可以通过配置项来设置具体的 HintShardingAlgorithm。在日常开发过程中，我们一般都需要实现自定义的 HintShardingAlgorithm 并进行配置。</p><blockquote><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">《07 | 数据分片：如何实现分库、分表、分库+分表以及强制路由（下）？》</a>中演示了这种做法，你可以做一些回顾。</p></blockquote><h4 id="_3-标准分片策略-standardshardingstrategy" tabindex="-1">3.标准分片策略 StandardShardingStrategy <a class="header-anchor" href="#_3-标准分片策略-standardshardingstrategy" aria-label="Permalink to &quot;3.标准分片策略 StandardShardingStrategy&quot;">​</a></h4><p>StandardShardingStrategy 是一种标准分片策略，提供对 SQL 语句中的=, &gt;, &lt;, &gt;=, &lt;=, IN 和 BETWEEN AND 等操作的分片支持。</p><p>我们知道分片策略相当于分片算法与分片键的组合。对于 StandardShardingStrategy 而言，它<strong>只支持单分片键</strong> ，并提供 <strong>PreciseShardingAlgorithm</strong> 和 <strong>RangeShardingAlgorithm</strong> 这两个分片算法。</p><ul><li><p>PreciseShardingAlgorithm 是必选的，用于处理 = 和 IN 的分片；</p></li><li><p>RangeShardingAlgorithm 是可选的，用于处理 BETWEEN AND, &gt;, &lt;, &gt;=, &lt;= 分片。</p></li></ul><p>介绍 StandardShardingStrategy 之前，我们先对其涉及的这两种分片算法分别进行讨论。</p><p><strong>（1）PreciseShardingAlgorithm</strong></p><p>对于 PreciseShardingAlgorithm 而言，该接口用于处理使用单一键作为分片键的 = 和 IN 进行分片的场景。</p><p>它有两个实现类，分别是 PreciseModuloDatabaseShardingAlgorithm 和 PreciseModuloTableShardingAlgorithm。显然，前者用于数据库级别的分片，而后者面向表操作。它们的分片方法都一样，就是使用取模（Modulo）操作。以 PreciseModuloDatabaseShardingAlgorithm 为例，其实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PreciseModuloDatabaseShardingAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PreciseShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PreciseShardingValue&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> availableTargetNames) { </span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;">//根据分片值执行对2的取模操作 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(shardingValue.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> each; </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PreciseModuloDatabaseShardingAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PreciseShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PreciseShardingValue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> availableTargetNames) { </span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6A737D;">//根据分片值执行对2的取模操作 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(shardingValue.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> each; </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里对 PreciseShardingValue 进行了对 2 的取模计算，并与传入的 availableTargetNames 进行比对，从而决定目标数据库。</p><p><strong>（2）RangeShardingAlgorithm</strong></p><p>而对于 RangeShardingAlgorithm 而言，情况就相对复杂。RangeShardingAlgorithm 同样具有两个实现类：分别为 RangeModuloDatabaseShardingAlgorithm 和 RangeModuloTableShardingAlgorithm，它们的命名和代码风格与 PreciseShardingAlgorithm 的实现类非常类似。</p><p>这里也以 RangeModuloDatabaseShardingAlgorithm 为例，它的实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RangeModuloDatabaseShardingAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RangeShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RangeShardingValue&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;(availableTargetNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据分片值，决定分片的范围 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingValue.</span><span style="color:#B392F0;">getValueRange</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">lowerEndpoint</span><span style="color:#E1E4E8;">(); i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> shardingValue.</span><span style="color:#B392F0;">getValueRange</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">upperEndpoint</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> availableTargetNames) { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//分片值执行对 2 的取模操作，并与目标数据库进行比对 </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(each); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RangeModuloDatabaseShardingAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RangeShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RangeShardingValue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;(availableTargetNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据分片值，决定分片的范围 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingValue.</span><span style="color:#6F42C1;">getValueRange</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">lowerEndpoint</span><span style="color:#24292E;">(); i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> shardingValue.</span><span style="color:#6F42C1;">getValueRange</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">upperEndpoint</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> availableTargetNames) { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//分片值执行对 2 的取模操作，并与目标数据库进行比对 </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">                    result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(each); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与 PreciseModuloDatabaseShardingAlgorithm 相比，这里多了一层 for 循环，在该循环中添加了对范围 ValueRange 的 lowerEndpoint() 到 upperEndpoint() 中各个值的计算和比对。</p><p><strong>（3） StandardShardingStrategy 类</strong></p><p>介绍完分片算法之后，我们回到 StandardShardingStrategy 类，我们来看它的 doSharding 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> availableTargetNames, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">RouteValue</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> shardingValues) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    RouteValue shardingValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingValues.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; shardingResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingValue </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ListRouteValue </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果分片值是一个列表，则执行 PreciseShardingAlgorithm </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(availableTargetNames, (ListRouteValue) shardingValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//如果分片值是一个范围，则 执行RangeShardingAlgorithm </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(availableTargetNames, (RangeRouteValue) shardingValue); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(shardingResult); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> availableTargetNames, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">RouteValue</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> shardingValues) { </span></span>
<span class="line"><span style="color:#24292E;">    RouteValue shardingValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingValues.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; shardingResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingValue </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ListRouteValue </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果分片值是一个列表，则执行 PreciseShardingAlgorithm </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(availableTargetNames, (ListRouteValue) shardingValue)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果分片值是一个范围，则 执行RangeShardingAlgorithm </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(availableTargetNames, (RangeRouteValue) shardingValue); </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(shardingResult); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里根据传入的 shardingValues 的类型分别执行不同的 doSharding 方法，如果输入的是 <strong>ListRouteValue</strong> 则会使用 PreciseShardingAlgorithm，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> availableTargetNames, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ListRouteValue</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> shardingValue) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> shardingValue.</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//使用 PreciseShardingAlgorithm 进行分片 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preciseShardingAlgorithm.</span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(availableTargetNames, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PreciseShardingValue</span><span style="color:#E1E4E8;">(shardingValue.</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">(), shardingValue.</span><span style="color:#B392F0;">getColumnName</span><span style="color:#E1E4E8;">(), each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> target) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(target); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> availableTargetNames, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ListRouteValue</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> shardingValue) { </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> shardingValue.</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//使用 PreciseShardingAlgorithm 进行分片 </span></span>
<span class="line"><span style="color:#24292E;">        String target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preciseShardingAlgorithm.</span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(availableTargetNames, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PreciseShardingValue</span><span style="color:#24292E;">(shardingValue.</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">(), shardingValue.</span><span style="color:#6F42C1;">getColumnName</span><span style="color:#24292E;">(), each)); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> target) { </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(target); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而如果是 <strong>RangeRouteValue</strong> 则使用 RangeShardingAlgorithm，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> availableTargetNames, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RangeRouteValue</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> shardingValue) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> rangeShardingAlgorithm) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot find range sharding strategy in sharding rule.&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//使用 RangeShardingAlgorithm 进行分片 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rangeShardingAlgorithm.</span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(availableTargetNames,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RangeShardingValue</span><span style="color:#E1E4E8;">(shardingValue.</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">(), shardingValue.</span><span style="color:#B392F0;">getColumnName</span><span style="color:#E1E4E8;">(), shardingValue.</span><span style="color:#B392F0;">getValueRange</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> availableTargetNames, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RangeRouteValue</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> shardingValue) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> rangeShardingAlgorithm) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot find range sharding strategy in sharding rule.&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//使用 RangeShardingAlgorithm 进行分片 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rangeShardingAlgorithm.</span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(availableTargetNames,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RangeShardingValue</span><span style="color:#24292E;">(shardingValue.</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">(), shardingValue.</span><span style="color:#6F42C1;">getColumnName</span><span style="color:#24292E;">(), shardingValue.</span><span style="color:#6F42C1;">getValueRange</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_4-复合分片策略-complexshardingstrategy" tabindex="-1">4.复合分片策略 ComplexShardingStrategy <a class="header-anchor" href="#_4-复合分片策略-complexshardingstrategy" aria-label="Permalink to &quot;4.复合分片策略 ComplexShardingStrategy&quot;">​</a></h4><p>与 StandardShardingStrategy 只支持单分片键不同，ShardingSphere 的官网表明 ComplexShardingStrategy <strong>支持多分片键</strong>。</p><p>ComplexShardingStrategy 的 doSharding 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> availableTargetNames, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">RouteValue</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> shardingValues) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Collection&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt;&gt; columnShardingValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(shardingValues.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Range&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt;&gt; columnRangeValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(shardingValues.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    String logicTableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (RouteValue each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> shardingValues) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ListRouteValue) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//构建 ListRouteValue </span></span>
<span class="line"><span style="color:#E1E4E8;">            columnShardingValues.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(each.</span><span style="color:#B392F0;">getColumnName</span><span style="color:#E1E4E8;">(), ((ListRouteValue) each).</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> RangeRouteValue) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//构建 RangeRouteValue </span></span>
<span class="line"><span style="color:#E1E4E8;">            columnRangeValues.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(each.</span><span style="color:#B392F0;">getColumnName</span><span style="color:#E1E4E8;">(), ((RangeRouteValue) each).</span><span style="color:#B392F0;">getValueRange</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        logicTableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> each.</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; shardingResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingAlgorithm.</span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(availableTargetNames, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ComplexKeysShardingValue</span><span style="color:#E1E4E8;">(logicTableName, columnShardingValues, columnRangeValues)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(shardingResult); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> availableTargetNames, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">RouteValue</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> shardingValues) { </span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Collection&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt;&gt; columnShardingValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(shardingValues.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Range&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt;&gt; columnRangeValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(shardingValues.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    String logicTableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (RouteValue each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> shardingValues) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ListRouteValue) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//构建 ListRouteValue </span></span>
<span class="line"><span style="color:#24292E;">            columnShardingValues.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(each.</span><span style="color:#6F42C1;">getColumnName</span><span style="color:#24292E;">(), ((ListRouteValue) each).</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> RangeRouteValue) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//构建 RangeRouteValue </span></span>
<span class="line"><span style="color:#24292E;">            columnRangeValues.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(each.</span><span style="color:#6F42C1;">getColumnName</span><span style="color:#24292E;">(), ((RangeRouteValue) each).</span><span style="color:#6F42C1;">getValueRange</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        logicTableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> each.</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; shardingResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingAlgorithm.</span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(availableTargetNames, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ComplexKeysShardingValue</span><span style="color:#24292E;">(logicTableName, columnShardingValues, columnRangeValues)); </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(shardingResult); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里基于传入的 RouteValue 分别构建了 ListRouteValue 和 RangeRouteValue，然后传递给 <strong>ComplexKeysShardingAlgorithm</strong> 进行计算。由于多分片键之间的关系复杂，因此 ComplexShardingStrategy 并未进行过多的封装，而是直接将分片键值组合以及分片操作符透传至分片算法，完全由应用开发者实现，提供最大的灵活度。</p><p>基于这一点考虑，ShardingSphere 的 ComplexKeysShardingAlgorithm 的<strong>唯一实现类 DefaultComplexKeysShardingAlgorithm</strong> 显得非常简单，其代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultComplexKeysShardingAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ComplexKeysShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ComplexKeysShardingValue&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> availableTargetNames; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultComplexKeysShardingAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ComplexKeysShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ComplexKeysShardingValue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> availableTargetNames; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到 DefaultComplexKeysShardingAlgorithm 与 NoneShardingStrategy 的实现实际上是一样的，相当于就是什么都没有做，也就是所有的工作都需要交给开发者自行进行设计和实现。</p><h4 id="_5-行表达式分片策略-inlineshardingstrategy" tabindex="-1">5.行表达式分片策略 InlineShardingStrategy <a class="header-anchor" href="#_5-行表达式分片策略-inlineshardingstrategy" aria-label="Permalink to &quot;5.行表达式分片策略 InlineShardingStrategy&quot;">​</a></h4><p>与前面介绍的各种分片策略相比，InlineShardingStrategy 采用了一种特殊的机制来实现路由。</p><p>我们已经在介绍分库分表案例中大量使用了行表达式，也知道在使用行表达式时需要指定一个分片列 shardingColumn 以及一个类似 ds$-&gt;{user_id % 2} 的表达式。</p><p>你可能会好奇 ShardingSphere 是如何来解析这样的表达式的呢？基于 InlineShardingStrategy 定义的变量，我们可以找到问题的答案：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//分片列 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String shardingColumn; </span></span>
<span class="line"><span style="color:#6A737D;">//Groovy 中的 Closure 实例 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Closure&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; closure;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//分片列 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String shardingColumn; </span></span>
<span class="line"><span style="color:#6A737D;">//Groovy 中的 Closure 实例 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Closure&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; closure;</span></span></code></pre></div><p>原来，ShardingSphere 在这里用到了 Groovy 中的 Closure 对象。Groovy 是可运行在 JVM 中的一种动态语言，既可以用于面向对象编程，又可以用作纯粹的脚本语言。使用该种语言不必编写过多的代码，同时又具有 Closure 和动态语言中的其他特性。在使用方式上，基本也与使用 Java 代码的方式相同。</p><p>基于 Groovy 的动态语言特性，InlineShardingStrategy 提供对 SQL 语句中的 = 和 IN 的分片操作支持，目前只支持单分片键。对于类似 ds$-&gt;{user_id % 2} 这样的常见分片算法，可以通过简单配置进行使用，从而避免烦琐的 Java 代码开发。</p><p>我们直接来到 InlineShardingStrategy 的 doSharding 方法，该方法的实现过程与标准分片策略 StandardShardingStrategy 中的相同，不同的是需要通过 Groovy 进行解析输入参数从而获取最终路由结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ListRouteValue shardingValue) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (PreciseShardingValue&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transferToPreciseShardingValues</span><span style="color:#E1E4E8;">(shardingValue)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//通过 execute 方法解析出最终的结果 </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ListRouteValue shardingValue) { </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (PreciseShardingValue&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transferToPreciseShardingValues</span><span style="color:#24292E;">(shardingValue)) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//通过 execute 方法解析出最终的结果 </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(each)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 execute 方法中构建了 Groovy 的 Closure 对象，并设置了对应的解析策略以及所需要解析的属性，并最终返回解析的结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PreciseShardingValue shardingValue) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//构建 Groovy 的 Closur e对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Closure&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> closure.</span><span style="color:#B392F0;">rehydrate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Expando</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">setResolveStrategy</span><span style="color:#E1E4E8;">(Closure.DELEGATE_ONLY); </span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(shardingColumn, shardingValue.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取解析结果 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PreciseShardingValue shardingValue) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//构建 Groovy 的 Closur e对象 </span></span>
<span class="line"><span style="color:#24292E;">    Closure&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> closure.</span><span style="color:#6F42C1;">rehydrate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Expando</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">setResolveStrategy</span><span style="color:#24292E;">(Closure.DELEGATE_ONLY); </span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(shardingColumn, shardingValue.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取解析结果 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，作为总结，我们要注意所有的 ShardingStrategy 相关类都位于 sharding-core-common 工程的 org.apache.shardingsphere.core.strategy 包下：</p>`,64),h=s("p",null,"ShardingStrategy 相关类的包结构",-1),u=s("p",null,"而所有的 ShardingAlgorithm 相关类则位于 sharding-core-api 工程的 org.apache.shardingsphere.api.sharding 包下：",-1),S=p(`<p>ShardingAlgorithm 相关类的包结构</p><p>我们在前面已经提到过 ShardingStrategy 的创建依赖于 ShardingStrategyConfiguration，ShardingSphere 也提供了一个 ShardingStrategyFactory 工厂类用于创建各种具体的 ShardingStrategy：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStrategyFactory</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ShardingStrategy </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingStrategyConfiguration </span><span style="color:#FFAB70;">shardingStrategyConfig</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingStrategyConfig </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> StandardShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardShardingStrategy</span><span style="color:#E1E4E8;">((StandardShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingStrategyConfig </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InlineShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InlineShardingStrategy</span><span style="color:#E1E4E8;">((InlineShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingStrategyConfig </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ComplexShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ComplexShardingStrategy</span><span style="color:#E1E4E8;">((ComplexShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingStrategyConfig </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> HintShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingStrategy</span><span style="color:#E1E4E8;">((HintShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NoneShardingStrategy</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStrategyFactory</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ShardingStrategy </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingStrategyConfiguration </span><span style="color:#E36209;">shardingStrategyConfig</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingStrategyConfig </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> StandardShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardShardingStrategy</span><span style="color:#24292E;">((StandardShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingStrategyConfig </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InlineShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InlineShardingStrategy</span><span style="color:#24292E;">((InlineShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingStrategyConfig </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ComplexShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ComplexShardingStrategy</span><span style="color:#24292E;">((ComplexShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingStrategyConfig </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> HintShardingStrategyConfiguration) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingStrategy</span><span style="color:#24292E;">((HintShardingStrategyConfiguration) shardingStrategyConfig); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoneShardingStrategy</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而这里用到的各种 ShardingStrategyConfiguration 也都位于 sharding-core-api 工程的org.apache.shardingsphere.api.sharding.strategy 包下：</p>`,4),F=s("p",null,"ShardingStrategyConfiguration 相关类的包结构",-1),A=s("br",null,null,-1),C=s("p",null,"这样，通过对路由引擎的介绍，我们又接触到了一大批 ShardingSphere 中的源代码。",-1),m=s("p",null,"至此，关于 ShardingSphere 路由引擎部分的内容基本都介绍完毕。作为总结，我们在《17 | 路由引擎：如何理解分片路由核心类 ShardingRouter 的运作机制？》中所给出的时序图中添加了 ShardingStrategy 和 ShardingAlgorithm 部分的内容，如下所示：",-1),D=s("h3",{id:"从源码解析到日常开发",tabindex:"-1"},[a("从源码解析到日常开发 "),s("a",{class:"header-anchor",href:"#从源码解析到日常开发","aria-label":'Permalink to "从源码解析到日常开发"'},"​")],-1),v=s("p",null,[a("在我们设计软件系统的过程中，面对复杂业务场景时，"),s("strong",null,"职责分离"),a("始终是需要考虑的一个设计点。ShardingSphere 对于分片策略的设计和实现很好地印证了这一观点。")],-1),b=s("p",null,"分片策略在 ShardingSphere 中实际上是一个比较复杂的概念，但通过将分片的具体算法分离出去并提炼 ShardingAlgorithm 接口，并构建 ShardingStrategy 和 ShardingAlgorithm 之间一对多的灵活关联关系，我们可以更好地把握整个分片策略体系的类层结构，这种职责分离机制同样可以应用与日常开发过程中。",-1),f=s("h3",{id:"小结与预告",tabindex:"-1"},[a("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),V=s("p",null,"承接上一课时的内容，今天我们全面介绍了 ShardingSphere 中的五大分片策略和四种分片算法以及它们之间的组合关系。",-1),_=s("p",null,"ShardingSphere 路由引擎中执行路由的过程正是依赖于这些分片策略和分片算法的功能特性。当然，作为一款具有高扩展性的开源框架，我们也可以基于自身的业务需求，实现特定的分片算法并嵌入到具体的分片策略中。",-1),B=s("p",null,"这里给你留一道思考题：ShardingSphere 中分片策略与分片算法之间是如何协作的？ 欢迎你在留言区与大家讨论，我将一一点评解答。",-1),R=s("p",null,"在路由引擎的基础上，下一课时将进入 ShardingSphere 分片引擎的另一个核心阶段，即改写引擎。",-1);function N(T,k,I,H,w,x){const n=e("Image");return t(),r("div",null,[E,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/42/E5/Ciqc1F86ZlmARCBiAAEMHwjkZPk259.png"}),a(),y,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/42/E5/Ciqc1F86ZmSAaVqsAACWpLDZQm8610.png"}),a(),i,g,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/42/E5/Ciqc1F86Zm-AE3bOAACLylkVuks873.png"}),d,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/42/F1/CgqCHl86Zp-AOn75AAII97S_QVE429.png"}),a(),h,u,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/42/F1/CgqCHl86ZqeAEn76AAGjHlgYljM135.png"}),a(),S,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/42/F1/CgqCHl86ZrGAJLi5AADslitwfjk537.png"}),a(),F,A,C,m,l(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/42/F1/CgqCHl86ZrmAcGiLAADURjzyD4w363.png"}),D,v,b,f,V,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/42/F1/CgqCHl86ZsaAQx7cAABspIBuz1Y073.png"}),_,B,R])}const L=o(c,[["render",N]]);export{q as __pageData,L as default};
