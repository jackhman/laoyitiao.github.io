import{_ as o,j as e,o as t,g as r,k as l,h as s,s as n,Q as p}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"Node.js 进程安全 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6792) 10  系统稳定：如何监控和保护进程安全？.md","filePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6792) 10  系统稳定：如何监控和保护进程安全？.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/Node.js 应用开发实战_文档/(6792) 10  系统稳定：如何监控和保护进程安全？.md"},E=p('<p>在开始本讲之前，我们先了解一个特点，<strong>在前端因为某些用户的特殊性，导致的逻辑 Bug 会造成这个用户服务异常，但是在服务端如果没有做好异常保护，因为某个用户的特殊操作可能会导致整个进程退出，从而无法提供服务</strong>，因此如何做好监控和进程安全保护就显得尤为重要。</p><p>本讲我将介绍在 Node.js 代码层面应该如何降低异常出现的概率，其次会介绍当出现现网问题时，如何及时发现并通知相应的开发去处理。</p><h3 id="node-js-进程安全" tabindex="-1">Node.js 进程安全 <a class="header-anchor" href="#node-js-进程安全" aria-label="Permalink to &quot;Node.js 进程安全&quot;">​</a></h3><p>这里我们主要讲解为什么 Node.js 的进程安全和健康状况很重要。</p><h4 id="进程安全很重要" tabindex="-1">进程安全很重要 <a class="header-anchor" href="#进程安全很重要" aria-label="Permalink to &quot;进程安全很重要&quot;">​</a></h4><p>这里举一个例子，想象一下我们家庭电网的安全保护策略，一般情况下家庭都会有<strong>短路跳闸设施</strong>，其次插座或者电器也设有短路保护功能。</p><p>如果电器没有安全保护措施，就会直接导致家庭电网跳闸整体不可用，但是由于有了跳闸保护，至少我们可以重启，从而服务正常，但是这期间一家人由于一个人的原因，导致了比如说弟弟无法继续看书了、爸爸无法继续洗热水澡了、妈妈无法继续做饭了。</p><p>再说 Node.js，<strong>由于一个用户的异常访问或者数据异常，加上没有做好异常处理和安全保护，直接导致了整个 Node.js 服务重启了，从而中断了所有人的请求，用户体验非常差</strong>。</p><p>接下来我们再往上升级，如果家庭电网没有跳闸短路保护措施，将直接导致上一层电网异常重启，从而影响到其他居民，这样影响面又更大了，从而导致的问题也更严重了。</p><p>这就是和 Node.js 一样的原理，因此我们<strong>要尽可能地在最小处进行安全保护</strong>，也就是我们所说的在每个插电设备上尽量装有短路保护设备一样，这样就最小地影响用户，比如这个用户的异常数据只影响了该用户，而不会因为这个用户影响到整个服务的用户。</p><h4 id="哪些场景会导致-node-js-异常" tabindex="-1">哪些场景会导致 Node.js 异常？ <a class="header-anchor" href="#哪些场景会导致-node-js-异常" aria-label="Permalink to &quot;哪些场景会导致 Node.js 异常？&quot;">​</a></h4><ul><li><p>由于 Node.js 使用的是 JavaScript，而<strong>JavaScript 是一个弱类型语言</strong> ，因此<strong>在现网经常会引发一些由代码逻辑的异常导致的进程异常退出</strong>。</p></li><li><p>其次在 Node.js 中也经常会因为内存的使用不当，导致内存泄漏，当在 64 位系统中达到 1.4 G（32 位系统 0.7 G）时，Node.js 就会异常崩溃。</p></li><li><p>再而由于<strong>Node.js 的 I/O 较多也较为频繁</strong>，当启用较多 I/O 句柄，但是没有及时释放，同样会引发进程问题。</p></li></ul><p>这些都会导致服务器异常退出，就没办法正常提供服务了，从而引发现网问题。</p><p>接下来我们就从<strong>代码逻辑</strong> 和<strong>服务器异常</strong>两个方面来介绍哪些场景会导致这些问题，并且我们应该如何去杜绝这类问题，其次还将演示一个搭建 Node.js 性能告警平台，来解决告警通知机制。</p><h3 id="代码逻辑异常汇总" tabindex="-1">代码逻辑异常汇总 <a class="header-anchor" href="#代码逻辑异常汇总" aria-label="Permalink to &quot;代码逻辑异常汇总&quot;">​</a></h3>',15),y=p(`<p>图 1 Node.js 异常问题</p><p>以上是一个异常问题的部分汇总，前端同学都应该掌握这些基本问题的解决方案，不过我们也来详细地看看每个问题出现的场景。</p><h4 id="null-property" tabindex="-1">null.property <a class="header-anchor" href="#null-property" aria-label="Permalink to &quot;null.property&quot;">​</a></h4><p>由于 JavaScript 是一个弱类型语言，因此<strong>如果对数据没有严格的判断就进行逻辑处理的话，会导致代码服务异常退出，从而影响用户体验</strong>。这里我们统一看 null.property 这种问题。</p><p>首先第一种就是<strong>多层数据嵌套时 (data.str?.str)</strong>，需要逐层地进行数据判断，如下代码所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Controller</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../core/controller&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">obj</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;userinfo&#39;</span><span style="color:#E1E4E8;"> : {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;nick&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;nodejs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">  : </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.nick;</span></span>
<span class="line"><span style="color:#E1E4E8;">        data.userinfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 中间经过一系列处理，userinfo 被设置为了 null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.name; </span><span style="color:#6A737D;">// 此时再去访问 userinfo 的信息就无法处理了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;good&#39;</span><span style="color:#E1E4E8;">, {nick, name});</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Error;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Controller</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../core/controller&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">obj</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;userinfo&#39;</span><span style="color:#24292E;"> : {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;nick&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;node&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;nodejs&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">  : </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.nick;</span></span>
<span class="line"><span style="color:#24292E;">        data.userinfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 中间经过一系列处理，userinfo 被设置为了 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.name; </span><span style="color:#6A737D;">// 此时再去访问 userinfo 的信息就无法处理了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;good&#39;</span><span style="color:#24292E;">, {nick, name});</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Error;</span></span></code></pre></div><p><strong>你可以看到由于 userinfo 是一个 null，使用 null.name 是一定会报错的，而这个报错就会直接导致进程退出</strong>，在我们源码的框架中由于做了保护，是不会退出，而是给出一个如下的提示信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TypeError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Cannot read property </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> of </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">at Error.</span><span style="color:#B392F0;">obj</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">XXX</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Desktop</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">专栏技术</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nodejs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nodejs</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">controller</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">error.js</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TypeError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Cannot read property </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> of </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">at Error.</span><span style="color:#6F42C1;">obj</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">XXX</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Desktop</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">专栏技术</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nodejs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nodejs</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">controller</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">error.js</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;">)</span></span></code></pre></div><p>data.str?.str 和 data[$str]?[$str] 是类似的，但是<strong>data[$str]?[$str] 这种问题在现网出现会更多</strong>，由于 $str 是一个变量，因此这个变量都有可能为 null，如下代码所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">arrObj</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;userinfo&#39;</span><span style="color:#E1E4E8;"> : {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;nick&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;nodejs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;lastName&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">  : </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;js-nodejs&#39;</span><span style="color:#E1E4E8;"> : {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;Chinese&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;90&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;English&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;80&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;Mathematics&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;99&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lastName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.lastName;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.name;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fullName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">lastName</span><span style="color:#9ECBFF;">} \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 获取用户真实姓名，由于数据中使用的是 - 连接，这里使用的是空格，导致了异常 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> chineseFraction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[fullName][</span><span style="color:#9ECBFF;">&#39;Chinese&#39;</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// 由于 fullName 不存在，所以会导致异常</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;good&#39;</span><span style="color:#E1E4E8;">, {chineseFraction});</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">arrObj</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;userinfo&#39;</span><span style="color:#24292E;"> : {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;nick&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;node&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;nodejs&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;lastName&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">  : </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;js-nodejs&#39;</span><span style="color:#24292E;"> : {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;Chinese&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;90&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;English&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;80&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;Mathematics&#39;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;99&#39;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lastName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.lastName;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">lastName</span><span style="color:#032F62;">} \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 获取用户真实姓名，由于数据中使用的是 - 连接，这里使用的是空格，导致了异常 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> chineseFraction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[fullName][</span><span style="color:#032F62;">&#39;Chinese&#39;</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 由于 fullName 不存在，所以会导致异常</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;good&#39;</span><span style="color:#24292E;">, {chineseFraction});</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>以上问题在实际开发过程中更常见，由于 fullName 是一个变量，而变量往往是不同的值，因此出现问题的概率性更高。</p><p>避免上面两个问题的方式也非常简单，就是对数据进行一些必要的检查就可以了，下面就是修复后的逻辑：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> nick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.nick;</span></span>
<span class="line"><span style="color:#E1E4E8;">data.userinfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 中间经过一系列处理，userinfo 被设置为了 null</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">data.userinfo){ </span><span style="color:#6A737D;">// 注意既需要判断 data 也需要判断 userinfo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;data error&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.name; </span><span style="color:#6A737D;">// 此时再去访问 userinfo 的信息就无法处理</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.nick;</span></span>
<span class="line"><span style="color:#24292E;">data.userinfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 中间经过一系列处理，userinfo 被设置为了 null</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">data </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">data.userinfo){ </span><span style="color:#6A737D;">// 注意既需要判断 data 也需要判断 userinfo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;data error&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.name; </span><span style="color:#6A737D;">// 此时再去访问 userinfo 的信息就无法处理</span></span></code></pre></div><p><strong>主要是对每一层数据都进行校验</strong>，从 data 到 data.userinfo，而如果有四层，那么就需要前三层逐层去判断，代码可读性以及后期可维护性都比较低。</p><p>这样会发现一个问题，<strong>当数据结构非常复杂时，你的判断逻辑也会非常复杂，从而影响了开发效率，为了解决这个问题我们可以使用 lodash 这个库的 get 方法</strong>，代码修改如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lastName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.lastName;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.userinfo.name;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fullName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">lastName</span><span style="color:#9ECBFF;">} \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 获取用户真实姓名，由于数据中使用的是 - 连接，这里使用的是空格，导致了异常 </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> chineseFraction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(data, </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">fullName</span><span style="color:#9ECBFF;">}.Chinese\`</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 使用 lodash 来简化</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lastName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.lastName;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.userinfo.name;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">lastName</span><span style="color:#032F62;">} \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 获取用户真实姓名，由于数据中使用的是 - 连接，这里使用的是空格，导致了异常 </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> chineseFraction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(data, </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">fullName</span><span style="color:#032F62;">}.Chinese\`</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 使用 lodash 来简化</span></span></code></pre></div><p>在上面代码中的第 5 行，就简化了这部分判断逻辑，可以直接去获取属性，如果未获取到则设置默认 0 这个值，避免异常情况。</p><p>这样以后在系统层面就不会报错了，建议后续我们都使用这种方法来尽量避免以上的异常问题。</p><p><strong>object?.forEach</strong> 和<strong>for(let i=0;i&lt;arr?.length:i++){}</strong> 这类问题和上面基本相似。不过这里是<strong>类型的判断</strong>，应用这些方法之前都需要进行类型的检测，不然也会引发现网异常，例如下面这种处理方式才是正确的。</p>`,19),i=p(`<p>图 2 for 类型检测方法</p><p>我们对比下左右两边的逻辑，<strong>只需要判断是否为 null 就行了，因为我们需要使用数组的 length 属性，如果是一个 null.length 则会引发报错</strong>。</p><h4 id="parameters-error" tabindex="-1">parameters error <a class="header-anchor" href="#parameters-error" aria-label="Permalink to &quot;parameters error&quot;">​</a></h4><p>接下来我们看下<strong>内部参数导致的一些问题</strong> ，主要来看下常用的<strong>JSON.parse</strong>。</p><p><strong>关于 JSON.parse 很多时候我们都比较自然地将其他接口或者第三方的数据拿来解析，但是这里往往会忽略其非 JSON 字符串的问题</strong>，比如下面这段代码就会引发异常：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">jsonParse</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nodejs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;good&#39;</span><span style="color:#E1E4E8;">, obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">jsonParse</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nodejs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(str);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;good&#39;</span><span style="color:#24292E;">, obj);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了解决这个问题，我们需要进行<strong>try catch 异常判断</strong>，如下代码所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">jsonParse</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nodejs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;good&#39;</span><span style="color:#E1E4E8;">, obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">jsonParse</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nodejs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;good&#39;</span><span style="color:#24292E;">, obj);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在我们框架中也存在一个问题，就是<strong>require</strong> 的时候未进行异常判断，这部分你可以去<a href="https://github.com/love-flutter/nodejs-column?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 09 讲源码中</a>查看，并与本讲的代码进行对比，看看哪部份进行了修改。</p><p><strong>其次 Node.js 的 fs 这个模块应用是非常多的，在应用 fs 的方法时，最好是使用 try catch 进行异常处理</strong>，因为很多时候可能存在权限不足或者文件不存在等问题。</p><h4 id="other-errors" tabindex="-1">other errors <a class="header-anchor" href="#other-errors" aria-label="Permalink to &quot;other errors&quot;">​</a></h4><p>JavaScript 也存在一些语法问题，由于 Node.js 是运行时报错，因此语法问题也只会在运行期间被发现，比如我们常发现的同变量重新申明的问题，<strong>特别是 let 和 var 声明同一个变量</strong>。</p><p><strong>当前 Node.js 的 Promise 应用越来越广泛了，因此对于 Promise 的 catch 也应该多进行重视</strong>，对于每个 Promise 都应该要处理其异常 catch 逻辑，不然系统会提示 warning 信息。</p><p>还有一些常见的长连接的服务，比如 Socket、Redis、Memcache 等等，我们需要在连接异常时进行处理，如果没有处理同样会导致异常，<strong>比如 Socket 提供了 Socket.on(&#39;error&#39;) 的监听</strong>。</p><p>还有其他的常见问题，希望各位同学在下面补充，我们一起来完善这份报错指引。</p><h3 id="常见服务异常解析" tabindex="-1">常见服务异常解析 <a class="header-anchor" href="#常见服务异常解析" aria-label="Permalink to &quot;常见服务异常解析&quot;">​</a></h3><p>服务器异常在 Node.js 中最常见的问题主要是<strong>内存泄漏</strong> 、<strong>句柄泄漏</strong> 以及<strong>网络模块调用</strong>。</p><p>接下来我们看看一些更深层次的关于 Node.js 的问题，我们先来回顾下在《08 | 优化设计：在 I/O 方面应该注意哪些要点？》所介绍的高性能日志模块的设计：</p><ul><li><p><strong>设置最大临时缓存数，超出则不使用缓存</strong>；</p></li><li><p><strong>设置最大缓存句柄数，超出则不使用缓存</strong>；</p></li><li><p><strong>定时清理当前的临时缓存和句柄缓存</strong>。</p></li></ul><p>这三个设计的目的主要是<strong>为了避免内存泄漏、句柄泄漏问题</strong>。可以思考下，如果不进行定时清理或者上限限制，随着时间的增长，其中文件句柄会越来越多，其次在并发较高时，临时缓存的日志内容可能超出 1.4 G，从而引发重启。</p><p>具体实际开发中还有哪些场景我们也来详细分析下。</p><h4 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h4><p><strong>一般情况下不建议使用全局变量</strong>，因为全局变量是最容易引发内存泄漏问题的，举个简单的例子，比如我们需要将用户的 session 保存在一个全局变量中，随着用户越来越多，这个 session 变量保存的数据也会越来越大，而且没有清理的规则，即使有清理规则，清理时间的长短影响用户体验，其次也影响内存的大小。</p><p>包括我们上面所说的日志模块就是一个全局变量，这个全局变量必须要<strong>有一定的上限和清理规则才能保证服务的安全</strong>。</p><h4 id="单例模块中的变量" tabindex="-1">单例模块中的变量 <a class="header-anchor" href="#单例模块中的变量" aria-label="Permalink to &quot;单例模块中的变量&quot;">​</a></h4><p>要注意一个点，有些模块我们使用单例的模式，就是在每次 require 后都返回这个对象，这种情况也比较容易引发内存泄漏的问题。</p><p>因为<strong>单例模式会引发每个用户访问的数据的叠加</strong>，比如下面这个模块的代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> singleton;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Singleton</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">uid</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        userList.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(uid);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getLength</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(singleton){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> singleton;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    singleton </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Singleton</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> singleton;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> singleton;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">uid</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        userList.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(uid);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userList.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(singleton){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> singleton;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    singleton </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> singleton;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码就是一个单例模式，其中会无限地往 userList push 数据，每调用一次 add 插入一条数据，这样会导致内存泄漏的问题，我们在 GitHub 源码的 error.js 中的 controller 有一个 singletonTest 方法，你会发现每调用一次数组长度就 +1，并且永远不会减少，除非重启。</p><p>对于这种单例的代码，<strong>我们要严格地进行 CR</strong>，因为这种问题真的很容易被忽视。</p><h4 id="打开文件后-未主动关闭" tabindex="-1">打开文件后，未主动关闭 <a class="header-anchor" href="#打开文件后-未主动关闭" aria-label="Permalink to &quot;打开文件后，未主动关闭&quot;">​</a></h4><p>这个是最容易理解的，一般打开文件句柄后，我们都应该主动关闭，<strong>如果未主动关闭，就会导致文件句柄越来越多，从而引发句柄泄漏问题</strong>。</p><p>在 Node.js 里 fs 的模块中都提供了打开文件句柄关闭的方法，比如 fs.open 提供了 fs.close 的方法，其次比如 fs.createWriteStream 提供了 fileStream.end 的方法。</p><h4 id="网络句柄" tabindex="-1">网络句柄 <a class="header-anchor" href="#网络句柄" aria-label="Permalink to &quot;网络句柄&quot;">​</a></h4><p>网络句柄超出的情况一般还好，因为目标服务器会主动拒绝了你的请求，但是作为调用方，应该也要复用句柄，主动避免这类问题。其次还要注意连接超时控制，特别是在使用 Node.js 第三方库 request 以及 Socket 模块时。</p><h3 id="监控告警介绍" tabindex="-1">监控告警介绍 <a class="header-anchor" href="#监控告警介绍" aria-label="Permalink to &quot;监控告警介绍&quot;">​</a></h3><p>图 3 是一个最简单的层级结构图，具体每个层级设计其实是非常复杂的。</p>`,37),F=p('<p>图 3 监控告警平台简单流程图</p><p>我们可以看到在 Node.js 服务器中，会包含两部分：</p><ul><li><p><strong>自动定时采集进程的指标数据</strong>；</p></li><li><p><strong>接口被调用或者访问后主动上报的信息</strong>。</p></li></ul><p>以上的两部分信息都会异步地发送给本地一个采集服务，落地到本地临时缓存中，然后定时地将本地临时缓存的上报信息发送给监控数据处理服务。</p><p>监控数据处理经过一系列的复杂计算，按照一定的数据要求落入监控平台的数据存储中，告警平台则使用特定 QL 语法查询数据库，主要服务于三种类型：</p><ul><li><p><strong>触发告警</strong>，根据告警平台的设置，当数据落入后判断是否满足告警机制，满足则调用告警模块触发告警；</p></li><li><p><strong>查询视图</strong>，这部分就是一个前端可交互的界面，用户可以在这个平台查询监控信息；</p></li><li><p><strong>API 接口</strong>，有些情况需要针对告警进行一些研发操作，因此也支持 API 来查询监控告警信息。</p></li></ul><p>接下来我们再来看看 Node.js 到底有哪些监控告警平台，以及监控的指标会有哪些。</p><h4 id="平台介绍" tabindex="-1">平台介绍 <a class="header-anchor" href="#平台介绍" aria-label="Permalink to &quot;平台介绍&quot;">​</a></h4><p>在系统监控告警方面，<strong>Node.js 的 PM2 提供了付费服务</strong>，你可以直接用 PM2 来构建一个专门的监控告警机制，其中覆盖的进程管理功能也是比较齐全的。</p><p>不过还有另外一个方式就是<strong>自己构建一套开源免费的 prometheus 服务</strong> ，如果是公司级别应用的话，可以参考 prometheus 官网自己搭建一套这种服务，其对 Node.js 的支持也是非常到位的，扩展请参考<a href="https://github.com/siimon/prom-client?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">GitHub prom-client 库</a>。</p><p>而在业务告警方面你可以直接<strong>复用当前后台侧的业务告警系统</strong> ，或者<strong>prometheus</strong> 也是可以的，又或者目前常用的一套组合系统<strong>Grafana（主要是监控系统界面操作平台）+InfluxDB（数据存储）+telegraf（数据采集）</strong> 也可以。</p><p>以上工具，具体如何安装、配置、使用，你可以去官网按照指引进行即可，我们接下来看下到底会监控哪些指标以及各个指标的含义。</p><h4 id="监控指标" tabindex="-1">监控指标 <a class="header-anchor" href="#监控指标" aria-label="Permalink to &quot;监控指标&quot;">​</a></h4><p>在进程监控告警层面，我们要了解到底应该监控 Node.js 的哪些指标属性，其次在业务层面我们又应该主动上报哪些信息来作为监控指标。</p><p>在 Node.js 进程方面我们要监控以下几个指标。</p><ul><li><p><strong>事件延迟</strong> ，因为 Node.js 主要是事件循环，如果主线程被长时间占用，就会导致事件执行有延迟，而最简单的办法就是<strong>使用 setTimeout 来判断</strong> 。当我们设定 1000ms 执行某个事件，但是真正开始执行的时间大于 1000ms，那么我们就可能存在事件延迟了，而如果这个延迟越来越长，那么就必须进行<strong>告警</strong>提示开发者需要查看是否有异常事件被卡住，或者服务压力过大。</p></li><li><p><strong>CPU 使用率</strong> ，这是一个非常重要的指标，当发现 CPU 使用率长期维持在 70% 以上，我们就要<strong>考虑是否需要扩容，或者是增加进程的方式来解决这个问题</strong>，如果长期在 100% 那么肯定是需要扩容，或者检查内部代码逻辑是否存在问题。</p></li><li><p><strong>内存变化</strong> ，Node.js 的内存泄漏还是比较常见的，其<strong>最大的问题就是导致垃圾回收时间变长，从而影响 Node.js 的服务性能，最大的影响就是内存达到上限后进行重启，从而中断用户请求，引发在重启过程中的用户请求</strong>。</p></li><li><p><strong>句柄变化</strong>，由于服务器的句柄是有上限的，如果无节制地开启句柄，将会导致系统性能损耗，从而影响进程的性能，因此我们必须在未使用句柄时进行释放，而如果长期不释放就会在达到上限时，导致新的请求无法开启新的句柄，从而无法正常提供服务。</p></li><li><p><strong>进程异常重启次数</strong>，也是用来判断我们代码逻辑是否足够健壮的一个点，如果存在异常重启次数，那么一定是我们代码中存在未 catch 住的异常，或者说上面提到的内存泄漏上限问题。</p></li></ul><p>以上指标在达到一定限度的时候，就应该进行告警提示开发者。</p><p>在业务层面，我们主要是关心服务提供的<strong>业务响应速度</strong>，我们需要把所有的接口按照以下指标进行上报（这点和其他后台服务差异不大）。</p><ul><li><p><strong>接口名称</strong>，主要是用来区分接口的唯一性。</p></li><li><p><strong>接口请求时服务器时间</strong>，用来保留用户请求的时间节点。</p></li><li><p><strong>接口的请求用户分类标识</strong>，有些需要根据设备、地区、网络运营商、版本信息等进行不同纬度的数据统计，因此这部分需要根据自身业务进行上报。</p></li><li><p><strong>接口请求耗时</strong>，尽量细分，比如 Node.js 内部逻辑耗时、第三方接口耗时以及一些存储服务的请求耗时，例如 Redis、MySQL、MongoDB 等。</p></li><li><p><strong>当前服务器 IP</strong>，有些可能和服务器有关，比如如果负载均衡未做好，导致部分机器分发的请求过大，从而引发部分机器过载的问题，因此上报当前服务器的 IP 也是非常关键的点。</p></li></ul><p>拿到上面这些指标数据后，我们就可以在类似 Grafana 平台中进行数据配置和监控告警设置，当接口耗时对比昨天同时刻出现较大波动时，或者超出用户可接受的响应时间时则进行告警。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>学完本讲后，你首先应该明白为什么进程的安全是一个比较重要的原因，其次要掌握一些基础的会导致进程异常的问题以及如何优化的方案，最后就是要了解目前 Node.js 监控指标以及当前适合 Node.js 的告警监控平台。</p><p>别忘了上文提到的，让我们在留言区一起完善报错指引。</p><p>下一讲我们将针对本讲中所提到的内存泄漏问题进行详细阐述，教你如何一步步定位到内存泄漏的问题，其次在 GitHub 源码中会发现 router 的路由对象越来越大了，我们也需要进一步去优化，在下一讲中，我们会直接使用优化后的路由文件，也会顺便介绍优化的方法。</p><hr>',25),d={href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},g=n("p",null,[n("strong",null,"《大前端高薪训练营》")],-1),u=n("p",null,[s("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),n("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),s("，快来领取！")],-1);function h(C,A,m,D,f,_){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/2D/97/Cgp9HWBmwJGAJi8vAAFeHpxgYKQ954.png"}),s(),y,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/2D/97/Cgp9HWBmwOiAAUQHAACrzbEZSFM047.png"}),s(),l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/2D/9F/CioPOWBmwO6AFikrAADYDnDm-Ts197.png"}),s(),i,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/2D/98/Cgp9HWBmwY2AXDslAABuqH1Pwi0559.png"}),s(),F,n("p",null,[n("a",d,[l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/12/FA/CioPOWBBrAKAAod-AASyC72ZqWw233.png"})])]),g,u])}const b=o(c,[["render",h]]);export{B as __pageData,b as default};
