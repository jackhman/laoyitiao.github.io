import{_ as a,j as p,o as l,g as o,k as e,h as c,Q as s}from"./chunks/framework.4e7d56ce.js";const A=JSON.parse('{"title":"33观察者模式：如何发送消息变化的通知？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/趣学设计模式_文档/(6898) 33  观察者模式：如何发送消息变化的通知？.md","filePath":"posts/backEnd/趣学设计模式_文档/(6898) 33  观察者模式：如何发送消息变化的通知？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/趣学设计模式_文档/(6898) 33  观察者模式：如何发送消息变化的通知？.md"},r=s('<h1 id="_33观察者模式-如何发送消息变化的通知" tabindex="-1">33观察者模式：如何发送消息变化的通知？ <a class="header-anchor" href="#_33观察者模式-如何发送消息变化的通知" aria-label="Permalink to &quot;33观察者模式：如何发送消息变化的通知？&quot;">​</a></h1><p>观察者模式是一种非常流行的设计模式，也常被叫作<strong>订阅-发布模式</strong>。观察者模式在现代的软件开发中应用非常广泛，比如，商品系统、物流系统、监控系统、运营数据分析系统等。</p><p>现在我们常说的基于事件驱动的架构，其实也是观察者模式的一种最佳实践。当我们观察某一个对象时，对象传递出的每一个行为都被看成是一个事件，观察者通过处理每一个事件来完成自身的操作处理。</p><p>通过这一讲的学习，相信你对观察者模式的原理、应用场景等会有更深入的理解和思考。那么话不多说，让我们开始今天的学习吧。</p><h3 id="模式原理分析" tabindex="-1">模式原理分析 <a class="header-anchor" href="#模式原理分析" aria-label="Permalink to &quot;模式原理分析&quot;">​</a></h3><p>观察者模式的原始定义是：定义对象之间的一对多依赖关系，这样当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。</p><p>这个定义中包含了两个前提条件：一是被依赖的对象叫作被观察者，依赖的对象叫作观察者；二是观察者观察被观察者的状态变化。不过，这听上去还是有点太抽象，实际上我们更容易理解下面这些不同的对于观察者模式的叫法：</p><ul><li><p>发布者-订阅者；</p></li><li><p>生产者-消费者；</p></li><li><p>事件发布-事件监听。</p></li></ul><p>不管怎么叫，这些模式在本质上都是观察者模式。我们通过 UML 图来看看观察者模式中对象之间的关系：</p>',9),E=s(`<p>从该 UML 图中，我们能看出观察者模式包含的四个关键角色。</p><ul><li><p><strong>发布者</strong>（Publisher）：也被叫作主题、被订阅者、被观察者等，通常是指观察者关心的相关对象集合，比如，将 GitLab 上的 Git 库作为发布者，我们关心 Git 库的代码发生了变更后做特定的操作。</p></li><li><p><strong>具体发布者</strong>（PublisherImpl）：实现了发布者定义的方法的具体实现类。</p></li><li><p><strong>订阅者</strong>（Observer）：也叫作观察者，它会存储一个注册列表，用于存放订阅者。当发布者发布消息或事件时，会通知到订阅者进行处理。</p></li><li><p><strong>具体订阅者</strong>（ObserverImpl）：实现具体定义的方法操作。</p></li></ul><p>接下来，我再来看看该 UML 对应的代码实现，这是一种比较经典的实现方式。具体代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Publisher</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addObserver</span><span style="color:#E1E4E8;">(Observer </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeObserver</span><span style="color:#E1E4E8;">(Observer </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amt</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PublisherImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Publisher</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String acct;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> balance;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Observer</span><span style="color:#E1E4E8;">&gt; myObservers;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PublisherImpl</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">anAcct</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">aBalance</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        acct </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> anAcct;</span></span>
<span class="line"><span style="color:#E1E4E8;">        balance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aBalance;</span></span>
<span class="line"><span style="color:#E1E4E8;">        myObservers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addObserver</span><span style="color:#E1E4E8;">(Observer </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        myObservers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(o);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeObserver</span><span style="color:#E1E4E8;">(Observer </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        myObservers.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(o);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amt</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        balance </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> amt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(balance </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">overdrawn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">overdrawn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Observer o</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> myObservers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            o.</span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(acct, balance);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Observer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">acct</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amt</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObserverImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Observer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">acct</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">amt</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;=== 接收到通知：账户：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">acct </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; 账单：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">amt);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Publisher account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PublisherImpl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TEST123&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10.00</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Observer bill </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObserverImpl</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        account.</span><span style="color:#B392F0;">addObserver</span><span style="color:#E1E4E8;">(bill);</span></span>
<span class="line"><span style="color:#E1E4E8;">        account.</span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11.00</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//输出结果</span></span>
<span class="line"><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> 接收到通知：账户：TEST123 账单：</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Publisher</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addObserver</span><span style="color:#24292E;">(Observer </span><span style="color:#E36209;">o</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeObserver</span><span style="color:#24292E;">(Observer </span><span style="color:#E36209;">o</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amt</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PublisherImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Publisher</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String acct;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> balance;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Observer</span><span style="color:#24292E;">&gt; myObservers;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PublisherImpl</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">anAcct</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">aBalance</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        acct </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> anAcct;</span></span>
<span class="line"><span style="color:#24292E;">        balance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aBalance;</span></span>
<span class="line"><span style="color:#24292E;">        myObservers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addObserver</span><span style="color:#24292E;">(Observer </span><span style="color:#E36209;">o</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        myObservers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(o);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeObserver</span><span style="color:#24292E;">(Observer </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        myObservers.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(o);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amt</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        balance </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> amt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(balance </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">overdrawn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">overdrawn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Observer o</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> myObservers) {</span></span>
<span class="line"><span style="color:#24292E;">            o.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(acct, balance);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Observer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">acct</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amt</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObserverImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Observer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">acct</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">amt</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;=== 接收到通知：账户：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">acct </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 账单：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">amt);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Publisher account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PublisherImpl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TEST123&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10.00</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Observer bill </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObserverImpl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        account.</span><span style="color:#6F42C1;">addObserver</span><span style="color:#24292E;">(bill);</span></span>
<span class="line"><span style="color:#24292E;">        account.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11.00</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//输出结果</span></span>
<span class="line"><span style="color:#D73A49;">===</span><span style="color:#24292E;"> 接收到通知：账户：TEST123 账单：</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1.0</span></span></code></pre></div><p>在上面的代码实现中，具体发布者会动态维护一个订阅者的列表：可在运行时根据程序需要开始或停止发布给对应订阅者的事件通知。实际上，<strong>发布者本身并不维护订阅列表，它会将工作委派给具体发布者；订阅者在接收到发布者的消息后，会委派具体的订阅者来进行相关的处理。</strong></p><h3 id="使用场景分析" tabindex="-1">使用场景分析 <a class="header-anchor" href="#使用场景分析" aria-label="Permalink to &quot;使用场景分析&quot;">​</a></h3><p>观察者模式常见的使用场景有以下几种。</p><ul><li><p><strong>当一个对象状态的改变需要改变其他对象时</strong>。比如，商品库存数量发生变化时，需要通知商品详情页、购物车等系统改变数量。</p></li><li><p><strong>一个对象发生改变时只想要发送通知，而不需要知道接收者是谁</strong>。比如，订阅微信公众号的文章，发送者通过公众号发送，订阅者并不知道哪些用户订阅了公众号。</p></li><li><p><strong>需要创建一种链式触发机制时</strong>。比如，在系统中创建一个触发链，A 对象的行为将影响 B 对象，B 对象的行为将影响 C 对象......这样通过观察者模式能够很好地实现。</p></li><li><p><strong>微博或微信朋友圈发送的场景</strong>。这是观察者模式的典型应用场景，一个人发微博或朋友圈，只要是关联的朋友都会收到通知；一旦取消关注，此人以后将不会收到相关通知。</p></li><li><p><strong>需要建立基于事件触发的场景</strong>。比如，基于 Java UI 的编程，所有键盘和鼠标事件都由它的侦听器对象和指定函数处理。当用户单击鼠标时，订阅鼠标单击事件的函数将被调用，并将所有上下文数据作为方法参数传递给它。</p></li></ul><p>为了帮助你更好地理解观察者模式的使用，下面我们还是通过一个简单的例子来帮助你理解------实现一个简易的消息订阅通知功能。</p><p>我们首先定义观察者 MessageObserver。它只有一个 update 方法，当有消息 Message 发送过来时就会调用该方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageObserver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageObserver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">m</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，再来定义一个被观察者 Subject ，它定义了三个方法：增加观察者方法 attach、删除观察者方法 detach 和更新通知方法 notifyUpdate。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Subject</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(MessageObserver </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">//增加观察者</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">detach</span><span style="color:#E1E4E8;">(MessageObserver </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">//删除观察者</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notifyUpdate</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">);    </span><span style="color:#6A737D;">//更新通知</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Subject</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(MessageObserver </span><span style="color:#E36209;">o</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//增加观察者</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">detach</span><span style="color:#24292E;">(MessageObserver </span><span style="color:#E36209;">o</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//删除观察者</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notifyUpdate</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">m</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">//更新通知</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着再定义消息的具体数据结构，这里使用一个 content 消息内容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String content;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;"> (String </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> content;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String content;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;"> (String </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> content;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再接下来，实现 Subject 的具体发布者类 MessagePublisher，它持有一组观察者 MessageObserver 实例，可以通过 attach 和 detach 接口方法新增和删除观察者。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessagePublisher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Subject</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">MessageObserver</span><span style="color:#E1E4E8;">&gt; observers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(MessageObserver </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        observers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(o);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">detach</span><span style="color:#E1E4E8;">(MessageObserver </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        observers.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(o);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notifyUpdate</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        observers.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(x</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">x.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(m));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessagePublisher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Subject</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">MessageObserver</span><span style="color:#24292E;">&gt; observers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(MessageObserver </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        observers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(o);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">detach</span><span style="color:#24292E;">(MessageObserver </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        observers.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(o);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notifyUpdate</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        observers.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(x</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">x.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(m));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们实现三个具体订阅者类，它们都实现了 MessageObserver 接口，分别代表不同的消息接收后的对应处理操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageSubscriber1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageObserver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MessageSubscriber1 :: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageSubscriber2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageObserver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MessageSubscriber2 :: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageSubscriber3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageObserver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(Message </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MessageSubscriber3 :: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageSubscriber1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageObserver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MessageSubscriber1 :: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageSubscriber2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageObserver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MessageSubscriber2 :: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageSubscriber3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageObserver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(Message </span><span style="color:#E36209;">m</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MessageSubscriber3 :: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>设计完成后，我们来运行一段单元测试，看看具体运行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        MessageObserver s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageSubscriber1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        MessageObserver s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageSubscriber2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        MessageObserver s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageSubscriber3</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Subject p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessagePublisher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(s1);</span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(s2);</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.</span><span style="color:#B392F0;">notifyUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;First Message&quot;</span><span style="color:#E1E4E8;">));   </span><span style="color:#6A737D;">//s1和s2会收到消息通知</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.</span><span style="color:#B392F0;">detach</span><span style="color:#E1E4E8;">(s1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(s3);</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.</span><span style="color:#B392F0;">notifyUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Message</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Second Message&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//s2和s3会收到消息通知</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//输出结果</span></span>
<span class="line"><span style="color:#E1E4E8;">MessageSubscriber1 </span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;"> First Message</span></span>
<span class="line"><span style="color:#E1E4E8;">MessageSubscriber2 </span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;"> First Message</span></span>
<span class="line"><span style="color:#E1E4E8;">MessageSubscriber2 </span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;"> Second Message</span></span>
<span class="line"><span style="color:#E1E4E8;">MessageSubscriber3 </span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;"> Second Message</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        MessageObserver s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageSubscriber1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        MessageObserver s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageSubscriber2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        MessageObserver s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageSubscriber3</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Subject p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessagePublisher</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(s1);</span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(s2);</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">notifyUpdate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;First Message&quot;</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">//s1和s2会收到消息通知</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">detach</span><span style="color:#24292E;">(s1);</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(s3);</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">notifyUpdate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Second Message&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//s2和s3会收到消息通知</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//输出结果</span></span>
<span class="line"><span style="color:#24292E;">MessageSubscriber1 </span><span style="color:#D73A49;">::</span><span style="color:#24292E;"> First Message</span></span>
<span class="line"><span style="color:#24292E;">MessageSubscriber2 </span><span style="color:#D73A49;">::</span><span style="color:#24292E;"> First Message</span></span>
<span class="line"><span style="color:#24292E;">MessageSubscriber2 </span><span style="color:#D73A49;">::</span><span style="color:#24292E;"> Second Message</span></span>
<span class="line"><span style="color:#24292E;">MessageSubscriber3 </span><span style="color:#D73A49;">::</span><span style="color:#24292E;"> Second Message</span></span></code></pre></div><p>上面的代码实现非常简单，但是充分体现了观察者模式的使用场景。观察者模式使用场景的特点在于<strong>找到合适的被观察者，定义一个通知列表，将需要通知的对象放到这个通知列表中，当被观察者需要发起通知时，就会通知这个列表中的所有&quot;人&quot;</strong>。这和现实中我们打开收音机收听电台很类似。</p><h3 id="为什么使用观察者模式" tabindex="-1">为什么使用观察者模式？ <a class="header-anchor" href="#为什么使用观察者模式" aria-label="Permalink to &quot;为什么使用观察者模式？&quot;">​</a></h3><p>分析完观察者模式的原理和使用场景后，我们再来说说使用观察者模式的原因，主要有以下两个。</p><p><strong>第一个，为了方便捕获观察对象的变化并及时做出相应的操作。</strong> 观察者模式对于对象自身属性或行为发生变化后，需要快速应对的应用场景尤其有效，比如，购物包裹的运送。因为商品变成包裹的形式后会出现各种各样的状态变化，比如，配送中、接收中、退货中等，这些状态变化非常快，而每一个状态都会对应一系列连锁的操作，这时使用观察者模式就非常方便，能够通知需要知道这些状态变化的系统，并做相应的处理，比如，物流监控、性能监控、运营系统等。</p><p><strong>第二个，为了提升代码扩展性。</strong> 如果不使用观察者模式来捕获一个被观察对象的属性变化，那么就需要在被观察对象执行代码逻辑中加入调用通知某个对象进行变更的逻辑，这样不仅增加了代码的耦合性，也让代码扩展变得非常困难，因为要想新增一个新的观察对象，就需要修改被观察对象的代码，这样的扩展性非常低。相反，使用观察者模式则只需要将观察者对象注册到被观察者存储的观察者列表中就能完成代码扩展。</p><h3 id="收益什么-损失什么" tabindex="-1">收益什么？损失什么？ <a class="header-anchor" href="#收益什么-损失什么" aria-label="Permalink to &quot;收益什么？损失什么？&quot;">​</a></h3><p>通过上述分析，我们也可以得出使用观察者模式主要有以下优点。</p><ul><li><p><strong>能够降低系统与系统之间的耦合性。</strong> 比如，建立以事件驱动的系统，我们能创建更多观察者与被观察者，对象之间相互的关系比较清晰，可以随时独立添加或删除观察者。</p></li><li><p><strong>提升代码扩展性。</strong> 由于观察者和被观察之间是抽象耦合，所以增删具体类并不影响抽象类之间的关系，这样不仅满足开闭原则，也满足里氏替换原则，能够很好地提升代码扩展性。</p></li><li><p><strong>可以建立一套基于目标对象特定操作或数据的触发机制。</strong> 比如，基于消息的通知系统、性能监控系统、用户数据跟踪系统等，观察者通过特定的事件触发或捕获特定的操作来完成一系列的操作。</p></li></ul><p>当然，观察者模式也有一些缺点。</p><ul><li><p><strong>增加代码的理解难度。</strong> 由于使用组合关系，被观察者和观察者之间属于松散关系，所以在代码逻辑的理解上，就需要提前搞清楚上下文中有哪些中间类或调用逻辑关系，这样才能正确理解逻辑。</p></li><li><p><strong>降低了系统性能。</strong> 观察者模式通常需要事件触发，当观察者对象越多时，被观察者需要通知观察者所花费的时间也会越长，这样会在某种程度上影响程序的效率。</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>虽然观察者模式在原理上是一个比较抽象的模式，但是业界根据不同的应用场景和需求总结出了很多不同的实现方式，这让观察者模式变得易于使用。</p><p>在观察者模式中，被观察者通常会维护一个观察者列表。当被观察者的状态发生改变时，就会通知观察者。观察者模式现在被大量应用在<strong>分布式系统</strong>的开发中。</p><p>从本质上来讲，观察者模式描述了如何建立对象与对象之间一种简单的依赖关系。在现实中，最为常见的观察者模式的例子就是订阅微信公众号，当公众号发布一篇新文章时，我们能在微信上收到消息，然后选择合适的时间打开阅读。</p><p>因此，当我们在使用观察者模式时，要重点关注哪些变化是我们需要从被观察对象那里捕获（观察到）并进行下一步处理的，一方面不能盲目捕获所有的变化，另一方面也不能遗漏重要的变化。换句话说，<strong>找到合适的变化并进行正确的处理才是使用观察者模式的正确打开方式</strong>。</p><h3 id="课后思考" tabindex="-1">课后思考 <a class="header-anchor" href="#课后思考" aria-label="Permalink to &quot;课后思考&quot;">​</a></h3><p>上面的例子中我们只列举了一种类型下的观察者与被观察者，那么不同类型的观察者能否观察同一个被观察对象呢？欢迎你在留言区与我分享。</p><p>在下一讲，我会接着与你分享&quot;备忘录模式：如何在聊天会话中记录历史消息？&quot;的相关内容，记得按时来听课！</p>`,39);function y(i,F,b,d,u,g){const n=p("Image");return l(),o("div",null,[r,e(n,{alt:"1.jpg",src:"https://s0.lgstatic.com/i/image6/M01/49/F9/Cgp9HWDddk2AfMhqAAFnt1aS-4A328.jpg"}),c(),E])}const D=a(t,[["render",y]]);export{A as __pageData,D as default};
