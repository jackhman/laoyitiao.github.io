import{_ as e,j as o,o as t,g as c,k as n,h as l,Q as p,s}from"./chunks/framework.e0c66c3f.js";const B=JSON.parse('{"title":"如何使用租约 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6409) 15  etcd leae：etcd 如何实现租约？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6409) 15  etcd leae：etcd 如何实现租约？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6409) 15  etcd leae：etcd 如何实现租约？.md"},E=p(`<p>上一讲我们介绍了 etcd Watch 实现的机制，今天我们继续分析 etcd 的另一个重要特性：Lease 租约。它类似 TTL（Time To Live），用于 etcd 客户端与服务端之间进行活性检测。在到达 TTL 时间之前，etcd 服务端不会删除相关租约上绑定的键值对；超过 TTL 时间，则会删除。因此我们<strong>需要在到达 TTL 时间之前续租，以实现客户端与服务端之间的保活</strong>。</p><p>Lease 也是 etcd v2 与 v3 版本之间的重要变化之一。etcd v2 版本并没有 Lease 概念，TTL 直接绑定在 key 上面。每个 TTL、key 创建一个 HTTP/1.x 连接，定时发送续期请求给 etcd Server。etcd v3 则在 v2 的基础上进行了重大升级，每个 Lease 都设置了一个 TTL 时间，<strong>具有相同 TTL 时间的 key 绑定到同一个 Lease</strong>，实现了 Lease 的复用，并且基于 gRPC 协议的通信实现了连接的多路复用。</p><p>下面我们就来介绍 etcd Lease 的基本用法以及分析 Lease 实现的原理。</p><h3 id="如何使用租约" tabindex="-1">如何使用租约 <a class="header-anchor" href="#如何使用租约" aria-label="Permalink to &quot;如何使用租约&quot;">​</a></h3><p>Lease 意为租约，类似于分布式系统的中的 TTL（Time To Live）。在介绍 Lease 的实现原理之前，我们先通过 etcdctl 命令行工具来熟悉 Lease 的用法。依次执行如下的命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lease</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">grant</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#B392F0;">lease</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">694</span><span style="color:#9ECBFF;">d77aa9e38260f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">granted</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ttl</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">1000s</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lease</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">timetolive</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">694</span><span style="color:#9ECBFF;">d77aa9e38260f</span></span>
<span class="line"><span style="color:#B392F0;">lease</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">694</span><span style="color:#9ECBFF;">d77aa9e38260f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">granted</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ttl</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">1000s</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remaining</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">983s</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">put</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bar</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--lease</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">694</span><span style="color:#9ECBFF;">d77aa9e38260f</span></span>
<span class="line"><span style="color:#B392F0;">OK</span></span>
<span class="line"><span style="color:#6A737D;"># 等待过期，再次查看租约信息</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lease</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">timetolive</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">694</span><span style="color:#9ECBFF;">d77aa9e38260f</span></span>
<span class="line"><span style="color:#B392F0;">lease</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">694</span><span style="color:#9ECBFF;">d77aa9e38260f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">already</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">expired</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lease</span><span style="color:#24292E;"> </span><span style="color:#032F62;">grant</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#6F42C1;">lease</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">694</span><span style="color:#032F62;">d77aa9e38260f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">granted</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ttl</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1000s</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lease</span><span style="color:#24292E;"> </span><span style="color:#032F62;">timetolive</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">694</span><span style="color:#032F62;">d77aa9e38260f</span></span>
<span class="line"><span style="color:#6F42C1;">lease</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">694</span><span style="color:#032F62;">d77aa9e38260f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">granted</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ttl</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1000s</span><span style="color:#24292E;">)</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remaining</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">983s</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">put</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bar</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--lease</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">694</span><span style="color:#032F62;">d77aa9e38260f</span></span>
<span class="line"><span style="color:#6F42C1;">OK</span></span>
<span class="line"><span style="color:#6A737D;"># 等待过期，再次查看租约信息</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lease</span><span style="color:#24292E;"> </span><span style="color:#032F62;">timetolive</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">694</span><span style="color:#032F62;">d77aa9e38260f</span></span>
<span class="line"><span style="color:#6F42C1;">lease</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">694</span><span style="color:#032F62;">d77aa9e38260f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">already</span><span style="color:#24292E;"> </span><span style="color:#032F62;">expired</span></span></code></pre></div><p>如上的命令中，我们首先创建了一个 Lease，TTL 时间为 1000s；接着根据获取到的 LeaseID 查看其存活时间；然后写入一个键值对，并通过<code>--lease</code>绑定 Lease；最后一条命令是在 1000s 之后再次查看该 Lease 对应的存活信息。</p><p>通过 etcdctl 命令行工具的形式，我们创建了指定 TTL 时间的 Lease，并了解了 Lease 的基本使用。下面我们具体介绍 Lease 的实现。</p><h3 id="lease-架构" tabindex="-1">Lease 架构 <a class="header-anchor" href="#lease-架构" aria-label="Permalink to &quot;Lease 架构&quot;">​</a></h3><p>Lease 模块对外提供了 Lessor 接口，其中定义了包括 Grant、Revoke、Attach 和 Renew 等常用的方法，lessor 结构体实现了 Lessor 接口。Lease 模块涉及的主要对象和接口，如下图所示：</p>`,10),y=s("p",null,"Lease 模块涉及的主要对象和接口",-1),i=s("p",null,"除此之外，lessor 还启动了两个异步 goroutine：RevokeExpiredLease 和 CheckpointScheduledLease，分别用于撤销过期的租约和更新 Lease 的剩余到期时间。",-1),F=s("p",null,"下图是客户端创建一个指定 TTL 的租约流程，当 etcd 服务端的 gRPC Server 接收到创建 Lease 的请求后，Raft 模块首先进行日志同步；接着 MVCC 调用 Lease 模块的 Grant 接口，保存对应的日志条目到 ItemMap 结构中，接着将租约信息存到 boltdb；最后将 LeaseID 返回给客户端，Lease 创建成功。",-1),d=p(`<p>客户端创建一个指定 TTL 租约流程图</p><p>那么 Lease 与键值对是如何绑定的呢？</p><p>客户端根据返回的 LeaseID，在执行写入和更新操作时，可以绑定该 LeaseID。如上面示例的命令行工具 etcdctl 指定<code>--lease</code>参数，MVCC 会调用 Lease 模块 Lessor 接口中的 Attach 方法，将 key 关联到 Lease 的 key 内存集合 ItemSet 中，以完成键值对与 Lease 租约的绑定。</p><h3 id="实现细节" tabindex="-1">实现细节 <a class="header-anchor" href="#实现细节" aria-label="Permalink to &quot;实现细节&quot;">​</a></h3><p>我们继续来看 etcd Lease 实现涉及的主要接口和结构体。</p><h4 id="lessor-接口" tabindex="-1">Lessor 接口 <a class="header-anchor" href="#lessor-接口" aria-label="Permalink to &quot;Lessor 接口&quot;">​</a></h4><p>Lessor 接口是 Lease 模块对外提供功能的核心接口，定义了包括<strong>创建、绑定和延长租约</strong>等常用方法：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:82</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//...省略部分</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 lessor 设置为 Primary，这个与 raft 会出现网络分区有关</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Promote</span><span style="color:#E1E4E8;">(extend time.Duration)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Grant 创建了一个在指定时间过期的 Lease 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Grant</span><span style="color:#E1E4E8;">(id LeaseID, ttl </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Lease, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Revoke 撤销指定 LeaseID，绑定到其上的键值对将会被移除，如果该 LeaseID 对应的 Lease 不存在，则会返回错误</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Revoke</span><span style="color:#E1E4E8;">(id LeaseID) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Attach 绑定给定的 LeaseItem 到 LeaseID，如果该租约不存在，将会返回错误</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Attach</span><span style="color:#E1E4E8;">(id LeaseID, items []LeaseItem) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// GetLease 返回 LeaseItem 对应的 LeaseID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">GetLease</span><span style="color:#E1E4E8;">(item LeaseItem) LeaseID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Detach 将 LeaseItem 从给定的 LeaseID 解绑。如果租约不存在，则会返回错误</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Detach</span><span style="color:#E1E4E8;">(id LeaseID, items []LeaseItem) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Renew 刷新指定 LeaseID，结果将会返回刷新后的 TTL</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Renew</span><span style="color:#E1E4E8;">(id LeaseID) (</span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Lookup 查找指定的 LeaseID，返回对应的 Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Lookup</span><span style="color:#E1E4E8;">(id LeaseID) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Leases 方法列出所有的 Leases</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Leases</span><span style="color:#E1E4E8;">() []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ExpiredLeasesC 用于返回接收过期 Lease 的 channel</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ExpiredLeasesC</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;-chan</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:82</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//...省略部分</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将 lessor 设置为 Primary，这个与 raft 会出现网络分区有关</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Promote</span><span style="color:#24292E;">(extend time.Duration)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Grant 创建了一个在指定时间过期的 Lease 对象</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Grant</span><span style="color:#24292E;">(id LeaseID, ttl </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Lease, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Revoke 撤销指定 LeaseID，绑定到其上的键值对将会被移除，如果该 LeaseID 对应的 Lease 不存在，则会返回错误</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Revoke</span><span style="color:#24292E;">(id LeaseID) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Attach 绑定给定的 LeaseItem 到 LeaseID，如果该租约不存在，将会返回错误</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Attach</span><span style="color:#24292E;">(id LeaseID, items []LeaseItem) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// GetLease 返回 LeaseItem 对应的 LeaseID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">GetLease</span><span style="color:#24292E;">(item LeaseItem) LeaseID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Detach 将 LeaseItem 从给定的 LeaseID 解绑。如果租约不存在，则会返回错误</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Detach</span><span style="color:#24292E;">(id LeaseID, items []LeaseItem) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Renew 刷新指定 LeaseID，结果将会返回刷新后的 TTL</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Renew</span><span style="color:#24292E;">(id LeaseID) (</span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Lookup 查找指定的 LeaseID，返回对应的 Lease</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Lookup</span><span style="color:#24292E;">(id LeaseID) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Lease</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Leases 方法列出所有的 Leases</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Leases</span><span style="color:#24292E;">() []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Lease</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ExpiredLeasesC 用于返回接收过期 Lease 的 channel</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ExpiredLeasesC</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Lease</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Lessor 接口定义了很多方法，租约相关的方法都在这里面。常用的方法有：</p><ul><li><p>Grant 创建一个在指定时间过期的 Lease 对象；</p></li><li><p>Revoke 撤销指定 LeaseID，绑定到其上的键值对将会被移除；</p></li><li><p>Attach 绑定给定的 leaseItem 到 LeaseID；</p></li><li><p>Renew 刷新指定 LeaseID，结果将会返回刷新后的 TTL。</p></li></ul><h4 id="lease-与-lessor-结构体" tabindex="-1">Lease 与 lessor 结构体 <a class="header-anchor" href="#lease-与-lessor-结构体" aria-label="Permalink to &quot;Lease 与 lessor 结构体&quot;">​</a></h4><p>下面我们来看租约相关的 Lease 结构体：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:800</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lease</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ID           LeaseID</span></span>
<span class="line"><span style="color:#E1E4E8;">	ttl          </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 存活时间，单位秒</span></span>
<span class="line"><span style="color:#E1E4E8;">	remainingttl </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 剩余的存活时间，如果为 0，则被认为是未设置，这种情况下该值与 TTL 相等</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// expiry 的并发锁</span></span>
<span class="line"><span style="color:#E1E4E8;">	expiryMu sync.RWMutex</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// expiry 是 Lease 过期的时间，当expiry.IsZero() 为 true 时，则没有过期时间</span></span>
<span class="line"><span style="color:#E1E4E8;">	expiry time.Time</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ItemSet 并发锁</span></span>
<span class="line"><span style="color:#E1E4E8;">	mu      sync.RWMutex</span></span>
<span class="line"><span style="color:#E1E4E8;">	itemSet </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[LeaseItem]</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	revokec </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:800</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lease</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	ID           LeaseID</span></span>
<span class="line"><span style="color:#24292E;">	ttl          </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 存活时间，单位秒</span></span>
<span class="line"><span style="color:#24292E;">	remainingttl </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 剩余的存活时间，如果为 0，则被认为是未设置，这种情况下该值与 TTL 相等</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// expiry 的并发锁</span></span>
<span class="line"><span style="color:#24292E;">	expiryMu sync.RWMutex</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// expiry 是 Lease 过期的时间，当expiry.IsZero() 为 true 时，则没有过期时间</span></span>
<span class="line"><span style="color:#24292E;">	expiry time.Time</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ItemSet 并发锁</span></span>
<span class="line"><span style="color:#24292E;">	mu      sync.RWMutex</span></span>
<span class="line"><span style="color:#24292E;">	itemSet </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[LeaseItem]</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	revokec </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>租约 Lease 的定义中包含了 LeaseID、TTL、过期时间等属性。其中<strong>LeaseID 在获取 Lease 的时候生成</strong>。</p><p>lessor 实现了 Lessor 接口，我们继续来看 lessor 结构体的定义。lessor 是对租约的封装，其中对外暴露出一系列操作租约的方法，比如创建、绑定和延长租约的方法：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	mu sync.RWMutex</span></span>
<span class="line"><span style="color:#E1E4E8;">	demotec </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseMap             </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[LeaseID]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseExpiredNotifier </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">LeaseExpiredNotifier</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseCheckpointHeap  LeaseQueue</span></span>
<span class="line"><span style="color:#E1E4E8;">	itemMap              </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[LeaseItem]LeaseID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 当 Lease 过期，lessor 将会通过 RangeDeleter 删除相应范围内的 keys</span></span>
<span class="line"><span style="color:#E1E4E8;">	rd RangeDeleter</span></span>
<span class="line"><span style="color:#E1E4E8;">	cp Checkpointer</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// backend 目前只会保存 LeaseID 和 expiry。LeaseItem 通过遍历 kv 中的所有键来恢复</span></span>
<span class="line"><span style="color:#E1E4E8;">	b backend.Backend</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// minLeasettl 是最小的 TTL 时间</span></span>
<span class="line"><span style="color:#E1E4E8;">	minLeasettl </span><span style="color:#F97583;">int64</span></span>
<span class="line"><span style="color:#E1E4E8;">	expiredC </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// stopC 用来表示 lessor 应该被停止的 channel</span></span>
<span class="line"><span style="color:#E1E4E8;">	stopC </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// doneC 用来表示 lessor 已经停止的 channel</span></span>
<span class="line"><span style="color:#E1E4E8;">	doneC </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	lg </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zap.Logger</span></span>
<span class="line"><span style="color:#E1E4E8;">	checkpointInterval time.Duration</span></span>
<span class="line"><span style="color:#E1E4E8;">	expiredLeaseRetryInterval time.Duration</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	mu sync.RWMutex</span></span>
<span class="line"><span style="color:#24292E;">	demotec </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	leaseMap             </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[LeaseID]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Lease</span></span>
<span class="line"><span style="color:#24292E;">	leaseExpiredNotifier </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">LeaseExpiredNotifier</span></span>
<span class="line"><span style="color:#24292E;">	leaseCheckpointHeap  LeaseQueue</span></span>
<span class="line"><span style="color:#24292E;">	itemMap              </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[LeaseItem]LeaseID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 当 Lease 过期，lessor 将会通过 RangeDeleter 删除相应范围内的 keys</span></span>
<span class="line"><span style="color:#24292E;">	rd RangeDeleter</span></span>
<span class="line"><span style="color:#24292E;">	cp Checkpointer</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// backend 目前只会保存 LeaseID 和 expiry。LeaseItem 通过遍历 kv 中的所有键来恢复</span></span>
<span class="line"><span style="color:#24292E;">	b backend.Backend</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// minLeasettl 是最小的 TTL 时间</span></span>
<span class="line"><span style="color:#24292E;">	minLeasettl </span><span style="color:#D73A49;">int64</span></span>
<span class="line"><span style="color:#24292E;">	expiredC </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Lease</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// stopC 用来表示 lessor 应该被停止的 channel</span></span>
<span class="line"><span style="color:#24292E;">	stopC </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// doneC 用来表示 lessor 已经停止的 channel</span></span>
<span class="line"><span style="color:#24292E;">	doneC </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	lg </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zap.Logger</span></span>
<span class="line"><span style="color:#24292E;">	checkpointInterval time.Duration</span></span>
<span class="line"><span style="color:#24292E;">	expiredLeaseRetryInterval time.Duration</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>lessor 实现了 Lessor 接口，lessor 中维护了三个数据结构：LeaseMap、ItemMap 和 LeaseExpiredNotifier。</p><ul><li><p>leaseMap 是一个 map 结构，其定义为 map[LeaseID]*Lease，用于根据 LeaseID 快速查询对应的 Lease；</p></li><li><p>ItemMap 同样是一个 map 结构，其定义为</p><p>map[LeaseItem]LeaseID，用于根据 LeaseItem 快速查找 LeaseID，从而找到对应的 Lease；</p></li><li><p>LeaseExpiredNotifier 是对 LeaseQueue 的一层封装，使得快要到期的租约保持在队头。</p></li></ul><p>其中 LeaseQueue 是一个优先级队列，每次插入都会根据<strong>过期时间</strong> 插入到合适的位置。优先级队列，普遍都是用堆来实现，etcd Lease 的实现基于<strong>最小堆</strong> ，比较的依据是<strong>Lease 失效的时间</strong>。我们每次从最小堆里判断堆顶元素是否失效，失效就 Pop 出来并保存到 expiredC 的 channel 中。etcd Server 会定期从 channel 读取过期的 LeaseID，之后发起 revoke 请求。</p><p>那么集群中的其他 etcd 节点是如何删除过期节点的呢？</p><p>通过 Raft 日志将 revoke 请求发送给其他节点，集群中的其他节点收到 revoke 请求后，首先获取 Lease 绑定的键值对，接着删除 boltdb 中的 key 和存储的 Lease 信息，以及 LeaseMap 中的 Lease 对象。</p><h3 id="核心方法解析" tabindex="-1">核心方法解析 <a class="header-anchor" href="#核心方法解析" aria-label="Permalink to &quot;核心方法解析&quot;">​</a></h3><p>Lessor 接口中有几个常用的核心方法，包括<strong>Grant 申请租约、Attach 绑定租约以及 Revoke 撤销租约</strong>等。下面我们具体介绍这几个方法的实现。</p><h4 id="grant-申请租约" tabindex="-1">Grant 申请租约 <a class="header-anchor" href="#grant-申请租约" aria-label="Permalink to &quot;Grant 申请租约&quot;">​</a></h4><p>客户端要想申请一个租约 Lease，需要调用 Lessor 对外暴露的 Grant 方法。Grant 用于申请租约，并在指定的 TTL 时长之后失效。具体实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:258</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (le </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">lessor) </span><span style="color:#B392F0;">Grant</span><span style="color:#E1E4E8;">(id LeaseID, ttl </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Lease, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TTL 不能大于 MaxLeasettl</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ttl </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> MaxLeasettl {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrLeasettlTooLarge</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 构建 Lease 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	l </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Lease{</span></span>
<span class="line"><span style="color:#E1E4E8;">		ID:      id,</span></span>
<span class="line"><span style="color:#E1E4E8;">		ttl:     ttl,</span></span>
<span class="line"><span style="color:#E1E4E8;">		itemSet: </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[LeaseItem]</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}),</span></span>
<span class="line"><span style="color:#E1E4E8;">		revokec: </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}),</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	le.mu.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> le.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查找内存 LeaseMap 中是否有 LeaseID 对应的 Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> le.leaseMap[id]; ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrLeaseExists</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> l.ttl </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> le.minLeasettl {</span></span>
<span class="line"><span style="color:#E1E4E8;">		l.ttl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> le.minLeasettl</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> le.</span><span style="color:#79B8FF;">isPrimary</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		l.</span><span style="color:#79B8FF;">refresh</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		l.</span><span style="color:#79B8FF;">forever</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 l 存放到 LeaseMap 和 LeaseExpiredNotifier </span></span>
<span class="line"><span style="color:#E1E4E8;">	le.leaseMap[id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l</span></span>
<span class="line"><span style="color:#E1E4E8;">	item </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">LeaseWithTime{id: l.ID, time: l.expiry.</span><span style="color:#79B8FF;">UnixNano</span><span style="color:#E1E4E8;">()}</span></span>
<span class="line"><span style="color:#E1E4E8;">	le.leaseExpiredNotifier.</span><span style="color:#79B8FF;">RegisterOrUpdate</span><span style="color:#E1E4E8;">(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">	l.</span><span style="color:#79B8FF;">persistTo</span><span style="color:#E1E4E8;">(le.b)</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseTotalttls.</span><span style="color:#79B8FF;">Observe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">float64</span><span style="color:#E1E4E8;">(l.ttl))</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseGranted.</span><span style="color:#79B8FF;">Inc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> le.</span><span style="color:#79B8FF;">isPrimary</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		le.</span><span style="color:#79B8FF;">scheduleCheckpointIfNeeded</span><span style="color:#E1E4E8;">(l)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> l, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:258</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (le </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">lessor) </span><span style="color:#6F42C1;">Grant</span><span style="color:#24292E;">(id LeaseID, ttl </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Lease, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TTL 不能大于 MaxLeasettl</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ttl </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> MaxLeasettl {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrLeasettlTooLarge</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 构建 Lease 对象</span></span>
<span class="line"><span style="color:#24292E;">	l </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Lease{</span></span>
<span class="line"><span style="color:#24292E;">		ID:      id,</span></span>
<span class="line"><span style="color:#24292E;">		ttl:     ttl,</span></span>
<span class="line"><span style="color:#24292E;">		itemSet: </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[LeaseItem]</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}),</span></span>
<span class="line"><span style="color:#24292E;">		revokec: </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}),</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	le.mu.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> le.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查找内存 LeaseMap 中是否有 LeaseID 对应的 Lease</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> le.leaseMap[id]; ok {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrLeaseExists</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> l.ttl </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> le.minLeasettl {</span></span>
<span class="line"><span style="color:#24292E;">		l.ttl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> le.minLeasettl</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> le.</span><span style="color:#005CC5;">isPrimary</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		l.</span><span style="color:#005CC5;">refresh</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		l.</span><span style="color:#005CC5;">forever</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将 l 存放到 LeaseMap 和 LeaseExpiredNotifier </span></span>
<span class="line"><span style="color:#24292E;">	le.leaseMap[id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l</span></span>
<span class="line"><span style="color:#24292E;">	item </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">LeaseWithTime{id: l.ID, time: l.expiry.</span><span style="color:#005CC5;">UnixNano</span><span style="color:#24292E;">()}</span></span>
<span class="line"><span style="color:#24292E;">	le.leaseExpiredNotifier.</span><span style="color:#005CC5;">RegisterOrUpdate</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">	l.</span><span style="color:#005CC5;">persistTo</span><span style="color:#24292E;">(le.b)</span></span>
<span class="line"><span style="color:#24292E;">	leaseTotalttls.</span><span style="color:#005CC5;">Observe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">float64</span><span style="color:#24292E;">(l.ttl))</span></span>
<span class="line"><span style="color:#24292E;">	leaseGranted.</span><span style="color:#005CC5;">Inc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> le.</span><span style="color:#005CC5;">isPrimary</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		le.</span><span style="color:#005CC5;">scheduleCheckpointIfNeeded</span><span style="color:#24292E;">(l)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> l, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，当 Grant 一个租约 Lease 时，Lease 被同时存放到 LeaseMap 和 LeaseExpiredNotifier 中。在队列头，有一个 goroutine revokeExpiredLeases 定期检查队头的租约是否过期，如果过期就放入 expiredChan 中。只有当发起 revoke 操作之后，才会从队列中删除。</p><h4 id="attach-绑定租约" tabindex="-1">Attach 绑定租约 <a class="header-anchor" href="#attach-绑定租约" aria-label="Permalink to &quot;Attach 绑定租约&quot;">​</a></h4><p>Attach 用于绑定键值对与指定的 LeaseID。当租约过期，且没有续期的情况下，该 Lease 上绑定的键值对会被自动移除。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:518</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (le </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">lessor) </span><span style="color:#B392F0;">Attach</span><span style="color:#E1E4E8;">(id LeaseID, items []LeaseItem) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	le.mu.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> le.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从 LeaseMap 取出 LeaseID 对应的 lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	l </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> le.leaseMap[id]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ErrLeaseNotFound</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	l.mu.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, it </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> items {</span></span>
<span class="line"><span style="color:#E1E4E8;">		l.itemSet[it] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}{}</span></span>
<span class="line"><span style="color:#E1E4E8;">		le.itemMap[it] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	l.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:518</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (le </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">lessor) </span><span style="color:#6F42C1;">Attach</span><span style="color:#24292E;">(id LeaseID, items []LeaseItem) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	le.mu.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> le.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从 LeaseMap 取出 LeaseID 对应的 lease</span></span>
<span class="line"><span style="color:#24292E;">	l </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> le.leaseMap[id]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ErrLeaseNotFound</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	l.mu.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, it </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> items {</span></span>
<span class="line"><span style="color:#24292E;">		l.itemSet[it] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}{}</span></span>
<span class="line"><span style="color:#24292E;">		le.itemMap[it] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	l.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>绑定键值对时，Attach 首先用 LeaseID 去 leaseMap 中查询租约是否存在。如果在 LeaseMap 中找不到给定的 LeaseID，将会返回错误；如果对应的租约存在，则会将 Item 保存到对应的租约下，随后将 Item 和 LeaseID 保存在 ItemMap 中。</p><h4 id="revoke-撤销租约" tabindex="-1">Revoke 撤销租约 <a class="header-anchor" href="#revoke-撤销租约" aria-label="Permalink to &quot;Revoke 撤销租约&quot;">​</a></h4><p>Revoke 方法用于撤销指定 LeaseID 的租约，同时绑定到该 Lease 上的键值都会被移除。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:311</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (le </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">lessor) </span><span style="color:#B392F0;">Revoke</span><span style="color:#E1E4E8;">(id LeaseID) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	le.mu.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	l </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> le.leaseMap[id]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		le.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ErrLeaseNotFound</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">close</span><span style="color:#E1E4E8;">(l.revokec)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 释放锁</span></span>
<span class="line"><span style="color:#E1E4E8;">	le.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> le.rd </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	txn </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> le.</span><span style="color:#79B8FF;">rd</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 对键值进行排序，使得所有的成员保持删除键值对的顺序一致</span></span>
<span class="line"><span style="color:#E1E4E8;">	keys </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#79B8FF;">Keys</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	sort.</span><span style="color:#79B8FF;">StringSlice</span><span style="color:#E1E4E8;">(keys).</span><span style="color:#79B8FF;">Sort</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, key </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> keys {</span></span>
<span class="line"><span style="color:#E1E4E8;">		txn.</span><span style="color:#79B8FF;">DeleteRange</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(key), </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	le.mu.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> le.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">delete</span><span style="color:#E1E4E8;">(le.leaseMap, l.ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 键值删除操作需要在一个事务中进行</span></span>
<span class="line"><span style="color:#E1E4E8;">	le.b.</span><span style="color:#79B8FF;">BatchTx</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">UnsafeDelete</span><span style="color:#E1E4E8;">(leaseBucketName, </span><span style="color:#79B8FF;">int64ToBytes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">int64</span><span style="color:#E1E4E8;">(l.ID)))</span></span>
<span class="line"><span style="color:#E1E4E8;">	txn.</span><span style="color:#79B8FF;">End</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseRevoked.</span><span style="color:#79B8FF;">Inc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 lease/lessor.go:311</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (le </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">lessor) </span><span style="color:#6F42C1;">Revoke</span><span style="color:#24292E;">(id LeaseID) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	le.mu.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	l </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> le.leaseMap[id]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		le.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ErrLeaseNotFound</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">close</span><span style="color:#24292E;">(l.revokec)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 释放锁</span></span>
<span class="line"><span style="color:#24292E;">	le.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> le.rd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	txn </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> le.</span><span style="color:#005CC5;">rd</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 对键值进行排序，使得所有的成员保持删除键值对的顺序一致</span></span>
<span class="line"><span style="color:#24292E;">	keys </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> l.</span><span style="color:#005CC5;">Keys</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	sort.</span><span style="color:#005CC5;">StringSlice</span><span style="color:#24292E;">(keys).</span><span style="color:#005CC5;">Sort</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, key </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> keys {</span></span>
<span class="line"><span style="color:#24292E;">		txn.</span><span style="color:#005CC5;">DeleteRange</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(key), </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	le.mu.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> le.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">delete</span><span style="color:#24292E;">(le.leaseMap, l.ID)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 键值删除操作需要在一个事务中进行</span></span>
<span class="line"><span style="color:#24292E;">	le.b.</span><span style="color:#005CC5;">BatchTx</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">UnsafeDelete</span><span style="color:#24292E;">(leaseBucketName, </span><span style="color:#005CC5;">int64ToBytes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int64</span><span style="color:#24292E;">(l.ID)))</span></span>
<span class="line"><span style="color:#24292E;">	txn.</span><span style="color:#005CC5;">End</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	leaseRevoked.</span><span style="color:#005CC5;">Inc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>想要实现 Revoke 方法，首先要根据 LeaseID 从 LeaseMap 中找到对应的 Lease 并从 LeaseMap 中删除，然后从 Lease 中找到绑定的 Key，并从 Backend 中将 KeyValue 删除。</p><h4 id="调用-lessor-api" tabindex="-1">调用 Lessor API <a class="header-anchor" href="#调用-lessor-api" aria-label="Permalink to &quot;调用 Lessor API&quot;">​</a></h4><p>上面我们介绍了 Lessor 接口中几个常用方法的实现。下面我们将基于上面三个接口，通过调用 Lessor API 创建 Lease 租约，将键值对绑定到租约上，到达 TTL 时间后主动将对应的键值对删除，实现代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testLease</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    le </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newLessor</span><span style="color:#E1E4E8;">()    </span><span style="color:#6A737D;">// 创建一个 Lessor</span></span>
<span class="line"><span style="color:#E1E4E8;">    le.</span><span style="color:#79B8FF;">Promote</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)        </span></span>
<span class="line"><span style="color:#E1E4E8;">    Go </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {   </span><span style="color:#6A737D;">// 开启一个协程，接收过期的 key，主动删除</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">           expireLease </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">le.</span><span style="color:#79B8FF;">ExpiredLeasesC</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> expireLease {  </span></span>
<span class="line"><span style="color:#E1E4E8;">              le.</span><span style="color:#79B8FF;">Revoke</span><span style="color:#E1E4E8;">(v.ID)    </span><span style="color:#6A737D;">// 通过租约 ID 删除租约，删除租约时会从 backend 中删除绑定的 key</span></span>
<span class="line"><span style="color:#E1E4E8;">           }  </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ttl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">    lease </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> le.</span><span style="color:#79B8FF;">Grant</span><span style="color:#E1E4E8;">(id, ttl)   </span><span style="color:#6A737D;">// 申请一个租约</span></span>
<span class="line"><span style="color:#E1E4E8;">    le.</span><span style="color:#79B8FF;">Attach</span><span style="color:#E1E4E8;">(lease, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// 将租约绑定在&quot;foo&quot;上</span></span>
<span class="line"><span style="color:#E1E4E8;">    time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testLease</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    le </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newLessor</span><span style="color:#24292E;">()    </span><span style="color:#6A737D;">// 创建一个 Lessor</span></span>
<span class="line"><span style="color:#24292E;">    le.</span><span style="color:#005CC5;">Promote</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)        </span></span>
<span class="line"><span style="color:#24292E;">    Go </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {   </span><span style="color:#6A737D;">// 开启一个协程，接收过期的 key，主动删除</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">           expireLease </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">le.</span><span style="color:#005CC5;">ExpiredLeasesC</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> expireLease {  </span></span>
<span class="line"><span style="color:#24292E;">              le.</span><span style="color:#005CC5;">Revoke</span><span style="color:#24292E;">(v.ID)    </span><span style="color:#6A737D;">// 通过租约 ID 删除租约，删除租约时会从 backend 中删除绑定的 key</span></span>
<span class="line"><span style="color:#24292E;">           }  </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }()</span></span>
<span class="line"><span style="color:#24292E;">    ttl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">    lease </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> le.</span><span style="color:#005CC5;">Grant</span><span style="color:#24292E;">(id, ttl)   </span><span style="color:#6A737D;">// 申请一个租约</span></span>
<span class="line"><span style="color:#24292E;">    le.</span><span style="color:#005CC5;">Attach</span><span style="color:#24292E;">(lease, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// 将租约绑定在&quot;foo&quot;上</span></span>
<span class="line"><span style="color:#24292E;">    time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码展示了如何使用 Lessor 实现键值对申请、绑定和撤销租约操作。首先申请了一个过期时间设置为 5s 的 Lease；接着将 key<code>foo</code>绑定到该 Lease 上，为了方便看到结果，阻塞 10s。</p><p>同时有一点需要你注意，我们这里直接调用了 Lessor 对外提供的接口，<strong>Lessor 不会主动删除过期的租约，而是将过期的 Lease 通过一个 channel 发送出来，由使用者主动删除</strong>。clientv3 包中定义好了 Lease 相关的实现，基于客户端 API 进行调用会更加简单。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了 etcd Lease 的实现，首先通过 etcdctl 命令行工具介绍了客户端如何使用 Lease 的使用方法；接着介绍了 Lease 实现的主要架构，描述了 Lease 申请、绑定以及过期撤销的过程；随后介绍了 Lease 实现涉及的主要接口、结构体；最后介绍了 Lessor 对外提供的常见方法，包括：Grant 申请租约、Attach 绑定租约以及 Revoke 撤销租约，并通过一个测试用例介绍了如何直接使用 Lessor 对外提供的方法。</p><p>本讲内容总结如下：</p>`,43),L=s("p",null,"学习完这一讲，我想给大家留一个问题，你知道在 etcd 重启之后，Lease 与键值对的绑定关系是如何重建的吗？欢迎你在留言区和我分享自己的想法。下一讲，我们将从整体来梳理 etcd 启动的过程。",-1);function D(C,A,h,u,m,g){const a=o("Image");return t(),c("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/1D/0B/Cgp9HWBPGqaAOSvBAAApAR0Pn5s728.png"}),l(),y,i,F,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/1D/08/CioPOWBPGq6AbSSHAAAmYqC-FLA568.png"}),l(),d,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/1D/0B/Cgp9HWBPGsqAJAozAAE8kcN24Nw326.png"}),L])}const I=e(r,[["render",D]]);export{B as __pageData,I as default};
