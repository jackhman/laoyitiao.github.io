import{_ as o,j as e,o as t,g as r,k as n,s,h as p,Q as l}from"./chunks/framework.b3d8e22e.js";const os=JSON.parse('{"title":"Jackson 基本语法 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4708) 08  Jackon 注解在实体里面如何应用？常见的死循环问题如何解决？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4708) 08  Jackon 注解在实体里面如何应用？常见的死循环问题如何解决？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4708) 08  Jackon 注解在实体里面如何应用？常见的死循环问题如何解决？.md"},E=s("p",null,"经过前面课时的讲解，相信你已经对实体里面的 JPA 注解有了一定的了解，但是实际工作中你会发现实体里面不仅有 JPA 的注解，也会用到很多 JSON 相关的注解。",-1),y=s("p",null,"我们用 Spring Boot 里面默认集成的 fasterxml.jackson 加以说明，这看似和 JPA 没什么关系，但是一旦我们和 @Entity 一起使用的时候，就会遇到一些问题，特别是新手同学，我们这一课时详细介绍一下用法。先来跟着我了解一下 Jackson 的基本语法。",-1),i=s("h3",{id:"jackson-基本语法",tabindex:"-1"},[p("Jackson 基本语法 "),s("a",{class:"header-anchor",href:"#jackson-基本语法","aria-label":'Permalink to "Jackson 基本语法"'},"​")],-1),F=s("p",null,"我们先看一下我们项目里面的依赖。",-1),u=l('<p>从中可以看到，当我们用 spring boot starter 的时候就会默认加载 fasterxml 相关的 jar 包模块，包括核心模块以及 jackson 提供的一些扩展 jar 包，下面详细介绍。</p><h4 id="核心模块有三个" tabindex="-1">核心模块有三个 <a class="header-anchor" href="#核心模块有三个" aria-label="Permalink to &quot;核心模块有三个&quot;">​</a></h4><ol><li><p><strong>jackson-core：核心包</strong>，提供基于&quot;流模式&quot;解析的相关 API，它包括 JsonPaser 和 JsonGenerator。Jackson 内部实现正是通过高性能的流模式 API 的 JsonGenerator 和 JsonParser 来生成和解析 json。</p></li><li><p><strong>jackson-annotations：注解包</strong>，提供标准注解功能，这是我们必须要掌握的基础语法。</p></li><li><p><strong>jackson-databind：数据绑定包</strong>，提供基于&quot;对象绑定&quot;解析的相关 API（ ObjectMapper ） 和&quot;树模型&quot;解析的相关 API（JsonNode）；基于&quot;对象绑定&quot;解析的 API 和&quot;树模型&quot;解析的 API 依赖基于&quot;流模式&quot;解析的 API。如下图中一些标准的类型转换：</p></li></ol>',3),d=l('<h4 id="jackson-提供了一些扩展-jar" tabindex="-1">jackson 提供了一些扩展 jar <a class="header-anchor" href="#jackson-提供了一些扩展-jar" aria-label="Permalink to &quot;jackson 提供了一些扩展 jar&quot;">​</a></h4><ol><li><p><strong>jackson-module-parameter-names</strong>：对原来的 jackson 进行了扩展，支持了构造方法和方法基本的参数支持。</p></li><li><p><strong>jackson-datatype</strong>：是对字段类型的支持做的一些扩展，包括下述几个部分。</p></li></ol><p>a. <strong>jackson-datatype-jdk8</strong>：是对 jdk8 语法里面的一些 Optional、Stream 等一些新的类型做的一些支持，如下图展示的一些类：</p>',3),g=s("p",null,[p("b."),s("strong",null,"jackson-datatype-jsr310"),p("：是对 jdk8 中的 JSR310 时间协议做了支持，如 Duration、Instant、LocalDate、Clock 等时间类型的序列化、反序列化，如下图展示的一些类：")],-1),A=s("p",null,[p("c."),s("strong",null,"jackson-datatype-hibernate5"),p("：是对Hibernate的里面的一些数据类型的序列化、反序列化，如HibernateProxy 等。")],-1),h=s("p",null,"剩下不常见的咱们就不说了，jackson-datatype 其实就是对一些常见的数据类型做序列化、反序列化，省去了我们自己写序列化、反序列化的过程。所以在我们工作中，如果需要自定义序列化的时候，可以参考这些源码。",-1),D=s("p",null,"知道了这些脉络之后，剩下的就是我们要掌握的注解有哪些了，下面我来介绍一下。",-1),_=s("h4",{id:"常用的一些注解",tabindex:"-1"},[p("常用的一些注解 "),s("a",{class:"header-anchor",href:"#常用的一些注解","aria-label":'Permalink to "常用的一些注解"'},"​")],-1),C=s("p",null,"正如上面所说，我们打开 jackson-annotations，就可以看到有哪些注解了，一目了然，闲着没事的时候就可以到这里面看看，这样你会越来越熟悉。下面我们挑选一些常用的介绍一下。",-1),m=s("p",null,"Jackson 里面常用的注解如下表格所示：",-1),b=l(`<h4 id="我们看个实例感受一下" tabindex="-1">我们看个实例感受一下 <a class="header-anchor" href="#我们看个实例感受一下" aria-label="Permalink to &quot;我们看个实例感受一下&quot;">​</a></h4><p>接下来我们写个测试用例看一下。</p><p>首先，新建一个 UserJson 实体对象，将它转成 Json 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">JsonPropertyOrder</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&quot;createDate&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserJson</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my_name&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Instant createDate;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">timezone</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;GMT+8&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">pattern</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;yyyy-MM-dd HH:mm&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Date updateDate;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonIgnore</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonCreator</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserJson</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">JsonProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">email</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;其他业务逻辑&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.email </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transient</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonAnySetter</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; other </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonAnyGetter</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getOther</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> other;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">JsonPropertyOrder</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&quot;createDate&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserJson</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my_name&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Instant createDate;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonFormat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">timezone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;GMT+8&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">pattern</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;yyyy-MM-dd HH:mm&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Date updateDate;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonIgnore</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String sex;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonCreator</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserJson</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">JsonProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">email</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;其他业务逻辑&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.email </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> email;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transient</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonAnySetter</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; other </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonAnyGetter</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getOther</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> other;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们写一个测试用例，看一下运行结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.assertj.core.util.Maps;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.BeforeAll;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.TestInstance;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.test.annotation.Rollback;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.transaction.Transactional;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Date;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestInstance</span><span style="color:#E1E4E8;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserJsonRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserJsonRepository userJsonRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">BeforeAll</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserJson user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserJson.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">createDate</span><span style="color:#E1E4E8;">(Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">updateDate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;men&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        userJsonRepository.</span><span style="color:#B392F0;">saveAndFlush</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试用User关联关系操作</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testUserJson</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserJson userJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userJsonRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        userJson.</span><span style="color:#B392F0;">setOther</span><span style="color:#E1E4E8;">(Maps.</span><span style="color:#B392F0;">newHashMap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(objectMapper.</span><span style="color:#B392F0;">writerWithDefaultPrettyPrinter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(userJson));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.assertj.core.util.Maps;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.BeforeAll;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.TestInstance;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.test.annotation.Rollback;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.transaction.Transactional;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Date;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestInstance</span><span style="color:#24292E;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserJsonRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserJsonRepository userJsonRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">BeforeAll</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        UserJson user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserJson.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">createDate</span><span style="color:#24292E;">(Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">updateDate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;men&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        userJsonRepository.</span><span style="color:#6F42C1;">saveAndFlush</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试用User关联关系操作</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUserJson</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">        UserJson userJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userJsonRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        userJson.</span><span style="color:#6F42C1;">setOther</span><span style="color:#24292E;">(Maps.</span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(objectMapper.</span><span style="color:#6F42C1;">writerWithDefaultPrettyPrinter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(userJson));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，运行一下可以看到如下结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;createDate&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;epochSecond&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1600530086</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;nano&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">588000000</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;updateDate&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2020-09-19 23:41&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;my_name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;createDate&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;epochSecond&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1600530086</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;nano&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">588000000</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;updateDate&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-09-19 23:41&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;my_name&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里可以和上面的注解列表对比一下，其中我们看到了 HashMap 被平铺开了。我们通过例子可以很容易想到使用场景是 SpringMvc 的情况下，在 get 请求的时候我们要用到序列化；在 post 请求的时候我们要用到反序列化，将 json 字符串反向转化成实体对象。</p><p>那么在 Spring 里面 Jackson 都有哪些应用场景呢？我们来看一下。</p><h3 id="jackson-和-spring-的关系" tabindex="-1">Jackson 和 Spring 的关系 <a class="header-anchor" href="#jackson-和-spring-的关系" aria-label="Permalink to &quot;Jackson 和 Spring 的关系&quot;">​</a></h3><p>我们先看一下 Jackson 在 Spring 中常见的四个应用场景，来了解一下 Spring 在这些情况下的应用，带你详细掌握 Jackson 并知道它的重要性。</p><h4 id="应用场景一" tabindex="-1">应用场景一 <a class="header-anchor" href="#应用场景一" aria-label="Permalink to &quot;应用场景一&quot;">​</a></h4><p>在Spring MVC中，我们需要知道Mvc的JSON视图的加载原理。我们看一下源码，mvc 对象的转化类：HttpMessageConvertersAutoConfiguration，里面要利用JacksonHttpMessageConvertersConfiguration，如下所示：</p>`,14),j=s("p",null,"而里面的MappingJackson2HttpMessageConverter 正是采用 fasterxml.jackson 进行转化的，看下面的图片。",-1),q=s("h4",{id:"应用场景二",tabindex:"-1"},[p("应用场景二 "),s("a",{class:"header-anchor",href:"#应用场景二","aria-label":'Permalink to "应用场景二"'},"​")],-1),v=s("p",null,"我们在微服务之间相互调用的时候，都会用到 HttpMessageConverter 里面的 JacksonHttpMessageConverter 进行转化。特别是在用 open-feign 里面的 Encode 和 Decode 的时候，我们就可以看到如下应用场景：",-1),B=s("h4",{id:"应用场景三",tabindex:"-1"},[p("应用场景三 "),s("a",{class:"header-anchor",href:"#应用场景三","aria-label":'Permalink to "应用场景三"'},"​")],-1),T=s("p",null,"redis、cacheable 都会用到 value 的序列化，都离不开 JSON 的序列化，看下面的 redis 里面的关键配置文件。",-1),k=s("h4",{id:"应用场景四",tabindex:"-1"},[p("应用场景四 "),s("a",{class:"header-anchor",href:"#应用场景四","aria-label":'Permalink to "应用场景四"'},"​")],-1),S=s("p",null,"当我们项目之间解耦用到消息队列的时候，可能会基于 JMS消息协议发送消息，其也是基于 JSON 的序列化机制来继续converter的，它在用JmsTemplate 的时候也会遇到同样情况，我们看一下 JMS 里面相关代码。",-1),M=s("p",null,"综上四个场景所述，我们是经常和 Entity 打交道的，而 @Entity 又要在各种场景转化成 JSONString，所以 Jackson 的原理我们还是要掌握一些的，下面来分析几个比较重要的。",-1),J=s("h3",{id:"jackson-原理分析",tabindex:"-1"},[p("Jackson 原理分析 "),s("a",{class:"header-anchor",href:"#jackson-原理分析","aria-label":'Permalink to "Jackson 原理分析"'},"​")],-1),I=s("h4",{id:"jackson-的可见性原理分析",tabindex:"-1"},[p("Jackson 的可见性原理分析 "),s("a",{class:"header-anchor",href:"#jackson-的可见性原理分析","aria-label":'Permalink to "Jackson 的可见性原理分析"'},"​")],-1),P=s("p",null,"前面我们看到了注解@JsonAutoDetect JsonAutoDetect.Visibility 类包含与 Java 中的可见性级别匹配的常量，表示 ANY、DEFAULT、NON_PRIVATE、NONE、PROTECTED_AND_PRIVATE和PUBLIC_ONLY。",-1),f=s("p",null,"那么我们打开这个类，看一下源码：",-1),O=l(`<p>这里面的代码并不复杂，通过JsonAutoDetect 我们可以看到，Jackson 默认不是所有的属性都可以被序列化和反序列化。默认的属性可视化的规则如下：</p><ul><li><p>若该属性修饰符是 public，该属性可序列化和反序列化。</p></li><li><p>若属性的修饰符不是 public，但是它的 getter 方法和 setter 方法是 public，该属性可序列化和反序列化。因为 getter 方法用于序列化，而 setter 方法用于反序列化。</p></li><li><p>若属性只有 public 的 setter 方法，而无 public 的 getter 方法，该属性只能用于反序列化。</p></li></ul><p>所以我们可以通过私有字段的 public get 和 public set 方法控制是否可以序列化。这里可以和我们前面讲到的&quot;JPA 实体里面的注解生效方式&quot;做一下对比，也可以通过直接更改 ObjectMapper 设置可视化策略，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ObjectMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// PropertyAccessor 支持的类型有 ALL,CREATOR,FIELD,GETTER,IS_GETTER,NONE,SETTER</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Visibility 支持的类型有 ANY,DEFAULT,NON_PRIVATE,NONE,PROTECTED_AND_PUBLIC,PUBLIC_ONLY</span></span>
<span class="line"><span style="color:#E1E4E8;">    mapper.</span><span style="color:#B392F0;">setVisibility</span><span style="color:#E1E4E8;">(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ObjectMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// PropertyAccessor 支持的类型有 ALL,CREATOR,FIELD,GETTER,IS_GETTER,NONE,SETTER</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Visibility 支持的类型有 ANY,DEFAULT,NON_PRIVATE,NONE,PROTECTED_AND_PUBLIC,PUBLIC_ONLY</span></span>
<span class="line"><span style="color:#24292E;">    mapper.</span><span style="color:#6F42C1;">setVisibility</span><span style="color:#24292E;">(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);</span></span></code></pre></div><p>这样，就可以直接看到所有字段了，包括私有字段。接着我们说一下反序列化相关方法。</p><h4 id="反序列化最重要的方法" tabindex="-1">反序列化最重要的方法 <a class="header-anchor" href="#反序列化最重要的方法" aria-label="Permalink to &quot;反序列化最重要的方法&quot;">​</a></h4><p>我们在做反序列化的时候要用到的三个重要方法如下所示。</p>`,7),N=l(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">readValue</span><span style="color:#E1E4E8;">(String content, Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> valueType)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">readValue</span><span style="color:#E1E4E8;">(String content, TypeReference</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> valueTypeRef)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">readValue</span><span style="color:#E1E4E8;">(String content, JavaType valueType)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">readValue</span><span style="color:#24292E;">(String content, Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> valueType)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">readValue</span><span style="color:#24292E;">(String content, TypeReference</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> valueTypeRef)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">readValue</span><span style="color:#24292E;">(String content, JavaType valueType)</span></span></code></pre></div><p>可以看出，反序列化的时候要知道 java 的 Type 是很重要的，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectMapper.</span><span style="color:#B392F0;">writerWithDefaultPrettyPrinter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(userJson);</span></span>
<span class="line"><span style="color:#6A737D;">//单个对象的写法：</span></span>
<span class="line"><span style="color:#E1E4E8;">UserJson user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectMapper.</span><span style="color:#B392F0;">readValue</span><span style="color:#E1E4E8;">(json,UserJson.class);</span></span>
<span class="line"><span style="color:#6A737D;">//返回List的返回结果的写法：</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; personList2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">readValue</span><span style="color:#E1E4E8;">(jsonListString, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TypeReference&lt;List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt;&gt;(){});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectMapper.</span><span style="color:#6F42C1;">writerWithDefaultPrettyPrinter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(userJson);</span></span>
<span class="line"><span style="color:#6A737D;">//单个对象的写法：</span></span>
<span class="line"><span style="color:#24292E;">UserJson user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectMapper.</span><span style="color:#6F42C1;">readValue</span><span style="color:#24292E;">(json,UserJson.class);</span></span>
<span class="line"><span style="color:#6A737D;">//返回List的返回结果的写法：</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; personList2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">readValue</span><span style="color:#24292E;">(jsonListString, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TypeReference&lt;List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt;&gt;(){});</span></span></code></pre></div><p>我们也可以根据 java 的反射，即万能的 JavaType 进行反序列化和转化，如下：</p>`,4),x=s("p",null,"你也可以看一下 Jackson2HttpMessageConverter 里面的用法。",-1),w=l(`<p>这个时候你应该很好奇，readValue 里面是如何判断 java 类型的呢？我们看下 ObjectMapper 的源码里面做了如下操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">readValue</span><span style="color:#E1E4E8;">(DataInput src, Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> valueType) throws IOException</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">_assertNotNull</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#E1E4E8;">, src);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) </span><span style="color:#B392F0;">_readMapAndClose</span><span style="color:#E1E4E8;">(_jsonFactory.</span><span style="color:#B392F0;">createParser</span><span style="color:#E1E4E8;">(src),</span></span>
<span class="line"><span style="color:#E1E4E8;">            _typeFactory.</span><span style="color:#B392F0;">constructType</span><span style="color:#E1E4E8;">(valueType));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">readValue</span><span style="color:#24292E;">(DataInput src, Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> valueType) throws IOException</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">_assertNotNull</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#24292E;">, src);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) </span><span style="color:#6F42C1;">_readMapAndClose</span><span style="color:#24292E;">(_jsonFactory.</span><span style="color:#6F42C1;">createParser</span><span style="color:#24292E;">(src),</span></span>
<span class="line"><span style="color:#24292E;">            _typeFactory.</span><span style="color:#6F42C1;">constructType</span><span style="color:#24292E;">(valueType));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，我们看到 typeFactory 里面的 constructType 可以取到各种 type，那么点击进去看看。</p>`,3),L=s("p",null,"可以看到里面处理各种 java 类型和泛型的情况，当我们自己写反射代码的时候可以参考这一段，或者直接调用。此外，ObjectMapper 里面还一个重要的概念就是 Moduel，我们来看下。",-1),U=s("h4",{id:"moduel-的加载机制",tabindex:"-1"},[p("Moduel 的加载机制 "),s("a",{class:"header-anchor",href:"#moduel-的加载机制","aria-label":'Permalink to "Moduel 的加载机制"'},"​")],-1),z=s("p",null,"ObejctMapper 里面可以扩展很多 datatype，而不同的 datatype 封装到了不通的 modules 里面，我们可以 register 注册进去不同的 module，从而处理不同的数据类型。",-1),R=s("p",null,[p("目前 Modules 官方网站提供了很多内容，具体你可以查看这个网址："),s("a",{href:"https://github.com/FasterXML/jackson#third-party-datatype-modules",target:"_blank",rel:"noreferrer"},"https://github.com/FasterXML/jackson#third-party-datatype-modules"),p("。这里我们重点说一下常用的加载机制。")],-1),V=s("p",null,"我们通过在代码里面设置一个断点，就可以很清楚地知道常用的 ModuleType 都有哪些，如 Jdk8、jsr310、Hibernate5 等。在MVC 里面默认的 Module 也是图上那些，Hibernate5 是我们自己引入的，具体解决什么问题和如何自定义的呢？我们接着往下看。",-1),H=s("h3",{id:"jackson-与-jpa-常见的问题",tabindex:"-1"},[p("Jackson 与 JPA 常见的问题 "),s("a",{class:"header-anchor",href:"#jackson-与-jpa-常见的问题","aria-label":'Permalink to "Jackson 与 JPA 常见的问题"'},"​")],-1),G=s("p",null,"我们用 JPA 的时候，特别是关联关系的时候，最常见的就是死循环了，你在使用时一定要注意。",-1),Y=s("h4",{id:"死循环问题如何解决",tabindex:"-1"},[p("死循环问题如何解决 "),s("a",{class:"header-anchor",href:"#死循环问题如何解决","aria-label":'Permalink to "死循环问题如何解决"'},"​")],-1),K=s("p",null,"第一种情况：我们在写 ToString 方法，特别是 JPA 的实体的时候，很容易陷入死循环，因为实体之间的关联关系配置是双向的，我们就需要 ToString 的时候把一方排除掉，如下所示：",-1),W=l(`<p>第二种情况：在转化JSON的时候，双向关联也会死循环。按照我们上面讲的方法，这是时候我们要想到通过 @JsonIgnoreProperties(value={&quot;address&quot;})或者字段上面配置@JsonIgnore，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">JsonIgnore</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; address;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">JsonIgnore</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; address;</span></span></code></pre></div><p>此外，通过 @JsonBackReference 和 @JsonManagedReference 注解也可以解决死循环。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddress</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonManagedReference</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">....}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonBackReference</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; address;</span></span>
<span class="line"><span style="color:#E1E4E8;">...}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddress</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonManagedReference</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">....}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonBackReference</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; address;</span></span>
<span class="line"><span style="color:#24292E;">...}</span></span></code></pre></div><p>如上述代码，也可以达到 @JsonIgnore 的效果，具体你可以自己操作一下试试，原理都是一样的，都是利用排除方法。那么接下来我们看下 HibernateModel5 是怎么使用的。</p><h4 id="jpa-实体-json-序列化的常见报错" tabindex="-1">JPA 实体 JSON 序列化的常见报错 <a class="header-anchor" href="#jpa-实体-json-序列化的常见报错" aria-label="Permalink to &quot;JPA 实体 JSON 序列化的常见报错&quot;">​</a></h4><p>我们在实际跑之前讲过的 user 对象，或者是类似带有 lazy 对象关系的时候，经常会遇到下面的错误：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">No</span><span style="color:#E1E4E8;"> serializer found </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> org.hibernate.proxy.pojo.bytebuddy.</span><span style="color:#79B8FF;">ByteBuddyInterceptor</span><span style="color:#E1E4E8;"> and no properties discovered to create </span><span style="color:#79B8FF;">BeanSerializer</span><span style="color:#E1E4E8;"> (to avoid exception, disable </span><span style="color:#79B8FF;">SerializationFeature</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">FAIL_ON_EMPTY_BEANS</span><span style="color:#E1E4E8;">) (through reference chain</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> com.example.jpa.example1.</span><span style="color:#79B8FF;">User$HibernateProxy$MdjeSaTz</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">com.fasterxml.jackson.databind.exc.</span><span style="color:#79B8FF;">InvalidDefinitionException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">No</span><span style="color:#E1E4E8;"> serializer found </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> org.hibernate.proxy.pojo.bytebuddy.</span><span style="color:#79B8FF;">ByteBuddyInterceptor</span><span style="color:#E1E4E8;"> and no properties discovered to create </span><span style="color:#79B8FF;">BeanSerializer</span><span style="color:#E1E4E8;"> (to avoid exception, disable </span><span style="color:#79B8FF;">SerializationFeature</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">FAIL_ON_EMPTY_BEANS</span><span style="color:#E1E4E8;">) (through reference chain</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> com.example.jpa.example1.</span><span style="color:#79B8FF;">User$HibernateProxy$MdjeSaTz</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">No</span><span style="color:#24292E;"> serializer found </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> org.hibernate.proxy.pojo.bytebuddy.</span><span style="color:#005CC5;">ByteBuddyInterceptor</span><span style="color:#24292E;"> and no properties discovered to create </span><span style="color:#005CC5;">BeanSerializer</span><span style="color:#24292E;"> (to avoid exception, disable </span><span style="color:#005CC5;">SerializationFeature</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">FAIL_ON_EMPTY_BEANS</span><span style="color:#24292E;">) (through reference chain</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> com.example.jpa.example1.</span><span style="color:#005CC5;">User$HibernateProxy$MdjeSaTz</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">com.fasterxml.jackson.databind.exc.</span><span style="color:#005CC5;">InvalidDefinitionException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">No</span><span style="color:#24292E;"> serializer found </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> org.hibernate.proxy.pojo.bytebuddy.</span><span style="color:#005CC5;">ByteBuddyInterceptor</span><span style="color:#24292E;"> and no properties discovered to create </span><span style="color:#005CC5;">BeanSerializer</span><span style="color:#24292E;"> (to avoid exception, disable </span><span style="color:#005CC5;">SerializationFeature</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">FAIL_ON_EMPTY_BEANS</span><span style="color:#24292E;">) (through reference chain</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> com.example.jpa.example1.</span><span style="color:#005CC5;">User$HibernateProxy$MdjeSaTz</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>这个时候该怎么办呢？下面介绍几个解决办法，第一个可以引入Hibernate5Module。</p><h4 id="常见报错解决方法" tabindex="-1">常见报错解决方法 <a class="header-anchor" href="#常见报错解决方法" aria-label="Permalink to &quot;常见报错解决方法&quot;">​</a></h4><p><strong>解决方法一：引入 Hibernate5Module</strong></p><p>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">objectMapper.</span><span style="color:#B392F0;">registerModule</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Hibernate5Module</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">String json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectMapper.</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(json);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">objectMapper.</span><span style="color:#6F42C1;">registerModule</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hibernate5Module</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">String json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectMapper.</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(json);</span></span></code></pre></div><p>这样子就不会报错了。</p><p>Hibernate5Module 里面还有很多 Feature 配置，例如FORCE_LAZY_LOADING，强制 lazy 里面加载就不会有上面的问题了。但是这个会有性能问题，我不建议使用。</p><p>还有 USE_TRANSIENT_ANNOTATION，利用 JPA 的 @Transient 注解配置，这个默认是开启的。所以基本上 feature 默认配置都是 ok 的，不需要我们动手，只要知道这回事就行了。</p>`,16),Z=l(`<p><strong>解决方法二：关闭 SerializationFeature.FAIL_ON_EMPTY_BEANS 的 feature</strong></p><p>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">        ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//直接关闭SerializationFeature.FAIL_ON_EMPTY_BEANS       objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectMapper.</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(json);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">        ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//直接关闭SerializationFeature.FAIL_ON_EMPTY_BEANS       objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);</span></span>
<span class="line"><span style="color:#24292E;">        String json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectMapper.</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(json);</span></span></code></pre></div><p>因为是 lazy，所以 empty 的 bean 的时候不报错也可以。<br><strong>解决方法三：对象上面排除&quot;hibernateLazyInitializer&quot;&quot;handler&quot;&quot;fieldHandler&quot;等</strong></p><p>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">JsonIgnoreProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;handler&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;fieldHandler&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">JsonIgnoreProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;hibernateLazyInitializer&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;handler&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;fieldHandler&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span></code></pre></div><p>那有没有其他 ObjectMapper 的推荐配置了呢？</p><h4 id="objectmapper-实战经验推荐配置项" tabindex="-1">ObjectMapper 实战经验推荐配置项 <a class="header-anchor" href="#objectmapper-实战经验推荐配置项" aria-label="Permalink to &quot;ObjectMapper 实战经验推荐配置项&quot;">​</a></h4><p>下面是我根据自己实战经验为你推荐的配置项。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//empty beans不需要报错，没有就是没有了</span></span>
<span class="line"><span style="color:#E1E4E8;">objectMapper.</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(SerializationFeature.FAIL_ON_EMPTY_BEANS,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//遇到不可识别字段的时候不要报错，因为前端传进来的字段不可信，可以不要影响正常业务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">objectMapper.</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//遇到不可以识别的枚举的时候，为了保证服务的强壮性，建议也不要关心未知的，甚至给个默认的，特别是微服务大家的枚举值随时在变，但是老的服务是不需要跟着一起变的</span></span>
<span class="line"><span style="color:#E1E4E8;">objectMapper.</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">objectMapper.</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//empty beans不需要报错，没有就是没有了</span></span>
<span class="line"><span style="color:#24292E;">objectMapper.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(SerializationFeature.FAIL_ON_EMPTY_BEANS,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//遇到不可识别字段的时候不要报错，因为前端传进来的字段不可信，可以不要影响正常业务逻辑</span></span>
<span class="line"><span style="color:#24292E;">objectMapper.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//遇到不可以识别的枚举的时候，为了保证服务的强壮性，建议也不要关心未知的，甚至给个默认的，特别是微服务大家的枚举值随时在变，但是老的服务是不需要跟着一起变的</span></span>
<span class="line"><span style="color:#24292E;">objectMapper.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">objectMapper.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>时间类型的最佳实践，如何返回 ISO 格式的标准时间</strong></p><p>有的时候我们会发现，默认的 ObjectMapper 里面的 module 提供的时间转化格式可能不能满足我们的要求，可能要进行扩展，老师提供一个自定义 module 返回 ISO 标准时间格式的一个案例，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testUserJson</span><span style="color:#E1E4E8;">() throws JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserJson userJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userJsonRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    userJson.</span><span style="color:#B392F0;">setOther</span><span style="color:#E1E4E8;">(Maps.</span><span style="color:#B392F0;">newHashMap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//自定义 myInstant解析序列化和反序列化DateTimeFormatter.ISO_ZONED_DATE_TIME这种格式</span></span>
<span class="line"><span style="color:#E1E4E8;">   SimpleModule myInstant </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleModule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;instant&quot;</span><span style="color:#E1E4E8;">, Version.</span><span style="color:#B392F0;">unknownVersion</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addSerializer</span><span style="color:#E1E4E8;">(java.time.Instant.class, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> JsonSerializer&lt;</span><span style="color:#F97583;">Instant</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serialize</span><span style="color:#E1E4E8;">(java.time.Instant </span><span style="color:#FFAB70;">instant</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      JsonGenerator </span><span style="color:#FFAB70;">jsonGenerator</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      SerializerProvider </span><span style="color:#FFAB70;">serializerProvider</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instant </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        jsonGenerator.</span><span style="color:#B392F0;">writeNull</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        jsonGenerator.</span><span style="color:#B392F0;">writeObject</span><span style="color:#E1E4E8;">(instant.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            })</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">addDeserializer</span><span style="color:#E1E4E8;">(Instant.class, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> JsonDeserializer&lt;</span><span style="color:#F97583;">Instant</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Instant </span><span style="color:#B392F0;">deserialize</span><span style="color:#E1E4E8;">(JsonParser </span><span style="color:#FFAB70;">jsonParser</span><span style="color:#E1E4E8;">, DeserializationContext </span><span style="color:#FFAB70;">deserializationContext</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Instant result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonParser.</span><span style="color:#B392F0;">getText</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(text)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ZonedDateTime.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(text, DateTimeFormatter.ISO_ZONED_DATE_TIME).</span><span style="color:#B392F0;">toInstant</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">    ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//注册自定义的module</span></span>
<span class="line"><span style="color:#E1E4E8;">    objectMapper.</span><span style="color:#B392F0;">registerModule</span><span style="color:#E1E4E8;">(myInstant);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectMapper.</span><span style="color:#B392F0;">writerWithDefaultPrettyPrinter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(userJson);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(json);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUserJson</span><span style="color:#24292E;">() throws JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">    UserJson userJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userJsonRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    userJson.</span><span style="color:#6F42C1;">setOther</span><span style="color:#24292E;">(Maps.</span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//自定义 myInstant解析序列化和反序列化DateTimeFormatter.ISO_ZONED_DATE_TIME这种格式</span></span>
<span class="line"><span style="color:#24292E;">   SimpleModule myInstant </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleModule</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;instant&quot;</span><span style="color:#24292E;">, Version.</span><span style="color:#6F42C1;">unknownVersion</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addSerializer</span><span style="color:#24292E;">(java.time.Instant.class, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> JsonSerializer&lt;</span><span style="color:#D73A49;">Instant</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serialize</span><span style="color:#24292E;">(java.time.Instant </span><span style="color:#E36209;">instant</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      JsonGenerator </span><span style="color:#E36209;">jsonGenerator</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      SerializerProvider </span><span style="color:#E36209;">serializerProvider</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instant </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        jsonGenerator.</span><span style="color:#6F42C1;">writeNull</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        jsonGenerator.</span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(instant.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">addDeserializer</span><span style="color:#24292E;">(Instant.class, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> JsonDeserializer&lt;</span><span style="color:#D73A49;">Instant</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Instant </span><span style="color:#6F42C1;">deserialize</span><span style="color:#24292E;">(JsonParser </span><span style="color:#E36209;">jsonParser</span><span style="color:#24292E;">, DeserializationContext </span><span style="color:#E36209;">deserializationContext</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">                    Instant result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    String text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jsonParser.</span><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(text)) {</span></span>
<span class="line"><span style="color:#24292E;">                        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ZonedDateTime.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(text, DateTimeFormatter.ISO_ZONED_DATE_TIME).</span><span style="color:#6F42C1;">toInstant</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">    ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//注册自定义的module</span></span>
<span class="line"><span style="color:#24292E;">    objectMapper.</span><span style="color:#6F42C1;">registerModule</span><span style="color:#24292E;">(myInstant);</span></span>
<span class="line"><span style="color:#24292E;">    String json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectMapper.</span><span style="color:#6F42C1;">writerWithDefaultPrettyPrinter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(userJson);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(json);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们利用上面的UserJson案例，在测试用例里面自定义了myInstant来进行序列化和反序列化Instant这种类型，然后我们通过objectMapper.registerModule(myInstant); 注册进去。那么我们看一下运行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;createDate&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2020-09-20T02:36:33.308Z&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;updateDate&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2020-09-20 10:36&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;my_name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jackxx&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;createDate&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-09-20T02:36:33.308Z&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;updateDate&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-09-20 10:36&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;my_name&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jackxx&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;shanghai&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这时你会发现 createDate 的格式发生了变化，这样子的话，任何人看到我们这样的 JSON 结构就不必问我们到底是哪个时区的问题了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>到这里，本课时的讲解就结束了，关于 Spring Data JPA 的基础知识也告一段落，不知道你是否已经掌握了。</p><p>我在这一课时详细讲解了 Jackson 的原理，分析了一下 JPA 里面经常会遇到的问题，并为你推荐了一些常见配置。有个需要注意的点就是双向关联关系，如果你暂时不得要领的话，我建议不要为了用而用，我们就按照 DB 的真实映射写法就可以，类似 MyBatis 一样，只不过不需要我们去关心和配置映射关系。</p><p>这里我还想说一个解题思路，就是当我们遇到问题的时候，要学着挖一挖问题的根源，这样解决问题才能够游刃有余。</p><p>好了，Jackson 的强大之处肯定远不止这些，欢迎你留言讨论和分享。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,22);function $(Q,X,ss,as,ns,ps){const a=e("Image");return t(),r("div",null,[E,y,i,F,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/59/E9/Ciqc1F9y6KeAArLTAAGETKtGSS0950.png"}),u,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/59/F4/CgqCHl9y6LCAZOFqAAGiK2TqQR8365.png"}),d,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/59/E9/Ciqc1F9y6OaAQJiiAACgvjgT_sE264.png"}),g,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/59/E9/Ciqc1F9y6O2AGMdBAAHAi0GnpZI902.png"}),A,h,D,_,C,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/59/E9/Ciqc1F9y6TiAIApWAAGnwAKoAuQ411.png"}),m,n(a,{alt:"Lark20201009-105051.png",src:"https://s0.lgstatic.com/i/image/M00/5B/A6/CgqCHl9_0CiAWB2rAAL0pfxIviE487.png"}),b,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/59/F4/CgqCHl9y6WSAGuZoAAFNeYDzpto473.png"}),j,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/59/F4/CgqCHl9y6WqAER67AAIDaup89yg019.png"}),q,v,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/59/E9/Ciqc1F9y6XaAD3msAAKEmKvGup4502.png"}),B,T,n(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/59/F4/CgqCHl9y6X2AFrzKAAF2qLKQjhg118.png"}),k,S,n(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/59/E9/Ciqc1F9y6YKAB5RYAACd0TRs-9E100.png"}),M,J,I,P,f,n(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/59/F4/CgqCHl9y6YmAEhRpAADjSxOL7wI046.png"}),O,n(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/59/E9/Ciqc1F9y6ceAEC13AAIfyfec2VQ426.png"}),N,n(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/59/F5/CgqCHl9y6deAf6crAACm1nnSdgY500.png"}),x,n(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/59/EA/Ciqc1F9y6eCAFva6AAMGNGEyorM459.png"}),w,n(a,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image/M00/59/EA/Ciqc1F9y6euAKmewAAPSLO28R0s115.png"}),L,U,z,R,n(a,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image/M00/59/F5/CgqCHl9y6fWAOmAQAAJetYinNl4753.png"}),V,H,G,Y,K,n(a,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image/M00/59/F5/CgqCHl9y6f2Abh0_AABqSNxYu3A670.png"}),W,n(a,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image/M00/59/EA/Ciqc1F9y6iKAE-gMAAEKYfENrs8207.png"}),Z])}const es=o(c,[["render",$]]);export{os as __pageData,es as default};
