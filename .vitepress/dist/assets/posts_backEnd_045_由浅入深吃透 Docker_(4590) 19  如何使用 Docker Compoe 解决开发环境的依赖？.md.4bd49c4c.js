import{_ as n,j as p,o as l,g as o,k as e,h as c,Q as s}from"./chunks/framework.e0c66c3f.js";const k=JSON.parse('{"title":"Docker Compose 的前世今生 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4590) 19  如何使用 Docker Compoe 解决开发环境的依赖？.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4590) 19  如何使用 Docker Compoe 解决开发环境的依赖？.md","lastUpdated":1696338709000}'),t={name:"posts/backEnd/045_由浅入深吃透 Docker/(4590) 19  如何使用 Docker Compoe 解决开发环境的依赖？.md"},r=s(`<p>前两个模块，我们从 Docker 的基本操作到 Docker 的实现原理，为你一步一步揭开了 Docker 神秘的面纱。然而目前为止，我们所有的操作都是围绕单个容器进行的，但当我们的业务越来越复杂时，需要多个容器相互配合，甚至需要多个主机组成容器集群才能满足我们的业务需求，这个时候就需要用到容器的编排工具了。因为容器编排工具可以帮助我们批量地创建、调度和管理容器，帮助我们解决规模化容器的部署问题。</p><p>从这一课时开始，我将向你介绍 Docker 三种常用的编排工具：Docker Compose、Docker Swarm 和 Kubernetes。了解这些编排工具，可以让你在不同的环境中选择最优的编排框架。</p><p>本课时我们先来学习一个在开发时经常用到的编排工具------Docker Compose。合理地使用 Docker Compose 可以极大地帮助我们提升开发效率。那么 Docker Compose 究竟是什么呢？</p><h3 id="docker-compose-的前世今生" tabindex="-1">Docker Compose 的前世今生 <a class="header-anchor" href="#docker-compose-的前世今生" aria-label="Permalink to &quot;Docker Compose 的前世今生&quot;">​</a></h3><p>Docker Compose 的前身是 Orchard 公司开发的 Fig，2014 年 Docker 收购了 Orchard 公司，然后将 Fig 重命名为 Docker Compose。现阶段 Docker Compose 是 Docker 官方的单机多容器管理系统，它本质是一个 Python 脚本，它通过解析用户编写的 yaml 文件，调用 Docker API 实现动态的创建和管理多个容器。</p><p>要想使用 Docker Compose，需要我们先安装一个 Docker Compose。</p><h3 id="安装-docker-compose" tabindex="-1">安装 Docker Compose <a class="header-anchor" href="#安装-docker-compose" aria-label="Permalink to &quot;安装 Docker Compose&quot;">​</a></h3><p>Docker Compose 可以安装在 macOS、 Windows 和 Linux 系统中，其中在 macOS 和 Windows 系统下 ，Docker Compose 都是随着 Docker 的安装一起安装好的，这里就不再详细介绍。 下面我重点介绍下如何在 Linux 系统下安装 Docker Compose。</p><h4 id="linux-系统下安装-docker-compose" tabindex="-1">Linux 系统下安装 Docker Compose <a class="header-anchor" href="#linux-系统下安装-docker-compose" aria-label="Permalink to &quot;Linux 系统下安装 Docker Compose&quot;">​</a></h4><p>在安装 Docker Compose 之前，请确保你的机器已经正确运行了 Docker，如果你的机器还没有安装 Docker，请参考<a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer">官方网站</a>安装 Docker。</p><p>要在 Linux 平台上安装 Docker Compose，我们需要到 Compose 的 Github 页面下载对应版本的安装包。这里我以 1.27.3 版本为例，带你安装一个 Docker Compose。</p><p>（1）使用 curl 命令（一种发送 http 请求的命令行工具）下载 Docker Compose 的安装包：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-L</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://github.com/docker/compose/releases/download/1.27.3/docker-compose-$(</span><span style="color:#B392F0;">uname</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#9ECBFF;">)-$(</span><span style="color:#B392F0;">uname</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#9ECBFF;">)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/bin/docker-compose</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-L</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://github.com/docker/compose/releases/download/1.27.3/docker-compose-$(</span><span style="color:#6F42C1;">uname</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-s</span><span style="color:#032F62;">)-$(</span><span style="color:#6F42C1;">uname</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-m</span><span style="color:#032F62;">)&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin/docker-compose</span></span></code></pre></div><blockquote><p>如果你想要安装其他版本的 Docker Compose，将 1.27.3 替换为你想要安装的版本即可。</p></blockquote><p>（2）修改 Docker Compose 执行权限：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chmod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/bin/docker-compose</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">chmod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin/docker-compose</span></span></code></pre></div><p>（3）检查 Docker Compose 是否安装成功：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker-compose --version</span></span>
<span class="line"><span style="color:#E1E4E8;">docker-compose version 1.27.3, build 1110ad01</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker-compose --version</span></span>
<span class="line"><span style="color:#24292E;">docker-compose version 1.27.3, build 1110ad01</span></span></code></pre></div><p>当我们执行完上述命令后，如果 Docker Compose 输出了当前版本号，就表示我们的 Docker Compose 已经安装成功。 Docker Compose 安装成功后，我们就可以很方便地使用它了。</p><p>在使用 Docker Compose 之前，我们首先需要先编写 Docker Compose 模板文件，因为 Docker Compose 运行的时候是根据 Docker Compose 模板文件中的定义来运行的。</p><p>下面我们首先来学习一下如何编写一个 Docker Compose 模板文件。</p><h3 id="编写-docker-compose-模板文件" tabindex="-1">编写 Docker Compose 模板文件 <a class="header-anchor" href="#编写-docker-compose-模板文件" aria-label="Permalink to &quot;编写 Docker Compose 模板文件&quot;">​</a></h3><p>在使用 Docker Compose 启动容器时， Docker Compose 会默认使用 docker-compose.yml 文件， docker-compose.yml 文件的格式为 yaml（类似于 json，一种标记语言）。</p><p>Docker Compose 模板文件一共有三个版本： v1、v2 和 v3。目前最新的版本为 v3，也是功能最全面的一个版本，下面我主要围绕 v3 版本介绍一下如何编写 Docker Compose 文件。</p><p>Docker Compose 文件主要分为三部分： services（服务）、networks（网络） 和 volumes（数据卷）。</p><ul><li><p>services（服务）：服务定义了容器启动的各项配置，就像我们执行<code>docker run</code>命令时传递的容器启动的参数一样，指定了容器应该如何启动，例如容器的启动参数，容器的镜像和环境变量等。</p></li><li><p>networks（网络）：网络定义了容器的网络配置，就像我们执行<code>docker network create</code>命令创建网络配置一样。</p></li><li><p>volumes（数据卷）：数据卷定义了容器的卷配置，就像我们执行<code>docker volume create</code>命令创建数据卷一样。</p></li></ul><p>一个典型的 Docker Compose 文件结构如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">nginx</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">## ... 省略部分配置</span></span>
<span class="line"><span style="color:#85E89D;">networks</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">frontend</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">backend</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">db-data</span><span style="color:#E1E4E8;">:</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">nginx</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">## ... 省略部分配置</span></span>
<span class="line"><span style="color:#22863A;">networks</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">frontend</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">backend</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">db-data</span><span style="color:#24292E;">:</span></span></code></pre></div><p>下面我们首先来学习一下如何编写 services 部分的配置。</p><h4 id="编写-service-配置" tabindex="-1">编写 Service 配置 <a class="header-anchor" href="#编写-service-配置" aria-label="Permalink to &quot;编写 Service 配置&quot;">​</a></h4><p>services 下，首先需要定义服务名称，例如你这个服务是 nginx 服务，你可以定义 service 名称为 nginx，格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3.8&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">nginx</span><span style="color:#E1E4E8;">:</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3.8&quot;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">nginx</span><span style="color:#24292E;">:</span></span></code></pre></div><p>服务名称定义完毕后，我们需要在服务名称的下一级定义当前服务的各项配置，使得我们的服务可以按照配置正常启动。常用的 16 种 service 配置如下。如果你比较了解，可以直接跳过看 Volume 配置和后续实操即可。</p><p><strong>build：</strong> 用于构建 Docker 镜像，类似于<code>docker build</code>命令，build 可以指定 Dockerfile 文件路径，然后根据 Dockerfile 命令来构建文件。使用方法如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">## 构建执行的上下文目录</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">context</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">## Dockerfile 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">dockerfile</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Dockerfile-name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">build</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">## 构建执行的上下文目录</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">context</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">## Dockerfile 名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">dockerfile</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Dockerfile-name</span></span></code></pre></div><p><strong>cap_add、cap_drop：</strong> 指定容器可以使用到哪些内核能力（capabilities）。使用格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">cap_add</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">NET_ADMIN</span></span>
<span class="line"><span style="color:#85E89D;">cap_drop</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">SYS_ADMIN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">cap_add</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">NET_ADMIN</span></span>
<span class="line"><span style="color:#22863A;">cap_drop</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">SYS_ADMIN</span></span></code></pre></div><p><strong>command：</strong> 用于覆盖容器默认的启动命令，它和 Dockerfile 中的 CMD 用法类似，也有两种使用方式：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">sleep 3000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">command</span><span style="color:#24292E;">: </span><span style="color:#032F62;">sleep 3000</span></span></code></pre></div><pre><code>command: [&quot;sleep&quot;, &quot;3000&quot;]
</code></pre><p><strong>container_name：</strong> 用于指定容器启动时容器的名称。使用格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">container_name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">container_name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span></code></pre></div><p><strong>depends_on：</strong> 用于指定服务间的依赖关系，这样可以先启动被依赖的服务。例如，我们的服务依赖数据库服务 db，可以指定 depends_on 为 db。使用格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3.8&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">my-web</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">depends_on</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">db</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">db</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mysql</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3.8&quot;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">my-web</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">build</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">depends_on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">db</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">db</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mysql</span></span></code></pre></div><p><strong>devices：</strong> 挂载主机的设备到容器中。使用格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">devices</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;/dev/sba:/dev/sda&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">devices</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;/dev/sba:/dev/sda&quot;</span></span></code></pre></div><p><strong>dns：</strong> 自定义容器中的 dns 配置。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">dns</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#79B8FF;">8.8.8.8</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#79B8FF;">114.114.114.114</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">dns</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#005CC5;">8.8.8.8</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#005CC5;">114.114.114.114</span></span></code></pre></div><p><strong>dns_search：</strong> 配置 dns 的搜索域。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">dns_search</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">svc.cluster.com</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">svc1.cluster.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">dns_search</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">svc.cluster.com</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">svc1.cluster.com</span></span></code></pre></div><p><strong>entrypoint：</strong> 覆盖容器的 entrypoint 命令。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">entrypoint</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">sleep 3000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">entrypoint</span><span style="color:#24292E;">: </span><span style="color:#032F62;">sleep 3000</span></span></code></pre></div><p>或</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">entrypoint</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;sleep&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3000&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">entrypoint</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;sleep&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3000&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p><strong>env_file：</strong> 指定容器的环境变量文件，启动时会把该文件中的环境变量值注入容器中。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">env_file</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">./dbs.env</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">env_file</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">./dbs.env</span></span></code></pre></div><p>env 文件的内容格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">KEY_ENV=values</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">KEY_ENV=values</span></span></code></pre></div><p><strong>environment：</strong> 指定容器启动时的环境变量。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">environment</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">KEY_ENV=values</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">environment</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">KEY_ENV=values</span></span></code></pre></div><p><strong>image：</strong> 指定容器镜像的地址。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:latest</span></span></code></pre></div><p><strong>pid：</strong> 共享主机的进程命名空间，像在主机上直接启动进程一样，可以看到主机的进程信息。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">pid</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;host&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">pid</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;host&quot;</span></span></code></pre></div><p><strong>ports：</strong> 暴露端口信息，使用格式为 HOST:CONTAINER，前面填写要映射到主机上的端口，后面填写对应的容器内的端口。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;1000&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;1000-1005&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;8080:8080&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;8888-8890:8888-8890&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;2222:22&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;127.0.0.1:9999:9999&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;127.0.0.1:3000-3005:3000-3005&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">&quot;6789:6789/udp&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;1000&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;1000-1005&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;8080:8080&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;8888-8890:8888-8890&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;2222:22&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;127.0.0.1:9999:9999&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;127.0.0.1:3000-3005:3000-3005&quot;</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">&quot;6789:6789/udp&quot;</span></span></code></pre></div><p><strong>networks：</strong> 这是服务要使用的网络名称，对应顶级的 networks 中的配置。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">my-service</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">networks</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     - </span><span style="color:#9ECBFF;">hello-network</span></span>
<span class="line"><span style="color:#E1E4E8;">     - </span><span style="color:#9ECBFF;">hello1-network</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">my-service</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">networks</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     - </span><span style="color:#032F62;">hello-network</span></span>
<span class="line"><span style="color:#24292E;">     - </span><span style="color:#032F62;">hello1-network</span></span></code></pre></div><p><strong>volumes：</strong> 不仅可以挂载主机数据卷到容器中，也可以直接挂载主机的目录到容器中，使用方式类似于使用<code>docker run</code>启动容器时添加 -v 参数。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">db</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mysql:5.6</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">volume</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/var/lib/mysql</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">target</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/var/lib/mysql</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">db</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mysql:5.6</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">volume</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">source</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/var/lib/mysql</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">target</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/var/lib/mysql</span></span></code></pre></div><p>volumes 除了上面介绍的长语法外，还支持短语法的书写方式，例如上面的写法可以精简为：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">db</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mysql:5.6</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">/var/lib/mysql:/var/lib/mysql</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">db</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mysql:5.6</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">/var/lib/mysql:/var/lib/mysql</span></span></code></pre></div><h4 id="编写-volume-配置" tabindex="-1">编写 Volume 配置 <a class="header-anchor" href="#编写-volume-配置" aria-label="Permalink to &quot;编写 Volume 配置&quot;">​</a></h4><p>如果你想在多个容器间共享数据卷，则需要在外部声明数据卷，然后在容器里声明使用数据卷。例如我想在两个服务间共享日志目录，则使用以下配置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">my-service1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">service:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">volume</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">logdata</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">target</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/var/log/mylog</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">my-service2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">service:v2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">volume</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">source</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">logdata</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">target</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/var/log/mylog</span></span>
<span class="line"><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">logdata</span><span style="color:#E1E4E8;">:</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">my-service1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">service:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">volume</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">source</span><span style="color:#24292E;">: </span><span style="color:#032F62;">logdata</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">target</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/var/log/mylog</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">my-service2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">service:v2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">volume</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">source</span><span style="color:#24292E;">: </span><span style="color:#032F62;">logdata</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">target</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/var/log/mylog</span></span>
<span class="line"><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">logdata</span><span style="color:#24292E;">:</span></span></code></pre></div><h4 id="编写-network-配置" tabindex="-1">编写 Network 配置 <a class="header-anchor" href="#编写-network-配置" aria-label="Permalink to &quot;编写 Network 配置&quot;">​</a></h4><p>Docker Compose 文件顶级声明的 networks 允许你创建自定义的网络，类似于<code>docker network create</code>命令。</p><p>例如你想声明一个自定义 bridge 网络配置，并且在服务中使用它，使用格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">web</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">networks</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">mybridge</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">ipv4_address</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">172.16.1.11</span></span>
<span class="line"><span style="color:#85E89D;">networks</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">mybridge</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">driver</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">bridge</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ipam</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">driver</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">config</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">subnet</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">172.16.1.0/24</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">web</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">networks</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">mybridge</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">ipv4_address</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">172.16.1.11</span></span>
<span class="line"><span style="color:#22863A;">networks</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">mybridge</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">driver</span><span style="color:#24292E;">: </span><span style="color:#032F62;">bridge</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ipam</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">driver</span><span style="color:#24292E;">: </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">config</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">subnet</span><span style="color:#24292E;">: </span><span style="color:#032F62;">172.16.1.0/24</span></span></code></pre></div><p>编写完 Docker Compose 模板文件后，需要使用 docker-compose 命令来运行这些文件。下面我们来学习下 docker-compose 都有哪些操作命令。</p><h3 id="docker-compose-操作命令" tabindex="-1">Docker Compose 操作命令 <a class="header-anchor" href="#docker-compose-操作命令" aria-label="Permalink to &quot;Docker Compose 操作命令&quot;">​</a></h3><p>我们可以使用<code>docker-compose -h</code>命令来查看 docker-compose 的用法，docker-compose 的基本使用格式如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">compose [</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">arg</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">...] [options] [</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">] [</span><span style="color:#79B8FF;">COMMAND</span><span style="color:#E1E4E8;">] [</span><span style="color:#79B8FF;">ARGS</span><span style="color:#E1E4E8;">...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">compose [</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">arg</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">...] [options] [</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">] [</span><span style="color:#005CC5;">COMMAND</span><span style="color:#24292E;">] [</span><span style="color:#005CC5;">ARGS</span><span style="color:#24292E;">...]</span></span></code></pre></div><p>其中 options 是 docker-compose 的参数，支持的参数和功能说明如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f, </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">file FILE             指定 docker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">compose 文件，默认为 docker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">compose.yml</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p, </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">project</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name NAME     指定项目名称，默认使用当前目录名称作为项目名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">verbose                   输出调试信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">log</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">level LEVEL           日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v, </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">version               输出当前版本并退出</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H, </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">host HOST             指定要连接的 Docker 地址</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">tls                       启用 TLS 认证</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">tlscacert CA_PATH         TLS CA 证书路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">tlscert CLIENT_CERT_PATH  TLS 公钥证书问价</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">tlskey TLS_KEY_PATH       TLS 私钥证书文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">tlsverify                 使用 TLS 校验对端</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">skip</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hostname</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">check       不校验主机名</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">project</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">directory PATH    指定工作目录，默认是 Compose 文件所在路径。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f, </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">file FILE             指定 docker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">compose 文件，默认为 docker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">compose.yml</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p, </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">project</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name NAME     指定项目名称，默认使用当前目录名称作为项目名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">verbose                   输出调试信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">log</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">level LEVEL           日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v, </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">version               输出当前版本并退出</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H, </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">host HOST             指定要连接的 Docker 地址</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">tls                       启用 TLS 认证</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">tlscacert CA_PATH         TLS CA 证书路径</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">tlscert CLIENT_CERT_PATH  TLS 公钥证书问价</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">tlskey TLS_KEY_PATH       TLS 私钥证书文件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">tlsverify                 使用 TLS 校验对端</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">skip</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hostname</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">check       不校验主机名</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">project</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">directory PATH    指定工作目录，默认是 Compose 文件所在路径。</span></span></code></pre></div><p>COMMAND 为 docker-compose 支持的命令。支持的命令如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  build              构建服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  config             校验和查看 </span><span style="color:#79B8FF;">Compose</span><span style="color:#E1E4E8;"> 文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  create             创建服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  down               停止服务，并且删除相关资源</span></span>
<span class="line"><span style="color:#E1E4E8;">  events             实时监控容器的时间信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  exec               在一个运行的容器中运行指定命令</span></span>
<span class="line"><span style="color:#E1E4E8;">  help               获取帮助</span></span>
<span class="line"><span style="color:#E1E4E8;">  images             列出镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">  kill               杀死容器</span></span>
<span class="line"><span style="color:#E1E4E8;">  logs               查看容器输出</span></span>
<span class="line"><span style="color:#E1E4E8;">  pause              暂停容器</span></span>
<span class="line"><span style="color:#E1E4E8;">  port               打印容器端口所映射出的公共端口</span></span>
<span class="line"><span style="color:#E1E4E8;">  ps                 列出项目中的容器列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  pull               拉取服务中的所有镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">  push               推送服务中的所有镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">  restart            重启服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  rm                 删除项目中已经停止的容器</span></span>
<span class="line"><span style="color:#E1E4E8;">  run                在指定服务上运行一个命令</span></span>
<span class="line"><span style="color:#E1E4E8;">  scale              设置服务运行的容器个数</span></span>
<span class="line"><span style="color:#E1E4E8;">  start              启动服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  stop               停止服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  top                限制服务中正在运行中的进程信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  unpause            恢复暂停的容器</span></span>
<span class="line"><span style="color:#E1E4E8;">  up                 创建并且启动服务</span></span>
<span class="line"><span style="color:#E1E4E8;">  version            打印版本信息并退出</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  build              构建服务</span></span>
<span class="line"><span style="color:#24292E;">  config             校验和查看 </span><span style="color:#005CC5;">Compose</span><span style="color:#24292E;"> 文件</span></span>
<span class="line"><span style="color:#24292E;">  create             创建服务</span></span>
<span class="line"><span style="color:#24292E;">  down               停止服务，并且删除相关资源</span></span>
<span class="line"><span style="color:#24292E;">  events             实时监控容器的时间信息</span></span>
<span class="line"><span style="color:#24292E;">  exec               在一个运行的容器中运行指定命令</span></span>
<span class="line"><span style="color:#24292E;">  help               获取帮助</span></span>
<span class="line"><span style="color:#24292E;">  images             列出镜像</span></span>
<span class="line"><span style="color:#24292E;">  kill               杀死容器</span></span>
<span class="line"><span style="color:#24292E;">  logs               查看容器输出</span></span>
<span class="line"><span style="color:#24292E;">  pause              暂停容器</span></span>
<span class="line"><span style="color:#24292E;">  port               打印容器端口所映射出的公共端口</span></span>
<span class="line"><span style="color:#24292E;">  ps                 列出项目中的容器列表</span></span>
<span class="line"><span style="color:#24292E;">  pull               拉取服务中的所有镜像</span></span>
<span class="line"><span style="color:#24292E;">  push               推送服务中的所有镜像</span></span>
<span class="line"><span style="color:#24292E;">  restart            重启服务</span></span>
<span class="line"><span style="color:#24292E;">  rm                 删除项目中已经停止的容器</span></span>
<span class="line"><span style="color:#24292E;">  run                在指定服务上运行一个命令</span></span>
<span class="line"><span style="color:#24292E;">  scale              设置服务运行的容器个数</span></span>
<span class="line"><span style="color:#24292E;">  start              启动服务</span></span>
<span class="line"><span style="color:#24292E;">  stop               停止服务</span></span>
<span class="line"><span style="color:#24292E;">  top                限制服务中正在运行中的进程信息</span></span>
<span class="line"><span style="color:#24292E;">  unpause            恢复暂停的容器</span></span>
<span class="line"><span style="color:#24292E;">  up                 创建并且启动服务</span></span>
<span class="line"><span style="color:#24292E;">  version            打印版本信息并退出</span></span></code></pre></div><p>好了，学习完 Docker Compose 模板的编写和 docker-compose 命令的使用方法，下面我们编写一个 Docker Compose 模板文件，实现一键启动 WordPress 服务（一种博客系统），来搭建一个属于我们自己的博客系统。</p><h3 id="使用-docker-compose-管理-wordpress" tabindex="-1">使用 Docker Compose 管理 WordPress <a class="header-anchor" href="#使用-docker-compose-管理-wordpress" aria-label="Permalink to &quot;使用 Docker Compose 管理 WordPress&quot;">​</a></h3><h4 id="启动-wordpress" tabindex="-1">启动 WordPress <a class="header-anchor" href="#启动-wordpress" aria-label="Permalink to &quot;启动 WordPress&quot;">​</a></h4><p>第一步，创建项目目录。首先我们在 /tmp 目录下创建一个 WordPress 的目录，这个目录将作为我们的工作目录。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ mkdir /tmp/wordpress</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ mkdir /tmp/wordpress</span></span></code></pre></div><p>第二步，进入工作目录。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cd /tmp/wordpress</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cd /tmp/wordpress</span></span></code></pre></div><p>第三步，创建 docker-compose.yml 文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ touch docker-compose.yml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ touch docker-compose.yml</span></span></code></pre></div><p>然后写入以下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">mysql</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mysql:5.7</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       - </span><span style="color:#9ECBFF;">mysql_data:/var/lib/mysql</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">restart</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">always</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">environment</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">MYSQL_ROOT_PASSWORD</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">MYSQL_DATABASE</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mywordpress</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">MYSQL_USER</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mywordpress</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">MYSQL_PASSWORD</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mywordpress</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">wordpress</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">depends_on</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       - </span><span style="color:#9ECBFF;">mysql</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">wordpress:php7.4</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       - </span><span style="color:#9ECBFF;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">restart</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">always</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">environment</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">WORDPRESS_DB_HOST</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mysql:3306</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">WORDPRESS_DB_USER</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mywordpress</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">WORDPRESS_DB_PASSWORD</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mywordpress</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">WORDPRESS_DB_NAME</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mywordpress</span></span>
<span class="line"><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">mysql_data</span><span style="color:#E1E4E8;">: {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">mysql</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mysql:5.7</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       - </span><span style="color:#032F62;">mysql_data:/var/lib/mysql</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">restart</span><span style="color:#24292E;">: </span><span style="color:#032F62;">always</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">environment</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">MYSQL_ROOT_PASSWORD</span><span style="color:#24292E;">: </span><span style="color:#032F62;">root</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">MYSQL_DATABASE</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mywordpress</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">MYSQL_USER</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mywordpress</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">MYSQL_PASSWORD</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mywordpress</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">wordpress</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">depends_on</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       - </span><span style="color:#032F62;">mysql</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">wordpress:php7.4</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       - </span><span style="color:#032F62;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">restart</span><span style="color:#24292E;">: </span><span style="color:#032F62;">always</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">environment</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">WORDPRESS_DB_HOST</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mysql:3306</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">WORDPRESS_DB_USER</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mywordpress</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">WORDPRESS_DB_PASSWORD</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mywordpress</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">WORDPRESS_DB_NAME</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mywordpress</span></span>
<span class="line"><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">mysql_data</span><span style="color:#24292E;">: {}</span></span></code></pre></div><p>第四步，启动 MySQL 数据库和 WordPress 服务。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker-compose up -d</span></span>
<span class="line"><span style="color:#E1E4E8;">Starting wordpress_mysql_1 ... done</span></span>
<span class="line"><span style="color:#E1E4E8;">Starting wordpress_wordpress_1 ... done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker-compose up -d</span></span>
<span class="line"><span style="color:#24292E;">Starting wordpress_mysql_1 ... done</span></span>
<span class="line"><span style="color:#24292E;">Starting wordpress_wordpress_1 ... done</span></span></code></pre></div><p>执行完以上命令后，Docker Compose 首先会为我们启动一个 MySQL 数据库，按照 MySQL 服务中声明的环境变量来设置 MySQL 数据库的用户名和密码。然后等待 MySQL 数据库启动后，再启动 WordPress 服务。WordPress 服务启动后，我们就可以通过 <a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a> 访问它了，访问成功后，我们就可以看到以下界面，然后按照提示一步一步设置就可以拥有属于自己的专属博客系统了。</p>`,101),E=s(`<p>图 1 WordPress 启动界面</p><h4 id="停止-wordpress" tabindex="-1">停止 WordPress <a class="header-anchor" href="#停止-wordpress" aria-label="Permalink to &quot;停止 WordPress&quot;">​</a></h4><p>如果你不再需要 WordPress 服务了，可以使用<code>docker-compose stop</code>命令来停止已启动的服务。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker-compose stop</span></span>
<span class="line"><span style="color:#E1E4E8;">Stopping wordpress_wordpress_1 ... done</span></span>
<span class="line"><span style="color:#E1E4E8;">Stopping wordpress_mysql_1     ... done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker-compose stop</span></span>
<span class="line"><span style="color:#24292E;">Stopping wordpress_wordpress_1 ... done</span></span>
<span class="line"><span style="color:#24292E;">Stopping wordpress_mysql_1     ... done</span></span></code></pre></div><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>Docker Compose 是一个用来定义复杂应用的单机编排工具，通常用于服务依赖关系复杂的开发和测试环境，如果你还在为配置复杂的开发环境而烦恼，Docker Compose 可以轻松帮你搞定复杂的开发环境。你只需要把复杂的开发环境使用 Docker Compose 模板文件描述出来，之后无论你在哪里可以轻松的一键启动开发和测试环境，极大地提高了我们的开发效率，同时也避免了污染我们开发机器的配置。</p><p>那么，学完本课时的课程，你可以试着使用 Docker Compose 一键启动一个 <a href="https://baike.baidu.com/item/LNMP" target="_blank" rel="noreferrer">LNMP</a> 开发环境吗？</p><p>下一课时，我将为你讲解容器的另一个编排系统 Docker Swarm。</p>`,8);function y(i,d,m,u,v,h){const a=p("Image");return l(),o("div",null,[r,e(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/63/AF/Ciqc1F-WuHqAMc6gAAGSco9Zyvc339.png"}),c(),E])}const F=n(t,[["render",y]]);export{k as __pageData,F as default};
