import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.e0c66c3f.js";const u=JSON.parse('{"title":"组件的渲染 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7652) 23  KeepAlive 组件：如何让组件在内存中缓存和调度？.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7652) 23  KeepAlive 组件：如何让组件在内存中缓存和调度？.md","lastUpdated":null}'),l={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7652) 23  KeepAlive 组件：如何让组件在内存中缓存和调度？.md"},o=p(`<p>通过前面的学习，我们了解到多个平行组件条件渲染，当满足条件的时候会触发某个组件的挂载，而已渲染的组件当条件不满足的时候会触发组件的卸载，举个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">comp-a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;flag&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">comp-a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">comp-b</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-else</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">comp-b</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click=&quot;flag=!flag&quot;&gt;toggle&lt;/button&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">comp-a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;flag&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">comp-a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">comp-b</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-else</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">comp-b</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click=&quot;flag=!flag&quot;&gt;toggle&lt;/button&gt;</span></span></code></pre></div><p>这里，当 flag 为 true 的时候，就会触发组件 A 的渲染，然后我们点击按钮把 flag 修改为 false，又会触发组件 A 的卸载，及组件 B 的渲染。</p><p>根据我们前面的学习，我们也知道组件的挂载和卸载都是一个递归过程，会有一定的性能损耗，对于这种可能会频繁切换的组件，我们有没有办法减少这其中的性能损耗呢？</p><p>答案是有的，Vue.js 提供了内置组件 KeepAlive，我们可以这么使用它：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">keep-alive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">comp-a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;flag&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">comp-a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">comp-b</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-else</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">comp-b</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click=&quot;flag=!flag&quot;&gt;toggle&lt;/button&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;/keep-alive&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">keep-alive</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">comp-a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;flag&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">comp-a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">comp-b</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-else</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">comp-b</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click=&quot;flag=!flag&quot;&gt;toggle&lt;/button&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/keep-alive&gt;</span></span></code></pre></div><p>我们可以用模板导出工具看一下它编译后的 render 函数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, KeepAlive as _KeepAlive, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> _component_comp_a = _resolveComponent(&quot;comp</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">a&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> _component_comp_b = _resolveComponent(&quot;comp</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">b&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> (_openBlock(), _createBlock(_KeepAlive, </span><span style="color:#FDAEB7;font-style:italic;">null</span><span style="color:#E1E4E8;">, [</span></span>
<span class="line"><span style="color:#E1E4E8;">    (_ctx.flag)</span></span>
<span class="line"><span style="color:#E1E4E8;">      ? _createVNode(_component_comp_a, { key: </span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">      : _createVNode(_component_comp_b, { key: </span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    _createVNode(&quot;button&quot;, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      onClick: $event =&gt; (_ctx.flag=!_ctx.flag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, &quot;toggle&quot;, </span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#E1E4E8;">, [&quot;onClick&quot;])</span></span>
<span class="line"><span style="color:#E1E4E8;">  ], </span><span style="color:#FDAEB7;font-style:italic;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DYNAMIC_SLOTS */</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, KeepAlive as _KeepAlive, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> _component_comp_a = _resolveComponent(&quot;comp</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">a&quot;)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> _component_comp_b = _resolveComponent(&quot;comp</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">b&quot;)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> (_openBlock(), _createBlock(_KeepAlive, </span><span style="color:#B31D28;font-style:italic;">null</span><span style="color:#24292E;">, [</span></span>
<span class="line"><span style="color:#24292E;">    (_ctx.flag)</span></span>
<span class="line"><span style="color:#24292E;">      ? _createVNode(_component_comp_a, { key: </span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">      : _createVNode(_component_comp_b, { key: </span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> }),</span></span>
<span class="line"><span style="color:#24292E;">    _createVNode(&quot;button&quot;, {</span></span>
<span class="line"><span style="color:#24292E;">      onClick: $event =&gt; (_ctx.flag=!_ctx.flag)</span></span>
<span class="line"><span style="color:#24292E;">    }, &quot;toggle&quot;, </span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#24292E;">, [&quot;onClick&quot;])</span></span>
<span class="line"><span style="color:#24292E;">  ], </span><span style="color:#B31D28;font-style:italic;">1024</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DYNAMIC_SLOTS */</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们使用了 KeepAlive 组件对这两个组件做了一层封装，KeepAlive 是一个抽象组件，它并不会渲染成一个真实的 DOM，只会渲染内部包裹的子节点，并且让内部的子组件在切换的时候，不会走一整套递归卸载和挂载 DOM的流程，从而优化了性能。</p><p>那么它具体是怎么做的呢？我们再来看 KeepAlive 组件的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> KeepAliveImpl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \`KeepAlive\`,</span></span>
<span class="line"><span style="color:#E1E4E8;">  __isKeepAlive</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  inheritRef</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    include</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#E1E4E8;">    exclude</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#E1E4E8;">    max</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [String, Number]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(props, { slots }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    const keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    let current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentInstance</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parentSuspense </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance.suspense</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> sharedContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance.ctx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { renderer</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { p</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> patch, m</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> move, um</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> _unmount, o</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { createElement } } } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sharedContext</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> storageContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    sharedContext.activate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (vnode, container, anchor, isSVG, optimized) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.component</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(vnode, container, anchor, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ENTER */</span><span style="color:#E1E4E8;">, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, optimized)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        instance.isDeactivated </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance.a) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">invokeArrayFns</span><span style="color:#E1E4E8;">(instance.a)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> vnodeHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> vnode.props.onVnodeMounted</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">invokeVNodeHook</span><span style="color:#E1E4E8;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    sharedContext.deactivate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (vnode) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.component</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(vnode, storageContainer, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* LEAVE */</span><span style="color:#E1E4E8;">, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance.da) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">invokeArrayFns</span><span style="color:#E1E4E8;">(instance.da)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> vnodeHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> vnode.props.onVnodeUnmounted</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">invokeVNodeHook</span><span style="color:#E1E4E8;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        instance.isDeactivated </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      }, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    function </span><span style="color:#B392F0;">unmount</span><span style="color:#E1E4E8;">(vnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resetShapeFlag</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">_unmount</span><span style="color:#E1E4E8;">(vnode, instance, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    function </span><span style="color:#B392F0;">pruneCache</span><span style="color:#E1E4E8;">(filter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      cache.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((vnode, key) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(vnode.type)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">filter </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(name))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">pruneCacheEntry</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    function </span><span style="color:#B392F0;">pruneCacheEntry</span><span style="color:#E1E4E8;">(key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cached </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> cached.type </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> current.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">unmount</span><span style="color:#E1E4E8;">(cached)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (current) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">resetShapeFlag</span><span style="color:#E1E4E8;">(current)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      cache.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">      keys.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [props.include, props.exclude], ([include, exclude]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      include </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pruneCache</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(include, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">      exclude </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">pruneCache</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(exclude, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    let pendingCacheKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cacheSubtree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pendingCacheKey </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(pendingCacheKey, instance.subTree)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onBeforeMount</span><span style="color:#E1E4E8;">(cacheSubtree)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onBeforeUpdate</span><span style="color:#E1E4E8;">(cacheSubtree)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onBeforeUnmount</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      cache.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(cached </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { subTree, suspense } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cached.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> subTree.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">resetShapeFlag</span><span style="color:#E1E4E8;">(subTree)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> da </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> subTree.component.da</span></span>
<span class="line"><span style="color:#E1E4E8;">          da </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(da, suspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">unmount</span><span style="color:#E1E4E8;">(cached)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      pendingCacheKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">slots.default) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      let vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (children.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(\`KeepAlive should contain exactly one component child.\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> children</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isVNode</span><span style="color:#E1E4E8;">(vnode) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(vnode.shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* STATEFUL_COMPONENT */</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> comp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.type</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(comp)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { include, exclude, max } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((include </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(include, name))) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">        (exclude </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(exclude, name))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> comp </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> vnode.key</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cachedVNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnode.el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneVNode</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      pendingCacheKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cachedVNode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        vnode.el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedVNode.el</span></span>
<span class="line"><span style="color:#E1E4E8;">        vnode.component </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedVNode.component</span></span>
<span class="line"><span style="color:#E1E4E8;">        vnode.shapeFlag </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span></span>
<span class="line"><span style="color:#E1E4E8;">        keys.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">        keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (max </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> keys.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(max, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">pruneCacheEntry</span><span style="color:#E1E4E8;">(keys.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      vnode.shapeFlag </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span></span>
<span class="line"><span style="color:#E1E4E8;">      current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> KeepAliveImpl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \`KeepAlive\`,</span></span>
<span class="line"><span style="color:#24292E;">  __isKeepAlive</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  inheritRef</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    include</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#24292E;">    exclude</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#24292E;">    max</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [String, Number]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(props, { slots }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    const keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    let current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentInstance</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parentSuspense </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance.suspense</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> sharedContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance.ctx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { renderer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { p</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> patch, m</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> move, um</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> _unmount, o</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { createElement } } } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sharedContext</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> storageContainer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    sharedContext.activate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (vnode, container, anchor, isSVG, optimized) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.component</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(vnode, container, anchor, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ENTER */</span><span style="color:#24292E;">, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">patch</span><span style="color:#24292E;">(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, optimized)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        instance.isDeactivated </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance.a) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">invokeArrayFns</span><span style="color:#24292E;">(instance.a)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> vnodeHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> vnode.props.onVnodeMounted</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">invokeVNodeHook</span><span style="color:#24292E;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    sharedContext.deactivate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (vnode) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.component</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(vnode, storageContainer, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* LEAVE */</span><span style="color:#24292E;">, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance.da) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">invokeArrayFns</span><span style="color:#24292E;">(instance.da)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> vnodeHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> vnode.props.onVnodeUnmounted</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">invokeVNodeHook</span><span style="color:#24292E;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        instance.isDeactivated </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      }, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    function </span><span style="color:#6F42C1;">unmount</span><span style="color:#24292E;">(vnode) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resetShapeFlag</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">_unmount</span><span style="color:#24292E;">(vnode, instance, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    function </span><span style="color:#6F42C1;">pruneCache</span><span style="color:#24292E;">(filter) {</span></span>
<span class="line"><span style="color:#24292E;">      cache.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((vnode, key) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(vnode.type)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">filter </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(name))) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">pruneCacheEntry</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    function </span><span style="color:#6F42C1;">pruneCacheEntry</span><span style="color:#24292E;">(key) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cached </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">current </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> cached.type </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> current.type) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">unmount</span><span style="color:#24292E;">(cached)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (current) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resetShapeFlag</span><span style="color:#24292E;">(current)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      cache.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">      keys.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [props.include, props.exclude], ([include, exclude]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      include </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pruneCache</span><span style="color:#24292E;">(name </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(include, name))</span></span>
<span class="line"><span style="color:#24292E;">      exclude </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">pruneCache</span><span style="color:#24292E;">(name </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(exclude, name))</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    let pendingCacheKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cacheSubtree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pendingCacheKey </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        cache.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(pendingCacheKey, instance.subTree)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onBeforeMount</span><span style="color:#24292E;">(cacheSubtree)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onBeforeUpdate</span><span style="color:#24292E;">(cacheSubtree)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onBeforeUnmount</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      cache.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(cached </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { subTree, suspense } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cached.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> subTree.type) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">resetShapeFlag</span><span style="color:#24292E;">(subTree)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> da </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> subTree.component.da</span></span>
<span class="line"><span style="color:#24292E;">          da </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(da, suspense)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">unmount</span><span style="color:#24292E;">(cached)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      pendingCacheKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">slots.default) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slots.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      let vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (children.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(\`KeepAlive should contain exactly one component child.\`)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> children</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isVNode</span><span style="color:#24292E;">(vnode) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(vnode.shapeFlag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* STATEFUL_COMPONENT */</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> comp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.type</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(comp)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { include, exclude, max } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((include </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(include, name))) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        (exclude </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(exclude, name))) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> comp </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> vnode.key</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cachedVNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnode.el) {</span></span>
<span class="line"><span style="color:#24292E;">        vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneVNode</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      pendingCacheKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cachedVNode) {</span></span>
<span class="line"><span style="color:#24292E;">        vnode.el </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedVNode.el</span></span>
<span class="line"><span style="color:#24292E;">        vnode.component </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedVNode.component</span></span>
<span class="line"><span style="color:#24292E;">        vnode.shapeFlag </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">512</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span></span>
<span class="line"><span style="color:#24292E;">        keys.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">        keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (max </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> keys.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(max, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">pruneCacheEntry</span><span style="color:#24292E;">(keys.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().value)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      vnode.shapeFlag </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span></span>
<span class="line"><span style="color:#24292E;">      current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我把 KeepAlive 的实现拆成四个部分：<strong>组件的渲染</strong> 、<strong>缓存的设计</strong> 、<strong>Props 设计</strong> 和<strong>组件的卸载</strong>。接下来，我们就来依次分析它们的实现。分析的过程中，我会结合前面的示例讲解，希望你也能够运行这个示例，并加入一些断点调试。</p><h3 id="组件的渲染" tabindex="-1">组件的渲染 <a class="header-anchor" href="#组件的渲染" aria-label="Permalink to &quot;组件的渲染&quot;">​</a></h3><p>首先，我们来看组件的渲染部分，可以看到 KeepAlive 组件使用了 Composition API 的方式去实现，我们已经学习过了，当 setup 函数返回的是一个函数，那么这个函数就是组件的渲染函数，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pendingCacheKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">slots.default) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slots.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  let vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (children.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(\`KeepAlive should contain exactly one component child.\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> children</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isVNode</span><span style="color:#E1E4E8;">(vnode) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(vnode.shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* STATEFUL_COMPONENT */</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> comp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.type</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(comp)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { include, exclude, max } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((include </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(include, name))) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    (exclude </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(exclude, name))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> comp </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> vnode.key</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cachedVNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnode.el) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneVNode</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  pendingCacheKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cachedVNode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedVNode.el</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.component </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedVNode.component</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 避免 vnode 节点作为新节点被挂载</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.shapeFlag </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 让这个 key 始终新鲜</span></span>
<span class="line"><span style="color:#E1E4E8;">    keys.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 删除最久不用的 key，符合 LRU 思想</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (max </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> keys.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(max, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">pruneCacheEntry</span><span style="color:#E1E4E8;">(keys.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 避免 vnode 被卸载</span></span>
<span class="line"><span style="color:#E1E4E8;">  vnode.shapeFlag </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span></span>
<span class="line"><span style="color:#E1E4E8;">  current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  pendingCacheKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">slots.default) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slots.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  let vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (children.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(\`KeepAlive should contain exactly one component child.\`)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> children</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isVNode</span><span style="color:#24292E;">(vnode) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(vnode.shapeFlag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* STATEFUL_COMPONENT */</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> comp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.type</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(comp)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { include, exclude, max } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((include </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(include, name))) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    (exclude </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(exclude, name))) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> comp </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> vnode.key</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cachedVNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnode.el) {</span></span>
<span class="line"><span style="color:#24292E;">    vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneVNode</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  pendingCacheKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cachedVNode) {</span></span>
<span class="line"><span style="color:#24292E;">    vnode.el </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedVNode.el</span></span>
<span class="line"><span style="color:#24292E;">    vnode.component </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedVNode.component</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 避免 vnode 节点作为新节点被挂载</span></span>
<span class="line"><span style="color:#24292E;">    vnode.shapeFlag </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">512</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 让这个 key 始终新鲜</span></span>
<span class="line"><span style="color:#24292E;">    keys.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">    keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 删除最久不用的 key，符合 LRU 思想</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (max </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> keys.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(max, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">pruneCacheEntry</span><span style="color:#24292E;">(keys.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().value)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 避免 vnode 被卸载</span></span>
<span class="line"><span style="color:#24292E;">  vnode.shapeFlag </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span></span>
<span class="line"><span style="color:#24292E;">  current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>函数先从 slots.default() 拿到子节点 children，它就是 KeepAlive 组件包裹的子组件，由于 KeepAlive 只能渲染单个子节点，所以当 children 长度大于 1 的时候会报警告。</p><p>我们先不考虑缓存部分，KeepAlive 渲染的 vnode 就是子节点 children 的第一个元素，它是函数的返回值。</p><p>因此我们说 KeepAlive 是抽象组件，它本身不渲染成实体节点，而是渲染它的第一个子节点。</p><p>当然，没有缓存的 KeepAlive 组件是没有灵魂的，这种抽象的封装也是没有任何意义的，所以接下来我们重点来看它的缓存是如何设计的。</p><h3 id="缓存的设计" tabindex="-1">缓存的设计 <a class="header-anchor" href="#缓存的设计" aria-label="Permalink to &quot;缓存的设计&quot;">​</a></h3><p>我们先来思考一件事情，我们需要缓存什么？</p><p>组件的递归 patch 过程，主要就是为了渲染 DOM，显然这个递归过程是有一定的性能耗时的，既然目标是为了渲染 DOM，那么我们是不是可以把 DOM 缓存了，这样下一次渲染我们就可以直接从缓存里获取 DOM 并渲染，就不需要每次都重新递归渲染了。</p><p>实际上 KeepAlive 组件就是这么做的，它注入了两个钩子函数，onBeforeMount 和 onBeforeUpdate，在这两个钩子函数内部都执行了 cacheSubtree 函数来做缓存：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cacheSubtree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pendingCacheKey </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    cache.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(pendingCacheKey, instance.subTree)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cacheSubtree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pendingCacheKey </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    cache.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(pendingCacheKey, instance.subTree)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于 pendingCacheKey 是在 KeepAlive 的 render 函数中才会被赋值，所以 KeepAlive 首次进入 onBeforeMount 钩子函数的时候是不会缓存的。</p><p>然后 KeepAlive 执行 render 的时候，pendingCacheKey 会被赋值为 vnode.key，我们回过头看一下示例渲染后的模板：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, KeepAlive as _KeepAlive, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> _component_comp_a = _resolveComponent(&quot;comp</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">a&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">const</span><span style="color:#E1E4E8;"> _component_comp_b = _resolveComponent(&quot;comp</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">b&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">return</span><span style="color:#E1E4E8;"> (_openBlock(), _createBlock(_KeepAlive, </span><span style="color:#FDAEB7;font-style:italic;">null</span><span style="color:#E1E4E8;">, [</span></span>
<span class="line"><span style="color:#E1E4E8;">    (_ctx.flag)</span></span>
<span class="line"><span style="color:#E1E4E8;">      ? _createVNode(_component_comp_a, { key: </span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">      : _createVNode(_component_comp_b, { key: </span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    _createVNode(&quot;button&quot;, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      onClick: $event =&gt; (_ctx.flag=!_ctx.flag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, &quot;toggle&quot;, </span><span style="color:#FDAEB7;font-style:italic;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#E1E4E8;">, [&quot;onClick&quot;])</span></span>
<span class="line"><span style="color:#E1E4E8;">  ], </span><span style="color:#FDAEB7;font-style:italic;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DYNAMIC_SLOTS */</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, KeepAlive as _KeepAlive, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> _component_comp_a = _resolveComponent(&quot;comp</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">a&quot;)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">const</span><span style="color:#24292E;"> _component_comp_b = _resolveComponent(&quot;comp</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">b&quot;)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">return</span><span style="color:#24292E;"> (_openBlock(), _createBlock(_KeepAlive, </span><span style="color:#B31D28;font-style:italic;">null</span><span style="color:#24292E;">, [</span></span>
<span class="line"><span style="color:#24292E;">    (_ctx.flag)</span></span>
<span class="line"><span style="color:#24292E;">      ? _createVNode(_component_comp_a, { key: </span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">      : _createVNode(_component_comp_b, { key: </span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> }),</span></span>
<span class="line"><span style="color:#24292E;">    _createVNode(&quot;button&quot;, {</span></span>
<span class="line"><span style="color:#24292E;">      onClick: $event =&gt; (_ctx.flag=!_ctx.flag)</span></span>
<span class="line"><span style="color:#24292E;">    }, &quot;toggle&quot;, </span><span style="color:#B31D28;font-style:italic;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* PROPS */</span><span style="color:#24292E;">, [&quot;onClick&quot;])</span></span>
<span class="line"><span style="color:#24292E;">  ], </span><span style="color:#B31D28;font-style:italic;">1024</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DYNAMIC_SLOTS */</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们注意到 KeepAlive 的子节点创建的时候都添加了一个 key 的 prop，它就是专门为 KeepAlive 的缓存设计的，这样每一个子节点都能有一个唯一的 key。</p><p>页面首先渲染 A 组件，接着当我们点击按钮的时候，修改了 flag 的值，会触发当前组件的重新渲染，进而也触发了 KeepAlvie 组件的重新渲染，在组件重新渲染前，会执行 onBeforeUpdate 对应的钩子函数，也就再次执行到 cacheSubtree 函数中。</p><p>这个时候 pendingCacheKey 对应的是 A 组件 vnode 的 key，instance.subTree 对应的也是 A 组件的渲染子树，所以 KeepAlive 每次在更新前，会缓存前一个组件的渲染子树。</p><blockquote><p>经过前面的分析，我认为 onBeforeMount 的钩子函数注入似乎并没有必要，我在源码中删除后再跑 Vue.js 3.0 的单测也能通过，如果你有不同意见，欢迎在留言区与我分享。</p></blockquote><p>这个时候渲染了 B 组件，当我们再次点击按钮，修改 flag 值的时候，会再次触发KeepAlvie 组件的重新渲染，当然此时执行 onBeforeUpdate 钩子函数缓存的就是 B 组件的渲染子树了。</p><p>接着再次执行 KeepAlive 组件的 render 函数，此时就可以从缓存中根据 A 组件的 key 拿到对应的渲染子树 cachedVNode 的了，然后执行如下逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cachedVNode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  vnode.el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedVNode.el</span></span>
<span class="line"><span style="color:#E1E4E8;">  vnode.component </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedVNode.component</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 避免 vnode 节点作为新节点被挂载</span></span>
<span class="line"><span style="color:#E1E4E8;">  vnode.shapeFlag </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 让这个 key 始终新鲜</span></span>
<span class="line"><span style="color:#E1E4E8;">  keys.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 删除最久不用的 key，符合 LRU 思想</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (max </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> keys.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(max, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">pruneCacheEntry</span><span style="color:#E1E4E8;">(keys.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cachedVNode) {</span></span>
<span class="line"><span style="color:#24292E;">  vnode.el </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedVNode.el</span></span>
<span class="line"><span style="color:#24292E;">  vnode.component </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedVNode.component</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 避免 vnode 节点作为新节点被挂载</span></span>
<span class="line"><span style="color:#24292E;">  vnode.shapeFlag </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">512</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 让这个 key 始终新鲜</span></span>
<span class="line"><span style="color:#24292E;">  keys.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">  keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 删除最久不用的 key，符合 LRU 思想</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (max </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> keys.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(max, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pruneCacheEntry</span><span style="color:#24292E;">(keys.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().value)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了缓存的渲染子树后，我们就可以直接拿到它对应的 DOM 以及组件实例 component，赋值给 KeepAlive 的 vnode，并更新 vnode.shapeFlag，以便后续 patch 阶段使用。</p><blockquote><p>注意，这里有一个额外的缓存管理的逻辑，我们稍后讲 Props 设计的时候会详细说。</p></blockquote><p>那么，对于 KeepAlive 组件的渲染来说，有缓存和没缓存在 patch 阶段有何区别呢，由于 KeepAlive 缓存的都是有状态的组件 vnode，我们再来回顾一下 patchComponent 函数的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> processComponent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理 KeepAlive 组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n2.shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">512</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      parentComponent.ctx.</span><span style="color:#B392F0;">activate</span><span style="color:#E1E4E8;">(n2, container, anchor, isSVG, optimized)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 挂载组件</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">mountComponent</span><span style="color:#E1E4E8;">(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新组件</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> processComponent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理 KeepAlive 组件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n2.shapeFlag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">512</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_KEPT_ALIVE */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      parentComponent.ctx.</span><span style="color:#6F42C1;">activate</span><span style="color:#24292E;">(n2, container, anchor, isSVG, optimized)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 挂载组件</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">mountComponent</span><span style="color:#24292E;">(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新组件</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>KeepAlive 首次渲染某一个子节点时，和正常的组件节点渲染没有区别，但是有缓存后，由于标记了 shapeFlag，所以在执行processComponent函数时会走到处理 KeepAlive 组件的逻辑中，执行 KeepAlive 组件实例上下文中的 activate 函数，我们来看它的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sharedContext.activate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (vnode, container, anchor, isSVG, optimized) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.component</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(vnode, container, anchor, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ENTER */</span><span style="color:#E1E4E8;">, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, optimized)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.isDeactivated </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance.a) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">invokeArrayFns</span><span style="color:#E1E4E8;">(instance.a)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> vnodeHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> vnode.props.onVnodeMounted</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">invokeVNodeHook</span><span style="color:#E1E4E8;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sharedContext.activate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (vnode, container, anchor, isSVG, optimized) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.component</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(vnode, container, anchor, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ENTER */</span><span style="color:#24292E;">, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">patch</span><span style="color:#24292E;">(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, optimized)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    instance.isDeactivated </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance.a) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">invokeArrayFns</span><span style="color:#24292E;">(instance.a)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> vnodeHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> vnode.props.onVnodeMounted</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">invokeVNodeHook</span><span style="color:#24292E;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，由于此时已经能从 vnode.el 中拿到缓存的 DOM 了，所以可以直接调用 move 方法挂载节点，然后执行 patch 方法更新组件，以防止 props 发生变化的情况。</p><p>接下来，就是通过 queuePostRenderEffect 的方式，在组件渲染完毕后，执行子节点组件定义的 activated 钩子函数。</p><p>至此，我们就了解了 KeepAlive 的缓存设计，KeepAlive 包裹的子组件在其渲染后，下一次 KeepAlive 组件更新前会被缓存，缓存后的子组件在下一次渲染的时候直接从缓存中拿到子树 vnode 以及对应的 DOM 元素，直接渲染即可。</p><p>当然，光有缓存还不够灵活，有些时候我们想针对某些子组件缓存，某些子组件不缓存，另外，我们还想限制 KeepAlive 组件的最大缓存个数，怎么办呢？KeepAlive 设计了几个 Props，允许我们可以对上述需求做配置。</p><h3 id="props-设计" tabindex="-1">Props 设计 <a class="header-anchor" href="#props-设计" aria-label="Permalink to &quot;Props 设计&quot;">​</a></h3><p>KeepAlive 一共支持了三个 Props，分别是 include、exclude 和 max。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">exclude</span><span style="color:#E1E4E8;">: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">: [String, Number]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">include</span><span style="color:#24292E;">: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">exclude</span><span style="color:#24292E;">: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">: [String, Number]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>include 和 exclude 对应的实现逻辑如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { include, exclude, max } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((include </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(include, name))) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">  (exclude </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(exclude, name))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { include, exclude, max } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((include </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(include, name))) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">  (exclude </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(exclude, name))) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很好理解，如果子组件名称不匹配 include 的 vnode ，以及子组件名称匹配 exclude 的 vnode 都不应该被缓存，而应该直接返回。</p><p>当然，由于 props 是响应式的，在 include 和 exclude props 发生变化的时候也应该有相关的处理逻辑，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [props.include, props.exclude], ([</span><span style="color:#FFAB70;">include</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exclude</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  include </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pruneCache</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(include, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">  exclude </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">pruneCache</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(exclude, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [props.include, props.exclude], ([</span><span style="color:#E36209;">include</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exclude</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  include </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pruneCache</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(include, name))</span></span>
<span class="line"><span style="color:#24292E;">  exclude </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">pruneCache</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(exclude, name))</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>监听的逻辑也很简单，当 include 发生变化的时候，从缓存中删除那些 name 不匹配 include 的 vnode 节点；当 exclude 发生变化的时候，从缓存中删除那些 name 匹配 exclude 的 vnode 节点。</p><p>除了 include 和 exclude 之外，KeepAlive 组件还支持了 max prop 来控制缓存的最大个数。</p><p>由于缓存本身就是占用了内存，所以有些场景我们希望限制 KeepAlive 缓存的个数，这时我们可以通过 max 属性来控制，当缓存新的 vnode 的时候，会做一定程度的缓存管理，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">keys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#6A737D;">// 删除最久不用的 key，符合 LRU 思想</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (max </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> keys.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(max, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#B392F0;">pruneCacheEntry</span><span style="color:#E1E4E8;">(keys.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">keys.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#6A737D;">// 删除最久不用的 key，符合 LRU 思想</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (max </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> keys.size </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(max, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#6F42C1;">pruneCacheEntry</span><span style="color:#24292E;">(keys.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().value)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于新的缓存 key 都是在 keys 的结尾添加的，所以当缓存的个数超过 max 的时候，就从最前面开始删除，符合 LRU 最近最少使用的算法思想。</p><h3 id="组件的卸载" tabindex="-1">组件的卸载 <a class="header-anchor" href="#组件的卸载" aria-label="Permalink to &quot;组件的卸载&quot;">​</a></h3><p>了解完 KeepAlive 组件的渲染、缓存和 Props 设计后，我们接着来看 KeepAlive 组件的卸载过程。</p><p>我们先来分析 KeepAlive 内部包裹的子组件的卸载过程，前面我们提到 KeepAlive 渲染的过程实际上是渲染它的第一个子组件节点，并且会给渲染的 vnode 打上如下标记：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">vnode.shapeFlag </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">vnode.shapeFlag </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span></span></code></pre></div><p>加上这个 shapeFlag 有什么用呢，我们结合前面的示例来分析。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">keep-alive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">comp-a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;flag&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">comp-a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">comp-b</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-else</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">comp-b</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click=&quot;flag=!flag&quot;&gt;toggle&lt;/button&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;/keep-alive&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">keep-alive</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">comp-a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;flag&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">comp-a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">comp-b</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-else</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">comp-b</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click=&quot;flag=!flag&quot;&gt;toggle&lt;/button&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/keep-alive&gt;</span></span></code></pre></div><p>当 flag 为 true 的时候，渲染 A 组件，然后我们点击按钮修改 flag 的值，会触发 KeepAlive 组件的重新渲染，会先执行 BeforeUpdate 钩子函数缓存 A 组件对应的渲染子树 vnode，然后再执行 patch 更新子组件。</p><p>这个时候会执行 B 组件的渲染，以及 A 组件的卸载，我们知道组件的卸载会执行 unmount 方法，其中有一个关于 KeepAlive 组件的逻辑，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> unmount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (vnode, parentComponent, parentSuspense, doRemove </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { shapeFlag  } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shapeFlag </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    parentComponent.ctx.</span><span style="color:#B392F0;">deactivate</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 卸载组件</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> unmount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (vnode, parentComponent, parentSuspense, doRemove </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { shapeFlag  } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shapeFlag </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT_SHOULD_KEEP_ALIVE */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    parentComponent.ctx.</span><span style="color:#6F42C1;">deactivate</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 卸载组件</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果 shapeFlag 满足 KeepAlive 的条件，则执行相应的 deactivate 函数，它的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sharedContext.deactivate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (vnode) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.component</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(vnode, storageContainer, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* LEAVE */</span><span style="color:#E1E4E8;">, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance.da) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">invokeArrayFns</span><span style="color:#E1E4E8;">(instance.da)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> vnodeHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.props </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> vnode.props.onVnodeUnmounted</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">invokeVNodeHook</span><span style="color:#E1E4E8;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.isDeactivated </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, parentSuspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sharedContext.deactivate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (vnode) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.component</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(vnode, storageContainer, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* LEAVE */</span><span style="color:#24292E;">, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance.da) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">invokeArrayFns</span><span style="color:#24292E;">(instance.da)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> vnodeHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> vnode.props.onVnodeUnmounted</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (vnodeHook) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">invokeVNodeHook</span><span style="color:#24292E;">(vnodeHook, instance.parent, vnode)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    instance.isDeactivated </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }, parentSuspense)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>函数首先通过 move 方法从 DOM 树中移除该节点，接着通过 queuePostRenderEffect 的方式执行定义的 deactivated 钩子函数。</p><p>注意，这里我们只是移除了 DOM，并没有真正意义上的执行子组件的整套卸载流程。</p><p>那么除了点击按钮引起子组件的卸载之外，当 KeepAlive 所在的组件卸载时，由于卸载的递归特性，也会触发 KeepAlive 组件的卸载，在卸载的过程中会执行 onBeforeUnmount 钩子函数，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">onBeforeUnmount</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(cached </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { subTree, suspense } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cached.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> subTree.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resetShapeFlag</span><span style="color:#E1E4E8;">(subTree)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> da </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> subTree.component.da</span></span>
<span class="line"><span style="color:#E1E4E8;">      da </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">queuePostRenderEffect</span><span style="color:#E1E4E8;">(da, suspense)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">unmount</span><span style="color:#E1E4E8;">(cached)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">onBeforeUnmount</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  cache.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(cached </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { subTree, suspense } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cached.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> subTree.type) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resetShapeFlag</span><span style="color:#24292E;">(subTree)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> da </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> subTree.component.da</span></span>
<span class="line"><span style="color:#24292E;">      da </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">queuePostRenderEffect</span><span style="color:#24292E;">(da, suspense)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">unmount</span><span style="color:#24292E;">(cached)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>它会遍历所有缓存的 vnode，并且比对缓存的 vnode 是不是当前 KeepAlive 组件渲染的 vnode。</p><p>如果是的话，则执行 resetShapeFlag 方法，它的作用是修改 vnode 的 shapeFlag，不让它再被当作一个 KeepAlive 的 vnode 了，这样就可以走正常的卸载逻辑。接着通过 queuePostRenderEffect 的方式执行子组件的 deactivated 钩子函数。</p><p>如果不是，则执行 unmount 方法重置 shapeFlag 以及执行缓存 vnode 的整套卸载流程。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该明白 KeepAlive 实际上是一个抽象节点，渲染的是它的第一个子节点，并了解它的缓存设计、Props 设计和卸载过程。</p><p>最后，给你留一道思考题，我们是如何给组件注册 activated 和 deactivated 钩子函数的，它们的执行和其他钩子函数比，有什么不同？欢迎你在留言区与我分享。</p><blockquote><p>本节课的相关代码在源代码中的位置如下：</p><p>packages/runtime-core/src/components/KeepAlive.ts</p><p>packages/runtime-core/src/renderer.ts</p></blockquote>`,79),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const v=s(l,[["render",c]]);export{u as __pageData,v as default};
