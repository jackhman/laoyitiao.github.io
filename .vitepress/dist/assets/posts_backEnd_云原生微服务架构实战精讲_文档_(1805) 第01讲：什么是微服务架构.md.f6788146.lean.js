import{_ as s,j as n,o as p,g as l,k as o,h as r,Q as e,s as t}from"./chunks/framework.a0d18f64.js";const D=JSON.parse('{"title":"第01讲：什么是微服务架构","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1805) 第01讲：什么是微服务架构.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1805) 第01讲：什么是微服务架构.md","lastUpdated":1696682708000}'),_={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1805) 第01讲：什么是微服务架构.md"},i=e("",10),c=e("",25),b=t("br",null,null,-1),g=t("p",null,[t("strong",null,"微服务架构的开发团队围绕业务能力来组织"),r("**。**单体应用的开发团队通常按照技能来划分，一个典型的 3 层应用开发团队可能分成前端开发、后端开发和数据库管理等小组。微服务架构的开发团队以服务为单元来组织，每个服务与特定的业务需求相对应。服务的开发团队规模较小，包含开发、测试和 DevOps 相关的全部人员，负责该微服务的团队对该微服务的实现可以全权负责。较小的开发团队意味着更少的沟通成本和更高的开发效率。")],-1),h=t("br",null,null,-1),d=t("p",null,[t("strong",null,"微服务架构使用去中心化的管理模式"),r("**。**单体应用的开发团队通常会对使用的技术栈做出限制，要求整个团队使用统一的技术栈。这种方式的弊端在于，没有一种技术栈适用于解决所有的问题。微服务架构中的服务都可以独立部署，这就意味着每个服务在实现时可以选择最适合的技术栈，只需要满足服务的 API 契约即可。每个团队自主管理所负责的服务，不但负责构建，还同样负责运行和维护，这在无形中提高了团队的主观能动性，同时降低了管理的开销。")],-1),u=t("br",null,null,-1),A=t("p",null,"如下图所示，每个微服务都有对应的团队，而每个团队中都有各种角色的人员。",-1),m=t("br",null,null,-1),P=t("br",null,null,-1),S=t("p",null,[t("strong",null,"微服务架构使用去中心的数据存储"),r("**。**单体应用通常使用单一数据库来存储数据，微服务架构中的服务通常有自己专有的数据存储，如下图所示。这些存储方式的实现可能各不相同，只包含服务所需的数据。")],-1),T=t("br",null,null,-1),C=e("",26),x=e("",15);function I(f,q,N,V,k,v){const a=n("Image");return p(),l("div",null,[i,o(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/77/00/CgpOIF5xmoGAUTfzAABPx3pECpY054.png"}),r(),c,o(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/77/01/CgpOIF5xmxeANVsbAAArVXlsN5E454.png"}),r(),b,g,h,d,u,A,m,o(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/77/00/CgpOIF5xmoKAEPAGAABYbCCx_OI186.png"}),r(),P,S,T,o(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/77/00/Cgq2xl5xmoKAdBzdAAB1algcLv0278.png"}),r(),C,o(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/77/02/Cgq2xl5xm_GASo6gAAChFHBVYTw388.png"}),r(),x])}const O=s(_,[["render",I]]);export{D as __pageData,O as default};
