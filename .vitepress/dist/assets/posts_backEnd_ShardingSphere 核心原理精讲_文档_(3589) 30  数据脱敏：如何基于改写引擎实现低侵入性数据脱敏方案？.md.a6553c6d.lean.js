import{_ as o,j as e,o as t,g as r,k as l,h as n,s,Q as p}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"数据脱敏模块整体架构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3589) 30  数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3589) 30  数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3589) 30  数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？.md"},E=s("p",null,[n("今天，我们讨论 ShardingSphere 中的数据脱敏模块。通过在 "),s("strong",null,'"10 | 数据脱敏：如何确保敏感数据的安全访问？"'),n(" 课时中的介绍，我们知道 ShardingSphere 提供了一套自动的数据加解密机制来实现透明化的数据脱敏。")],-1),y=s("h3",{id:"数据脱敏模块整体架构",tabindex:"-1"},[n("数据脱敏模块整体架构 "),s("a",{class:"header-anchor",href:"#数据脱敏模块整体架构","aria-label":'Permalink to "数据脱敏模块整体架构"'},"​")],-1),i=s("p",null,"与普通的编程模式一样，对于数据脱敏而言，我们同样先获取一个 DataSource 作为整个流程的入口，当然这里获取的不是一个普通的 DataSource，而是一个专门针对数据脱敏的 EncryptDataSource。对于数据脱敏模块，我们的思路还是从上到下，从 EncryptDataSource 开始进入到 ShardingSphere 数据脱敏的世界中。",-1),g=s("p",null,"同时，我们这次讲解数据脱敏模块不是零基础，因为在前面介绍 ShardingDataSource、ShardingConnection、ShardingStatement 等内容时，已经对整个 SQL 执行流程的抽象过程做了全面介绍，所涉及的很多内容对于数据脱敏模块而言也都是适用的。",-1),u=s("p",null,"让我们结合下图来做一些回顾：",-1),F=p("",14),d=p("",56),m=p("",32);function C(S,A,h,D,v,b){const a=e("Image");return t(),r("div",null,[E,y,i,g,u,l(a,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/57/0A/CgqCHl9sS86ASFTbAAB-yuAnnt4924.png"}),F,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/50/A8/CgqCHl9jFdmATyqTAAC9ufzW9Ag886.png"}),n(),d,l(a,{alt:"image (10).png",src:"https://s0.lgstatic.com/i/image/M00/57/0A/CgqCHl9sS-OAJsx-AACWGMkVQXg279.png"}),m])}const R=o(c,[["render",C]]);export{f as __pageData,R as default};
