import{_ as l,j as e,o as t,g as c,k as n,h as a,Q as o,s as p}from"./chunks/framework.e0c66c3f.js";const B=JSON.parse('{"title":"Spring Data MongoDB Reactive 技术栈 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(6997) 15  MongoDB 集成：如何在响应式应用中访问 NoSQL 数据库？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(6997) 15  MongoDB 集成：如何在响应式应用中访问 NoSQL 数据库？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/Spring 响应式编程实战_文档/(6997) 15  MongoDB 集成：如何在响应式应用中访问 NoSQL 数据库？.md"},E=o(`<p>上一讲开始，我们进入了响应式数据访问这一模块的学习，并且引出了 Spring 家族中专门用于实现数据访问的 Spring Data 框架及其响应式版本。我们知道 Spring Data 支持多种响应式 Repository 用来构建全栈响应式编程模型，而 MongoDB 就是其中具有代表性的一种数据存储库。今天，我就将结合案例来给出 Reactive MongoDB 的使用方式。</p><h3 id="spring-data-mongodb-reactive-技术栈" tabindex="-1">Spring Data MongoDB Reactive 技术栈 <a class="header-anchor" href="#spring-data-mongodb-reactive-技术栈" aria-label="Permalink to &quot;Spring Data MongoDB Reactive 技术栈&quot;">​</a></h3><p>在介绍 Spring Data MongoDB Reactive 的使用方式之前，我们先来简要分析它的基本组成结构和所使用的技术栈。</p><p>显然，ReactiveMongoRepository 是开发人员所需要面对的第一个核心组件，你已经在上一讲中看到过它的定义，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveMongoRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">ReactiveSortingRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ID</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">ReactiveQueryByExampleExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Mono&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(S </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Flux&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(Iterable&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Flux&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(Publisher&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">entities</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Flux&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Flux&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">example</span><span style="color:#E1E4E8;">, Sort </span><span style="color:#FFAB70;">sort</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveMongoRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">ReactiveSortingRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ID</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">ReactiveQueryByExampleExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Mono&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(S </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Flux&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(Iterable&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Flux&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(Publisher&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">entities</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Flux&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Flux&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">example</span><span style="color:#24292E;">, Sort </span><span style="color:#E36209;">sort</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Spring Data MongoDB Reactive 模块只有一个 ReactiveMongoRepository 接口的实现类，即 SimpleReactiveMongoRepository 类。它为 ReactiveMongoRepository 的所有方法提供实现，并使用 ReactiveMongoOperations 接口处理针对 MongoDB 的数据访问操作。例如在 SimpleReactiveMongoRepository 类中有一个 findAllById 方法，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Flux</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findAllById</span><span style="color:#E1E4E8;">(Publisher</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ID</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ids) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">notNull</span><span style="color:#E1E4E8;">(ids, </span><span style="color:#9ECBFF;">&quot;The given Publisher of Id&#39;s must not be null!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(ids).</span><span style="color:#B392F0;">buffer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">findAllById);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Flux</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findAllById</span><span style="color:#24292E;">(Publisher</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ID</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ids) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">notNull</span><span style="color:#24292E;">(ids, </span><span style="color:#032F62;">&quot;The given Publisher of Id&#39;s must not be null!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Flux.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(ids).</span><span style="color:#6F42C1;">buffer</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">findAllById);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>可以看到这个方法使用 buffer 操作符收集所有 ids，然后使用 findAllById(Iterable <code>&lt;ID&gt;</code> ids) 重载方法创建一个请求。该方法反过来构建 Query 对象并调用 findAll(Query query) 方法，这时候触发 ReactiveMongoOperations 实例的 mongoOperations.find (query,...) 方法。</p><p>而 ReactiveMongoOperations 接口的实现类就是 ReactiveMongoTemplate 类，在这个模板工具类中，基于 MongoDB 提供的 Java 驱动程序完成对数据库的访问。我们在 ReactiveMongoTemplate 类所引用的包结构中可以看到这些驱动程序的客户端组件，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.mongodb.client.model.UpdateOptions;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.mongodb.client.result.UpdateResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.mongodb.reactivestreams.client.MongoClient;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.mongodb.reactivestreams.client.MongoCollection;</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.mongodb.client.model.UpdateOptions;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.mongodb.client.result.UpdateResult;</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.mongodb.reactivestreams.client.MongoClient;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.mongodb.reactivestreams.client.MongoCollection;</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p>Spring Data 中的响应式 MongoDB 连接基于 MongoDB 响应式流 Java 驱动程序（mongo-java-driver-reactivestreams）构建。该驱动程序提供具有非阻塞背压的异步流处理。另一方面，响应式驱动程序构建在 MongoDB 异步 Java 驱动程序（mongo-java-driver-async）之上。这个异步驱动程序是低级别的，并且具有基于回调的 API，因此它不像更高级别的响应式流驱动程序那样易于使用。下图展示了 Spring Data 中整个响应式 MongoDB 的技术栈。</p>`,11),y=p("p",null,"Spring Data MongoDB Reactive 技术栈",-1),i=p("p",null,"而下图展示了基于 Maven 依赖所找到的对应的组件库。",-1),g=o(`<p>Spring Data MongoDB Reactive 中的组件库</p><h3 id="应用-reactive-mongodb" tabindex="-1">应用 Reactive MongoDB <a class="header-anchor" href="#应用-reactive-mongodb" aria-label="Permalink to &quot;应用 Reactive MongoDB&quot;">​</a></h3><p>接下来，我要介绍使用 Spring Data MongoDB Reactive 进行系统开发的具体过程，将从开发环境的准备、Repository 的创建、数据的初始化以及与 Service 层之间的集成等几个步骤为你介绍。</p><p>首先要说的是需要初始化运行环境。</p><h4 id="初始化-reactive-mongodb-运行环境" tabindex="-1">初始化 Reactive MongoDB 运行环境 <a class="header-anchor" href="#初始化-reactive-mongodb-运行环境" aria-label="Permalink to &quot;初始化 Reactive MongoDB 运行环境&quot;">​</a></h4><p>我们需要在 pom 文件中添加 spring-boot-starter-data-mongodb-reactive 依赖，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">org.springframework.boot</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">boot</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">starter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">mongodb</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">reactive</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">org.springframework.boot</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">boot</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">starter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">mongodb</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">reactive</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>然后我们通过 Maven 来查看组件依赖关系可以得到如下所示的组件依赖图。</p>`,8),u=o(`<p>spring-boot-starter-data-mongodb-reactive 组件依赖图</p><p>可以看到 spring-boot-starter-data-mongodb-reactive 组件同时依赖于 spring-data-mongodb、mongodb-driver-reactivestreams 以及 reactor-core 等组件，这点与前面介绍的技术栈是完全一致的。</p><p>为了集成 Reactive MongoDB，在 Spring Boot 应用程序中，我们可以在它的启动类上添加 @EnableReactiveMongoRepositories 注解，包含该注解的 Spring Boot 启动类如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableReactiveMongoRepositories</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringReactiveMongodbApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(SpringReactiveMongodbApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">	.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableReactiveMongoRepositories</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringReactiveMongodbApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(SpringReactiveMongodbApplication</span></span>
<span class="line"><span style="color:#24292E;">	.class, args);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>事实上，默认情况下我们一般不需要在 Spring Boot 启动类中手工添加 @EnableReactiveMongoRepositories 注解。因为当添加 spring-boot-starter-data-mongodb-reactive 组件到 classpath 时，MongoReactiveRepositoriesAutoConfiguration 配置类会自动创建与 MongoDB 交互的核心类。MongoReactiveRepositoriesAutoConfiguration 类的定义如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">({ MongoClient.class, ReactiveMongoRepository.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">({ ReactiveMongoRepositoryFactoryBean.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ReactiveMongoRepositoryConfigurationExtension.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.data.mongodb.reactive-repositories&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;enabled&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">havingValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(MongoReactiveRepositoriesAutoConfigureRegistrar.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureAfter</span><span style="color:#E1E4E8;">(MongoReactiveDataAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MongoReactiveRepositoriesAutoConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">({ MongoClient.class, ReactiveMongoRepository.class })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">({ ReactiveMongoRepositoryFactoryBean.class,</span></span>
<span class="line"><span style="color:#24292E;">      ReactiveMongoRepositoryConfigurationExtension.class })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.data.mongodb.reactive-repositories&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;enabled&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">havingValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(MongoReactiveRepositoriesAutoConfigureRegistrar.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureAfter</span><span style="color:#24292E;">(MongoReactiveDataAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MongoReactiveRepositoriesAutoConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里引入了 MongoReactiveRepositoriesAutoConfigureRegistrar 类，如果 MongoDB 和 Spring Data 已经在 classpath 上，Spring Boot 会通过 MongoReactiveRepositoriesAutoConfigureRegistrar 类自动帮我们完成配置。MongoReactiveRepositoriesAutoConfigureRegistrar 类的定义如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MongoReactiveRepositoriesAutoConfigureRegistrar</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractRepositoryConfigurationSourceSupport</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Annotation</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> EnableReactiveMongoRepositories.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getConfiguration</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> EnableReactiveMongoRepositoriesConfiguration.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> RepositoryConfigurationExtension </span><span style="color:#B392F0;">getRepositoryConfigurationExtension</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveMongoRepositoryConfigurationExtension</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">EnableReactiveMongoRepositories</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnableReactiveMongoRepositoriesConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MongoReactiveRepositoriesAutoConfigureRegistrar</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractRepositoryConfigurationSourceSupport</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Annotation</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> EnableReactiveMongoRepositories.class;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getConfiguration</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> EnableReactiveMongoRepositoriesConfiguration.class;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> RepositoryConfigurationExtension </span><span style="color:#6F42C1;">getRepositoryConfigurationExtension</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveMongoRepositoryConfigurationExtension</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">EnableReactiveMongoRepositories</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnableReactiveMongoRepositoriesConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们在最后部分看到了熟悉的 @EnableReactiveMongoRepositories 注解。显然，如果我们使用 Spring Boot 的默认配置，就不需要刻意在启动类上添加 @EnableReactiveMongoRepositories 注解。但如果希望修改 MongoDB 的配置行为，这个注解就可以派上用场。以下代码演示了 @EnableReactiveMongoRepositories 注解的使用方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableReactiveMongoRepositories</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackageClasses</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	OrderRepository.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MongoConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractReactiveMongoConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MongoClient </span><span style="color:#B392F0;">reactiveMongoClient</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> MongoClients.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getDatabaseName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;order_test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ReactiveMongoTemplate </span><span style="color:#B392F0;">mongoTemplate</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveMongoTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">mongoClient</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">getDatabaseName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableReactiveMongoRepositories</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackageClasses</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	OrderRepository.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MongoConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractReactiveMongoConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MongoClient </span><span style="color:#6F42C1;">reactiveMongoClient</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> MongoClients.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDatabaseName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;order_test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ReactiveMongoTemplate </span><span style="color:#6F42C1;">mongoTemplate</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveMongoTemplate</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">mongoClient</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">getDatabaseName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码中，我们通过 @EnableReactiveMongoRepositories 注解指定了&quot;basePackageClasses&quot;为OrderRepository，同时修改所要访问的数据库名为&quot;order_test&quot;，这样就相当于对 Repository 类以及数据库的名称做了人为的指定，而在默认情况下系统会自动扫描 Repository 类，并默认使用领域实体的名称作为数据库名。</p><h4 id="创建-reactive-mongodb-repository" tabindex="-1">创建 Reactive MongoDB Repository <a class="header-anchor" href="#创建-reactive-mongodb-repository" aria-label="Permalink to &quot;创建 Reactive MongoDB Repository&quot;">​</a></h4><p>接下来，我们来创建一个 Reactive MongoDB Repository。在这里，我们定义了一个领域实体 Account，并使用 @Document 和 @Id 等 MongoDB 相关的注解。Account 实体代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Document</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String accountCode;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String accountName;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Document</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String accountCode;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String accountName;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过上一讲介绍的三种方式中的的任何一种来创建 Reactive MongoDB Repository。我们可以定义继承自 ReactiveMongoRepository 接口的 AccountReactiveMongoRepository 接口，同时该接口还继承了 ReactiveQueryByExampleExecutor 接口。</p><p>AccountReactiveMongoRepository 接口定义的代码如下所示，可以看到我们完全基于 ReactiveMongoRepository 和 ReactiveQueryByExampleExecutor 接口的默认方法来实现业务功能。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountReactiveMongoRepository</span></span>
<span class="line"><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveMongoRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;, </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">ReactiveQueryByExampleExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountReactiveMongoRepository</span></span>
<span class="line"><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveMongoRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">ReactiveQueryByExampleExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="使用-commandlinerunner-初始化-mongodb-数据" tabindex="-1">使用 CommandLineRunner 初始化 MongoDB 数据 <a class="header-anchor" href="#使用-commandlinerunner-初始化-mongodb-数据" aria-label="Permalink to &quot;使用 CommandLineRunner 初始化 MongoDB 数据&quot;">​</a></h4><p>对于 MongoDB 等数据库而言，我们通常需要执行一些数据初始化操作。接下来我将介绍如何通过 Spring Boot 提供的 CommandLineRunner 来实现这一常见场景。</p><p>很多时候我们希望在系统运行之前执行一些前置操作，为了实现这样的需求，Spring Boot 提供了一个方案，即 CommandLineRunner 接口，定义如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommandLineRunner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(String... </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommandLineRunner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(String... </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Spring Boot 应用程序在启动后，会遍历所有已定义的 CommandLineRunner 接口的实例并运行它们的 run() 方法。</p><p>此外，正如我在前面所介绍的，在 MongoDB 客户端组件中存在一个 MongoOperations 工具类。相对于 Repository 接口而言，MongoOperations 提供了更多方法，也更接近于 MongoDB 的原生态语言。基于 CommandLineRunner 和 MongoOperations，我们就可以对 MongoDB 进行数据初始化，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InitDatabase</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    CommandLineRunner </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(MongoOperations </span><span style="color:#FFAB70;">operations</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           operations.</span><span style="color:#B392F0;">dropCollection</span><span style="color:#E1E4E8;">(Account.class);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           operations.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;account1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;jianxiang1&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">           operations.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;account2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;jianxiang&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           operations.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Account.class).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                   account </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                       System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                   );}</span></span>
<span class="line"><span style="color:#E1E4E8;">           );</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InitDatabase</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    CommandLineRunner </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(MongoOperations </span><span style="color:#E36209;">operations</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           operations.</span><span style="color:#6F42C1;">dropCollection</span><span style="color:#24292E;">(Account.class);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           operations.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(),</span><span style="color:#032F62;">&quot;account1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jianxiang1&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">           operations.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(),</span><span style="color:#032F62;">&quot;account2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jianxiang&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           operations.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Account.class).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                   account </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                   );}</span></span>
<span class="line"><span style="color:#24292E;">           );</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个例子中，我们先通过 MongoOperations 的 dropCollection() 方法清除整个 Account 数据库中的数据，然后往该数据库中添加了两条记录，最后我们通过 findAll() 方法执行查询操作，获取新插入的两条数据并打印在控制台上。</p><h4 id="在-service-层中调用-reactive-repository" tabindex="-1">在 Service 层中调用 Reactive Repository <a class="header-anchor" href="#在-service-层中调用-reactive-repository" aria-label="Permalink to &quot;在 Service 层中调用 Reactive Repository&quot;">​</a></h4><p>完成 AccountReactiveMongoRepository 并初始化数据之后，我们就可以创建 Service 层组件来调用 AccountReactiveMongoRepository。这里我们创建了 AccountService 类作为 Service 层组件，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountService</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AccountReactiveMongoRepository accountRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(account);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(id).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;findOneAccount&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Flux&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;findAllAccounts&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">deleteById</span><span style="color:#E1E4E8;">(id).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;deleteOneAccount&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Flux&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountsByAccountName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Account account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      account.</span><span style="color:#B392F0;">setAccountName</span><span style="color:#E1E4E8;">(accountName);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      ExampleMatcher matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExampleMatcher.</span><span style="color:#B392F0;">matching</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">withIgnoreCase</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">withMatcher</span><span style="color:#E1E4E8;">(accountName, GenericPropertyMatcher.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(StringMatcher.STARTING))</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">withIncludeNullValues</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      Example&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; example </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Example.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(account, matcher);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      Flux&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; accounts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(example).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountsByAccountName&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accounts;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountService</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AccountReactiveMongoRepository accountRepository;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(account);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(id).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;findOneAccount&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Flux&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;findAllAccounts&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">deleteById</span><span style="color:#24292E;">(id).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;deleteOneAccount&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Flux&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountsByAccountName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      Account account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      account.</span><span style="color:#6F42C1;">setAccountName</span><span style="color:#24292E;">(accountName);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      ExampleMatcher matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExampleMatcher.</span><span style="color:#6F42C1;">matching</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">withIgnoreCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">withMatcher</span><span style="color:#24292E;">(accountName, GenericPropertyMatcher.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(StringMatcher.STARTING))</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">withIncludeNullValues</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      Example&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; example </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Example.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(account, matcher);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      Flux&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; accounts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(example).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountsByAccountName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accounts;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AccountService 类中的 save()、findOne()、findAll() 和 delete() 方法都来自 ReactiveMongoRepository 接口，而最后的 findByAccountName() 方法则使用了 ReactiveQueryByExampleExecutor 接口所提供的 QueryByExample 机制。</p><p>QueryByExample 可以翻译成按示例查询，是一种用户友好的查询技术。它允许动态创建查询，并且不需要编写包含字段名称的查询方法。实际上，QueryByExample 不需要使用特定的数据库查询语言来编写查询语句。从组成结构上讲，QueryByExample 包括 Probe、ExampleMatcher 和 Example 这三个基本组件。其中 Probe 包含对应字段的实例对象；ExampleMatcher 携带有关如何匹配特定字段的详细信息，相当于匹配条件；而 Example 则由 Probe 和 ExampleMatcher 组成，用于构建具体的查询操作。</p><p>在上述示例代码中，我们首先构建了一个 ExampleMatcher 用于初始化匹配规则，然后通过传入一个 Account 对象实例和 ExampleMatcher 实例构建了一个 Example 对象，最后通过 ReactiveQueryByExampleExecutor 接口中的 findAll() 方法实现了 QueryByExample 机制。</p><p>同时，你也应该注意到，在 AccountService 的 findOne()、findAll()、delete() 以及 findByAccountName() 这四个方法的最后都调用了 log() 方法，该方法使用了 Reactor 框架中的日志操作符，我们在&quot;08 | Reactor 操作符（下）：如何多样化裁剪响应式流&quot;中有详细介绍。</p><p>通过添加 log() 方法，在执行这些数据操作时就会获取 Reactor 框架中对数据的详细操作日志信息。在这个示例中，我们启动服务并执行这四个方法，会在控制台中看到对应的日志。其中一部分日志展示了服务启动时通过 CommandLineRunner 插入初始化数据到数据库的过程，另一部分则分别针对各个添加了 log() 方法的操作打印出数据流的执行效果。在 Service 层通过 log() 方法添加日志是一种常见的开发技巧，你可以自己做一些尝试。</p><h3 id="案例集成-构建基于-mongodb-的数据访问层" tabindex="-1">案例集成：构建基于 MongoDB 的数据访问层 <a class="header-anchor" href="#案例集成-构建基于-mongodb-的数据访问层" aria-label="Permalink to &quot;案例集成：构建基于 MongoDB 的数据访问层&quot;">​</a></h3><p>在介绍完如何使用 Spring Data MongoDB Reactive 构建基于 MongoDB 的数据访问组件之后，让我们来到 ReactiveSpringCSS 案例中。针对案例中的数据访问场景，本讲所介绍的相关技术都可以直接进行应用。</p><p>事实上，在前面的介绍中，我们已经构建了 account-service 中的数据访问层，而其他两个服务中的数据访问层也类似，这里就不再细说了，你可以参考放在 Github 上的案例代码进行学习。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>MongoDB 是一款主流的 NoSQL 数据库，其提供了实现响应式流的驱动程序，因此非常适合作为响应式系统中的持久化数据库。而 Spring 家族中的 Spring Data MongoDB Reactive 组件则提供了以响应式流的方法访问 MongoDB 的高效开发模式，本讲结合案例对这一组件的使用方式进行了详细的讨论。</p><p>这里给你留一道思考题：在使用 Spring Data MongoDB Reactive 时，针对查询操作可以使用哪些高效的实现方法？</p><p>在今天内容的基础上，下一讲我们将基于 Spring Data 框架中的 Spring Data Redis 组件来访问缓存数据库 Redis，并同样结合 ReactiveSpringCSS 案例完成对现有实现方式的重构。</p><blockquote><p>点击链接，获取课程相关代码 ↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,41);function d(F,A,v,D,R,m){const s=e("Image");return t(),c("div",null,[E,n(s,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/38/5F/Cgp9HWB5NlyAUZ8vAAEVEX4GDg4227.png"}),a(),y,i,n(s,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M01/38/68/CioPOWB5NmeAMPT_AAa3JDFhfRw228.png"}),a(),g,n(s,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M01/38/68/CioPOWB5NnOAFoIqAAhDv7J-DwA202.png"}),a(),u])}const b=l(r,[["render",d]]);export{B as __pageData,b as default};
