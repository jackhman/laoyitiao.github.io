import{_ as o,j as l,o as p,g as e,k as c,h as n,Q as t,s}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"22测试集成：响应式Web应用程序如何进行测试？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(7004) 22  测试集成：响应式 Web 应用程序如何进行测试？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(7004) 22  测试集成：响应式 Web 应用程序如何进行测试？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Spring 响应式编程实战_文档/(7004) 22  测试集成：响应式 Web 应用程序如何进行测试？.md"},E=t(`<h1 id="_22测试集成-响应式web应用程序如何进行测试" tabindex="-1">22测试集成：响应式Web应用程序如何进行测试？ <a class="header-anchor" href="#_22测试集成-响应式web应用程序如何进行测试" aria-label="Permalink to &quot;22测试集成：响应式Web应用程序如何进行测试？&quot;">​</a></h1><p>上一讲，我们探讨了针对响应式系统的测试解决方案，也介绍了测试 Reactor 响应式流的系统方法。那么这一讲的内容仍然聚焦于此，我们来看看如何测试 Web 三层架构中的各层组件，即 Repository 层、Service 层和 Controller 层。</p><p>与测试单纯的 Reactor 编程组件不同，Web 应用程序不同层的组件之间存在自上而下的依赖关系。因此，我们将从 Repository 层开始自下而上来开展测试工作，并将对这些组件的测试使用不同的方案和技术。</p><h3 id="测试响应式-repository-层组件" tabindex="-1">测试响应式 Repository 层组件 <a class="header-anchor" href="#测试响应式-repository-层组件" aria-label="Permalink to &quot;测试响应式 Repository 层组件&quot;">​</a></h3><p>在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=753#/detail/pc?id=6997&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">15 | MongoDB 集成：如何在响应式应用中访问 NoSQL 数据库</a>&quot;中，我完整地介绍了如何构建响应式数据访问层组件，并向你演示了 MongoDB 这款主流的响应式 NoSQL 数据库的使用方法。而这一讲我们先来聊聊如何对响应式数据访问层组件开展测试工作，同样将基于 MongoDB 来设计并执行测试用例。</p><p>与传统的关系型数据库一样，MongoDB 的测试也有两种主流的方法，一种是基于内置的嵌入式数据库，一种是基于真实的数据库。我们分别来看一下。</p><h4 id="测试内嵌式-mongodb" tabindex="-1">测试内嵌式 MongoDB <a class="header-anchor" href="#测试内嵌式-mongodb" aria-label="Permalink to &quot;测试内嵌式 MongoDB&quot;">​</a></h4><p>测试内嵌式 MongoDB 需要引入上一讲提到的 flapdoodle，这是一个内嵌式 MongoDB 数据库，与关系型数据库中所使用的 H2 内嵌式数据库类似，flapdoodle 允许我们在不使用真实 MongoDB 数据库的情况下编写测试用例并执行测试。</p><p>首先，在 Maven 中引入 flapdoodle 依赖的方法如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;de.flapdoodle.embed&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;de.flapdoodle.embed.mongo&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;de.flapdoodle.embed&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;de.flapdoodle.embed.mongo&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>想要测试 MongoDB，就需要引入一个新的测试注解，即 @DataMongoTest。因为 @DataMongoTest 注解会使用测试配置自动创建与 MongoDB 的连接以及 ReactiveMongoTemplate 工具类，它默认使用的就是基于 flapdoodle 的内嵌式 MongoDB 实例。</p><p>接下来，我们对 ReactiveSpringCSS 案例中所实现的 ReactiveAccountRepository 进行测试，使用 Account 作为领域对象。ReactiveAccountRepository 封装了对 MongoDB 的各种操作，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveAccountRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ReactiveMongoRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">ReactiveQueryByExampleExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAccountByAccountName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveAccountRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ReactiveMongoRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">ReactiveQueryByExampleExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAccountByAccountName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在我们编写测试类 EmbeddedAccountRepositoryTest，测试用例代码如下所示，@DataMongoTest 注解为我们自动嵌入了 flapdoodle 数据库。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataMongoTest</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EmbeddedAccountRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveAccountRepository repository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveMongoOperations operations;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Before</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">dropCollection</span><span style="color:#E1E4E8;">(Account.class);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountCode2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountName2&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Account.class).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">               account </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">               );}</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testGetAccountByAccountName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAccountByAccountName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        StepVerifier.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(account)</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">expectNextMatches</span><span style="color:#E1E4E8;">(results </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(results.</span><span style="color:#B392F0;">getAccountCode</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(results.</span><span style="color:#B392F0;">getAccountName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataMongoTest</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EmbeddedAccountRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    ReactiveAccountRepository repository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    ReactiveMongoOperations operations;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Before</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">dropCollection</span><span style="color:#24292E;">(Account.class);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountCode2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountName2&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Account.class).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">               account </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">               );}</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetAccountByAccountName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAccountByAccountName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        StepVerifier.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(account)</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">expectNextMatches</span><span style="color:#24292E;">(results </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(results.</span><span style="color:#6F42C1;">getAccountCode</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(results.</span><span style="color:#6F42C1;">getAccountName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到上述代码实际上是由两个部分组成，首先使用 ReactiveMongoOperations 进行数据的初始化操作，你同样已经在第 15 讲中看到过类似的操作。然后，我们调用 ReactiveAccountRepository 中的 findAccountByAccountName() 方法获取数据，并通过 StepVerifier 工具类执行测试，这里使用了 expectNextMatches() 方法来执行断言。</p><p>以上测试用例的编写和执行都比较简单，为了验证 @DataMongoTest 注解是否生效以及 flapdoodle 数据库中具体生成的数据，我们有必要对测试用例执行过程中产生的日志进行分析，相关日志如下所示（为了方便查看，我只选取了日志中的一部分内容）。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">	[localhost:63506] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=localhost:63506, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 2, 2]}, minWireVersion=0, maxWireVersion=4, maxDocumentSize=16777216, roundTripTimeNanos=1720260}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 [localhost:63506] org.mongodb.driver.cluster               : Discovered cluster type of STANDALONE</span></span>
<span class="line"><span style="color:#E1E4E8;">	[main] c.t.p. EmbeddedAccountRepositoryTest: Started EmbeddedAccountRepositoryTestin 16.732 seconds (JVM running for 19.935)</span></span>
<span class="line"><span style="color:#E1E4E8;">	 [Thread-6] o.s.b.a.mongo.embedded.EmbeddedMongo     : 2018-06-28T11:58:18.870+0800 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:63520 #3 (3 connections now open)</span></span>
<span class="line"><span style="color:#E1E4E8;">	 [main] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:3, serverValue:3}] to localhost:63506</span></span>
<span class="line"><span style="color:#E1E4E8;">	 [Thread-6] o.s.b.a.mongo.embedded.EmbeddedMongo     : 2018-06-28T11:58:18.898+0800 I COMMAND  [conn3] CMD: drop test.account</span></span>
<span class="line"><span style="color:#E1E4E8;">	Account(id= Account1, accountCode= AccountCode1, accountName= AccountName1)</span></span>
<span class="line"><span style="color:#E1E4E8;">	Account(id= Account2, accountCode= AccountCode2, accountName= AccountName2)</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">	[localhost:63506] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=localhost:63506, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[3, 2, 2]}, minWireVersion=0, maxWireVersion=4, maxDocumentSize=16777216, roundTripTimeNanos=1720260}</span></span>
<span class="line"><span style="color:#24292E;">	 [localhost:63506] org.mongodb.driver.cluster               : Discovered cluster type of STANDALONE</span></span>
<span class="line"><span style="color:#24292E;">	[main] c.t.p. EmbeddedAccountRepositoryTest: Started EmbeddedAccountRepositoryTestin 16.732 seconds (JVM running for 19.935)</span></span>
<span class="line"><span style="color:#24292E;">	 [Thread-6] o.s.b.a.mongo.embedded.EmbeddedMongo     : 2018-06-28T11:58:18.870+0800 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:63520 #3 (3 connections now open)</span></span>
<span class="line"><span style="color:#24292E;">	 [main] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:3, serverValue:3}] to localhost:63506</span></span>
<span class="line"><span style="color:#24292E;">	 [Thread-6] o.s.b.a.mongo.embedded.EmbeddedMongo     : 2018-06-28T11:58:18.898+0800 I COMMAND  [conn3] CMD: drop test.account</span></span>
<span class="line"><span style="color:#24292E;">	Account(id= Account1, accountCode= AccountCode1, accountName= AccountName1)</span></span>
<span class="line"><span style="color:#24292E;">	Account(id= Account2, accountCode= AccountCode2, accountName= AccountName2)</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span></code></pre></div><p>从上述日志中，我们可以清晰看到 flapdoodle 正在运作，并且成功完成了数据初始化操作。</p><p>下面再来看看另一种，测试基于真实的 MongoDB 数据库。</p><h4 id="测试真实-mongodb" tabindex="-1">测试真实 MongoDB <a class="header-anchor" href="#测试真实-mongodb" aria-label="Permalink to &quot;测试真实 MongoDB&quot;">​</a></h4><p>测试真实 MongoDB 时我们不需要引入 flapdoodle 依赖，但同样需要使用 @ DataMongoTest注解。</p><p>接下来我们编写 LiveAccountRepositoryTest 类来对 ReactiveAccountRepository 进行测试，LiveAccountRepositoryTest 使用了真实的 MongoDB 数据库环境，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataMongoTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">excludeAutoConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EmbeddedMongoAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LiveAccountRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveAccountRepository repository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveMongoOperations operations;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Before</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">dropCollection</span><span style="color:#E1E4E8;">(Account.class);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountCode2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountName2&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        operations.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Account.class).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">               account </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">               );}</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testGetAccountByAccountName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> repository.</span><span style="color:#B392F0;">findAccountByAccountName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        StepVerifier.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(account)</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">expectNextMatches</span><span style="color:#E1E4E8;">(results </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(results.</span><span style="color:#B392F0;">getAccountCode</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(results.</span><span style="color:#B392F0;">getAccountName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataMongoTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">excludeAutoConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmbeddedMongoAutoConfiguration.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LiveAccountRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    ReactiveAccountRepository repository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    ReactiveMongoOperations operations;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Before</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">dropCollection</span><span style="color:#24292E;">(Account.class);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountCode2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountName2&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        operations.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Account.class).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">               account </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">               );}</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetAccountByAccountName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> repository.</span><span style="color:#6F42C1;">findAccountByAccountName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        StepVerifier.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(account)</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">expectNextMatches</span><span style="color:#24292E;">(results </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(results.</span><span style="color:#6F42C1;">getAccountCode</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(results.</span><span style="color:#6F42C1;">getAccountName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相较于 EmbeddedAccountRepositoryTest 类，LiveAccountRepositoryTest 类只有一个地方不同，即如下语句。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataMongoTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">excludeAutoConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	EmbeddedMongoAutoConfiguration.class)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataMongoTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">excludeAutoConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	EmbeddedMongoAutoConfiguration.class)</span></span></code></pre></div><p>事实上，@DataMongoTest 注解能使 Spring Boot 中默认使用真实 MongoDB 数据库的配置内容失效，而自动采用内嵌式的 flapdoodle 数据库。显然，为了测试真实环境的 MongoDB，我们需要把内嵌式的 flapdoodle 数据库转换到真实的 MongoDB 数据库。上述代码展示了这一场景下的具体做法，即使用 excludeAutoConfiguration 显式排除 EmbeddedMongoAutoConfiguration 配置。</p><h3 id="测试响应式-service-层组件" tabindex="-1">测试响应式 Service 层组件 <a class="header-anchor" href="#测试响应式-service-层组件" aria-label="Permalink to &quot;测试响应式 Service 层组件&quot;">​</a></h3><p>接下来，我们继续讨论三层架构中的中间层 Service 组件，并基于前面介绍的 ReactiveAccountRepository 类构建 Service 层组件并设计相应的测试用例。</p><p>我们首先需要完成 Service 层组件 AccountService 类的实现，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ReactiveAccountRepository accountRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(accountId).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountById&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountByAccountName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">findAccountByAccountName</span><span style="color:#E1E4E8;">(accountName).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountByAccountName&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ReactiveAccountRepository accountRepository;</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(accountId).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountById&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountByAccountName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">findAccountByAccountName</span><span style="color:#24292E;">(accountName).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountByAccountName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对 AccountService 测试的难点在于如何隔离 ReactiveAccountRepository，即我们希望在不进行真实数据访问操作的前提下仍然能够验证 AccountService 中方法的正确性。尽管 AccountService 中的 getAccountByAccountName() 方法逻辑非常简单，只是对 ReactiveAccountRepository 中方法的封装，但从集成测试的角度讲，<strong>确保组件之间的隔离性是一条基本测试原则</strong>。</p><p>以下代码演示了如何使用 Mock 机制完成对 ReactiveAccountRepository 的隔离。我们首先通过 @MockBean 注解注入 ReactiveAccountRepository，然后基于第三方 Mock 框架 mockito 提供的 given/willReturn 机制完成对 ReactiveAccountRepository 中 getAccountByAccountName() 方法的 Mock。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountServiceTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    AccountService service;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">MockBean</span></span>
<span class="line"><span style="color:#E1E4E8;">    ReactiveAccountRepository repository;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testGetAccountByAccountName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Account mockAccount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">(repository.</span><span style="color:#B392F0;">findAccountByAccountName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">willReturn</span><span style="color:#E1E4E8;">(Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(mockAccount));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> service.</span><span style="color:#B392F0;">getAccountByAccountName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        StepVerifier.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(account).</span><span style="color:#B392F0;">expectNextMatches</span><span style="color:#E1E4E8;">(results </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(results.</span><span style="color:#B392F0;">getAccountCode</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(results.</span><span style="color:#B392F0;">getAccountName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }).</span><span style="color:#B392F0;">verifyComplete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }   </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountServiceTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    AccountService service;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MockBean</span></span>
<span class="line"><span style="color:#24292E;">    ReactiveAccountRepository repository;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetAccountByAccountName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Account mockAccount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">(repository.</span><span style="color:#6F42C1;">findAccountByAccountName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">willReturn</span><span style="color:#24292E;">(Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(mockAccount));</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">getAccountByAccountName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        StepVerifier.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(account).</span><span style="color:#6F42C1;">expectNextMatches</span><span style="color:#24292E;">(results </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(results.</span><span style="color:#6F42C1;">getAccountCode</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(results.</span><span style="color:#6F42C1;">getAccountName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }).</span><span style="color:#6F42C1;">verifyComplete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在集成测试中，Mock 是一种常用策略。通过上述代码，你可以看到 Mock 的实现一般都会采用类似 mockito 的第三方框架，而具体 Mock 方法的行为则通过模拟的方式来实现。与使用 Stub 机制不同，对于某一个或一些被测试对象所依赖的测试方法而言，编写 Mock 相对简单，只需要模拟被使用的方法即可。</p><hr><h3 id="测试响应式-controller-层组件" tabindex="-1">测试响应式 Controller 层组件 <a class="header-anchor" href="#测试响应式-controller-层组件" aria-label="Permalink to &quot;测试响应式 Controller 层组件&quot;">​</a></h3><p>最后，我们再来讨论如何对位于最上层的 Controller 组件进行测试。我们同样基于它的下层组件 AccountService 来构建 AccountController，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;accounts&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AccountService accountService;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/{accountId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accountId&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> accountService.</span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> account;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;accountname/{accountName}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountByAccountName</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;accountName&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">accountName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> accountService.</span><span style="color:#B392F0;">getAccountByAccountName</span><span style="color:#E1E4E8;">(accountName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> account;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;accounts&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountService accountService;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/{accountId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accountId&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accountService.</span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(accountId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> account;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;accountname/{accountName}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountByAccountName</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;accountName&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">accountName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accountService.</span><span style="color:#6F42C1;">getAccountByAccountName</span><span style="color:#24292E;">(accountName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> account;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在测试 AccountController 类之前，我再给你介绍一个新的注解 @WebFluxTest，该注解是初始化测试 Controller 组件所必需的 WebFlux 基础设施。@WebFluxTest 注解的使用方法如下所示，这里我们构建了 AccountControllerTest 类来测试 AccountController。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">WebFluxTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">controllers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AccountController.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountControllerTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">	@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">	WebTestClient webClient;</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">WebFluxTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">controllers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AccountController.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountControllerTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">	WebTestClient webClient;</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>默认情况下，@WebFluxTest 注解会确保所有包含 @RestController 注解的 JavaBean 生成一个 Mock 的 Web 环境，但我们也可以指定想要使用的具体 Controller 类，例如上述代码中就显式指定了 AccountController 作为我们测试的具体目标类。</p><p>同时，@WebFluxTest 注解会自动注入 WebTestClient 工具类。WebTestClient 工具类专门用来测试 WebFlux 组件，在使用上无须启动完整的 HTTP 容器。WebTestClient 工具类提供的常见方法有下面几种。</p><ul><li><p>HTTP 请求方法：支持 get()、post() 等常见的 HTTP 方法构造测试请求，并使用 uri() 方法指定路由。</p></li><li><p>exchange() 方法：用于发起 HTTP 请求，返回一个 EntityExchangeResult。</p></li><li><p>expectStatus() 方法：用于验证返回状态，一般可以使用 isOk() 方法来验证是否返回 200 状态码。</p></li><li><p>expectBody() 方法：用于验证返回对象体是否为指定对象，并利用 returnResult() 方法获取对象。</p></li></ul><p>AccountControllerTest 类的完整代码如下所示，我把与测试相关的 import 语句也列在了这里，以便你了解各种工具类的由来。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.assertj.core.api.Assertions.assertThat;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.mockito.BDDMockito.given;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.mockito.Mockito.verify;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.mockito.Mockito.verifyNoMoreInteractions;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.Test;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.runner.RunWith;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.mock.mockito.MockBean;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.test.context.junit4.SpringRunner;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.test.web.reactive.server.EntityExchangeResult;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.test.web.reactive.server.WebTestClient;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.springcss.account.controller.AccountController;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.springcss.account.domain.Account;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.springcss.account.service.AccountService;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> reactor.core.publisher.Mono;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">WebFluxTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">controllers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AccountController.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountControllerTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    WebTestClient webClient;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">MockBean</span></span>
<span class="line"><span style="color:#E1E4E8;">    AccountService service;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testGetAccountById</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Account mockAccount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Account</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;AccountName1&quot;</span><span style="color:#E1E4E8;">);       </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">(service.</span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">willReturn</span><span style="color:#E1E4E8;">(Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(mockAccount));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        EntityExchangeResult&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webClient.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://localhost:8082/accounts/{accountId}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">expectStatus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#B392F0;">isOk</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">expectBody</span><span style="color:#E1E4E8;">(Account.class).</span><span style="color:#B392F0;">returnResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(service).</span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">verifyNoMoreInteractions</span><span style="color:#E1E4E8;">(service);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getResponseBody</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Account1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getResponseBody</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAccountCode</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AccountCode1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.assertj.core.api.Assertions.assertThat;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.mockito.BDDMockito.given;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.mockito.Mockito.verify;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.mockito.Mockito.verifyNoMoreInteractions;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.Test;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.runner.RunWith;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.mock.mockito.MockBean;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.test.context.junit4.SpringRunner;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.test.web.reactive.server.EntityExchangeResult;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.test.web.reactive.server.WebTestClient;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.springcss.account.controller.AccountController;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.springcss.account.domain.Account;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.springcss.account.service.AccountService;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> reactor.core.publisher.Mono;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">WebFluxTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">controllers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AccountController.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountControllerTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    WebTestClient webClient;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MockBean</span></span>
<span class="line"><span style="color:#24292E;">    AccountService service;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetAccountById</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Account mockAccount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Account</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;AccountName1&quot;</span><span style="color:#24292E;">);       </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">(service.</span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">willReturn</span><span style="color:#24292E;">(Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(mockAccount));</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        EntityExchangeResult&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webClient.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:8082/accounts/{accountId}&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">expectStatus</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">isOk</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">expectBody</span><span style="color:#24292E;">(Account.class).</span><span style="color:#6F42C1;">returnResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(service).</span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">verifyNoMoreInteractions</span><span style="color:#24292E;">(service);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getResponseBody</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Account1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getResponseBody</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAccountCode</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AccountCode1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中，我们首先通过 mockito 提供的 given/willReturn 机制完成对 AccountService 中相关方法的 Mock，然后通过 WebTestClient 工具类完成 HTTP 请求的发送和响应的解析。同时，你可以注意到，这里还使用了 mockito 中的 verify() 和 verifyNoMoreInteractions() 方法来验证 AccountService 在测试用例执行过程中的参与情况，这也是非常有用的一种实践技巧。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>关于响应式 Web 服务的测试，我们需要考虑分层思想，即从数据流层出发分别对基于响应式的 Repository 层、Service 层以及 Controller 层进行测试。在整个测试过程中，测试注解发挥了核心作用。下表罗列了使用到的主要测试注解及其描述：</p>`,49),y=s("p",null,"最后还是给你留一道思考题：在使用 Spring Boot 测试 Web 应用程序时，常见的测试注解你知道有哪些吗？",-1),i=s("p",null,"至此，测试组件就介绍完了，我们的课程也将告一段落，恭喜你坚持到了最后。在下一讲结束语中，我将对 Spring 中的响应式编程技术进行总结，并对它的后续发展进行展望。",-1),u=s("blockquote",null,[s("p",null,[n("点击链接，获取课程相关代码 ↓↓↓"),s("br"),s("a",{href:"https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git")])],-1);function A(F,d,g,C,m,B){const a=l("Image");return p(),e("div",null,[E,c(a,{alt:"图片7 (1).png",src:"https://s0.lgstatic.com/i/image6/M00/3C/2D/Cgp9HWCJAaOAXoy_AAGgduBgRr8791.png"}),n(),y,i,u])}const h=o(r,[["render",A]]);export{b as __pageData,h as default};
