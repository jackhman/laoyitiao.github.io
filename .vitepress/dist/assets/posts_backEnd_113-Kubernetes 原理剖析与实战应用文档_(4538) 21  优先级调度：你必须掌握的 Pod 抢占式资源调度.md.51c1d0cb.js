import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.d3daa342.js";const C=JSON.parse('{"title":"21优先级调度：你必须掌握的Pod抢占式资源调度","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4538) 21  优先级调度：你必须掌握的 Pod 抢占式资源调度.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4538) 21  优先级调度：你必须掌握的 Pod 抢占式资源调度.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4538) 21  优先级调度：你必须掌握的 Pod 抢占式资源调度.md"},o=l(`<h1 id="_21优先级调度-你必须掌握的pod抢占式资源调度" tabindex="-1">21优先级调度：你必须掌握的Pod抢占式资源调度 <a class="header-anchor" href="#_21优先级调度-你必须掌握的pod抢占式资源调度" aria-label="Permalink to &quot;21优先级调度：你必须掌握的Pod抢占式资源调度&quot;">​</a></h1><p>你好，我是正范。</p><p>随着我们在 Kubernetes 集群中部署越来越多的业务，势必要考虑集群的资源利用率问题。尤其是当集群资源比较紧张的时候，如果此时还要部署一些比较重要的关键业务，那么该如何去提前&quot;抢占&quot;集群资源，从而使得关键业务在集群中跑起来呢？</p><p>这里一个最常见的做法就是采用优先级方案。通过给 Pod 设置高优先级，让其比其他 Pod 显得更为重要，通过这种&quot;插队&quot;的方式优先获得调度器的调度。现在我们就来看看 Kubernetes 是如何定义这种优先级的。</p><h3 id="priorityclass" tabindex="-1">PriorityClass <a class="header-anchor" href="#priorityclass" aria-label="Permalink to &quot;PriorityClass&quot;">​</a></h3><p>Kubernetes 通过对象 PriorityClass 来定义上述优先级，具体怎么定义呢？我们可以通过之前说过的<code>kubectl create</code>命令来创建这个对象：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">scheduling.k8s.io/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">PriorityClass</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">high-priority</span></span>
<span class="line"><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000000</span></span>
<span class="line"><span style="color:#85E89D;">globalDefault</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;This priority class should be used for XYZ service pods only.&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">scheduling.k8s.io/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">PriorityClass</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">high-priority</span></span>
<span class="line"><span style="color:#22863A;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000000</span></span>
<span class="line"><span style="color:#22863A;">globalDefault</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#22863A;">description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;This priority class should be used for XYZ service pods only.&quot;</span></span></code></pre></div><p>这里我们创建了就是一个名为 high-priority 的 PriorityClass 定义，使用的 API 版本是 scheduling.k8s.io/v1。这个对象是个集群级别的定义，并不属于任何 namespace，可以被全局使用，即各个 namespace 中创建的 Pod 都能使用 PriorityClass。我们在定义这样一个 PriorityClass 对象的时候，名字不可以包含 system- 这个前缀。</p><p>关于这个数值的设置，有几点要说明。系统自定义了两个优先级值：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HighestUserDefinablePriority is the highest priority for user defined priority classes. Priority values larger than 1 billion are reserved for Kubernetes system use.</span></span>
<span class="line"><span style="color:#E1E4E8;">HighestUserDefinablePriority </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000000000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// SystemCriticalPriority is the beginning of the range of priority values for critical system components.</span></span>
<span class="line"><span style="color:#E1E4E8;">SystemCriticalPriority </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> HighestUserDefinablePriority</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HighestUserDefinablePriority is the highest priority for user defined priority classes. Priority values larger than 1 billion are reserved for Kubernetes system use.</span></span>
<span class="line"><span style="color:#24292E;">HighestUserDefinablePriority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000000000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// SystemCriticalPriority is the beginning of the range of priority values for critical system components.</span></span>
<span class="line"><span style="color:#24292E;">SystemCriticalPriority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> HighestUserDefinablePriority</span></span></code></pre></div><p>那么当你自己创建 PriorityClass 的时候，定义的优先级值是不能高于这里的 HighestUserDefinablePriority 的， 即 1000000000 （10 亿）。</p><p>Kubernetes 在初始化的时候就自带了两个 PriorityClasses，即 system-cluster-critical 和 system-node-critical，优先级值为 2000000000。 你可以通过下面的命令查看到这两个最高优先级的 PriorityClasse：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl get priorityclass</span></span>
<span class="line"><span style="color:#E1E4E8;">NAME                      VALUE        GLOBAL</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">DEFAULT   AGE</span></span>
<span class="line"><span style="color:#E1E4E8;">system</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cluster</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">critical   </span><span style="color:#79B8FF;">2000000000</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">59d</span></span>
<span class="line"><span style="color:#E1E4E8;">system</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">critical      </span><span style="color:#79B8FF;">2000001000</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">            </span><span style="color:#FDAEB7;font-style:italic;">59d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl get priorityclass</span></span>
<span class="line"><span style="color:#24292E;">NAME                      VALUE        GLOBAL</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">DEFAULT   AGE</span></span>
<span class="line"><span style="color:#24292E;">system</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cluster</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">critical   </span><span style="color:#005CC5;">2000000000</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">59d</span></span>
<span class="line"><span style="color:#24292E;">system</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">critical      </span><span style="color:#005CC5;">2000001000</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">            </span><span style="color:#B31D28;font-style:italic;">59d</span></span></code></pre></div><p>这是两个公共的优先级类，主要用来确保 Kubernetes 系统的关键组件或者关键插件总是能够优先被调度，比如 coredns 等。因为一旦这些关键组件、关键插件被驱逐，或者由于镜像需要升级，新建的 Pod 无法被调度，始终处于 Pending 的状态，这些都会导致整个集群异常，甚至停止工作。所以对于这些关键的组件，我们务必保证其优先级是最高的，这样才会被最先调度。我们可以来参考下 coredns 的做法，以下是截取的一部分配置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apps/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">coredns</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">kube-system</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">priorityClassName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">system-cluster-critical</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apps/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deployment</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">coredns</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">kube-system</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">priorityClassName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">system-cluster-critical</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#22863A;">status</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>下面我们来看看如何在 Pod 中使用 PriorityClass：通过 spec.priorityClassName 即可指定要使用的 PriorityClass：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">priorityClassName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">high-priority</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">priorityClassName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">high-priority</span></span></code></pre></div><p>通过<code>kubectl create</code>创建好该 Pod 后，我们查看详情可以看到 PriorityClass 的名字和优先级数值都被写入了 Pod 中：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">$ kubectl describe pod nginx</span></span>
<span class="line"><span style="color:#85E89D;">Name</span><span style="color:#E1E4E8;">:                 </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#85E89D;">Namespace</span><span style="color:#E1E4E8;">:            </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#85E89D;">Priority</span><span style="color:#E1E4E8;">:             </span><span style="color:#79B8FF;">1000000</span></span>
<span class="line"><span style="color:#85E89D;">Priority Class Name</span><span style="color:#E1E4E8;">:  </span><span style="color:#9ECBFF;">high-priority</span></span>
<span class="line"><span style="color:#B392F0;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">$ kubectl describe pod nginx</span></span>
<span class="line"><span style="color:#22863A;">Name</span><span style="color:#24292E;">:                 </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#22863A;">Namespace</span><span style="color:#24292E;">:            </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#22863A;">Priority</span><span style="color:#24292E;">:             </span><span style="color:#005CC5;">1000000</span></span>
<span class="line"><span style="color:#22863A;">Priority Class Name</span><span style="color:#24292E;">:  </span><span style="color:#032F62;">high-priority</span></span>
<span class="line"><span style="color:#6F42C1;">...</span></span></code></pre></div><p>注意，在使用的时候不允许自己去设置 spec.priority 的数值，我们只能通过 spec.priorityClassName 来设置优先级。现在，我们回过头再来观察下上面定义的这个 high-priority 的 PriorityClass 对象，里面有两个可选字段：globalDefault 和 description。</p><p>globalDefault 用来表明是否将该 PriorityClass 的数值作为默认值，并将其应用在所有未设置 priorityClassName 的 Pod 上。 既然是默认值，那么就意味着整个 Kubernetes 集群中只能存在一个 globalDefault 设为 true 的 PriorityClass 对象。</p><p>如果没有任何一个 PriorityClass 对象的 globalDefault 被设置为 true 的话，就意味着所有未设置 spec.priorityClassName 的 Pod 的优先级为 0。即便你新建了某个 PriorityClass 对象，并将其 globalDefault 设置为 true，那么也不不影响集群中的存量 Pod，只会对新建的 Pod 生效。</p><p>你可以在 description 字段中对该 PriorityClass 进行一些使用上的解释说明。</p><p>现在我们就来做个优先级抢占的测试，使用一个单节点的集群做演示，该节点的 CPU 为 2 核。先创建一个优先级值更小的名为 low-priority 的 PriorityClass，其 YAML 文件如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">scheduling.k8s.io/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">PriorityClass</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">low-priority</span></span>
<span class="line"><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#85E89D;">globalDefault</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">scheduling.k8s.io/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">PriorityClass</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">low-priority</span></span>
<span class="line"><span style="color:#22863A;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#22863A;">globalDefault</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>创建好了以后，通过<code>kubectl get</code>可以查看到创建的这两个 PriorityClass：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">priorityclass</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">system</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">                      </span><span style="color:#9ECBFF;">VALUE</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">GLOBAL-DEFAULT</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">high-priority</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">30</span><span style="color:#9ECBFF;">m</span></span>
<span class="line"><span style="color:#B392F0;">low-priority</span><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">8</span><span style="color:#9ECBFF;">m35s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">priorityclass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">system</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">                      </span><span style="color:#032F62;">VALUE</span><span style="color:#24292E;">        </span><span style="color:#032F62;">GLOBAL-DEFAULT</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">high-priority</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">30</span><span style="color:#032F62;">m</span></span>
<span class="line"><span style="color:#6F42C1;">low-priority</span><span style="color:#24292E;">              </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">8</span><span style="color:#032F62;">m35s</span></span></code></pre></div><p>现在我们分别使用这两个 PriorityClass 创建两个 Pod。先来创建一个使用 low-priority 作为优先级的 Pod，下面是其对应的 YAML 文件：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-low-pc</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">imagePullPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">IfNotPresent</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">requests</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1200m&quot;</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">#CPU需求设置较大</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1300m&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">priorityClassName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">low-priority</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">#使用低优先级</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-low-pc</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;"> - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">imagePullPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">IfNotPresent</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">requests</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1200m&quot;</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">#CPU需求设置较大</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1300m&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">priorityClassName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">low-priority</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">#使用低优先级</span></span></code></pre></div><p>这里我们指定了一个较大比重的 CPU 资源。我们假定集群中的节点为 2 核，把 Pod 需要的最低 CPU 需求设置为1200m，超过了 2核 CPU 总算力的一半。</p><p>同样我们使用 high-priority 作为其优先级创建一个 Pod，其对应的 YAML 文件如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-high-pc</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;"> - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">imagePullPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">IfNotPresent</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">requests</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1200m&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1300m&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">priorityClassName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">high-priority</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">#使用高优先级</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-high-pc</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;"> - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">imagePullPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">IfNotPresent</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">requests</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;64Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1200m&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;128Mi&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1300m&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#22863A;">priorityClassName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">high-priority</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">#使用高优先级</span></span></code></pre></div><p>如此一来，这两个 Pod 无法被调度到同一个只有 2 核 CPU 的节点上的，因为 2 个 Pod 加起来的 CPU 请求总量超过了 2 核。</p><p>我们可以先创建低优先级 Pod 命名为 nginx-low-pc ，可以看到该 Pod 已经成功运行，并消耗了超过一半的 CPU：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pods</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">nginx-low-pc</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">/1</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Running</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">22</span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx-low-pc</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Allocated</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">resources:</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#B392F0;">Total</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">limits</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">may</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">percent,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i.e.,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">overcommitted.</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Resource</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Requests</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">Limits</span></span>
<span class="line"><span style="color:#B392F0;">--------</span><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">--------</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">------</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cpu</span><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">1220</span><span style="color:#9ECBFF;">m</span><span style="color:#E1E4E8;"> (61%)  1300m (</span><span style="color:#B392F0;">65%</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">#Node的CPU使用率已经过半</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">memory</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">64</span><span style="color:#9ECBFF;">Mi</span><span style="color:#E1E4E8;"> (1%)    128Mi (</span><span style="color:#B392F0;">3%</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ephemeral-storage</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (0%)       0 (</span><span style="color:#B392F0;">0%</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pods</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">           </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">nginx-low-pc</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">/1</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Running</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">22</span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx-low-pc</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Allocated</span><span style="color:#24292E;"> </span><span style="color:#032F62;">resources:</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#6F42C1;">Total</span><span style="color:#24292E;"> </span><span style="color:#032F62;">limits</span><span style="color:#24292E;"> </span><span style="color:#032F62;">may</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#032F62;">percent,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i.e.,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">overcommitted.</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Resource</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Requests</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Limits</span></span>
<span class="line"><span style="color:#6F42C1;">--------</span><span style="color:#24292E;">           </span><span style="color:#005CC5;">--------</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">------</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">cpu</span><span style="color:#24292E;">                </span><span style="color:#005CC5;">1220</span><span style="color:#032F62;">m</span><span style="color:#24292E;"> (61%)  1300m (</span><span style="color:#6F42C1;">65%</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">#Node的CPU使用率已经过半</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">memory</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">64</span><span style="color:#032F62;">Mi</span><span style="color:#24292E;"> (1%)    128Mi (</span><span style="color:#6F42C1;">3%</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ephemeral-storage</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (0%)       0 (</span><span style="color:#6F42C1;">0%</span><span style="color:#24292E;">)</span></span></code></pre></div><p>现在我们再创建高优先级 Pod 命名为 nginx-high-pc，可以看到低优先级 Pod nginx-low-pc 由于高优先级的资源抢占被驱逐，运行状态也从 Runing 状态变为了 Terminating：</p><pre><code>$ kubectl get pods
NAME            READY   STATUS        RESTARTS   AGE
nginx-high-pc   0/1     Pending       0          7s
nginx-low-pc    0/1     Terminating   0          87s
$ kubectl get pods
NAME            READY   STATUS    RESTARTS   AGE
nginx-high-pc   1/1     Running   0          12s
</code></pre><p>最终，高优先级 Pod 成功完成了抢占，整个节点上只有它在运行。当新 Pod 被创建后，它们就进入了调度器的队列，等待被调度。调度器会根据 PriorityClass 的优先级来挑选出优先级最高的 Pod，并且尝试把它调度到一个节点上。</p><p>如果这个时候没有任何一个节点能够满足这个 Pod的所有要求，包括资源、调度偏好等要求，就会触发抢占逻辑。调度器会尝试寻找一个节点，通过移除一个或者多个比该 Pod 的优先级低的 Pod， 尝试使目标 Pod 可以被调度。</p><p>如果找到了这样一个节点，那么运行在该节点上的一个或者多个低优先级的 Pod 就会被驱逐，这样这个高优先级的 Pod 就可以调度到目标节点上了。哈哈，是不是有点&quot;鸠占鹊巢&quot;的感觉！</p><p>当然对于某些场景，如果你并不希望 Pod 被驱逐掉，只是希望可以优先调度，那么你可以使用<a href="https://kubernetes.io/zh/docs/concepts/configuration/pod-priority-preemption/#non-preempting-priority-class" target="_blank" rel="noreferrer">非抢占式的 PriorityClass</a>。比如这是一个非抢占式的 PriorityClass 的配置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">scheduling.k8s.io/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">PriorityClass</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">high-priority-nonpreempting</span></span>
<span class="line"><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000000</span></span>
<span class="line"><span style="color:#85E89D;">preemptionPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span></span>
<span class="line"><span style="color:#85E89D;">globalDefault</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;This priority class will not cause other pods to be preempted.&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">scheduling.k8s.io/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">PriorityClass</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">high-priority-nonpreempting</span></span>
<span class="line"><span style="color:#22863A;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000000</span></span>
<span class="line"><span style="color:#22863A;">preemptionPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span></span>
<span class="line"><span style="color:#22863A;">globalDefault</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#22863A;">description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;This priority class will not cause other pods to be preempted.&quot;</span></span></code></pre></div><p>这个配置跟我们上面的定义基本一致，只不过多了一个字段 preemptionPolicy。这样就可以避免属于该 PriorityClass 的 Pod 抢占其他 Pod。当然你也可以通过给 kube-scheduler 设置参数禁用抢占能力。但是关键组件的 Pod 还是依赖调度器这种抢占机制，以便在集群资源压力较大时可以优先得到调度。因此，不建议你禁用抢占能力。</p><p>kube-scheduler 的抢占能力是通过 disablePreemption 这个参数来控制的，该标志默认为 false。如果你还是坚持禁用抢占，可以将 disablePreemption 设置为true，目前这一参数的配置，只能通过 KubeSchedulerConfiguration 来设置，即：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">kubescheduler.config.k8s.io/v1alpha1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">KubeSchedulerConfiguration</span></span>
<span class="line"><span style="color:#85E89D;">algorithmSource</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">provider</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">DefaultProvider</span></span>
<span class="line"><span style="color:#B392F0;">...</span></span>
<span class="line"><span style="color:#85E89D;">disablePreemption</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">kubescheduler.config.k8s.io/v1alpha1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">KubeSchedulerConfiguration</span></span>
<span class="line"><span style="color:#22863A;">algorithmSource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">provider</span><span style="color:#24292E;">: </span><span style="color:#032F62;">DefaultProvider</span></span>
<span class="line"><span style="color:#6F42C1;">...</span></span>
<span class="line"><span style="color:#22863A;">disablePreemption</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span></code></pre></div><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>提高集群的资源利用率最常见的做法就是采用优先级的方案。在实际使用的时候，要避免恶意用户创建高优先级的 Pod，这样会导致其他 Pod 被驱逐或者无法调度，严重影响集群的稳定性和安全性。集群管理员可以为特定用户创建特定优先级级别，来防止他们恶意使用高优先级的 PriorityClass。</p><p>到这里这节课就结束了，如果你对本节课有什么想法或者疑问，欢迎你在留言区留言，我们一起讨论。</p>`,48),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
